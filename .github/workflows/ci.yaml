name: CI
on:
#  push:
#    tags:
#      - "v*.*.*"
#    branches:
#      - main
#  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  checks: write
  pull-requests: write

env:
  BUILD_TARGET: "x86_64-unknown-linux-gnu"
  VCPKG_DEFAULT_TRIPLET: "x64-mingw-dynamic"
  VCPKG_ENABLE_METRICS: 0
  MINGW_PACKAGE: "https://github.com/niXman/mingw-builds-binaries/releases/download/14.2.0-rt_v12-rev2/x86_64-14.2.0-release-posix-seh-ucrt-rt_v12-rev2.7z"

jobs:
  build:
    env:
      CARGO_BUILD_JOBS: 2
      VCPKG_PKG_INSTALL_DIR: "${{ github.workspace }}/vcpkg_installed/"
      PROTOC: "${{ github.workspace }}/vcpkg_installed/x64-mingw-dynamic/tools/protobuf/protoc.exe"
      PROTOC_INCLUDE: "${{ github.workspace }}/vcpkg_installed/x64-mingw-dynamic/include"
#    runs-on: blacksmith-16vcpu-ubuntu-2204
    runs-on: self-hosted
    defaults:
      run:
        shell: pwsh
    steps:
      - name: Update PATH # for security reasons github requires the PATH to be appended via commands
        run: |
          echo "${{ github.workspace }}/mingw64/bin/" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "${{ github.workspace }}/vcpkg_installed/x64-mingw-dynamic/bin/" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "C:/Program Files/7-Zip/" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: recursive
      - name: Fetch tag
        run: git fetch origin --deepen=1
        
      - name: Download MinGW # TODO CACHE
        run: |
          Invoke-WebRequest -Uri $env:MINGW_PACKAGE -Out mingw-w64.7z
          7z.exe x "mingw-w64.7z" -aoa -r
          gcc --version
        
      - name: Setup anew (or from cache) vcpkg (and does not build any package)
        uses: lukka/run-vcpkg@v11
        id: runvcpkg
        with:
          vcpkgDirectory: "C:/vcpkg"
          runVcpkgInstall: true
          doNotUpdateVcpkg: true
          doNotCache: true
          runVcpkgFormatString: '[`install`,`--recurse`,`--clean-after-build`,`--x-install-root`,"${{ env.VCPKG_PKG_INSTALL_DIR }}",`--triplet`,`$[env.VCPKG_DEFAULT_TRIPLET]`]'
            
      - name: Setup Rust
        run: |
          rustup install stable-gnu
          rustup update stable-gnu --no-self-update
          rustup set default-host x86_64-pc-windows-gnu
          rustup override set stable-x86_64-pc-windows-gnu
      - uses: useblacksmith/rust-cache@v3
        with:
          prefix-key: v3-rust
          shared-key: debug
          cache-all-crates: true
          save-if: true
      - uses: davidB/rust-cargo-make@v1
      - name: Building all executables
        env:
          QUIET: true
        run: |
          cargo make --profile ci build
        timeout-minutes: 180

  unit-tests-and-checks:
    if: false
    env:
      CARGO_BUILD_JOBS: 10
    #    runs-on: blacksmith-16vcpu-ubuntu-2204
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: recursive
      - name: Fetch tag
        run: git fetch origin --deepen=1
      - name: Set up MinGW
        uses: egor-tensin/setup-mingw@v2
        with:
          platform: x64
          static: false
          version: 14.2.0
      - name: Setup Rust
        run: |
          rustup install stable-gnu
          rustup update stable-gnu --no-self-update
          rustup set default-host x86_64-pc-windows-gnu
          rustup override set stable-x86_64-pc-windows-gnu
      - uses: useblacksmith/rust-cache@v3
        with:
          prefix-key: v3-rust
          shared-key: debug
          cache-all-crates: true
          save-if: true
      - uses: davidB/rust-cargo-make@v1
      - name: Setup anew (or from cache) vcpkg (and does not build any package)
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgDirectory: 'C:/vcpkg'
          runVcpkgInstall: true
      - name: Unit tests
        run: cargo make --profile ci unit-tests
      - name: Check formatting and clippy rules
        run: cargo make --profile ci check
      - name: Check openapi is up to date
        run: cargo make --profile ci check-openapi
      - name: Check configs are up to date
        run: cargo make --profile ci check-configs
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v4
        if: always()
        with:
          report_paths: "**/target/report-*.xml"
          detailed_summary: true
          include_passed: true
