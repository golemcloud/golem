name: On Demand Benchmark
on:
  issue_comment:
    types: [created]

jobs:
  run-benchmark:
    if: ${{ github.event.issue.pull_request && contains(github.event.comment.body, '/run-benchmark') }}
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - id: 'get-branch'
        run: echo ::set-output name=branch::$(gh pr view $PR_NO --repo $REPO --json headRefName --jq '.headRefName')
        env:
          REPO: ${{ github.repository }}
          PR_NO: ${{ github.event.issue.number }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.get-branch.outputs.branch }}
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Build Benchmark Report Job
        run: |
          echo "Building benchmark report job"
          cargo build --manifest-path=benchmark/Cargo.toml
      - name: Run Benchmark
        run: |
          echo "Running all benchmark jobs and saving to files"
      - name: Post results as a comment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          WORKFLOW_ID: ${{ github.run_id }}
          COMMENT_BODY: ${{ github.event.comment.body }}
        run: |
          #! /bin/bash
          
          # Create a dummy benchmark result
          mkdir -p ./benchmark-data-current
          
          # Replace these with original commands
          cp temporary.json benchmark-data-current/benchmark_cold_storage_small.json
          cp temporary.json benchmark-data-current/benchmark_cold_storage_medium.json
          cp temporary.json benchmark-data-current/benchmark_cold_storage_large.json
          cp temporary.json benchmark-data-current/unavailable.json
          cp temporary.json benchmark-data-current/unavailable2.json
          
          echo "Finished Running Benchmark Jobs"
          
          # Define the files to check
          files=("benchmark_cold_storage_large.json" "benchmark_cold_storage_small.json" "benchmark_cold_storage_medium.json" "unavailable.json" "unavailable2.json")
          
          echo "Checking the following files if it already exists in a previous benchmark run"
          for str in ${files[@]}; do
            echo $str
          done
          # Initialize arrays to store present and absent files
          present_files=()
          absent_files=()
          compare_command="./benchmark/target/debug/benchmark_report compare-benchmarks"
          get_report_command="./benchmark/target/debug/benchmark_report get-report"
          echo "Starting to pull the existing benchmark results if exists"
          
          if git fetch origin master:master && [[ ! "$COMMENT_BODY" =~ refresh ]]; then                              
             # Check each file
             for file in "${files[@]}"; do
                if git checkout master -- "benchmark-data/$file"; then
                  present_files+=("$file")
                  compare_command="$compare_command --files $file=$(pwd)/benchmark-data/$file,$(pwd)/benchmark-data-current/$file"
                else
                  absent_files+=("$file")
                  get_report_command="$get_report_command --files $file=$(pwd)/benchmark-data-current/$file"
                fi
             done
          else
            for file in "${files[@]}"; do
                absent_files+=("$file")
                get_report_command="$get_report_command --files $file=$(pwd)/benchmark-data-current/$file"
             done
          fi
          
          echo $compare_command
          echo $get_report_command
          
          # If there are present files, run the comparison
            if [ ${#present_files[@]} -ne 0 ]; then
               echo "Running comparison with command: $compare_command"
               $compare_command > benchmark_comparison.md
               COMPARISON_MD=$(<benchmark_comparison.md)
               curl -L \
               -X POST \
               -H "Accept: application/vnd.github+json" \
               -H "Authorization: Bearer $GITHUB_TOKEN" \
               -H "X-GitHub-Api-Version: 2022-11-28" \
               https://api.github.com/repos/afsalthaj/golem-timeline/issues/$ISSUE_NUMBER/comments \
               -d "{\"body\":\"$COMPARISON_MD \n RunID: $WORKFLOW_ID \"}"
            fi
          
          # Process absent files
          if [ ${#absent_files[@]} -ne 0 ]; then
               echo "Running report"
               $get_report_command > report.md
               echo "Successfully ran the report command"
               REPORT_MD=$(<report.md)
               echo "$REPORT_MD"
               curl -L \
               -X POST \
               -H "Accept: application/vnd.github+json" \
               -H "Authorization: Bearer $GITHUB_TOKEN" \
               -H "X-GitHub-Api-Version: 2022-11-28" \
               https://api.github.com/repos/afsalthaj/golem-timeline/issues/$ISSUE_NUMBER/comments \
               -d "{\"body\":\"$REPORT_MD \n RunID: $WORKFLOW_ID \"}"
          fi
          
          echo "Done processing files."

      - name: "Move benchmark-data-current to benchmark-data"
        run: |
          # Removing the old benchmark data
          rm -rf benchmark-data
          rm -rf benchmark_comparison.md
          rm -rf report.md
          # Moving the current benchmark data to benchmark-data
          mv benchmark-data-current benchmark-data
      - name: Commit and push benchmark results temporarily
        run: |
          git branch -a
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git pull 
          git add benchmark-data
          git commit -m "Adding benchmarking data"
          if git push; then
            echo "Successfully pushed the benchmark data"
          else
            echo "Benchmark data hasn't been pushed probably due to zero changes"
          fi

