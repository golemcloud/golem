syntax = "proto3";

import public "golem/common/account_id.proto";
import public "golem/worker/calling_convention.proto";
import public "golem/common/empty.proto";
import public "golem/worker/invocation_key.proto";
import public "golem/worker/log_event.proto";
import public "golem/worker/promise_id.proto";
import public "golem/common/resource_limits.proto";
import public "golem/shardmanager/shard_id.proto";
import public "golem/component/component_id.proto";
import public "golem/worker/update_mode.proto";
import public "golem/worker/worker_id.proto";
import public "golem/worker/worker_metadata.proto";
import public "golem/worker/worker_status.proto";
import public "golem/worker/worker_filter.proto";
import public "golem/worker/worker_execution_error.proto";
import public "wasm/rpc/val.proto";

package golem.workerexecutor;

service WorkerExecutor {
  rpc CreateWorker(CreateWorkerRequest) returns (CreateWorkerResponse);
  rpc GetInvocationKey(GetInvocationKeyRequest) returns (GetInvocationKeyResponse);
  rpc InvokeAndAwaitWorker(InvokeAndAwaitWorkerRequest) returns (InvokeAndAwaitWorkerResponse);
  rpc InvokeWorker(InvokeWorkerRequest) returns (InvokeWorkerResponse);
  rpc ConnectWorker(ConnectWorkerRequest) returns (stream golem.worker.LogEvent);
  rpc DeleteWorker(golem.worker.WorkerId) returns (DeleteWorkerResponse);
  rpc CompletePromise(CompletePromiseRequest) returns (CompletePromiseResponse);
  rpc InterruptWorker(InterruptWorkerRequest) returns (InterruptWorkerResponse);
  rpc RevokeShards(RevokeShardsRequest) returns (RevokeShardsResponse);
  rpc AssignShards(AssignShardsRequest) returns (AssignShardsResponse);
  rpc GetWorkerMetadata(golem.worker.WorkerId) returns (GetWorkerMetadataResponse);
  rpc ResumeWorker(ResumeWorkerRequest) returns (ResumeWorkerResponse);
  rpc GetRunningWorkersMetadata(GetRunningWorkersMetadataRequest) returns (GetRunningWorkersMetadataResponse);
  rpc GetWorkersMetadata(GetWorkersMetadataRequest) returns (GetWorkersMetadataResponse);
  rpc UpdateWorker(UpdateWorkerRequest) returns (UpdateWorkerResponse);
}

message InvokeWorkerResponse {
  oneof result {
    golem.common.Empty success = 1;
    golem.worker.WorkerExecutionError failure = 2;
  }
}

message DeleteWorkerResponse {
  oneof result {
    golem.common.Empty success = 1;
    golem.worker.WorkerExecutionError failure = 2;
  }
}

message CompletePromiseRequest {
  golem.worker.PromiseId promise_id = 1;
  bytes data = 2;
}

message CompletePromiseResponse {
  oneof result {
    CompletePromiseSuccess success = 1;
    golem.worker.WorkerExecutionError failure = 2;
  }
}

message CompletePromiseSuccess {
  bool completed = 1;
}

message InterruptWorkerResponse {
  oneof result {
    golem.common.Empty success = 1;
    golem.worker.WorkerExecutionError failure = 2;
  }
}

message CreateWorkerRequest {
  golem.worker.WorkerId worker_id = 1;
  uint64 component_version = 2;
  repeated string args = 3;
  map<string, string> env = 4;
  golem.common.AccountId account_id = 5;
  golem.common.ResourceLimits account_limits = 6;
}

message CreateWorkerResponse {
  oneof result {
    golem.common.Empty success = 1;
    golem.worker.WorkerExecutionError failure = 2;
  }
}

message GetInvocationKeyRequest {
  golem.worker.WorkerId worker_id = 1;
}

message GetInvocationKeyResponse {
  oneof result {
    GetInvocationKeySuccess success = 1;
    golem.worker.WorkerExecutionError failure = 2;
  }
}

message GetInvocationKeySuccess {
  golem.worker.InvocationKey invocation_key = 1;
}

message InvokeAndAwaitWorkerRequest {
  golem.worker.WorkerId worker_id = 1;
  string name = 2;
  repeated wasm.rpc.Val input = 3;
  golem.worker.InvocationKey invocation_key = 4;
  golem.worker.CallingConvention calling_convention = 5;
  golem.common.AccountId account_id = 6;
  golem.common.ResourceLimits account_limits = 7;
}

message InvokeAndAwaitWorkerResponse {
  oneof result {
    InvokeAndAwaitWorkerSuccess success = 1;
    golem.worker.WorkerExecutionError failure = 2;
  }
}

message InvokeAndAwaitWorkerSuccess {
  repeated wasm.rpc.Val output = 1;
}

message InvokeWorkerRequest {
  golem.worker.WorkerId worker_id = 1;
  string name = 2;
  repeated wasm.rpc.Val input = 3;
  golem.common.AccountId account_id = 4;
  golem.common.ResourceLimits account_limits = 5;
}

message ConnectWorkerRequest {
  golem.worker.WorkerId worker_id = 1;
  golem.common.AccountId account_id = 2;
  golem.common.ResourceLimits account_limits = 3;
}

message InterruptWorkerRequest {
  golem.worker.WorkerId worker_id = 1;
  bool recover_immediately = 2;
}

message RevokeShardsRequest {
  repeated golem.shardmanager.ShardId shard_ids = 1;
}

message RevokeShardsResponse {
  oneof result {
    golem.common.Empty success = 1;
    golem.worker.WorkerExecutionError failure = 2;
  }
}

message AssignShardsRequest {
  repeated golem.shardmanager.ShardId shard_ids = 1;
}

message AssignShardsResponse {
  oneof result {
    golem.common.Empty success = 1;
    golem.worker.WorkerExecutionError failure = 2;
  }
}

message GetWorkerMetadataResponse {
  oneof result {
    golem.worker.WorkerMetadata success = 1;
    golem.worker.WorkerExecutionError failure = 2;
  }
}

message ResumeWorkerRequest {
  golem.worker.WorkerId worker_id = 1;
}

message ResumeWorkerResponse {
  oneof result {
    golem.common.Empty success = 1;
    golem.worker.WorkerExecutionError failure = 2;
  }
}

message GetRunningWorkersMetadataRequest {
  golem.component.ComponentId component_id = 1;
  golem.worker.WorkerFilter filter = 2;
}


message GetRunningWorkersMetadataResponse {
  oneof result {
    GetRunningWorkersMetadataSuccessResponse success = 1;
    golem.worker.WorkerExecutionError failure = 2;
  }
}

message GetRunningWorkersMetadataSuccessResponse {
  repeated golem.worker.WorkerMetadata workers = 1;
}

message GetWorkersMetadataRequest {
  golem.component.ComponentId component_id = 1;
  golem.worker.WorkerFilter filter = 2;
  uint64 cursor = 3;
  uint64 count = 4;
  bool precise = 5;
}


message GetWorkersMetadataResponse {
  oneof result {
    GetWorkersMetadataSuccessResponse success = 1;
    golem.worker.WorkerExecutionError failure = 2;
  }
}

message GetWorkersMetadataSuccessResponse {
  repeated golem.worker.WorkerMetadata workers = 1;
  optional uint64 cursor = 2;
}

message UpdateWorkerRequest {
  golem.worker.WorkerId worker_id = 1;
  uint64 target_version = 2;
  golem.worker.UpdateMode mode = 3;
}

message UpdateWorkerResponse {
  oneof result {
    golem.common.Empty success = 1;
    golem.worker.WorkerExecutionError failure = 2;
  }
}