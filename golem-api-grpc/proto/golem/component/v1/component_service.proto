syntax = "proto3";

package golem.component.v1;

import "golem/common/environment.proto";
import "golem/common/empty.proto";
import "golem/component/agent.proto";
import "golem/component/component.proto";
import "golem/component/component_type.proto";
import "golem/component/dynamic_linked_instance.proto";
import "golem/component/v1/component_error.proto";
import "golem/component/component_id.proto";
import "golem/component/component_files.proto";
import "golem/component/plugin_installation.proto";
import "golem/auth/auth_ctx.proto";

service ComponentService {
  rpc GetComponents (GetComponentsRequest) returns (GetComponentsResponse);
  rpc DownloadComponent (DownloadComponentRequest) returns (stream DownloadComponentResponse);
  rpc GetComponentMetadata(GetVersionedComponentRequest) returns (GetComponentMetadataResponse);
  rpc GetLatestComponentMetadata (GetLatestComponentRequest) returns (GetComponentMetadataResponse);
  rpc GetInstalledPlugins (GetInstalledPluginsRequest) returns (GetInstalledPluginsResponse);
}

message GetComponentsRequest {
  golem.common.EnvironmentId environment_id = 1;
  optional string component_name = 2;
  golem.auth.AuthCtx auth_ctx = 3;
}

message GetComponentsResponse {
  oneof result {
    GetComponentsSuccessResponse success = 1;
    golem.component.v1.ComponentError error = 2;
  }
}

message GetComponentsSuccessResponse {
  repeated golem.component.Component components = 1;
}

message DownloadComponentRequest {
  golem.component.ComponentId componentId = 1;
  optional uint64 version = 2;
  golem.auth.AuthCtx auth_ctx = 3;
}

message DownloadComponentResponse {
  oneof result {
    bytes successChunk = 1;
    golem.component.v1.ComponentError error = 2;
  }
}

message GetVersionedComponentRequest {
  golem.component.ComponentId componentId = 1;
  uint64 version = 2;
  golem.auth.AuthCtx auth_ctx = 3;
}

message GetLatestComponentRequest {
  golem.component.ComponentId componentId = 1;
  golem.auth.AuthCtx auth_ctx = 2;
}

message GetComponentMetadataResponse {
  oneof result {
    GetComponentMetadataSuccessResponse success = 1;
    golem.component.v1.ComponentError error = 2;
  }
}

message GetComponentMetadataSuccessResponse {
  optional golem.component.Component component = 1;
}

message GetInstalledPluginsRequest {
  golem.component.ComponentId componentId = 1;
  optional uint64 version = 2;
  golem.auth.AuthCtx auth_ctx = 3;
}

message GetInstalledPluginsResponse {
  oneof result {
    GetInstalledPluginsSuccessResponse success = 1;
    golem.component.v1.ComponentError error = 2;
  }
}

message GetInstalledPluginsSuccessResponse {
  repeated golem.component.PluginInstallation installations = 1;
}
