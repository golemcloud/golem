syntax = "proto3";

package golem.template;

import public "golem/common/project_id.proto";
import public "golem/common/empty.proto";
import public "golem/template/template.proto";
import public "golem/template/template_error.proto";
import public "golem/template/template_id.proto";

service TemplateService {
  rpc GetTemplates (GetTemplatesRequest) returns (GetTemplatesResponse);
  rpc CreateTemplate (stream CreateTemplateRequest) returns (CreateTemplateResponse);
  rpc DownloadTemplate (DownloadTemplateRequest) returns (stream DownloadTemplateResponse);
  rpc GetTemplateMetadataAllVersions (GetTemplateRequest) returns (GetTemplateMetadataAllVersionsResponse);
  rpc GetLatestTemplateMetadata (GetLatestTemplateRequest) returns (GetTemplateMetadataResponse);
  rpc UpdateTemplate (stream UpdateTemplateRequest) returns (UpdateTemplateResponse);
  rpc GetTemplateMetadata(GetVersionedTemplateRequest) returns (GetTemplateMetadataResponse);
}

message GetTemplatesRequest {
  golem.common.ProjectId projectId = 1;
  optional string templateName = 2;
}

message GetTemplatesResponse {
  oneof result {
    GetTemplatesSuccessResponse success = 1;
    golem.template.TemplateError error = 2;
  }
}

message GetTemplatesSuccessResponse {
  repeated golem.template.Template templates = 1;
}

message CreateTemplateRequest {
  oneof data {
    CreateTemplateRequestHeader header = 1;
    CreateTemplateRequestChunk chunk = 2;
  }
}

message CreateTemplateRequestHeader {
  golem.common.ProjectId projectId = 1;
  string templateName = 2;
}

message CreateTemplateRequestChunk {
  bytes templateChunk = 1;
}

message CreateTemplateResponse {
  oneof result {
    golem.template.Template success = 1;
    golem.template.TemplateError error = 2;
  }
}

message DownloadTemplateRequest {
  golem.template.TemplateId templateId = 1;
  optional int32 version = 2;
}

message DownloadTemplateResponse {
  oneof result {
    bytes successChunk = 1;
    golem.template.TemplateError error = 2;
  }
}

message GetTemplateRequest {
  golem.template.TemplateId templateId = 1;
}

message GetVersionedTemplateRequest {
  golem.template.TemplateId templateId = 1;
  int32 version = 2;
}

message GetTemplateMetadataAllVersionsResponse {
  oneof result {
    GetTemplateSuccessResponse success = 1;
    golem.template.TemplateError error = 2;
  }
}

message GetTemplateMetadataResponse {
  oneof result {
    GetTemplateMetadataSuccessResponse success = 1;
    golem.template.TemplateError error = 2;
  }
}

message GetTemplateMetadataSuccessResponse {
  optional golem.template.Template template = 1;
}

message GetTemplateSuccessResponse {
  repeated golem.template.Template templates = 1;
}

message GetLatestTemplateRequest {
  golem.template.TemplateId templateId = 1;
}

message UpdateTemplateRequest {
  oneof data {
    UpdateTemplateRequestHeader header = 1;
    UpdateTemplateRequestChunk chunk = 2;
  }
}

message UpdateTemplateRequestHeader {
  golem.template.TemplateId templateId = 1;
}

message UpdateTemplateRequestChunk {
  bytes templateChunk = 1;
}

message UpdateTemplateResponse {
  oneof result {
    golem.template.Template success = 1;
    golem.template.TemplateError error = 2;
  }
}
