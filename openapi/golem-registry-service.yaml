openapi: 3.0.0
info:
  title: Golem API
  version: '1.0'
servers: []
tags:
- name: Account
  description: The account API allows users to query and manipulate their own account data.
- name: AccountSummary
- name: AgentTypes
  description: API working on registered agent types
- name: ApiCertificate
- name: ApiDefinition
- name: ApiDeployment
- name: ApiDomain
- name: ApiSecurity
- name: Application
- name: Component
- name: Debugging
- name: Deployment
- name: Environment
- name: EnvironmentPluginGrants
- name: EnvironmentShares
- name: Grant
- name: HealthCheck
- name: Limits
  description: The limits API allows users to query their current resource limits.
- name: Login
  description: The login endpoints are implementing an OAuth2 flow.
- name: Plugin
- name: Project
  description: |-
    Projects are groups of components and their workers, providing both a separate namespace for these entities and allows sharing between accounts.

    Every account has a default project which is assumed when no specific project ID is passed in some component and worker related APIs.
- name: ProjectGrant
  description: |-
    Projects can have grants providing access to other accounts than the project's owner.

    The project grant API allows listing, creating and deleting such grants. What the grants allow exactly are defined by policies, covered by the Project policy API.
- name: ProjectPolicy
  description: Project policies describe a set of actions one account can perform when it was associated with a grant for a project.
- name: RegistryService
- name: Token
  description: The token API allows creating custom access tokens for the Golem Cloud REST API to be used by tools and services.
- name: Worker
paths:
  /healthcheck:
    get:
      tags:
      - HealthCheck
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/HealthcheckResponse'
      operationId: healthcheck
  /version:
    get:
      tags:
      - HealthCheck
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/VersionInfo'
      operationId: version
  /v1/accounts/{account_id}/apps:
    get:
      tags:
      - RegistryService
      - Account
      - Application
      summary: Get all applications in the account
      parameters:
      - name: account_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_Application'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: list_account_applications
    post:
      tags:
      - RegistryService
      - Account
      - Application
      summary: Create an application in the account
      parameters:
      - name: account_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/ApplicationCreation'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Application'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: create_application
  /v1/accounts/{account_id}/apps/{application_name}:
    get:
      tags:
      - RegistryService
      - Account
      - Application
      summary: Get application in the account by name
      parameters:
      - name: account_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      - name: application_name
        schema:
          type: string
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Application'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: get_account_application
  /v1/accounts/{account_id}/tokens:
    get:
      tags:
      - RegistryService
      - Account
      - Token
      summary: Get all tokens
      description: |-
        Gets all created tokens of an account.
        The format of each element is the same as the data object in the oauth2 endpoint's response.
      parameters:
      - name: account_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_Token'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: get_account_tokens
    post:
      tags:
      - RegistryService
      - Account
      - Token
      summary: Create new token
      description: |
        Creates a new token with a given expiration date.
        The response not only contains the token data but also the secret which can be passed as a bearer token to the Authorization header to the Golem Cloud REST API.
      parameters:
      - name: account_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/TokenCreation'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/TokenWithSecret'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: create_token
  /v1/accounts:
    post:
      tags:
      - RegistryService
      - Account
      summary: Create account
      description: Create a new account. The response is the created account data.
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/AccountCreation'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Account'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: create_account
  /v1/accounts/{account_id}:
    get:
      tags:
      - RegistryService
      - Account
      summary: Get account
      description: Retrieve an account for a given Account ID
      parameters:
      - name: account_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Account'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: get_account
    put:
      tags:
      - RegistryService
      - Account
      summary: Update account
      description: |-
        Allows the user to change the account details such as name and email.

        Changing the planId is not allowed and the request will be rejected.
        The response is the updated account data.
      parameters:
      - name: account_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/AccountUpdate'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Account'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: update_account
    delete:
      tags:
      - RegistryService
      - Account
      summary: Delete account
      description: Delete an account.
      parameters:
      - name: account_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Empty'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: delete_account
  /v1/accounts/{account_id}/plan:
    get:
      tags:
      - RegistryService
      - Account
      summary: Get account's plan
      parameters:
      - name: account_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Plan'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: get_account_plan
  /v1/accounts/{account_id}/roles:
    put:
      tags:
      - RegistryService
      - Account
      summary: Update roles of an accout
      parameters:
      - name: account_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AccountRole'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Account'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: set_account_roles
  /v1/accounts/{account_id}/plugins:
    post:
      tags:
      - RegistryService
      - Account
      - Plugin
      summary: Register a new plugin
      parameters:
      - name: account_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
              - metadata
              properties:
                metadata:
                  $ref: '#/components/schemas/PluginRegistrationCreation'
                pluginWasm:
                  type: string
                  format: binary
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/PluginRegistrationDto'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: create_plugin
    get:
      tags:
      - RegistryService
      - Account
      - Plugin
      summary: Get all plugins registered in account
      parameters:
      - name: account_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_PluginRegistrationDto'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: get_account_plugins
  /v1/api-definitions/{api_definition_id}:
    get:
      tags:
      - RegistryService
      - ApiDefinition
      summary: Get api-definition by id
      parameters:
      - name: api_definition_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/HttpApiDefinitionResponseView'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: get_api_definition
    patch:
      tags:
      - RegistryService
      - ApiDefinition
      summary: update api-definition
      parameters:
      - name: api_definition_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/UpdateHttpApiDefinitionRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/HttpApiDefinitionResponseView'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: update_api_definition
  /v1/api-definitions/{api_definition_id}/revisions:
    get:
      tags:
      - RegistryService
      - ApiDefinition
      summary: Get revisions of the api definition
      parameters:
      - name: api_definition_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_HttpApiDefinitionResponseView'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: get_api_definition_revisions
  /v1/api-definitions/{api_definition_id}/revisions/{revision}:
    get:
      tags:
      - RegistryService
      - ApiDefinition
      summary: Get specific revision of an api definition
      parameters:
      - name: api_definition_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      - name: revision
        schema:
          type: integer
          format: uint64
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/HttpApiDefinitionResponseView'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: get_api_definition_revision
  /v1/api-deployments/{api_deployment_id}:
    get:
      tags:
      - RegistryService
      - ApiDeployment
      summary: Get an api-deployment by id
      parameters:
      - name: api_deployment_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ApiDeployment'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: get_api_deployment
    patch:
      tags:
      - RegistryService
      - ApiDeployment
      summary: Update an api-deployment
      parameters:
      - name: api_deployment_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/UpdateApiDeploymentRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ApiDeployment'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: update_api_deployment
  /v1/api-deployments/{api_deployment_id}/revisions:
    get:
      tags:
      - RegistryService
      - ApiDeployment
      summary: Get all revisions for an api-deployment
      parameters:
      - name: api_deployment_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_ApiDeployment'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: get_api_deployment_revisions
  /v1/api-deployments/{api_deployment_id}/revisions/{revision}:
    get:
      tags:
      - RegistryService
      - ApiDeployment
      summary: Get specific revision an api-deployment
      parameters:
      - name: api_deployment_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      - name: revision
        schema:
          type: integer
          format: uint64
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ApiDeployment'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: get_api_deployment_revision
  /v1/domains/{domain_id}:
    get:
      tags:
      - RegistryService
      - ApiDomain
      summary: Get api domain by id
      parameters:
      - name: domain_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ApiDomain'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: get_domain
    patch:
      tags:
      - RegistryService
      - ApiDomain
      summary: Update an api-domain
      parameters:
      - name: domain_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/UpdateApiDomainRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ApiDomain'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: update_domain
  /v1/domains/{domain_id}/revisions:
    get:
      tags:
      - RegistryService
      - ApiDomain
      summary: Get all revisions of an api-domain
      parameters:
      - name: domain_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_ApiDomain'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: get_domain_revisions
  /v1/apps/{application_id}:
    get:
      tags:
      - RegistryService
      - Application
      summary: Get application by id.
      parameters:
      - name: application_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Application'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: get_application
    patch:
      tags:
      - RegistryService
      - Application
      summary: Update application by id.
      parameters:
      - name: application_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/ApplicationUpdate'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Application'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: update_application
    delete:
      tags:
      - RegistryService
      - Application
      summary: Update application by id.
      parameters:
      - name: application_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '204':
          description: ''
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: delete_application
  /v1/apps/{application_id}/envs:
    get:
      tags:
      - RegistryService
      - Application
      - Environment
      summary: List all application environments
      parameters:
      - name: application_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_Environment'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: list_application_environments
    post:
      tags:
      - RegistryService
      - Application
      - Environment
      summary: Create an application environment
      parameters:
      - name: application_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/EnvironmentCreation'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Environment'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: create_environment
  /v1/apps/{application_id}/envs/{environment_name}:
    get:
      tags:
      - RegistryService
      - Application
      - Environment
      summary: Get application environment by name
      parameters:
      - name: application_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      - name: environment_name
        schema:
          type: string
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Environment'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: get_application_environment
  /v1/certificates/{certificate_id}:
    get:
      tags:
      - RegistryService
      - ApiCertificate
      summary: Get a certificate by id
      parameters:
      - name: certificate_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/CertificateResponseView'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: get_certificate
    patch:
      tags:
      - RegistryService
      - ApiCertificate
      summary: Update a certificate
      parameters:
      - name: certificate_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/UpdateCertificateRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/CertificateResponseView'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: update_certificate
  /v1/certificates/{certificate_id}/revisions:
    get:
      tags:
      - RegistryService
      - ApiCertificate
      summary: Get all revisions of a certificate
      parameters:
      - name: certificate_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_CertificateResponseView'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: get_certificate_revisions
  /v1/components/{component_id}:
    get:
      tags:
      - RegistryService
      - Component
      summary: Get a component by id
      parameters:
      - name: component_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ComponentDto'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: get_component
    patch:
      tags:
      - RegistryService
      - Component
      summary: Update a component
      description: The request body is encoded as multipart/form-data containing metadata and the WASM binary.
      parameters:
      - name: component_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
              - metadata
              properties:
                metadata:
                  $ref: '#/components/schemas/ComponentUpdate'
                newComponentWasm:
                  type: string
                  format: binary
                newFiles:
                  type: string
                  format: binary
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ComponentDto'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: update_component
  /v1/components/{component_id}/revisions/{revision}:
    get:
      tags:
      - RegistryService
      - Component
      summary: Get specific revision of a component
      parameters:
      - name: component_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      - name: revision
        schema:
          type: integer
          format: uint64
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ComponentDto'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: get_component_revision
  /v1/components/{component_id}/revisions/{revision}/wasm:
    get:
      tags:
      - RegistryService
      - Component
      summary: Get the component wasm binary of a specific revision
      parameters:
      - name: component_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      - name: revision
        schema:
          type: integer
          format: uint64
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: get_component_wasm
  /v1/envs/{environment_id}/api-definitions:
    post:
      tags:
      - RegistryService
      - Environment
      - ApiDefinition
      summary: Create a new api-definition in the environment
      parameters:
      - name: environment_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/CreateHttpApiDefinitionRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/HttpApiDefinitionResponseView'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: create_api_definition
    get:
      tags:
      - RegistryService
      - Environment
      - ApiDefinition
      summary: Get all api-definitions in the environment
      parameters:
      - name: environment_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_HttpApiDefinitionResponseView'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: get_environment_api_definitions
  /v1/envs/{environment_id}/api-definitions/{api_definition_name}:
    get:
      tags:
      - RegistryService
      - Environment
      - ApiDefinition
      summary: Get api-definition by name
      parameters:
      - name: environment_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      - name: api_definition_name
        schema:
          type: string
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/HttpApiDefinitionResponseView'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: get_environment_api_definition
  /v1/envs/{environment_id}/deployments/{deployment_revision_id}/api-definitions:
    get:
      tags:
      - RegistryService
      - Environment
      - ApiDefinition
      - Deployment
      summary: Get all api-definitions in a specific deployment
      parameters:
      - name: environment_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      - name: deployment_revision_id
        schema:
          type: integer
          format: uint64
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_HttpApiDefinitionResponseView'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: get_deployment_api_definitions
  /v1/envs/{environment_id}/deployments/{deployment_revision_id}/api-definitions/{api_definition_name}:
    get:
      tags:
      - RegistryService
      - Environment
      - ApiDefinition
      - Deployment
      summary: Get api-definition in a deployment by name
      parameters:
      - name: environment_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      - name: deployment_revision_id
        schema:
          type: integer
          format: uint64
        in: path
        required: true
        deprecated: false
        explode: true
      - name: api_definition_name
        schema:
          type: string
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/HttpApiDefinitionResponseView'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: get_deployment_api_definition
  /v1/envs/{environment_id}/api-deployments:
    post:
      tags:
      - RegistryService
      - Environment
      - ApiDeployment
      summary: Create a new api deployment
      parameters:
      - name: environment_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/CreateApiDeploymentRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ApiDeployment'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: create_api_deployment
    get:
      tags:
      - RegistryService
      - Environment
      - ApiDeployment
      summary: Get all api-deployments in the environment
      parameters:
      - name: environment_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_ApiDeployment'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: get_environment_api_deployments
  /v1/envs/{environment_id}/api-deployments/{site}:
    get:
      tags:
      - RegistryService
      - Environment
      - ApiDeployment
      summary: Get api-deployment by site
      parameters:
      - name: environment_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      - name: site
        schema:
          type: string
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ApiDeployment'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: get_environment_api_deployment
  /v1/envs/{environment_id}/deployments/{deployment_revision_id}/api-deployments:
    get:
      tags:
      - RegistryService
      - Environment
      - ApiDeployment
      - Deployment
      summary: Get all api-deployments in a specific deployment
      parameters:
      - name: environment_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      - name: deployment_revision_id
        schema:
          type: integer
          format: uint64
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_ApiDeployment'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: get_deployment_api_deployments
  /v1/envs/{environment_id}/deployments/{deployment_revision_id}/api-deployments/{site}:
    get:
      tags:
      - RegistryService
      - Environment
      - ApiDeployment
      - Deployment
      summary: Get api-deployment in a deployment by site
      parameters:
      - name: environment_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      - name: deployment_revision_id
        schema:
          type: integer
          format: uint64
        in: path
        required: true
        deprecated: false
        explode: true
      - name: site
        schema:
          type: string
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ApiDeployment'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: get_deployment_api_deployment
  /v1/envs/{environment_id}/domains:
    get:
      tags:
      - RegistryService
      - Environment
      - ApiDomain
      summary: Get all API domains
      parameters:
      - name: environment_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_ApiDomain'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: get_domains
    post:
      tags:
      - RegistryService
      - Environment
      - ApiDomain
      summary: Create a new api-domain in the environment
      parameters:
      - name: environment_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/CreateApiDomainRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ApiDomain'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: create_domain
  /v1/envs/{environment_id}/domains/{domain}:
    get:
      tags:
      - RegistryService
      - Environment
      - ApiDomain
      summary: Get an api-domain in the environment
      parameters:
      - name: environment_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      - name: domain
        schema:
          type: string
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ApiDomain'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: get_environment_domain
  /v1/envs/{environment_id}/certificates:
    get:
      tags:
      - RegistryService
      - Environment
      - ApiCertificate
      summary: Get all certificates in this environment
      parameters:
      - name: environment_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_CertificateResponseView'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: get_environment_certificates
    post:
      tags:
      - RegistryService
      - Environment
      - ApiCertificate
      summary: Creates a new certificate
      description: |-
        A certificate is associated with a given Golem project and domain, and consists of
        a key pair.

        The created certificate will be associated with a certificate ID returned by this endpoint.
      parameters:
      - name: environment_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/CreateCertificateRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/CertificateResponseView'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: create_environment_certificate
  /v1/envs/{environment_id}/certificates/{certificate_name}:
    get:
      tags:
      - RegistryService
      - Environment
      - ApiCertificate
      summary: Get a certificate in this environment
      parameters:
      - name: environment_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      - name: certificate_name
        schema:
          type: string
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/CertificateResponseView'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: get_environment_certificate
  /v1/envs/{environment_id}/components:
    post:
      tags:
      - RegistryService
      - Environment
      - Component
      summary: Create a new component in the environment
      description: The request body is encoded as multipart/form-data containing metadata and the WASM binary.
      parameters:
      - name: environment_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
              - metadata
              - componentWasm
              properties:
                metadata:
                  $ref: '#/components/schemas/ComponentCreation'
                componentWasm:
                  type: string
                  format: binary
                files:
                  type: string
                  format: binary
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ComponentDto'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: create_component
    get:
      tags:
      - RegistryService
      - Environment
      - Component
      summary: Get all components in the environment
      parameters:
      - name: environment_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_ComponentDto'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: get_environment_components
  /v1/envs/{environment_id}/components/{component_name}:
    get:
      tags:
      - RegistryService
      - Environment
      - Component
      summary: Get a component in the environment by name
      parameters:
      - name: environment_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      - name: component_name
        schema:
          type: string
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ComponentDto'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: get_environment_component
  /v1/envs/{environment_id}/deployments/{deployment_revision_id}/components:
    get:
      tags:
      - RegistryService
      - Environment
      - Component
      - Deployment
      summary: Get all components in a specific deployment
      parameters:
      - name: environment_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      - name: deployment_revision_id
        schema:
          type: integer
          format: uint64
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_ComponentDto'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: get_deployment_components
  /v1/envs/{environment_id}/deployments/{deployment_revision_id}/components/{component_name}:
    get:
      tags:
      - RegistryService
      - Environment
      - Component
      - Deployment
      summary: Get component in a deployment by name
      parameters:
      - name: environment_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      - name: deployment_revision_id
        schema:
          type: integer
          format: uint64
        in: path
        required: true
        deprecated: false
        explode: true
      - name: component_name
        schema:
          type: string
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ComponentDto'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: get_deployment_component
  /v1/envs/{environment_id}:
    get:
      tags:
      - RegistryService
      - Environment
      summary: Get environment by id.
      parameters:
      - name: environment_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Environment'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: get_environment
    patch:
      tags:
      - RegistryService
      - Environment
      summary: Update environment by id.
      parameters:
      - name: environment_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/EnvironmentUpdate'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Environment'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: update_environment
    delete:
      tags:
      - RegistryService
      - Environment
      summary: Delete environment by id.
      parameters:
      - name: environment_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '204':
          description: ''
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: delete_environment
  /v1/envs/{environment_id}/plan:
    get:
      tags:
      - RegistryService
      - Environment
      summary: Get the current deployment plan
      parameters:
      - name: environment_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/DeploymentPlan'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: get_environment_deployment_plan
  /v1/envs/{environment_id}/deployments:
    get:
      tags:
      - RegistryService
      - Environment
      - Deployment
      summary: Get all deployments in this environment
      parameters:
      - name: environment_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_Deployment'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: get_deployments
    post:
      tags:
      - RegistryService
      - Environment
      - Deployment
      summary: Deploy the current staging area of this environment
      parameters:
      - name: environment_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/DeploymentCreation'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Deployment'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: deploy_environment
  /v1/envs/{environment_id}/deployments/{deployment_id}/plan:
    get:
      tags:
      - RegistryService
      - Environment
      summary: Get the deployment plan of a deployed deployment
      parameters:
      - name: environment_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      - name: deployment_id
        schema:
          type: integer
          format: uint64
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/DeploymentPlan'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: get_environment_deployed_deployment_plan
  /v1/envs/{environment_id}/shares:
    post:
      tags:
      - RegistryService
      - Environment
      - EnvironmentShares
      summary: Deploy the current staging area of this environment
      parameters:
      - name: environment_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/EnvironmentShareCreation'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EnvironmentShare'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: create_environment_share
    get:
      tags:
      - RegistryService
      - Environment
      - EnvironmentShares
      summary: Deploy the current staging area of this environment
      parameters:
      - name: environment_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_EnvironmentShare'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: get_environment_shares
  /v1/envs/{environment_id}/plugins:
    post:
      tags:
      - RegistryService
      - Environment
      - EnvironmentPluginGrants
      summary: Create a new environment plugin grant
      parameters:
      - name: environment_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/EnvironmentPluginGrantCreation'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EnvironmentPluginGrant'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: create_environment_plugin_grant
    get:
      tags:
      - RegistryService
      - Environment
      - EnvironmentPluginGrants
      summary: List all environment plugin grants in the environment
      parameters:
      - name: environment_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_EnvironmentPluginGrant'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: list_environment_plugin_grants
  /v1/envs/{environment_id}/security-schemes:
    get:
      tags:
      - RegistryService
      - Environment
      - ApiSecurity
      summary: Get all security schemes in the environment
      parameters:
      - name: environment_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_SecuritySchemeResponseView'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: get_environment_security_schemes
    post:
      tags:
      - RegistryService
      - Environment
      - ApiSecurity
      summary: Create a new security scheme in the environment
      parameters:
      - name: environment_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/CreateSecuritySchemeRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/SecuritySchemeResponseView'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: create_environment_security_scheme
  /v1/envs/{environment_id}/security-schemes/{security_scheme_name}:
    get:
      tags:
      - RegistryService
      - Environment
      - ApiSecurity
      summary: Get a security scheme
      description: Get a security scheme by name
      parameters:
      - name: environment_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      - name: security_scheme_name
        schema:
          type: string
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/SecuritySchemeResponseView'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: get_environment_security_scheme
  /v1/environment-plugins/{environment_plugin_grant_id}:
    get:
      tags:
      - RegistryService
      - EnvironmentPluginGrants
      - EnvironmentPluginGrants
      summary: Get environment grant by id
      parameters:
      - name: environment_plugin_grant_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EnvironmentPluginGrant'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: get_environment_plugin_grant
    delete:
      tags:
      - RegistryService
      - EnvironmentPluginGrants
      - EnvironmentPluginGrants
      summary: Get environment grant by id
      parameters:
      - name: environment_plugin_grant_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '204':
          description: ''
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: delete_environment_plugin_grant
  /v1/environment-shares/{environment_share_id}:
    get:
      tags:
      - RegistryService
      - EnvironmentShares
      summary: Get environment share by id.
      parameters:
      - name: environment_share_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EnvironmentShare'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: get_environment_share
    patch:
      tags:
      - RegistryService
      - EnvironmentShares
      summary: Update environment share
      parameters:
      - name: environment_share_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/EnvironmentShareUpdate'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EnvironmentShare'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: update_environment_share
    delete:
      tags:
      - RegistryService
      - EnvironmentShares
      summary: Delete environment share
      parameters:
      - name: environment_share_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EnvironmentShare'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: delete_environment_share
  /v1/login/v1/oauth2:
    post:
      tags:
      - RegistryService
      - Login
      summary: Acquire token with OAuth2 authorization
      description: |
        Gets a token by authorizing with an external OAuth2 provider. Currently only github is supported.

        In the response:
        - `id` is the identifier of the token itself
        - `accountId` is the account's identifier, can be used on the account API
        - `secret` is the secret key to be sent in the Authorization header as a bearer token for all the other endpoints
      parameters:
      - name: provider
        schema:
          $ref: '#/components/schemas/OAuth2Provider'
        in: query
        description: Currently only `github` is supported.
        required: true
        deprecated: false
        explode: true
      - name: access-token
        schema:
          type: string
        in: query
        description: OAuth2 access token
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/TokenWithSecret'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      operationId: login_oauth2
  /v1/login/token:
    get:
      tags:
      - RegistryService
      - Login
      summary: Get information about a token
      description: |-
        Gets information about a token that is selected by the secret key passed in the Authorization header.
        The JSON is the same as the data object in the oauth2 endpoint's response.
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Token'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: current_login_token
  /v1/login/oauth2/device/start:
    post:
      tags:
      - RegistryService
      - Login
      summary: Start OAuth2 interactive flow
      description: |-
        Starts an interactive authorization flow.
        The user must open the returned url and enter the userCode in a form before the expires deadline.
        Then the finish GitHub OAuth2 interactive flow endpoint must be called with the encoded session to finish the flow.
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/OAuth2DeviceFlowStartRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/OAuth2DeviceflowData'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      operationId: start_oauth2_device_flow
  /v1/login/oauth2/device/complete:
    post:
      tags:
      - RegistryService
      - Login
      summary: Finish GitHub OAuth2 interactive flow
      description: |-
        Finishes an interactive authorization flow. The returned JSON is equivalent to the oauth2 endpoint's response.
        Returns a JSON string containing the encodedSession from the start endpoint's response.
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              type: string
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/TokenWithSecret'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      operationId: complete_oauth2_device_flow
  /v1/login/oauth2/web/authorize:
    get:
      tags:
      - RegistryService
      - Login
      summary: Initiate OAuth2 Web Flow
      description: Starts the OAuth2 web flow authorization process by returning the authorization URL for the given provider.
      parameters:
      - name: provider
        schema:
          $ref: '#/components/schemas/OAuth2Provider'
        in: query
        description: Currently only `github` is supported.
        required: true
        deprecated: false
        explode: true
      - name: redirect
        schema:
          type: string
        in: query
        description: The redirect URL to redirect to after the user has authorized the application
        required: false
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/OAuth2WebflowData'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      operationId: start_oauth2_webflow
  /v1/login/oauth2/web/callback:
    get:
      tags:
      - RegistryService
      - Login
      summary: OAuth2 Web Flow callback
      description: |-
        This endpoint handles the callback from the provider after the user has authorized the application.
        It exchanges the code for an access token and then uses that to log the user in.
      parameters:
      - name: code
        schema:
          type: string
        in: query
        description: The authorization code returned by GitHub
        required: true
        deprecated: false
        explode: true
      - name: state
        schema:
          type: string
          format: uuid
        in: query
        description: The state parameter for CSRF protection
        required: true
        deprecated: false
        explode: true
      responses:
        '302':
          description: Redirect to the given URL specified in the web flow start
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Empty'
          headers:
            LOCATION:
              required: true
              deprecated: false
              schema:
                type: string
        '200':
          description: OAuth flow has completed
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Empty'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      operationId: submit_oauth2_webflow_callback
  /v1/login/oauth2/web/poll:
    get:
      tags:
      - RegistryService
      - Login
      summary: Poll for OAuth2 Web Flow token
      description: |-
        This endpoint is used by clients to poll for the token after the user has authorized the application via the web flow.
        A given state might only be exchanged for a token once. Any further attempts to exchange the state will fail.
      parameters:
      - name: state
        schema:
          type: string
          format: uuid
        in: query
        description: The state parameter for identifying the session
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: OAuth flow has completed
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/TokenWithSecret'
        '202':
          description: OAuth flow is pending
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Empty'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      operationId: poll_oauth2_webflow
  /v1/plugins/{plugin_id}:
    get:
      tags:
      - RegistryService
      - Plugin
      summary: Get a plugin by id
      parameters:
      - name: plugin_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/PluginRegistrationDto'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: get_plugin_by_id
    delete:
      tags:
      - RegistryService
      - Plugin
      summary: Delete a plugin
      parameters:
      - name: plugin_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/PluginRegistrationDto'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: delete_plugin
  /v1/reports/account_summaries:
    get:
      tags:
      - RegistryService
      - Account
      - Token
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_AccountSummary'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: get_account_summaries_report
  /v1/reports/account_count:
    get:
      tags:
      - RegistryService
      - Account
      - Token
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/AccountCounts'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: get_account_count_report
  /v1/security-schemes/{security_scheme_id}:
    get:
      tags:
      - RegistryService
      - ApiSecurity
      summary: Get api security scheme by id
      parameters:
      - name: security_scheme_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/SecuritySchemeResponseView'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: get_security_scheme
  /v1/security-schemes/{security_scheme_id}/revisions:
    get:
      tags:
      - RegistryService
      - ApiSecurity
      summary: Get all revisions of the security scheme
      parameters:
      - name: security_scheme_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_SecuritySchemeResponseView'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: get_security_scheme_revisions
  /v1/tokens/{token_id}:
    get:
      tags:
      - RegistryService
      - Token
      summary: Get token by id
      parameters:
      - name: token_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Token'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: get_token
    delete:
      tags:
      - RegistryService
      - Token
      summary: Delete a token
      description: Deletes a previously created token given by its identifier.
      parameters:
      - name: token_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Empty'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: delete_token
components:
  schemas:
    Account:
      type: object
      title: Account
      required:
      - id
      - revision
      - name
      - email
      - planId
      - roles
      properties:
        id:
          type: string
          format: uuid
        revision:
          type: integer
          format: uint64
        name:
          type: string
        email:
          type: string
        planId:
          type: string
          format: uuid
        roles:
          type: array
          items:
            $ref: '#/components/schemas/AccountRole'
    AccountCounts:
      type: object
      title: AccountCounts
      required:
      - totalAccounts
      - totalActiveAccounts
      - totalDeletedAccounts
      properties:
        totalAccounts:
          type: integer
          format: int64
        totalActiveAccounts:
          type: integer
          format: int64
        totalDeletedAccounts:
          type: integer
          format: int64
    AccountCreation:
      type: object
      title: AccountCreation
      required:
      - name
      - email
      properties:
        name:
          type: string
        email:
          type: string
    AccountRole:
      type: string
      enum:
      - admin
      - marketing-admin
    AccountSummary:
      type: object
      title: AccountSummary
      required:
      - id
      - name
      - email
      - componentsCount
      - workersCount
      - createdAt
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
        componentsCount:
          type: integer
          format: int64
        workersCount:
          type: integer
          format: int64
        createdAt:
          type: string
          format: date-time
    AccountUpdate:
      type: object
      title: AccountUpdate
      required:
      - name
      - email
      properties:
        name:
          type: string
        email:
          type: string
    AgentConstructor:
      type: object
      title: AgentConstructor
      required:
      - description
      - inputSchema
      properties:
        name:
          type: string
        description:
          type: string
        promptHint:
          type: string
        inputSchema:
          $ref: '#/components/schemas/DataSchema'
    AgentDependency:
      type: object
      title: AgentDependency
      required:
      - typeName
      - constructor
      - methods
      properties:
        typeName:
          type: string
        description:
          type: string
        constructor:
          $ref: '#/components/schemas/AgentConstructor'
        methods:
          type: array
          items:
            $ref: '#/components/schemas/AgentMethod'
    AgentMethod:
      type: object
      title: AgentMethod
      required:
      - name
      - description
      - inputSchema
      - outputSchema
      properties:
        name:
          type: string
        description:
          type: string
        promptHint:
          type: string
        inputSchema:
          $ref: '#/components/schemas/DataSchema'
        outputSchema:
          $ref: '#/components/schemas/DataSchema'
    AgentType:
      type: object
      title: AgentType
      required:
      - typeName
      - description
      - constructor
      - methods
      - dependencies
      properties:
        typeName:
          type: string
        description:
          type: string
        constructor:
          $ref: '#/components/schemas/AgentConstructor'
        methods:
          type: array
          items:
            $ref: '#/components/schemas/AgentMethod'
        dependencies:
          type: array
          items:
            $ref: '#/components/schemas/AgentDependency'
    AnalysedExport:
      type: object
      oneOf:
      - $ref: '#/components/schemas/AnalysedExport_AnalysedFunction'
      - $ref: '#/components/schemas/AnalysedExport_AnalysedInstance'
      discriminator:
        propertyName: type
        mapping:
          Function: '#/components/schemas/AnalysedExport_AnalysedFunction'
          Instance: '#/components/schemas/AnalysedExport_AnalysedInstance'
    AnalysedExport_AnalysedFunction:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - Function
            example: Function
      - $ref: '#/components/schemas/AnalysedFunction'
    AnalysedExport_AnalysedInstance:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - Instance
            example: Instance
      - $ref: '#/components/schemas/AnalysedInstance'
    AnalysedFunction:
      type: object
      title: AnalysedFunction
      required:
      - name
      - parameters
      properties:
        name:
          type: string
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/AnalysedFunctionParameter'
        result:
          $ref: '#/components/schemas/AnalysedFunctionResult'
    AnalysedFunctionParameter:
      type: object
      title: AnalysedFunctionParameter
      required:
      - name
      - typ
      properties:
        name:
          type: string
        typ:
          $ref: '#/components/schemas/AnalysedType'
    AnalysedFunctionResult:
      type: object
      title: AnalysedFunctionResult
      required:
      - typ
      properties:
        typ:
          $ref: '#/components/schemas/AnalysedType'
    AnalysedInstance:
      type: object
      title: AnalysedInstance
      required:
      - name
      - functions
      properties:
        name:
          type: string
        functions:
          type: array
          items:
            $ref: '#/components/schemas/AnalysedFunction'
    AnalysedResourceMode:
      type: string
      enum:
      - Owned
      - Borrowed
    AnalysedType:
      type: object
      oneOf:
      - $ref: '#/components/schemas/AnalysedType_TypeVariant'
      - $ref: '#/components/schemas/AnalysedType_TypeResult'
      - $ref: '#/components/schemas/AnalysedType_TypeOption'
      - $ref: '#/components/schemas/AnalysedType_TypeEnum'
      - $ref: '#/components/schemas/AnalysedType_TypeFlags'
      - $ref: '#/components/schemas/AnalysedType_TypeRecord'
      - $ref: '#/components/schemas/AnalysedType_TypeTuple'
      - $ref: '#/components/schemas/AnalysedType_TypeList'
      - $ref: '#/components/schemas/AnalysedType_TypeStr'
      - $ref: '#/components/schemas/AnalysedType_TypeChr'
      - $ref: '#/components/schemas/AnalysedType_TypeF64'
      - $ref: '#/components/schemas/AnalysedType_TypeF32'
      - $ref: '#/components/schemas/AnalysedType_TypeU64'
      - $ref: '#/components/schemas/AnalysedType_TypeS64'
      - $ref: '#/components/schemas/AnalysedType_TypeU32'
      - $ref: '#/components/schemas/AnalysedType_TypeS32'
      - $ref: '#/components/schemas/AnalysedType_TypeU16'
      - $ref: '#/components/schemas/AnalysedType_TypeS16'
      - $ref: '#/components/schemas/AnalysedType_TypeU8'
      - $ref: '#/components/schemas/AnalysedType_TypeS8'
      - $ref: '#/components/schemas/AnalysedType_TypeBool'
      - $ref: '#/components/schemas/AnalysedType_TypeHandle'
      discriminator:
        propertyName: type
        mapping:
          Variant: '#/components/schemas/AnalysedType_TypeVariant'
          Result: '#/components/schemas/AnalysedType_TypeResult'
          Option: '#/components/schemas/AnalysedType_TypeOption'
          Enum: '#/components/schemas/AnalysedType_TypeEnum'
          Flags: '#/components/schemas/AnalysedType_TypeFlags'
          Record: '#/components/schemas/AnalysedType_TypeRecord'
          Tuple: '#/components/schemas/AnalysedType_TypeTuple'
          List: '#/components/schemas/AnalysedType_TypeList'
          Str: '#/components/schemas/AnalysedType_TypeStr'
          Chr: '#/components/schemas/AnalysedType_TypeChr'
          F64: '#/components/schemas/AnalysedType_TypeF64'
          F32: '#/components/schemas/AnalysedType_TypeF32'
          U64: '#/components/schemas/AnalysedType_TypeU64'
          S64: '#/components/schemas/AnalysedType_TypeS64'
          U32: '#/components/schemas/AnalysedType_TypeU32'
          S32: '#/components/schemas/AnalysedType_TypeS32'
          U16: '#/components/schemas/AnalysedType_TypeU16'
          S16: '#/components/schemas/AnalysedType_TypeS16'
          U8: '#/components/schemas/AnalysedType_TypeU8'
          S8: '#/components/schemas/AnalysedType_TypeS8'
          Bool: '#/components/schemas/AnalysedType_TypeBool'
          Handle: '#/components/schemas/AnalysedType_TypeHandle'
    AnalysedType_TypeBool:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - Bool
            example: Bool
      - $ref: '#/components/schemas/TypeBool'
    AnalysedType_TypeChr:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - Chr
            example: Chr
      - $ref: '#/components/schemas/TypeChr'
    AnalysedType_TypeEnum:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - Enum
            example: Enum
      - $ref: '#/components/schemas/TypeEnum'
    AnalysedType_TypeF32:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - F32
            example: F32
      - $ref: '#/components/schemas/TypeF32'
    AnalysedType_TypeF64:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - F64
            example: F64
      - $ref: '#/components/schemas/TypeF64'
    AnalysedType_TypeFlags:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - Flags
            example: Flags
      - $ref: '#/components/schemas/TypeFlags'
    AnalysedType_TypeHandle:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - Handle
            example: Handle
      - $ref: '#/components/schemas/TypeHandle'
    AnalysedType_TypeList:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - List
            example: List
      - $ref: '#/components/schemas/TypeList'
    AnalysedType_TypeOption:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - Option
            example: Option
      - $ref: '#/components/schemas/TypeOption'
    AnalysedType_TypeRecord:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - Record
            example: Record
      - $ref: '#/components/schemas/TypeRecord'
    AnalysedType_TypeResult:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - Result
            example: Result
      - $ref: '#/components/schemas/TypeResult'
    AnalysedType_TypeS16:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - S16
            example: S16
      - $ref: '#/components/schemas/TypeS16'
    AnalysedType_TypeS32:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - S32
            example: S32
      - $ref: '#/components/schemas/TypeS32'
    AnalysedType_TypeS64:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - S64
            example: S64
      - $ref: '#/components/schemas/TypeS64'
    AnalysedType_TypeS8:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - S8
            example: S8
      - $ref: '#/components/schemas/TypeS8'
    AnalysedType_TypeStr:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - Str
            example: Str
      - $ref: '#/components/schemas/TypeStr'
    AnalysedType_TypeTuple:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - Tuple
            example: Tuple
      - $ref: '#/components/schemas/TypeTuple'
    AnalysedType_TypeU16:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - U16
            example: U16
      - $ref: '#/components/schemas/TypeU16'
    AnalysedType_TypeU32:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - U32
            example: U32
      - $ref: '#/components/schemas/TypeU32'
    AnalysedType_TypeU64:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - U64
            example: U64
      - $ref: '#/components/schemas/TypeU64'
    AnalysedType_TypeU8:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - U8
            example: U8
      - $ref: '#/components/schemas/TypeU8'
    AnalysedType_TypeVariant:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - Variant
            example: Variant
      - $ref: '#/components/schemas/TypeVariant'
    ApiDeployment:
      type: object
      title: ApiDeployment
      required:
      - id
      - revision
      - apiDefinitions
      - environmentId
      - site
      - createdAt
      properties:
        id:
          type: string
          format: uuid
        revision:
          type: integer
          format: uint64
        apiDefinitions:
          type: array
          items:
            type: string
            format: uuid
        environmentId:
          type: string
          format: uuid
        site:
          type: string
        createdAt:
          type: string
          format: date-time
    ApiDomain:
      type: object
      title: ApiDomain
      required:
      - id
      - revision
      - environmentId
      - domainName
      - nameServers
      - createdAt
      properties:
        id:
          type: string
          format: uuid
        revision:
          type: integer
          format: uint64
        environmentId:
          type: string
          format: uuid
        domainName:
          type: string
        nameServers:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
    Application:
      type: object
      title: Application
      required:
      - id
      - revision
      - accountId
      - name
      properties:
        id:
          type: string
          format: uuid
        revision:
          type: integer
          format: uint64
        accountId:
          type: string
          format: uuid
        name:
          type: string
    ApplicationCreation:
      type: object
      title: ApplicationCreation
      required:
      - name
      properties:
        name:
          type: string
    ApplicationUpdate:
      type: object
      title: ApplicationUpdate
      properties:
        newName:
          type: string
    BinaryDescriptor:
      type: object
      title: BinaryDescriptor
      properties:
        restrictions:
          type: array
          items:
            $ref: '#/components/schemas/BinaryType'
    BinaryType:
      type: object
      title: BinaryType
      required:
      - mimeType
      properties:
        mimeType:
          type: string
    CertificateResponseView:
      type: object
      title: CertificateResponseView
      required:
      - environmentId
      - name
      - revision
      - domainName
      - createdAt
      properties:
        environmentId:
          type: string
          format: uuid
        name:
          type: string
        revision:
          type: integer
          format: uint64
        domainName:
          type: string
        createdAt:
          type: string
          format: date-time
    ComponentCreation:
      type: object
      title: ComponentCreation
      required:
      - componentName
      properties:
        componentName:
          type: string
        componentType:
          $ref: '#/components/schemas/ComponentType'
        fileOptions:
          type: object
          default: {}
          additionalProperties:
            $ref: '#/components/schemas/ComponentFileOptions'
        dynamicLinking:
          type: object
          default: {}
          additionalProperties:
            $ref: '#/components/schemas/DynamicLinkedInstance'
        env:
          type: object
          default: {}
          additionalProperties:
            type: string
        agentTypes:
          type: array
          default: []
          items:
            $ref: '#/components/schemas/AgentType'
        plugins:
          type: array
          default: []
          items:
            $ref: '#/components/schemas/PluginInstallation'
    ComponentDto:
      type: object
      title: ComponentDto
      required:
      - id
      - revision
      - environmentId
      - applicationId
      - accountId
      - componentName
      - componentSize
      - metadata
      - createdAt
      - componentType
      - files
      - installedPlugins
      - env
      - wasmHash
      properties:
        id:
          type: string
          format: uuid
        revision:
          type: integer
          format: uint64
        environmentId:
          type: string
          format: uuid
        applicationId:
          type: string
          format: uuid
        accountId:
          type: string
          format: uuid
        componentName:
          type: string
        componentSize:
          type: integer
          format: uint64
        metadata:
          $ref: '#/components/schemas/ComponentMetadata'
        createdAt:
          type: string
          format: date-time
        componentType:
          $ref: '#/components/schemas/ComponentType'
        files:
          type: array
          items:
            $ref: '#/components/schemas/InitialComponentFile'
        installedPlugins:
          type: array
          items:
            $ref: '#/components/schemas/InstalledPlugin'
        env:
          type: object
          additionalProperties:
            type: string
        wasmHash:
          type: string
          format: hash
    ComponentFileOptions:
      type: object
      title: ComponentFileOptions
      required:
      - permissions
      properties:
        permissions:
          description: Path of the file in the uploaded archive
          allOf:
          - $ref: '#/components/schemas/ComponentFilePermissions'
          - description: Path of the file in the uploaded archive
    ComponentFilePermissions:
      type: string
      enum:
      - read-only
      - read-write
    ComponentMetadata:
      type: object
      title: ComponentMetadata
      required:
      - exports
      - producers
      - memories
      - binaryWit
      - dynamicLinking
      - agentTypes
      properties:
        exports:
          type: array
          items:
            $ref: '#/components/schemas/AnalysedExport'
        producers:
          type: array
          items:
            $ref: '#/components/schemas/Producers'
        memories:
          type: array
          items:
            $ref: '#/components/schemas/LinearMemory'
        binaryWit:
          type: string
          format: bytes
        rootPackageName:
          type: string
        rootPackageVersion:
          type: string
        dynamicLinking:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/DynamicLinkedInstance'
        agentTypes:
          type: array
          items:
            $ref: '#/components/schemas/AgentType'
    ComponentModelElementSchema:
      type: object
      title: ComponentModelElementSchema
      required:
      - elementType
      properties:
        elementType:
          $ref: '#/components/schemas/AnalysedType'
    ComponentReference:
      type: object
      title: ComponentReference
      required:
      - name
      - revision
      - id
      properties:
        name:
          type: string
        revision:
          type: integer
          format: uint64
        id:
          type: string
          format: uuid
    ComponentTransformerPluginSpec:
      type: object
      title: ComponentTransformerPluginSpec
      required:
      - validateUrl
      - transformUrl
      properties:
        providedWitPackage:
          type: string
        jsonSchema: {}
        validateUrl:
          type: string
        transformUrl:
          type: string
    ComponentType:
      type: string
      enum:
      - durable
      - ephemeral
    ComponentUpdate:
      type: object
      title: ComponentUpdate
      required:
      - currentRevision
      properties:
        currentRevision:
          type: integer
          format: uint64
        componentType:
          $ref: '#/components/schemas/ComponentType'
        removedFiles:
          type: array
          default: []
          items:
            type: string
            description: Path inside a component filesystem. Must be absolute.
        newFileOptions:
          type: object
          default: {}
          additionalProperties:
            $ref: '#/components/schemas/ComponentFileOptions'
        dynamicLinking:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/DynamicLinkedInstance'
        env:
          type: object
          additionalProperties:
            type: string
        agentTypes:
          type: array
          items:
            $ref: '#/components/schemas/AgentType'
        pluginUpdates:
          type: array
          default: []
          items:
            $ref: '#/components/schemas/PluginInstallationAction'
    CorsConfiguration:
      type: object
      title: CorsConfiguration
      required:
      - allowOrigin
      - allowMethods
      - allowHeaders
      properties:
        allowOrigin:
          type: string
        allowMethods:
          type: string
        allowHeaders:
          type: string
        exposeHeaders:
          type: string
        allowCredentials:
          type: boolean
        maxAge:
          type: integer
          format: uint64
    CreateApiDeploymentRequest:
      type: object
      title: CreateApiDeploymentRequest
      required:
      - apiDefinitions
      properties:
        apiDefinitions:
          type: array
          items:
            type: string
            format: uuid
    CreateApiDomainRequest:
      type: object
      title: CreateApiDomainRequest
      required:
      - domainName
      properties:
        domainName:
          type: string
    CreateCertificateRequest:
      type: object
      title: CreateCertificateRequest
      required:
      - name
      - domainName
      - certificateBody
      - certificatePrivateKey
      properties:
        name:
          type: string
        domainName:
          type: string
        certificateBody:
          type: string
        certificatePrivateKey:
          type: string
    CreateHttpApiDefinitionRequest:
      type: object
      title: CreateHttpApiDefinitionRequest
      required:
      - routes
      - version
      properties:
        routes:
          type: array
          items:
            $ref: '#/components/schemas/RouteRequestView'
        version:
          type: string
    CreateSecuritySchemeRequest:
      type: object
      title: CreateSecuritySchemeRequest
      required:
      - providerType
      - schemeIdentifier
      - clientId
      - clientSecret
      - redirectUrl
      - scopes
      properties:
        providerType:
          $ref: '#/components/schemas/Provider'
        schemeIdentifier:
          type: string
        clientId:
          type: string
        clientSecret:
          type: string
        redirectUrl:
          type: string
        scopes:
          type: array
          items:
            type: string
    DataSchema:
      type: object
      oneOf:
      - $ref: '#/components/schemas/DataSchema_NamedElementSchemas'
      - $ref: '#/components/schemas/DataSchema_NamedElementSchemas'
      discriminator:
        propertyName: type
        mapping:
          Tuple: '#/components/schemas/DataSchema_NamedElementSchemas'
          Multimodal: '#/components/schemas/DataSchema_NamedElementSchemas'
    DataSchema_NamedElementSchemas:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - Multimodal
            example: Multimodal
      - $ref: '#/components/schemas/NamedElementSchemas'
    Deployment:
      type: object
      title: Deployment
      required:
      - environmentId
      - revision
      - version
      - deploymentHash
      properties:
        environmentId:
          type: string
          format: uuid
        revision:
          type: integer
          format: uint64
        version:
          type: string
        deploymentHash:
          type: string
          format: hash
    DeploymentCreation:
      type: object
      title: DeploymentCreation
      required:
      - expectedDeploymentHash
      - version
      properties:
        currentDeploymentRevision:
          type: integer
          format: uint64
        expectedDeploymentHash:
          type: string
          format: hash
        version:
          type: string
    DeploymentPlan:
      type: object
      title: DeploymentPlan
      description: Summary of all entities tracked by the deployment
      required:
      - deploymentHash
      - components
      properties:
        deploymentHash:
          type: string
          format: hash
        components:
          type: array
          items:
            $ref: '#/components/schemas/DeploymentPlanComponentEntry'
    DeploymentPlanComponentEntry:
      type: object
      title: DeploymentPlanComponentEntry
      required:
      - id
      - revision
      - name
      - hash
      properties:
        id:
          type: string
          format: uuid
        revision:
          type: integer
          format: uint64
        name:
          type: string
        hash:
          type: string
          format: hash
    DynamicLinkedInstance:
      type: object
      oneOf:
      - $ref: '#/components/schemas/DynamicLinkedInstance_DynamicLinkedWasmRpc'
      discriminator:
        propertyName: type
        mapping:
          WasmRpc: '#/components/schemas/DynamicLinkedInstance_DynamicLinkedWasmRpc'
    DynamicLinkedInstance_DynamicLinkedWasmRpc:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - WasmRpc
            example: WasmRpc
      - $ref: '#/components/schemas/DynamicLinkedWasmRpc'
    DynamicLinkedWasmRpc:
      type: object
      title: DynamicLinkedWasmRpc
      required:
      - targets
      properties:
        targets:
          type: object
          description: Maps resource names within the dynamic linked interface to target information
          additionalProperties:
            $ref: '#/components/schemas/WasmRpcTarget'
    ElementSchema:
      type: object
      oneOf:
      - $ref: '#/components/schemas/ElementSchema_ComponentModelElementSchema'
      - $ref: '#/components/schemas/ElementSchema_TextDescriptor'
      - $ref: '#/components/schemas/ElementSchema_BinaryDescriptor'
      discriminator:
        propertyName: type
        mapping:
          ComponentModel: '#/components/schemas/ElementSchema_ComponentModelElementSchema'
          UnstructuredText: '#/components/schemas/ElementSchema_TextDescriptor'
          UnstructuredBinary: '#/components/schemas/ElementSchema_BinaryDescriptor'
    ElementSchema_BinaryDescriptor:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - UnstructuredBinary
            example: UnstructuredBinary
      - $ref: '#/components/schemas/BinaryDescriptor'
    ElementSchema_ComponentModelElementSchema:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - ComponentModel
            example: ComponentModel
      - $ref: '#/components/schemas/ComponentModelElementSchema'
    ElementSchema_TextDescriptor:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - UnstructuredText
            example: UnstructuredText
      - $ref: '#/components/schemas/TextDescriptor'
    Empty:
      type: object
      title: Empty
    Environment:
      type: object
      title: Environment
      required:
      - id
      - revision
      - applicationId
      - name
      - compatibilityCheck
      - versionCheck
      - securityOverrides
      - ownerAccountId
      - rolesFromShares
      properties:
        id:
          type: string
          format: uuid
        revision:
          type: integer
          format: uint64
        applicationId:
          type: string
          format: uuid
        name:
          type: string
        compatibilityCheck:
          type: boolean
        versionCheck:
          type: boolean
        securityOverrides:
          type: boolean
        ownerAccountId:
          type: string
          format: uuid
        rolesFromShares:
          type: array
          description: Roles in the environment that were given to the current user by shares. The owner always has full access.
          items:
            $ref: '#/components/schemas/EnvironmentRole'
        currentDeployment:
          $ref: '#/components/schemas/EnvironmentCurrentDeploymentView'
    EnvironmentCreation:
      type: object
      title: EnvironmentCreation
      required:
      - name
      - compatibilityCheck
      - versionCheck
      - securityOverrides
      properties:
        name:
          type: string
        compatibilityCheck:
          type: boolean
        versionCheck:
          type: boolean
        securityOverrides:
          type: boolean
    EnvironmentCurrentDeploymentView:
      type: object
      title: EnvironmentCurrentDeploymentView
      required:
      - revision
      - hash
      properties:
        revision:
          type: integer
          format: uint64
        hash:
          type: string
          format: hash
    EnvironmentPluginGrant:
      type: object
      title: EnvironmentPluginGrant
      required:
      - id
      - environmentId
      - pluginRegistrationId
      properties:
        id:
          type: string
          format: uuid
        environmentId:
          type: string
          format: uuid
        pluginRegistrationId:
          type: string
          format: uuid
    EnvironmentPluginGrantCreation:
      type: object
      title: EnvironmentPluginGrantCreation
      required:
      - pluginRegistrationId
      properties:
        pluginRegistrationId:
          type: string
          format: uuid
    EnvironmentRole:
      type: string
      enum:
      - admin
      - viewer
      - deployer
    EnvironmentShare:
      type: object
      title: EnvironmentShare
      required:
      - id
      - revision
      - environmentId
      - granteeAccountId
      - roles
      properties:
        id:
          type: string
          format: uuid
        revision:
          type: integer
          format: uint64
        environmentId:
          type: string
          format: uuid
        granteeAccountId:
          type: string
          format: uuid
        roles:
          type: array
          items:
            $ref: '#/components/schemas/EnvironmentRole'
    EnvironmentShareCreation:
      type: object
      title: EnvironmentShareCreation
      required:
      - granteeAccountId
      - roles
      properties:
        granteeAccountId:
          type: string
          format: uuid
        roles:
          type: array
          items:
            $ref: '#/components/schemas/EnvironmentRole'
    EnvironmentShareUpdate:
      type: object
      title: EnvironmentShareUpdate
      required:
      - newRoles
      properties:
        newRoles:
          type: array
          items:
            $ref: '#/components/schemas/EnvironmentRole'
    EnvironmentUpdate:
      type: object
      title: EnvironmentUpdate
      properties:
        newName:
          type: string
    ErrorBody:
      type: object
      title: ErrorBody
      required:
      - error
      properties:
        error:
          type: string
    ErrorsBody:
      type: object
      title: ErrorsBody
      required:
      - errors
      properties:
        errors:
          type: array
          items:
            type: string
    GatewayBindingRequestView:
      type: object
      title: GatewayBindingRequestView
      properties:
        bindingType:
          $ref: '#/components/schemas/GatewayBindingType'
        component:
          $ref: '#/components/schemas/ComponentReference'
        idempotencyKey:
          type: string
        response:
          type: string
        invocationContext:
          type: string
    GatewayBindingResponseView:
      type: object
      title: GatewayBindingResponseView
      properties:
        component:
          $ref: '#/components/schemas/ComponentReference'
        workerName:
          type: string
        idempotencyKey:
          type: string
        invocationContext:
          type: string
        response:
          type: string
        bindingType:
          $ref: '#/components/schemas/GatewayBindingType'
        responseMappingInput:
          $ref: '#/components/schemas/RibInputTypeInfo'
        workerNameInput:
          $ref: '#/components/schemas/RibInputTypeInfo'
        idempotencyKeyInput:
          $ref: '#/components/schemas/RibInputTypeInfo'
        corsPreflight:
          $ref: '#/components/schemas/CorsConfiguration'
        responseMappingOutput:
          $ref: '#/components/schemas/RibOutputTypeInfo'
        openapiSpecJson:
          type: string
    GatewayBindingType:
      type: string
      enum:
      - default
      - file-server
      - http-handler
      - cors-preflight
      - swagger-ui
    HealthcheckResponse:
      type: object
      title: HealthcheckResponse
    HttpApiDefinitionResponseView:
      type: object
      title: HttpApiDefinitionResponseView
      required:
      - id
      - routes
      - version
      - createdAt
      properties:
        id:
          type: string
          format: uuid
        routes:
          type: array
          items:
            $ref: '#/components/schemas/RouteResponseView'
        version:
          type: string
        createdAt:
          type: string
          format: date-time
    InitialComponentFile:
      type: object
      title: InitialComponentFile
      required:
      - key
      - path
      - permissions
      properties:
        key:
          type: string
          title: |-
            Key that can be used to identify a component file.
            All files with the same content will have the same key.
        path:
          type: string
          description: Path inside a component filesystem. Must be absolute.
        permissions:
          $ref: '#/components/schemas/ComponentFilePermissions'
    InstalledPlugin:
      type: object
      title: InstalledPlugin
      required:
      - pluginRegistrationId
      - priority
      - parameters
      properties:
        pluginRegistrationId:
          type: string
          format: uuid
        priority:
          type: integer
          format: int32
          title: |-
            Priority of a given plugin. Plugins with a lower priority will be applied before plugins with a higher priority.
            There can only be a single plugin with a given priority installed to a component.
        parameters:
          type: object
          additionalProperties:
            type: string
    LinearMemory:
      type: object
      title: LinearMemory
      required:
      - initial
      properties:
        initial:
          type: integer
          format: uint64
          description: Initial size of the linear memory in bytes
        maximum:
          type: integer
          format: uint64
          description: Optional maximal size of the linear memory in bytes
    NameOptionTypePair:
      type: object
      title: NameOptionTypePair
      required:
      - name
      properties:
        name:
          type: string
        typ:
          $ref: '#/components/schemas/AnalysedType'
    NameTypePair:
      type: object
      title: NameTypePair
      required:
      - name
      - typ
      properties:
        name:
          type: string
        typ:
          $ref: '#/components/schemas/AnalysedType'
    NamedElementSchema:
      type: object
      title: NamedElementSchema
      required:
      - name
      - schema
      properties:
        name:
          type: string
        schema:
          $ref: '#/components/schemas/ElementSchema'
    NamedElementSchemas:
      type: object
      title: NamedElementSchemas
      required:
      - elements
      properties:
        elements:
          type: array
          items:
            $ref: '#/components/schemas/NamedElementSchema'
    OAuth2DeviceFlowStartRequest:
      type: object
      title: OAuth2DeviceFlowStartRequest
      required:
      - provider
      properties:
        provider:
          $ref: '#/components/schemas/OAuth2Provider'
    OAuth2DeviceflowData:
      type: object
      title: OAuth2DeviceflowData
      required:
      - url
      - userCode
      - expires
      - encodedSession
      properties:
        url:
          type: string
        userCode:
          type: string
        expires:
          type: string
          format: date-time
        encodedSession:
          type: string
    OAuth2Provider:
      type: string
      enum:
      - github
    OAuth2WebflowData:
      type: object
      title: OAuth2WebflowData
      required:
      - url
      - state
      properties:
        url:
          type: string
        state:
          type: string
          format: uuid
    OplogProcessorPluginSpec:
      type: object
      title: OplogProcessorPluginSpec
      required:
      - componentId
      - componentRevision
      properties:
        componentId:
          type: string
          format: uuid
        componentRevision:
          type: integer
          format: uint64
    Page_AccountSummary:
      type: object
      title: Page_AccountSummary
      required:
      - values
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/AccountSummary'
    Page_ApiDeployment:
      type: object
      title: Page_ApiDeployment
      required:
      - values
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/ApiDeployment'
    Page_ApiDomain:
      type: object
      title: Page_ApiDomain
      required:
      - values
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/ApiDomain'
    Page_Application:
      type: object
      title: Page_Application
      required:
      - values
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/Application'
    Page_CertificateResponseView:
      type: object
      title: Page_CertificateResponseView
      required:
      - values
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/CertificateResponseView'
    Page_ComponentDto:
      type: object
      title: Page_ComponentDto
      required:
      - values
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/ComponentDto'
    Page_Deployment:
      type: object
      title: Page_Deployment
      required:
      - values
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/Deployment'
    Page_Environment:
      type: object
      title: Page_Environment
      required:
      - values
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/Environment'
    Page_EnvironmentPluginGrant:
      type: object
      title: Page_EnvironmentPluginGrant
      required:
      - values
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/EnvironmentPluginGrant'
    Page_EnvironmentShare:
      type: object
      title: Page_EnvironmentShare
      required:
      - values
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/EnvironmentShare'
    Page_HttpApiDefinitionResponseView:
      type: object
      title: Page_HttpApiDefinitionResponseView
      required:
      - values
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/HttpApiDefinitionResponseView'
    Page_PluginRegistrationDto:
      type: object
      title: Page_PluginRegistrationDto
      required:
      - values
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/PluginRegistrationDto'
    Page_SecuritySchemeResponseView:
      type: object
      title: Page_SecuritySchemeResponseView
      required:
      - values
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/SecuritySchemeResponseView'
    Page_Token:
      type: object
      title: Page_Token
      required:
      - values
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/Token'
    Plan:
      type: object
      title: Plan
      required:
      - planId
      - name
      - appLimit
      - envLimit
      - componentLimit
      - workerLimit
      - storageLimit
      - monthlyGasLimit
      - monthlyUploadLimit
      properties:
        planId:
          type: string
          format: uuid
        name:
          type: string
        appLimit:
          type: integer
          format: int64
        envLimit:
          type: integer
          format: int64
        componentLimit:
          type: integer
          format: int64
        workerLimit:
          type: integer
          format: int64
        storageLimit:
          type: integer
          format: int64
        monthlyGasLimit:
          type: integer
          format: int64
        monthlyUploadLimit:
          type: integer
          format: int64
    PluginInstallation:
      type: object
      title: PluginInstallation
      required:
      - environmentPluginGrantId
      - priority
      - parameters
      properties:
        environmentPluginGrantId:
          type: string
          format: uuid
        priority:
          type: integer
          format: int32
          title: |-
            Priority of a given plugin. Plugins with a lower priority will be applied before plugins with a higher priority.
            There can only be a single plugin with a given priority installed to a component.
          description: Plugins will be applied in order of increasing priority
        parameters:
          type: object
          additionalProperties:
            type: string
    PluginInstallationAction:
      type: object
      oneOf:
      - $ref: '#/components/schemas/PluginInstallationAction_PluginInstallation'
      - $ref: '#/components/schemas/PluginInstallationAction_PluginUninstallation'
      - $ref: '#/components/schemas/PluginInstallationAction_PluginInstallationUpdate'
      discriminator:
        propertyName: type
        mapping:
          Install: '#/components/schemas/PluginInstallationAction_PluginInstallation'
          Uninstall: '#/components/schemas/PluginInstallationAction_PluginUninstallation'
          Update: '#/components/schemas/PluginInstallationAction_PluginInstallationUpdate'
    PluginInstallationAction_PluginInstallation:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - Install
            example: Install
      - $ref: '#/components/schemas/PluginInstallation'
    PluginInstallationAction_PluginInstallationUpdate:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - Update
            example: Update
      - $ref: '#/components/schemas/PluginInstallationUpdate'
    PluginInstallationAction_PluginUninstallation:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - Uninstall
            example: Uninstall
      - $ref: '#/components/schemas/PluginUninstallation'
    PluginInstallationUpdate:
      type: object
      title: PluginInstallationUpdate
      required:
      - pluginPriority
      properties:
        pluginPriority:
          type: integer
          format: int32
          title: |-
            Priority of a given plugin. Plugins with a lower priority will be applied before plugins with a higher priority.
            There can only be a single plugin with a given priority installed to a component.
          description: Priority will be used to identify the plugin to update
        newPriority:
          type: integer
          format: int32
          title: |-
            Priority of a given plugin. Plugins with a lower priority will be applied before plugins with a higher priority.
            There can only be a single plugin with a given priority installed to a component.
        newParameters:
          type: object
          additionalProperties:
            type: string
    PluginRegistrationCreation:
      type: object
      title: PluginRegistrationCreation
      required:
      - name
      - version
      - description
      - icon
      - homepage
      - spec
      properties:
        name:
          type: string
        version:
          type: string
        description:
          type: string
        icon:
          type: string
          format: bytes
        homepage:
          type: string
        spec:
          $ref: '#/components/schemas/PluginSpecDto'
    PluginRegistrationDto:
      type: object
      title: PluginRegistrationDto
      required:
      - id
      - accountId
      - name
      - version
      - description
      - icon
      - homepage
      - spec
      properties:
        id:
          type: string
          format: uuid
        accountId:
          type: string
          format: uuid
        name:
          type: string
        version:
          type: string
        description:
          type: string
        icon:
          type: string
          format: bytes
        homepage:
          type: string
        spec:
          $ref: '#/components/schemas/PluginSpecDto'
    PluginSpecDto:
      type: object
      oneOf:
      - $ref: '#/components/schemas/PluginSpecDto_ComponentTransformerPluginSpec'
      - $ref: '#/components/schemas/PluginSpecDto_OplogProcessorPluginSpec'
      - $ref: '#/components/schemas/PluginSpecDto_Empty'
      - $ref: '#/components/schemas/PluginSpecDto_Empty'
      discriminator:
        propertyName: type
        mapping:
          ComponentTransformer: '#/components/schemas/PluginSpecDto_ComponentTransformerPluginSpec'
          OplogProcessor: '#/components/schemas/PluginSpecDto_OplogProcessorPluginSpec'
          App: '#/components/schemas/PluginSpecDto_Empty'
          Library: '#/components/schemas/PluginSpecDto_Empty'
    PluginSpecDto_ComponentTransformerPluginSpec:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - ComponentTransformer
            example: ComponentTransformer
      - $ref: '#/components/schemas/ComponentTransformerPluginSpec'
    PluginSpecDto_Empty:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - Library
            example: Library
      - $ref: '#/components/schemas/Empty'
    PluginSpecDto_OplogProcessorPluginSpec:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - OplogProcessor
            example: OplogProcessor
      - $ref: '#/components/schemas/OplogProcessorPluginSpec'
    PluginUninstallation:
      type: object
      title: PluginUninstallation
      required:
      - pluginPriority
      properties:
        pluginPriority:
          type: integer
          format: int32
          title: |-
            Priority of a given plugin. Plugins with a lower priority will be applied before plugins with a higher priority.
            There can only be a single plugin with a given priority installed to a component.
          description: Priority will be used to identify the plugin to delete
    ProducerField:
      type: object
      title: ProducerField
      required:
      - name
      - values
      properties:
        name:
          type: string
        values:
          type: array
          items:
            $ref: '#/components/schemas/VersionedName'
    Producers:
      type: object
      title: Producers
      required:
      - fields
      properties:
        fields:
          type: array
          items:
            $ref: '#/components/schemas/ProducerField'
    Provider:
      type: string
      enum:
      - Google
      - Facebook
      - Microsoft
      - Gitlab
    RibInputTypeInfo:
      type: object
      title: RibInputTypeInfo
      required:
      - types
      properties:
        types:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AnalysedType'
    RibOutputTypeInfo:
      type: object
      title: RibOutputTypeInfo
      required:
      - analysedType
      properties:
        analysedType:
          $ref: '#/components/schemas/AnalysedType'
    RouteMethod:
      type: string
      enum:
      - get
      - connect
      - post
      - delete
      - put
      - patch
      - options
      - trace
      - head
    RouteRequestView:
      type: object
      title: RouteRequestView
      required:
      - method
      - path
      - binding
      properties:
        method:
          $ref: '#/components/schemas/RouteMethod'
        path:
          type: string
        binding:
          $ref: '#/components/schemas/GatewayBindingRequestView'
        security:
          type: string
    RouteResponseView:
      type: object
      title: RouteResponseView
      required:
      - method
      - path
      - binding
      properties:
        method:
          $ref: '#/components/schemas/RouteMethod'
        path:
          type: string
        binding:
          $ref: '#/components/schemas/GatewayBindingResponseView'
        security:
          type: string
    SecuritySchemeResponseView:
      type: object
      title: SecuritySchemeResponseView
      required:
      - providerType
      - schemeIdentifier
      - clientId
      - clientSecret
      - redirectUrl
      - scopes
      - createdAt
      properties:
        providerType:
          $ref: '#/components/schemas/Provider'
        schemeIdentifier:
          type: string
        clientId:
          type: string
        clientSecret:
          type: string
        redirectUrl:
          type: string
        scopes:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
    TextDescriptor:
      type: object
      title: TextDescriptor
      properties:
        restrictions:
          type: array
          items:
            $ref: '#/components/schemas/TextType'
    TextType:
      type: object
      title: TextType
      required:
      - languageCode
      properties:
        languageCode:
          type: string
    Token:
      type: object
      title: Token
      required:
      - id
      - accountId
      - createdAt
      - expiresAt
      properties:
        id:
          type: string
          format: uuid
        accountId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        expiresAt:
          type: string
          format: date-time
    TokenCreation:
      type: object
      title: TokenCreation
      required:
      - expiresAt
      properties:
        expiresAt:
          type: string
          format: date-time
    TokenWithSecret:
      type: object
      title: TokenWithSecret
      required:
      - id
      - secret
      - accountId
      - createdAt
      - expiresAt
      properties:
        id:
          type: string
          format: uuid
        secret:
          type: string
          format: uuid
        accountId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        expiresAt:
          type: string
          format: date-time
    TypeBool:
      type: object
      title: TypeBool
    TypeChr:
      type: object
      title: TypeChr
    TypeEnum:
      type: object
      title: TypeEnum
      required:
      - cases
      properties:
        name:
          type: string
        owner:
          type: string
        cases:
          type: array
          items:
            type: string
    TypeF32:
      type: object
      title: TypeF32
    TypeF64:
      type: object
      title: TypeF64
    TypeFlags:
      type: object
      title: TypeFlags
      required:
      - names
      properties:
        name:
          type: string
        owner:
          type: string
        names:
          type: array
          items:
            type: string
    TypeHandle:
      type: object
      title: TypeHandle
      required:
      - resource_id
      - mode
      properties:
        name:
          type: string
        owner:
          type: string
        resource_id:
          type: integer
          format: uint64
        mode:
          $ref: '#/components/schemas/AnalysedResourceMode'
    TypeList:
      type: object
      title: TypeList
      required:
      - inner
      properties:
        name:
          type: string
        owner:
          type: string
        inner:
          $ref: '#/components/schemas/AnalysedType'
    TypeOption:
      type: object
      title: TypeOption
      required:
      - inner
      properties:
        name:
          type: string
        owner:
          type: string
        inner:
          $ref: '#/components/schemas/AnalysedType'
    TypeRecord:
      type: object
      title: TypeRecord
      required:
      - fields
      properties:
        name:
          type: string
        owner:
          type: string
        fields:
          type: array
          items:
            $ref: '#/components/schemas/NameTypePair'
    TypeResult:
      type: object
      title: TypeResult
      properties:
        name:
          type: string
        owner:
          type: string
        ok:
          $ref: '#/components/schemas/AnalysedType'
        err:
          $ref: '#/components/schemas/AnalysedType'
    TypeS16:
      type: object
      title: TypeS16
    TypeS32:
      type: object
      title: TypeS32
    TypeS64:
      type: object
      title: TypeS64
    TypeS8:
      type: object
      title: TypeS8
    TypeStr:
      type: object
      title: TypeStr
    TypeTuple:
      type: object
      title: TypeTuple
      required:
      - items
      properties:
        name:
          type: string
        owner:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/AnalysedType'
    TypeU16:
      type: object
      title: TypeU16
    TypeU32:
      type: object
      title: TypeU32
    TypeU64:
      type: object
      title: TypeU64
    TypeU8:
      type: object
      title: TypeU8
    TypeVariant:
      type: object
      title: TypeVariant
      required:
      - cases
      properties:
        name:
          type: string
        owner:
          type: string
        cases:
          type: array
          items:
            $ref: '#/components/schemas/NameOptionTypePair'
    UpdateApiDeploymentRequest:
      type: object
      title: UpdateApiDeploymentRequest
      required:
      - apiDefinitions
      properties:
        apiDefinitions:
          type: array
          items:
            type: string
            format: uuid
    UpdateApiDomainRequest:
      type: object
      title: UpdateApiDomainRequest
    UpdateCertificateRequest:
      type: object
      title: UpdateCertificateRequest
      required:
      - certificateBody
      - certificatePrivateKey
      properties:
        certificateBody:
          type: string
        certificatePrivateKey:
          type: string
    UpdateHttpApiDefinitionRequest:
      type: object
      title: UpdateHttpApiDefinitionRequest
      required:
      - routes
      - version
      properties:
        routes:
          type: array
          items:
            $ref: '#/components/schemas/RouteRequestView'
        version:
          type: string
    VersionInfo:
      type: object
      title: VersionInfo
      required:
      - version
      properties:
        version:
          type: string
    VersionedName:
      type: object
      title: VersionedName
      required:
      - name
      - version
      properties:
        name:
          type: string
        version:
          type: string
    WasmRpcTarget:
      type: object
      title: WasmRpcTarget
      required:
      - interfaceName
      - componentName
      - componentType
      properties:
        interfaceName:
          type: string
        componentName:
          type: string
        componentType:
          $ref: '#/components/schemas/ComponentType'
  securitySchemes:
    Cookie:
      type: apiKey
      name: GOLEM_SESSION
      in: cookie
    Token:
      type: http
      scheme: bearer

