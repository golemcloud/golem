openapi: 3.0.0
info:
  title: Golem API
  version: '1.0'
paths:
  /healthcheck:
    get:
      tags:
      - HealthCheck
      operationId: healthcheck
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/HealthcheckResponse'
  /version:
    get:
      tags:
      - HealthCheck
      operationId: version
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/VersionInfo'
  /v1/components/{component_id}/workers:
    get:
      tags:
      - Worker
      summary: Get metadata of multiple workers
      description: |-
        ### Filters

        | Property    | Comparator             | Description                    | Example                         |
        |-------------|------------------------|--------------------------------|----------------------------------|
        | name        | StringFilterComparator | Name of worker                 | `name = worker-name`             |
        | version     | FilterComparator       | Version of worker              | `version >= 0`                   |
        | status      | FilterComparator       | Status of worker               | `status = Running`               |
        | env.\[key\] | StringFilterComparator | Environment variable of worker | `env.var1 = value`               |
        | createdAt   | FilterComparator       | Creation time of worker        | `createdAt > 2024-04-01T12:10:00Z` |


        ### Comparators

        - StringFilterComparator: `eq|equal|=|==`, `ne|notequal|!=`, `like`, `notlike`
        - FilterComparator: `eq|equal|=|==`, `ne|notequal|!=`, `ge|greaterequal|>=`, `gt|greater|>`, `le|lessequal|<=`, `lt|less|<`

        Returns metadata about an existing component workers:
        - `workers` list of workers metadata
        - `cursor` cursor for next request, if cursor is empty/null, there are no other values
      operationId: get_workers_metadata
      parameters:
      - in: path
        name: component_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      - in: query
        name: filter
        description: Filter for worker metadata in form of `property op value`. Can be used multiple times (AND condition is applied between them)
        deprecated: false
        schema:
          type: array
          items:
            type: string
        explode: true
        style: form
      - in: query
        name: cursor
        description: 'Count of listed values, default: 50'
        deprecated: false
        schema:
          type: string
        explode: true
        style: form
      - in: query
        name: count
        description: Position where to start listing, if not provided, starts from the beginning. It is used to get the next page of results. To get next page, use the cursor returned in the response
        deprecated: false
        schema:
          type: integer
          format: uint64
        explode: true
        style: form
      - in: query
        name: precise
        description: Precision in relation to worker status, if true, calculate the most up-to-date status for each worker, default is false
        deprecated: false
        schema:
          type: boolean
        explode: true
        style: form
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/WorkersMetadataResponse'
        '400':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBodyWithOptionalWorkerError'
      security:
      - Cookie: []
      - Token: []
    post:
      tags:
      - Worker
      summary: Launch a new worker.
      description: |-
        Creates a new worker. The worker initially is in `Idle`` status, waiting to be invoked.

        The parameters in the request are the following:
        - `name` is the name of the created worker. This has to be unique, but only for a given component
        - `args` is a list of strings which appear as command line arguments for the worker
        - `env` is a list of key-value pairs (represented by arrays) which appear as environment variables for the worker
      operationId: launch_new_worker
      parameters:
      - in: path
        name: component_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/WorkerCreationRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/WorkerCreationResponse'
        '400':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBodyWithOptionalWorkerError'
      security:
      - Cookie: []
      - Token: []
  /v1/components/{component_id}/workers/{worker_name}:
    get:
      tags:
      - Worker
      summary: Get metadata of a worker
      description: |-
        Returns metadata about an existing worker:
        - `workerId` is a combination of the used component and the worker's user specified name
        - `accountId` the account the worker is created by
        - `args` is the provided command line arguments passed to the worker
        - `env` is the provided map of environment variables passed to the worker
        - `componentVersion` is the version of the component used by the worker
        - `retryCount` is the number of retries the worker did in case of a failure
        - `status` is the worker's current status, one of the following:
        - `Running` if the worker is currently executing
        - `Idle` if the worker is waiting for an invocation
        - `Suspended` if the worker was running but is now waiting to be resumed by an event (such as end of a sleep, a promise, etc)
        - `Interrupted` if the worker was interrupted by the user
        - `Retrying` if the worker failed, and an automatic retry was scheduled for it
        - `Failed` if the worker failed and there are no more retries scheduled for it
        - `Exited` if the worker explicitly exited using the exit WASI function
      operationId: get_worker_metadata
      parameters:
      - in: path
        name: component_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      - in: path
        name: worker_name
        required: true
        deprecated: false
        schema:
          type: string
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/WorkerMetadata'
        '400':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBodyWithOptionalWorkerError'
      security:
      - Cookie: []
      - Token: []
    delete:
      tags:
      - Worker
      summary: Delete a worker
      description: Interrupts and deletes an existing worker.
      operationId: delete_worker
      parameters:
      - in: path
        name: component_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      - in: path
        name: worker_name
        required: true
        deprecated: false
        schema:
          type: string
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/DeleteWorkerResponse'
        '400':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBodyWithOptionalWorkerError'
      security:
      - Cookie: []
      - Token: []
  /v1/components/{component_id}/workers/{worker_name}/invoke-and-await:
    post:
      tags:
      - Worker
      summary: Invoke a function and await its resolution
      description: Supply the parameters in the request body as JSON.
      operationId: invoke_and_await_function
      parameters:
      - in: path
        name: component_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      - in: path
        name: worker_name
        required: true
        deprecated: false
        schema:
          type: string
        explode: true
        style: simple
      - in: header
        name: Idempotency-Key
        deprecated: false
        schema:
          type: string
        explode: true
        style: simple
      - in: query
        name: function
        required: true
        deprecated: false
        schema:
          type: string
        explode: true
        style: form
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/InvokeParameters'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/InvokeResult'
        '400':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBodyWithOptionalWorkerError'
      security:
      - Cookie: []
      - Token: []
  /v1/components/{component_id}/invoke-and-await:
    post:
      tags:
      - Worker
      summary: Invoke a function and await its resolution on a new worker with a random generated name
      description: |-
        Ideal for invoking ephemeral components, but works with durable ones as well.
        Supply the parameters in the request body as JSON.
      operationId: invoke_and_await_function_without_name
      parameters:
      - in: path
        name: component_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      - in: header
        name: Idempotency-Key
        deprecated: false
        schema:
          type: string
        explode: true
        style: simple
      - in: query
        name: function
        required: true
        deprecated: false
        schema:
          type: string
        explode: true
        style: form
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/InvokeParameters'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/InvokeResult'
        '400':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBodyWithOptionalWorkerError'
      security:
      - Cookie: []
      - Token: []
  /v1/components/{component_id}/workers/{worker_name}/invoke:
    post:
      tags:
      - Worker
      summary: Invoke a function
      description: A simpler version of the previously defined invoke and await endpoint just triggers the execution of a function and immediately returns.
      operationId: invoke_function
      parameters:
      - in: path
        name: component_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      - in: path
        name: worker_name
        required: true
        deprecated: false
        schema:
          type: string
        explode: true
        style: simple
      - in: header
        name: Idempotency-Key
        deprecated: false
        schema:
          type: string
        explode: true
        style: simple
      - in: query
        name: function
        description: name of the exported function to be invoked
        required: true
        deprecated: false
        schema:
          type: string
        explode: true
        style: form
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/InvokeParameters'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/InvokeResponse'
        '400':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBodyWithOptionalWorkerError'
      security:
      - Cookie: []
      - Token: []
  /v1/components/{component_id}/invoke:
    post:
      tags:
      - Worker
      summary: Invoke a function on a new worker with a random generated name
      description: |-
        Ideal for invoking ephemeral components, but works with durable ones as well.
        A simpler version of the previously defined invoke and await endpoint just triggers the execution of a function and immediately returns.
      operationId: invoke_function_without_name
      parameters:
      - in: path
        name: component_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      - in: header
        name: Idempotency-Key
        deprecated: false
        schema:
          type: string
        explode: true
        style: simple
      - in: query
        name: function
        description: name of the exported function to be invoked
        required: true
        deprecated: false
        schema:
          type: string
        explode: true
        style: form
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/InvokeParameters'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/InvokeResponse'
        '400':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBodyWithOptionalWorkerError'
      security:
      - Cookie: []
      - Token: []
  /v1/components/{component_id}/workers/{worker_name}/complete:
    post:
      tags:
      - Worker
      summary: Complete a promise
      description: |-
        Completes a promise with a given custom array of bytes.
        The promise must be previously created from within the worker, and it's identifier (a combination of a worker identifier and an oplogIdx ) must be sent out to an external caller so it can use this endpoint to mark the promise completed.
        The data field is sent back to the worker, and it has no predefined meaning.
      operationId: complete_promise
      parameters:
      - in: path
        name: component_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      - in: path
        name: worker_name
        required: true
        deprecated: false
        schema:
          type: string
        explode: true
        style: simple
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/CompleteParameters'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                type: boolean
        '400':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBodyWithOptionalWorkerError'
      security:
      - Cookie: []
      - Token: []
  /v1/components/{component_id}/workers/{worker_name}/interrupt:
    post:
      tags:
      - Worker
      summary: Interrupt a worker
      description: |-
        Interrupts the execution of a worker.
        The worker's status will be Interrupted unless the recover-immediately parameter was used, in which case it remains as it was.
        An interrupted worker can be still used, and it is going to be automatically resumed the first time it is used.
        For example in case of a new invocation, the previously interrupted invocation is continued before the new one gets processed.
      operationId: interrupt_worker
      parameters:
      - in: path
        name: component_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      - in: path
        name: worker_name
        required: true
        deprecated: false
        schema:
          type: string
        explode: true
        style: simple
      - in: query
        name: recovery-immediately
        description: if true will simulate a worker recovery. Defaults to false.
        deprecated: false
        schema:
          type: boolean
        explode: true
        style: form
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/InterruptResponse'
        '400':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBodyWithOptionalWorkerError'
      security:
      - Cookie: []
      - Token: []
  /v1/components/{component_id}/workers/find:
    post:
      tags:
      - Worker
      summary: Advanced search for workers
      description: |-
        ### Filter types
        | Type      | Comparator             | Description                    | Example                                                                                       |
        |-----------|------------------------|--------------------------------|-----------------------------------------------------------------------------------------------|
        | Name      | StringFilterComparator | Name of worker                 | `{ "type": "Name", "comparator": "Equal", "value": "worker-name" }`                           |
        | Version   | FilterComparator       | Version of worker              | `{ "type": "Version", "comparator": "GreaterEqual", "value": 0 }`                             |
        | Status    | FilterComparator       | Status of worker               | `{ "type": "Status", "comparator": "Equal", "value": "Running" }`                             |
        | Env       | StringFilterComparator | Environment variable of worker | `{ "type": "Env", "name": "var1", "comparator": "Equal", "value": "value" }`                  |
        | CreatedAt | FilterComparator       | Creation time of worker        | `{ "type": "CreatedAt", "comparator": "Greater", "value": "2024-04-01T12:10:00Z" }`           |
        | And       |                        | And filter combinator          | `{ "type": "And", "filters": [ ... ] }`                                                       |
        | Or        |                        | Or filter combinator           | `{ "type": "Or", "filters": [ ... ] }`                                                        |
        | Not       |                        | Negates the specified filter   | `{ "type": "Not", "filter": { "type": "Version", "comparator": "GreaterEqual", "value": 0 } }`|

        ### Comparators
        - StringFilterComparator: `Equal`, `NotEqual`, `Like`, `NotLike`
        - FilterComparator: `Equal`, `NotEqual`, `GreaterEqual`, `Greater`, `LessEqual`, `Less`

        Returns metadata about an existing component workers:
        - `workers` list of workers metadata
        - `cursor` cursor for next request, if cursor is empty/null, there are no other values
      operationId: find_workers_metadata
      parameters:
      - in: path
        name: component_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/WorkersMetadataRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/WorkersMetadataResponse'
        '400':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBodyWithOptionalWorkerError'
      security:
      - Cookie: []
      - Token: []
  /v1/components/{component_id}/workers/{worker_name}/resume:
    post:
      tags:
      - Worker
      summary: Resume a worker
      operationId: resume_worker
      parameters:
      - in: path
        name: component_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      - in: path
        name: worker_name
        required: true
        deprecated: false
        schema:
          type: string
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResumeResponse'
        '400':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBodyWithOptionalWorkerError'
      security:
      - Cookie: []
      - Token: []
  /v1/components/{component_id}/workers/{worker_name}/update:
    post:
      tags:
      - Worker
      summary: Update a worker
      operationId: update_worker
      parameters:
      - in: path
        name: component_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      - in: path
        name: worker_name
        required: true
        deprecated: false
        schema:
          type: string
        explode: true
        style: simple
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/UpdateWorkerRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/UpdateWorkerResponse'
        '400':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBodyWithOptionalWorkerError'
      security:
      - Cookie: []
      - Token: []
  /v1/components/{component_id}/workers/{worker_name}/oplog:
    get:
      tags:
      - Worker
      summary: Get the oplog of a worker
      operationId: get_oplog
      parameters:
      - in: path
        name: component_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      - in: path
        name: worker_name
        required: true
        deprecated: false
        schema:
          type: string
        explode: true
        style: simple
      - in: query
        name: from
        deprecated: false
        schema:
          type: integer
          format: uint64
        explode: true
        style: form
      - in: query
        name: count
        required: true
        deprecated: false
        schema:
          type: integer
          format: uint64
        explode: true
        style: form
      - in: query
        name: cursor
        deprecated: false
        schema:
          $ref: '#/components/schemas/OplogCursor'
        explode: true
        style: form
      - in: query
        name: query
        deprecated: false
        schema:
          type: string
        explode: true
        style: form
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/GetOplogResponse'
        '400':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBodyWithOptionalWorkerError'
      security:
      - Cookie: []
      - Token: []
  /v1/components/{component_id}/workers/{worker_name}/files/{file_name}:
    get:
      tags:
      - Worker
      summary: List files in a worker
      operationId: get_files
      parameters:
      - in: path
        name: component_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      - in: path
        name: worker_name
        required: true
        deprecated: false
        schema:
          type: string
        explode: true
        style: simple
      - in: path
        name: file_name
        required: true
        deprecated: false
        schema:
          type: string
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/GetFilesResponse'
        '400':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBodyWithOptionalWorkerError'
      security:
      - Cookie: []
      - Token: []
  /v1/components/{component_id}/workers/{worker_name}/file-contents/{file_name}:
    get:
      tags:
      - Worker
      summary: Get contents of a file in a worker
      operationId: get_file_content
      parameters:
      - in: path
        name: component_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      - in: path
        name: worker_name
        required: true
        deprecated: false
        schema:
          type: string
        explode: true
        style: simple
      - in: path
        name: file_name
        required: true
        deprecated: false
        schema:
          type: string
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBodyWithOptionalWorkerError'
      security:
      - Cookie: []
      - Token: []
  /v1/components/{component_id}/workers/{worker_name}/activate-plugin:
    post:
      tags:
      - Worker
      summary: Activate a plugin
      description: The plugin must be one of the installed plugins for the worker's current component version.
      operationId: activate_plugin
      parameters:
      - in: path
        name: component_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      - in: path
        name: worker_name
        required: true
        deprecated: false
        schema:
          type: string
        explode: true
        style: simple
      - in: query
        name: plugin-installation-id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: form
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ActivatePluginResponse'
        '400':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBodyWithOptionalWorkerError'
      security:
      - Cookie: []
      - Token: []
  /v1/components/{component_id}/workers/{worker_name}/deactivate-plugin:
    post:
      tags:
      - Worker
      summary: Deactivate a plugin
      description: The plugin must be one of the installed plugins for the worker's current component version.
      operationId: deactivate_plugin
      parameters:
      - in: path
        name: component_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      - in: path
        name: worker_name
        required: true
        deprecated: false
        schema:
          type: string
        explode: true
        style: simple
      - in: query
        name: plugin-installation-id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: form
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/DeactivatePluginResponse'
        '400':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBodyWithOptionalWorkerError'
      security:
      - Cookie: []
      - Token: []
  /v1/components/{component_id}/workers/{worker_name}/revert:
    post:
      tags:
      - Worker
      summary: Revert a worker
      description: Reverts a worker by undoing either the last few invocations or the last few recorded oplog entries.
      operationId: revert_worker
      parameters:
      - in: path
        name: component_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      - in: path
        name: worker_name
        required: true
        deprecated: false
        schema:
          type: string
        explode: true
        style: simple
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/RevertWorkerTarget'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/RevertWorkerResponse'
        '400':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBodyWithOptionalWorkerError'
      security:
      - Cookie: []
      - Token: []
  /v1/components/{component_id}/workers/{worker_name}/invocations/{idempotency_key}:
    delete:
      tags:
      - Worker
      summary: Cancels a pending invocation if it has not started yet
      description: The invocation to be cancelled is identified by the idempotency key passed to the invoke API.
      operationId: cancel_invocation
      parameters:
      - in: path
        name: component_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      - in: path
        name: worker_name
        required: true
        deprecated: false
        schema:
          type: string
        explode: true
        style: simple
      - in: path
        name: idempotency_key
        required: true
        deprecated: false
        schema:
          type: string
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/CancelInvocationResponse'
        '400':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBodyWithOptionalWorkerError'
      security:
      - Cookie: []
      - Token: []
  /v1/components/{component_id}/workers/{worker_name}/connect:
    get:
      tags:
      - Worker
      summary: Connect to a worker using a websocket and stream events
      operationId: worker_connect
      parameters:
      - in: path
        name: component_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      - in: path
        name: worker_name
        required: true
        deprecated: false
        schema:
          type: string
        explode: true
        style: simple
      responses:
        '101':
          description: A websocket response
        '400':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBodyWithOptionalWorkerError'
  /v1/accounts/{account_id}/apps:
    get:
      tags:
      - RegistryService
      - Account
      - Application
      summary: Get all applications in the account
      operationId: list_account_applications
      parameters:
      - in: path
        name: account_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_Application'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
    post:
      tags:
      - RegistryService
      - Account
      - Application
      summary: Create an application in the account
      operationId: create_application
      parameters:
      - in: path
        name: account_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/ApplicationCreation'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Application'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/accounts/{account_id}/apps/{application_name}:
    get:
      tags:
      - RegistryService
      - Account
      - Application
      summary: Get application in the account by name
      operationId: get_account_application
      parameters:
      - in: path
        name: account_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      - in: path
        name: application_name
        required: true
        deprecated: false
        schema:
          type: string
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Application'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/accounts/{account_id}/tokens:
    get:
      tags:
      - RegistryService
      - Account
      - Token
      summary: Get all tokens
      description: |-
        Gets all created tokens of an account.
        The format of each element is the same as the data object in the oauth2 endpoint's response.
      operationId: get_account_tokens
      parameters:
      - in: path
        name: account_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_Token'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
    post:
      tags:
      - RegistryService
      - Account
      - Token
      summary: Create new token
      description: |
        Creates a new token with a given expiration date.
        The response not only contains the token data but also the secret which can be passed as a bearer token to the Authorization header to the Golem Cloud REST API.
      operationId: create_token
      parameters:
      - in: path
        name: account_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/TokenCreation'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/TokenWithSecret'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/accounts:
    post:
      tags:
      - RegistryService
      - Account
      summary: Create account
      description: Create a new account. The response is the created account data.
      operationId: create_account
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/AccountCreation'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Account'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/accounts/{account_id}:
    get:
      tags:
      - RegistryService
      - Account
      summary: Get account
      description: Retrieve an account for a given Account ID
      operationId: get_account
      parameters:
      - in: path
        name: account_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Account'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
    put:
      tags:
      - RegistryService
      - Account
      summary: Update account
      description: |-
        Allows the user to change the account details such as name and email.

        Changing the planId is not allowed and the request will be rejected.
        The response is the updated account data.
      operationId: update_account
      parameters:
      - in: path
        name: account_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/AccountUpdate'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Account'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
    delete:
      tags:
      - RegistryService
      - Account
      summary: Delete account
      description: Delete an account.
      operationId: delete_account
      parameters:
      - in: path
        name: account_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Empty'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/accounts/{account_id}/plan:
    get:
      tags:
      - RegistryService
      - Account
      summary: Get account's plan
      operationId: get_account_plan
      parameters:
      - in: path
        name: account_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Plan'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/accounts/{account_id}/roles:
    put:
      tags:
      - RegistryService
      - Account
      summary: Update roles of an accout
      operationId: set_account_roles
      parameters:
      - in: path
        name: account_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AccountRole'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Account'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/accounts/{account_id}/plugins:
    get:
      tags:
      - RegistryService
      - Account
      - Plugin
      summary: Get all plugins registered in account
      operationId: get_account_plugins
      parameters:
      - in: path
        name: account_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_PluginRegistrationDto'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
    post:
      tags:
      - RegistryService
      - Account
      - Plugin
      summary: Register a new plugin
      operationId: create_plugin
      parameters:
      - in: path
        name: account_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                metadata:
                  $ref: '#/components/schemas/PluginRegistrationCreation'
                pluginWasm:
                  type: string
                  format: binary
              required:
              - metadata
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/PluginRegistrationDto'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/api-definitions/{api_definition_id}:
    get:
      tags:
      - RegistryService
      - ApiDefinition
      summary: Get api-definition by id
      operationId: get_api_definition
      parameters:
      - in: path
        name: api_definition_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/HttpApiDefinitionResponseView'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
    patch:
      tags:
      - RegistryService
      - ApiDefinition
      summary: update api-definition
      operationId: update_api_definition
      parameters:
      - in: path
        name: api_definition_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/UpdateHttpApiDefinitionRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/HttpApiDefinitionResponseView'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/api-definitions/{api_definition_id}/revisions:
    get:
      tags:
      - RegistryService
      - ApiDefinition
      summary: Get revisions of the api definition
      operationId: get_api_definition_revisions
      parameters:
      - in: path
        name: api_definition_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_HttpApiDefinitionResponseView'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/api-definitions/{api_definition_id}/revisions/{revision}:
    get:
      tags:
      - RegistryService
      - ApiDefinition
      summary: Get specific revision of an api definition
      operationId: get_api_definition_revision
      parameters:
      - in: path
        name: api_definition_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      - in: path
        name: revision
        required: true
        deprecated: false
        schema:
          type: integer
          format: uint64
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/HttpApiDefinitionResponseView'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/api-deployments/{api_deployment_id}:
    get:
      tags:
      - RegistryService
      - ApiDeployment
      summary: Get an api-deployment by id
      operationId: get_api_deployment
      parameters:
      - in: path
        name: api_deployment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ApiDeployment'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
    patch:
      tags:
      - RegistryService
      - ApiDeployment
      summary: Update an api-deployment
      operationId: update_api_deployment
      parameters:
      - in: path
        name: api_deployment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/UpdateApiDeploymentRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ApiDeployment'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/api-deployments/{api_deployment_id}/revisions:
    get:
      tags:
      - RegistryService
      - ApiDeployment
      summary: Get all revisions for an api-deployment
      operationId: get_api_deployment_revisions
      parameters:
      - in: path
        name: api_deployment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_ApiDeployment'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/api-deployments/{api_deployment_id}/revisions/{revision}:
    get:
      tags:
      - RegistryService
      - ApiDeployment
      summary: Get specific revision an api-deployment
      operationId: get_api_deployment_revision
      parameters:
      - in: path
        name: api_deployment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      - in: path
        name: revision
        required: true
        deprecated: false
        schema:
          type: integer
          format: uint64
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ApiDeployment'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/domains/{domain_id}:
    get:
      tags:
      - RegistryService
      - ApiDomain
      summary: Get api domain by id
      operationId: get_domain
      parameters:
      - in: path
        name: domain_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ApiDomain'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
    patch:
      tags:
      - RegistryService
      - ApiDomain
      summary: Update an api-domain
      operationId: update_domain
      parameters:
      - in: path
        name: domain_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/UpdateApiDomainRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ApiDomain'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/domains/{domain_id}/revisions:
    get:
      tags:
      - RegistryService
      - ApiDomain
      summary: Get all revisions of an api-domain
      operationId: get_domain_revisions
      parameters:
      - in: path
        name: domain_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_ApiDomain'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/apps/{application_id}:
    get:
      tags:
      - RegistryService
      - Application
      summary: Get application by id.
      operationId: get_application
      parameters:
      - in: path
        name: application_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Application'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
    delete:
      tags:
      - RegistryService
      - Application
      summary: Update application by id.
      operationId: delete_application
      parameters:
      - in: path
        name: application_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '204':
          description: ''
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
    patch:
      tags:
      - RegistryService
      - Application
      summary: Update application by id.
      operationId: update_application
      parameters:
      - in: path
        name: application_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/ApplicationUpdate'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Application'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/apps/{application_id}/envs:
    get:
      tags:
      - RegistryService
      - Application
      - Environment
      summary: List all application environments
      operationId: list_application_environments
      parameters:
      - in: path
        name: application_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_Environment'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
    post:
      tags:
      - RegistryService
      - Application
      - Environment
      summary: Create an application environment
      operationId: create_environment
      parameters:
      - in: path
        name: application_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/EnvironmentCreation'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Environment'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/apps/{application_id}/envs/{environment_name}:
    get:
      tags:
      - RegistryService
      - Application
      - Environment
      summary: Get application environment by name
      operationId: get_application_environment
      parameters:
      - in: path
        name: application_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      - in: path
        name: environment_name
        required: true
        deprecated: false
        schema:
          type: string
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Environment'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/certificates/{certificate_id}:
    get:
      tags:
      - RegistryService
      - ApiCertificate
      summary: Get a certificate by id
      operationId: get_certificate
      parameters:
      - in: path
        name: certificate_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/CertificateResponseView'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
    patch:
      tags:
      - RegistryService
      - ApiCertificate
      summary: Update a certificate
      operationId: update_certificate
      parameters:
      - in: path
        name: certificate_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/UpdateCertificateRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/CertificateResponseView'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/certificates/{certificate_id}/revisions:
    get:
      tags:
      - RegistryService
      - ApiCertificate
      summary: Get all revisions of a certificate
      operationId: get_certificate_revisions
      parameters:
      - in: path
        name: certificate_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_CertificateResponseView'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/components/{component_id}:
    get:
      tags:
      - RegistryService
      - Component
      summary: Get a component by id
      operationId: get_component
      parameters:
      - in: path
        name: component_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ComponentDto'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
    patch:
      tags:
      - RegistryService
      - Component
      summary: Update a component
      description: The request body is encoded as multipart/form-data containing metadata and the WASM binary.
      operationId: update_component
      parameters:
      - in: path
        name: component_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                metadata:
                  $ref: '#/components/schemas/ComponentUpdate'
                newComponentWasm:
                  type: string
                  format: binary
                newFiles:
                  type: string
                  format: binary
              required:
              - metadata
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ComponentDto'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/components/{component_id}/revisions/{revision}:
    get:
      tags:
      - RegistryService
      - Component
      summary: Get specific revision of a component
      operationId: get_component_revision
      parameters:
      - in: path
        name: component_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      - in: path
        name: revision
        required: true
        deprecated: false
        schema:
          type: integer
          format: uint64
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ComponentDto'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/components/{component_id}/revisions/{revision}/wasm:
    get:
      tags:
      - RegistryService
      - Component
      summary: Get the component wasm binary of a specific revision
      operationId: get_component_wasm
      parameters:
      - in: path
        name: component_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      - in: path
        name: revision
        required: true
        deprecated: false
        schema:
          type: integer
          format: uint64
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/envs/{environment_id}/api-definitions:
    get:
      tags:
      - RegistryService
      - Environment
      - ApiDefinition
      summary: Get all api-definitions in the environment
      operationId: get_environment_api_definitions
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_HttpApiDefinitionResponseView'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
    post:
      tags:
      - RegistryService
      - Environment
      - ApiDefinition
      summary: Create a new api-definition in the environment
      operationId: create_api_definition
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/CreateHttpApiDefinitionRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/HttpApiDefinitionResponseView'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/envs/{environment_id}/api-definitions/{api_definition_name}:
    get:
      tags:
      - RegistryService
      - Environment
      - ApiDefinition
      summary: Get api-definition by name
      operationId: get_environment_api_definition
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      - in: path
        name: api_definition_name
        required: true
        deprecated: false
        schema:
          type: string
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/HttpApiDefinitionResponseView'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/envs/{environment_id}/deployments/{deployment_revision_id}/api-definitions:
    get:
      tags:
      - RegistryService
      - Environment
      - ApiDefinition
      - Deployment
      summary: Get all api-definitions in a specific deployment
      operationId: get_deployment_api_definitions
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      - in: path
        name: deployment_revision_id
        required: true
        deprecated: false
        schema:
          type: integer
          format: uint64
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_HttpApiDefinitionResponseView'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/envs/{environment_id}/deployments/{deployment_revision_id}/api-definitions/{api_definition_name}:
    get:
      tags:
      - RegistryService
      - Environment
      - ApiDefinition
      - Deployment
      summary: Get api-definition in a deployment by name
      operationId: get_deployment_api_definition
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      - in: path
        name: deployment_revision_id
        required: true
        deprecated: false
        schema:
          type: integer
          format: uint64
        explode: true
        style: simple
      - in: path
        name: api_definition_name
        required: true
        deprecated: false
        schema:
          type: string
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/HttpApiDefinitionResponseView'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/envs/{environment_id}/api-deployments:
    get:
      tags:
      - RegistryService
      - Environment
      - ApiDeployment
      summary: Get all api-deployments in the environment
      operationId: get_environment_api_deployments
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_ApiDeployment'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
    post:
      tags:
      - RegistryService
      - Environment
      - ApiDeployment
      summary: Create a new api deployment
      operationId: create_api_deployment
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/CreateApiDeploymentRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ApiDeployment'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/envs/{environment_id}/api-deployments/{site}:
    get:
      tags:
      - RegistryService
      - Environment
      - ApiDeployment
      summary: Get api-deployment by site
      operationId: get_environment_api_deployment
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      - in: path
        name: site
        required: true
        deprecated: false
        schema:
          type: string
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ApiDeployment'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/envs/{environment_id}/deployments/{deployment_revision_id}/api-deployments:
    get:
      tags:
      - RegistryService
      - Environment
      - ApiDeployment
      - Deployment
      summary: Get all api-deployments in a specific deployment
      operationId: get_deployment_api_deployments
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      - in: path
        name: deployment_revision_id
        required: true
        deprecated: false
        schema:
          type: integer
          format: uint64
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_ApiDeployment'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/envs/{environment_id}/deployments/{deployment_revision_id}/api-deployments/{site}:
    get:
      tags:
      - RegistryService
      - Environment
      - ApiDeployment
      - Deployment
      summary: Get api-deployment in a deployment by site
      operationId: get_deployment_api_deployment
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      - in: path
        name: deployment_revision_id
        required: true
        deprecated: false
        schema:
          type: integer
          format: uint64
        explode: true
        style: simple
      - in: path
        name: site
        required: true
        deprecated: false
        schema:
          type: string
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ApiDeployment'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/envs/{environment_id}/domains:
    get:
      tags:
      - RegistryService
      - Environment
      - ApiDomain
      summary: Get all API domains
      operationId: get_domains
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_ApiDomain'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
    post:
      tags:
      - RegistryService
      - Environment
      - ApiDomain
      summary: Create a new api-domain in the environment
      operationId: create_domain
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/CreateApiDomainRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ApiDomain'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/envs/{environment_id}/domains/{domain}:
    get:
      tags:
      - RegistryService
      - Environment
      - ApiDomain
      summary: Get an api-domain in the environment
      operationId: get_environment_domain
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      - in: path
        name: domain
        required: true
        deprecated: false
        schema:
          type: string
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ApiDomain'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/envs/{environment_id}/certificates:
    get:
      tags:
      - RegistryService
      - Environment
      - ApiCertificate
      summary: Get all certificates in this environment
      operationId: get_environment_certificates
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_CertificateResponseView'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
    post:
      tags:
      - RegistryService
      - Environment
      - ApiCertificate
      summary: Creates a new certificate
      description: |-
        A certificate is associated with a given Golem project and domain, and consists of
        a key pair.

        The created certificate will be associated with a certificate ID returned by this endpoint.
      operationId: create_environment_certificate
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/CreateCertificateRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/CertificateResponseView'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/envs/{environment_id}/certificates/{certificate_name}:
    get:
      tags:
      - RegistryService
      - Environment
      - ApiCertificate
      summary: Get a certificate in this environment
      operationId: get_environment_certificate
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      - in: path
        name: certificate_name
        required: true
        deprecated: false
        schema:
          type: string
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/CertificateResponseView'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/envs/{environment_id}/components:
    get:
      tags:
      - RegistryService
      - Environment
      - Component
      summary: Get all components in the environment
      operationId: get_environment_components
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_ComponentDto'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
    post:
      tags:
      - RegistryService
      - Environment
      - Component
      summary: Create a new component in the environment
      description: The request body is encoded as multipart/form-data containing metadata and the WASM binary.
      operationId: create_component
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                metadata:
                  $ref: '#/components/schemas/ComponentCreation'
                componentWasm:
                  type: string
                  format: binary
                files:
                  type: string
                  format: binary
              required:
              - metadata
              - componentWasm
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ComponentDto'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/envs/{environment_id}/components/{component_name}:
    get:
      tags:
      - RegistryService
      - Environment
      - Component
      summary: Get a component in the environment by name
      operationId: get_environment_component
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      - in: path
        name: component_name
        required: true
        deprecated: false
        schema:
          type: string
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ComponentDto'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/envs/{environment_id}/deployments/{deployment_revision_id}/components:
    get:
      tags:
      - RegistryService
      - Environment
      - Component
      - Deployment
      summary: Get all components in a specific deployment
      operationId: get_deployment_components
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      - in: path
        name: deployment_revision_id
        required: true
        deprecated: false
        schema:
          type: integer
          format: uint64
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_ComponentDto'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/envs/{environment_id}/deployments/{deployment_revision_id}/components/{component_name}:
    get:
      tags:
      - RegistryService
      - Environment
      - Component
      - Deployment
      summary: Get component in a deployment by name
      operationId: get_deployment_component
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      - in: path
        name: deployment_revision_id
        required: true
        deprecated: false
        schema:
          type: integer
          format: uint64
        explode: true
        style: simple
      - in: path
        name: component_name
        required: true
        deprecated: false
        schema:
          type: string
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ComponentDto'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/envs/{environment_id}:
    get:
      tags:
      - RegistryService
      - Environment
      summary: Get environment by id.
      operationId: get_environment
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Environment'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
    delete:
      tags:
      - RegistryService
      - Environment
      summary: Delete environment by id.
      operationId: delete_environment
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '204':
          description: ''
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
    patch:
      tags:
      - RegistryService
      - Environment
      summary: Update environment by id.
      operationId: update_environment
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/EnvironmentUpdate'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Environment'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/envs/{environment_id}/plan:
    get:
      tags:
      - RegistryService
      - Environment
      summary: Get the current deployment plan
      operationId: get_environment_deployment_plan
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/DeploymentPlan'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/envs/{environment_id}/deployments:
    get:
      tags:
      - RegistryService
      - Environment
      - Deployment
      summary: Get all deployments in this environment
      operationId: get_deployments
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_Deployment'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
    post:
      tags:
      - RegistryService
      - Environment
      - Deployment
      summary: Deploy the current staging area of this environment
      operationId: deploy_environment
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/DeploymentCreation'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Deployment'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/envs/{environment_id}/deployments/{deployment_id}/plan:
    get:
      tags:
      - RegistryService
      - Environment
      summary: Get the deployment plan of a deployed deployment
      operationId: get_environment_deployed_deployment_plan
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      - in: path
        name: deployment_id
        required: true
        deprecated: false
        schema:
          type: integer
          format: uint64
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/DeploymentPlan'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/envs/{environment_id}/shares:
    get:
      tags:
      - RegistryService
      - Environment
      - EnvironmentShares
      summary: Deploy the current staging area of this environment
      operationId: get_environment_shares
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_EnvironmentShare'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
    post:
      tags:
      - RegistryService
      - Environment
      - EnvironmentShares
      summary: Deploy the current staging area of this environment
      operationId: create_environment_share
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/EnvironmentShareCreation'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EnvironmentShare'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/envs/{environment_id}/plugins:
    get:
      tags:
      - RegistryService
      - Environment
      - EnvironmentPluginGrants
      summary: List all environment plugin grants in the environment
      operationId: list_environment_plugin_grants
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_EnvironmentPluginGrant'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
    post:
      tags:
      - RegistryService
      - Environment
      - EnvironmentPluginGrants
      summary: Create a new environment plugin grant
      operationId: create_environment_plugin_grant
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/EnvironmentPluginGrantCreation'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EnvironmentPluginGrant'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/envs/{environment_id}/security-schemes:
    get:
      tags:
      - RegistryService
      - Environment
      - ApiSecurity
      summary: Get all security schemes in the environment
      operationId: get_environment_security_schemes
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_SecuritySchemeResponseView'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
    post:
      tags:
      - RegistryService
      - Environment
      - ApiSecurity
      summary: Create a new security scheme in the environment
      operationId: create_environment_security_scheme
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/CreateSecuritySchemeRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/SecuritySchemeResponseView'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/envs/{environment_id}/security-schemes/{security_scheme_name}:
    get:
      tags:
      - RegistryService
      - Environment
      - ApiSecurity
      summary: Get a security scheme
      description: Get a security scheme by name
      operationId: get_environment_security_scheme
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      - in: path
        name: security_scheme_name
        required: true
        deprecated: false
        schema:
          type: string
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/SecuritySchemeResponseView'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/environment-plugins/{environment_plugin_grant_id}:
    get:
      tags:
      - RegistryService
      - EnvironmentPluginGrants
      - EnvironmentPluginGrants
      summary: Get environment grant by id
      operationId: get_environment_plugin_grant
      parameters:
      - in: path
        name: environment_plugin_grant_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EnvironmentPluginGrant'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
    delete:
      tags:
      - RegistryService
      - EnvironmentPluginGrants
      - EnvironmentPluginGrants
      summary: Get environment grant by id
      operationId: delete_environment_plugin_grant
      parameters:
      - in: path
        name: environment_plugin_grant_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '204':
          description: ''
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/environment-shares/{environment_share_id}:
    get:
      tags:
      - RegistryService
      - EnvironmentShares
      summary: Get environment share by id.
      operationId: get_environment_share
      parameters:
      - in: path
        name: environment_share_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EnvironmentShare'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
    delete:
      tags:
      - RegistryService
      - EnvironmentShares
      summary: Delete environment share
      operationId: delete_environment_share
      parameters:
      - in: path
        name: environment_share_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EnvironmentShare'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
    patch:
      tags:
      - RegistryService
      - EnvironmentShares
      summary: Update environment share
      operationId: update_environment_share
      parameters:
      - in: path
        name: environment_share_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/EnvironmentShareUpdate'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EnvironmentShare'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/login/v1/oauth2:
    post:
      tags:
      - RegistryService
      - Login
      summary: Acquire token with OAuth2 authorization
      description: |
        Gets a token by authorizing with an external OAuth2 provider. Currently only github is supported.

        In the response:
        - `id` is the identifier of the token itself
        - `accountId` is the account's identifier, can be used on the account API
        - `secret` is the secret key to be sent in the Authorization header as a bearer token for all the other endpoints
      operationId: login_oauth2
      parameters:
      - in: query
        name: provider
        description: Currently only `github` is supported.
        required: true
        deprecated: false
        schema:
          $ref: '#/components/schemas/OAuth2Provider'
        explode: true
        style: form
      - in: query
        name: access-token
        description: OAuth2 access token
        required: true
        deprecated: false
        schema:
          type: string
        explode: true
        style: form
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/TokenWithSecret'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
  /v1/login/token:
    get:
      tags:
      - RegistryService
      - Login
      summary: Get information about a token
      description: |-
        Gets information about a token that is selected by the secret key passed in the Authorization header.
        The JSON is the same as the data object in the oauth2 endpoint's response.
      operationId: current_login_token
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Token'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/login/oauth2/device/start:
    post:
      tags:
      - RegistryService
      - Login
      summary: Start OAuth2 interactive flow
      description: |-
        Starts an interactive authorization flow.
        The user must open the returned url and enter the userCode in a form before the expires deadline.
        Then the finish GitHub OAuth2 interactive flow endpoint must be called with the encoded session to finish the flow.
      operationId: start_oauth2_device_flow
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/OAuth2DeviceFlowStartRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/OAuth2DeviceflowData'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
  /v1/login/oauth2/device/complete:
    post:
      tags:
      - RegistryService
      - Login
      summary: Finish GitHub OAuth2 interactive flow
      description: |-
        Finishes an interactive authorization flow. The returned JSON is equivalent to the oauth2 endpoint's response.
        Returns a JSON string containing the encodedSession from the start endpoint's response.
      operationId: complete_oauth2_device_flow
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              type: string
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/TokenWithSecret'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
  /v1/login/oauth2/web/authorize:
    get:
      tags:
      - RegistryService
      - Login
      summary: Initiate OAuth2 Web Flow
      description: Starts the OAuth2 web flow authorization process by returning the authorization URL for the given provider.
      operationId: start_oauth2_webflow
      parameters:
      - in: query
        name: provider
        description: Currently only `github` is supported.
        required: true
        deprecated: false
        schema:
          $ref: '#/components/schemas/OAuth2Provider'
        explode: true
        style: form
      - in: query
        name: redirect
        description: The redirect URL to redirect to after the user has authorized the application
        deprecated: false
        schema:
          type: string
        explode: true
        style: form
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/OAuth2WebflowData'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
  /v1/login/oauth2/web/callback:
    get:
      tags:
      - RegistryService
      - Login
      summary: OAuth2 Web Flow callback
      description: |-
        This endpoint handles the callback from the provider after the user has authorized the application.
        It exchanges the code for an access token and then uses that to log the user in.
      operationId: submit_oauth2_webflow_callback
      parameters:
      - in: query
        name: code
        description: The authorization code returned by GitHub
        required: true
        deprecated: false
        schema:
          type: string
        explode: true
        style: form
      - in: query
        name: state
        description: The state parameter for CSRF protection
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: form
      responses:
        '302':
          description: Redirect to the given URL specified in the web flow start
          headers:
            LOCATION:
              style: simple
              required: true
              deprecated: false
              schema:
                type: string
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Empty'
        '200':
          description: OAuth flow has completed
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Empty'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
  /v1/login/oauth2/web/poll:
    get:
      tags:
      - RegistryService
      - Login
      summary: Poll for OAuth2 Web Flow token
      description: |-
        This endpoint is used by clients to poll for the token after the user has authorized the application via the web flow.
        A given state might only be exchanged for a token once. Any further attempts to exchange the state will fail.
      operationId: poll_oauth2_webflow
      parameters:
      - in: query
        name: state
        description: The state parameter for identifying the session
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: form
      responses:
        '200':
          description: OAuth flow has completed
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/TokenWithSecret'
        '202':
          description: OAuth flow is pending
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Empty'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
  /v1/plugins/{plugin_id}:
    get:
      tags:
      - RegistryService
      - Plugin
      summary: Get a plugin by id
      operationId: get_plugin_by_id
      parameters:
      - in: path
        name: plugin_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/PluginRegistrationDto'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
    delete:
      tags:
      - RegistryService
      - Plugin
      summary: Delete a plugin
      operationId: delete_plugin
      parameters:
      - in: path
        name: plugin_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/PluginRegistrationDto'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/reports/account_summaries:
    get:
      tags:
      - RegistryService
      - Account
      - Token
      operationId: get_account_summaries_report
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_AccountSummary'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/reports/account_count:
    get:
      tags:
      - RegistryService
      - Account
      - Token
      operationId: get_account_count_report
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/AccountCounts'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/security-schemes/{security_scheme_id}:
    get:
      tags:
      - RegistryService
      - ApiSecurity
      summary: Get api security scheme by id
      operationId: get_security_scheme
      parameters:
      - in: path
        name: security_scheme_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/SecuritySchemeResponseView'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/security-schemes/{security_scheme_id}/revisions:
    get:
      tags:
      - RegistryService
      - ApiSecurity
      summary: Get all revisions of the security scheme
      operationId: get_security_scheme_revisions
      parameters:
      - in: path
        name: security_scheme_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_SecuritySchemeResponseView'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/tokens/{token_id}:
    get:
      tags:
      - RegistryService
      - Token
      summary: Get token by id
      operationId: get_token
      parameters:
      - in: path
        name: token_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Token'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
    delete:
      tags:
      - RegistryService
      - Token
      summary: Delete a token
      description: Deletes a previously created token given by its identifier.
      operationId: delete_token
      parameters:
      - in: path
        name: token_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Empty'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
components:
  schemas:
    ActivatePluginParameters:
      title: ActivatePluginParameters
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        plugin:
          $ref: '#/components/schemas/PluginInstallationDescription'
      required:
      - timestamp
      - plugin
    ActivatePluginResponse:
      title: ActivatePluginResponse
      type: object
    AgentInstanceKey:
      title: AgentInstanceKey
      type: object
      properties:
        agentType:
          type: string
        agentId:
          type: string
      required:
      - agentType
      - agentId
    AnalysedResourceMode:
      type: string
      enum:
      - Owned
      - Borrowed
    AnalysedType:
      discriminator:
        propertyName: type
        mapping:
          Variant: '#/components/schemas/AnalysedType_TypeVariant'
          Result: '#/components/schemas/AnalysedType_TypeResult'
          Option: '#/components/schemas/AnalysedType_TypeOption'
          Enum: '#/components/schemas/AnalysedType_TypeEnum'
          Flags: '#/components/schemas/AnalysedType_TypeFlags'
          Record: '#/components/schemas/AnalysedType_TypeRecord'
          Tuple: '#/components/schemas/AnalysedType_TypeTuple'
          List: '#/components/schemas/AnalysedType_TypeList'
          Str: '#/components/schemas/AnalysedType_TypeStr'
          Chr: '#/components/schemas/AnalysedType_TypeChr'
          F64: '#/components/schemas/AnalysedType_TypeF64'
          F32: '#/components/schemas/AnalysedType_TypeF32'
          U64: '#/components/schemas/AnalysedType_TypeU64'
          S64: '#/components/schemas/AnalysedType_TypeS64'
          U32: '#/components/schemas/AnalysedType_TypeU32'
          S32: '#/components/schemas/AnalysedType_TypeS32'
          U16: '#/components/schemas/AnalysedType_TypeU16'
          S16: '#/components/schemas/AnalysedType_TypeS16'
          U8: '#/components/schemas/AnalysedType_TypeU8'
          S8: '#/components/schemas/AnalysedType_TypeS8'
          Bool: '#/components/schemas/AnalysedType_TypeBool'
          Handle: '#/components/schemas/AnalysedType_TypeHandle'
      type: object
      oneOf:
      - $ref: '#/components/schemas/AnalysedType_TypeVariant'
      - $ref: '#/components/schemas/AnalysedType_TypeResult'
      - $ref: '#/components/schemas/AnalysedType_TypeOption'
      - $ref: '#/components/schemas/AnalysedType_TypeEnum'
      - $ref: '#/components/schemas/AnalysedType_TypeFlags'
      - $ref: '#/components/schemas/AnalysedType_TypeRecord'
      - $ref: '#/components/schemas/AnalysedType_TypeTuple'
      - $ref: '#/components/schemas/AnalysedType_TypeList'
      - $ref: '#/components/schemas/AnalysedType_TypeStr'
      - $ref: '#/components/schemas/AnalysedType_TypeChr'
      - $ref: '#/components/schemas/AnalysedType_TypeF64'
      - $ref: '#/components/schemas/AnalysedType_TypeF32'
      - $ref: '#/components/schemas/AnalysedType_TypeU64'
      - $ref: '#/components/schemas/AnalysedType_TypeS64'
      - $ref: '#/components/schemas/AnalysedType_TypeU32'
      - $ref: '#/components/schemas/AnalysedType_TypeS32'
      - $ref: '#/components/schemas/AnalysedType_TypeU16'
      - $ref: '#/components/schemas/AnalysedType_TypeS16'
      - $ref: '#/components/schemas/AnalysedType_TypeU8'
      - $ref: '#/components/schemas/AnalysedType_TypeS8'
      - $ref: '#/components/schemas/AnalysedType_TypeBool'
      - $ref: '#/components/schemas/AnalysedType_TypeHandle'
    AnalysedType_TypeBool:
      allOf:
      - type: object
        properties:
          type:
            example: Bool
            type: string
            enum:
            - Bool
        required:
        - type
      - $ref: '#/components/schemas/TypeBool'
    AnalysedType_TypeChr:
      allOf:
      - type: object
        properties:
          type:
            example: Chr
            type: string
            enum:
            - Chr
        required:
        - type
      - $ref: '#/components/schemas/TypeChr'
    AnalysedType_TypeEnum:
      allOf:
      - type: object
        properties:
          type:
            example: Enum
            type: string
            enum:
            - Enum
        required:
        - type
      - $ref: '#/components/schemas/TypeEnum'
    AnalysedType_TypeF32:
      allOf:
      - type: object
        properties:
          type:
            example: F32
            type: string
            enum:
            - F32
        required:
        - type
      - $ref: '#/components/schemas/TypeF32'
    AnalysedType_TypeF64:
      allOf:
      - type: object
        properties:
          type:
            example: F64
            type: string
            enum:
            - F64
        required:
        - type
      - $ref: '#/components/schemas/TypeF64'
    AnalysedType_TypeFlags:
      allOf:
      - type: object
        properties:
          type:
            example: Flags
            type: string
            enum:
            - Flags
        required:
        - type
      - $ref: '#/components/schemas/TypeFlags'
    AnalysedType_TypeHandle:
      allOf:
      - type: object
        properties:
          type:
            example: Handle
            type: string
            enum:
            - Handle
        required:
        - type
      - $ref: '#/components/schemas/TypeHandle'
    AnalysedType_TypeList:
      allOf:
      - type: object
        properties:
          type:
            example: List
            type: string
            enum:
            - List
        required:
        - type
      - $ref: '#/components/schemas/TypeList'
    AnalysedType_TypeOption:
      allOf:
      - type: object
        properties:
          type:
            example: Option
            type: string
            enum:
            - Option
        required:
        - type
      - $ref: '#/components/schemas/TypeOption'
    AnalysedType_TypeRecord:
      allOf:
      - type: object
        properties:
          type:
            example: Record
            type: string
            enum:
            - Record
        required:
        - type
      - $ref: '#/components/schemas/TypeRecord'
    AnalysedType_TypeResult:
      allOf:
      - type: object
        properties:
          type:
            example: Result
            type: string
            enum:
            - Result
        required:
        - type
      - $ref: '#/components/schemas/TypeResult'
    AnalysedType_TypeS16:
      allOf:
      - type: object
        properties:
          type:
            example: S16
            type: string
            enum:
            - S16
        required:
        - type
      - $ref: '#/components/schemas/TypeS16'
    AnalysedType_TypeS32:
      allOf:
      - type: object
        properties:
          type:
            example: S32
            type: string
            enum:
            - S32
        required:
        - type
      - $ref: '#/components/schemas/TypeS32'
    AnalysedType_TypeS64:
      allOf:
      - type: object
        properties:
          type:
            example: S64
            type: string
            enum:
            - S64
        required:
        - type
      - $ref: '#/components/schemas/TypeS64'
    AnalysedType_TypeS8:
      allOf:
      - type: object
        properties:
          type:
            example: S8
            type: string
            enum:
            - S8
        required:
        - type
      - $ref: '#/components/schemas/TypeS8'
    AnalysedType_TypeStr:
      allOf:
      - type: object
        properties:
          type:
            example: Str
            type: string
            enum:
            - Str
        required:
        - type
      - $ref: '#/components/schemas/TypeStr'
    AnalysedType_TypeTuple:
      allOf:
      - type: object
        properties:
          type:
            example: Tuple
            type: string
            enum:
            - Tuple
        required:
        - type
      - $ref: '#/components/schemas/TypeTuple'
    AnalysedType_TypeU16:
      allOf:
      - type: object
        properties:
          type:
            example: U16
            type: string
            enum:
            - U16
        required:
        - type
      - $ref: '#/components/schemas/TypeU16'
    AnalysedType_TypeU32:
      allOf:
      - type: object
        properties:
          type:
            example: U32
            type: string
            enum:
            - U32
        required:
        - type
      - $ref: '#/components/schemas/TypeU32'
    AnalysedType_TypeU64:
      allOf:
      - type: object
        properties:
          type:
            example: U64
            type: string
            enum:
            - U64
        required:
        - type
      - $ref: '#/components/schemas/TypeU64'
    AnalysedType_TypeU8:
      allOf:
      - type: object
        properties:
          type:
            example: U8
            type: string
            enum:
            - U8
        required:
        - type
      - $ref: '#/components/schemas/TypeU8'
    AnalysedType_TypeVariant:
      allOf:
      - type: object
        properties:
          type:
            example: Variant
            type: string
            enum:
            - Variant
        required:
        - type
      - $ref: '#/components/schemas/TypeVariant'
    ApiDefinitionInfo:
      title: ApiDefinitionInfo
      type: object
      properties:
        id:
          type: string
        version:
          type: string
      required:
      - id
      - version
    BinaryReference:
      discriminator:
        propertyName: type
        mapping:
          Url: '#/components/schemas/BinaryReference_Url'
          Inline: '#/components/schemas/BinaryReference_BinarySource'
      type: object
      oneOf:
      - $ref: '#/components/schemas/BinaryReference_Url'
      - $ref: '#/components/schemas/BinaryReference_BinarySource'
    BinaryReference_BinarySource:
      allOf:
      - type: object
        properties:
          type:
            example: Inline
            type: string
            enum:
            - Inline
        required:
        - type
      - $ref: '#/components/schemas/BinarySource'
    BinaryReference_Url:
      allOf:
      - type: object
        properties:
          type:
            example: Url
            type: string
            enum:
            - Url
        required:
        - type
      - $ref: '#/components/schemas/Url'
    BinarySource:
      title: BinarySource
      type: object
      properties:
        data:
          type: array
          items:
            type: integer
            format: uint8
        binaryType:
          $ref: '#/components/schemas/BinaryType'
      required:
      - data
      - binaryType
    BinaryType:
      title: BinaryType
      type: object
      properties:
        mimeType:
          type: string
      required:
      - mimeType
    BeginRemoteTransactionParameters:
      title: BeginRemoteTransactionParameters
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        transactionId:
          type: string
      required:
      - timestamp
      - transactionId
    CancelInvocationParameters:
      title: CancelInvocationParameters
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        idempotencyKey:
          type: string
      required:
      - timestamp
      - idempotencyKey
    CancelInvocationResponse:
      title: CancelInvocationResponse
      type: object
      properties:
        canceled:
          type: boolean
      required:
      - canceled
    Certificate:
      title: Certificate
      type: object
      properties:
        id:
          type: string
          format: uuid
        projectId:
          type: string
          format: uuid
        domainName:
          type: string
        createdAt:
          type: string
          format: date-time
      required:
      - id
      - projectId
      - domainName
    CertificateRequest:
      title: CertificateRequest
      type: object
      properties:
        projectId:
          type: string
          format: uuid
        domainName:
          type: string
        certificateBody:
          type: string
        certificatePrivateKey:
          type: string
      required:
      - projectId
      - domainName
      - certificateBody
      - certificatePrivateKey
    ChangePersistenceLevelParameters:
      title: ChangePersistenceLevelParameters
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        persistenceLevel:
          $ref: '#/components/schemas/PersistenceLevel'
      required:
      - timestamp
      - persistenceLevel
    ChangeRetryPolicyParameters:
      title: ChangeRetryPolicyParameters
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        newPolicy:
          $ref: '#/components/schemas/PublicRetryConfig'
      required:
      - timestamp
      - newPolicy
    CompleteParameters:
      title: CompleteParameters
      type: object
      properties:
        oplogIdx:
          type: integer
          format: uint64
        data:
          type: array
          items:
            type: integer
            format: uint8
      required:
      - oplogIdx
      - data
    ComponentFilePermissions:
      type: string
      enum:
      - read-only
      - read-write
    CreateAgentInstanceParameters:
      title: CreateAgentInstanceParameters
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        key:
          $ref: '#/components/schemas/AgentInstanceKey'
        parameters:
          $ref: '#/components/schemas/DataValue'
      required:
      - timestamp
      - key
      - parameters
    CreateParameters:
      title: CreateParameters
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        workerId:
          $ref: '#/components/schemas/WorkerId'
        componentVersion:
          type: integer
          format: uint64
        args:
          type: array
          items:
            type: string
        env:
          type: object
          additionalProperties:
            type: string
        projectId:
          type: string
          format: uuid
        createdBy:
          type: string
        wasiConfigVars:
          type: array
          items:
            $ref: '#/components/schemas/WasiConfigVarsEntry'
        parent:
          $ref: '#/components/schemas/WorkerId'
        componentSize:
          type: integer
          format: uint64
        initialTotalLinearMemorySize:
          type: integer
          format: uint64
        initialActivePlugins:
          type: array
          items:
            $ref: '#/components/schemas/PluginInstallationDescription'
      required:
      - timestamp
      - workerId
      - componentVersion
      - args
      - env
      - projectId
      - createdBy
      - wasiConfigVars
      - componentSize
      - initialTotalLinearMemorySize
      - initialActivePlugins
    DataValue:
      discriminator:
        propertyName: type
        mapping:
          Tuple: '#/components/schemas/DataValue_ElementValues'
          Multimodal: '#/components/schemas/DataValue_NamedElementValues'
      type: object
      oneOf:
      - $ref: '#/components/schemas/DataValue_ElementValues'
      - $ref: '#/components/schemas/DataValue_NamedElementValues'
    DataValue_ElementValues:
      allOf:
      - type: object
        properties:
          type:
            example: Tuple
            type: string
            enum:
            - Tuple
        required:
        - type
      - $ref: '#/components/schemas/ElementValues'
    DataValue_NamedElementValues:
      allOf:
      - type: object
        properties:
          type:
            example: Multimodal
            type: string
            enum:
            - Multimodal
        required:
        - type
      - $ref: '#/components/schemas/NamedElementValues'
    DeactivatePluginParameters:
      title: DeactivatePluginParameters
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        plugin:
          $ref: '#/components/schemas/PluginInstallationDescription'
      required:
      - timestamp
      - plugin
    DeactivatePluginResponse:
      title: DeactivatePluginResponse
      type: object
    DeleteWorkerResponse:
      title: DeleteWorkerResponse
      type: object
    DescribeResourceParameters:
      title: DescribeResourceParameters
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        id:
          type: integer
          format: uint64
        resourceOwner:
          type: string
        resourceName:
          type: string
        resourceParams:
          type: array
          items:
            $ref: '#/components/schemas/ValueAndType'
      required:
      - timestamp
      - id
      - resourceOwner
      - resourceName
      - resourceParams
    DomainRequest:
      title: DomainRequest
      type: object
      properties:
        projectId:
          type: string
          format: uuid
        domainName:
          type: string
      required:
      - projectId
      - domainName
    DropAgentInstanceParameters:
      title: DropAgentInstanceParameters
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        key:
          $ref: '#/components/schemas/AgentInstanceKey'
      required:
      - timestamp
      - key
    ElementValue:
      discriminator:
        propertyName: type
        mapping:
          ComponentModel: '#/components/schemas/ElementValue_ValueAndType'
          UnstructuredText: '#/components/schemas/ElementValue_TextReference'
          UnstructuredBinary: '#/components/schemas/ElementValue_BinaryReference'
      type: object
      oneOf:
      - $ref: '#/components/schemas/ElementValue_ValueAndType'
      - $ref: '#/components/schemas/ElementValue_TextReference'
      - $ref: '#/components/schemas/ElementValue_BinaryReference'
    ElementValue_BinaryReference:
      allOf:
      - type: object
        properties:
          type:
            example: UnstructuredBinary
            type: string
            enum:
            - UnstructuredBinary
        required:
        - type
      - $ref: '#/components/schemas/BinaryReference'
    ElementValue_TextReference:
      allOf:
      - type: object
        properties:
          type:
            example: UnstructuredText
            type: string
            enum:
            - UnstructuredText
        required:
        - type
      - $ref: '#/components/schemas/TextReference'
    ElementValue_ValueAndType:
      allOf:
      - type: object
        properties:
          type:
            example: ComponentModel
            type: string
            enum:
            - ComponentModel
        required:
        - type
      - $ref: '#/components/schemas/ValueAndType'
    ElementValues:
      title: ElementValues
      type: object
      properties:
        elements:
          type: array
          items:
            $ref: '#/components/schemas/ElementValue'
      required:
      - elements
    Empty:
      title: Empty
      type: object
    EndRegionParameters:
      title: EndRegionParameters
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        beginIndex:
          type: integer
          format: uint64
      required:
      - timestamp
      - beginIndex
    ErrorBody:
      title: ErrorBody
      type: object
      properties:
        error:
          type: string
      required:
      - error
    ErrorBodyWithOptionalWorkerError:
      title: ErrorBodyWithOptionalWorkerError
      type: object
      properties:
        error:
          type: string
        workerError:
          $ref: '#/components/schemas/WorkerErrorDetails'
      required:
      - error
    ErrorParameters:
      title: ErrorParameters
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        error:
          type: string
        retryFrom:
          type: integer
          format: uint64
      required:
      - timestamp
      - error
      - retryFrom
    ErrorsBody:
      title: ErrorsBody
      type: object
      properties:
        errors:
          type: array
          items:
            type: string
      required:
      - errors
    ExportedFunctionCompletedParameters:
      title: ExportedFunctionCompletedParameters
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        response:
          $ref: '#/components/schemas/ValueAndType'
        consumedFuel:
          type: integer
          format: int64
      required:
      - timestamp
      - consumedFuel
    ExportedFunctionInvokedParameters:
      title: ExportedFunctionInvokedParameters
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        functionName:
          type: string
        request:
          type: array
          items:
            $ref: '#/components/schemas/ValueAndType'
        idempotencyKey:
          type: string
        traceId:
          type: string
        traceStates:
          type: array
          items:
            type: string
        invocationContext:
          type: array
          items:
            type: array
            items:
              $ref: '#/components/schemas/PublicSpanData'
      required:
      - timestamp
      - functionName
      - request
      - idempotencyKey
      - traceId
      - traceStates
      - invocationContext
    ExportedFunctionParameters:
      title: ExportedFunctionParameters
      type: object
      properties:
        idempotencyKey:
          type: string
        fullFunctionName:
          type: string
        functionInput:
          type: array
          items:
            $ref: '#/components/schemas/ValueAndType'
        traceId:
          type: string
        traceStates:
          type: array
          items:
            type: string
        invocationContext:
          type: array
          items:
            type: array
            items:
              $ref: '#/components/schemas/PublicSpanData'
      required:
      - idempotencyKey
      - fullFunctionName
      - traceId
      - traceStates
      - invocationContext
    ExportedResourceInstanceDescription:
      title: ExportedResourceInstanceDescription
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
        resourceOwner:
          type: string
        resourceName:
          type: string
        resourceParams:
          type: array
          items:
            type: string
      required:
      - createdAt
      - resourceOwner
      - resourceName
    ExportedResourceInstanceKey:
      title: ExportedResourceInstanceKey
      type: object
      properties:
        resourceId:
          type: integer
          format: uint64
      required:
      - resourceId
    ExportedResourceMetadata:
      title: ExportedResourceMetadata
      type: object
      properties:
        key:
          $ref: '#/components/schemas/ExportedResourceInstanceKey'
        description:
          $ref: '#/components/schemas/ExportedResourceInstanceDescription'
      required:
      - key
      - description
    FailedUpdate:
      title: FailedUpdate
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        targetVersion:
          type: integer
          format: uint64
        details:
          type: string
      required:
      - timestamp
      - targetVersion
    FailedUpdateParameters:
      title: FailedUpdateParameters
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        targetVersion:
          type: integer
          format: uint64
        details:
          type: string
      required:
      - timestamp
      - targetVersion
    FilterComparator:
      type: string
      enum:
      - Equal
      - NotEqual
      - GreaterEqual
      - Greater
      - LessEqual
      - Less
    FinishSpanParameters:
      title: FinishSpanParameters
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        spanId:
          type: string
      required:
      - timestamp
      - spanId
    FlatComponentFileSystemNode:
      title: FlatComponentFileSystemNode
      type: object
      properties:
        name:
          type: string
        lastModified:
          type: integer
          format: uint64
        kind:
          $ref: '#/components/schemas/FlatComponentFileSystemNodeKind'
        permissions:
          $ref: '#/components/schemas/ComponentFilePermissions'
        size:
          type: integer
          format: uint64
      required:
      - name
      - lastModified
      - kind
    FlatComponentFileSystemNodeKind:
      type: string
      enum:
      - directory
      - file
    GatewayBindingComponent:
      title: GatewayBindingComponent
      type: object
      properties:
        name:
          type: string
        version:
          description: |-
            Version of the component. If not provided the latest version is used.
            Note that the version is only used to typecheck the various rib scripts and prevent component updates.
            During runtime, the actual version of the worker or the latest version (in case no worker was found) is used.
          type: integer
          format: uint64
      required:
      - name
    GatewayBindingData:
      title: GatewayBindingData
      type: object
      properties:
        bindingType:
          $ref: '#/components/schemas/GatewayBindingType'
        component:
          $ref: '#/components/schemas/GatewayBindingComponent'
        workerName:
          type: string
        idempotencyKey:
          type: string
        response:
          type: string
        invocationContext:
          type: string
    GatewayBindingResponseData:
      title: GatewayBindingResponseData
      type: object
      properties:
        component:
          $ref: '#/components/schemas/ResolvedGatewayBindingComponent'
        workerName:
          type: string
        idempotencyKey:
          type: string
        invocationContext:
          type: string
        response:
          type: string
        bindingType:
          $ref: '#/components/schemas/GatewayBindingType'
        responseMappingInput:
          $ref: '#/components/schemas/RibInputTypeInfo'
        workerNameInput:
          $ref: '#/components/schemas/RibInputTypeInfo'
        idempotencyKeyInput:
          $ref: '#/components/schemas/RibInputTypeInfo'
        corsPreflight:
          $ref: '#/components/schemas/HttpCors'
        responseMappingOutput:
          $ref: '#/components/schemas/RibOutputTypeInfo'
    GatewayBindingType:
      type: string
      enum:
      - default
      - file-server
      - http-handler
      - cors-preflight
      - swagger-ui
    GetFilesResponse:
      title: GetFilesResponse
      type: object
      properties:
        nodes:
          type: array
          items:
            $ref: '#/components/schemas/FlatComponentFileSystemNode'
      required:
      - nodes
    GetOplogResponse:
      title: GetOplogResponse
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/PublicOplogEntryWithIndex'
        next:
          $ref: '#/components/schemas/OplogCursor'
        firstIndexInChunk:
          type: integer
          format: uint64
        lastIndex:
          type: integer
          format: uint64
      required:
      - entries
      - firstIndexInChunk
      - lastIndex
    GrowMemoryParameters:
      title: GrowMemoryParameters
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        delta:
          type: integer
          format: uint64
      required:
      - timestamp
      - delta
    HealthcheckResponse:
      title: HealthcheckResponse
      type: object
    HttpApiDefinitionRequest:
      title: HttpApiDefinitionRequest
      type: object
      properties:
        id:
          type: string
        version:
          type: string
        security:
          type: array
          items:
            type: string
        routes:
          type: array
          items:
            $ref: '#/components/schemas/RouteRequestData'
        draft:
          type: boolean
      required:
      - id
      - version
      - routes
      - draft
    HttpApiDefinitionResponseData:
      title: HttpApiDefinitionResponseData
      type: object
      properties:
        id:
          type: string
        version:
          type: string
        routes:
          type: array
          items:
            $ref: '#/components/schemas/RouteResponseData'
        draft:
          type: boolean
        createdAt:
          type: string
          format: date-time
      required:
      - id
      - version
      - routes
      - draft
    HttpCors:
      title: HttpCors
      type: object
      properties:
        allowOrigin:
          type: string
        allowMethods:
          type: string
        allowHeaders:
          type: string
        exposeHeaders:
          type: string
        allowCredentials:
          type: boolean
        maxAge:
          type: integer
          format: uint64
      required:
      - allowOrigin
      - allowMethods
      - allowHeaders
    ImportedFunctionInvokedParameters:
      title: ImportedFunctionInvokedParameters
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        functionName:
          type: string
        request:
          $ref: '#/components/schemas/ValueAndType'
        response:
          $ref: '#/components/schemas/ValueAndType'
        durableFunctionType:
          $ref: '#/components/schemas/PublicDurableFunctionType'
      required:
      - timestamp
      - functionName
      - request
      - response
      - durableFunctionType
    InterruptResponse:
      title: InterruptResponse
      type: object
    InvokeParameters:
      title: InvokeParameters
      type: object
      properties:
        params:
          type: array
          items:
            $ref: '#/components/schemas/ValueAndOptionalType'
      required:
      - params
    InvokeResponse:
      title: InvokeResponse
      type: object
    InvokeResult:
      title: InvokeResult
      type: object
      properties:
        result:
          $ref: '#/components/schemas/ValueAndType'
    JumpParameters:
      title: JumpParameters
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        jump:
          $ref: '#/components/schemas/OplogRegion'
      required:
      - timestamp
      - jump
    LogLevel:
      description: Worker log levels including the special stdout and stderr channels
      type: string
      enum:
      - Stdout
      - Stderr
      - Trace
      - Debug
      - Info
      - Warn
      - Error
      - Critical
    LogParameters:
      title: LogParameters
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        level:
          $ref: '#/components/schemas/LogLevel'
        context:
          type: string
        message:
          type: string
      required:
      - timestamp
      - level
      - context
      - message
    ManualUpdateParameters:
      title: ManualUpdateParameters
      type: object
      properties:
        targetVersion:
          type: integer
          format: uint64
      required:
      - targetVersion
    MethodPattern:
      type: string
      enum:
      - Get
      - Connect
      - Post
      - Delete
      - Put
      - Patch
      - Options
      - Trace
      - Head
    NameOptionTypePair:
      title: NameOptionTypePair
      type: object
      properties:
        name:
          type: string
        typ:
          $ref: '#/components/schemas/AnalysedType'
      required:
      - name
    NameTypePair:
      title: NameTypePair
      type: object
      properties:
        name:
          type: string
        typ:
          $ref: '#/components/schemas/AnalysedType'
      required:
      - name
      - typ
    NamedElementValue:
      title: NamedElementValue
      type: object
      properties:
        name:
          type: string
        value:
          $ref: '#/components/schemas/ElementValue'
      required:
      - name
      - value
    NamedElementValues:
      title: NamedElementValues
      type: object
      properties:
        elements:
          type: array
          items:
            $ref: '#/components/schemas/NamedElementValue'
      required:
      - elements
    OpenApiHttpApiDefinitionResponse:
      title: OpenApiHttpApiDefinitionResponse
      type: object
      properties:
        id:
          type: string
        version:
          type: string
        openapi_yaml:
          type: string
      required:
      - id
      - version
      - openapi_yaml
    OplogCursor:
      title: OplogCursor
      type: object
      properties:
        nextOplogIndex:
          type: integer
          format: uint64
        currentComponentVersion:
          type: integer
          format: uint64
      required:
      - nextOplogIndex
      - currentComponentVersion
    OplogRegion:
      title: OplogRegion
      type: object
      properties:
        start:
          type: integer
          format: uint64
        end:
          type: integer
          format: uint64
      required:
      - start
      - end
    PendingUpdate:
      title: PendingUpdate
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        targetVersion:
          type: integer
          format: uint64
      required:
      - timestamp
      - targetVersion
    PendingUpdateParameters:
      title: PendingUpdateParameters
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        target_version:
          type: integer
          format: uint64
        description:
          $ref: '#/components/schemas/PublicUpdateDescription'
      required:
      - timestamp
      - target_version
      - description
    PendingWorkerInvocationParameters:
      title: PendingWorkerInvocationParameters
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        invocation:
          $ref: '#/components/schemas/PublicWorkerInvocation'
      required:
      - timestamp
      - invocation
    PersistenceLevel:
      type: string
      enum:
      - PersistNothing
      - PersistRemoteSideEffects
      - Smart
    PluginInstallationDescription:
      title: PluginInstallationDescription
      type: object
      properties:
        installationId:
          type: string
          format: uuid
        pluginName:
          type: string
        pluginVersion:
          type: string
        registered:
          type: boolean
        parameters:
          type: object
          additionalProperties:
            type: string
      required:
      - installationId
      - pluginName
      - pluginVersion
      - registered
      - parameters
    Provider:
      type: string
      enum:
      - Google
      - Facebook
      - Microsoft
      - Gitlab
    PublicAttribute:
      title: PublicAttribute
      type: object
      properties:
        key:
          type: string
        value:
          $ref: '#/components/schemas/PublicAttributeValue'
      required:
      - key
      - value
    PublicAttributeValue:
      discriminator:
        propertyName: type
        mapping:
          String: '#/components/schemas/PublicAttributeValue_StringAttributeValue'
      type: object
      oneOf:
      - $ref: '#/components/schemas/PublicAttributeValue_StringAttributeValue'
    PublicAttributeValue_StringAttributeValue:
      allOf:
      - type: object
        properties:
          type:
            example: String
            type: string
            enum:
            - String
        required:
        - type
      - $ref: '#/components/schemas/StringAttributeValue'
    PublicDurableFunctionType:
      discriminator:
        propertyName: type
        mapping:
          ReadLocal: '#/components/schemas/PublicDurableFunctionType_Empty'
          WriteLocal: '#/components/schemas/PublicDurableFunctionType_Empty'
          ReadRemote: '#/components/schemas/PublicDurableFunctionType_Empty'
          WriteRemote: '#/components/schemas/PublicDurableFunctionType_Empty'
          WriteRemoteBatched: '#/components/schemas/PublicDurableFunctionType_WriteRemoteBatchedParameters'
          WriteRemoteTransaction: '#/components/schemas/PublicDurableFunctionType_WriteRemoteTransactionParameters'
      type: object
      oneOf:
      - $ref: '#/components/schemas/PublicDurableFunctionType_Empty'
      - $ref: '#/components/schemas/PublicDurableFunctionType_Empty'
      - $ref: '#/components/schemas/PublicDurableFunctionType_Empty'
      - $ref: '#/components/schemas/PublicDurableFunctionType_Empty'
      - $ref: '#/components/schemas/PublicDurableFunctionType_WriteRemoteBatchedParameters'
      - $ref: '#/components/schemas/PublicDurableFunctionType_WriteRemoteTransactionParameters'
    PublicDurableFunctionType_Empty:
      allOf:
      - type: object
        properties:
          type:
            example: WriteRemote
            type: string
            enum:
            - WriteRemote
        required:
        - type
      - $ref: '#/components/schemas/Empty'
    PublicDurableFunctionType_WriteRemoteBatchedParameters:
      allOf:
      - type: object
        properties:
          type:
            example: WriteRemoteBatched
            type: string
            enum:
            - WriteRemoteBatched
        required:
        - type
      - $ref: '#/components/schemas/WriteRemoteBatchedParameters'
    PublicDurableFunctionType_WriteRemoteTransactionParameters:
      allOf:
      - type: object
        properties:
          type:
            example: WriteRemoteTransaction
            type: string
            enum:
            - WriteRemoteTransaction
        required:
        - type
      - $ref: '#/components/schemas/WriteRemoteTransactionParameters'
    PublicExternalSpanData:
      title: PublicExternalSpanData
      type: object
      properties:
        spanId:
          type: string
      required:
      - spanId
    PublicLocalSpanData:
      title: PublicLocalSpanData
      type: object
      properties:
        spanId:
          type: string
        start:
          type: string
          format: date-time
        parentId:
          type: string
        linkedContext:
          type: integer
          format: uint64
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/PublicAttribute'
        inherited:
          type: boolean
      required:
      - spanId
      - start
      - attributes
      - inherited
    PublicOplogEntry:
      description: |-
        A mirror of the core `OplogEntry` type, without the undefined arbitrary payloads.

        Instead, it encodes all payloads with wasm-rpc `Value` types. This makes this the base type
        for exposing oplog entries through various APIs such as gRPC, REST and WIT.

        The rest of the system will always use `OplogEntry` internally - the only point where the
        oplog payloads are decoded and re-encoded as `Value` is in this module, and it should only be used
        before exposing an oplog entry through a public API.
      discriminator:
        propertyName: type
        mapping:
          Create: '#/components/schemas/PublicOplogEntry_CreateParameters'
          ImportedFunctionInvoked: '#/components/schemas/PublicOplogEntry_ImportedFunctionInvokedParameters'
          ExportedFunctionInvoked: '#/components/schemas/PublicOplogEntry_ExportedFunctionInvokedParameters'
          ExportedFunctionCompleted: '#/components/schemas/PublicOplogEntry_ExportedFunctionCompletedParameters'
          Suspend: '#/components/schemas/PublicOplogEntry_TimestampParameter'
          Error: '#/components/schemas/PublicOplogEntry_ErrorParameters'
          NoOp: '#/components/schemas/PublicOplogEntry_TimestampParameter'
          Jump: '#/components/schemas/PublicOplogEntry_JumpParameters'
          Interrupted: '#/components/schemas/PublicOplogEntry_TimestampParameter'
          Exited: '#/components/schemas/PublicOplogEntry_TimestampParameter'
          ChangeRetryPolicy: '#/components/schemas/PublicOplogEntry_ChangeRetryPolicyParameters'
          BeginAtomicRegion: '#/components/schemas/PublicOplogEntry_TimestampParameter'
          EndAtomicRegion: '#/components/schemas/PublicOplogEntry_EndRegionParameters'
          BeginRemoteWrite: '#/components/schemas/PublicOplogEntry_TimestampParameter'
          EndRemoteWrite: '#/components/schemas/PublicOplogEntry_EndRegionParameters'
          PendingWorkerInvocation: '#/components/schemas/PublicOplogEntry_PendingWorkerInvocationParameters'
          PendingUpdate: '#/components/schemas/PublicOplogEntry_PendingUpdateParameters'
          SuccessfulUpdate: '#/components/schemas/PublicOplogEntry_SuccessfulUpdateParameters'
          FailedUpdate: '#/components/schemas/PublicOplogEntry_FailedUpdateParameters'
          GrowMemory: '#/components/schemas/PublicOplogEntry_GrowMemoryParameters'
          CreateResource: '#/components/schemas/PublicOplogEntry_ResourceParameters'
          DropResource: '#/components/schemas/PublicOplogEntry_ResourceParameters'
          DescribeResource: '#/components/schemas/PublicOplogEntry_DescribeResourceParameters'
          Log: '#/components/schemas/PublicOplogEntry_LogParameters'
          Restart: '#/components/schemas/PublicOplogEntry_TimestampParameter'
          ActivatePlugin: '#/components/schemas/PublicOplogEntry_ActivatePluginParameters'
          DeactivatePlugin: '#/components/schemas/PublicOplogEntry_DeactivatePluginParameters'
          Revert: '#/components/schemas/PublicOplogEntry_RevertParameters'
          CancelInvocation: '#/components/schemas/PublicOplogEntry_CancelInvocationParameters'
          StartSpan: '#/components/schemas/PublicOplogEntry_StartSpanParameters'
          FinishSpan: '#/components/schemas/PublicOplogEntry_FinishSpanParameters'
          SetSpanAttribute: '#/components/schemas/PublicOplogEntry_SetSpanAttributeParameters'
          ChangePersistenceLevel: '#/components/schemas/PublicOplogEntry_ChangePersistenceLevelParameters'
          BeginRemoteTransaction: '#/components/schemas/PublicOplogEntry_BeginRemoteTransactionParameters'
          PreCommitRemoteTransaction: '#/components/schemas/PublicOplogEntry_RemoteTransactionParameters'
          PreRollbackRemoteTransaction: '#/components/schemas/PublicOplogEntry_RemoteTransactionParameters'
          CommittedRemoteTransaction: '#/components/schemas/PublicOplogEntry_RemoteTransactionParameters'
          RolledBackRemoteTransaction: '#/components/schemas/PublicOplogEntry_RemoteTransactionParameters'
          CreateAgentInstance: '#/components/schemas/PublicOplogEntry_CreateAgentInstanceParameters'
          DropAgentInstance: '#/components/schemas/PublicOplogEntry_DropAgentInstanceParameters'
      type: object
      oneOf:
      - $ref: '#/components/schemas/PublicOplogEntry_CreateParameters'
      - $ref: '#/components/schemas/PublicOplogEntry_ImportedFunctionInvokedParameters'
      - $ref: '#/components/schemas/PublicOplogEntry_ExportedFunctionInvokedParameters'
      - $ref: '#/components/schemas/PublicOplogEntry_ExportedFunctionCompletedParameters'
      - $ref: '#/components/schemas/PublicOplogEntry_TimestampParameter'
      - $ref: '#/components/schemas/PublicOplogEntry_ErrorParameters'
      - $ref: '#/components/schemas/PublicOplogEntry_TimestampParameter'
      - $ref: '#/components/schemas/PublicOplogEntry_JumpParameters'
      - $ref: '#/components/schemas/PublicOplogEntry_TimestampParameter'
      - $ref: '#/components/schemas/PublicOplogEntry_TimestampParameter'
      - $ref: '#/components/schemas/PublicOplogEntry_ChangeRetryPolicyParameters'
      - $ref: '#/components/schemas/PublicOplogEntry_TimestampParameter'
      - $ref: '#/components/schemas/PublicOplogEntry_EndRegionParameters'
      - $ref: '#/components/schemas/PublicOplogEntry_TimestampParameter'
      - $ref: '#/components/schemas/PublicOplogEntry_EndRegionParameters'
      - $ref: '#/components/schemas/PublicOplogEntry_PendingWorkerInvocationParameters'
      - $ref: '#/components/schemas/PublicOplogEntry_PendingUpdateParameters'
      - $ref: '#/components/schemas/PublicOplogEntry_SuccessfulUpdateParameters'
      - $ref: '#/components/schemas/PublicOplogEntry_FailedUpdateParameters'
      - $ref: '#/components/schemas/PublicOplogEntry_GrowMemoryParameters'
      - $ref: '#/components/schemas/PublicOplogEntry_ResourceParameters'
      - $ref: '#/components/schemas/PublicOplogEntry_ResourceParameters'
      - $ref: '#/components/schemas/PublicOplogEntry_DescribeResourceParameters'
      - $ref: '#/components/schemas/PublicOplogEntry_LogParameters'
      - $ref: '#/components/schemas/PublicOplogEntry_TimestampParameter'
      - $ref: '#/components/schemas/PublicOplogEntry_ActivatePluginParameters'
      - $ref: '#/components/schemas/PublicOplogEntry_DeactivatePluginParameters'
      - $ref: '#/components/schemas/PublicOplogEntry_RevertParameters'
      - $ref: '#/components/schemas/PublicOplogEntry_CancelInvocationParameters'
      - $ref: '#/components/schemas/PublicOplogEntry_StartSpanParameters'
      - $ref: '#/components/schemas/PublicOplogEntry_FinishSpanParameters'
      - $ref: '#/components/schemas/PublicOplogEntry_SetSpanAttributeParameters'
      - $ref: '#/components/schemas/PublicOplogEntry_ChangePersistenceLevelParameters'
      - $ref: '#/components/schemas/PublicOplogEntry_BeginRemoteTransactionParameters'
      - $ref: '#/components/schemas/PublicOplogEntry_RemoteTransactionParameters'
      - $ref: '#/components/schemas/PublicOplogEntry_RemoteTransactionParameters'
      - $ref: '#/components/schemas/PublicOplogEntry_RemoteTransactionParameters'
      - $ref: '#/components/schemas/PublicOplogEntry_RemoteTransactionParameters'
      - $ref: '#/components/schemas/PublicOplogEntry_CreateAgentInstanceParameters'
      - $ref: '#/components/schemas/PublicOplogEntry_DropAgentInstanceParameters'
    PublicOplogEntryWithIndex:
      title: PublicOplogEntryWithIndex
      type: object
      properties:
        oplogIndex:
          type: integer
          format: uint64
        entry:
          $ref: '#/components/schemas/PublicOplogEntry'
      required:
      - oplogIndex
      - entry
    PublicOplogEntry_ActivatePluginParameters:
      description: |-
        A mirror of the core `OplogEntry` type, without the undefined arbitrary payloads.

        Instead, it encodes all payloads with wasm-rpc `Value` types. This makes this the base type
        for exposing oplog entries through various APIs such as gRPC, REST and WIT.

        The rest of the system will always use `OplogEntry` internally - the only point where the
        oplog payloads are decoded and re-encoded as `Value` is in this module, and it should only be used
        before exposing an oplog entry through a public API.
      allOf:
      - type: object
        properties:
          type:
            example: ActivatePlugin
            type: string
            enum:
            - ActivatePlugin
        required:
        - type
      - $ref: '#/components/schemas/ActivatePluginParameters'
    PublicOplogEntry_BeginRemoteTransactionParameters:
      description: |-
        A mirror of the core `OplogEntry` type, without the undefined arbitrary payloads.

        Instead, it encodes all payloads with wasm-rpc `Value` types. This makes this the base type
        for exposing oplog entries through various APIs such as gRPC, REST and WIT.

        The rest of the system will always use `OplogEntry` internally - the only point where the
        oplog payloads are decoded and re-encoded as `Value` is in this module, and it should only be used
        before exposing an oplog entry through a public API.
      allOf:
      - type: object
        properties:
          type:
            example: BeginRemoteTransaction
            type: string
            enum:
            - BeginRemoteTransaction
        required:
        - type
      - $ref: '#/components/schemas/BeginRemoteTransactionParameters'
    PublicOplogEntry_CancelInvocationParameters:
      description: |-
        A mirror of the core `OplogEntry` type, without the undefined arbitrary payloads.

        Instead, it encodes all payloads with wasm-rpc `Value` types. This makes this the base type
        for exposing oplog entries through various APIs such as gRPC, REST and WIT.

        The rest of the system will always use `OplogEntry` internally - the only point where the
        oplog payloads are decoded and re-encoded as `Value` is in this module, and it should only be used
        before exposing an oplog entry through a public API.
      allOf:
      - type: object
        properties:
          type:
            example: CancelInvocation
            type: string
            enum:
            - CancelInvocation
        required:
        - type
      - $ref: '#/components/schemas/CancelInvocationParameters'
    PublicOplogEntry_ChangePersistenceLevelParameters:
      description: |-
        A mirror of the core `OplogEntry` type, without the undefined arbitrary payloads.

        Instead, it encodes all payloads with wasm-rpc `Value` types. This makes this the base type
        for exposing oplog entries through various APIs such as gRPC, REST and WIT.

        The rest of the system will always use `OplogEntry` internally - the only point where the
        oplog payloads are decoded and re-encoded as `Value` is in this module, and it should only be used
        before exposing an oplog entry through a public API.
      allOf:
      - type: object
        properties:
          type:
            example: ChangePersistenceLevel
            type: string
            enum:
            - ChangePersistenceLevel
        required:
        - type
      - $ref: '#/components/schemas/ChangePersistenceLevelParameters'
    PublicOplogEntry_ChangeRetryPolicyParameters:
      description: |-
        A mirror of the core `OplogEntry` type, without the undefined arbitrary payloads.

        Instead, it encodes all payloads with wasm-rpc `Value` types. This makes this the base type
        for exposing oplog entries through various APIs such as gRPC, REST and WIT.

        The rest of the system will always use `OplogEntry` internally - the only point where the
        oplog payloads are decoded and re-encoded as `Value` is in this module, and it should only be used
        before exposing an oplog entry through a public API.
      allOf:
      - type: object
        properties:
          type:
            example: ChangeRetryPolicy
            type: string
            enum:
            - ChangeRetryPolicy
        required:
        - type
      - $ref: '#/components/schemas/ChangeRetryPolicyParameters'
    PublicOplogEntry_CreateAgentInstanceParameters:
      description: |-
        A mirror of the core `OplogEntry` type, without the undefined arbitrary payloads.

        Instead, it encodes all payloads with wasm-rpc `Value` types. This makes this the base type
        for exposing oplog entries through various APIs such as gRPC, REST and WIT.

        The rest of the system will always use `OplogEntry` internally - the only point where the
        oplog payloads are decoded and re-encoded as `Value` is in this module, and it should only be used
        before exposing an oplog entry through a public API.
      allOf:
      - type: object
        properties:
          type:
            example: CreateAgentInstance
            type: string
            enum:
            - CreateAgentInstance
        required:
        - type
      - $ref: '#/components/schemas/CreateAgentInstanceParameters'
    PublicOplogEntry_CreateParameters:
      description: |-
        A mirror of the core `OplogEntry` type, without the undefined arbitrary payloads.

        Instead, it encodes all payloads with wasm-rpc `Value` types. This makes this the base type
        for exposing oplog entries through various APIs such as gRPC, REST and WIT.

        The rest of the system will always use `OplogEntry` internally - the only point where the
        oplog payloads are decoded and re-encoded as `Value` is in this module, and it should only be used
        before exposing an oplog entry through a public API.
      allOf:
      - type: object
        properties:
          type:
            example: Create
            type: string
            enum:
            - Create
        required:
        - type
      - $ref: '#/components/schemas/CreateParameters'
    PublicOplogEntry_DeactivatePluginParameters:
      description: |-
        A mirror of the core `OplogEntry` type, without the undefined arbitrary payloads.

        Instead, it encodes all payloads with wasm-rpc `Value` types. This makes this the base type
        for exposing oplog entries through various APIs such as gRPC, REST and WIT.

        The rest of the system will always use `OplogEntry` internally - the only point where the
        oplog payloads are decoded and re-encoded as `Value` is in this module, and it should only be used
        before exposing an oplog entry through a public API.
      allOf:
      - type: object
        properties:
          type:
            example: DeactivatePlugin
            type: string
            enum:
            - DeactivatePlugin
        required:
        - type
      - $ref: '#/components/schemas/DeactivatePluginParameters'
    PublicOplogEntry_DescribeResourceParameters:
      description: |-
        A mirror of the core `OplogEntry` type, without the undefined arbitrary payloads.

        Instead, it encodes all payloads with wasm-rpc `Value` types. This makes this the base type
        for exposing oplog entries through various APIs such as gRPC, REST and WIT.

        The rest of the system will always use `OplogEntry` internally - the only point where the
        oplog payloads are decoded and re-encoded as `Value` is in this module, and it should only be used
        before exposing an oplog entry through a public API.
      allOf:
      - type: object
        properties:
          type:
            example: DescribeResource
            type: string
            enum:
            - DescribeResource
        required:
        - type
      - $ref: '#/components/schemas/DescribeResourceParameters'
    PublicOplogEntry_DropAgentInstanceParameters:
      description: |-
        A mirror of the core `OplogEntry` type, without the undefined arbitrary payloads.

        Instead, it encodes all payloads with wasm-rpc `Value` types. This makes this the base type
        for exposing oplog entries through various APIs such as gRPC, REST and WIT.

        The rest of the system will always use `OplogEntry` internally - the only point where the
        oplog payloads are decoded and re-encoded as `Value` is in this module, and it should only be used
        before exposing an oplog entry through a public API.
      allOf:
      - type: object
        properties:
          type:
            example: DropAgentInstance
            type: string
            enum:
            - DropAgentInstance
        required:
        - type
      - $ref: '#/components/schemas/DropAgentInstanceParameters'
    PublicOplogEntry_EndRegionParameters:
      description: |-
        A mirror of the core `OplogEntry` type, without the undefined arbitrary payloads.

        Instead, it encodes all payloads with wasm-rpc `Value` types. This makes this the base type
        for exposing oplog entries through various APIs such as gRPC, REST and WIT.

        The rest of the system will always use `OplogEntry` internally - the only point where the
        oplog payloads are decoded and re-encoded as `Value` is in this module, and it should only be used
        before exposing an oplog entry through a public API.
      allOf:
      - type: object
        properties:
          type:
            example: EndRemoteWrite
            type: string
            enum:
            - EndRemoteWrite
        required:
        - type
      - $ref: '#/components/schemas/EndRegionParameters'
    PublicOplogEntry_ErrorParameters:
      description: |-
        A mirror of the core `OplogEntry` type, without the undefined arbitrary payloads.

        Instead, it encodes all payloads with wasm-rpc `Value` types. This makes this the base type
        for exposing oplog entries through various APIs such as gRPC, REST and WIT.

        The rest of the system will always use `OplogEntry` internally - the only point where the
        oplog payloads are decoded and re-encoded as `Value` is in this module, and it should only be used
        before exposing an oplog entry through a public API.
      allOf:
      - type: object
        properties:
          type:
            example: Error
            type: string
            enum:
            - Error
        required:
        - type
      - $ref: '#/components/schemas/ErrorParameters'
    PublicOplogEntry_ExportedFunctionCompletedParameters:
      description: |-
        A mirror of the core `OplogEntry` type, without the undefined arbitrary payloads.

        Instead, it encodes all payloads with wasm-rpc `Value` types. This makes this the base type
        for exposing oplog entries through various APIs such as gRPC, REST and WIT.

        The rest of the system will always use `OplogEntry` internally - the only point where the
        oplog payloads are decoded and re-encoded as `Value` is in this module, and it should only be used
        before exposing an oplog entry through a public API.
      allOf:
      - type: object
        properties:
          type:
            example: ExportedFunctionCompleted
            type: string
            enum:
            - ExportedFunctionCompleted
        required:
        - type
      - $ref: '#/components/schemas/ExportedFunctionCompletedParameters'
    PublicOplogEntry_ExportedFunctionInvokedParameters:
      description: |-
        A mirror of the core `OplogEntry` type, without the undefined arbitrary payloads.

        Instead, it encodes all payloads with wasm-rpc `Value` types. This makes this the base type
        for exposing oplog entries through various APIs such as gRPC, REST and WIT.

        The rest of the system will always use `OplogEntry` internally - the only point where the
        oplog payloads are decoded and re-encoded as `Value` is in this module, and it should only be used
        before exposing an oplog entry through a public API.
      allOf:
      - type: object
        properties:
          type:
            example: ExportedFunctionInvoked
            type: string
            enum:
            - ExportedFunctionInvoked
        required:
        - type
      - $ref: '#/components/schemas/ExportedFunctionInvokedParameters'
    PublicOplogEntry_FailedUpdateParameters:
      description: |-
        A mirror of the core `OplogEntry` type, without the undefined arbitrary payloads.

        Instead, it encodes all payloads with wasm-rpc `Value` types. This makes this the base type
        for exposing oplog entries through various APIs such as gRPC, REST and WIT.

        The rest of the system will always use `OplogEntry` internally - the only point where the
        oplog payloads are decoded and re-encoded as `Value` is in this module, and it should only be used
        before exposing an oplog entry through a public API.
      allOf:
      - type: object
        properties:
          type:
            example: FailedUpdate
            type: string
            enum:
            - FailedUpdate
        required:
        - type
      - $ref: '#/components/schemas/FailedUpdateParameters'
    PublicOplogEntry_FinishSpanParameters:
      description: |-
        A mirror of the core `OplogEntry` type, without the undefined arbitrary payloads.

        Instead, it encodes all payloads with wasm-rpc `Value` types. This makes this the base type
        for exposing oplog entries through various APIs such as gRPC, REST and WIT.

        The rest of the system will always use `OplogEntry` internally - the only point where the
        oplog payloads are decoded and re-encoded as `Value` is in this module, and it should only be used
        before exposing an oplog entry through a public API.
      allOf:
      - type: object
        properties:
          type:
            example: FinishSpan
            type: string
            enum:
            - FinishSpan
        required:
        - type
      - $ref: '#/components/schemas/FinishSpanParameters'
    PublicOplogEntry_GrowMemoryParameters:
      description: |-
        A mirror of the core `OplogEntry` type, without the undefined arbitrary payloads.

        Instead, it encodes all payloads with wasm-rpc `Value` types. This makes this the base type
        for exposing oplog entries through various APIs such as gRPC, REST and WIT.

        The rest of the system will always use `OplogEntry` internally - the only point where the
        oplog payloads are decoded and re-encoded as `Value` is in this module, and it should only be used
        before exposing an oplog entry through a public API.
      allOf:
      - type: object
        properties:
          type:
            example: GrowMemory
            type: string
            enum:
            - GrowMemory
        required:
        - type
      - $ref: '#/components/schemas/GrowMemoryParameters'
    PublicOplogEntry_ImportedFunctionInvokedParameters:
      description: |-
        A mirror of the core `OplogEntry` type, without the undefined arbitrary payloads.

        Instead, it encodes all payloads with wasm-rpc `Value` types. This makes this the base type
        for exposing oplog entries through various APIs such as gRPC, REST and WIT.

        The rest of the system will always use `OplogEntry` internally - the only point where the
        oplog payloads are decoded and re-encoded as `Value` is in this module, and it should only be used
        before exposing an oplog entry through a public API.
      allOf:
      - type: object
        properties:
          type:
            example: ImportedFunctionInvoked
            type: string
            enum:
            - ImportedFunctionInvoked
        required:
        - type
      - $ref: '#/components/schemas/ImportedFunctionInvokedParameters'
    PublicOplogEntry_JumpParameters:
      description: |-
        A mirror of the core `OplogEntry` type, without the undefined arbitrary payloads.

        Instead, it encodes all payloads with wasm-rpc `Value` types. This makes this the base type
        for exposing oplog entries through various APIs such as gRPC, REST and WIT.

        The rest of the system will always use `OplogEntry` internally - the only point where the
        oplog payloads are decoded and re-encoded as `Value` is in this module, and it should only be used
        before exposing an oplog entry through a public API.
      allOf:
      - type: object
        properties:
          type:
            example: Jump
            type: string
            enum:
            - Jump
        required:
        - type
      - $ref: '#/components/schemas/JumpParameters'
    PublicOplogEntry_LogParameters:
      description: |-
        A mirror of the core `OplogEntry` type, without the undefined arbitrary payloads.

        Instead, it encodes all payloads with wasm-rpc `Value` types. This makes this the base type
        for exposing oplog entries through various APIs such as gRPC, REST and WIT.

        The rest of the system will always use `OplogEntry` internally - the only point where the
        oplog payloads are decoded and re-encoded as `Value` is in this module, and it should only be used
        before exposing an oplog entry through a public API.
      allOf:
      - type: object
        properties:
          type:
            example: Log
            type: string
            enum:
            - Log
        required:
        - type
      - $ref: '#/components/schemas/LogParameters'
    PublicOplogEntry_PendingUpdateParameters:
      description: |-
        A mirror of the core `OplogEntry` type, without the undefined arbitrary payloads.

        Instead, it encodes all payloads with wasm-rpc `Value` types. This makes this the base type
        for exposing oplog entries through various APIs such as gRPC, REST and WIT.

        The rest of the system will always use `OplogEntry` internally - the only point where the
        oplog payloads are decoded and re-encoded as `Value` is in this module, and it should only be used
        before exposing an oplog entry through a public API.
      allOf:
      - type: object
        properties:
          type:
            example: PendingUpdate
            type: string
            enum:
            - PendingUpdate
        required:
        - type
      - $ref: '#/components/schemas/PendingUpdateParameters'
    PublicOplogEntry_PendingWorkerInvocationParameters:
      description: |-
        A mirror of the core `OplogEntry` type, without the undefined arbitrary payloads.

        Instead, it encodes all payloads with wasm-rpc `Value` types. This makes this the base type
        for exposing oplog entries through various APIs such as gRPC, REST and WIT.

        The rest of the system will always use `OplogEntry` internally - the only point where the
        oplog payloads are decoded and re-encoded as `Value` is in this module, and it should only be used
        before exposing an oplog entry through a public API.
      allOf:
      - type: object
        properties:
          type:
            example: PendingWorkerInvocation
            type: string
            enum:
            - PendingWorkerInvocation
        required:
        - type
      - $ref: '#/components/schemas/PendingWorkerInvocationParameters'
    PublicOplogEntry_RemoteTransactionParameters:
      description: |-
        A mirror of the core `OplogEntry` type, without the undefined arbitrary payloads.

        Instead, it encodes all payloads with wasm-rpc `Value` types. This makes this the base type
        for exposing oplog entries through various APIs such as gRPC, REST and WIT.

        The rest of the system will always use `OplogEntry` internally - the only point where the
        oplog payloads are decoded and re-encoded as `Value` is in this module, and it should only be used
        before exposing an oplog entry through a public API.
      allOf:
      - type: object
        properties:
          type:
            example: RolledBackRemoteTransaction
            type: string
            enum:
            - RolledBackRemoteTransaction
        required:
        - type
      - $ref: '#/components/schemas/RemoteTransactionParameters'
    PublicOplogEntry_ResourceParameters:
      description: |-
        A mirror of the core `OplogEntry` type, without the undefined arbitrary payloads.

        Instead, it encodes all payloads with wasm-rpc `Value` types. This makes this the base type
        for exposing oplog entries through various APIs such as gRPC, REST and WIT.

        The rest of the system will always use `OplogEntry` internally - the only point where the
        oplog payloads are decoded and re-encoded as `Value` is in this module, and it should only be used
        before exposing an oplog entry through a public API.
      allOf:
      - type: object
        properties:
          type:
            example: DropResource
            type: string
            enum:
            - DropResource
        required:
        - type
      - $ref: '#/components/schemas/ResourceParameters'
    PublicOplogEntry_RevertParameters:
      description: |-
        A mirror of the core `OplogEntry` type, without the undefined arbitrary payloads.

        Instead, it encodes all payloads with wasm-rpc `Value` types. This makes this the base type
        for exposing oplog entries through various APIs such as gRPC, REST and WIT.

        The rest of the system will always use `OplogEntry` internally - the only point where the
        oplog payloads are decoded and re-encoded as `Value` is in this module, and it should only be used
        before exposing an oplog entry through a public API.
      allOf:
      - type: object
        properties:
          type:
            example: Revert
            type: string
            enum:
            - Revert
        required:
        - type
      - $ref: '#/components/schemas/RevertParameters'
    PublicOplogEntry_SetSpanAttributeParameters:
      description: |-
        A mirror of the core `OplogEntry` type, without the undefined arbitrary payloads.

        Instead, it encodes all payloads with wasm-rpc `Value` types. This makes this the base type
        for exposing oplog entries through various APIs such as gRPC, REST and WIT.

        The rest of the system will always use `OplogEntry` internally - the only point where the
        oplog payloads are decoded and re-encoded as `Value` is in this module, and it should only be used
        before exposing an oplog entry through a public API.
      allOf:
      - type: object
        properties:
          type:
            example: SetSpanAttribute
            type: string
            enum:
            - SetSpanAttribute
        required:
        - type
      - $ref: '#/components/schemas/SetSpanAttributeParameters'
    PublicOplogEntry_StartSpanParameters:
      description: |-
        A mirror of the core `OplogEntry` type, without the undefined arbitrary payloads.

        Instead, it encodes all payloads with wasm-rpc `Value` types. This makes this the base type
        for exposing oplog entries through various APIs such as gRPC, REST and WIT.

        The rest of the system will always use `OplogEntry` internally - the only point where the
        oplog payloads are decoded and re-encoded as `Value` is in this module, and it should only be used
        before exposing an oplog entry through a public API.
      allOf:
      - type: object
        properties:
          type:
            example: StartSpan
            type: string
            enum:
            - StartSpan
        required:
        - type
      - $ref: '#/components/schemas/StartSpanParameters'
    PublicOplogEntry_SuccessfulUpdateParameters:
      description: |-
        A mirror of the core `OplogEntry` type, without the undefined arbitrary payloads.

        Instead, it encodes all payloads with wasm-rpc `Value` types. This makes this the base type
        for exposing oplog entries through various APIs such as gRPC, REST and WIT.

        The rest of the system will always use `OplogEntry` internally - the only point where the
        oplog payloads are decoded and re-encoded as `Value` is in this module, and it should only be used
        before exposing an oplog entry through a public API.
      allOf:
      - type: object
        properties:
          type:
            example: SuccessfulUpdate
            type: string
            enum:
            - SuccessfulUpdate
        required:
        - type
      - $ref: '#/components/schemas/SuccessfulUpdateParameters'
    PublicOplogEntry_TimestampParameter:
      description: |-
        A mirror of the core `OplogEntry` type, without the undefined arbitrary payloads.

        Instead, it encodes all payloads with wasm-rpc `Value` types. This makes this the base type
        for exposing oplog entries through various APIs such as gRPC, REST and WIT.

        The rest of the system will always use `OplogEntry` internally - the only point where the
        oplog payloads are decoded and re-encoded as `Value` is in this module, and it should only be used
        before exposing an oplog entry through a public API.
      allOf:
      - type: object
        properties:
          type:
            example: Restart
            type: string
            enum:
            - Restart
        required:
        - type
      - $ref: '#/components/schemas/TimestampParameter'
    PublicRetryConfig:
      title: PublicRetryConfig
      type: object
      properties:
        maxAttempts:
          type: integer
          format: uint32
        minDelay:
          type: string
          format: duration
        maxDelay:
          type: string
          format: duration
        multiplier:
          type: number
          format: double
        maxJitterFactor:
          type: number
          format: double
      required:
      - maxAttempts
      - minDelay
      - maxDelay
      - multiplier
    PublicSpanData:
      discriminator:
        propertyName: type
        mapping:
          LocalSpan: '#/components/schemas/PublicSpanData_PublicLocalSpanData'
          ExternalSpan: '#/components/schemas/PublicSpanData_PublicExternalSpanData'
      type: object
      oneOf:
      - $ref: '#/components/schemas/PublicSpanData_PublicLocalSpanData'
      - $ref: '#/components/schemas/PublicSpanData_PublicExternalSpanData'
    PublicSpanData_PublicExternalSpanData:
      allOf:
      - type: object
        properties:
          type:
            example: ExternalSpan
            type: string
            enum:
            - ExternalSpan
        required:
        - type
      - $ref: '#/components/schemas/PublicExternalSpanData'
    PublicSpanData_PublicLocalSpanData:
      allOf:
      - type: object
        properties:
          type:
            example: LocalSpan
            type: string
            enum:
            - LocalSpan
        required:
        - type
      - $ref: '#/components/schemas/PublicLocalSpanData'
    PublicUpdateDescription:
      discriminator:
        propertyName: type
        mapping:
          Automatic: '#/components/schemas/PublicUpdateDescription_Empty'
          SnapshotBased: '#/components/schemas/PublicUpdateDescription_SnapshotBasedUpdateParameters'
      type: object
      oneOf:
      - $ref: '#/components/schemas/PublicUpdateDescription_Empty'
      - $ref: '#/components/schemas/PublicUpdateDescription_SnapshotBasedUpdateParameters'
    PublicUpdateDescription_Empty:
      allOf:
      - type: object
        properties:
          type:
            example: Automatic
            type: string
            enum:
            - Automatic
        required:
        - type
      - $ref: '#/components/schemas/Empty'
    PublicUpdateDescription_SnapshotBasedUpdateParameters:
      allOf:
      - type: object
        properties:
          type:
            example: SnapshotBased
            type: string
            enum:
            - SnapshotBased
        required:
        - type
      - $ref: '#/components/schemas/SnapshotBasedUpdateParameters'
    PublicWorkerInvocation:
      discriminator:
        propertyName: type
        mapping:
          ExportedFunction: '#/components/schemas/PublicWorkerInvocation_ExportedFunctionParameters'
          ManualUpdate: '#/components/schemas/PublicWorkerInvocation_ManualUpdateParameters'
      type: object
      oneOf:
      - $ref: '#/components/schemas/PublicWorkerInvocation_ExportedFunctionParameters'
      - $ref: '#/components/schemas/PublicWorkerInvocation_ManualUpdateParameters'
    PublicWorkerInvocation_ExportedFunctionParameters:
      allOf:
      - type: object
        properties:
          type:
            example: ExportedFunction
            type: string
            enum:
            - ExportedFunction
        required:
        - type
      - $ref: '#/components/schemas/ExportedFunctionParameters'
    PublicWorkerInvocation_ManualUpdateParameters:
      allOf:
      - type: object
        properties:
          type:
            example: ManualUpdate
            type: string
            enum:
            - ManualUpdate
        required:
        - type
      - $ref: '#/components/schemas/ManualUpdateParameters'
    RemoteTransactionParameters:
      title: RemoteTransactionParameters
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        beginIndex:
          type: integer
          format: uint64
      required:
      - timestamp
      - beginIndex
    ResolvedGatewayBindingComponent:
      title: ResolvedGatewayBindingComponent
      type: object
      properties:
        name:
          type: string
        version:
          type: integer
          format: uint64
      required:
      - name
      - version
    ResourceParameters:
      title: ResourceParameters
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        id:
          type: integer
          format: uint64
        name:
          type: string
        owner:
          type: string
      required:
      - timestamp
      - id
      - name
      - owner
    ResumeResponse:
      title: ResumeResponse
      type: object
    RevertLastInvocations:
      title: RevertLastInvocations
      type: object
      properties:
        numberOfInvocations:
          type: integer
          format: uint64
      required:
      - numberOfInvocations
    RevertParameters:
      title: RevertParameters
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        droppedRegion:
          $ref: '#/components/schemas/OplogRegion'
      required:
      - timestamp
      - droppedRegion
    RevertToOplogIndex:
      title: RevertToOplogIndex
      type: object
      properties:
        lastOplogIndex:
          type: integer
          format: uint64
      required:
      - lastOplogIndex
    RevertWorkerResponse:
      title: RevertWorkerResponse
      type: object
    RevertWorkerTarget:
      discriminator:
        propertyName: type
        mapping:
          revertToOplogIndex: '#/components/schemas/RevertWorkerTarget_RevertToOplogIndex'
          revertLastInvocations: '#/components/schemas/RevertWorkerTarget_RevertLastInvocations'
      type: object
      oneOf:
      - $ref: '#/components/schemas/RevertWorkerTarget_RevertToOplogIndex'
      - $ref: '#/components/schemas/RevertWorkerTarget_RevertLastInvocations'
    RevertWorkerTarget_RevertLastInvocations:
      allOf:
      - type: object
        properties:
          type:
            example: revertLastInvocations
            type: string
            enum:
            - revertLastInvocations
        required:
        - type
      - $ref: '#/components/schemas/RevertLastInvocations'
    RevertWorkerTarget_RevertToOplogIndex:
      allOf:
      - type: object
        properties:
          type:
            example: revertToOplogIndex
            type: string
            enum:
            - revertToOplogIndex
        required:
        - type
      - $ref: '#/components/schemas/RevertToOplogIndex'
    RibInputTypeInfo:
      title: RibInputTypeInfo
      type: object
      properties:
        types:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AnalysedType'
      required:
      - types
    RibOutputTypeInfo:
      title: RibOutputTypeInfo
      type: object
      properties:
        analysedType:
          $ref: '#/components/schemas/AnalysedType'
      required:
      - analysedType
    RouteRequestData:
      title: RouteRequestData
      type: object
      properties:
        method:
          $ref: '#/components/schemas/MethodPattern'
        path:
          type: string
        binding:
          $ref: '#/components/schemas/GatewayBindingData'
        security:
          type: string
      required:
      - method
      - path
      - binding
    RouteResponseData:
      title: RouteResponseData
      type: object
      properties:
        method:
          $ref: '#/components/schemas/MethodPattern'
        path:
          type: string
        security:
          type: string
        binding:
          $ref: '#/components/schemas/GatewayBindingResponseData'
      required:
      - method
      - path
      - binding
    ScanCursor:
      title: ScanCursor
      type: object
      properties:
        cursor:
          type: integer
          format: uint64
        layer:
          type: integer
          format: uint64
      required:
      - cursor
      - layer
    SecuritySchemeData:
      title: SecuritySchemeData
      type: object
      properties:
        providerType:
          $ref: '#/components/schemas/Provider'
        schemeIdentifier:
          type: string
        clientId:
          type: string
        clientSecret:
          type: string
        redirectUrl:
          type: string
        scopes:
          type: array
          items:
            type: string
      required:
      - providerType
      - schemeIdentifier
      - clientId
      - clientSecret
      - redirectUrl
      - scopes
    SetSpanAttributeParameters:
      title: SetSpanAttributeParameters
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        spanId:
          type: string
        key:
          type: string
        value:
          $ref: '#/components/schemas/PublicAttributeValue'
      required:
      - timestamp
      - spanId
      - key
      - value
    SnapshotBasedUpdateParameters:
      title: SnapshotBasedUpdateParameters
      type: object
      properties:
        payload:
          type: array
          items:
            type: integer
            format: uint8
      required:
      - payload
    StartSpanParameters:
      title: StartSpanParameters
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        spanId:
          type: string
        parentId:
          type: string
        linkedContext:
          type: string
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/PublicAttribute'
      required:
      - timestamp
      - spanId
      - attributes
    StringAttributeValue:
      title: StringAttributeValue
      type: object
      properties:
        value:
          type: string
      required:
      - value
    StringFilterComparator:
      type: string
      enum:
      - Equal
      - NotEqual
      - Like
      - NotLike
    SuccessfulUpdate:
      title: SuccessfulUpdate
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        targetVersion:
          type: integer
          format: uint64
      required:
      - timestamp
      - targetVersion
    SuccessfulUpdateParameters:
      title: SuccessfulUpdateParameters
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        target_version:
          type: integer
          format: uint64
        new_component_size:
          type: integer
          format: uint64
        new_active_plugins:
          type: array
          items:
            $ref: '#/components/schemas/PluginInstallationDescription'
      required:
      - timestamp
      - target_version
      - new_component_size
      - new_active_plugins
    TextReference:
      discriminator:
        propertyName: type
        mapping:
          Url: '#/components/schemas/TextReference_Url'
          Inline: '#/components/schemas/TextReference_TextSource'
      type: object
      oneOf:
      - $ref: '#/components/schemas/TextReference_Url'
      - $ref: '#/components/schemas/TextReference_TextSource'
    TextReference_TextSource:
      allOf:
      - type: object
        properties:
          type:
            example: Inline
            type: string
            enum:
            - Inline
        required:
        - type
      - $ref: '#/components/schemas/TextSource'
    TextReference_Url:
      allOf:
      - type: object
        properties:
          type:
            example: Url
            type: string
            enum:
            - Url
        required:
        - type
      - $ref: '#/components/schemas/Url'
    TextSource:
      title: TextSource
      type: object
      properties:
        data:
          type: string
        textType:
          $ref: '#/components/schemas/TextType'
      required:
      - data
    TextType:
      title: TextType
      type: object
      properties:
        languageCode:
          type: string
      required:
      - languageCode
    TimestampParameter:
      title: TimestampParameter
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
      required:
      - timestamp
    TypeBool:
      title: TypeBool
      type: object
    TypeChr:
      title: TypeChr
      type: object
    TypeEnum:
      title: TypeEnum
      type: object
      properties:
        name:
          type: string
        owner:
          type: string
        cases:
          type: array
          items:
            type: string
      required:
      - cases
    TypeF32:
      title: TypeF32
      type: object
    TypeF64:
      title: TypeF64
      type: object
    TypeFlags:
      title: TypeFlags
      type: object
      properties:
        name:
          type: string
        owner:
          type: string
        names:
          type: array
          items:
            type: string
      required:
      - names
    TypeHandle:
      title: TypeHandle
      type: object
      properties:
        name:
          type: string
        owner:
          type: string
        resource_id:
          type: integer
          format: uint64
        mode:
          $ref: '#/components/schemas/AnalysedResourceMode'
      required:
      - resource_id
      - mode
    TypeList:
      title: TypeList
      type: object
      properties:
        name:
          type: string
        owner:
          type: string
        inner:
          $ref: '#/components/schemas/AnalysedType'
      required:
      - inner
    TypeOption:
      title: TypeOption
      type: object
      properties:
        name:
          type: string
        owner:
          type: string
        inner:
          $ref: '#/components/schemas/AnalysedType'
      required:
      - inner
    TypeRecord:
      title: TypeRecord
      type: object
      properties:
        name:
          type: string
        owner:
          type: string
        fields:
          type: array
          items:
            $ref: '#/components/schemas/NameTypePair'
      required:
      - fields
    TypeResult:
      title: TypeResult
      type: object
      properties:
        name:
          type: string
        owner:
          type: string
        ok:
          $ref: '#/components/schemas/AnalysedType'
        err:
          $ref: '#/components/schemas/AnalysedType'
    TypeS16:
      title: TypeS16
      type: object
    TypeS32:
      title: TypeS32
      type: object
    TypeS64:
      title: TypeS64
      type: object
    TypeS8:
      title: TypeS8
      type: object
    TypeStr:
      title: TypeStr
      type: object
    TypeTuple:
      title: TypeTuple
      type: object
      properties:
        name:
          type: string
        owner:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/AnalysedType'
      required:
      - items
    TypeU16:
      title: TypeU16
      type: object
    TypeU32:
      title: TypeU32
      type: object
    TypeU64:
      title: TypeU64
      type: object
    TypeU8:
      title: TypeU8
      type: object
    TypeVariant:
      title: TypeVariant
      type: object
      properties:
        name:
          type: string
        owner:
          type: string
        cases:
          type: array
          items:
            $ref: '#/components/schemas/NameOptionTypePair'
      required:
      - cases
    UpdateRecord:
      discriminator:
        propertyName: type
        mapping:
          pendingUpdate: '#/components/schemas/UpdateRecord_PendingUpdate'
          successfulUpdate: '#/components/schemas/UpdateRecord_SuccessfulUpdate'
          failedUpdate: '#/components/schemas/UpdateRecord_FailedUpdate'
      type: object
      oneOf:
      - $ref: '#/components/schemas/UpdateRecord_PendingUpdate'
      - $ref: '#/components/schemas/UpdateRecord_SuccessfulUpdate'
      - $ref: '#/components/schemas/UpdateRecord_FailedUpdate'
    UpdateRecord_FailedUpdate:
      allOf:
      - type: object
        properties:
          type:
            example: failedUpdate
            type: string
            enum:
            - failedUpdate
        required:
        - type
      - $ref: '#/components/schemas/FailedUpdate'
    UpdateRecord_PendingUpdate:
      allOf:
      - type: object
        properties:
          type:
            example: pendingUpdate
            type: string
            enum:
            - pendingUpdate
        required:
        - type
      - $ref: '#/components/schemas/PendingUpdate'
    UpdateRecord_SuccessfulUpdate:
      allOf:
      - type: object
        properties:
          type:
            example: successfulUpdate
            type: string
            enum:
            - successfulUpdate
        required:
        - type
      - $ref: '#/components/schemas/SuccessfulUpdate'
    UpdateWorkerRequest:
      title: UpdateWorkerRequest
      type: object
      properties:
        mode:
          $ref: '#/components/schemas/WorkerUpdateMode'
        targetVersion:
          type: integer
          format: uint64
      required:
      - mode
      - targetVersion
    UpdateWorkerResponse:
      title: UpdateWorkerResponse
      type: object
    Url:
      title: Url
      type: object
      properties:
        value:
          type: string
      required:
      - value
    ValueAndOptionalType:
      type: object
      properties:
        typ:
          $ref: '#/components/schemas/AnalysedType'
        value: {}
      required:
      - value
    ValueAndType:
      type: object
      properties:
        typ:
          $ref: '#/components/schemas/AnalysedType'
        value: {}
      required:
      - typ
      - value
    VersionInfo:
      title: VersionInfo
      type: object
      properties:
        version:
          type: string
      required:
      - version
    WasiConfigVarsEntry:
      title: WasiConfigVarsEntry
      type: object
      properties:
        key:
          type: string
        value:
          type: string
      required:
      - key
      - value
    WorkerAndFilter:
      title: WorkerAndFilter
      type: object
      properties:
        filters:
          type: array
          items:
            $ref: '#/components/schemas/WorkerFilter'
      required:
      - filters
    WorkerCreatedAtFilter:
      title: WorkerCreatedAtFilter
      type: object
      properties:
        comparator:
          $ref: '#/components/schemas/FilterComparator'
        value:
          type: string
          format: date-time
      required:
      - comparator
      - value
    WorkerCreationRequest:
      title: WorkerCreationRequest
      type: object
      properties:
        name:
          type: string
        args:
          type: array
          items:
            type: string
        env:
          type: object
          additionalProperties:
            type: string
        wasiConfigVars:
          default: []
          type: array
          items:
            $ref: '#/components/schemas/WasiConfigVarsEntry'
      required:
      - name
      - args
      - env
    WorkerCreationResponse:
      title: WorkerCreationResponse
      type: object
      properties:
        workerId:
          $ref: '#/components/schemas/WorkerId'
        componentVersion:
          type: integer
          format: uint64
      required:
      - workerId
      - componentVersion
    WorkerEnvFilter:
      title: WorkerEnvFilter
      type: object
      properties:
        name:
          type: string
        comparator:
          $ref: '#/components/schemas/StringFilterComparator'
        value:
          type: string
      required:
      - name
      - comparator
      - value
    WorkerErrorDetails:
      title: WorkerErrorDetails
      description: Detail in case the error was caused by the worker failing
      type: object
      properties:
        cause:
          description: Error that caused to worker to fail
          type: string
        stderr:
          description: Error log of the worker
          type: string
      required:
      - cause
      - stderr
    WorkerFilter:
      discriminator:
        propertyName: type
        mapping:
          Name: '#/components/schemas/WorkerFilter_WorkerNameFilter'
          Status: '#/components/schemas/WorkerFilter_WorkerStatusFilter'
          Version: '#/components/schemas/WorkerFilter_WorkerVersionFilter'
          CreatedAt: '#/components/schemas/WorkerFilter_WorkerCreatedAtFilter'
          Env: '#/components/schemas/WorkerFilter_WorkerEnvFilter'
          And: '#/components/schemas/WorkerFilter_WorkerAndFilter'
          Or: '#/components/schemas/WorkerFilter_WorkerOrFilter'
          Not: '#/components/schemas/WorkerFilter_WorkerNotFilter'
          WasiConfigVars: '#/components/schemas/WorkerFilter_WorkerWasiConfigVarsFilter'
      type: object
      oneOf:
      - $ref: '#/components/schemas/WorkerFilter_WorkerNameFilter'
      - $ref: '#/components/schemas/WorkerFilter_WorkerStatusFilter'
      - $ref: '#/components/schemas/WorkerFilter_WorkerVersionFilter'
      - $ref: '#/components/schemas/WorkerFilter_WorkerCreatedAtFilter'
      - $ref: '#/components/schemas/WorkerFilter_WorkerEnvFilter'
      - $ref: '#/components/schemas/WorkerFilter_WorkerAndFilter'
      - $ref: '#/components/schemas/WorkerFilter_WorkerOrFilter'
      - $ref: '#/components/schemas/WorkerFilter_WorkerNotFilter'
      - $ref: '#/components/schemas/WorkerFilter_WorkerWasiConfigVarsFilter'
    WorkerFilter_WorkerAndFilter:
      allOf:
      - type: object
        properties:
          type:
            example: And
            type: string
            enum:
            - And
        required:
        - type
      - $ref: '#/components/schemas/WorkerAndFilter'
    WorkerFilter_WorkerCreatedAtFilter:
      allOf:
      - type: object
        properties:
          type:
            example: CreatedAt
            type: string
            enum:
            - CreatedAt
        required:
        - type
      - $ref: '#/components/schemas/WorkerCreatedAtFilter'
    WorkerFilter_WorkerEnvFilter:
      allOf:
      - type: object
        properties:
          type:
            example: Env
            type: string
            enum:
            - Env
        required:
        - type
      - $ref: '#/components/schemas/WorkerEnvFilter'
    WorkerFilter_WorkerNameFilter:
      allOf:
      - type: object
        properties:
          type:
            example: Name
            type: string
            enum:
            - Name
        required:
        - type
      - $ref: '#/components/schemas/WorkerNameFilter'
    WorkerFilter_WorkerNotFilter:
      allOf:
      - type: object
        properties:
          type:
            example: Not
            type: string
            enum:
            - Not
        required:
        - type
      - $ref: '#/components/schemas/WorkerNotFilter'
    WorkerFilter_WorkerOrFilter:
      allOf:
      - type: object
        properties:
          type:
            example: Or
            type: string
            enum:
            - Or
        required:
        - type
      - $ref: '#/components/schemas/WorkerOrFilter'
    WorkerFilter_WorkerStatusFilter:
      allOf:
      - type: object
        properties:
          type:
            example: Status
            type: string
            enum:
            - Status
        required:
        - type
      - $ref: '#/components/schemas/WorkerStatusFilter'
    WorkerFilter_WorkerVersionFilter:
      allOf:
      - type: object
        properties:
          type:
            example: Version
            type: string
            enum:
            - Version
        required:
        - type
      - $ref: '#/components/schemas/WorkerVersionFilter'
    WorkerFilter_WorkerWasiConfigVarsFilter:
      allOf:
      - type: object
        properties:
          type:
            example: WasiConfigVars
            type: string
            enum:
            - WasiConfigVars
        required:
        - type
      - $ref: '#/components/schemas/WorkerWasiConfigVarsFilter'
    WorkerId:
      title: WorkerId
      type: object
      properties:
        componentId:
          type: string
          format: uuid
        workerName:
          type: string
      required:
      - componentId
      - workerName
    WorkerMetadata:
      title: WorkerMetadata
      type: object
      properties:
        workerId:
          $ref: '#/components/schemas/WorkerId'
        projectId:
          type: string
          format: uuid
        createdBy:
          type: string
        args:
          type: array
          items:
            type: string
        env:
          type: object
          additionalProperties:
            type: string
        wasiConfigVars:
          type: array
          items:
            $ref: '#/components/schemas/WasiConfigVarsEntry'
        status:
          $ref: '#/components/schemas/WorkerStatus'
        componentVersion:
          type: integer
          format: uint64
        retryCount:
          type: integer
          format: uint32
        pendingInvocationCount:
          type: integer
          format: uint64
        updates:
          type: array
          items:
            $ref: '#/components/schemas/UpdateRecord'
        createdAt:
          type: string
          format: date-time
        lastError:
          type: string
        componentSize:
          type: integer
          format: uint64
        totalLinearMemorySize:
          type: integer
          format: uint64
        exportedResourceInstances:
          type: array
          items:
            $ref: '#/components/schemas/ExportedResourceMetadata'
        activePlugins:
          type: array
          items:
            type: string
            format: uuid
        skippedRegions:
          description: |-
            Oplog regions that are skipped during the worker's state recovery, but describe
            the history of the worker. For example if an atomic region gets restarted, its partially
            recorded oplog entries will be skipped on retry.
          type: array
          items:
            $ref: '#/components/schemas/OplogRegion'
        deletedRegions:
          description: Oplog regions permanently deleted from the workers using the revert functionality.
          type: array
          items:
            $ref: '#/components/schemas/OplogRegion'
      required:
      - workerId
      - projectId
      - createdBy
      - args
      - env
      - wasiConfigVars
      - status
      - componentVersion
      - retryCount
      - pendingInvocationCount
      - updates
      - createdAt
      - componentSize
      - totalLinearMemorySize
      - exportedResourceInstances
      - agentInstances
      - activePlugins
      - skippedRegions
      - deletedRegions
    WorkerNameFilter:
      title: WorkerNameFilter
      type: object
      properties:
        comparator:
          $ref: '#/components/schemas/StringFilterComparator'
        value:
          type: string
      required:
      - comparator
      - value
    WorkerNotFilter:
      title: WorkerNotFilter
      type: object
      properties:
        filter:
          $ref: '#/components/schemas/WorkerFilter'
      required:
      - filter
    WorkerOrFilter:
      title: WorkerOrFilter
      type: object
      properties:
        filters:
          type: array
          items:
            $ref: '#/components/schemas/WorkerFilter'
      required:
      - filters
    WorkerStatus:
      description: |-
        Represents last known status of a worker

        This is always recorded together with the current oplog index, and it can only be used
        as a source of truth if there are no newer oplog entries since the record.
      type: string
      enum:
      - Running
      - Idle
      - Suspended
      - Interrupted
      - Retrying
      - Failed
      - Exited
    WorkerStatusFilter:
      title: WorkerStatusFilter
      type: object
      properties:
        comparator:
          $ref: '#/components/schemas/FilterComparator'
        value:
          $ref: '#/components/schemas/WorkerStatus'
      required:
      - comparator
      - value
    WorkerUpdateMode:
      type: string
      enum:
      - Automatic
      - Manual
    WorkerVersionFilter:
      title: WorkerVersionFilter
      type: object
      properties:
        comparator:
          $ref: '#/components/schemas/FilterComparator'
        value:
          type: integer
          format: uint64
      required:
      - comparator
      - value
    WorkerWasiConfigVarsFilter:
      title: WorkerWasiConfigVarsFilter
      type: object
      properties:
        name:
          type: string
        comparator:
          $ref: '#/components/schemas/StringFilterComparator'
        value:
          type: string
      required:
      - name
      - comparator
      - value
    WorkersMetadataRequest:
      title: WorkersMetadataRequest
      type: object
      properties:
        filter:
          $ref: '#/components/schemas/WorkerFilter'
        cursor:
          $ref: '#/components/schemas/ScanCursor'
        count:
          type: integer
          format: uint64
        precise:
          type: boolean
    WorkersMetadataResponse:
      title: WorkersMetadataResponse
      type: object
      properties:
        workers:
          type: array
          items:
            $ref: '#/components/schemas/WorkerMetadata'
        cursor:
          $ref: '#/components/schemas/ScanCursor'
      required:
      - workers
    WriteRemoteBatchedParameters:
      title: WriteRemoteBatchedParameters
      type: object
      properties:
        index:
          type: integer
          format: uint64
    WriteRemoteTransactionParameters:
      title: WriteRemoteTransactionParameters
      type: object
      properties:
        index:
          type: integer
          format: uint64
    Account:
      title: Account
      type: object
      properties:
        id:
          type: string
          format: uuid
        revision:
          type: integer
          format: uint64
        name:
          type: string
        email:
          type: string
        planId:
          type: string
          format: uuid
        roles:
          type: array
          items:
            $ref: '#/components/schemas/AccountRole'
      required:
      - id
      - revision
      - name
      - email
      - planId
      - roles
    AccountCounts:
      title: AccountCounts
      type: object
      properties:
        totalAccounts:
          type: integer
          format: int64
        totalActiveAccounts:
          type: integer
          format: int64
        totalDeletedAccounts:
          type: integer
          format: int64
      required:
      - totalAccounts
      - totalActiveAccounts
      - totalDeletedAccounts
    AccountCreation:
      title: AccountCreation
      type: object
      properties:
        name:
          type: string
        email:
          type: string
      required:
      - name
      - email
    AccountRole:
      type: string
      enum:
      - admin
      - marketing-admin
    AccountSummary:
      title: AccountSummary
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
        componentsCount:
          type: integer
          format: int64
        workersCount:
          type: integer
          format: int64
        createdAt:
          type: string
          format: date-time
      required:
      - id
      - name
      - email
      - componentsCount
      - workersCount
      - createdAt
    AccountUpdate:
      title: AccountUpdate
      type: object
      properties:
        name:
          type: string
        email:
          type: string
      required:
      - name
      - email
    AgentConstructor:
      title: AgentConstructor
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        promptHint:
          type: string
        inputSchema:
          $ref: '#/components/schemas/DataSchema'
      required:
      - description
      - inputSchema
    AgentDependency:
      title: AgentDependency
      type: object
      properties:
        typeName:
          type: string
        description:
          type: string
        constructor:
          $ref: '#/components/schemas/AgentConstructor'
        methods:
          type: array
          items:
            $ref: '#/components/schemas/AgentMethod'
      required:
      - typeName
      - constructor
      - methods
    AgentMethod:
      title: AgentMethod
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        promptHint:
          type: string
        inputSchema:
          $ref: '#/components/schemas/DataSchema'
        outputSchema:
          $ref: '#/components/schemas/DataSchema'
      required:
      - name
      - description
      - inputSchema
      - outputSchema
    AgentType:
      title: AgentType
      type: object
      properties:
        typeName:
          type: string
        description:
          type: string
        constructor:
          $ref: '#/components/schemas/AgentConstructor'
        methods:
          type: array
          items:
            $ref: '#/components/schemas/AgentMethod'
        dependencies:
          type: array
          items:
            $ref: '#/components/schemas/AgentDependency'
      required:
      - typeName
      - description
      - constructor
      - methods
      - dependencies
    AnalysedExport:
      discriminator:
        propertyName: type
        mapping:
          Function: '#/components/schemas/AnalysedExport_AnalysedFunction'
          Instance: '#/components/schemas/AnalysedExport_AnalysedInstance'
      type: object
      oneOf:
      - $ref: '#/components/schemas/AnalysedExport_AnalysedFunction'
      - $ref: '#/components/schemas/AnalysedExport_AnalysedInstance'
    AnalysedExport_AnalysedFunction:
      allOf:
      - type: object
        properties:
          type:
            example: Function
            type: string
            enum:
            - Function
        required:
        - type
      - $ref: '#/components/schemas/AnalysedFunction'
    AnalysedExport_AnalysedInstance:
      allOf:
      - type: object
        properties:
          type:
            example: Instance
            type: string
            enum:
            - Instance
        required:
        - type
      - $ref: '#/components/schemas/AnalysedInstance'
    AnalysedFunction:
      title: AnalysedFunction
      type: object
      properties:
        name:
          type: string
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/AnalysedFunctionParameter'
        result:
          $ref: '#/components/schemas/AnalysedFunctionResult'
      required:
      - name
      - parameters
    AnalysedFunctionParameter:
      title: AnalysedFunctionParameter
      type: object
      properties:
        name:
          type: string
        typ:
          $ref: '#/components/schemas/AnalysedType'
      required:
      - name
      - typ
    AnalysedFunctionResult:
      title: AnalysedFunctionResult
      type: object
      properties:
        typ:
          $ref: '#/components/schemas/AnalysedType'
      required:
      - typ
    AnalysedInstance:
      title: AnalysedInstance
      type: object
      properties:
        name:
          type: string
        functions:
          type: array
          items:
            $ref: '#/components/schemas/AnalysedFunction'
      required:
      - name
      - functions
    ApiDeployment:
      title: ApiDeployment
      type: object
      properties:
        id:
          type: string
          format: uuid
        revision:
          type: integer
          format: uint64
        apiDefinitions:
          type: array
          items:
            type: string
            format: uuid
        environmentId:
          type: string
          format: uuid
        site:
          type: string
        createdAt:
          type: string
          format: date-time
      required:
      - id
      - revision
      - apiDefinitions
      - environmentId
      - site
      - createdAt
    ApiDomain:
      title: ApiDomain
      type: object
      properties:
        id:
          type: string
          format: uuid
        revision:
          type: integer
          format: uint64
        environmentId:
          type: string
          format: uuid
        domainName:
          type: string
        nameServers:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
      required:
      - id
      - revision
      - environmentId
      - domainName
      - nameServers
      - createdAt
    Application:
      title: Application
      type: object
      properties:
        id:
          type: string
          format: uuid
        revision:
          type: integer
          format: uint64
        accountId:
          type: string
          format: uuid
        name:
          type: string
      required:
      - id
      - revision
      - accountId
      - name
    ApplicationCreation:
      title: ApplicationCreation
      type: object
      properties:
        name:
          type: string
      required:
      - name
    ApplicationUpdate:
      title: ApplicationUpdate
      type: object
      properties:
        newName:
          type: string
    BinaryDescriptor:
      title: BinaryDescriptor
      type: object
      properties:
        restrictions:
          type: array
          items:
            $ref: '#/components/schemas/BinaryType'
    CertificateResponseView:
      title: CertificateResponseView
      type: object
      properties:
        environmentId:
          type: string
          format: uuid
        name:
          type: string
        revision:
          type: integer
          format: uint64
        domainName:
          type: string
        createdAt:
          type: string
          format: date-time
      required:
      - environmentId
      - name
      - revision
      - domainName
      - createdAt
    ComponentCreation:
      title: ComponentCreation
      type: object
      properties:
        componentName:
          type: string
        componentType:
          $ref: '#/components/schemas/ComponentType'
        fileOptions:
          default: {}
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ComponentFileOptions'
        dynamicLinking:
          default: {}
          type: object
          additionalProperties:
            $ref: '#/components/schemas/DynamicLinkedInstance'
        env:
          default: {}
          type: object
          additionalProperties:
            type: string
        agentTypes:
          default: []
          type: array
          items:
            $ref: '#/components/schemas/AgentType'
        plugins:
          default: []
          type: array
          items:
            $ref: '#/components/schemas/PluginInstallation'
      required:
      - componentName
    ComponentDto:
      title: ComponentDto
      type: object
      properties:
        id:
          type: string
          format: uuid
        revision:
          type: integer
          format: uint64
        environmentId:
          type: string
          format: uuid
        applicationId:
          type: string
          format: uuid
        accountId:
          type: string
          format: uuid
        componentName:
          type: string
        componentSize:
          type: integer
          format: uint64
        metadata:
          $ref: '#/components/schemas/ComponentMetadata'
        createdAt:
          type: string
          format: date-time
        componentType:
          $ref: '#/components/schemas/ComponentType'
        files:
          type: array
          items:
            $ref: '#/components/schemas/InitialComponentFile'
        installedPlugins:
          type: array
          items:
            $ref: '#/components/schemas/InstalledPlugin'
        env:
          type: object
          additionalProperties:
            type: string
        wasmHash:
          type: string
          format: hash
        environmentRolesFromShares:
          type: array
          items:
            $ref: '#/components/schemas/EnvironmentRole'
      required:
      - id
      - revision
      - environmentId
      - applicationId
      - accountId
      - componentName
      - componentSize
      - metadata
      - createdAt
      - componentType
      - files
      - installedPlugins
      - env
      - wasmHash
      - environmentRolesFromShares
    ComponentFileOptions:
      title: ComponentFileOptions
      type: object
      properties:
        permissions:
          description: Path of the file in the uploaded archive
          allOf:
          - $ref: '#/components/schemas/ComponentFilePermissions'
          - description: Path of the file in the uploaded archive
      required:
      - permissions
    ComponentMetadata:
      title: ComponentMetadata
      type: object
      properties:
        exports:
          type: array
          items:
            $ref: '#/components/schemas/AnalysedExport'
        producers:
          type: array
          items:
            $ref: '#/components/schemas/Producers'
        memories:
          type: array
          items:
            $ref: '#/components/schemas/LinearMemory'
        binaryWit:
          type: string
          format: bytes
        rootPackageName:
          type: string
        rootPackageVersion:
          type: string
        dynamicLinking:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/DynamicLinkedInstance'
        agentTypes:
          type: array
          items:
            $ref: '#/components/schemas/AgentType'
      required:
      - exports
      - producers
      - memories
      - binaryWit
      - dynamicLinking
      - agentTypes
    ComponentModelElementSchema:
      title: ComponentModelElementSchema
      type: object
      properties:
        elementType:
          $ref: '#/components/schemas/AnalysedType'
      required:
      - elementType
    ComponentReference:
      title: ComponentReference
      type: object
      properties:
        name:
          type: string
        revision:
          type: integer
          format: uint64
        id:
          type: string
          format: uuid
      required:
      - name
      - revision
      - id
    ComponentTransformerPluginSpec:
      title: ComponentTransformerPluginSpec
      type: object
      properties:
        providedWitPackage:
          type: string
        jsonSchema: {}
        validateUrl:
          type: string
        transformUrl:
          type: string
      required:
      - validateUrl
      - transformUrl
    ComponentType:
      type: string
      enum:
      - durable
      - ephemeral
    ComponentUpdate:
      title: ComponentUpdate
      type: object
      properties:
        currentRevision:
          type: integer
          format: uint64
        componentType:
          $ref: '#/components/schemas/ComponentType'
        removedFiles:
          default: []
          type: array
          items:
            description: Path inside a component filesystem. Must be absolute.
            type: string
        newFileOptions:
          default: {}
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ComponentFileOptions'
        dynamicLinking:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/DynamicLinkedInstance'
        env:
          type: object
          additionalProperties:
            type: string
        agentTypes:
          type: array
          items:
            $ref: '#/components/schemas/AgentType'
        pluginUpdates:
          default: []
          type: array
          items:
            $ref: '#/components/schemas/PluginInstallationAction'
      required:
      - currentRevision
    CorsConfiguration:
      title: CorsConfiguration
      type: object
      properties:
        allowOrigin:
          type: string
        allowMethods:
          type: string
        allowHeaders:
          type: string
        exposeHeaders:
          type: string
        allowCredentials:
          type: boolean
        maxAge:
          type: integer
          format: uint64
      required:
      - allowOrigin
      - allowMethods
      - allowHeaders
    CreateApiDeploymentRequest:
      title: CreateApiDeploymentRequest
      type: object
      properties:
        apiDefinitions:
          type: array
          items:
            type: string
            format: uuid
      required:
      - apiDefinitions
    CreateApiDomainRequest:
      title: CreateApiDomainRequest
      type: object
      properties:
        domainName:
          type: string
      required:
      - domainName
    CreateCertificateRequest:
      title: CreateCertificateRequest
      type: object
      properties:
        name:
          type: string
        domainName:
          type: string
        certificateBody:
          type: string
        certificatePrivateKey:
          type: string
      required:
      - name
      - domainName
      - certificateBody
      - certificatePrivateKey
    CreateHttpApiDefinitionRequest:
      title: CreateHttpApiDefinitionRequest
      type: object
      properties:
        routes:
          type: array
          items:
            $ref: '#/components/schemas/RouteRequestView'
        version:
          type: string
      required:
      - routes
      - version
    CreateSecuritySchemeRequest:
      title: CreateSecuritySchemeRequest
      type: object
      properties:
        providerType:
          $ref: '#/components/schemas/Provider'
        schemeIdentifier:
          type: string
        clientId:
          type: string
        clientSecret:
          type: string
        redirectUrl:
          type: string
        scopes:
          type: array
          items:
            type: string
      required:
      - providerType
      - schemeIdentifier
      - clientId
      - clientSecret
      - redirectUrl
      - scopes
    DataSchema:
      discriminator:
        propertyName: type
        mapping:
          Tuple: '#/components/schemas/DataSchema_NamedElementSchemas'
          Multimodal: '#/components/schemas/DataSchema_NamedElementSchemas'
      type: object
      oneOf:
      - $ref: '#/components/schemas/DataSchema_NamedElementSchemas'
      - $ref: '#/components/schemas/DataSchema_NamedElementSchemas'
    DataSchema_NamedElementSchemas:
      allOf:
      - type: object
        properties:
          type:
            example: Multimodal
            type: string
            enum:
            - Multimodal
        required:
        - type
      - $ref: '#/components/schemas/NamedElementSchemas'
    Deployment:
      title: Deployment
      type: object
      properties:
        environmentId:
          type: string
          format: uuid
        revision:
          type: integer
          format: uint64
        version:
          type: string
        deploymentHash:
          type: string
          format: hash
      required:
      - environmentId
      - revision
      - version
      - deploymentHash
    DeploymentCreation:
      title: DeploymentCreation
      type: object
      properties:
        currentDeploymentRevision:
          type: integer
          format: uint64
        expectedDeploymentHash:
          type: string
          format: hash
        version:
          type: string
      required:
      - expectedDeploymentHash
      - version
    DeploymentPlan:
      title: DeploymentPlan
      description: Summary of all entities tracked by the deployment
      type: object
      properties:
        deploymentHash:
          type: string
          format: hash
        components:
          type: array
          items:
            $ref: '#/components/schemas/DeploymentPlanComponentEntry'
      required:
      - deploymentHash
      - components
    DeploymentPlanComponentEntry:
      title: DeploymentPlanComponentEntry
      type: object
      properties:
        id:
          type: string
          format: uuid
        revision:
          type: integer
          format: uint64
        name:
          type: string
        hash:
          type: string
          format: hash
      required:
      - id
      - revision
      - name
      - hash
    DynamicLinkedInstance:
      discriminator:
        propertyName: type
        mapping:
          WasmRpc: '#/components/schemas/DynamicLinkedInstance_DynamicLinkedWasmRpc'
      type: object
      oneOf:
      - $ref: '#/components/schemas/DynamicLinkedInstance_DynamicLinkedWasmRpc'
    DynamicLinkedInstance_DynamicLinkedWasmRpc:
      allOf:
      - type: object
        properties:
          type:
            example: WasmRpc
            type: string
            enum:
            - WasmRpc
        required:
        - type
      - $ref: '#/components/schemas/DynamicLinkedWasmRpc'
    DynamicLinkedWasmRpc:
      title: DynamicLinkedWasmRpc
      type: object
      properties:
        targets:
          description: Maps resource names within the dynamic linked interface to target information
          type: object
          additionalProperties:
            $ref: '#/components/schemas/WasmRpcTarget'
      required:
      - targets
    ElementSchema:
      discriminator:
        propertyName: type
        mapping:
          ComponentModel: '#/components/schemas/ElementSchema_ComponentModelElementSchema'
          UnstructuredText: '#/components/schemas/ElementSchema_TextDescriptor'
          UnstructuredBinary: '#/components/schemas/ElementSchema_BinaryDescriptor'
      type: object
      oneOf:
      - $ref: '#/components/schemas/ElementSchema_ComponentModelElementSchema'
      - $ref: '#/components/schemas/ElementSchema_TextDescriptor'
      - $ref: '#/components/schemas/ElementSchema_BinaryDescriptor'
    ElementSchema_BinaryDescriptor:
      allOf:
      - type: object
        properties:
          type:
            example: UnstructuredBinary
            type: string
            enum:
            - UnstructuredBinary
        required:
        - type
      - $ref: '#/components/schemas/BinaryDescriptor'
    ElementSchema_ComponentModelElementSchema:
      allOf:
      - type: object
        properties:
          type:
            example: ComponentModel
            type: string
            enum:
            - ComponentModel
        required:
        - type
      - $ref: '#/components/schemas/ComponentModelElementSchema'
    ElementSchema_TextDescriptor:
      allOf:
      - type: object
        properties:
          type:
            example: UnstructuredText
            type: string
            enum:
            - UnstructuredText
        required:
        - type
      - $ref: '#/components/schemas/TextDescriptor'
    Environment:
      title: Environment
      type: object
      properties:
        id:
          type: string
          format: uuid
        revision:
          type: integer
          format: uint64
        applicationId:
          type: string
          format: uuid
        name:
          type: string
        compatibilityCheck:
          type: boolean
        versionCheck:
          type: boolean
        securityOverrides:
          type: boolean
        ownerAccountId:
          type: string
          format: uuid
        rolesFromShares:
          description: Roles in the environment that were given to the current user by shares. The owner always has full access.
          type: array
          items:
            $ref: '#/components/schemas/EnvironmentRole'
        currentDeployment:
          $ref: '#/components/schemas/EnvironmentCurrentDeploymentView'
      required:
      - id
      - revision
      - applicationId
      - name
      - compatibilityCheck
      - versionCheck
      - securityOverrides
      - ownerAccountId
      - rolesFromShares
    EnvironmentCreation:
      title: EnvironmentCreation
      type: object
      properties:
        name:
          type: string
        compatibilityCheck:
          type: boolean
        versionCheck:
          type: boolean
        securityOverrides:
          type: boolean
      required:
      - name
      - compatibilityCheck
      - versionCheck
      - securityOverrides
    EnvironmentCurrentDeploymentView:
      title: EnvironmentCurrentDeploymentView
      type: object
      properties:
        revision:
          type: integer
          format: uint64
        hash:
          type: string
          format: hash
      required:
      - revision
      - hash
    EnvironmentPluginGrant:
      title: EnvironmentPluginGrant
      type: object
      properties:
        id:
          type: string
          format: uuid
        environmentId:
          type: string
          format: uuid
        pluginRegistrationId:
          type: string
          format: uuid
      required:
      - id
      - environmentId
      - pluginRegistrationId
    EnvironmentPluginGrantCreation:
      title: EnvironmentPluginGrantCreation
      type: object
      properties:
        pluginRegistrationId:
          type: string
          format: uuid
      required:
      - pluginRegistrationId
    EnvironmentRole:
      type: string
      enum:
      - admin
      - viewer
      - deployer
    EnvironmentShare:
      title: EnvironmentShare
      type: object
      properties:
        id:
          type: string
          format: uuid
        revision:
          type: integer
          format: uint64
        environmentId:
          type: string
          format: uuid
        granteeAccountId:
          type: string
          format: uuid
        roles:
          type: array
          items:
            $ref: '#/components/schemas/EnvironmentRole'
      required:
      - id
      - revision
      - environmentId
      - granteeAccountId
      - roles
    EnvironmentShareCreation:
      title: EnvironmentShareCreation
      type: object
      properties:
        granteeAccountId:
          type: string
          format: uuid
        roles:
          type: array
          items:
            $ref: '#/components/schemas/EnvironmentRole'
      required:
      - granteeAccountId
      - roles
    EnvironmentShareUpdate:
      title: EnvironmentShareUpdate
      type: object
      properties:
        newRoles:
          type: array
          items:
            $ref: '#/components/schemas/EnvironmentRole'
      required:
      - newRoles
    EnvironmentUpdate:
      title: EnvironmentUpdate
      type: object
      properties:
        newName:
          type: string
    GatewayBindingRequestView:
      title: GatewayBindingRequestView
      type: object
      properties:
        bindingType:
          $ref: '#/components/schemas/GatewayBindingType'
        component:
          $ref: '#/components/schemas/ComponentReference'
        idempotencyKey:
          type: string
        response:
          type: string
        invocationContext:
          type: string
    GatewayBindingResponseView:
      title: GatewayBindingResponseView
      type: object
      properties:
        component:
          $ref: '#/components/schemas/ComponentReference'
        workerName:
          type: string
        idempotencyKey:
          type: string
        invocationContext:
          type: string
        response:
          type: string
        bindingType:
          $ref: '#/components/schemas/GatewayBindingType'
        responseMappingInput:
          $ref: '#/components/schemas/RibInputTypeInfo'
        workerNameInput:
          $ref: '#/components/schemas/RibInputTypeInfo'
        idempotencyKeyInput:
          $ref: '#/components/schemas/RibInputTypeInfo'
        corsPreflight:
          $ref: '#/components/schemas/CorsConfiguration'
        responseMappingOutput:
          $ref: '#/components/schemas/RibOutputTypeInfo'
        openapiSpecJson:
          type: string
    HttpApiDefinitionResponseView:
      title: HttpApiDefinitionResponseView
      type: object
      properties:
        id:
          type: string
          format: uuid
        routes:
          type: array
          items:
            $ref: '#/components/schemas/RouteResponseView'
        version:
          type: string
        createdAt:
          type: string
          format: date-time
      required:
      - id
      - routes
      - version
      - createdAt
    InitialComponentFile:
      title: InitialComponentFile
      type: object
      properties:
        key:
          title: |-
            Key that can be used to identify a component file.
            All files with the same content will have the same key.
          type: string
        path:
          description: Path inside a component filesystem. Must be absolute.
          type: string
        permissions:
          $ref: '#/components/schemas/ComponentFilePermissions'
      required:
      - key
      - path
      - permissions
    InstalledPlugin:
      title: InstalledPlugin
      type: object
      properties:
        pluginRegistrationId:
          type: string
          format: uuid
        priority:
          title: |-
            Priority of a given plugin. Plugins with a lower priority will be applied before plugins with a higher priority.
            There can only be a single plugin with a given priority installed to a component.
          type: integer
          format: int32
        parameters:
          type: object
          additionalProperties:
            type: string
      required:
      - pluginRegistrationId
      - priority
      - parameters
    LinearMemory:
      title: LinearMemory
      type: object
      properties:
        initial:
          description: Initial size of the linear memory in bytes
          type: integer
          format: uint64
        maximum:
          description: Optional maximal size of the linear memory in bytes
          type: integer
          format: uint64
      required:
      - initial
    NamedElementSchema:
      title: NamedElementSchema
      type: object
      properties:
        name:
          type: string
        schema:
          $ref: '#/components/schemas/ElementSchema'
      required:
      - name
      - schema
    NamedElementSchemas:
      title: NamedElementSchemas
      type: object
      properties:
        elements:
          type: array
          items:
            $ref: '#/components/schemas/NamedElementSchema'
      required:
      - elements
    OAuth2DeviceFlowStartRequest:
      title: OAuth2DeviceFlowStartRequest
      type: object
      properties:
        provider:
          $ref: '#/components/schemas/OAuth2Provider'
      required:
      - provider
    OAuth2DeviceflowData:
      title: OAuth2DeviceflowData
      type: object
      properties:
        url:
          type: string
        userCode:
          type: string
        expires:
          type: string
          format: date-time
        encodedSession:
          type: string
      required:
      - url
      - userCode
      - expires
      - encodedSession
    OAuth2Provider:
      type: string
      enum:
      - github
    OAuth2WebflowData:
      title: OAuth2WebflowData
      type: object
      properties:
        url:
          type: string
        state:
          type: string
          format: uuid
      required:
      - url
      - state
    OplogProcessorPluginSpec:
      title: OplogProcessorPluginSpec
      type: object
      properties:
        componentId:
          type: string
          format: uuid
        componentRevision:
          type: integer
          format: uint64
      required:
      - componentId
      - componentRevision
    Page_AccountSummary:
      title: Page_AccountSummary
      type: object
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/AccountSummary'
      required:
      - values
    Page_ApiDeployment:
      title: Page_ApiDeployment
      type: object
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/ApiDeployment'
      required:
      - values
    Page_ApiDomain:
      title: Page_ApiDomain
      type: object
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/ApiDomain'
      required:
      - values
    Page_Application:
      title: Page_Application
      type: object
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/Application'
      required:
      - values
    Page_CertificateResponseView:
      title: Page_CertificateResponseView
      type: object
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/CertificateResponseView'
      required:
      - values
    Page_ComponentDto:
      title: Page_ComponentDto
      type: object
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/ComponentDto'
      required:
      - values
    Page_Deployment:
      title: Page_Deployment
      type: object
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/Deployment'
      required:
      - values
    Page_Environment:
      title: Page_Environment
      type: object
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/Environment'
      required:
      - values
    Page_EnvironmentPluginGrant:
      title: Page_EnvironmentPluginGrant
      type: object
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/EnvironmentPluginGrant'
      required:
      - values
    Page_EnvironmentShare:
      title: Page_EnvironmentShare
      type: object
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/EnvironmentShare'
      required:
      - values
    Page_HttpApiDefinitionResponseView:
      title: Page_HttpApiDefinitionResponseView
      type: object
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/HttpApiDefinitionResponseView'
      required:
      - values
    Page_PluginRegistrationDto:
      title: Page_PluginRegistrationDto
      type: object
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/PluginRegistrationDto'
      required:
      - values
    Page_SecuritySchemeResponseView:
      title: Page_SecuritySchemeResponseView
      type: object
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/SecuritySchemeResponseView'
      required:
      - values
    Page_Token:
      title: Page_Token
      type: object
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/Token'
      required:
      - values
    Plan:
      title: Plan
      type: object
      properties:
        planId:
          type: string
          format: uuid
        name:
          type: string
        appLimit:
          type: integer
          format: int64
        envLimit:
          type: integer
          format: int64
        componentLimit:
          type: integer
          format: int64
        workerLimit:
          type: integer
          format: int64
        storageLimit:
          type: integer
          format: int64
        monthlyGasLimit:
          type: integer
          format: int64
        monthlyUploadLimit:
          type: integer
          format: int64
      required:
      - planId
      - name
      - appLimit
      - envLimit
      - componentLimit
      - workerLimit
      - storageLimit
      - monthlyGasLimit
      - monthlyUploadLimit
    PluginInstallation:
      title: PluginInstallation
      type: object
      properties:
        environmentPluginGrantId:
          type: string
          format: uuid
        priority:
          title: |-
            Priority of a given plugin. Plugins with a lower priority will be applied before plugins with a higher priority.
            There can only be a single plugin with a given priority installed to a component.
          description: Plugins will be applied in order of increasing priority
          type: integer
          format: int32
        parameters:
          type: object
          additionalProperties:
            type: string
      required:
      - environmentPluginGrantId
      - priority
      - parameters
    PluginInstallationAction:
      discriminator:
        propertyName: type
        mapping:
          Install: '#/components/schemas/PluginInstallationAction_PluginInstallation'
          Uninstall: '#/components/schemas/PluginInstallationAction_PluginUninstallation'
          Update: '#/components/schemas/PluginInstallationAction_PluginInstallationUpdate'
      type: object
      oneOf:
      - $ref: '#/components/schemas/PluginInstallationAction_PluginInstallation'
      - $ref: '#/components/schemas/PluginInstallationAction_PluginUninstallation'
      - $ref: '#/components/schemas/PluginInstallationAction_PluginInstallationUpdate'
    PluginInstallationAction_PluginInstallation:
      allOf:
      - type: object
        properties:
          type:
            example: Install
            type: string
            enum:
            - Install
        required:
        - type
      - $ref: '#/components/schemas/PluginInstallation'
    PluginInstallationAction_PluginInstallationUpdate:
      allOf:
      - type: object
        properties:
          type:
            example: Update
            type: string
            enum:
            - Update
        required:
        - type
      - $ref: '#/components/schemas/PluginInstallationUpdate'
    PluginInstallationAction_PluginUninstallation:
      allOf:
      - type: object
        properties:
          type:
            example: Uninstall
            type: string
            enum:
            - Uninstall
        required:
        - type
      - $ref: '#/components/schemas/PluginUninstallation'
    PluginInstallationUpdate:
      title: PluginInstallationUpdate
      type: object
      properties:
        pluginPriority:
          title: |-
            Priority of a given plugin. Plugins with a lower priority will be applied before plugins with a higher priority.
            There can only be a single plugin with a given priority installed to a component.
          description: Priority will be used to identify the plugin to update
          type: integer
          format: int32
        newPriority:
          title: |-
            Priority of a given plugin. Plugins with a lower priority will be applied before plugins with a higher priority.
            There can only be a single plugin with a given priority installed to a component.
          type: integer
          format: int32
        newParameters:
          type: object
          additionalProperties:
            type: string
      required:
      - pluginPriority
    PluginRegistrationCreation:
      title: PluginRegistrationCreation
      type: object
      properties:
        name:
          type: string
        version:
          type: string
        description:
          type: string
        icon:
          type: string
          format: bytes
        homepage:
          type: string
        spec:
          $ref: '#/components/schemas/PluginSpecDto'
      required:
      - name
      - version
      - description
      - icon
      - homepage
      - spec
    PluginRegistrationDto:
      title: PluginRegistrationDto
      type: object
      properties:
        id:
          type: string
          format: uuid
        accountId:
          type: string
          format: uuid
        name:
          type: string
        version:
          type: string
        description:
          type: string
        icon:
          type: string
          format: bytes
        homepage:
          type: string
        spec:
          $ref: '#/components/schemas/PluginSpecDto'
      required:
      - id
      - accountId
      - name
      - version
      - description
      - icon
      - homepage
      - spec
    PluginSpecDto:
      discriminator:
        propertyName: type
        mapping:
          ComponentTransformer: '#/components/schemas/PluginSpecDto_ComponentTransformerPluginSpec'
          OplogProcessor: '#/components/schemas/PluginSpecDto_OplogProcessorPluginSpec'
          App: '#/components/schemas/PluginSpecDto_Empty'
          Library: '#/components/schemas/PluginSpecDto_Empty'
      type: object
      oneOf:
      - $ref: '#/components/schemas/PluginSpecDto_ComponentTransformerPluginSpec'
      - $ref: '#/components/schemas/PluginSpecDto_OplogProcessorPluginSpec'
      - $ref: '#/components/schemas/PluginSpecDto_Empty'
      - $ref: '#/components/schemas/PluginSpecDto_Empty'
    PluginSpecDto_ComponentTransformerPluginSpec:
      allOf:
      - type: object
        properties:
          type:
            example: ComponentTransformer
            type: string
            enum:
            - ComponentTransformer
        required:
        - type
      - $ref: '#/components/schemas/ComponentTransformerPluginSpec'
    PluginSpecDto_Empty:
      allOf:
      - type: object
        properties:
          type:
            example: Library
            type: string
            enum:
            - Library
        required:
        - type
      - $ref: '#/components/schemas/Empty'
    PluginSpecDto_OplogProcessorPluginSpec:
      allOf:
      - type: object
        properties:
          type:
            example: OplogProcessor
            type: string
            enum:
            - OplogProcessor
        required:
        - type
      - $ref: '#/components/schemas/OplogProcessorPluginSpec'
    PluginUninstallation:
      title: PluginUninstallation
      type: object
      properties:
        pluginPriority:
          title: |-
            Priority of a given plugin. Plugins with a lower priority will be applied before plugins with a higher priority.
            There can only be a single plugin with a given priority installed to a component.
          description: Priority will be used to identify the plugin to delete
          type: integer
          format: int32
      required:
      - pluginPriority
    ProducerField:
      title: ProducerField
      type: object
      properties:
        name:
          type: string
        values:
          type: array
          items:
            $ref: '#/components/schemas/VersionedName'
      required:
      - name
      - values
    Producers:
      title: Producers
      type: object
      properties:
        fields:
          type: array
          items:
            $ref: '#/components/schemas/ProducerField'
      required:
      - fields
    RouteMethod:
      type: string
      enum:
      - get
      - connect
      - post
      - delete
      - put
      - patch
      - options
      - trace
      - head
    RouteRequestView:
      title: RouteRequestView
      type: object
      properties:
        method:
          $ref: '#/components/schemas/RouteMethod'
        path:
          type: string
        binding:
          $ref: '#/components/schemas/GatewayBindingRequestView'
        security:
          type: string
      required:
      - method
      - path
      - binding
    RouteResponseView:
      title: RouteResponseView
      type: object
      properties:
        method:
          $ref: '#/components/schemas/RouteMethod'
        path:
          type: string
        binding:
          $ref: '#/components/schemas/GatewayBindingResponseView'
        security:
          type: string
      required:
      - method
      - path
      - binding
    SecuritySchemeResponseView:
      title: SecuritySchemeResponseView
      type: object
      properties:
        providerType:
          $ref: '#/components/schemas/Provider'
        schemeIdentifier:
          type: string
        clientId:
          type: string
        clientSecret:
          type: string
        redirectUrl:
          type: string
        scopes:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
      required:
      - providerType
      - schemeIdentifier
      - clientId
      - clientSecret
      - redirectUrl
      - scopes
      - createdAt
    TextDescriptor:
      title: TextDescriptor
      type: object
      properties:
        restrictions:
          type: array
          items:
            $ref: '#/components/schemas/TextType'
    Token:
      title: Token
      type: object
      properties:
        id:
          type: string
          format: uuid
        accountId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        expiresAt:
          type: string
          format: date-time
      required:
      - id
      - accountId
      - createdAt
      - expiresAt
    TokenCreation:
      title: TokenCreation
      type: object
      properties:
        expiresAt:
          type: string
          format: date-time
      required:
      - expiresAt
    TokenWithSecret:
      title: TokenWithSecret
      type: object
      properties:
        id:
          type: string
          format: uuid
        secret:
          type: string
          format: uuid
        accountId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        expiresAt:
          type: string
          format: date-time
      required:
      - id
      - secret
      - accountId
      - createdAt
      - expiresAt
    UpdateApiDeploymentRequest:
      title: UpdateApiDeploymentRequest
      type: object
      properties:
        apiDefinitions:
          type: array
          items:
            type: string
            format: uuid
      required:
      - apiDefinitions
    UpdateApiDomainRequest:
      title: UpdateApiDomainRequest
      type: object
    UpdateCertificateRequest:
      title: UpdateCertificateRequest
      type: object
      properties:
        certificateBody:
          type: string
        certificatePrivateKey:
          type: string
      required:
      - certificateBody
      - certificatePrivateKey
    UpdateHttpApiDefinitionRequest:
      title: UpdateHttpApiDefinitionRequest
      type: object
      properties:
        routes:
          type: array
          items:
            $ref: '#/components/schemas/RouteRequestView'
        version:
          type: string
      required:
      - routes
      - version
    VersionedName:
      title: VersionedName
      type: object
      properties:
        name:
          type: string
        version:
          type: string
      required:
      - name
      - version
    WasmRpcTarget:
      title: WasmRpcTarget
      type: object
      properties:
        interfaceName:
          type: string
        componentName:
          type: string
        componentType:
          $ref: '#/components/schemas/ComponentType'
      required:
      - interfaceName
      - componentName
      - componentType
  securitySchemes:
    Cookie:
      type: apiKey
      in: cookie
      name: GOLEM_SESSION
    Token:
      type: http
      scheme: bearer
tags:
- name: Account
  description: The account API allows users to query and manipulate their own account data.
- name: AccountSummary
- name: ApiCertificate
- name: ApiDefinition
- name: ApiDeployment
- name: ApiDomain
- name: ApiSecurity
- name: Component
- name: Debugging
- name: Grant
- name: HealthCheck
- name: Limits
  description: The limits API allows users to query their current resource limits.
- name: Login
  description: The login endpoints are implementing an OAuth2 flow.
- name: Plugin
- name: Project
  description: |-
    Projects are groups of components and their workers, providing both a separate namespace for these entities and allows sharing between accounts.

    Every account has a default project which is assumed when no specific project ID is passed in some component and worker related APIs.
- name: ProjectGrant
  description: |-
    Projects can have grants providing access to other accounts than the project's owner.

    The project grant API allows listing, creating and deleting such grants. What the grants allow exactly are defined by policies, covered by the Project policy API.
- name: ProjectPolicy
  description: Project policies describe a set of actions one account can perform when it was associated with a grant for a project.
- name: Token
  description: The token API allows creating custom access tokens for the Golem Cloud REST API to be used by tools and services.
- name: Worker
- name: AgentTypes
  description: API working on registered agent types
- name: Application
- name: Deployment
- name: Environment
- name: EnvironmentPluginGrants
- name: EnvironmentShares
- name: RegistryService
