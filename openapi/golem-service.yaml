openapi: 3.0.0
info:
  title: Golem API
  version: '1.0'
paths:
  /healthcheck:
    get:
      tags:
      - HealthCheck
      operationId: healthcheck
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/HealthcheckResponse'
  /version:
    get:
      tags:
      - HealthCheck
      operationId: version
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/VersionInfo'
  /v1/accounts/{account_id}/apps:
    get:
      tags:
      - RegistryService
      - Account
      - Application
      summary: Get all applications in the account
      operationId: get_applications_in_account
      parameters:
      - in: path
        name: account_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_Application'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
    post:
      tags:
      - RegistryService
      - Account
      - Application
      summary: Create an application in the account
      operationId: create_application
      parameters:
      - in: path
        name: account_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/NewApplicationData'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Application'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/accounts/{account_id}/apps/{application_name}:
    get:
      tags:
      - RegistryService
      - Account
      - Application
      summary: Get application in the account by name
      operationId: get_account_application
      parameters:
      - in: path
        name: account_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      - in: path
        name: application_name
        required: true
        deprecated: false
        schema:
          type: string
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Application'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/accounts/{account_id}/grants:
    get:
      tags:
      - RegistryService
      - Account
      - Grant
      operationId: get_account_grants
      parameters:
      - in: path
        name: account_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/accounts/{account_id}/grants/{role}:
    get:
      tags:
      - RegistryService
      - Account
      - Grant
      operationId: get_account_grant
      parameters:
      - in: path
        name: account_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      - in: path
        name: role
        required: true
        deprecated: false
        schema:
          $ref: '#/components/schemas/Role'
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Role'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
    put:
      tags:
      - RegistryService
      - Account
      - Grant
      operationId: create_account_grant
      parameters:
      - in: path
        name: account_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      - in: path
        name: role
        required: true
        deprecated: false
        schema:
          $ref: '#/components/schemas/Role'
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Role'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
    delete:
      tags:
      - RegistryService
      - Account
      - Grant
      operationId: delete_account_grant
      parameters:
      - in: path
        name: account_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      - in: path
        name: role
        required: true
        deprecated: false
        schema:
          $ref: '#/components/schemas/Role'
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Empty'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/accounts/{account_id}/tokens:
    get:
      tags:
      - RegistryService
      - Account
      - Token
      summary: Get all tokens
      description: |-
        Gets all created tokens of an account.
        The format of each element is the same as the data object in the oauth2 endpoint's response.
      operationId: get_account_tokens
      parameters:
      - in: path
        name: account_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Token'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
    post:
      tags:
      - RegistryService
      - Account
      - Token
      summary: Create new token
      description: |
        Creates a new token with a given expiration date.
        The response not only contains the token data but also the secret which can be passed as a bearer token to the Authorization header to the Golem Cloud REST API.
      operationId: create_token
      parameters:
      - in: path
        name: account_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/CreateTokenRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/TokenWithSecret'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/accounts:
    get:
      tags:
      - RegistryService
      - Account
      summary: Find accounts
      description: Find matching accounts. Only your own account or accounts you have at least one grant from will be returned
      operationId: find_accounts
      parameters:
      - in: query
        name: email
        deprecated: false
        schema:
          type: string
        explode: true
        style: form
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_Account'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
    post:
      tags:
      - RegistryService
      - Account
      summary: Create account
      description: Create a new account. The response is the created account data.
      operationId: create_account
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/NewAccountData'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Account'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/accounts/{account_id}:
    get:
      tags:
      - RegistryService
      - Account
      summary: Get account
      description: Retrieve an account for a given Account ID
      operationId: get_account
      parameters:
      - in: path
        name: account_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Account'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
    put:
      tags:
      - RegistryService
      - Account
      summary: Update account
      description: |-
        Allows the user to change the account details such as name and email.

        Changing the planId is not allowed and the request will be rejected.
        The response is the updated account data.
      operationId: update_account
      parameters:
      - in: path
        name: account_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/NewAccountData'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Account'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
    delete:
      tags:
      - RegistryService
      - Account
      summary: Delete account
      description: Delete an account.
      operationId: delete_account
      parameters:
      - in: path
        name: account_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Empty'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/accounts/{account_id}/plan:
    get:
      tags:
      - RegistryService
      - Account
      summary: Get account's plan
      operationId: get_account_plan
      parameters:
      - in: path
        name: account_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Plan'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/api-definitions/{api_definition_id}:
    get:
      tags:
      - RegistryService
      - ApiDefinition
      summary: Get api-definition by id
      operationId: get_api_definition
      parameters:
      - in: path
        name: api_definition_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/HttpApiDefinitionResponseView'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
    patch:
      tags:
      - RegistryService
      - ApiDefinition
      summary: update api-definition
      operationId: update_api_definition
      parameters:
      - in: path
        name: api_definition_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/UpdateHttpApiDefinitionRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/HttpApiDefinitionResponseView'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/api-definitions/{api_definition_id}/revisions:
    get:
      tags:
      - RegistryService
      - ApiDefinition
      summary: Get revisions of the api definition
      operationId: get_api_definition_revisions
      parameters:
      - in: path
        name: api_definition_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_HttpApiDefinitionResponseView'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/api-definitions/{api_definition_id}/revisions/{revision}:
    get:
      tags:
      - RegistryService
      - ApiDefinition
      summary: Get specific revision of an api definition
      operationId: get_api_definition_revision
      parameters:
      - in: path
        name: api_definition_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      - in: path
        name: revision
        required: true
        deprecated: false
        schema:
          type: integer
          format: uint64
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/HttpApiDefinitionResponseView'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/api-deployments/{api_deployment_id}:
    get:
      tags:
      - RegistryService
      - ApiDeployment
      summary: Get an api-deployment by id
      operationId: get_api_deployment
      parameters:
      - in: path
        name: api_deployment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ApiDeployment'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
    patch:
      tags:
      - RegistryService
      - ApiDeployment
      summary: Update an api-deployment
      operationId: update_api_deployment
      parameters:
      - in: path
        name: api_deployment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/UpdateApiDeploymentRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ApiDeployment'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/api-deployments/{api_deployment_id}/revisions:
    get:
      tags:
      - RegistryService
      - ApiDeployment
      summary: Get all revisions for an api-deployment
      operationId: get_api_deployment_revisions
      parameters:
      - in: path
        name: api_deployment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_ApiDeployment'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/api-deployments/{api_deployment_id}/revisions/{revision}:
    get:
      tags:
      - RegistryService
      - ApiDeployment
      summary: Get specific revision an api-deployment
      operationId: get_api_deployment_revision
      parameters:
      - in: path
        name: api_deployment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      - in: path
        name: revision
        required: true
        deprecated: false
        schema:
          type: integer
          format: uint64
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ApiDeployment'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/domains/{domain_id}:
    get:
      tags:
      - RegistryService
      - ApiDomain
      summary: Get api domain by id
      operationId: get_domain
      parameters:
      - in: path
        name: domain_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ApiDomain'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
    patch:
      tags:
      - RegistryService
      - ApiDomain
      summary: Update an api-domain
      operationId: update_domain
      parameters:
      - in: path
        name: domain_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/UpdateApiDomainRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ApiDomain'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/domains/{domain_id}/revisions:
    get:
      tags:
      - RegistryService
      - ApiDomain
      summary: Get all revisions of an api-domain
      operationId: get_domain_revisions
      parameters:
      - in: path
        name: domain_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_ApiDomain'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/apps/{application_id}:
    get:
      tags:
      - RegistryService
      - Application
      summary: Get application by id.
      operationId: get_application
      parameters:
      - in: path
        name: application_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_Application'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
    patch:
      tags:
      - RegistryService
      - Application
      summary: Update application by id.
      operationId: update_application
      parameters:
      - in: path
        name: application_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/UpdateApplicationRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_Application'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/apps/{application_id}/envs:
    get:
      tags:
      - RegistryService
      - Application
      - Environment
      summary: List all application environments
      operationId: list_application_environments
      parameters:
      - in: path
        name: application_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_Environment'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
    post:
      tags:
      - RegistryService
      - Application
      - Environment
      summary: Create an application environment
      operationId: create_application_environment
      parameters:
      - in: path
        name: application_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/NewEnvironmentData'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Environment'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/apps/{application_id}/envs/{environment_name}:
    get:
      tags:
      - RegistryService
      - Application
      - Environment
      summary: Get application environment by name
      operationId: get_application_environment
      parameters:
      - in: path
        name: application_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      - in: path
        name: environment_name
        required: true
        deprecated: false
        schema:
          type: string
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Environment'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/certificates/{certificate_id}:
    get:
      tags:
      - RegistryService
      - ApiCertificate
      summary: Get a certificate by id
      operationId: get_certificate
      parameters:
      - in: path
        name: certificate_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/CertificateResponseView'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
    patch:
      tags:
      - RegistryService
      - ApiCertificate
      summary: Update a certificate
      operationId: update_certificate
      parameters:
      - in: path
        name: certificate_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/UpdateCertificateRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/CertificateResponseView'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/certificates/{certificate_id}/revisions:
    get:
      tags:
      - RegistryService
      - ApiCertificate
      summary: Get all revisions of a certificate
      operationId: get_certificate_revisions
      parameters:
      - in: path
        name: certificate_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_CertificateResponseView'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/components/{component_id}:
    get:
      tags:
      - RegistryService
      - Component
      summary: Get a component by id
      operationId: get_component
      parameters:
      - in: path
        name: component_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Component'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
    patch:
      tags:
      - RegistryService
      - Component
      summary: Update a component
      description: The request body is encoded as multipart/form-data containing metadata and the WASM binary.
      operationId: update_component
      parameters:
      - in: path
        name: component_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                metadata:
                  $ref: '#/components/schemas/UpdateComponentRequestMetadata'
                newComponentWasm:
                  type: string
                  format: binary
                newFiles:
                  type: string
                  format: binary
              required:
              - metadata
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Component'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/components/{component_id}/revisions:
    get:
      tags:
      - RegistryService
      - Component
      summary: Get all revisions for a component
      operationId: get_component_revisions
      parameters:
      - in: path
        name: component_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_Component'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/components/{component_id}/revisions/{revision}:
    get:
      tags:
      - RegistryService
      - Component
      summary: Get specific revision of a component
      operationId: get_component_revision
      parameters:
      - in: path
        name: component_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      - in: path
        name: revision
        required: true
        deprecated: false
        schema:
          type: integer
          format: uint64
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Component'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/components/{component_id}/revisions/{revision}/wasm:
    get:
      tags:
      - RegistryService
      - Component
      summary: Get the component wasm binary of a specific revision
      operationId: get_component_wasm
      parameters:
      - in: path
        name: component_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      - in: path
        name: revision
        required: true
        deprecated: false
        schema:
          type: integer
          format: uint64
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/envs/{environment_id}/api-definitions:
    get:
      tags:
      - RegistryService
      - Environment
      - ApiDefinition
      summary: Get all api-definitions in the environment
      operationId: get_environment_api_definitions
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_HttpApiDefinitionResponseView'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
    post:
      tags:
      - RegistryService
      - Environment
      - ApiDefinition
      summary: Create a new api-definition in the environment
      operationId: create_api_definition
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/CreateHttpApiDefinitionRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/HttpApiDefinitionResponseView'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/envs/{environment_id}/api-definitions/{api_definition_name}:
    get:
      tags:
      - RegistryService
      - Environment
      - ApiDefinition
      summary: Get api-definition by name
      operationId: get_environment_api_definition
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      - in: path
        name: api_definition_name
        required: true
        deprecated: false
        schema:
          type: string
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/HttpApiDefinitionResponseView'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/envs/{environment_id}/deployments/{deployment_revision_id}/api-definitions:
    get:
      tags:
      - RegistryService
      - Environment
      - ApiDefinition
      - Deployment
      summary: Get all api-definitions in a specific deployment
      operationId: get_deployment_api_definitions
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      - in: path
        name: deployment_revision_id
        required: true
        deprecated: false
        schema:
          type: integer
          format: uint64
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_HttpApiDefinitionResponseView'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/envs/{environment_id}/deployments/{deployment_revision_id}/api-definitions/{api_definition_name}:
    get:
      tags:
      - RegistryService
      - Environment
      - ApiDefinition
      - Deployment
      summary: Get api-definition in a deployment by name
      operationId: get_deployment_api_definition
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      - in: path
        name: deployment_revision_id
        required: true
        deprecated: false
        schema:
          type: integer
          format: uint64
        explode: true
        style: simple
      - in: path
        name: api_definition_name
        required: true
        deprecated: false
        schema:
          type: string
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/HttpApiDefinitionResponseView'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/envs/{environment_id}/api-deployments:
    get:
      tags:
      - RegistryService
      - Environment
      - ApiDeployment
      summary: Get all api-deployments in the environment
      operationId: get_environment_api_deployments
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_ApiDeployment'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
    post:
      tags:
      - RegistryService
      - Environment
      - ApiDeployment
      summary: Create a new api deployment
      operationId: create_api_deployment
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/CreateApiDeploymentRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ApiDeployment'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/envs/{environment_id}/api-deployments/{site}:
    get:
      tags:
      - RegistryService
      - Environment
      - ApiDeployment
      summary: Get api-deployment by site
      operationId: get_environment_api_deployment
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      - in: path
        name: site
        required: true
        deprecated: false
        schema:
          type: string
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ApiDeployment'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/envs/{environment_id}/deployments/{deployment_revision_id}/api-deployments:
    get:
      tags:
      - RegistryService
      - Environment
      - ApiDeployment
      - Deployment
      summary: Get all api-deployments in a specific deployment
      operationId: get_deployment_api_deployments
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      - in: path
        name: deployment_revision_id
        required: true
        deprecated: false
        schema:
          type: integer
          format: uint64
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_ApiDeployment'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/envs/{environment_id}/deployments/{deployment_revision_id}/api-deployments/{site}:
    get:
      tags:
      - RegistryService
      - Environment
      - ApiDeployment
      - Deployment
      summary: Get api-deployment in a deployment by site
      operationId: get_deployment_api_deployment
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      - in: path
        name: deployment_revision_id
        required: true
        deprecated: false
        schema:
          type: integer
          format: uint64
        explode: true
        style: simple
      - in: path
        name: site
        required: true
        deprecated: false
        schema:
          type: string
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ApiDeployment'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/envs/{environment_id}/domains:
    get:
      tags:
      - RegistryService
      - Environment
      - ApiDomain
      summary: Get all API domains
      operationId: get_domains
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_ApiDomain'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
    post:
      tags:
      - RegistryService
      - Environment
      - ApiDomain
      summary: Create a new api-domain in the environment
      operationId: create_domain
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/CreateApiDomainRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ApiDomain'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/envs/{environment_id}/domains/{domain}:
    get:
      tags:
      - RegistryService
      - Environment
      - ApiDomain
      summary: Get an api-domain in the environment
      operationId: get_environment_domain
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      - in: path
        name: domain
        required: true
        deprecated: false
        schema:
          type: string
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ApiDomain'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/envs/{environment_id}/certificates:
    get:
      tags:
      - RegistryService
      - Environment
      - ApiCertificate
      summary: Get all certificates in this environment
      operationId: get_environment_certificates
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_CertificateResponseView'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
    post:
      tags:
      - RegistryService
      - Environment
      - ApiCertificate
      summary: Creates a new certificate
      description: |-
        A certificate is associated with a given Golem project and domain, and consists of
        a key pair.

        The created certificate will be associated with a certificate ID returned by this endpoint.
      operationId: create_environment_certificate
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/CreateCertificateRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/CertificateResponseView'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/envs/{environment_id}/certificates/{certificate_name}:
    get:
      tags:
      - RegistryService
      - Environment
      - ApiCertificate
      summary: Get a certificate in this environment
      operationId: get_environment_certificate
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      - in: path
        name: certificate_name
        required: true
        deprecated: false
        schema:
          type: string
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/CertificateResponseView'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/envs/{environment_id}/components:
    get:
      tags:
      - RegistryService
      - Environment
      - Component
      summary: Get all components in the environment
      operationId: get_environment_components
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_Component'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
    post:
      tags:
      - RegistryService
      - Environment
      - Component
      summary: Create a new component in the environment
      description: The request body is encoded as multipart/form-data containing metadata and the WASM binary.
      operationId: create_component
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                metadata:
                  $ref: '#/components/schemas/CreateComponentRequestMetadata'
                componentWasm:
                  type: string
                  format: binary
                files:
                  type: string
                  format: binary
              required:
              - metadata
              - componentWasm
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Component'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/envs/{environment_id}/components/{component_name}:
    get:
      tags:
      - RegistryService
      - Environment
      - Component
      summary: Get a component in the environment by name
      operationId: get_environment_component
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      - in: path
        name: component_name
        required: true
        deprecated: false
        schema:
          type: string
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Component'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/envs/{environment_id}/deployments/{deployment_revision_id}/components:
    get:
      tags:
      - RegistryService
      - Environment
      - Component
      - Deployment
      summary: Get all components in a specific deployment
      operationId: get_deployment_components
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      - in: path
        name: deployment_revision_id
        required: true
        deprecated: false
        schema:
          type: integer
          format: uint64
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_Component'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/envs/{environment_id}/deployments/{deployment_revision_id}/components/{component_name}:
    get:
      tags:
      - RegistryService
      - Environment
      - Component
      - Deployment
      summary: Get component in a deployment by name
      operationId: get_deployment_component
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      - in: path
        name: deployment_revision_id
        required: true
        deprecated: false
        schema:
          type: integer
          format: uint64
        explode: true
        style: simple
      - in: path
        name: component_name
        required: true
        deprecated: false
        schema:
          type: string
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Component'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/envs/{environment_id}:
    get:
      tags:
      - RegistryService
      - Environment
      summary: Get environment by id.
      operationId: get_environment
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Environment'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
    patch:
      tags:
      - RegistryService
      - Environment
      summary: Update environment by id.
      operationId: update_environment
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/UpdateEnvironmentRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Environment'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/envs/{environment_id}/current-deployment/hash:
    get:
      tags:
      - RegistryService
      - Environment
      summary: Get hash of the currently deployed environment
      operationId: get_deployed_environment_hash
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EnvironmentHash'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/envs/{environment_id}/current-deployment/summary:
    get:
      tags:
      - RegistryService
      - Environment
      summary: Get summary of the currently deployed environment
      operationId: get_deployed_environment_summary
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EnvironmentSummary'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/envs/{environment_id}/plan:
    get:
      tags:
      - RegistryService
      - Environment
      summary: Get the current deployment plan. This is equivalent to a summary of the current staging area.
      operationId: get_environment_deployment_plan
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EnvironmentSummary'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/envs/{environment_id}/deployments:
    get:
      tags:
      - RegistryService
      - Environment
      - Deployment
      summary: Get all deployments in this environment
      operationId: get_deployments
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_Deployment'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
    post:
      tags:
      - RegistryService
      - Environment
      - Deployment
      summary: Deploy the current staging area of this environment
      operationId: deploy_environment
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/DeployEnvironmentRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Deployment'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/envs/{environment_id}/security-schemes:
    get:
      tags:
      - RegistryService
      - Environment
      - ApiSecurity
      summary: Get all security schemes in the environment
      operationId: get_environment_security_schemes
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_SecuritySchemeResponseView'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
    post:
      tags:
      - RegistryService
      - Environment
      - ApiSecurity
      summary: Create a new security scheme in the environment
      operationId: create_environment_security_scheme
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/CreateSecuritySchemeRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/SecuritySchemeResponseView'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/envs/{environment_id}/security-schemes/{security_scheme_name}:
    get:
      tags:
      - RegistryService
      - Environment
      - ApiSecurity
      summary: Get a security scheme
      description: Get a security scheme by name
      operationId: get_environment_security_scheme
      parameters:
      - in: path
        name: environment_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      - in: path
        name: security_scheme_name
        required: true
        deprecated: false
        schema:
          type: string
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/SecuritySchemeResponseView'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/login/v1/oauth2:
    post:
      tags:
      - RegistryService
      - Login
      summary: Acquire token with OAuth2 authorization
      description: |
        Gets a token by authorizing with an external OAuth2 provider. Currently only github is supported.

        In the response:
        - `id` is the identifier of the token itself
        - `accountId` is the account's identifier, can be used on the account API
        - `secret` is the secret key to be sent in the Authorization header as a bearer token for all the other endpoints
      operationId: login_oauth2
      parameters:
      - in: query
        name: provider
        description: Currently only `github` is supported.
        required: true
        deprecated: false
        schema:
          $ref: '#/components/schemas/OAuth2Provider'
        explode: true
        style: form
      - in: query
        name: access-token
        description: OAuth2 access token
        required: true
        deprecated: false
        schema:
          type: string
        explode: true
        style: form
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/TokenWithSecret'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
  /v1/login/token:
    get:
      tags:
      - RegistryService
      - Login
      summary: Get information about a token
      description: |-
        Gets information about a token that is selected by the secret key passed in the Authorization header.
        The JSON is the same as the data object in the oauth2 endpoint's response.
      operationId: current_login_token
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Token'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/login/oauth2/device/start:
    post:
      tags:
      - RegistryService
      - Login
      summary: Start OAuth2 interactive flow
      description: |-
        Starts an interactive authorization flow.
        The user must open the returned url and enter the userCode in a form before the expires deadline.
        Then the finish GitHub OAuth2 interactive flow endpoint must be called with the encoded session to finish the flow.
      operationId: start_oauth2_device_flow
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/OAuth2DeviceFlowStartRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/OAuth2DeviceflowData'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
  /v1/login/oauth2/device/complete:
    post:
      tags:
      - RegistryService
      - Login
      summary: Finish GitHub OAuth2 interactive flow
      description: |-
        Finishes an interactive authorization flow. The returned JSON is equivalent to the oauth2 endpoint's response.
        Returns a JSON string containing the encodedSession from the start endpoint's response.
      operationId: complete_oauth2_device_flow
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              type: string
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/TokenWithSecret'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
  /v1/login/oauth2/web/authorize:
    get:
      tags:
      - RegistryService
      - Login
      summary: Initiate OAuth2 Web Flow
      description: Starts the OAuth2 web flow authorization process by returning the authorization URL for the given provider.
      operationId: start_oauth2_webflow
      parameters:
      - in: query
        name: provider
        description: Currently only `github` is supported.
        required: true
        deprecated: false
        schema:
          $ref: '#/components/schemas/OAuth2Provider'
        explode: true
        style: form
      - in: query
        name: redirect
        description: The redirect URL to redirect to after the user has authorized the application
        deprecated: false
        schema:
          type: string
        explode: true
        style: form
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/OAuth2WebflowData'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
  /v1/login/oauth2/web/callback:
    get:
      tags:
      - RegistryService
      - Login
      summary: OAuth2 Web Flow callback
      description: |-
        This endpoint handles the callback from the provider after the user has authorized the application.
        It exchanges the code for an access token and then uses that to log the user in.
      operationId: submit_oauth2_webflow_callback
      parameters:
      - in: query
        name: code
        description: The authorization code returned by GitHub
        required: true
        deprecated: false
        schema:
          type: string
        explode: true
        style: form
      - in: query
        name: state
        description: The state parameter for CSRF protection
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: form
      responses:
        '302':
          description: Redirect to the given URL specified in the web flow start
          headers:
            LOCATION:
              style: simple
              required: true
              deprecated: false
              schema:
                type: string
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Empty'
        '200':
          description: OAuth flow has completed
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Empty'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
  /v1/login/oauth2/web/poll:
    get:
      tags:
      - RegistryService
      - Login
      summary: Poll for OAuth2 Web Flow token
      description: |-
        This endpoint is used by clients to poll for the token after the user has authorized the application via the web flow.
        A given state might only be exchanged for a token once. Any further attempts to exchange the state will fail.
      operationId: poll_oauth2_webflow
      parameters:
      - in: query
        name: state
        description: The state parameter for identifying the session
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: form
      responses:
        '200':
          description: OAuth flow has completed
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/TokenWithSecret'
        '202':
          description: OAuth flow is pending
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Empty'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
  /v1/plugins:
    get:
      tags:
      - RegistryService
      - Plugin
      summary: Lists all the registered plugins (including all versions of each).
      operationId: list_plugins
      parameters:
      - in: query
        name: scope
        required: true
        deprecated: false
        schema:
          $ref: '#/components/schemas/PluginScope'
        explode: true
        style: form
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_PluginDefinition'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
    post:
      tags:
      - RegistryService
      - Plugin
      summary: Registers a new plugin
      operationId: create_plugin
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/CreatePluginRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Empty'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/plugins/{plugin_id}:
    get:
      tags:
      - RegistryService
      - Plugin
      summary: Gets a registered plugin by its id
      operationId: get_plugin
      parameters:
      - in: path
        name: plugin_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/PluginDefinition'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
    delete:
      tags:
      - RegistryService
      - Plugin
      summary: Deletes a registered plugin by its id
      operationId: delete_plugin
      parameters:
      - in: path
        name: plugin_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Empty'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/library-plugins:
    post:
      tags:
      - RegistryService
      - Plugin
      summary: Registers a new library plugin
      operationId: create_library_plugin
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                metadata:
                  $ref: '#/components/schemas/CreateLibraryPluginRequestMetadata'
                icon:
                  type: string
                  format: binary
                pluginWasm:
                  type: string
                  format: binary
              required:
              - metadata
              - icon
              - pluginWasm
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Empty'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/app-plugins:
    post:
      tags:
      - RegistryService
      - Plugin
      summary: Registers a new app plugin
      operationId: create_app_plugin
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                metadata:
                  $ref: '#/components/schemas/CreateAppPluginRequestMetadata'
                icon:
                  type: string
                  format: binary
                pluginWasm:
                  type: string
                  format: binary
              required:
              - metadata
              - icon
              - pluginWasm
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Empty'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/security-schemes/{security_scheme_id}:
    get:
      tags:
      - RegistryService
      - ApiSecurity
      summary: Get api security scheme by id
      operationId: get_security_scheme
      parameters:
      - in: path
        name: security_scheme_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/SecuritySchemeResponseView'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/security-schemes/{security_scheme_id}/revisions:
    get:
      tags:
      - RegistryService
      - ApiSecurity
      summary: Get all revisions of the security scheme
      operationId: get_security_scheme_revisions
      parameters:
      - in: path
        name: security_scheme_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Page_SecuritySchemeResponseView'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
  /v1/tokens/{token_id}:
    get:
      tags:
      - RegistryService
      - Token
      summary: Get token by id
      operationId: get_token
      parameters:
      - in: path
        name: token_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Token'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
    delete:
      tags:
      - RegistryService
      - Token
      summary: Delete a token
      description: Deletes a previously created token given by its identifier.
      operationId: delete_token
      parameters:
      - in: path
        name: token_id
        required: true
        deprecated: false
        schema:
          type: string
          format: uuid
        explode: true
        style: simple
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Empty'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Forbidden Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Entity not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: Limits of the plan exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
components:
  schemas:
    Account:
      title: Account
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
        planId:
          type: string
          format: uuid
      required:
      - id
      - name
      - email
      - planId
    AgentConstructor:
      title: AgentConstructor
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        promptHint:
          type: string
        inputSchema:
          $ref: '#/components/schemas/DataSchema'
      required:
      - description
      - inputSchema
    AgentDependency:
      title: AgentDependency
      type: object
      properties:
        typeName:
          type: string
        description:
          type: string
        constructor:
          $ref: '#/components/schemas/AgentConstructor'
        methods:
          type: array
          items:
            $ref: '#/components/schemas/AgentMethod'
      required:
      - typeName
      - constructor
      - methods
    AgentMethod:
      title: AgentMethod
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        promptHint:
          type: string
        inputSchema:
          $ref: '#/components/schemas/DataSchema'
        outputSchema:
          $ref: '#/components/schemas/DataSchema'
      required:
      - name
      - description
      - inputSchema
      - outputSchema
    AgentType:
      title: AgentType
      type: object
      properties:
        typeName:
          type: string
        description:
          type: string
        constructor:
          $ref: '#/components/schemas/AgentConstructor'
        methods:
          type: array
          items:
            $ref: '#/components/schemas/AgentMethod'
        dependencies:
          type: array
          items:
            $ref: '#/components/schemas/AgentDependency'
      required:
      - typeName
      - description
      - constructor
      - methods
      - dependencies
    AnalysedExport:
      discriminator:
        propertyName: type
        mapping:
          Function: '#/components/schemas/AnalysedExport_AnalysedFunction'
          Instance: '#/components/schemas/AnalysedExport_AnalysedInstance'
      type: object
      oneOf:
      - $ref: '#/components/schemas/AnalysedExport_AnalysedFunction'
      - $ref: '#/components/schemas/AnalysedExport_AnalysedInstance'
    AnalysedExport_AnalysedFunction:
      allOf:
      - type: object
        properties:
          type:
            example: Function
            type: string
            enum:
            - Function
        required:
        - type
      - $ref: '#/components/schemas/AnalysedFunction'
    AnalysedExport_AnalysedInstance:
      allOf:
      - type: object
        properties:
          type:
            example: Instance
            type: string
            enum:
            - Instance
        required:
        - type
      - $ref: '#/components/schemas/AnalysedInstance'
    AnalysedFunction:
      title: AnalysedFunction
      type: object
      properties:
        name:
          type: string
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/AnalysedFunctionParameter'
        result:
          $ref: '#/components/schemas/AnalysedFunctionResult'
      required:
      - name
      - parameters
    AnalysedFunctionParameter:
      title: AnalysedFunctionParameter
      type: object
      properties:
        name:
          type: string
        typ:
          $ref: '#/components/schemas/AnalysedType'
      required:
      - name
      - typ
    AnalysedFunctionResult:
      title: AnalysedFunctionResult
      type: object
      properties:
        typ:
          $ref: '#/components/schemas/AnalysedType'
      required:
      - typ
    AnalysedInstance:
      title: AnalysedInstance
      type: object
      properties:
        name:
          type: string
        functions:
          type: array
          items:
            $ref: '#/components/schemas/AnalysedFunction'
      required:
      - name
      - functions
    AnalysedResourceMode:
      type: string
      enum:
      - Owned
      - Borrowed
    AnalysedType:
      discriminator:
        propertyName: type
        mapping:
          Variant: '#/components/schemas/AnalysedType_TypeVariant'
          Result: '#/components/schemas/AnalysedType_TypeResult'
          Option: '#/components/schemas/AnalysedType_TypeOption'
          Enum: '#/components/schemas/AnalysedType_TypeEnum'
          Flags: '#/components/schemas/AnalysedType_TypeFlags'
          Record: '#/components/schemas/AnalysedType_TypeRecord'
          Tuple: '#/components/schemas/AnalysedType_TypeTuple'
          List: '#/components/schemas/AnalysedType_TypeList'
          Str: '#/components/schemas/AnalysedType_TypeStr'
          Chr: '#/components/schemas/AnalysedType_TypeChr'
          F64: '#/components/schemas/AnalysedType_TypeF64'
          F32: '#/components/schemas/AnalysedType_TypeF32'
          U64: '#/components/schemas/AnalysedType_TypeU64'
          S64: '#/components/schemas/AnalysedType_TypeS64'
          U32: '#/components/schemas/AnalysedType_TypeU32'
          S32: '#/components/schemas/AnalysedType_TypeS32'
          U16: '#/components/schemas/AnalysedType_TypeU16'
          S16: '#/components/schemas/AnalysedType_TypeS16'
          U8: '#/components/schemas/AnalysedType_TypeU8'
          S8: '#/components/schemas/AnalysedType_TypeS8'
          Bool: '#/components/schemas/AnalysedType_TypeBool'
          Handle: '#/components/schemas/AnalysedType_TypeHandle'
      type: object
      oneOf:
      - $ref: '#/components/schemas/AnalysedType_TypeVariant'
      - $ref: '#/components/schemas/AnalysedType_TypeResult'
      - $ref: '#/components/schemas/AnalysedType_TypeOption'
      - $ref: '#/components/schemas/AnalysedType_TypeEnum'
      - $ref: '#/components/schemas/AnalysedType_TypeFlags'
      - $ref: '#/components/schemas/AnalysedType_TypeRecord'
      - $ref: '#/components/schemas/AnalysedType_TypeTuple'
      - $ref: '#/components/schemas/AnalysedType_TypeList'
      - $ref: '#/components/schemas/AnalysedType_TypeStr'
      - $ref: '#/components/schemas/AnalysedType_TypeChr'
      - $ref: '#/components/schemas/AnalysedType_TypeF64'
      - $ref: '#/components/schemas/AnalysedType_TypeF32'
      - $ref: '#/components/schemas/AnalysedType_TypeU64'
      - $ref: '#/components/schemas/AnalysedType_TypeS64'
      - $ref: '#/components/schemas/AnalysedType_TypeU32'
      - $ref: '#/components/schemas/AnalysedType_TypeS32'
      - $ref: '#/components/schemas/AnalysedType_TypeU16'
      - $ref: '#/components/schemas/AnalysedType_TypeS16'
      - $ref: '#/components/schemas/AnalysedType_TypeU8'
      - $ref: '#/components/schemas/AnalysedType_TypeS8'
      - $ref: '#/components/schemas/AnalysedType_TypeBool'
      - $ref: '#/components/schemas/AnalysedType_TypeHandle'
    AnalysedType_TypeBool:
      allOf:
      - type: object
        properties:
          type:
            example: Bool
            type: string
            enum:
            - Bool
        required:
        - type
      - $ref: '#/components/schemas/TypeBool'
    AnalysedType_TypeChr:
      allOf:
      - type: object
        properties:
          type:
            example: Chr
            type: string
            enum:
            - Chr
        required:
        - type
      - $ref: '#/components/schemas/TypeChr'
    AnalysedType_TypeEnum:
      allOf:
      - type: object
        properties:
          type:
            example: Enum
            type: string
            enum:
            - Enum
        required:
        - type
      - $ref: '#/components/schemas/TypeEnum'
    AnalysedType_TypeF32:
      allOf:
      - type: object
        properties:
          type:
            example: F32
            type: string
            enum:
            - F32
        required:
        - type
      - $ref: '#/components/schemas/TypeF32'
    AnalysedType_TypeF64:
      allOf:
      - type: object
        properties:
          type:
            example: F64
            type: string
            enum:
            - F64
        required:
        - type
      - $ref: '#/components/schemas/TypeF64'
    AnalysedType_TypeFlags:
      allOf:
      - type: object
        properties:
          type:
            example: Flags
            type: string
            enum:
            - Flags
        required:
        - type
      - $ref: '#/components/schemas/TypeFlags'
    AnalysedType_TypeHandle:
      allOf:
      - type: object
        properties:
          type:
            example: Handle
            type: string
            enum:
            - Handle
        required:
        - type
      - $ref: '#/components/schemas/TypeHandle'
    AnalysedType_TypeList:
      allOf:
      - type: object
        properties:
          type:
            example: List
            type: string
            enum:
            - List
        required:
        - type
      - $ref: '#/components/schemas/TypeList'
    AnalysedType_TypeOption:
      allOf:
      - type: object
        properties:
          type:
            example: Option
            type: string
            enum:
            - Option
        required:
        - type
      - $ref: '#/components/schemas/TypeOption'
    AnalysedType_TypeRecord:
      allOf:
      - type: object
        properties:
          type:
            example: Record
            type: string
            enum:
            - Record
        required:
        - type
      - $ref: '#/components/schemas/TypeRecord'
    AnalysedType_TypeResult:
      allOf:
      - type: object
        properties:
          type:
            example: Result
            type: string
            enum:
            - Result
        required:
        - type
      - $ref: '#/components/schemas/TypeResult'
    AnalysedType_TypeS16:
      allOf:
      - type: object
        properties:
          type:
            example: S16
            type: string
            enum:
            - S16
        required:
        - type
      - $ref: '#/components/schemas/TypeS16'
    AnalysedType_TypeS32:
      allOf:
      - type: object
        properties:
          type:
            example: S32
            type: string
            enum:
            - S32
        required:
        - type
      - $ref: '#/components/schemas/TypeS32'
    AnalysedType_TypeS64:
      allOf:
      - type: object
        properties:
          type:
            example: S64
            type: string
            enum:
            - S64
        required:
        - type
      - $ref: '#/components/schemas/TypeS64'
    AnalysedType_TypeS8:
      allOf:
      - type: object
        properties:
          type:
            example: S8
            type: string
            enum:
            - S8
        required:
        - type
      - $ref: '#/components/schemas/TypeS8'
    AnalysedType_TypeStr:
      allOf:
      - type: object
        properties:
          type:
            example: Str
            type: string
            enum:
            - Str
        required:
        - type
      - $ref: '#/components/schemas/TypeStr'
    AnalysedType_TypeTuple:
      allOf:
      - type: object
        properties:
          type:
            example: Tuple
            type: string
            enum:
            - Tuple
        required:
        - type
      - $ref: '#/components/schemas/TypeTuple'
    AnalysedType_TypeU16:
      allOf:
      - type: object
        properties:
          type:
            example: U16
            type: string
            enum:
            - U16
        required:
        - type
      - $ref: '#/components/schemas/TypeU16'
    AnalysedType_TypeU32:
      allOf:
      - type: object
        properties:
          type:
            example: U32
            type: string
            enum:
            - U32
        required:
        - type
      - $ref: '#/components/schemas/TypeU32'
    AnalysedType_TypeU64:
      allOf:
      - type: object
        properties:
          type:
            example: U64
            type: string
            enum:
            - U64
        required:
        - type
      - $ref: '#/components/schemas/TypeU64'
    AnalysedType_TypeU8:
      allOf:
      - type: object
        properties:
          type:
            example: U8
            type: string
            enum:
            - U8
        required:
        - type
      - $ref: '#/components/schemas/TypeU8'
    AnalysedType_TypeVariant:
      allOf:
      - type: object
        properties:
          type:
            example: Variant
            type: string
            enum:
            - Variant
        required:
        - type
      - $ref: '#/components/schemas/TypeVariant'
    ApiDeployment:
      title: ApiDeployment
      type: object
      properties:
        id:
          type: string
          format: uuid
        revision:
          type: integer
          format: uint64
        apiDefinitions:
          type: array
          items:
            type: string
            format: uuid
        environmentId:
          type: string
          format: uuid
        site:
          type: string
        createdAt:
          type: string
          format: date-time
      required:
      - id
      - revision
      - apiDefinitions
      - environmentId
      - site
      - createdAt
    ApiDomain:
      title: ApiDomain
      type: object
      properties:
        id:
          type: string
          format: uuid
        revision:
          type: integer
          format: uint64
        environmentId:
          type: string
          format: uuid
        domainName:
          type: string
        nameServers:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
      required:
      - id
      - revision
      - environmentId
      - domainName
      - nameServers
      - createdAt
    AppPluginDefinition:
      title: AppPluginDefinition
      type: object
      properties:
        blobStorageKey:
          type: string
      required:
      - blobStorageKey
    Application:
      title: Application
      type: object
      properties:
        id:
          type: string
          format: uuid
        accountId:
          type: string
          format: uuid
        name:
          type: string
      required:
      - id
      - accountId
      - name
    BinaryDescriptor:
      title: BinaryDescriptor
      type: object
      properties:
        restrictions:
          type: array
          items:
            $ref: '#/components/schemas/BinaryType'
    BinaryType:
      title: BinaryType
      type: object
      properties:
        mimeType:
          type: string
      required:
      - mimeType
    CertificateResponseView:
      title: CertificateResponseView
      type: object
      properties:
        environmentId:
          type: string
          format: uuid
        name:
          type: string
        revision:
          type: integer
          format: uint64
        domainName:
          type: string
        createdAt:
          type: string
          format: date-time
      required:
      - environmentId
      - name
      - revision
      - domainName
      - createdAt
    Component:
      title: Component
      type: object
      properties:
        environmentId:
          type: string
          format: uuid
        versionedComponentId:
          $ref: '#/components/schemas/VersionedComponentId'
        componentName:
          type: string
        componentSize:
          type: integer
          format: uint64
        metadata:
          $ref: '#/components/schemas/ComponentMetadata'
        createdAt:
          type: string
          format: date-time
        componentType:
          $ref: '#/components/schemas/ComponentType'
        files:
          type: array
          items:
            $ref: '#/components/schemas/InitialComponentFile'
        installedPlugins:
          type: array
          items:
            $ref: '#/components/schemas/PluginInstallation'
        env:
          type: object
          additionalProperties:
            type: string
        wasmHash:
          type: string
          format: hash
      required:
      - environmentId
      - versionedComponentId
      - componentName
      - componentSize
      - metadata
      - createdAt
      - componentType
      - files
      - installedPlugins
      - env
      - wasmHash
    ComponentFileOptions:
      title: ComponentFileOptions
      type: object
      properties:
        permissions:
          description: Path of the file in the uploaded archive
          allOf:
          - $ref: '#/components/schemas/ComponentFilePermissions'
          - description: Path of the file in the uploaded archive
      required:
      - permissions
    ComponentFilePermissions:
      type: string
      enum:
      - read-only
      - read-write
    ComponentMetadata:
      title: ComponentMetadata
      type: object
      properties:
        exports:
          type: array
          items:
            $ref: '#/components/schemas/AnalysedExport'
        producers:
          type: array
          items:
            $ref: '#/components/schemas/Producers'
        memories:
          type: array
          items:
            $ref: '#/components/schemas/LinearMemory'
        binaryWit:
          type: string
          format: bytes
        rootPackageName:
          type: string
        rootPackageVersion:
          type: string
        dynamicLinking:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/DynamicLinkedInstance'
        agentTypes:
          type: array
          items:
            $ref: '#/components/schemas/AgentType'
      required:
      - exports
      - producers
      - memories
      - binaryWit
      - dynamicLinking
      - agentTypes
    ComponentPluginScope:
      title: ComponentPluginScope
      type: object
      properties:
        componentId:
          type: string
          format: uuid
      required:
      - componentId
    ComponentReference:
      title: ComponentReference
      type: object
      properties:
        name:
          type: string
        revision:
          type: integer
          format: uint64
        id:
          type: string
          format: uuid
      required:
      - name
      - revision
      - id
    ComponentTransformerDefinition:
      title: ComponentTransformerDefinition
      type: object
      properties:
        providedWitPackage:
          type: string
        jsonSchema:
          type: string
        validateUrl:
          type: string
        transformUrl:
          type: string
      required:
      - validateUrl
      - transformUrl
    ComponentType:
      type: string
      enum:
      - Durable
      - Ephemeral
    CorsConfiguration:
      title: CorsConfiguration
      type: object
      properties:
        allowOrigin:
          type: string
        allowMethods:
          type: string
        allowHeaders:
          type: string
        exposeHeaders:
          type: string
        allowCredentials:
          type: boolean
        maxAge:
          type: integer
          format: uint64
      required:
      - allowOrigin
      - allowMethods
      - allowHeaders
    CreateApiDeploymentRequest:
      title: CreateApiDeploymentRequest
      type: object
      properties:
        apiDefinitions:
          type: array
          items:
            type: string
            format: uuid
      required:
      - apiDefinitions
    CreateApiDomainRequest:
      title: CreateApiDomainRequest
      type: object
      properties:
        domainName:
          type: string
      required:
      - domainName
    CreateAppPluginRequestMetadata:
      title: CreateAppPluginRequestMetadata
      type: object
      properties:
        name:
          type: string
        version:
          type: string
        description:
          type: string
        homepage:
          type: string
        scope:
          $ref: '#/components/schemas/PluginScope'
      required:
      - name
      - version
      - description
      - homepage
      - scope
    CreateCertificateRequest:
      title: CreateCertificateRequest
      type: object
      properties:
        name:
          type: string
        domainName:
          type: string
        certificateBody:
          type: string
        certificatePrivateKey:
          type: string
      required:
      - name
      - domainName
      - certificateBody
      - certificatePrivateKey
    CreateComponentRequestMetadata:
      title: CreateComponentRequestMetadata
      type: object
      properties:
        componentName:
          type: string
        componentType:
          $ref: '#/components/schemas/ComponentType'
        fileOptions:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ComponentFileOptions'
        dynamicLinking:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/DynamicLinkedInstance'
        env:
          type: object
          additionalProperties:
            type: string
        agentTypes:
          type: array
          items:
            $ref: '#/components/schemas/AgentType'
      required:
      - componentName
    CreateHttpApiDefinitionRequest:
      title: CreateHttpApiDefinitionRequest
      type: object
      properties:
        routes:
          type: array
          items:
            $ref: '#/components/schemas/RouteRequestView'
      required:
      - routes
    CreateLibraryPluginRequestMetadata:
      title: CreateLibraryPluginRequestMetadata
      type: object
      properties:
        name:
          type: string
        version:
          type: string
        description:
          type: string
        homepage:
          type: string
        scope:
          $ref: '#/components/schemas/PluginScope'
      required:
      - name
      - version
      - description
      - homepage
      - scope
    CreatePluginRequest:
      title: CreatePluginRequest
      type: object
      properties:
        name:
          type: string
        version:
          type: string
        description:
          type: string
        icon:
          type: array
          items:
            type: integer
            format: uint8
        homepage:
          type: string
        specs:
          $ref: '#/components/schemas/PluginTypeSpecificCreation'
        scope:
          $ref: '#/components/schemas/PluginScope'
      required:
      - name
      - version
      - description
      - icon
      - homepage
      - specs
      - scope
    CreateSecuritySchemeRequest:
      title: CreateSecuritySchemeRequest
      type: object
      properties:
        providerType:
          $ref: '#/components/schemas/Provider'
        schemeIdentifier:
          type: string
        clientId:
          type: string
        clientSecret:
          type: string
        redirectUrl:
          type: string
        scopes:
          type: array
          items:
            type: string
      required:
      - providerType
      - schemeIdentifier
      - clientId
      - clientSecret
      - redirectUrl
      - scopes
    CreateTokenRequest:
      title: CreateTokenRequest
      type: object
      properties:
        expiresAt:
          type: string
          format: date-time
      required:
      - expiresAt
    DataSchema:
      discriminator:
        propertyName: type
        mapping:
          Tuple: '#/components/schemas/DataSchema_NamedElementSchemas'
          Multimodal: '#/components/schemas/DataSchema_NamedElementSchemas'
      type: object
      oneOf:
      - $ref: '#/components/schemas/DataSchema_NamedElementSchemas'
      - $ref: '#/components/schemas/DataSchema_NamedElementSchemas'
    DataSchema_NamedElementSchemas:
      allOf:
      - type: object
        properties:
          type:
            example: Multimodal
            type: string
            enum:
            - Multimodal
        required:
        - type
      - $ref: '#/components/schemas/NamedElementSchemas'
    DeployEnvironmentRequest:
      title: DeployEnvironmentRequest
      type: object
    Deployment:
      title: Deployment
      type: object
      properties:
        environmentId:
          type: string
          format: uuid
        deploymentRevisionId:
          type: integer
          format: uint64
      required:
      - environmentId
      - deploymentRevisionId
    DynamicLinkedInstance:
      discriminator:
        propertyName: type
        mapping:
          WasmRpc: '#/components/schemas/DynamicLinkedInstance_DynamicLinkedWasmRpc'
      type: object
      oneOf:
      - $ref: '#/components/schemas/DynamicLinkedInstance_DynamicLinkedWasmRpc'
    DynamicLinkedInstance_DynamicLinkedWasmRpc:
      allOf:
      - type: object
        properties:
          type:
            example: WasmRpc
            type: string
            enum:
            - WasmRpc
        required:
        - type
      - $ref: '#/components/schemas/DynamicLinkedWasmRpc'
    DynamicLinkedWasmRpc:
      title: DynamicLinkedWasmRpc
      type: object
      properties:
        targets:
          description: Maps resource names within the dynamic linked interface to target information
          type: object
          additionalProperties:
            $ref: '#/components/schemas/WasmRpcTarget'
      required:
      - targets
    ElementSchema:
      discriminator:
        propertyName: type
        mapping:
          ComponentModel: '#/components/schemas/ElementSchema_AnalysedType'
          UnstructuredText: '#/components/schemas/ElementSchema_TextDescriptor'
          UnstructuredBinary: '#/components/schemas/ElementSchema_BinaryDescriptor'
      type: object
      oneOf:
      - $ref: '#/components/schemas/ElementSchema_AnalysedType'
      - $ref: '#/components/schemas/ElementSchema_TextDescriptor'
      - $ref: '#/components/schemas/ElementSchema_BinaryDescriptor'
    ElementSchema_AnalysedType:
      allOf:
      - type: object
        properties:
          type:
            example: ComponentModel
            type: string
            enum:
            - ComponentModel
        required:
        - type
      - $ref: '#/components/schemas/AnalysedType'
    ElementSchema_BinaryDescriptor:
      allOf:
      - type: object
        properties:
          type:
            example: UnstructuredBinary
            type: string
            enum:
            - UnstructuredBinary
        required:
        - type
      - $ref: '#/components/schemas/BinaryDescriptor'
    ElementSchema_TextDescriptor:
      allOf:
      - type: object
        properties:
          type:
            example: UnstructuredText
            type: string
            enum:
            - UnstructuredText
        required:
        - type
      - $ref: '#/components/schemas/TextDescriptor'
    Empty:
      title: Empty
      type: object
    Environment:
      title: Environment
      type: object
      properties:
        id:
          type: string
          format: uuid
        applicationId:
          type: string
          format: uuid
        name:
          type: string
        compatibilityCheck:
          type: boolean
        versionCheck:
          type: boolean
        securityOverrides:
          type: boolean
      required:
      - id
      - applicationId
      - name
      - compatibilityCheck
      - versionCheck
      - securityOverrides
    EnvironmentHash:
      title: EnvironmentHash
      type: object
    EnvironmentSummary:
      title: EnvironmentSummary
      type: object
    ErrorBody:
      title: ErrorBody
      type: object
      properties:
        error:
          type: string
      required:
      - error
    ErrorsBody:
      title: ErrorsBody
      type: object
      properties:
        errors:
          type: array
          items:
            type: string
      required:
      - errors
    GatewayBindingRequestView:
      title: GatewayBindingRequestView
      type: object
      properties:
        bindingType:
          $ref: '#/components/schemas/GatewayBindingType'
        component:
          $ref: '#/components/schemas/ComponentReference'
        idempotencyKey:
          type: string
        response:
          type: string
        invocationContext:
          type: string
    GatewayBindingResponseView:
      title: GatewayBindingResponseView
      type: object
      properties:
        component:
          $ref: '#/components/schemas/ComponentReference'
        workerName:
          type: string
        idempotencyKey:
          type: string
        invocationContext:
          type: string
        response:
          type: string
        bindingType:
          $ref: '#/components/schemas/GatewayBindingType'
        responseMappingInput:
          $ref: '#/components/schemas/RibInputTypeInfo'
        workerNameInput:
          $ref: '#/components/schemas/RibInputTypeInfo'
        idempotencyKeyInput:
          $ref: '#/components/schemas/RibInputTypeInfo'
        corsPreflight:
          $ref: '#/components/schemas/CorsConfiguration'
        responseMappingOutput:
          $ref: '#/components/schemas/RibOutputTypeInfo'
        openapiSpecJson:
          type: string
    GatewayBindingType:
      type: string
      enum:
      - default
      - file-server
      - http-handler
      - cors-preflight
      - swagger-ui
    HealthcheckResponse:
      title: HealthcheckResponse
      type: object
    HttpApiDefinitionResponseView:
      title: HttpApiDefinitionResponseView
      type: object
      properties:
        id:
          type: string
          format: uuid
        routes:
          type: array
          items:
            $ref: '#/components/schemas/RouteResponseView'
        createdAt:
          type: string
          format: date-time
      required:
      - id
      - routes
      - createdAt
    InitialComponentFile:
      title: InitialComponentFile
      type: object
      properties:
        key:
          title: |-
            Key that can be used to identify a component file.
            All files with the same content will have the same key.
          type: string
        path:
          description: Path inside a component filesystem. Must be absolute.
          type: string
        permissions:
          $ref: '#/components/schemas/ComponentFilePermissions'
      required:
      - key
      - path
      - permissions
    LibraryPluginDefinition:
      title: LibraryPluginDefinition
      type: object
      properties:
        blobStorageKey:
          type: string
      required:
      - blobStorageKey
    LinearMemory:
      title: LinearMemory
      type: object
      properties:
        initial:
          description: Initial size of the linear memory in bytes
          type: integer
          format: uint64
        maximum:
          description: Optional maximal size of the linear memory in bytes
          type: integer
          format: uint64
      required:
      - initial
    NameOptionTypePair:
      title: NameOptionTypePair
      type: object
      properties:
        name:
          type: string
        typ:
          $ref: '#/components/schemas/AnalysedType'
      required:
      - name
    NameTypePair:
      title: NameTypePair
      type: object
      properties:
        name:
          type: string
        typ:
          $ref: '#/components/schemas/AnalysedType'
      required:
      - name
      - typ
    NamedElementSchema:
      title: NamedElementSchema
      type: object
      properties:
        name:
          type: string
        schema:
          $ref: '#/components/schemas/ElementSchema'
      required:
      - name
      - schema
    NamedElementSchemas:
      title: NamedElementSchemas
      type: object
      properties:
        elements:
          type: array
          items:
            $ref: '#/components/schemas/NamedElementSchema'
      required:
      - elements
    NewAccountData:
      title: NewAccountData
      type: object
      properties:
        name:
          type: string
        email:
          type: string
      required:
      - name
      - email
    NewApplicationData:
      title: NewApplicationData
      type: object
      properties:
        name:
          type: string
      required:
      - name
    NewEnvironmentData:
      title: NewEnvironmentData
      type: object
      properties:
        name:
          type: string
        compatibilityCheck:
          type: boolean
        versionCheck:
          type: boolean
        securityOverrides:
          type: boolean
      required:
      - name
      - compatibilityCheck
      - versionCheck
      - securityOverrides
    OAuth2DeviceFlowStartRequest:
      title: OAuth2DeviceFlowStartRequest
      type: object
      properties:
        provider:
          $ref: '#/components/schemas/OAuth2Provider'
      required:
      - provider
    OAuth2DeviceflowData:
      title: OAuth2DeviceflowData
      type: object
      properties:
        url:
          type: string
        userCode:
          type: string
        expires:
          type: string
          format: date-time
        encodedSession:
          type: string
      required:
      - url
      - userCode
      - expires
      - encodedSession
    OAuth2Provider:
      type: string
      enum:
      - github
    OAuth2WebflowData:
      title: OAuth2WebflowData
      type: object
      properties:
        url:
          type: string
        state:
          type: string
          format: uuid
      required:
      - url
      - state
    OplogProcessorDefinition:
      title: OplogProcessorDefinition
      type: object
      properties:
        componentId:
          type: string
          format: uuid
        componentVersion:
          type: integer
          format: uint64
      required:
      - componentId
      - componentVersion
    Page_Account:
      title: Page_Account
      type: object
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/Account'
      required:
      - values
    Page_ApiDeployment:
      title: Page_ApiDeployment
      type: object
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/ApiDeployment'
      required:
      - values
    Page_ApiDomain:
      title: Page_ApiDomain
      type: object
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/ApiDomain'
      required:
      - values
    Page_Application:
      title: Page_Application
      type: object
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/Application'
      required:
      - values
    Page_CertificateResponseView:
      title: Page_CertificateResponseView
      type: object
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/CertificateResponseView'
      required:
      - values
    Page_Component:
      title: Page_Component
      type: object
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/Component'
      required:
      - values
    Page_Deployment:
      title: Page_Deployment
      type: object
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/Deployment'
      required:
      - values
    Page_Environment:
      title: Page_Environment
      type: object
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/Environment'
      required:
      - values
    Page_HttpApiDefinitionResponseView:
      title: Page_HttpApiDefinitionResponseView
      type: object
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/HttpApiDefinitionResponseView'
      required:
      - values
    Page_PluginDefinition:
      title: Page_PluginDefinition
      type: object
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/PluginDefinition'
      required:
      - values
    Page_SecuritySchemeResponseView:
      title: Page_SecuritySchemeResponseView
      type: object
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/SecuritySchemeResponseView'
      required:
      - values
    Plan:
      title: Plan
      type: object
      properties:
        planId:
          type: string
          format: uuid
        appLimit:
          type: integer
          format: int64
        envLimit:
          type: integer
          format: int64
        componentLimit:
          type: integer
          format: int64
        workerLimit:
          type: integer
          format: int64
        storageLimit:
          type: integer
          format: int64
        monthlyGasLimit:
          type: integer
          format: int64
        monthlyUploadLimit:
          type: integer
          format: int64
      required:
      - planId
      - appLimit
      - envLimit
      - componentLimit
      - workerLimit
      - storageLimit
      - monthlyGasLimit
      - monthlyUploadLimit
    PluginDefinition:
      title: PluginDefinition
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        version:
          type: string
        description:
          type: string
        icon:
          type: array
          items:
            type: integer
            format: uint8
        homepage:
          type: string
        specs:
          $ref: '#/components/schemas/PluginTypeSpecificDefinition'
        scope:
          $ref: '#/components/schemas/PluginScope'
        accountId:
          type: string
          format: uuid
        deleted:
          type: boolean
      required:
      - id
      - name
      - version
      - description
      - icon
      - homepage
      - specs
      - scope
      - accountId
      - deleted
    PluginInstallation:
      title: PluginInstallation
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        version:
          type: string
        registered:
          description: Whether the referenced plugin is still registered. If false, the installation will still work but the plugin will not show up when listing plugins.
          type: boolean
        priority:
          type: integer
          format: int32
        parameters:
          type: object
          additionalProperties:
            type: string
      required:
      - id
      - name
      - version
      - registered
      - priority
      - parameters
    PluginInstallationAction:
      discriminator:
        propertyName: type
        mapping:
          Install: '#/components/schemas/PluginInstallationAction_PluginInstallationCreation'
          Update: '#/components/schemas/PluginInstallationAction_PluginInstallationUpdateWithId'
          Uninstall: '#/components/schemas/PluginInstallationAction_PluginUninstallation'
      type: object
      oneOf:
      - $ref: '#/components/schemas/PluginInstallationAction_PluginInstallationCreation'
      - $ref: '#/components/schemas/PluginInstallationAction_PluginInstallationUpdateWithId'
      - $ref: '#/components/schemas/PluginInstallationAction_PluginUninstallation'
    PluginInstallationAction_PluginInstallationCreation:
      allOf:
      - type: object
        properties:
          type:
            example: Install
            type: string
            enum:
            - Install
        required:
        - type
      - $ref: '#/components/schemas/PluginInstallationCreation'
    PluginInstallationAction_PluginInstallationUpdateWithId:
      allOf:
      - type: object
        properties:
          type:
            example: Update
            type: string
            enum:
            - Update
        required:
        - type
      - $ref: '#/components/schemas/PluginInstallationUpdateWithId'
    PluginInstallationAction_PluginUninstallation:
      allOf:
      - type: object
        properties:
          type:
            example: Uninstall
            type: string
            enum:
            - Uninstall
        required:
        - type
      - $ref: '#/components/schemas/PluginUninstallation'
    PluginInstallationCreation:
      title: PluginInstallationCreation
      type: object
      properties:
        name:
          type: string
        version:
          type: string
        priority:
          description: Plugins will be applied in order of increasing priority
          type: integer
          format: int32
        parameters:
          type: object
          additionalProperties:
            type: string
      required:
      - name
      - version
      - priority
      - parameters
    PluginInstallationUpdateWithId:
      title: PluginInstallationUpdateWithId
      type: object
      properties:
        installationId:
          type: string
          format: uuid
        priority:
          type: integer
          format: int32
        parameters:
          type: object
          additionalProperties:
            type: string
      required:
      - installationId
      - priority
      - parameters
    PluginScope:
      discriminator:
        propertyName: type
        mapping:
          Global: '#/components/schemas/PluginScope_Empty'
          Component: '#/components/schemas/PluginScope_ComponentPluginScope'
          Project: '#/components/schemas/PluginScope_ProjectPluginScope'
      type: object
      oneOf:
      - $ref: '#/components/schemas/PluginScope_Empty'
      - $ref: '#/components/schemas/PluginScope_ComponentPluginScope'
      - $ref: '#/components/schemas/PluginScope_ProjectPluginScope'
    PluginScope_ComponentPluginScope:
      allOf:
      - type: object
        properties:
          type:
            example: Component
            type: string
            enum:
            - Component
        required:
        - type
      - $ref: '#/components/schemas/ComponentPluginScope'
    PluginScope_Empty:
      allOf:
      - type: object
        properties:
          type:
            example: Global
            type: string
            enum:
            - Global
        required:
        - type
      - $ref: '#/components/schemas/Empty'
    PluginScope_ProjectPluginScope:
      allOf:
      - type: object
        properties:
          type:
            example: Project
            type: string
            enum:
            - Project
        required:
        - type
      - $ref: '#/components/schemas/ProjectPluginScope'
    PluginTypeSpecificCreation:
      discriminator:
        propertyName: type
        mapping:
          ComponentTransformer: '#/components/schemas/PluginTypeSpecificCreation_ComponentTransformerDefinition'
          OplogProcessor: '#/components/schemas/PluginTypeSpecificCreation_OplogProcessorDefinition'
      type: object
      oneOf:
      - $ref: '#/components/schemas/PluginTypeSpecificCreation_ComponentTransformerDefinition'
      - $ref: '#/components/schemas/PluginTypeSpecificCreation_OplogProcessorDefinition'
    PluginTypeSpecificCreation_ComponentTransformerDefinition:
      allOf:
      - type: object
        properties:
          type:
            example: ComponentTransformer
            type: string
            enum:
            - ComponentTransformer
        required:
        - type
      - $ref: '#/components/schemas/ComponentTransformerDefinition'
    PluginTypeSpecificCreation_OplogProcessorDefinition:
      allOf:
      - type: object
        properties:
          type:
            example: OplogProcessor
            type: string
            enum:
            - OplogProcessor
        required:
        - type
      - $ref: '#/components/schemas/OplogProcessorDefinition'
    PluginTypeSpecificDefinition:
      discriminator:
        propertyName: type
        mapping:
          ComponentTransformer: '#/components/schemas/PluginTypeSpecificDefinition_ComponentTransformerDefinition'
          OplogProcessor: '#/components/schemas/PluginTypeSpecificDefinition_OplogProcessorDefinition'
          Library: '#/components/schemas/PluginTypeSpecificDefinition_LibraryPluginDefinition'
          App: '#/components/schemas/PluginTypeSpecificDefinition_AppPluginDefinition'
      type: object
      oneOf:
      - $ref: '#/components/schemas/PluginTypeSpecificDefinition_ComponentTransformerDefinition'
      - $ref: '#/components/schemas/PluginTypeSpecificDefinition_OplogProcessorDefinition'
      - $ref: '#/components/schemas/PluginTypeSpecificDefinition_LibraryPluginDefinition'
      - $ref: '#/components/schemas/PluginTypeSpecificDefinition_AppPluginDefinition'
    PluginTypeSpecificDefinition_AppPluginDefinition:
      allOf:
      - type: object
        properties:
          type:
            example: App
            type: string
            enum:
            - App
        required:
        - type
      - $ref: '#/components/schemas/AppPluginDefinition'
    PluginTypeSpecificDefinition_ComponentTransformerDefinition:
      allOf:
      - type: object
        properties:
          type:
            example: ComponentTransformer
            type: string
            enum:
            - ComponentTransformer
        required:
        - type
      - $ref: '#/components/schemas/ComponentTransformerDefinition'
    PluginTypeSpecificDefinition_LibraryPluginDefinition:
      allOf:
      - type: object
        properties:
          type:
            example: Library
            type: string
            enum:
            - Library
        required:
        - type
      - $ref: '#/components/schemas/LibraryPluginDefinition'
    PluginTypeSpecificDefinition_OplogProcessorDefinition:
      allOf:
      - type: object
        properties:
          type:
            example: OplogProcessor
            type: string
            enum:
            - OplogProcessor
        required:
        - type
      - $ref: '#/components/schemas/OplogProcessorDefinition'
    PluginUninstallation:
      title: PluginUninstallation
      type: object
      properties:
        installationId:
          type: string
          format: uuid
      required:
      - installationId
    ProducerField:
      title: ProducerField
      type: object
      properties:
        name:
          type: string
        values:
          type: array
          items:
            $ref: '#/components/schemas/VersionedName'
      required:
      - name
      - values
    Producers:
      title: Producers
      type: object
      properties:
        fields:
          type: array
          items:
            $ref: '#/components/schemas/ProducerField'
      required:
      - fields
    ProjectPluginScope:
      title: ProjectPluginScope
      type: object
      properties:
        projectId:
          type: string
          format: uuid
      required:
      - projectId
    Provider:
      type: string
      enum:
      - Google
      - Facebook
      - Microsoft
      - Gitlab
    RibInputTypeInfo:
      title: RibInputTypeInfo
      type: object
      properties:
        types:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AnalysedType'
      required:
      - types
    RibOutputTypeInfo:
      title: RibOutputTypeInfo
      type: object
      properties:
        analysedType:
          $ref: '#/components/schemas/AnalysedType'
      required:
      - analysedType
    Role:
      type: string
      enum:
      - Admin
      - MarketingAdmin
    RouteMethod:
      type: string
      enum:
      - get
      - connect
      - post
      - delete
      - put
      - patch
      - options
      - trace
      - head
    RouteRequestView:
      title: RouteRequestView
      type: object
      properties:
        method:
          $ref: '#/components/schemas/RouteMethod'
        path:
          type: string
        binding:
          $ref: '#/components/schemas/GatewayBindingRequestView'
        security:
          type: string
      required:
      - method
      - path
      - binding
    RouteResponseView:
      title: RouteResponseView
      type: object
      properties:
        method:
          $ref: '#/components/schemas/RouteMethod'
        path:
          type: string
        binding:
          $ref: '#/components/schemas/GatewayBindingResponseView'
        security:
          type: string
      required:
      - method
      - path
      - binding
    SecuritySchemeResponseView:
      title: SecuritySchemeResponseView
      type: object
      properties:
        providerType:
          $ref: '#/components/schemas/Provider'
        schemeIdentifier:
          type: string
        clientId:
          type: string
        clientSecret:
          type: string
        redirectUrl:
          type: string
        scopes:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
      required:
      - providerType
      - schemeIdentifier
      - clientId
      - clientSecret
      - redirectUrl
      - scopes
      - createdAt
    TextDescriptor:
      title: TextDescriptor
      type: object
      properties:
        restrictions:
          type: array
          items:
            $ref: '#/components/schemas/TextType'
    TextType:
      title: TextType
      type: object
      properties:
        languageCode:
          type: string
      required:
      - languageCode
    Token:
      title: Token
      type: object
      properties:
        id:
          type: string
          format: uuid
        accountId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        expiresAt:
          type: string
          format: date-time
      required:
      - id
      - accountId
      - createdAt
      - expiresAt
    TokenWithSecret:
      title: TokenWithSecret
      type: object
      properties:
        id:
          type: string
          format: uuid
        secret:
          type: string
          format: uuid
        accountId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        expiresAt:
          type: string
          format: date-time
      required:
      - id
      - secret
      - accountId
      - createdAt
      - expiresAt
    TypeBool:
      title: TypeBool
      type: object
    TypeChr:
      title: TypeChr
      type: object
    TypeEnum:
      title: TypeEnum
      type: object
      properties:
        name:
          type: string
        owner:
          type: string
        cases:
          type: array
          items:
            type: string
      required:
      - cases
    TypeF32:
      title: TypeF32
      type: object
    TypeF64:
      title: TypeF64
      type: object
    TypeFlags:
      title: TypeFlags
      type: object
      properties:
        name:
          type: string
        owner:
          type: string
        names:
          type: array
          items:
            type: string
      required:
      - names
    TypeHandle:
      title: TypeHandle
      type: object
      properties:
        name:
          type: string
        owner:
          type: string
        resource_id:
          type: integer
          format: uint64
        mode:
          $ref: '#/components/schemas/AnalysedResourceMode'
      required:
      - resource_id
      - mode
    TypeList:
      title: TypeList
      type: object
      properties:
        name:
          type: string
        owner:
          type: string
        inner:
          $ref: '#/components/schemas/AnalysedType'
      required:
      - inner
    TypeOption:
      title: TypeOption
      type: object
      properties:
        name:
          type: string
        owner:
          type: string
        inner:
          $ref: '#/components/schemas/AnalysedType'
      required:
      - inner
    TypeRecord:
      title: TypeRecord
      type: object
      properties:
        name:
          type: string
        owner:
          type: string
        fields:
          type: array
          items:
            $ref: '#/components/schemas/NameTypePair'
      required:
      - fields
    TypeResult:
      title: TypeResult
      type: object
      properties:
        name:
          type: string
        owner:
          type: string
        ok:
          $ref: '#/components/schemas/AnalysedType'
        err:
          $ref: '#/components/schemas/AnalysedType'
    TypeS16:
      title: TypeS16
      type: object
    TypeS32:
      title: TypeS32
      type: object
    TypeS64:
      title: TypeS64
      type: object
    TypeS8:
      title: TypeS8
      type: object
    TypeStr:
      title: TypeStr
      type: object
    TypeTuple:
      title: TypeTuple
      type: object
      properties:
        name:
          type: string
        owner:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/AnalysedType'
      required:
      - items
    TypeU16:
      title: TypeU16
      type: object
    TypeU32:
      title: TypeU32
      type: object
    TypeU64:
      title: TypeU64
      type: object
    TypeU8:
      title: TypeU8
      type: object
    TypeVariant:
      title: TypeVariant
      type: object
      properties:
        name:
          type: string
        owner:
          type: string
        cases:
          type: array
          items:
            $ref: '#/components/schemas/NameOptionTypePair'
      required:
      - cases
    UpdateApiDeploymentRequest:
      title: UpdateApiDeploymentRequest
      type: object
      properties:
        apiDefinitions:
          type: array
          items:
            type: string
            format: uuid
      required:
      - apiDefinitions
    UpdateApiDomainRequest:
      title: UpdateApiDomainRequest
      type: object
    UpdateApplicationRequest:
      title: UpdateApplicationRequest
      type: object
    UpdateCertificateRequest:
      title: UpdateCertificateRequest
      type: object
      properties:
        certificateBody:
          type: string
        certificatePrivateKey:
          type: string
      required:
      - certificateBody
      - certificatePrivateKey
    UpdateComponentRequestMetadata:
      title: UpdateComponentRequestMetadata
      type: object
      properties:
        previousVersion:
          type: integer
          format: uint64
        componentType:
          $ref: '#/components/schemas/ComponentType'
        removedFiles:
          type: array
          items:
            description: Path inside a component filesystem. Must be absolute.
            type: string
        newFileOptions:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ComponentFileOptions'
        dynamicLinking:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/DynamicLinkedInstance'
        env:
          type: object
          additionalProperties:
            type: string
        agentTypes:
          type: array
          items:
            $ref: '#/components/schemas/AgentType'
        pluginInstallationActions:
          type: array
          items:
            $ref: '#/components/schemas/PluginInstallationAction'
      required:
      - previousVersion
    UpdateEnvironmentRequest:
      title: UpdateEnvironmentRequest
      type: object
      properties:
        previousRevision:
          type: integer
          format: uint64
      required:
      - previousRevision
    UpdateHttpApiDefinitionRequest:
      title: UpdateHttpApiDefinitionRequest
      type: object
      properties:
        routes:
          type: array
          items:
            $ref: '#/components/schemas/RouteRequestView'
      required:
      - routes
    VersionInfo:
      title: VersionInfo
      type: object
      properties:
        version:
          type: string
      required:
      - version
    VersionedComponentId:
      title: VersionedComponentId
      type: object
      properties:
        componentId:
          type: string
          format: uuid
        version:
          type: integer
          format: uint64
      required:
      - componentId
      - version
    VersionedName:
      title: VersionedName
      type: object
      properties:
        name:
          type: string
        version:
          type: string
      required:
      - name
      - version
    WasmRpcTarget:
      title: WasmRpcTarget
      type: object
      properties:
        interfaceName:
          type: string
        componentName:
          type: string
        componentType:
          $ref: '#/components/schemas/ComponentType'
      required:
      - interfaceName
      - componentName
      - componentType
  securitySchemes:
    Cookie:
      type: apiKey
      in: cookie
      name: GOLEM_SESSION
    Token:
      type: http
      scheme: bearer
tags:
- name: Account
  description: The account API allows users to query and manipulate their own account data.
- name: AccountSummary
- name: ApiCertificate
- name: ApiDefinition
- name: ApiDeployment
- name: ApiDomain
- name: ApiSecurity
- name: Application
- name: Component
- name: Debugging
- name: Deployment
- name: Environment
- name: Grant
- name: HealthCheck
- name: Limits
  description: The limits API allows users to query their current resource limits.
- name: Login
  description: The login endpoints are implementing an OAuth2 flow.
- name: Plugin
- name: Project
  description: |-
    Projects are groups of components and their workers, providing both a separate namespace for these entities and allows sharing between accounts.

    Every account has a default project which is assumed when no specific project ID is passed in some component and worker related APIs.
- name: ProjectGrant
  description: |-
    Projects can have grants providing access to other accounts than the project's owner.

    The project grant API allows listing, creating and deleting such grants. What the grants allow exactly are defined by policies, covered by the Project policy API.
- name: ProjectPolicy
  description: Project policies describe a set of actions one account can perform when it was associated with a grant for a project.
- name: RegistryService
- name: Token
  description: The token API allows creating custom access tokens for the Golem Cloud REST API to be used by tools and services.
- name: Worker
