openapi: 3.0.0
info:
  title: Golem API
  version: '1.0'
servers: []
tags:
- name: ApiCertificate
- name: ApiDefinition
- name: ApiDeployment
- name: ApiDomain
- name: ApiSecurity
- name: Component
- name: HealthCheck
- name: Plugin
- name: Worker
paths:
  /healthcheck:
    get:
      tags:
      - HealthCheck
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/HealthcheckResponse'
      operationId: healthcheck
  /version:
    get:
      tags:
      - HealthCheck
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/VersionInfo'
      operationId: version
  /v1/components/{component_id}/workers:
    post:
      tags:
      - Worker
      summary: Launch a new worker.
      description: |-
        Creates a new worker. The worker initially is in `Idle`` status, waiting to be invoked.

        The parameters in the request are the following:
        - `name` is the name of the created worker. This has to be unique, but only for a given component
        - `args` is a list of strings which appear as command line arguments for the worker
        - `env` is a list of key-value pairs (represented by arrays) which appear as environment variables for the worker
      parameters:
      - name: component_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/WorkerCreationRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/WorkerCreationResponse'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Maximum number of workers exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Component / Worker / Promise not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: Worker already exists
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/GolemErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: launch_new_worker
    get:
      tags:
      - Worker
      summary: Get metadata of multiple workers
      description: |-
        ### Filters

        | Property    | Comparator             | Description                    | Example                         |
        |-------------|------------------------|--------------------------------|----------------------------------|
        | name        | StringFilterComparator | Name of worker                 | `name = worker-name`             |
        | version     | FilterComparator       | Version of worker              | `version >= 0`                   |
        | status      | FilterComparator       | Status of worker               | `status = Running`               |
        | env.\[key\] | StringFilterComparator | Environment variable of worker | `env.var1 = value`               |
        | createdAt   | FilterComparator       | Creation time of worker        | `createdAt > 2024-04-01T12:10:00Z` |


        ### Comparators

        - StringFilterComparator: `eq|equal|=|==`, `ne|notequal|!=`, `like`, `notlike`
        - FilterComparator: `eq|equal|=|==`, `ne|notequal|!=`, `ge|greaterequal|>=`, `gt|greater|>`, `le|lessequal|<=`, `lt|less|<`

        Returns metadata about an existing component workers:
        - `workers` list of workers metadata
        - `cursor` cursor for next request, if cursor is empty/null, there are no other values
      parameters:
      - name: component_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      - name: filter
        schema:
          type: array
          items:
            type: string
        in: query
        description: Filter for worker metadata in form of `property op value`. Can be used multiple times (AND condition is applied between them)
        required: false
        deprecated: false
        explode: true
      - name: cursor
        schema:
          type: string
        in: query
        description: 'Count of listed values, default: 50'
        required: false
        deprecated: false
        explode: true
      - name: count
        schema:
          type: integer
          format: uint64
        in: query
        description: Position where to start listing, if not provided, starts from the beginning. It is used to get the next page of results. To get next page, use the cursor returned in the response
        required: false
        deprecated: false
        explode: true
      - name: precise
        schema:
          type: boolean
        in: query
        description: Precision in relation to worker status, if true, calculate the most up-to-date status for each worker, default is false
        required: false
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/WorkersMetadataResponse'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Maximum number of workers exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Component / Worker / Promise not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: Worker already exists
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/GolemErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: get_workers_metadata
  /v1/components/{component_id}/workers/{worker_name}:
    delete:
      tags:
      - Worker
      summary: Delete a worker
      description: Interrupts and deletes an existing worker.
      parameters:
      - name: component_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      - name: worker_name
        schema:
          type: string
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/DeleteWorkerResponse'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Maximum number of workers exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Component / Worker / Promise not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: Worker already exists
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/GolemErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: delete_worker
    get:
      tags:
      - Worker
      summary: Get metadata of a worker
      description: |-
        Returns metadata about an existing worker:
        - `workerId` is a combination of the used component and the worker's user specified name
        - `accountId` the account the worker is created by
        - `args` is the provided command line arguments passed to the worker
        - `env` is the provided map of environment variables passed to the worker
        - `componentVersion` is the version of the component used by the worker
        - `retryCount` is the number of retries the worker did in case of a failure
        - `status` is the worker's current status, one of the following:
        - `Running` if the worker is currently executing
        - `Idle` if the worker is waiting for an invocation
        - `Suspended` if the worker was running but is now waiting to be resumed by an event (such as end of a sleep, a promise, etc)
        - `Interrupted` if the worker was interrupted by the user
        - `Retrying` if the worker failed, and an automatic retry was scheduled for it
        - `Failed` if the worker failed and there are no more retries scheduled for it
        - `Exited` if the worker explicitly exited using the exit WASI function
      parameters:
      - name: component_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      - name: worker_name
        schema:
          type: string
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/WorkerMetadata'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Maximum number of workers exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Component / Worker / Promise not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: Worker already exists
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/GolemErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: get_worker_metadata
  /v1/components/{component_id}/workers/{worker_name}/invoke-and-await:
    post:
      tags:
      - Worker
      summary: Invoke a function and await its resolution
      description: Supply the parameters in the request body as JSON.
      parameters:
      - name: component_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      - name: worker_name
        schema:
          type: string
        in: path
        required: true
        deprecated: false
        explode: true
      - name: Idempotency-Key
        schema:
          type: string
        in: header
        required: false
        deprecated: false
        explode: true
      - name: function
        schema:
          type: string
        in: query
        required: true
        deprecated: false
        explode: true
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/InvokeParameters'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/InvokeResult'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Maximum number of workers exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Component / Worker / Promise not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: Worker already exists
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/GolemErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: invoke_and_await_function
  /v1/components/{component_id}/invoke-and-await:
    post:
      tags:
      - Worker
      summary: Invoke a function and await its resolution on a new worker with a random generated name
      description: |-
        Ideal for invoking ephemeral components, but works with durable ones as well.
        Supply the parameters in the request body as JSON.
      parameters:
      - name: component_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      - name: Idempotency-Key
        schema:
          type: string
        in: header
        required: false
        deprecated: false
        explode: true
      - name: function
        schema:
          type: string
        in: query
        required: true
        deprecated: false
        explode: true
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/InvokeParameters'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/InvokeResult'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Maximum number of workers exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Component / Worker / Promise not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: Worker already exists
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/GolemErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: invoke_and_await_function_without_name
  /v1/components/{component_id}/workers/{worker_name}/invoke:
    post:
      tags:
      - Worker
      summary: Invoke a function
      description: A simpler version of the previously defined invoke and await endpoint just triggers the execution of a function and immediately returns.
      parameters:
      - name: component_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      - name: worker_name
        schema:
          type: string
        in: path
        required: true
        deprecated: false
        explode: true
      - name: Idempotency-Key
        schema:
          type: string
        in: header
        required: false
        deprecated: false
        explode: true
      - name: function
        schema:
          type: string
        in: query
        description: name of the exported function to be invoked
        required: true
        deprecated: false
        explode: true
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/InvokeParameters'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/InvokeResponse'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Maximum number of workers exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Component / Worker / Promise not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: Worker already exists
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/GolemErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: invoke_function
  /v1/components/{component_id}/invoke:
    post:
      tags:
      - Worker
      summary: Invoke a function on a new worker with a random generated name
      description: |-
        Ideal for invoking ephemeral components, but works with durable ones as well.
        A simpler version of the previously defined invoke and await endpoint just triggers the execution of a function and immediately returns.
      parameters:
      - name: component_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      - name: Idempotency-Key
        schema:
          type: string
        in: header
        required: false
        deprecated: false
        explode: true
      - name: function
        schema:
          type: string
        in: query
        description: name of the exported function to be invoked
        required: true
        deprecated: false
        explode: true
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/InvokeParameters'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/InvokeResponse'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Maximum number of workers exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Component / Worker / Promise not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: Worker already exists
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/GolemErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: invoke_function_without_name
  /v1/components/{component_id}/workers/{worker_name}/complete:
    post:
      tags:
      - Worker
      summary: Complete a promise
      description: |-
        Completes a promise with a given custom array of bytes.
        The promise must be previously created from within the worker, and it's identifier (a combination of a worker identifier and an oplogIdx ) must be sent out to an external caller so it can use this endpoint to mark the promise completed.
        The data field is sent back to the worker, and it has no predefined meaning.
      parameters:
      - name: component_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      - name: worker_name
        schema:
          type: string
        in: path
        required: true
        deprecated: false
        explode: true
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/CompleteParameters'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                type: boolean
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Maximum number of workers exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Component / Worker / Promise not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: Worker already exists
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/GolemErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: complete_promise
  /v1/components/{component_id}/workers/{worker_name}/interrupt:
    post:
      tags:
      - Worker
      summary: Interrupt a worker
      description: |-
        Interrupts the execution of a worker.
        The worker's status will be Interrupted unless the recover-immediately parameter was used, in which case it remains as it was.
        An interrupted worker can be still used, and it is going to be automatically resumed the first time it is used.
        For example in case of a new invocation, the previously interrupted invocation is continued before the new one gets processed.
      parameters:
      - name: component_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      - name: worker_name
        schema:
          type: string
        in: path
        required: true
        deprecated: false
        explode: true
      - name: recovery-immediately
        schema:
          type: boolean
        in: query
        description: if true will simulate a worker recovery. Defaults to false.
        required: false
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/InterruptResponse'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Maximum number of workers exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Component / Worker / Promise not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: Worker already exists
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/GolemErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: interrupt_worker
  /v1/components/{component_id}/workers/find:
    post:
      tags:
      - Worker
      summary: Advanced search for workers
      description: |-
        ### Filter types
        | Type      | Comparator             | Description                    | Example                                                                                       |
        |-----------|------------------------|--------------------------------|-----------------------------------------------------------------------------------------------|
        | Name      | StringFilterComparator | Name of worker                 | `{ "type": "Name", "comparator": "Equal", "value": "worker-name" }`                           |
        | Version   | FilterComparator       | Version of worker              | `{ "type": "Version", "comparator": "GreaterEqual", "value": 0 }`                             |
        | Status    | FilterComparator       | Status of worker               | `{ "type": "Status", "comparator": "Equal", "value": "Running" }`                             |
        | Env       | StringFilterComparator | Environment variable of worker | `{ "type": "Env", "name": "var1", "comparator": "Equal", "value": "value" }`                  |
        | CreatedAt | FilterComparator       | Creation time of worker        | `{ "type": "CreatedAt", "comparator": "Greater", "value": "2024-04-01T12:10:00Z" }`           |
        | And       |                        | And filter combinator          | `{ "type": "And", "filters": [ ... ] }`                                                       |
        | Or        |                        | Or filter combinator           | `{ "type": "Or", "filters": [ ... ] }`                                                        |
        | Not       |                        | Negates the specified filter   | `{ "type": "Not", "filter": { "type": "Version", "comparator": "GreaterEqual", "value": 0 } }`|

        ### Comparators
        - StringFilterComparator: `Equal`, `NotEqual`, `Like`, `NotLike`
        - FilterComparator: `Equal`, `NotEqual`, `GreaterEqual`, `Greater`, `LessEqual`, `Less`

        Returns metadata about an existing component workers:
        - `workers` list of workers metadata
        - `cursor` cursor for next request, if cursor is empty/null, there are no other values
      parameters:
      - name: component_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/WorkersMetadataRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/WorkersMetadataResponse'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Maximum number of workers exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Component / Worker / Promise not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: Worker already exists
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/GolemErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: find_workers_metadata
  /v1/components/{component_id}/workers/{worker_name}/resume:
    post:
      tags:
      - Worker
      summary: Resume a worker
      parameters:
      - name: component_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      - name: worker_name
        schema:
          type: string
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ResumeResponse'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Maximum number of workers exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Component / Worker / Promise not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: Worker already exists
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/GolemErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: resume_worker
  /v1/components/{component_id}/workers/{worker_name}/update:
    post:
      tags:
      - Worker
      summary: Update a worker
      parameters:
      - name: component_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      - name: worker_name
        schema:
          type: string
        in: path
        required: true
        deprecated: false
        explode: true
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/UpdateWorkerRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/UpdateWorkerResponse'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Maximum number of workers exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Component / Worker / Promise not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: Worker already exists
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/GolemErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: update_worker
  /v1/components/{component_id}/workers/{worker_name}/oplog:
    get:
      tags:
      - Worker
      summary: Get the oplog of a worker
      parameters:
      - name: component_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      - name: worker_name
        schema:
          type: string
        in: path
        required: true
        deprecated: false
        explode: true
      - name: from
        schema:
          type: integer
          format: uint64
        in: query
        required: false
        deprecated: false
        explode: true
      - name: count
        schema:
          type: integer
          format: uint64
        in: query
        required: true
        deprecated: false
        explode: true
      - name: cursor
        schema:
          $ref: '#/components/schemas/OplogCursor'
        in: query
        required: false
        deprecated: false
        explode: true
      - name: query
        schema:
          type: string
        in: query
        required: false
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/GetOplogResponse'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Maximum number of workers exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Component / Worker / Promise not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: Worker already exists
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/GolemErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: get_oplog
  /v1/components/{component_id}/workers/{worker_name}/files/{file_name}:
    get:
      tags:
      - Worker
      summary: List files in a worker
      parameters:
      - name: component_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      - name: worker_name
        schema:
          type: string
        in: path
        required: true
        deprecated: false
        explode: true
      - name: file_name
        schema:
          type: string
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/GetFilesResponse'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Maximum number of workers exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Component / Worker / Promise not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: Worker already exists
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/GolemErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: get_files
  /v1/components/{component_id}/workers/{worker_name}/file-contents/{file_name}:
    get:
      tags:
      - Worker
      summary: Get contents of a file in a worker
      parameters:
      - name: component_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      - name: worker_name
        schema:
          type: string
        in: path
        required: true
        deprecated: false
        explode: true
      - name: file_name
        schema:
          type: string
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Maximum number of workers exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Component / Worker / Promise not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: Worker already exists
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/GolemErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: get_file_content
  /v1/components/{component_id}/workers/{worker_name}/activate-plugin:
    post:
      tags:
      - Worker
      summary: Activate a plugin
      description: The plugin must be one of the installed plugins for the worker's current component version.
      parameters:
      - name: component_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      - name: worker_name
        schema:
          type: string
        in: path
        required: true
        deprecated: false
        explode: true
      - name: plugin-installation-id
        schema:
          type: string
          format: uuid
        in: query
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ActivatePluginResponse'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Maximum number of workers exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Component / Worker / Promise not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: Worker already exists
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/GolemErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: activate_plugin
  /v1/components/{component_id}/workers/{worker_name}/deactivate-plugin:
    post:
      tags:
      - Worker
      summary: Deactivate a plugin
      description: The plugin must be one of the installed plugins for the worker's current component version.
      parameters:
      - name: component_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      - name: worker_name
        schema:
          type: string
        in: path
        required: true
        deprecated: false
        explode: true
      - name: plugin-installation-id
        schema:
          type: string
          format: uuid
        in: query
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/DeactivatePluginResponse'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Maximum number of workers exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Component / Worker / Promise not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: Worker already exists
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/GolemErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: deactivate_plugin
  /v1/components/{component_id}/workers/{worker_name}/revert:
    post:
      tags:
      - Worker
      summary: Revert a worker
      description: Reverts a worker by undoing either the last few invocations or the last few recorded oplog entries.
      parameters:
      - name: component_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      - name: worker_name
        schema:
          type: string
        in: path
        required: true
        deprecated: false
        explode: true
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/RevertWorkerTarget'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/RevertWorkerResponse'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Maximum number of workers exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Component / Worker / Promise not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: Worker already exists
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/GolemErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: revert_worker
  /v1/components/{component_id}/workers/{worker_name}/invocations/{idempotency_key}:
    delete:
      tags:
      - Worker
      summary: Cancels a pending invocation if it has not started yet
      description: The invocation to be cancelled is identified by the idempotency key passed to the invoke API.
      parameters:
      - name: component_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      - name: worker_name
        schema:
          type: string
        in: path
        required: true
        deprecated: false
        explode: true
      - name: idempotency_key
        schema:
          type: string
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/CancelInvocationResponse'
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Maximum number of workers exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Component / Worker / Promise not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: Worker already exists
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/GolemErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: cancel_invocation
  /v1/components/{component_id}/workers/{worker_name}/connect:
    get:
      tags:
      - Worker
      summary: Connect to a worker using a websocket and stream events
      parameters:
      - name: component_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      - name: worker_name
        schema:
          type: string
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '101':
          description: A websocket response
        '400':
          description: Invalid request, returning with a list of issues detected in the request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorsBody'
        '401':
          description: Unauthorized
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: Maximum number of workers exceeded
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Component / Worker / Promise not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '409':
          description: Worker already exists
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '500':
          description: Internal server error
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/GolemErrorBody'
      operationId: worker_connect
  /v1/api/definitions/{project_id}/import:
    put:
      tags:
      - ApiDefinition
      summary: Upload an OpenAPI definition
      description: |-
        Uploads an OpenAPI JSON document and either creates a new one or updates an existing Golem
        API definition using it.
      parameters:
      - name: project_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      requestBody:
        content:
          application/json:
            schema:
              type: OpenAPI+WorkerBridgeCustomExtension
              title: API definition in OpenAPI format
              description: API definition in OpenAPI format with required custom extensions
          application/x-yaml:
            schema:
              type: OpenAPI+WorkerBridgeCustomExtension
              title: API definition in OpenAPI format
              description: API definition in OpenAPI format with required custom extensions
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/HttpApiDefinitionResponseData'
        '400':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/WorkerServiceErrorsBody'
        '401':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/MessageBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                type: string
        '500':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: import_open_api
  /v1/api/definitions/{project_id}:
    post:
      tags:
      - ApiDefinition
      summary: Create a new API definition
      description: |-
        Creates a new API definition described by Golem's API definition JSON document.
        If an API definition of the same version already exists, its an error.
      parameters:
      - name: project_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpApiDefinitionRequest'
          application/x-yaml:
            schema:
              $ref: '#/components/schemas/HttpApiDefinitionRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/HttpApiDefinitionResponseData'
        '400':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/WorkerServiceErrorsBody'
        '401':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/MessageBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                type: string
        '500':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: create_definition
    get:
      tags:
      - ApiDefinition
      summary: List API definitions
      description: Lists all API definitions associated with the project.
      parameters:
      - name: project_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      - name: api-definition-id
        schema:
          type: string
        in: query
        required: false
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HttpApiDefinitionResponseData'
        '400':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/WorkerServiceErrorsBody'
        '401':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/MessageBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                type: string
        '500':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: list_definitions
  /v1/api/definitions/{project_id}/{id}/{version}:
    put:
      tags:
      - ApiDefinition
      summary: Update an existing API definition.
      description: Only draft API definitions can be updated.
      parameters:
      - name: project_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      - name: id
        schema:
          type: string
        in: path
        required: true
        deprecated: false
        explode: true
      - name: version
        schema:
          type: string
        in: path
        required: true
        deprecated: false
        explode: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpApiDefinitionRequest'
          application/x-yaml:
            schema:
              $ref: '#/components/schemas/HttpApiDefinitionRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/HttpApiDefinitionResponseData'
        '400':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/WorkerServiceErrorsBody'
        '401':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/MessageBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                type: string
        '500':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: update_definition
    get:
      tags:
      - ApiDefinition
      summary: Get an API definition
      description: An API definition is selected by its API definition ID and version.
      parameters:
      - name: project_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      - name: id
        schema:
          type: string
        in: path
        required: true
        deprecated: false
        explode: true
      - name: version
        schema:
          type: string
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/HttpApiDefinitionResponseData'
        '400':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/WorkerServiceErrorsBody'
        '401':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/MessageBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                type: string
        '500':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: get_definition
    delete:
      tags:
      - ApiDefinition
      summary: Delete an API definition
      description: Deletes an API definition by its API definition ID and version.
      parameters:
      - name: project_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      - name: id
        schema:
          type: string
        in: path
        required: true
        deprecated: false
        explode: true
      - name: version
        schema:
          type: string
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/WorkerServiceErrorsBody'
        '401':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/MessageBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                type: string
        '500':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: delete_definition
  /v1/api/deployments/deploy:
    post:
      tags:
      - ApiDeployment
      summary: Creates or updates a deployment
      description: Deploys a set of API definitions to a site (specific host and subdomain).
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/ApiDeploymentRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ApiDeployment'
        '400':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/WorkerServiceErrorsBody'
        '401':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/MessageBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                type: string
        '500':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: deploy
  /v1/api/deployments:
    get:
      tags:
      - ApiDeployment
      summary: Get one or more API deployments
      description: |-
        If `api-definition-id` is not set, it lists all API deployments.
        If `api-definition-id` is set, returns a single API deployment.
      parameters:
      - name: project-id
        schema:
          type: string
          format: uuid
        in: query
        required: true
        deprecated: false
        explode: true
      - name: api-definition-id
        schema:
          type: string
        in: query
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiDeployment'
        '400':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/WorkerServiceErrorsBody'
        '401':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/MessageBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                type: string
        '500':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: list_deployments
  /v1/api/deployments/{site}:
    get:
      tags:
      - ApiDeployment
      summary: Get API deployment by site
      description: Gets an API deployment by the host name (optionally with a subdomain) it is deployed to.
      parameters:
      - name: project-id
        schema:
          type: string
          format: uuid
        in: query
        required: true
        deprecated: false
        explode: true
      - name: site
        schema:
          type: string
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ApiDeployment'
        '400':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/WorkerServiceErrorsBody'
        '401':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/MessageBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                type: string
        '500':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: get_deployment
    delete:
      tags:
      - ApiDeployment
      summary: Delete API deployment by site
      description: Deletes an API deployment by the host name (optionally with a subdomain) it is deployed to.
      parameters:
      - name: project-id
        schema:
          type: string
          format: uuid
        in: query
        required: true
        deprecated: false
        explode: true
      - name: site
        schema:
          type: string
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/WorkerServiceErrorsBody'
        '401':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/MessageBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                type: string
        '500':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: delete_deployment
  /v1/api/deployments/{site}/{id}/{version}:
    delete:
      tags:
      - ApiDeployment
      summary: Undeploy a single API definition from a site
      description: Removes a specific API definition (by id and version) from a site without deleting the entire deployment.
      parameters:
      - name: project-id
        schema:
          type: string
          format: uuid
        in: query
        required: true
        deprecated: false
        explode: true
      - name: site
        schema:
          type: string
        in: path
        required: true
        deprecated: false
        explode: true
      - name: id
        schema:
          type: string
        in: path
        required: true
        deprecated: false
        explode: true
      - name: version
        schema:
          type: string
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/WorkerServiceErrorsBody'
        '401':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/MessageBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                type: string
        '500':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: undeploy_api
  /v1/api/certificates:
    post:
      tags:
      - ApiCertificate
      summary: Creates a new certificate
      description: |-
        A certificate is associated with a given Golem project and domain, and consists of
        a key pair.

        The created certificate will be associated with a certificate ID returned by this endpoint.
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/CertificateRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Certificate'
        '400':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/WorkerServiceErrorsBody'
        '401':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/MessageBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                type: string
        '500':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: create_certificate
    get:
      tags:
      - ApiCertificate
      summary: Gets one or all certificates for a given project
      description: |-
        If `certificate-id` is not set, it returns all certificates associated with the project.
        If `certificate-id` is set, it returns a single certificate if it exists.
      parameters:
      - name: project-id
        schema:
          type: string
          format: uuid
        in: query
        required: true
        deprecated: false
        explode: true
      - name: certificate-id
        schema:
          type: string
          format: uuid
        in: query
        required: false
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Certificate'
        '400':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/WorkerServiceErrorsBody'
        '401':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/MessageBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                type: string
        '500':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: get_certificates
    delete:
      tags:
      - ApiCertificate
      summary: Deletes a certificate
      description: Deletes the certificate associated with the given certificate ID and project ID.
      parameters:
      - name: project-id
        schema:
          type: string
          format: uuid
        in: query
        required: true
        deprecated: false
        explode: true
      - name: certificate-id
        schema:
          type: string
          format: uuid
        in: query
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/WorkerServiceErrorsBody'
        '401':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/MessageBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                type: string
        '500':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: delete_certificate
  /v1/api/domains:
    put:
      tags:
      - ApiDomain
      summary: Create or update an API domain
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/DomainRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ApiDomain'
        '400':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/WorkerServiceErrorsBody'
        '401':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/MessageBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                type: string
        '500':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: create_or_update_domain
    get:
      tags:
      - ApiDomain
      summary: Get all API domains
      description: Returns a list of API domains for the given project.
      parameters:
      - name: project-id
        schema:
          type: string
          format: uuid
        in: query
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiDomain'
        '400':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/WorkerServiceErrorsBody'
        '401':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/MessageBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                type: string
        '500':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: get_domains
    delete:
      tags:
      - ApiDomain
      summary: Delete an API domain
      parameters:
      - name: project-id
        schema:
          type: string
          format: uuid
        in: query
        required: true
        deprecated: false
        explode: true
      - name: domain
        schema:
          type: string
        in: query
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                type: string
        '400':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/WorkerServiceErrorsBody'
        '401':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/MessageBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                type: string
        '500':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: delete_domain
  /v1/api/security/{project_id}/{security_scheme_identifier}:
    get:
      tags:
      - ApiSecurity
      summary: Get a security scheme
      description: Get a security scheme by name
      parameters:
      - name: project_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      - name: security_scheme_identifier
        schema:
          type: string
        in: path
        required: true
        deprecated: false
        explode: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/SecuritySchemeData'
        '400':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/WorkerServiceErrorsBody'
        '401':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/MessageBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                type: string
        '500':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: get
  /v1/api/security/{project_id}:
    post:
      tags:
      - ApiSecurity
      summary: Create a security scheme
      parameters:
      - name: project_id
        schema:
          type: string
          format: uuid
        in: path
        required: true
        deprecated: false
        explode: true
      requestBody:
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/SecuritySchemeData'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/SecuritySchemeData'
        '400':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/WorkerServiceErrorsBody'
        '401':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '403':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/MessageBody'
        '409':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                type: string
        '500':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
      - Cookie: []
      - Token: []
      operationId: create
components:
  schemas:
    ActivatePluginParameters:
      type: object
      title: ActivatePluginParameters
      required:
      - timestamp
      - plugin
      properties:
        timestamp:
          type: string
          format: date-time
        plugin:
          $ref: '#/components/schemas/PluginInstallationDescription'
    ActivatePluginResponse:
      type: object
      title: ActivatePluginResponse
    AnalysedResourceMode:
      type: string
      enum:
      - Owned
      - Borrowed
    AnalysedType:
      type: object
      oneOf:
      - $ref: '#/components/schemas/AnalysedType_TypeVariant'
      - $ref: '#/components/schemas/AnalysedType_TypeResult'
      - $ref: '#/components/schemas/AnalysedType_TypeOption'
      - $ref: '#/components/schemas/AnalysedType_TypeEnum'
      - $ref: '#/components/schemas/AnalysedType_TypeFlags'
      - $ref: '#/components/schemas/AnalysedType_TypeRecord'
      - $ref: '#/components/schemas/AnalysedType_TypeTuple'
      - $ref: '#/components/schemas/AnalysedType_TypeList'
      - $ref: '#/components/schemas/AnalysedType_TypeStr'
      - $ref: '#/components/schemas/AnalysedType_TypeChr'
      - $ref: '#/components/schemas/AnalysedType_TypeF64'
      - $ref: '#/components/schemas/AnalysedType_TypeF32'
      - $ref: '#/components/schemas/AnalysedType_TypeU64'
      - $ref: '#/components/schemas/AnalysedType_TypeS64'
      - $ref: '#/components/schemas/AnalysedType_TypeU32'
      - $ref: '#/components/schemas/AnalysedType_TypeS32'
      - $ref: '#/components/schemas/AnalysedType_TypeU16'
      - $ref: '#/components/schemas/AnalysedType_TypeS16'
      - $ref: '#/components/schemas/AnalysedType_TypeU8'
      - $ref: '#/components/schemas/AnalysedType_TypeS8'
      - $ref: '#/components/schemas/AnalysedType_TypeBool'
      - $ref: '#/components/schemas/AnalysedType_TypeHandle'
      discriminator:
        propertyName: type
        mapping:
          Variant: '#/components/schemas/AnalysedType_TypeVariant'
          Result: '#/components/schemas/AnalysedType_TypeResult'
          Option: '#/components/schemas/AnalysedType_TypeOption'
          Enum: '#/components/schemas/AnalysedType_TypeEnum'
          Flags: '#/components/schemas/AnalysedType_TypeFlags'
          Record: '#/components/schemas/AnalysedType_TypeRecord'
          Tuple: '#/components/schemas/AnalysedType_TypeTuple'
          List: '#/components/schemas/AnalysedType_TypeList'
          Str: '#/components/schemas/AnalysedType_TypeStr'
          Chr: '#/components/schemas/AnalysedType_TypeChr'
          F64: '#/components/schemas/AnalysedType_TypeF64'
          F32: '#/components/schemas/AnalysedType_TypeF32'
          U64: '#/components/schemas/AnalysedType_TypeU64'
          S64: '#/components/schemas/AnalysedType_TypeS64'
          U32: '#/components/schemas/AnalysedType_TypeU32'
          S32: '#/components/schemas/AnalysedType_TypeS32'
          U16: '#/components/schemas/AnalysedType_TypeU16'
          S16: '#/components/schemas/AnalysedType_TypeS16'
          U8: '#/components/schemas/AnalysedType_TypeU8'
          S8: '#/components/schemas/AnalysedType_TypeS8'
          Bool: '#/components/schemas/AnalysedType_TypeBool'
          Handle: '#/components/schemas/AnalysedType_TypeHandle'
    AnalysedType_TypeBool:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - Bool
            example: Bool
      - $ref: '#/components/schemas/TypeBool'
    AnalysedType_TypeChr:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - Chr
            example: Chr
      - $ref: '#/components/schemas/TypeChr'
    AnalysedType_TypeEnum:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - Enum
            example: Enum
      - $ref: '#/components/schemas/TypeEnum'
    AnalysedType_TypeF32:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - F32
            example: F32
      - $ref: '#/components/schemas/TypeF32'
    AnalysedType_TypeF64:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - F64
            example: F64
      - $ref: '#/components/schemas/TypeF64'
    AnalysedType_TypeFlags:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - Flags
            example: Flags
      - $ref: '#/components/schemas/TypeFlags'
    AnalysedType_TypeHandle:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - Handle
            example: Handle
      - $ref: '#/components/schemas/TypeHandle'
    AnalysedType_TypeList:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - List
            example: List
      - $ref: '#/components/schemas/TypeList'
    AnalysedType_TypeOption:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - Option
            example: Option
      - $ref: '#/components/schemas/TypeOption'
    AnalysedType_TypeRecord:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - Record
            example: Record
      - $ref: '#/components/schemas/TypeRecord'
    AnalysedType_TypeResult:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - Result
            example: Result
      - $ref: '#/components/schemas/TypeResult'
    AnalysedType_TypeS16:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - S16
            example: S16
      - $ref: '#/components/schemas/TypeS16'
    AnalysedType_TypeS32:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - S32
            example: S32
      - $ref: '#/components/schemas/TypeS32'
    AnalysedType_TypeS64:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - S64
            example: S64
      - $ref: '#/components/schemas/TypeS64'
    AnalysedType_TypeS8:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - S8
            example: S8
      - $ref: '#/components/schemas/TypeS8'
    AnalysedType_TypeStr:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - Str
            example: Str
      - $ref: '#/components/schemas/TypeStr'
    AnalysedType_TypeTuple:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - Tuple
            example: Tuple
      - $ref: '#/components/schemas/TypeTuple'
    AnalysedType_TypeU16:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - U16
            example: U16
      - $ref: '#/components/schemas/TypeU16'
    AnalysedType_TypeU32:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - U32
            example: U32
      - $ref: '#/components/schemas/TypeU32'
    AnalysedType_TypeU64:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - U64
            example: U64
      - $ref: '#/components/schemas/TypeU64'
    AnalysedType_TypeU8:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - U8
            example: U8
      - $ref: '#/components/schemas/TypeU8'
    AnalysedType_TypeVariant:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - Variant
            example: Variant
      - $ref: '#/components/schemas/TypeVariant'
    ApiDefinitionInfo:
      type: object
      title: ApiDefinitionInfo
      required:
      - id
      - version
      properties:
        id:
          type: string
        version:
          type: string
    ApiDeployment:
      type: object
      title: ApiDeployment
      required:
      - apiDefinitions
      - projectId
      - site
      properties:
        apiDefinitions:
          type: array
          items:
            $ref: '#/components/schemas/ApiDefinitionInfo'
        projectId:
          type: string
          format: uuid
        site:
          $ref: '#/components/schemas/ApiSite'
        createdAt:
          type: string
          format: date-time
    ApiDeploymentRequest:
      type: object
      title: ApiDeploymentRequest
      required:
      - apiDefinitions
      - projectId
      - site
      properties:
        apiDefinitions:
          type: array
          items:
            $ref: '#/components/schemas/ApiDefinitionInfo'
        projectId:
          type: string
          format: uuid
        site:
          $ref: '#/components/schemas/ApiSite'
    ApiDomain:
      type: object
      title: ApiDomain
      required:
      - projectId
      - domainName
      - nameServers
      properties:
        projectId:
          type: string
          format: uuid
        domainName:
          type: string
        nameServers:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
    ApiSite:
      type: object
      title: ApiSite
      required:
      - host
      properties:
        host:
          type: string
        subdomain:
          type: string
    CancelInvocationParameters:
      type: object
      title: CancelInvocationParameters
      required:
      - timestamp
      - idempotencyKey
      properties:
        timestamp:
          type: string
          format: date-time
        idempotencyKey:
          type: string
    CancelInvocationResponse:
      type: object
      title: CancelInvocationResponse
      required:
      - canceled
      properties:
        canceled:
          type: boolean
    Certificate:
      type: object
      title: Certificate
      required:
      - id
      - projectId
      - domainName
      properties:
        id:
          type: string
          format: uuid
        projectId:
          type: string
          format: uuid
        domainName:
          type: string
        createdAt:
          type: string
          format: date-time
    CertificateRequest:
      type: object
      title: CertificateRequest
      required:
      - projectId
      - domainName
      - certificateBody
      - certificatePrivateKey
      properties:
        projectId:
          type: string
          format: uuid
        domainName:
          type: string
        certificateBody:
          type: string
        certificatePrivateKey:
          type: string
    ChangePersistenceLevelParameters:
      type: object
      title: ChangePersistenceLevelParameters
      required:
      - timestamp
      - persistenceLevel
      properties:
        timestamp:
          type: string
          format: date-time
        persistenceLevel:
          $ref: '#/components/schemas/PersistenceLevel'
    ChangeRetryPolicyParameters:
      type: object
      title: ChangeRetryPolicyParameters
      required:
      - timestamp
      - newPolicy
      properties:
        timestamp:
          type: string
          format: date-time
        newPolicy:
          $ref: '#/components/schemas/PublicRetryConfig'
    CompleteParameters:
      type: object
      title: CompleteParameters
      required:
      - oplogIdx
      - data
      properties:
        oplogIdx:
          type: integer
          format: uint64
        data:
          type: array
          items:
            type: integer
            format: uint8
    ComponentFilePermissions:
      type: string
      enum:
      - read-only
      - read-write
    CreateParameters:
      type: object
      title: CreateParameters
      required:
      - timestamp
      - workerId
      - componentVersion
      - args
      - env
      - accountId
      - componentSize
      - initialTotalLinearMemorySize
      - initialActivePlugins
      properties:
        timestamp:
          type: string
          format: date-time
        workerId:
          $ref: '#/components/schemas/WorkerId'
        componentVersion:
          type: integer
          format: uint64
        args:
          type: array
          items:
            type: string
        env:
          type: object
          additionalProperties:
            type: string
        accountId:
          type: string
        parent:
          $ref: '#/components/schemas/WorkerId'
        componentSize:
          type: integer
          format: uint64
        initialTotalLinearMemorySize:
          type: integer
          format: uint64
        initialActivePlugins:
          type: array
          items:
            $ref: '#/components/schemas/PluginInstallationDescription'
    DeactivatePluginParameters:
      type: object
      title: DeactivatePluginParameters
      required:
      - timestamp
      - plugin
      properties:
        timestamp:
          type: string
          format: date-time
        plugin:
          $ref: '#/components/schemas/PluginInstallationDescription'
    DeactivatePluginResponse:
      type: object
      title: DeactivatePluginResponse
    DeleteWorkerResponse:
      type: object
      title: DeleteWorkerResponse
    DescribeResourceParameters:
      type: object
      title: DescribeResourceParameters
      required:
      - timestamp
      - id
      - resourceName
      - resourceParams
      properties:
        timestamp:
          type: string
          format: date-time
        id:
          type: integer
          format: uint64
        resourceName:
          type: string
        resourceParams:
          type: array
          items:
            $ref: '#/components/schemas/ValueAndType'
    DomainRequest:
      type: object
      title: DomainRequest
      required:
      - projectId
      - domainName
      properties:
        projectId:
          type: string
          format: uuid
        domainName:
          type: string
    Empty:
      type: object
      title: Empty
    EndRegionParameters:
      type: object
      title: EndRegionParameters
      required:
      - timestamp
      - beginIndex
      properties:
        timestamp:
          type: string
          format: date-time
        beginIndex:
          type: integer
          format: uint64
    ErrorBody:
      type: object
      title: ErrorBody
      required:
      - error
      properties:
        error:
          type: string
    ErrorParameters:
      type: object
      title: ErrorParameters
      required:
      - timestamp
      - error
      properties:
        timestamp:
          type: string
          format: date-time
        error:
          type: string
    ErrorsBody:
      type: object
      title: ErrorsBody
      required:
      - errors
      properties:
        errors:
          type: array
          items:
            type: string
    ExportedFunctionCompletedParameters:
      type: object
      title: ExportedFunctionCompletedParameters
      required:
      - timestamp
      - response
      - consumedFuel
      properties:
        timestamp:
          type: string
          format: date-time
        response:
          $ref: '#/components/schemas/ValueAndType'
        consumedFuel:
          type: integer
          format: int64
    ExportedFunctionInvokedParameters:
      type: object
      title: ExportedFunctionInvokedParameters
      required:
      - timestamp
      - functionName
      - request
      - idempotencyKey
      - traceId
      - traceStates
      - invocationContext
      properties:
        timestamp:
          type: string
          format: date-time
        functionName:
          type: string
        request:
          type: array
          items:
            $ref: '#/components/schemas/ValueAndType'
        idempotencyKey:
          type: string
        traceId:
          type: string
        traceStates:
          type: array
          items:
            type: string
        invocationContext:
          type: array
          items:
            type: array
            items:
              $ref: '#/components/schemas/PublicSpanData'
    ExportedFunctionParameters:
      type: object
      title: ExportedFunctionParameters
      required:
      - idempotencyKey
      - fullFunctionName
      - traceId
      - traceStates
      - invocationContext
      properties:
        idempotencyKey:
          type: string
        fullFunctionName:
          type: string
        functionInput:
          type: array
          items:
            $ref: '#/components/schemas/ValueAndType'
        traceId:
          type: string
        traceStates:
          type: array
          items:
            type: string
        invocationContext:
          type: array
          items:
            type: array
            items:
              $ref: '#/components/schemas/PublicSpanData'
    FailedUpdate:
      type: object
      title: FailedUpdate
      required:
      - timestamp
      - targetVersion
      properties:
        timestamp:
          type: string
          format: date-time
        targetVersion:
          type: integer
          format: uint64
        details:
          type: string
    FailedUpdateParameters:
      type: object
      title: FailedUpdateParameters
      required:
      - timestamp
      - targetVersion
      properties:
        timestamp:
          type: string
          format: date-time
        targetVersion:
          type: integer
          format: uint64
        details:
          type: string
    FilterComparator:
      type: string
      enum:
      - Equal
      - NotEqual
      - GreaterEqual
      - Greater
      - LessEqual
      - Less
    FinishSpanParameters:
      type: object
      title: FinishSpanParameters
      required:
      - timestamp
      - spanId
      properties:
        timestamp:
          type: string
          format: date-time
        spanId:
          type: string
    FlatComponentFileSystemNode:
      type: object
      title: FlatComponentFileSystemNode
      required:
      - name
      - lastModified
      - kind
      properties:
        name:
          type: string
        lastModified:
          type: integer
          format: uint64
        kind:
          $ref: '#/components/schemas/FlatComponentFileSystemNodeKind'
        permissions:
          $ref: '#/components/schemas/ComponentFilePermissions'
        size:
          type: integer
          format: uint64
    FlatComponentFileSystemNodeKind:
      type: string
      enum:
      - directory
      - file
    GatewayBindingComponent:
      type: object
      title: GatewayBindingComponent
      required:
      - name
      properties:
        name:
          type: string
        version:
          type: integer
          format: uint64
          description: |-
            Version of the component. If not provided the latest version is used.
            Note that the version is only used to typecheck the various rib scripts and prevent component updates.
            During runtime, the actual version of the worker or the latest version (in case no worker was found) is used.
    GatewayBindingData:
      type: object
      title: GatewayBindingData
      properties:
        bindingType:
          $ref: '#/components/schemas/GatewayBindingType'
        component:
          $ref: '#/components/schemas/GatewayBindingComponent'
        workerName:
          type: string
        idempotencyKey:
          type: string
        response:
          type: string
        invocationContext:
          type: string
    GatewayBindingResponseData:
      type: object
      title: GatewayBindingResponseData
      properties:
        component:
          $ref: '#/components/schemas/ResolvedGatewayBindingComponent'
        workerName:
          type: string
        idempotencyKey:
          type: string
        invocationContext:
          type: string
        response:
          type: string
        bindingType:
          $ref: '#/components/schemas/GatewayBindingType'
        responseMappingInput:
          $ref: '#/components/schemas/RibInputTypeInfo'
        workerNameInput:
          $ref: '#/components/schemas/RibInputTypeInfo'
        idempotencyKeyInput:
          $ref: '#/components/schemas/RibInputTypeInfo'
        corsPreflight:
          $ref: '#/components/schemas/HttpCors'
        responseMappingOutput:
          $ref: '#/components/schemas/RibOutputTypeInfo'
    GatewayBindingType:
      type: string
      enum:
      - default
      - file-server
      - http-handler
      - cors-preflight
    GetFilesResponse:
      type: object
      title: GetFilesResponse
      required:
      - nodes
      properties:
        nodes:
          type: array
          items:
            $ref: '#/components/schemas/FlatComponentFileSystemNode'
    GetOplogResponse:
      type: object
      title: GetOplogResponse
      required:
      - entries
      - firstIndexInChunk
      - lastIndex
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/PublicOplogEntryWithIndex'
        next:
          $ref: '#/components/schemas/OplogCursor'
        firstIndexInChunk:
          type: integer
          format: uint64
        lastIndex:
          type: integer
          format: uint64
    GolemError:
      type: object
      oneOf:
      - $ref: '#/components/schemas/GolemError_GolemErrorInvalidRequest'
      - $ref: '#/components/schemas/GolemError_GolemErrorWorkerAlreadyExists'
      - $ref: '#/components/schemas/GolemError_GolemErrorWorkerNotFound'
      - $ref: '#/components/schemas/GolemError_GolemErrorWorkerCreationFailed'
      - $ref: '#/components/schemas/GolemError_GolemErrorFailedToResumeWorker'
      - $ref: '#/components/schemas/GolemError_GolemErrorComponentDownloadFailed'
      - $ref: '#/components/schemas/GolemError_GolemErrorComponentParseFailed'
      - $ref: '#/components/schemas/GolemError_GolemErrorGetLatestVersionOfComponentFailed'
      - $ref: '#/components/schemas/GolemError_GolemErrorPromiseNotFound'
      - $ref: '#/components/schemas/GolemError_GolemErrorPromiseDropped'
      - $ref: '#/components/schemas/GolemError_GolemErrorPromiseAlreadyCompleted'
      - $ref: '#/components/schemas/GolemError_GolemErrorInterrupted'
      - $ref: '#/components/schemas/GolemError_GolemErrorParamTypeMismatch'
      - $ref: '#/components/schemas/GolemError_GolemErrorNoValueInMessage'
      - $ref: '#/components/schemas/GolemError_GolemErrorValueMismatch'
      - $ref: '#/components/schemas/GolemError_GolemErrorUnexpectedOplogEntry'
      - $ref: '#/components/schemas/GolemError_GolemErrorRuntimeError'
      - $ref: '#/components/schemas/GolemError_GolemErrorInvalidShardId'
      - $ref: '#/components/schemas/GolemError_GolemErrorPreviousInvocationFailed'
      - $ref: '#/components/schemas/GolemError_GolemErrorPreviousInvocationExited'
      - $ref: '#/components/schemas/GolemError_GolemErrorUnknown'
      - $ref: '#/components/schemas/GolemError_GolemErrorInvalidAccount'
      - $ref: '#/components/schemas/GolemError_GolemErrorShardingNotReady'
      - $ref: '#/components/schemas/GolemError_GolemErrorInitialComponentFileDownloadFailed'
      - $ref: '#/components/schemas/GolemError_GolemErrorFileSystemError'
      discriminator:
        propertyName: type
        mapping:
          InvalidRequest: '#/components/schemas/GolemError_GolemErrorInvalidRequest'
          WorkerAlreadyExists: '#/components/schemas/GolemError_GolemErrorWorkerAlreadyExists'
          WorkerNotFound: '#/components/schemas/GolemError_GolemErrorWorkerNotFound'
          WorkerCreationFailed: '#/components/schemas/GolemError_GolemErrorWorkerCreationFailed'
          FailedToResumeWorker: '#/components/schemas/GolemError_GolemErrorFailedToResumeWorker'
          ComponentDownloadFailed: '#/components/schemas/GolemError_GolemErrorComponentDownloadFailed'
          ComponentParseFailed: '#/components/schemas/GolemError_GolemErrorComponentParseFailed'
          GetLatestVersionOfComponentFailed: '#/components/schemas/GolemError_GolemErrorGetLatestVersionOfComponentFailed'
          PromiseNotFound: '#/components/schemas/GolemError_GolemErrorPromiseNotFound'
          PromiseDropped: '#/components/schemas/GolemError_GolemErrorPromiseDropped'
          PromiseAlreadyCompleted: '#/components/schemas/GolemError_GolemErrorPromiseAlreadyCompleted'
          Interrupted: '#/components/schemas/GolemError_GolemErrorInterrupted'
          ParamTypeMismatch: '#/components/schemas/GolemError_GolemErrorParamTypeMismatch'
          NoValueInMessage: '#/components/schemas/GolemError_GolemErrorNoValueInMessage'
          ValueMismatch: '#/components/schemas/GolemError_GolemErrorValueMismatch'
          UnexpectedOplogEntry: '#/components/schemas/GolemError_GolemErrorUnexpectedOplogEntry'
          RuntimeError: '#/components/schemas/GolemError_GolemErrorRuntimeError'
          InvalidShardId: '#/components/schemas/GolemError_GolemErrorInvalidShardId'
          PreviousInvocationFailed: '#/components/schemas/GolemError_GolemErrorPreviousInvocationFailed'
          PreviousInvocationExited: '#/components/schemas/GolemError_GolemErrorPreviousInvocationExited'
          Unknown: '#/components/schemas/GolemError_GolemErrorUnknown'
          InvalidAccount: '#/components/schemas/GolemError_GolemErrorInvalidAccount'
          ShardingNotReady: '#/components/schemas/GolemError_GolemErrorShardingNotReady'
          InitialComponentFileDownloadFailed: '#/components/schemas/GolemError_GolemErrorInitialComponentFileDownloadFailed'
          FileSystemError: '#/components/schemas/GolemError_GolemErrorFileSystemError'
    GolemErrorBody:
      type: object
      title: GolemErrorBody
      required:
      - golemError
      properties:
        golemError:
          $ref: '#/components/schemas/GolemError'
    GolemErrorComponentDownloadFailed:
      type: object
      title: GolemErrorComponentDownloadFailed
      required:
      - componentId
      - reason
      properties:
        componentId:
          $ref: '#/components/schemas/VersionedComponentId'
        reason:
          type: string
    GolemErrorComponentParseFailed:
      type: object
      title: GolemErrorComponentParseFailed
      required:
      - componentId
      - reason
      properties:
        componentId:
          $ref: '#/components/schemas/VersionedComponentId'
        reason:
          type: string
    GolemErrorFailedToResumeWorker:
      type: object
      title: GolemErrorFailedToResumeWorker
      required:
      - workerId
      - reason
      properties:
        workerId:
          $ref: '#/components/schemas/WorkerId'
        reason:
          $ref: '#/components/schemas/GolemError'
    GolemErrorFileSystemError:
      type: object
      title: GolemErrorFileSystemError
      required:
      - path
      - reason
      properties:
        path:
          type: string
        reason:
          type: string
    GolemErrorGetLatestVersionOfComponentFailed:
      type: object
      title: GolemErrorGetLatestVersionOfComponentFailed
      required:
      - componentId
      - reason
      properties:
        componentId:
          type: string
          format: uuid
        reason:
          type: string
    GolemErrorInitialComponentFileDownloadFailed:
      type: object
      title: GolemErrorInitialComponentFileDownloadFailed
      required:
      - path
      - reason
      properties:
        path:
          type: string
        reason:
          type: string
    GolemErrorInterrupted:
      type: object
      title: GolemErrorInterrupted
      required:
      - recoverImmediately
      properties:
        recoverImmediately:
          type: boolean
    GolemErrorInvalidAccount:
      type: object
      title: GolemErrorInvalidAccount
    GolemErrorInvalidRequest:
      type: object
      title: GolemErrorInvalidRequest
      required:
      - details
      properties:
        details:
          type: string
    GolemErrorInvalidShardId:
      type: object
      title: GolemErrorInvalidShardId
      required:
      - shardId
      - shardIds
      properties:
        shardId:
          $ref: '#/components/schemas/ShardId'
        shardIds:
          type: array
          items:
            $ref: '#/components/schemas/ShardId'
    GolemErrorNoValueInMessage:
      type: object
      title: GolemErrorNoValueInMessage
    GolemErrorParamTypeMismatch:
      type: object
      title: GolemErrorParamTypeMismatch
      required:
      - details
      properties:
        details:
          type: string
    GolemErrorPreviousInvocationExited:
      type: object
      title: GolemErrorPreviousInvocationExited
    GolemErrorPreviousInvocationFailed:
      type: object
      title: GolemErrorPreviousInvocationFailed
      required:
      - details
      properties:
        details:
          type: string
    GolemErrorPromiseAlreadyCompleted:
      type: object
      title: GolemErrorPromiseAlreadyCompleted
      required:
      - promiseId
      properties:
        promiseId:
          $ref: '#/components/schemas/PromiseId'
    GolemErrorPromiseDropped:
      type: object
      title: GolemErrorPromiseDropped
      required:
      - promiseId
      properties:
        promiseId:
          $ref: '#/components/schemas/PromiseId'
    GolemErrorPromiseNotFound:
      type: object
      title: GolemErrorPromiseNotFound
      required:
      - promiseId
      properties:
        promiseId:
          $ref: '#/components/schemas/PromiseId'
    GolemErrorRuntimeError:
      type: object
      title: GolemErrorRuntimeError
      required:
      - details
      properties:
        details:
          type: string
    GolemErrorShardingNotReady:
      type: object
      title: GolemErrorShardingNotReady
    GolemErrorUnexpectedOplogEntry:
      type: object
      title: GolemErrorUnexpectedOplogEntry
      required:
      - expected
      - got
      properties:
        expected:
          type: string
        got:
          type: string
    GolemErrorUnknown:
      type: object
      title: GolemErrorUnknown
      required:
      - details
      properties:
        details:
          type: string
    GolemErrorValueMismatch:
      type: object
      title: GolemErrorValueMismatch
      required:
      - details
      properties:
        details:
          type: string
    GolemErrorWorkerAlreadyExists:
      type: object
      title: GolemErrorWorkerAlreadyExists
      required:
      - workerId
      properties:
        workerId:
          $ref: '#/components/schemas/WorkerId'
    GolemErrorWorkerCreationFailed:
      type: object
      title: GolemErrorWorkerCreationFailed
      required:
      - workerId
      - details
      properties:
        workerId:
          $ref: '#/components/schemas/WorkerId'
        details:
          type: string
    GolemErrorWorkerNotFound:
      type: object
      title: GolemErrorWorkerNotFound
      required:
      - workerId
      properties:
        workerId:
          $ref: '#/components/schemas/WorkerId'
    GolemError_GolemErrorComponentDownloadFailed:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - ComponentDownloadFailed
            example: ComponentDownloadFailed
      - $ref: '#/components/schemas/GolemErrorComponentDownloadFailed'
    GolemError_GolemErrorComponentParseFailed:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - ComponentParseFailed
            example: ComponentParseFailed
      - $ref: '#/components/schemas/GolemErrorComponentParseFailed'
    GolemError_GolemErrorFailedToResumeWorker:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - FailedToResumeWorker
            example: FailedToResumeWorker
      - $ref: '#/components/schemas/GolemErrorFailedToResumeWorker'
    GolemError_GolemErrorFileSystemError:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - FileSystemError
            example: FileSystemError
      - $ref: '#/components/schemas/GolemErrorFileSystemError'
    GolemError_GolemErrorGetLatestVersionOfComponentFailed:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - GetLatestVersionOfComponentFailed
            example: GetLatestVersionOfComponentFailed
      - $ref: '#/components/schemas/GolemErrorGetLatestVersionOfComponentFailed'
    GolemError_GolemErrorInitialComponentFileDownloadFailed:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - InitialComponentFileDownloadFailed
            example: InitialComponentFileDownloadFailed
      - $ref: '#/components/schemas/GolemErrorInitialComponentFileDownloadFailed'
    GolemError_GolemErrorInterrupted:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - Interrupted
            example: Interrupted
      - $ref: '#/components/schemas/GolemErrorInterrupted'
    GolemError_GolemErrorInvalidAccount:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - InvalidAccount
            example: InvalidAccount
      - $ref: '#/components/schemas/GolemErrorInvalidAccount'
    GolemError_GolemErrorInvalidRequest:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - InvalidRequest
            example: InvalidRequest
      - $ref: '#/components/schemas/GolemErrorInvalidRequest'
    GolemError_GolemErrorInvalidShardId:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - InvalidShardId
            example: InvalidShardId
      - $ref: '#/components/schemas/GolemErrorInvalidShardId'
    GolemError_GolemErrorNoValueInMessage:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - NoValueInMessage
            example: NoValueInMessage
      - $ref: '#/components/schemas/GolemErrorNoValueInMessage'
    GolemError_GolemErrorParamTypeMismatch:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - ParamTypeMismatch
            example: ParamTypeMismatch
      - $ref: '#/components/schemas/GolemErrorParamTypeMismatch'
    GolemError_GolemErrorPreviousInvocationExited:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - PreviousInvocationExited
            example: PreviousInvocationExited
      - $ref: '#/components/schemas/GolemErrorPreviousInvocationExited'
    GolemError_GolemErrorPreviousInvocationFailed:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - PreviousInvocationFailed
            example: PreviousInvocationFailed
      - $ref: '#/components/schemas/GolemErrorPreviousInvocationFailed'
    GolemError_GolemErrorPromiseAlreadyCompleted:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - PromiseAlreadyCompleted
            example: PromiseAlreadyCompleted
      - $ref: '#/components/schemas/GolemErrorPromiseAlreadyCompleted'
    GolemError_GolemErrorPromiseDropped:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - PromiseDropped
            example: PromiseDropped
      - $ref: '#/components/schemas/GolemErrorPromiseDropped'
    GolemError_GolemErrorPromiseNotFound:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - PromiseNotFound
            example: PromiseNotFound
      - $ref: '#/components/schemas/GolemErrorPromiseNotFound'
    GolemError_GolemErrorRuntimeError:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - RuntimeError
            example: RuntimeError
      - $ref: '#/components/schemas/GolemErrorRuntimeError'
    GolemError_GolemErrorShardingNotReady:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - ShardingNotReady
            example: ShardingNotReady
      - $ref: '#/components/schemas/GolemErrorShardingNotReady'
    GolemError_GolemErrorUnexpectedOplogEntry:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - UnexpectedOplogEntry
            example: UnexpectedOplogEntry
      - $ref: '#/components/schemas/GolemErrorUnexpectedOplogEntry'
    GolemError_GolemErrorUnknown:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - Unknown
            example: Unknown
      - $ref: '#/components/schemas/GolemErrorUnknown'
    GolemError_GolemErrorValueMismatch:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - ValueMismatch
            example: ValueMismatch
      - $ref: '#/components/schemas/GolemErrorValueMismatch'
    GolemError_GolemErrorWorkerAlreadyExists:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - WorkerAlreadyExists
            example: WorkerAlreadyExists
      - $ref: '#/components/schemas/GolemErrorWorkerAlreadyExists'
    GolemError_GolemErrorWorkerCreationFailed:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - WorkerCreationFailed
            example: WorkerCreationFailed
      - $ref: '#/components/schemas/GolemErrorWorkerCreationFailed'
    GolemError_GolemErrorWorkerNotFound:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - WorkerNotFound
            example: WorkerNotFound
      - $ref: '#/components/schemas/GolemErrorWorkerNotFound'
    GrowMemoryParameters:
      type: object
      title: GrowMemoryParameters
      required:
      - timestamp
      - delta
      properties:
        timestamp:
          type: string
          format: date-time
        delta:
          type: integer
          format: uint64
    HealthcheckResponse:
      type: object
      title: HealthcheckResponse
    HttpApiDefinitionRequest:
      type: object
      title: HttpApiDefinitionRequest
      required:
      - id
      - version
      - routes
      - draft
      properties:
        id:
          type: string
        version:
          type: string
        security:
          type: array
          items:
            type: string
        routes:
          type: array
          items:
            $ref: '#/components/schemas/RouteRequestData'
        draft:
          type: boolean
    HttpApiDefinitionResponseData:
      type: object
      title: HttpApiDefinitionResponseData
      required:
      - id
      - version
      - routes
      - draft
      properties:
        id:
          type: string
        version:
          type: string
        routes:
          type: array
          items:
            $ref: '#/components/schemas/RouteResponseData'
        draft:
          type: boolean
        createdAt:
          type: string
          format: date-time
    HttpCors:
      type: object
      title: HttpCors
      required:
      - allowOrigin
      - allowMethods
      - allowHeaders
      properties:
        allowOrigin:
          type: string
        allowMethods:
          type: string
        allowHeaders:
          type: string
        exposeHeaders:
          type: string
        allowCredentials:
          type: boolean
        maxAge:
          type: integer
          format: uint64
    ImportedFunctionInvokedParameters:
      type: object
      title: ImportedFunctionInvokedParameters
      required:
      - timestamp
      - functionName
      - request
      - response
      - wrappedFunctionType
      properties:
        timestamp:
          type: string
          format: date-time
        functionName:
          type: string
        request:
          $ref: '#/components/schemas/ValueAndType'
        response:
          $ref: '#/components/schemas/ValueAndType'
        wrappedFunctionType:
          $ref: '#/components/schemas/PublicDurableFunctionType'
    IndexedWorkerMetadata:
      type: object
      title: IndexedWorkerMetadata
      required:
      - resourceName
      - resourceParams
      properties:
        resourceName:
          type: string
        resourceParams:
          type: array
          items:
            type: string
    InterruptResponse:
      type: object
      title: InterruptResponse
    InvokeParameters:
      type: object
      title: InvokeParameters
      required:
      - params
      properties:
        params:
          type: array
          items:
            $ref: '#/components/schemas/ValueAndOptionalType'
    InvokeResponse:
      type: object
      title: InvokeResponse
    InvokeResult:
      type: object
      title: InvokeResult
      required:
      - result
      properties:
        result:
          $ref: '#/components/schemas/TypeAnnotatedValue'
    JumpParameters:
      type: object
      title: JumpParameters
      required:
      - timestamp
      - jump
      properties:
        timestamp:
          type: string
          format: date-time
        jump:
          $ref: '#/components/schemas/OplogRegion'
    LogLevel:
      type: string
      description: Worker log levels including the special stdout and stderr channels
      enum:
      - Stdout
      - Stderr
      - Trace
      - Debug
      - Info
      - Warn
      - Error
      - Critical
    LogParameters:
      type: object
      title: LogParameters
      required:
      - timestamp
      - level
      - context
      - message
      properties:
        timestamp:
          type: string
          format: date-time
        level:
          $ref: '#/components/schemas/LogLevel'
        context:
          type: string
        message:
          type: string
    ManualUpdateParameters:
      type: object
      title: ManualUpdateParameters
      required:
      - targetVersion
      properties:
        targetVersion:
          type: integer
          format: uint64
    MessageBody:
      type: object
      title: MessageBody
      required:
      - message
      properties:
        message:
          type: string
    MessagesErrorsBody:
      type: object
      title: MessagesErrorsBody
      required:
      - errors
      properties:
        errors:
          type: array
          items:
            type: string
    MethodPattern:
      type: string
      enum:
      - Get
      - Connect
      - Post
      - Delete
      - Put
      - Patch
      - Options
      - Trace
      - Head
    NameOptionTypePair:
      type: object
      title: NameOptionTypePair
      required:
      - name
      properties:
        name:
          type: string
        typ:
          $ref: '#/components/schemas/AnalysedType'
    NameTypePair:
      type: object
      title: NameTypePair
      required:
      - name
      - typ
      properties:
        name:
          type: string
        typ:
          $ref: '#/components/schemas/AnalysedType'
    OplogCursor:
      type: object
      title: OplogCursor
      required:
      - nextOplogIndex
      - currentComponentVersion
      properties:
        nextOplogIndex:
          type: integer
          format: uint64
        currentComponentVersion:
          type: integer
          format: uint64
    OplogRegion:
      type: object
      title: OplogRegion
      required:
      - start
      - end
      properties:
        start:
          type: integer
          format: uint64
        end:
          type: integer
          format: uint64
    PendingUpdate:
      type: object
      title: PendingUpdate
      required:
      - timestamp
      - targetVersion
      properties:
        timestamp:
          type: string
          format: date-time
        targetVersion:
          type: integer
          format: uint64
    PendingUpdateParameters:
      type: object
      title: PendingUpdateParameters
      required:
      - timestamp
      - target_version
      - description
      properties:
        timestamp:
          type: string
          format: date-time
        target_version:
          type: integer
          format: uint64
        description:
          $ref: '#/components/schemas/PublicUpdateDescription'
    PendingWorkerInvocationParameters:
      type: object
      title: PendingWorkerInvocationParameters
      required:
      - timestamp
      - invocation
      properties:
        timestamp:
          type: string
          format: date-time
        invocation:
          $ref: '#/components/schemas/PublicWorkerInvocation'
    PersistenceLevel:
      type: string
      enum:
      - PersistNothing
      - PersistRemoteSideEffects
      - Smart
    PluginInstallationDescription:
      type: object
      title: PluginInstallationDescription
      required:
      - installationId
      - pluginName
      - pluginVersion
      - registered
      - parameters
      properties:
        installationId:
          type: string
          format: uuid
        pluginName:
          type: string
        pluginVersion:
          type: string
        registered:
          type: boolean
        parameters:
          type: object
          additionalProperties:
            type: string
    PromiseId:
      type: object
      title: PromiseId
      required:
      - workerId
      - oplogIdx
      properties:
        workerId:
          $ref: '#/components/schemas/WorkerId'
        oplogIdx:
          type: integer
          format: uint64
    Provider:
      type: string
      enum:
      - Google
      - Facebook
      - Microsoft
      - Gitlab
    PublicAttribute:
      type: object
      title: PublicAttribute
      required:
      - key
      - value
      properties:
        key:
          type: string
        value:
          $ref: '#/components/schemas/PublicAttributeValue'
    PublicAttributeValue:
      type: object
      oneOf:
      - $ref: '#/components/schemas/PublicAttributeValue_StringAttributeValue'
      discriminator:
        propertyName: type
        mapping:
          String: '#/components/schemas/PublicAttributeValue_StringAttributeValue'
    PublicAttributeValue_StringAttributeValue:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - String
            example: String
      - $ref: '#/components/schemas/StringAttributeValue'
    PublicDurableFunctionType:
      type: object
      oneOf:
      - $ref: '#/components/schemas/PublicDurableFunctionType_Empty'
      - $ref: '#/components/schemas/PublicDurableFunctionType_Empty'
      - $ref: '#/components/schemas/PublicDurableFunctionType_Empty'
      - $ref: '#/components/schemas/PublicDurableFunctionType_Empty'
      - $ref: '#/components/schemas/PublicDurableFunctionType_WriteRemoteBatchedParameters'
      discriminator:
        propertyName: type
        mapping:
          ReadLocal: '#/components/schemas/PublicDurableFunctionType_Empty'
          WriteLocal: '#/components/schemas/PublicDurableFunctionType_Empty'
          ReadRemote: '#/components/schemas/PublicDurableFunctionType_Empty'
          WriteRemote: '#/components/schemas/PublicDurableFunctionType_Empty'
          WriteRemoteBatched: '#/components/schemas/PublicDurableFunctionType_WriteRemoteBatchedParameters'
    PublicDurableFunctionType_Empty:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - WriteRemote
            example: WriteRemote
      - $ref: '#/components/schemas/Empty'
    PublicDurableFunctionType_WriteRemoteBatchedParameters:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - WriteRemoteBatched
            example: WriteRemoteBatched
      - $ref: '#/components/schemas/WriteRemoteBatchedParameters'
    PublicExternalSpanData:
      type: object
      title: PublicExternalSpanData
      required:
      - spanId
      properties:
        spanId:
          type: string
    PublicLocalSpanData:
      type: object
      title: PublicLocalSpanData
      required:
      - spanId
      - start
      - attributes
      - inherited
      properties:
        spanId:
          type: string
        start:
          type: string
          format: date-time
        parentId:
          type: string
        linkedContext:
          type: integer
          format: uint64
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/PublicAttribute'
        inherited:
          type: boolean
    PublicOplogEntry:
      type: object
      description: |-
        A mirror of the core `OplogEntry` type, without the undefined arbitrary payloads.

        Instead, it encodes all payloads with wasm-rpc `Value` types. This makes this the base type
        for exposing oplog entries through various APIs such as gRPC, REST and WIT.

        The rest of the system will always use `OplogEntry` internally - the only point where the
        oplog payloads are decoded and re-encoded as `Value` is in this module, and it should only be used
        before exposing an oplog entry through a public API.
      oneOf:
      - $ref: '#/components/schemas/PublicOplogEntry_CreateParameters'
      - $ref: '#/components/schemas/PublicOplogEntry_ImportedFunctionInvokedParameters'
      - $ref: '#/components/schemas/PublicOplogEntry_ExportedFunctionInvokedParameters'
      - $ref: '#/components/schemas/PublicOplogEntry_ExportedFunctionCompletedParameters'
      - $ref: '#/components/schemas/PublicOplogEntry_TimestampParameter'
      - $ref: '#/components/schemas/PublicOplogEntry_ErrorParameters'
      - $ref: '#/components/schemas/PublicOplogEntry_TimestampParameter'
      - $ref: '#/components/schemas/PublicOplogEntry_JumpParameters'
      - $ref: '#/components/schemas/PublicOplogEntry_TimestampParameter'
      - $ref: '#/components/schemas/PublicOplogEntry_TimestampParameter'
      - $ref: '#/components/schemas/PublicOplogEntry_ChangeRetryPolicyParameters'
      - $ref: '#/components/schemas/PublicOplogEntry_TimestampParameter'
      - $ref: '#/components/schemas/PublicOplogEntry_EndRegionParameters'
      - $ref: '#/components/schemas/PublicOplogEntry_TimestampParameter'
      - $ref: '#/components/schemas/PublicOplogEntry_EndRegionParameters'
      - $ref: '#/components/schemas/PublicOplogEntry_PendingWorkerInvocationParameters'
      - $ref: '#/components/schemas/PublicOplogEntry_PendingUpdateParameters'
      - $ref: '#/components/schemas/PublicOplogEntry_SuccessfulUpdateParameters'
      - $ref: '#/components/schemas/PublicOplogEntry_FailedUpdateParameters'
      - $ref: '#/components/schemas/PublicOplogEntry_GrowMemoryParameters'
      - $ref: '#/components/schemas/PublicOplogEntry_ResourceParameters'
      - $ref: '#/components/schemas/PublicOplogEntry_ResourceParameters'
      - $ref: '#/components/schemas/PublicOplogEntry_DescribeResourceParameters'
      - $ref: '#/components/schemas/PublicOplogEntry_LogParameters'
      - $ref: '#/components/schemas/PublicOplogEntry_TimestampParameter'
      - $ref: '#/components/schemas/PublicOplogEntry_ActivatePluginParameters'
      - $ref: '#/components/schemas/PublicOplogEntry_DeactivatePluginParameters'
      - $ref: '#/components/schemas/PublicOplogEntry_RevertParameters'
      - $ref: '#/components/schemas/PublicOplogEntry_CancelInvocationParameters'
      - $ref: '#/components/schemas/PublicOplogEntry_StartSpanParameters'
      - $ref: '#/components/schemas/PublicOplogEntry_FinishSpanParameters'
      - $ref: '#/components/schemas/PublicOplogEntry_SetSpanAttributeParameters'
      - $ref: '#/components/schemas/PublicOplogEntry_ChangePersistenceLevelParameters'
      discriminator:
        propertyName: type
        mapping:
          Create: '#/components/schemas/PublicOplogEntry_CreateParameters'
          ImportedFunctionInvoked: '#/components/schemas/PublicOplogEntry_ImportedFunctionInvokedParameters'
          ExportedFunctionInvoked: '#/components/schemas/PublicOplogEntry_ExportedFunctionInvokedParameters'
          ExportedFunctionCompleted: '#/components/schemas/PublicOplogEntry_ExportedFunctionCompletedParameters'
          Suspend: '#/components/schemas/PublicOplogEntry_TimestampParameter'
          Error: '#/components/schemas/PublicOplogEntry_ErrorParameters'
          NoOp: '#/components/schemas/PublicOplogEntry_TimestampParameter'
          Jump: '#/components/schemas/PublicOplogEntry_JumpParameters'
          Interrupted: '#/components/schemas/PublicOplogEntry_TimestampParameter'
          Exited: '#/components/schemas/PublicOplogEntry_TimestampParameter'
          ChangeRetryPolicy: '#/components/schemas/PublicOplogEntry_ChangeRetryPolicyParameters'
          BeginAtomicRegion: '#/components/schemas/PublicOplogEntry_TimestampParameter'
          EndAtomicRegion: '#/components/schemas/PublicOplogEntry_EndRegionParameters'
          BeginRemoteWrite: '#/components/schemas/PublicOplogEntry_TimestampParameter'
          EndRemoteWrite: '#/components/schemas/PublicOplogEntry_EndRegionParameters'
          PendingWorkerInvocation: '#/components/schemas/PublicOplogEntry_PendingWorkerInvocationParameters'
          PendingUpdate: '#/components/schemas/PublicOplogEntry_PendingUpdateParameters'
          SuccessfulUpdate: '#/components/schemas/PublicOplogEntry_SuccessfulUpdateParameters'
          FailedUpdate: '#/components/schemas/PublicOplogEntry_FailedUpdateParameters'
          GrowMemory: '#/components/schemas/PublicOplogEntry_GrowMemoryParameters'
          CreateResource: '#/components/schemas/PublicOplogEntry_ResourceParameters'
          DropResource: '#/components/schemas/PublicOplogEntry_ResourceParameters'
          DescribeResource: '#/components/schemas/PublicOplogEntry_DescribeResourceParameters'
          Log: '#/components/schemas/PublicOplogEntry_LogParameters'
          Restart: '#/components/schemas/PublicOplogEntry_TimestampParameter'
          ActivatePlugin: '#/components/schemas/PublicOplogEntry_ActivatePluginParameters'
          DeactivatePlugin: '#/components/schemas/PublicOplogEntry_DeactivatePluginParameters'
          Revert: '#/components/schemas/PublicOplogEntry_RevertParameters'
          CancelInvocation: '#/components/schemas/PublicOplogEntry_CancelInvocationParameters'
          StartSpan: '#/components/schemas/PublicOplogEntry_StartSpanParameters'
          FinishSpan: '#/components/schemas/PublicOplogEntry_FinishSpanParameters'
          SetSpanAttribute: '#/components/schemas/PublicOplogEntry_SetSpanAttributeParameters'
          ChangePersistenceLevel: '#/components/schemas/PublicOplogEntry_ChangePersistenceLevelParameters'
    PublicOplogEntryWithIndex:
      type: object
      title: PublicOplogEntryWithIndex
      required:
      - oplogIndex
      - entry
      properties:
        oplogIndex:
          type: integer
          format: uint64
        entry:
          $ref: '#/components/schemas/PublicOplogEntry'
    PublicOplogEntry_ActivatePluginParameters:
      description: |-
        A mirror of the core `OplogEntry` type, without the undefined arbitrary payloads.

        Instead, it encodes all payloads with wasm-rpc `Value` types. This makes this the base type
        for exposing oplog entries through various APIs such as gRPC, REST and WIT.

        The rest of the system will always use `OplogEntry` internally - the only point where the
        oplog payloads are decoded and re-encoded as `Value` is in this module, and it should only be used
        before exposing an oplog entry through a public API.
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - ActivatePlugin
            example: ActivatePlugin
      - $ref: '#/components/schemas/ActivatePluginParameters'
    PublicOplogEntry_CancelInvocationParameters:
      description: |-
        A mirror of the core `OplogEntry` type, without the undefined arbitrary payloads.

        Instead, it encodes all payloads with wasm-rpc `Value` types. This makes this the base type
        for exposing oplog entries through various APIs such as gRPC, REST and WIT.

        The rest of the system will always use `OplogEntry` internally - the only point where the
        oplog payloads are decoded and re-encoded as `Value` is in this module, and it should only be used
        before exposing an oplog entry through a public API.
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - CancelInvocation
            example: CancelInvocation
      - $ref: '#/components/schemas/CancelInvocationParameters'
    PublicOplogEntry_ChangePersistenceLevelParameters:
      description: |-
        A mirror of the core `OplogEntry` type, without the undefined arbitrary payloads.

        Instead, it encodes all payloads with wasm-rpc `Value` types. This makes this the base type
        for exposing oplog entries through various APIs such as gRPC, REST and WIT.

        The rest of the system will always use `OplogEntry` internally - the only point where the
        oplog payloads are decoded and re-encoded as `Value` is in this module, and it should only be used
        before exposing an oplog entry through a public API.
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - ChangePersistenceLevel
            example: ChangePersistenceLevel
      - $ref: '#/components/schemas/ChangePersistenceLevelParameters'
    PublicOplogEntry_ChangeRetryPolicyParameters:
      description: |-
        A mirror of the core `OplogEntry` type, without the undefined arbitrary payloads.

        Instead, it encodes all payloads with wasm-rpc `Value` types. This makes this the base type
        for exposing oplog entries through various APIs such as gRPC, REST and WIT.

        The rest of the system will always use `OplogEntry` internally - the only point where the
        oplog payloads are decoded and re-encoded as `Value` is in this module, and it should only be used
        before exposing an oplog entry through a public API.
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - ChangeRetryPolicy
            example: ChangeRetryPolicy
      - $ref: '#/components/schemas/ChangeRetryPolicyParameters'
    PublicOplogEntry_CreateParameters:
      description: |-
        A mirror of the core `OplogEntry` type, without the undefined arbitrary payloads.

        Instead, it encodes all payloads with wasm-rpc `Value` types. This makes this the base type
        for exposing oplog entries through various APIs such as gRPC, REST and WIT.

        The rest of the system will always use `OplogEntry` internally - the only point where the
        oplog payloads are decoded and re-encoded as `Value` is in this module, and it should only be used
        before exposing an oplog entry through a public API.
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - Create
            example: Create
      - $ref: '#/components/schemas/CreateParameters'
    PublicOplogEntry_DeactivatePluginParameters:
      description: |-
        A mirror of the core `OplogEntry` type, without the undefined arbitrary payloads.

        Instead, it encodes all payloads with wasm-rpc `Value` types. This makes this the base type
        for exposing oplog entries through various APIs such as gRPC, REST and WIT.

        The rest of the system will always use `OplogEntry` internally - the only point where the
        oplog payloads are decoded and re-encoded as `Value` is in this module, and it should only be used
        before exposing an oplog entry through a public API.
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - DeactivatePlugin
            example: DeactivatePlugin
      - $ref: '#/components/schemas/DeactivatePluginParameters'
    PublicOplogEntry_DescribeResourceParameters:
      description: |-
        A mirror of the core `OplogEntry` type, without the undefined arbitrary payloads.

        Instead, it encodes all payloads with wasm-rpc `Value` types. This makes this the base type
        for exposing oplog entries through various APIs such as gRPC, REST and WIT.

        The rest of the system will always use `OplogEntry` internally - the only point where the
        oplog payloads are decoded and re-encoded as `Value` is in this module, and it should only be used
        before exposing an oplog entry through a public API.
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - DescribeResource
            example: DescribeResource
      - $ref: '#/components/schemas/DescribeResourceParameters'
    PublicOplogEntry_EndRegionParameters:
      description: |-
        A mirror of the core `OplogEntry` type, without the undefined arbitrary payloads.

        Instead, it encodes all payloads with wasm-rpc `Value` types. This makes this the base type
        for exposing oplog entries through various APIs such as gRPC, REST and WIT.

        The rest of the system will always use `OplogEntry` internally - the only point where the
        oplog payloads are decoded and re-encoded as `Value` is in this module, and it should only be used
        before exposing an oplog entry through a public API.
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - EndRemoteWrite
            example: EndRemoteWrite
      - $ref: '#/components/schemas/EndRegionParameters'
    PublicOplogEntry_ErrorParameters:
      description: |-
        A mirror of the core `OplogEntry` type, without the undefined arbitrary payloads.

        Instead, it encodes all payloads with wasm-rpc `Value` types. This makes this the base type
        for exposing oplog entries through various APIs such as gRPC, REST and WIT.

        The rest of the system will always use `OplogEntry` internally - the only point where the
        oplog payloads are decoded and re-encoded as `Value` is in this module, and it should only be used
        before exposing an oplog entry through a public API.
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - Error
            example: Error
      - $ref: '#/components/schemas/ErrorParameters'
    PublicOplogEntry_ExportedFunctionCompletedParameters:
      description: |-
        A mirror of the core `OplogEntry` type, without the undefined arbitrary payloads.

        Instead, it encodes all payloads with wasm-rpc `Value` types. This makes this the base type
        for exposing oplog entries through various APIs such as gRPC, REST and WIT.

        The rest of the system will always use `OplogEntry` internally - the only point where the
        oplog payloads are decoded and re-encoded as `Value` is in this module, and it should only be used
        before exposing an oplog entry through a public API.
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - ExportedFunctionCompleted
            example: ExportedFunctionCompleted
      - $ref: '#/components/schemas/ExportedFunctionCompletedParameters'
    PublicOplogEntry_ExportedFunctionInvokedParameters:
      description: |-
        A mirror of the core `OplogEntry` type, without the undefined arbitrary payloads.

        Instead, it encodes all payloads with wasm-rpc `Value` types. This makes this the base type
        for exposing oplog entries through various APIs such as gRPC, REST and WIT.

        The rest of the system will always use `OplogEntry` internally - the only point where the
        oplog payloads are decoded and re-encoded as `Value` is in this module, and it should only be used
        before exposing an oplog entry through a public API.
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - ExportedFunctionInvoked
            example: ExportedFunctionInvoked
      - $ref: '#/components/schemas/ExportedFunctionInvokedParameters'
    PublicOplogEntry_FailedUpdateParameters:
      description: |-
        A mirror of the core `OplogEntry` type, without the undefined arbitrary payloads.

        Instead, it encodes all payloads with wasm-rpc `Value` types. This makes this the base type
        for exposing oplog entries through various APIs such as gRPC, REST and WIT.

        The rest of the system will always use `OplogEntry` internally - the only point where the
        oplog payloads are decoded and re-encoded as `Value` is in this module, and it should only be used
        before exposing an oplog entry through a public API.
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - FailedUpdate
            example: FailedUpdate
      - $ref: '#/components/schemas/FailedUpdateParameters'
    PublicOplogEntry_FinishSpanParameters:
      description: |-
        A mirror of the core `OplogEntry` type, without the undefined arbitrary payloads.

        Instead, it encodes all payloads with wasm-rpc `Value` types. This makes this the base type
        for exposing oplog entries through various APIs such as gRPC, REST and WIT.

        The rest of the system will always use `OplogEntry` internally - the only point where the
        oplog payloads are decoded and re-encoded as `Value` is in this module, and it should only be used
        before exposing an oplog entry through a public API.
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - FinishSpan
            example: FinishSpan
      - $ref: '#/components/schemas/FinishSpanParameters'
    PublicOplogEntry_GrowMemoryParameters:
      description: |-
        A mirror of the core `OplogEntry` type, without the undefined arbitrary payloads.

        Instead, it encodes all payloads with wasm-rpc `Value` types. This makes this the base type
        for exposing oplog entries through various APIs such as gRPC, REST and WIT.

        The rest of the system will always use `OplogEntry` internally - the only point where the
        oplog payloads are decoded and re-encoded as `Value` is in this module, and it should only be used
        before exposing an oplog entry through a public API.
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - GrowMemory
            example: GrowMemory
      - $ref: '#/components/schemas/GrowMemoryParameters'
    PublicOplogEntry_ImportedFunctionInvokedParameters:
      description: |-
        A mirror of the core `OplogEntry` type, without the undefined arbitrary payloads.

        Instead, it encodes all payloads with wasm-rpc `Value` types. This makes this the base type
        for exposing oplog entries through various APIs such as gRPC, REST and WIT.

        The rest of the system will always use `OplogEntry` internally - the only point where the
        oplog payloads are decoded and re-encoded as `Value` is in this module, and it should only be used
        before exposing an oplog entry through a public API.
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - ImportedFunctionInvoked
            example: ImportedFunctionInvoked
      - $ref: '#/components/schemas/ImportedFunctionInvokedParameters'
    PublicOplogEntry_JumpParameters:
      description: |-
        A mirror of the core `OplogEntry` type, without the undefined arbitrary payloads.

        Instead, it encodes all payloads with wasm-rpc `Value` types. This makes this the base type
        for exposing oplog entries through various APIs such as gRPC, REST and WIT.

        The rest of the system will always use `OplogEntry` internally - the only point where the
        oplog payloads are decoded and re-encoded as `Value` is in this module, and it should only be used
        before exposing an oplog entry through a public API.
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - Jump
            example: Jump
      - $ref: '#/components/schemas/JumpParameters'
    PublicOplogEntry_LogParameters:
      description: |-
        A mirror of the core `OplogEntry` type, without the undefined arbitrary payloads.

        Instead, it encodes all payloads with wasm-rpc `Value` types. This makes this the base type
        for exposing oplog entries through various APIs such as gRPC, REST and WIT.

        The rest of the system will always use `OplogEntry` internally - the only point where the
        oplog payloads are decoded and re-encoded as `Value` is in this module, and it should only be used
        before exposing an oplog entry through a public API.
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - Log
            example: Log
      - $ref: '#/components/schemas/LogParameters'
    PublicOplogEntry_PendingUpdateParameters:
      description: |-
        A mirror of the core `OplogEntry` type, without the undefined arbitrary payloads.

        Instead, it encodes all payloads with wasm-rpc `Value` types. This makes this the base type
        for exposing oplog entries through various APIs such as gRPC, REST and WIT.

        The rest of the system will always use `OplogEntry` internally - the only point where the
        oplog payloads are decoded and re-encoded as `Value` is in this module, and it should only be used
        before exposing an oplog entry through a public API.
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - PendingUpdate
            example: PendingUpdate
      - $ref: '#/components/schemas/PendingUpdateParameters'
    PublicOplogEntry_PendingWorkerInvocationParameters:
      description: |-
        A mirror of the core `OplogEntry` type, without the undefined arbitrary payloads.

        Instead, it encodes all payloads with wasm-rpc `Value` types. This makes this the base type
        for exposing oplog entries through various APIs such as gRPC, REST and WIT.

        The rest of the system will always use `OplogEntry` internally - the only point where the
        oplog payloads are decoded and re-encoded as `Value` is in this module, and it should only be used
        before exposing an oplog entry through a public API.
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - PendingWorkerInvocation
            example: PendingWorkerInvocation
      - $ref: '#/components/schemas/PendingWorkerInvocationParameters'
    PublicOplogEntry_ResourceParameters:
      description: |-
        A mirror of the core `OplogEntry` type, without the undefined arbitrary payloads.

        Instead, it encodes all payloads with wasm-rpc `Value` types. This makes this the base type
        for exposing oplog entries through various APIs such as gRPC, REST and WIT.

        The rest of the system will always use `OplogEntry` internally - the only point where the
        oplog payloads are decoded and re-encoded as `Value` is in this module, and it should only be used
        before exposing an oplog entry through a public API.
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - DropResource
            example: DropResource
      - $ref: '#/components/schemas/ResourceParameters'
    PublicOplogEntry_RevertParameters:
      description: |-
        A mirror of the core `OplogEntry` type, without the undefined arbitrary payloads.

        Instead, it encodes all payloads with wasm-rpc `Value` types. This makes this the base type
        for exposing oplog entries through various APIs such as gRPC, REST and WIT.

        The rest of the system will always use `OplogEntry` internally - the only point where the
        oplog payloads are decoded and re-encoded as `Value` is in this module, and it should only be used
        before exposing an oplog entry through a public API.
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - Revert
            example: Revert
      - $ref: '#/components/schemas/RevertParameters'
    PublicOplogEntry_SetSpanAttributeParameters:
      description: |-
        A mirror of the core `OplogEntry` type, without the undefined arbitrary payloads.

        Instead, it encodes all payloads with wasm-rpc `Value` types. This makes this the base type
        for exposing oplog entries through various APIs such as gRPC, REST and WIT.

        The rest of the system will always use `OplogEntry` internally - the only point where the
        oplog payloads are decoded and re-encoded as `Value` is in this module, and it should only be used
        before exposing an oplog entry through a public API.
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - SetSpanAttribute
            example: SetSpanAttribute
      - $ref: '#/components/schemas/SetSpanAttributeParameters'
    PublicOplogEntry_StartSpanParameters:
      description: |-
        A mirror of the core `OplogEntry` type, without the undefined arbitrary payloads.

        Instead, it encodes all payloads with wasm-rpc `Value` types. This makes this the base type
        for exposing oplog entries through various APIs such as gRPC, REST and WIT.

        The rest of the system will always use `OplogEntry` internally - the only point where the
        oplog payloads are decoded and re-encoded as `Value` is in this module, and it should only be used
        before exposing an oplog entry through a public API.
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - StartSpan
            example: StartSpan
      - $ref: '#/components/schemas/StartSpanParameters'
    PublicOplogEntry_SuccessfulUpdateParameters:
      description: |-
        A mirror of the core `OplogEntry` type, without the undefined arbitrary payloads.

        Instead, it encodes all payloads with wasm-rpc `Value` types. This makes this the base type
        for exposing oplog entries through various APIs such as gRPC, REST and WIT.

        The rest of the system will always use `OplogEntry` internally - the only point where the
        oplog payloads are decoded and re-encoded as `Value` is in this module, and it should only be used
        before exposing an oplog entry through a public API.
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - SuccessfulUpdate
            example: SuccessfulUpdate
      - $ref: '#/components/schemas/SuccessfulUpdateParameters'
    PublicOplogEntry_TimestampParameter:
      description: |-
        A mirror of the core `OplogEntry` type, without the undefined arbitrary payloads.

        Instead, it encodes all payloads with wasm-rpc `Value` types. This makes this the base type
        for exposing oplog entries through various APIs such as gRPC, REST and WIT.

        The rest of the system will always use `OplogEntry` internally - the only point where the
        oplog payloads are decoded and re-encoded as `Value` is in this module, and it should only be used
        before exposing an oplog entry through a public API.
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - Restart
            example: Restart
      - $ref: '#/components/schemas/TimestampParameter'
    PublicRetryConfig:
      type: object
      title: PublicRetryConfig
      required:
      - maxAttempts
      - minDelay
      - maxDelay
      - multiplier
      properties:
        maxAttempts:
          type: integer
          format: uint32
        minDelay:
          type: string
          format: duration
        maxDelay:
          type: string
          format: duration
        multiplier:
          type: number
          format: double
        maxJitterFactor:
          type: number
          format: double
    PublicSpanData:
      type: object
      oneOf:
      - $ref: '#/components/schemas/PublicSpanData_PublicLocalSpanData'
      - $ref: '#/components/schemas/PublicSpanData_PublicExternalSpanData'
      discriminator:
        propertyName: type
        mapping:
          LocalSpan: '#/components/schemas/PublicSpanData_PublicLocalSpanData'
          ExternalSpan: '#/components/schemas/PublicSpanData_PublicExternalSpanData'
    PublicSpanData_PublicExternalSpanData:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - ExternalSpan
            example: ExternalSpan
      - $ref: '#/components/schemas/PublicExternalSpanData'
    PublicSpanData_PublicLocalSpanData:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - LocalSpan
            example: LocalSpan
      - $ref: '#/components/schemas/PublicLocalSpanData'
    PublicUpdateDescription:
      type: object
      oneOf:
      - $ref: '#/components/schemas/PublicUpdateDescription_Empty'
      - $ref: '#/components/schemas/PublicUpdateDescription_SnapshotBasedUpdateParameters'
      discriminator:
        propertyName: type
        mapping:
          Automatic: '#/components/schemas/PublicUpdateDescription_Empty'
          SnapshotBased: '#/components/schemas/PublicUpdateDescription_SnapshotBasedUpdateParameters'
    PublicUpdateDescription_Empty:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - Automatic
            example: Automatic
      - $ref: '#/components/schemas/Empty'
    PublicUpdateDescription_SnapshotBasedUpdateParameters:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - SnapshotBased
            example: SnapshotBased
      - $ref: '#/components/schemas/SnapshotBasedUpdateParameters'
    PublicWorkerInvocation:
      type: object
      oneOf:
      - $ref: '#/components/schemas/PublicWorkerInvocation_ExportedFunctionParameters'
      - $ref: '#/components/schemas/PublicWorkerInvocation_ManualUpdateParameters'
      discriminator:
        propertyName: type
        mapping:
          ExportedFunction: '#/components/schemas/PublicWorkerInvocation_ExportedFunctionParameters'
          ManualUpdate: '#/components/schemas/PublicWorkerInvocation_ManualUpdateParameters'
    PublicWorkerInvocation_ExportedFunctionParameters:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - ExportedFunction
            example: ExportedFunction
      - $ref: '#/components/schemas/ExportedFunctionParameters'
    PublicWorkerInvocation_ManualUpdateParameters:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - ManualUpdate
            example: ManualUpdate
      - $ref: '#/components/schemas/ManualUpdateParameters'
    ResolvedGatewayBindingComponent:
      type: object
      title: ResolvedGatewayBindingComponent
      required:
      - name
      - version
      properties:
        name:
          type: string
        version:
          type: integer
          format: uint64
    ResourceMetadata:
      type: object
      title: ResourceMetadata
      required:
      - createdAt
      properties:
        createdAt:
          type: string
          format: date-time
        indexed:
          $ref: '#/components/schemas/IndexedWorkerMetadata'
    ResourceParameters:
      type: object
      title: ResourceParameters
      required:
      - timestamp
      - id
      properties:
        timestamp:
          type: string
          format: date-time
        id:
          type: integer
          format: uint64
    ResumeResponse:
      type: object
      title: ResumeResponse
    RevertLastInvocations:
      type: object
      title: RevertLastInvocations
      required:
      - numberOfInvocations
      properties:
        numberOfInvocations:
          type: integer
          format: uint64
    RevertParameters:
      type: object
      title: RevertParameters
      required:
      - timestamp
      - droppedRegion
      properties:
        timestamp:
          type: string
          format: date-time
        droppedRegion:
          $ref: '#/components/schemas/OplogRegion'
    RevertToOplogIndex:
      type: object
      title: RevertToOplogIndex
      required:
      - lastOplogIndex
      properties:
        lastOplogIndex:
          type: integer
          format: uint64
    RevertWorkerResponse:
      type: object
      title: RevertWorkerResponse
    RevertWorkerTarget:
      type: object
      oneOf:
      - $ref: '#/components/schemas/RevertWorkerTarget_RevertToOplogIndex'
      - $ref: '#/components/schemas/RevertWorkerTarget_RevertLastInvocations'
      discriminator:
        propertyName: type
        mapping:
          revertToOplogIndex: '#/components/schemas/RevertWorkerTarget_RevertToOplogIndex'
          revertLastInvocations: '#/components/schemas/RevertWorkerTarget_RevertLastInvocations'
    RevertWorkerTarget_RevertLastInvocations:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - revertLastInvocations
            example: revertLastInvocations
      - $ref: '#/components/schemas/RevertLastInvocations'
    RevertWorkerTarget_RevertToOplogIndex:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - revertToOplogIndex
            example: revertToOplogIndex
      - $ref: '#/components/schemas/RevertToOplogIndex'
    RibInputTypeInfo:
      type: object
      title: RibInputTypeInfo
      required:
      - types
      properties:
        types:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AnalysedType'
    RibOutputTypeInfo:
      type: object
      title: RibOutputTypeInfo
      required:
      - analysedType
      properties:
        analysedType:
          $ref: '#/components/schemas/AnalysedType'
    RouteRequestData:
      type: object
      title: RouteRequestData
      required:
      - method
      - path
      - binding
      properties:
        method:
          $ref: '#/components/schemas/MethodPattern'
        path:
          type: string
        binding:
          $ref: '#/components/schemas/GatewayBindingData'
        security:
          type: string
    RouteResponseData:
      type: object
      title: RouteResponseData
      required:
      - method
      - path
      - binding
      properties:
        method:
          $ref: '#/components/schemas/MethodPattern'
        path:
          type: string
        security:
          type: string
        binding:
          $ref: '#/components/schemas/GatewayBindingResponseData'
    ScanCursor:
      type: object
      title: ScanCursor
      required:
      - cursor
      - layer
      properties:
        cursor:
          type: integer
          format: uint64
        layer:
          type: integer
          format: uint64
    SecuritySchemeData:
      type: object
      title: SecuritySchemeData
      required:
      - providerType
      - schemeIdentifier
      - clientId
      - clientSecret
      - redirectUrl
      - scopes
      properties:
        providerType:
          $ref: '#/components/schemas/Provider'
        schemeIdentifier:
          type: string
        clientId:
          type: string
        clientSecret:
          type: string
        redirectUrl:
          type: string
        scopes:
          type: array
          items:
            type: string
    SetSpanAttributeParameters:
      type: object
      title: SetSpanAttributeParameters
      required:
      - timestamp
      - spanId
      - key
      - value
      properties:
        timestamp:
          type: string
          format: date-time
        spanId:
          type: string
        key:
          type: string
        value:
          $ref: '#/components/schemas/PublicAttributeValue'
    ShardId:
      type: object
      title: ShardId
      required:
      - value
      properties:
        value:
          type: integer
          format: int64
    SnapshotBasedUpdateParameters:
      type: object
      title: SnapshotBasedUpdateParameters
      required:
      - payload
      properties:
        payload:
          type: array
          items:
            type: integer
            format: uint8
    StartSpanParameters:
      type: object
      title: StartSpanParameters
      required:
      - timestamp
      - spanId
      - attributes
      properties:
        timestamp:
          type: string
          format: date-time
        spanId:
          type: string
        parentId:
          type: string
        linkedContext:
          type: string
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/PublicAttribute'
    StringAttributeValue:
      type: object
      title: StringAttributeValue
      required:
      - value
      properties:
        value:
          type: string
    StringFilterComparator:
      type: string
      enum:
      - Equal
      - NotEqual
      - Like
      - NotLike
    SuccessfulUpdate:
      type: object
      title: SuccessfulUpdate
      required:
      - timestamp
      - targetVersion
      properties:
        timestamp:
          type: string
          format: date-time
        targetVersion:
          type: integer
          format: uint64
    SuccessfulUpdateParameters:
      type: object
      title: SuccessfulUpdateParameters
      required:
      - timestamp
      - target_version
      - new_component_size
      - new_active_plugins
      properties:
        timestamp:
          type: string
          format: date-time
        target_version:
          type: integer
          format: uint64
        new_component_size:
          type: integer
          format: uint64
        new_active_plugins:
          type: array
          items:
            $ref: '#/components/schemas/PluginInstallationDescription'
    TimestampParameter:
      type: object
      title: TimestampParameter
      required:
      - timestamp
      properties:
        timestamp:
          type: string
          format: date-time
    TypeAnnotatedValue:
      type: object
      required:
      - typ
      - value
      properties:
        typ:
          $ref: '#/components/schemas/AnalysedType'
        value: {}
    TypeBool:
      type: object
      title: TypeBool
    TypeChr:
      type: object
      title: TypeChr
    TypeEnum:
      type: object
      title: TypeEnum
      required:
      - cases
      properties:
        cases:
          type: array
          items:
            type: string
    TypeF32:
      type: object
      title: TypeF32
    TypeF64:
      type: object
      title: TypeF64
    TypeFlags:
      type: object
      title: TypeFlags
      required:
      - names
      properties:
        names:
          type: array
          items:
            type: string
    TypeHandle:
      type: object
      title: TypeHandle
      required:
      - resource_id
      - mode
      properties:
        resource_id:
          type: integer
          format: uint64
        mode:
          $ref: '#/components/schemas/AnalysedResourceMode'
    TypeList:
      type: object
      title: TypeList
      required:
      - inner
      properties:
        inner:
          $ref: '#/components/schemas/AnalysedType'
    TypeOption:
      type: object
      title: TypeOption
      required:
      - inner
      properties:
        inner:
          $ref: '#/components/schemas/AnalysedType'
    TypeRecord:
      type: object
      title: TypeRecord
      required:
      - fields
      properties:
        fields:
          type: array
          items:
            $ref: '#/components/schemas/NameTypePair'
    TypeResult:
      type: object
      title: TypeResult
      properties:
        ok:
          $ref: '#/components/schemas/AnalysedType'
        err:
          $ref: '#/components/schemas/AnalysedType'
    TypeS16:
      type: object
      title: TypeS16
    TypeS32:
      type: object
      title: TypeS32
    TypeS64:
      type: object
      title: TypeS64
    TypeS8:
      type: object
      title: TypeS8
    TypeStr:
      type: object
      title: TypeStr
    TypeTuple:
      type: object
      title: TypeTuple
      required:
      - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/AnalysedType'
    TypeU16:
      type: object
      title: TypeU16
    TypeU32:
      type: object
      title: TypeU32
    TypeU64:
      type: object
      title: TypeU64
    TypeU8:
      type: object
      title: TypeU8
    TypeVariant:
      type: object
      title: TypeVariant
      required:
      - cases
      properties:
        cases:
          type: array
          items:
            $ref: '#/components/schemas/NameOptionTypePair'
    UpdateRecord:
      type: object
      oneOf:
      - $ref: '#/components/schemas/UpdateRecord_PendingUpdate'
      - $ref: '#/components/schemas/UpdateRecord_SuccessfulUpdate'
      - $ref: '#/components/schemas/UpdateRecord_FailedUpdate'
      discriminator:
        propertyName: type
        mapping:
          pendingUpdate: '#/components/schemas/UpdateRecord_PendingUpdate'
          successfulUpdate: '#/components/schemas/UpdateRecord_SuccessfulUpdate'
          failedUpdate: '#/components/schemas/UpdateRecord_FailedUpdate'
    UpdateRecord_FailedUpdate:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - failedUpdate
            example: failedUpdate
      - $ref: '#/components/schemas/FailedUpdate'
    UpdateRecord_PendingUpdate:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - pendingUpdate
            example: pendingUpdate
      - $ref: '#/components/schemas/PendingUpdate'
    UpdateRecord_SuccessfulUpdate:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - successfulUpdate
            example: successfulUpdate
      - $ref: '#/components/schemas/SuccessfulUpdate'
    UpdateWorkerRequest:
      type: object
      title: UpdateWorkerRequest
      required:
      - mode
      - targetVersion
      properties:
        mode:
          $ref: '#/components/schemas/WorkerUpdateMode'
        targetVersion:
          type: integer
          format: uint64
    UpdateWorkerResponse:
      type: object
      title: UpdateWorkerResponse
    ValidationErrorsBody:
      type: object
      title: ValidationErrorsBody
      required:
      - errors
      properties:
        errors:
          type: array
          items:
            type: string
    ValueAndOptionalType:
      type: object
      required:
      - value
      properties:
        typ:
          $ref: '#/components/schemas/AnalysedType'
        value: {}
    ValueAndType:
      type: object
      required:
      - typ
      - value
      properties:
        typ:
          $ref: '#/components/schemas/AnalysedType'
        value: {}
    VersionInfo:
      type: object
      title: VersionInfo
      required:
      - version
      properties:
        version:
          type: string
    VersionedComponentId:
      type: object
      title: VersionedComponentId
      required:
      - componentId
      - version
      properties:
        componentId:
          type: string
          format: uuid
        version:
          type: integer
          format: uint64
    WorkerAndFilter:
      type: object
      title: WorkerAndFilter
      required:
      - filters
      properties:
        filters:
          type: array
          items:
            $ref: '#/components/schemas/WorkerFilter'
    WorkerCreatedAtFilter:
      type: object
      title: WorkerCreatedAtFilter
      required:
      - comparator
      - value
      properties:
        comparator:
          $ref: '#/components/schemas/FilterComparator'
        value:
          type: string
          format: date-time
    WorkerCreationRequest:
      type: object
      title: WorkerCreationRequest
      required:
      - name
      - args
      - env
      properties:
        name:
          type: string
        args:
          type: array
          items:
            type: string
        env:
          type: object
          additionalProperties:
            type: string
    WorkerCreationResponse:
      type: object
      title: WorkerCreationResponse
      required:
      - workerId
      - componentVersion
      properties:
        workerId:
          $ref: '#/components/schemas/WorkerId'
        componentVersion:
          type: integer
          format: uint64
    WorkerEnvFilter:
      type: object
      title: WorkerEnvFilter
      required:
      - name
      - comparator
      - value
      properties:
        name:
          type: string
        comparator:
          $ref: '#/components/schemas/StringFilterComparator'
        value:
          type: string
    WorkerFilter:
      type: object
      oneOf:
      - $ref: '#/components/schemas/WorkerFilter_WorkerNameFilter'
      - $ref: '#/components/schemas/WorkerFilter_WorkerStatusFilter'
      - $ref: '#/components/schemas/WorkerFilter_WorkerVersionFilter'
      - $ref: '#/components/schemas/WorkerFilter_WorkerCreatedAtFilter'
      - $ref: '#/components/schemas/WorkerFilter_WorkerEnvFilter'
      - $ref: '#/components/schemas/WorkerFilter_WorkerAndFilter'
      - $ref: '#/components/schemas/WorkerFilter_WorkerOrFilter'
      - $ref: '#/components/schemas/WorkerFilter_WorkerNotFilter'
      discriminator:
        propertyName: type
        mapping:
          Name: '#/components/schemas/WorkerFilter_WorkerNameFilter'
          Status: '#/components/schemas/WorkerFilter_WorkerStatusFilter'
          Version: '#/components/schemas/WorkerFilter_WorkerVersionFilter'
          CreatedAt: '#/components/schemas/WorkerFilter_WorkerCreatedAtFilter'
          Env: '#/components/schemas/WorkerFilter_WorkerEnvFilter'
          And: '#/components/schemas/WorkerFilter_WorkerAndFilter'
          Or: '#/components/schemas/WorkerFilter_WorkerOrFilter'
          Not: '#/components/schemas/WorkerFilter_WorkerNotFilter'
    WorkerFilter_WorkerAndFilter:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - And
            example: And
      - $ref: '#/components/schemas/WorkerAndFilter'
    WorkerFilter_WorkerCreatedAtFilter:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - CreatedAt
            example: CreatedAt
      - $ref: '#/components/schemas/WorkerCreatedAtFilter'
    WorkerFilter_WorkerEnvFilter:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - Env
            example: Env
      - $ref: '#/components/schemas/WorkerEnvFilter'
    WorkerFilter_WorkerNameFilter:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - Name
            example: Name
      - $ref: '#/components/schemas/WorkerNameFilter'
    WorkerFilter_WorkerNotFilter:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - Not
            example: Not
      - $ref: '#/components/schemas/WorkerNotFilter'
    WorkerFilter_WorkerOrFilter:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - Or
            example: Or
      - $ref: '#/components/schemas/WorkerOrFilter'
    WorkerFilter_WorkerStatusFilter:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - Status
            example: Status
      - $ref: '#/components/schemas/WorkerStatusFilter'
    WorkerFilter_WorkerVersionFilter:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - Version
            example: Version
      - $ref: '#/components/schemas/WorkerVersionFilter'
    WorkerId:
      type: object
      title: WorkerId
      required:
      - componentId
      - workerName
      properties:
        componentId:
          type: string
          format: uuid
        workerName:
          type: string
    WorkerMetadata:
      type: object
      title: WorkerMetadata
      required:
      - workerId
      - accountId
      - args
      - env
      - status
      - componentVersion
      - retryCount
      - pendingInvocationCount
      - updates
      - createdAt
      - componentSize
      - totalLinearMemorySize
      - ownedResources
      - activePlugins
      properties:
        workerId:
          $ref: '#/components/schemas/WorkerId'
        accountId:
          type: string
        args:
          type: array
          items:
            type: string
        env:
          type: object
          additionalProperties:
            type: string
        status:
          $ref: '#/components/schemas/WorkerStatus'
        componentVersion:
          type: integer
          format: uint64
        retryCount:
          type: integer
          format: uint64
        pendingInvocationCount:
          type: integer
          format: uint64
        updates:
          type: array
          items:
            $ref: '#/components/schemas/UpdateRecord'
        createdAt:
          type: string
          format: date-time
        lastError:
          type: string
        componentSize:
          type: integer
          format: uint64
        totalLinearMemorySize:
          type: integer
          format: uint64
        ownedResources:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ResourceMetadata'
        activePlugins:
          type: array
          items:
            type: string
            format: uuid
    WorkerNameFilter:
      type: object
      title: WorkerNameFilter
      required:
      - comparator
      - value
      properties:
        comparator:
          $ref: '#/components/schemas/StringFilterComparator'
        value:
          type: string
    WorkerNotFilter:
      type: object
      title: WorkerNotFilter
      required:
      - filter
      properties:
        filter:
          $ref: '#/components/schemas/WorkerFilter'
    WorkerOrFilter:
      type: object
      title: WorkerOrFilter
      required:
      - filters
      properties:
        filters:
          type: array
          items:
            $ref: '#/components/schemas/WorkerFilter'
    WorkerServiceErrorsBody:
      type: object
      oneOf:
      - $ref: '#/components/schemas/WorkerServiceErrorsBody_MessagesErrorsBody'
      - $ref: '#/components/schemas/WorkerServiceErrorsBody_ValidationErrorsBody'
      discriminator:
        propertyName: type
        mapping:
          Messages: '#/components/schemas/WorkerServiceErrorsBody_MessagesErrorsBody'
          Validation: '#/components/schemas/WorkerServiceErrorsBody_ValidationErrorsBody'
    WorkerServiceErrorsBody_MessagesErrorsBody:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - Messages
            example: Messages
      - $ref: '#/components/schemas/MessagesErrorsBody'
    WorkerServiceErrorsBody_ValidationErrorsBody:
      allOf:
      - type: object
        required:
        - type
        properties:
          type:
            type: string
            enum:
            - Validation
            example: Validation
      - $ref: '#/components/schemas/ValidationErrorsBody'
    WorkerStatus:
      type: string
      description: |-
        Represents last known status of a worker

        This is always recorded together with the current oplog index, and it can only be used
        as a source of truth if there are no newer oplog entries since the record.
      enum:
      - Running
      - Idle
      - Suspended
      - Interrupted
      - Retrying
      - Failed
      - Exited
    WorkerStatusFilter:
      type: object
      title: WorkerStatusFilter
      required:
      - comparator
      - value
      properties:
        comparator:
          $ref: '#/components/schemas/FilterComparator'
        value:
          $ref: '#/components/schemas/WorkerStatus'
    WorkerUpdateMode:
      type: string
      enum:
      - Automatic
      - Manual
    WorkerVersionFilter:
      type: object
      title: WorkerVersionFilter
      required:
      - comparator
      - value
      properties:
        comparator:
          $ref: '#/components/schemas/FilterComparator'
        value:
          type: integer
          format: uint64
    WorkersMetadataRequest:
      type: object
      title: WorkersMetadataRequest
      properties:
        filter:
          $ref: '#/components/schemas/WorkerFilter'
        cursor:
          $ref: '#/components/schemas/ScanCursor'
        count:
          type: integer
          format: uint64
        precise:
          type: boolean
    WorkersMetadataResponse:
      type: object
      title: WorkersMetadataResponse
      required:
      - workers
      properties:
        workers:
          type: array
          items:
            $ref: '#/components/schemas/WorkerMetadata'
        cursor:
          $ref: '#/components/schemas/ScanCursor'
    WriteRemoteBatchedParameters:
      type: object
      title: WriteRemoteBatchedParameters
      properties:
        index:
          type: integer
          format: uint64
  securitySchemes:
    Cookie:
      type: apiKey
      name: GOLEM_SESSION
      in: cookie
    Token:
      type: http
      scheme: bearer

