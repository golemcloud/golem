// Generated by `wit-bindgen` 0.16.0. DO NOT EDIT!
pub mod exports {
  pub mod golem {
    pub mod component {
      
      #[allow(clippy::all)]
      pub mod api {
        #[used]
        #[doc(hidden)]
        #[cfg(target_arch = "wasm32")]
        static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "golem:component/api#f1"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_f1(arg0: i64,) -> i64 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::f1(arg0 as u64);
            wit_bindgen::rt::as_i64(result0)
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "golem:component/api#f2"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_f2() -> i64 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::f2();
            wit_bindgen::rt::as_i64(result0)
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "golem:component/api#f3"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_f3() -> i64 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::f3();
            wit_bindgen::rt::as_i64(result0)
          }
        };
        use super::super::super::super::super::Component as _GuestImpl;
        pub trait Guest {
          fn f1(speed_ms: u64,) -> u64;
          fn f2() -> u64;
          fn f3() -> u64;
        }
        
      }
      
    }
  }
}

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:update-test-v1"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 332] = [3, 0, 14, 117, 112, 100, 97, 116, 101, 45, 116, 101, 115, 116, 45, 118, 49, 0, 97, 115, 109, 13, 0, 1, 0, 7, 71, 1, 65, 2, 1, 66, 5, 1, 64, 1, 8, 115, 112, 101, 101, 100, 45, 109, 115, 119, 0, 119, 4, 0, 2, 102, 49, 1, 0, 1, 64, 0, 0, 119, 4, 0, 2, 102, 50, 1, 1, 4, 0, 2, 102, 51, 1, 1, 4, 1, 19, 103, 111, 108, 101, 109, 58, 99, 111, 109, 112, 111, 110, 101, 110, 116, 47, 97, 112, 105, 5, 0, 11, 9, 1, 0, 3, 97, 112, 105, 3, 0, 0, 7, 109, 1, 65, 2, 1, 65, 2, 1, 66, 5, 1, 64, 1, 8, 115, 112, 101, 101, 100, 45, 109, 115, 119, 0, 119, 4, 0, 2, 102, 49, 1, 0, 1, 64, 0, 0, 119, 4, 0, 2, 102, 50, 1, 1, 4, 0, 2, 102, 51, 1, 1, 4, 1, 19, 103, 111, 108, 101, 109, 58, 99, 111, 109, 112, 111, 110, 101, 110, 116, 47, 97, 112, 105, 5, 0, 4, 1, 30, 103, 111, 108, 101, 109, 58, 99, 111, 109, 112, 111, 110, 101, 110, 116, 47, 117, 112, 100, 97, 116, 101, 45, 116, 101, 115, 116, 45, 118, 49, 4, 0, 11, 20, 1, 0, 14, 117, 112, 100, 97, 116, 101, 45, 116, 101, 115, 116, 45, 118, 49, 3, 2, 0, 0, 16, 12, 112, 97, 99, 107, 97, 103, 101, 45, 100, 111, 99, 115, 0, 123, 125, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 49, 56, 46, 50, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 54, 46, 48];

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_section() {}
