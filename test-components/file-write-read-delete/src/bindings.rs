// Generated by `wit-bindgen` 0.16.0. DO NOT EDIT!
const _: () = {
  
  #[doc(hidden)]
  #[export_name = "run"]
  #[allow(non_snake_case)]
  unsafe extern "C" fn __export_run() -> i32 {
    #[allow(unused_imports)]
    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
    
    // Before executing any other code, use this function to run all static
    // constructors, if they have not yet been run. This is a hack required
    // to work around wasi-libc ctors calling import functions to initialize
    // the environment.
    //
    // This functionality will be removed once rust 1.69.0 is stable, at which
    // point wasi-libc will no longer have this behavior.
    //
    // See
    // https://github.com/bytecodealliance/preview2-prototyping/issues/99
    // for more details.
    #[cfg(target_arch="wasm32")]
    wit_bindgen::rt::run_ctors_once();
    
    let result0 = <_GuestImpl as Guest>::run();
    let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
    let (t2_0, t2_1, t2_2, ) = result0;
    match t2_0 {
      Some(e) => {
        *((ptr1 + 0) as *mut u8) = (1i32) as u8;
        let vec3 = (e.into_bytes()).into_boxed_slice();
        let ptr3 = vec3.as_ptr() as i32;
        let len3 = vec3.len() as i32;
        ::core::mem::forget(vec3);
        *((ptr1 + 8) as *mut i32) = len3;
        *((ptr1 + 4) as *mut i32) = ptr3;
      },
      None => {
        {
          *((ptr1 + 0) as *mut u8) = (0i32) as u8;
        }
      },
    };match t2_1 {
      Some(e) => {
        *((ptr1 + 12) as *mut u8) = (1i32) as u8;
        let vec4 = (e.into_bytes()).into_boxed_slice();
        let ptr4 = vec4.as_ptr() as i32;
        let len4 = vec4.len() as i32;
        ::core::mem::forget(vec4);
        *((ptr1 + 20) as *mut i32) = len4;
        *((ptr1 + 16) as *mut i32) = ptr4;
      },
      None => {
        {
          *((ptr1 + 12) as *mut u8) = (0i32) as u8;
        }
      },
    };match t2_2 {
      Some(e) => {
        *((ptr1 + 24) as *mut u8) = (1i32) as u8;
        let vec5 = (e.into_bytes()).into_boxed_slice();
        let ptr5 = vec5.as_ptr() as i32;
        let len5 = vec5.len() as i32;
        ::core::mem::forget(vec5);
        *((ptr1 + 32) as *mut i32) = len5;
        *((ptr1 + 28) as *mut i32) = ptr5;
      },
      None => {
        {
          *((ptr1 + 24) as *mut u8) = (0i32) as u8;
        }
      },
    };ptr1
  }
  
  const _: () = {
    #[doc(hidden)]
    #[export_name = "cabi_post_run"]
    #[allow(non_snake_case)]
    unsafe extern "C" fn __post_return_run(arg0: i32,) {
      let l0 = i32::from(*((arg0 + 0) as *const u8));
      match l0 {
        0 => (),
        _ => {
          let l1 = *((arg0 + 4) as *const i32);
          let l2 = *((arg0 + 8) as *const i32);
          wit_bindgen::rt::dealloc(l1, (l2) as usize, 1);
        },
      }
      let l3 = i32::from(*((arg0 + 12) as *const u8));
      match l3 {
        0 => (),
        _ => {
          let l4 = *((arg0 + 16) as *const i32);
          let l5 = *((arg0 + 20) as *const i32);
          wit_bindgen::rt::dealloc(l4, (l5) as usize, 1);
        },
      }
      let l6 = i32::from(*((arg0 + 24) as *const u8));
      match l6 {
        0 => (),
        _ => {
          let l7 = *((arg0 + 28) as *const i32);
          let l8 = *((arg0 + 32) as *const i32);
          wit_bindgen::rt::dealloc(l7, (l8) as usize, 1);
        },
      }
    }
  };
};
use super::Component as _GuestImpl;
pub trait Guest {
  fn run() -> (Option<wit_bindgen::rt::string::String>,Option<wit_bindgen::rt::string::String>,Option<wit_bindgen::rt::string::String>,);
}

#[allow(unused_imports)]
use wit_bindgen::rt::{alloc, vec::Vec, string::String};

#[repr(align(4))]
struct _RetArea([u8; 36]);
static mut _RET_AREA: _RetArea = _RetArea([0; 36]);

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:file-write-read-delete"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 219] = [3, 0, 22, 102, 105, 108, 101, 45, 119, 114, 105, 116, 101, 45, 114, 101, 97, 100, 45, 100, 101, 108, 101, 116, 101, 0, 97, 115, 109, 13, 0, 1, 0, 7, 64, 1, 65, 2, 1, 65, 4, 1, 107, 115, 1, 111, 3, 0, 0, 0, 1, 64, 0, 0, 1, 4, 0, 3, 114, 117, 110, 1, 2, 4, 1, 31, 103, 111, 108, 101, 109, 58, 105, 116, 47, 102, 105, 108, 101, 45, 119, 114, 105, 116, 101, 45, 114, 101, 97, 100, 45, 100, 101, 108, 101, 116, 101, 4, 0, 11, 28, 1, 0, 22, 102, 105, 108, 101, 45, 119, 114, 105, 116, 101, 45, 114, 101, 97, 100, 45, 100, 101, 108, 101, 116, 101, 3, 0, 0, 0, 16, 12, 112, 97, 99, 107, 97, 103, 101, 45, 100, 111, 99, 115, 0, 123, 125, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 49, 56, 46, 50, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 54, 46, 48];

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_section() {}
