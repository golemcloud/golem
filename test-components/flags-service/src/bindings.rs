// Generated by `wit-bindgen` 0.16.0. DO NOT EDIT!
pub mod exports {
  pub mod golem {
    pub mod it {
      
      #[allow(clippy::all)]
      pub mod api {
        #[used]
        #[doc(hidden)]
        #[cfg(target_arch = "wasm32")]
        static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
        wit_bindgen::bitflags::bitflags! {
          #[derive(PartialEq, Eq, PartialOrd, Ord, Hash, Debug, Clone, Copy)]
          pub struct Permissions: u8 {
            const READ = 1 << 0;
            const WRITE = 1 << 1;
            const EXEC = 1 << 2;
            const CLOSE = 1 << 3;
          }
        }
        #[derive(Clone)]
        pub struct Task {
          pub name: wit_bindgen::rt::string::String,
          pub permissions: Permissions,
        }
        impl ::core::fmt::Debug for Task {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("Task").field("name", &self.name).field("permissions", &self.permissions).finish()
          }
        }
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "golem:it/api#create-task"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_create_task(arg0: i32,arg1: i32,arg2: i32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let len0 = arg1 as usize;
            let bytes0 = Vec::from_raw_parts(arg0 as *mut _, len0, len0);
            let result1 = <_GuestImpl as Guest>::create_task(Task{
              name: wit_bindgen::rt::string_lift(bytes0),
              permissions: Permissions::empty() | Permissions::from_bits_retain(((arg2 as u8) << 0) as _),
            });
            let ptr2 = _RET_AREA.0.as_mut_ptr() as i32;
            let Task{ name:name3, permissions:permissions3, } = result1;
            let vec4 = (name3.into_bytes()).into_boxed_slice();
            let ptr4 = vec4.as_ptr() as i32;
            let len4 = vec4.len() as i32;
            ::core::mem::forget(vec4);
            *((ptr2 + 4) as *mut i32) = len4;
            *((ptr2 + 0) as *mut i32) = ptr4;
            let flags5 = permissions3;
            *((ptr2 + 8) as *mut u8) = ((flags5.bits() >> 0) as i32) as u8;
            ptr2
          }
          
          const _: () = {
            #[doc(hidden)]
            #[export_name = "cabi_post_golem:it/api#create-task"]
            #[allow(non_snake_case)]
            unsafe extern "C" fn __post_return_create_task(arg0: i32,) {
              let l0 = *((arg0 + 0) as *const i32);
              let l1 = *((arg0 + 4) as *const i32);
              wit_bindgen::rt::dealloc(l0, (l1) as usize, 1);
            }
          };
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "golem:it/api#get-tasks"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_get_tasks() -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::get_tasks();
            let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
            let vec5 = result0;
            let len5 = vec5.len() as i32;
            let layout5 = alloc::Layout::from_size_align_unchecked(vec5.len() * 12, 4);
            let result5 = if layout5.size() != 0
            {
              let ptr = alloc::alloc(layout5);
              if ptr.is_null()
              {
                alloc::handle_alloc_error(layout5);
              }
              ptr
            }else {{
              ::core::ptr::null_mut()
            }};
            for (i, e) in vec5.into_iter().enumerate() {
              let base = result5 as i32 + (i as i32) * 12;
              {
                let Task{ name:name2, permissions:permissions2, } = e;
                let vec3 = (name2.into_bytes()).into_boxed_slice();
                let ptr3 = vec3.as_ptr() as i32;
                let len3 = vec3.len() as i32;
                ::core::mem::forget(vec3);
                *((base + 4) as *mut i32) = len3;
                *((base + 0) as *mut i32) = ptr3;
                let flags4 = permissions2;
                *((base + 8) as *mut u8) = ((flags4.bits() >> 0) as i32) as u8;
              }
            }
            *((ptr1 + 4) as *mut i32) = len5;
            *((ptr1 + 0) as *mut i32) = result5 as i32;
            ptr1
          }
          
          const _: () = {
            #[doc(hidden)]
            #[export_name = "cabi_post_golem:it/api#get-tasks"]
            #[allow(non_snake_case)]
            unsafe extern "C" fn __post_return_get_tasks(arg0: i32,) {
              let l2 = *((arg0 + 0) as *const i32);
              let l3 = *((arg0 + 4) as *const i32);
              let base4 = l2;
              let len4 = l3;
              for i in 0..len4 {
                let base = base4 + i *12;
                {
                  let l0 = *((base + 0) as *const i32);
                  let l1 = *((base + 4) as *const i32);
                  wit_bindgen::rt::dealloc(l0, (l1) as usize, 1);
                }
              }
              wit_bindgen::rt::dealloc(base4, (len4 as usize) * 12, 4);
            }
          };
        };
        use super::super::super::super::super::Component as _GuestImpl;
        pub trait Guest {
          fn create_task(input: Task,) -> Task;
          fn get_tasks() -> wit_bindgen::rt::vec::Vec::<Task>;
        }
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        
        #[repr(align(4))]
        struct _RetArea([u8; 12]);
        static mut _RET_AREA: _RetArea = _RetArea([0; 12]);
        
      }
      
    }
  }
}

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:flags-service"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 476] = [3, 0, 13, 102, 108, 97, 103, 115, 45, 115, 101, 114, 118, 105, 99, 101, 0, 97, 115, 109, 13, 0, 1, 0, 7, 147, 1, 1, 65, 2, 1, 66, 9, 1, 110, 4, 4, 114, 101, 97, 100, 5, 119, 114, 105, 116, 101, 4, 101, 120, 101, 99, 5, 99, 108, 111, 115, 101, 4, 0, 11, 112, 101, 114, 109, 105, 115, 115, 105, 111, 110, 115, 3, 0, 0, 1, 114, 2, 4, 110, 97, 109, 101, 115, 11, 112, 101, 114, 109, 105, 115, 115, 105, 111, 110, 115, 1, 4, 0, 4, 116, 97, 115, 107, 3, 0, 2, 1, 64, 1, 5, 105, 110, 112, 117, 116, 3, 0, 3, 4, 0, 11, 99, 114, 101, 97, 116, 101, 45, 116, 97, 115, 107, 1, 4, 1, 112, 3, 1, 64, 0, 0, 5, 4, 0, 9, 103, 101, 116, 45, 116, 97, 115, 107, 115, 1, 6, 4, 1, 12, 103, 111, 108, 101, 109, 58, 105, 116, 47, 97, 112, 105, 5, 0, 11, 9, 1, 0, 3, 97, 112, 105, 3, 0, 0, 7, 177, 1, 1, 65, 2, 1, 65, 2, 1, 66, 9, 1, 110, 4, 4, 114, 101, 97, 100, 5, 119, 114, 105, 116, 101, 4, 101, 120, 101, 99, 5, 99, 108, 111, 115, 101, 4, 0, 11, 112, 101, 114, 109, 105, 115, 115, 105, 111, 110, 115, 3, 0, 0, 1, 114, 2, 4, 110, 97, 109, 101, 115, 11, 112, 101, 114, 109, 105, 115, 115, 105, 111, 110, 115, 1, 4, 0, 4, 116, 97, 115, 107, 3, 0, 2, 1, 64, 1, 5, 105, 110, 112, 117, 116, 3, 0, 3, 4, 0, 11, 99, 114, 101, 97, 116, 101, 45, 116, 97, 115, 107, 1, 4, 1, 112, 3, 1, 64, 0, 0, 5, 4, 0, 9, 103, 101, 116, 45, 116, 97, 115, 107, 115, 1, 6, 4, 1, 12, 103, 111, 108, 101, 109, 58, 105, 116, 47, 97, 112, 105, 5, 0, 4, 1, 22, 103, 111, 108, 101, 109, 58, 105, 116, 47, 102, 108, 97, 103, 115, 45, 115, 101, 114, 118, 105, 99, 101, 4, 0, 11, 19, 1, 0, 13, 102, 108, 97, 103, 115, 45, 115, 101, 114, 118, 105, 99, 101, 3, 2, 0, 0, 16, 12, 112, 97, 99, 107, 97, 103, 101, 45, 100, 111, 99, 115, 0, 123, 125, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 49, 56, 46, 50, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 54, 46, 48];

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_section() {}
