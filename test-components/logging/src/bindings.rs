// Generated by `wit-bindgen` 0.36.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod golem {
        pub mod it {
            #[allow(dead_code, clippy::all)]
            pub mod api {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_init_cabi<T: Guest>() {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    T::init();
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_forever_random_entries_cabi<T: Guest>() {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    T::forever_random_entries();
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_some_random_entries_cabi<T: Guest>() {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    T::some_random_entries();
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_forever_random_entries_with_log_cabi<T: Guest>() {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    T::forever_random_entries_with_log();
                }
                pub trait Guest {
                    fn init();
                    fn forever_random_entries();
                    fn some_random_entries();
                    fn forever_random_entries_with_log();
                }
                #[doc(hidden)]
                macro_rules! __export_golem_it_api_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[export_name = "golem:it/api#init"] unsafe
                        extern "C" fn export_init() { $($path_to_types)*::
                        _export_init_cabi::<$ty > () } #[export_name =
                        "golem:it/api#forever-random-entries"] unsafe extern "C" fn
                        export_forever_random_entries() { $($path_to_types)*::
                        _export_forever_random_entries_cabi::<$ty > () } #[export_name =
                        "golem:it/api#some-random-entries"] unsafe extern "C" fn
                        export_some_random_entries() { $($path_to_types)*::
                        _export_some_random_entries_cabi::<$ty > () } #[export_name =
                        "golem:it/api#forever-random-entries-with-log"] unsafe extern "C"
                        fn export_forever_random_entries_with_log() {
                        $($path_to_types)*::
                        _export_forever_random_entries_with_log_cabi::<$ty > () } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_golem_it_api_cabi;
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
}
/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_logging_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::golem::it::api::__export_golem_it_api_cabi!($ty with_types_in
        $($path_to_types_root)*:: exports::golem::it::api);
    };
}
#[doc(inline)]
pub(crate) use __export_logging_impl as export;
#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.36.0:golem:it:logging:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 274] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\x94\x01\x01A\x02\x01\
A\x02\x01B\x05\x01@\0\x01\0\x04\0\x04init\x01\0\x04\0\x16forever-random-entries\x01\
\0\x04\0\x13some-random-entries\x01\0\x04\0\x1fforever-random-entries-with-log\x01\
\0\x04\0\x0cgolem:it/api\x05\0\x04\0\x10golem:it/logging\x04\0\x0b\x0d\x01\0\x07\
logging\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.22\
0.0\x10wit-bindgen-rust\x060.36.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
