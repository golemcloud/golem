// Generated by `wit-bindgen` 0.16.0. DO NOT EDIT!
pub mod exports {
  pub mod golem {
    pub mod it {
      
      #[allow(clippy::all)]
      pub mod api {
        #[used]
        #[doc(hidden)]
        #[cfg(target_arch = "wasm32")]
        static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
        #[derive(Clone)]
        pub struct Data {
          pub id: wit_bindgen::rt::string::String,
          pub name: wit_bindgen::rt::string::String,
          pub desc: wit_bindgen::rt::string::String,
          pub timestamp: u64,
        }
        impl ::core::fmt::Debug for Data {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("Data").field("id", &self.id).field("name", &self.name).field("desc", &self.desc).field("timestamp", &self.timestamp).finish()
          }
        }
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "golem:it/api#echo"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_echo(arg0: i32,arg1: i32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let len0 = arg1 as usize;
            let bytes0 = Vec::from_raw_parts(arg0 as *mut _, len0, len0);
            let result1 = <_GuestImpl as Guest>::echo(wit_bindgen::rt::string_lift(bytes0));
            let ptr2 = _RET_AREA.0.as_mut_ptr() as i32;
            let vec3 = (result1.into_bytes()).into_boxed_slice();
            let ptr3 = vec3.as_ptr() as i32;
            let len3 = vec3.len() as i32;
            ::core::mem::forget(vec3);
            *((ptr2 + 4) as *mut i32) = len3;
            *((ptr2 + 0) as *mut i32) = ptr3;
            ptr2
          }
          
          const _: () = {
            #[doc(hidden)]
            #[export_name = "cabi_post_golem:it/api#echo"]
            #[allow(non_snake_case)]
            unsafe extern "C" fn __post_return_echo(arg0: i32,) {
              let l0 = *((arg0 + 0) as *const i32);
              let l1 = *((arg0 + 4) as *const i32);
              wit_bindgen::rt::dealloc(l0, (l1) as usize, 1);
            }
          };
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "golem:it/api#calculate"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_calculate(arg0: i64,) -> i64 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::calculate(arg0 as u64);
            wit_bindgen::rt::as_i64(result0)
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "golem:it/api#process"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_process(arg0: i32,arg1: i32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let base10 = arg0;
            let len10 = arg1;
            let mut result10 = Vec::with_capacity(len10 as usize);
            for i in 0..len10 {
              let base = base10 + i * 32;
              let e10 = {
                let l0 = *((base + 0) as *const i32);
                let l1 = *((base + 4) as *const i32);
                let len2 = l1 as usize;
                let bytes2 = Vec::from_raw_parts(l0 as *mut _, len2, len2);
                let l3 = *((base + 8) as *const i32);
                let l4 = *((base + 12) as *const i32);
                let len5 = l4 as usize;
                let bytes5 = Vec::from_raw_parts(l3 as *mut _, len5, len5);
                let l6 = *((base + 16) as *const i32);
                let l7 = *((base + 20) as *const i32);
                let len8 = l7 as usize;
                let bytes8 = Vec::from_raw_parts(l6 as *mut _, len8, len8);
                let l9 = *((base + 24) as *const i64);
                
                Data{
                  id: wit_bindgen::rt::string_lift(bytes2),
                  name: wit_bindgen::rt::string_lift(bytes5),
                  desc: wit_bindgen::rt::string_lift(bytes8),
                  timestamp: l9 as u64,
                }
              };
              result10.push(e10);
            }
            wit_bindgen::rt::dealloc(base10, (len10 as usize) * 32, 8);
            let result11 = <_GuestImpl as Guest>::process(result10);
            let ptr12 = _RET_AREA.0.as_mut_ptr() as i32;
            let vec17 = result11;
            let len17 = vec17.len() as i32;
            let layout17 = alloc::Layout::from_size_align_unchecked(vec17.len() * 32, 8);
            let result17 = if layout17.size() != 0
            {
              let ptr = alloc::alloc(layout17);
              if ptr.is_null()
              {
                alloc::handle_alloc_error(layout17);
              }
              ptr
            }else {{
              ::core::ptr::null_mut()
            }};
            for (i, e) in vec17.into_iter().enumerate() {
              let base = result17 as i32 + (i as i32) * 32;
              {
                let Data{ id:id13, name:name13, desc:desc13, timestamp:timestamp13, } = e;
                let vec14 = (id13.into_bytes()).into_boxed_slice();
                let ptr14 = vec14.as_ptr() as i32;
                let len14 = vec14.len() as i32;
                ::core::mem::forget(vec14);
                *((base + 4) as *mut i32) = len14;
                *((base + 0) as *mut i32) = ptr14;
                let vec15 = (name13.into_bytes()).into_boxed_slice();
                let ptr15 = vec15.as_ptr() as i32;
                let len15 = vec15.len() as i32;
                ::core::mem::forget(vec15);
                *((base + 12) as *mut i32) = len15;
                *((base + 8) as *mut i32) = ptr15;
                let vec16 = (desc13.into_bytes()).into_boxed_slice();
                let ptr16 = vec16.as_ptr() as i32;
                let len16 = vec16.len() as i32;
                ::core::mem::forget(vec16);
                *((base + 20) as *mut i32) = len16;
                *((base + 16) as *mut i32) = ptr16;
                *((base + 24) as *mut i64) = wit_bindgen::rt::as_i64(timestamp13);
              }
            }
            *((ptr12 + 4) as *mut i32) = len17;
            *((ptr12 + 0) as *mut i32) = result17 as i32;
            ptr12
          }
          
          const _: () = {
            #[doc(hidden)]
            #[export_name = "cabi_post_golem:it/api#process"]
            #[allow(non_snake_case)]
            unsafe extern "C" fn __post_return_process(arg0: i32,) {
              let l6 = *((arg0 + 0) as *const i32);
              let l7 = *((arg0 + 4) as *const i32);
              let base8 = l6;
              let len8 = l7;
              for i in 0..len8 {
                let base = base8 + i *32;
                {
                  let l0 = *((base + 0) as *const i32);
                  let l1 = *((base + 4) as *const i32);
                  wit_bindgen::rt::dealloc(l0, (l1) as usize, 1);
                  let l2 = *((base + 8) as *const i32);
                  let l3 = *((base + 12) as *const i32);
                  wit_bindgen::rt::dealloc(l2, (l3) as usize, 1);
                  let l4 = *((base + 16) as *const i32);
                  let l5 = *((base + 20) as *const i32);
                  wit_bindgen::rt::dealloc(l4, (l5) as usize, 1);
                }
              }
              wit_bindgen::rt::dealloc(base8, (len8 as usize) * 32, 8);
            }
          };
        };
        use super::super::super::super::super::Component as _GuestImpl;
        pub trait Guest {
          fn echo(input: wit_bindgen::rt::string::String,) -> wit_bindgen::rt::string::String;
          fn calculate(input: u64,) -> u64;
          fn process(input: wit_bindgen::rt::vec::Vec::<Data>,) -> wit_bindgen::rt::vec::Vec::<Data>;
        }
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        
        #[repr(align(4))]
        struct _RetArea([u8; 8]);
        static mut _RET_AREA: _RetArea = _RetArea([0; 8]);
        
      }
      
    }
  }
}

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:rust-component-service"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 483] = [3, 0, 22, 114, 117, 115, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 45, 115, 101, 114, 118, 105, 99, 101, 0, 97, 115, 109, 13, 0, 1, 0, 7, 137, 1, 1, 65, 2, 1, 66, 9, 1, 114, 4, 2, 105, 100, 115, 4, 110, 97, 109, 101, 115, 4, 100, 101, 115, 99, 115, 9, 116, 105, 109, 101, 115, 116, 97, 109, 112, 119, 4, 0, 4, 100, 97, 116, 97, 3, 0, 0, 1, 64, 1, 5, 105, 110, 112, 117, 116, 115, 0, 115, 4, 0, 4, 101, 99, 104, 111, 1, 2, 1, 64, 1, 5, 105, 110, 112, 117, 116, 119, 0, 119, 4, 0, 9, 99, 97, 108, 99, 117, 108, 97, 116, 101, 1, 3, 1, 112, 1, 1, 64, 1, 5, 105, 110, 112, 117, 116, 4, 0, 4, 4, 0, 7, 112, 114, 111, 99, 101, 115, 115, 1, 5, 4, 1, 12, 103, 111, 108, 101, 109, 58, 105, 116, 47, 97, 112, 105, 5, 0, 11, 9, 1, 0, 3, 97, 112, 105, 3, 0, 0, 7, 176, 1, 1, 65, 2, 1, 65, 2, 1, 66, 9, 1, 114, 4, 2, 105, 100, 115, 4, 110, 97, 109, 101, 115, 4, 100, 101, 115, 99, 115, 9, 116, 105, 109, 101, 115, 116, 97, 109, 112, 119, 4, 0, 4, 100, 97, 116, 97, 3, 0, 0, 1, 64, 1, 5, 105, 110, 112, 117, 116, 115, 0, 115, 4, 0, 4, 101, 99, 104, 111, 1, 2, 1, 64, 1, 5, 105, 110, 112, 117, 116, 119, 0, 119, 4, 0, 9, 99, 97, 108, 99, 117, 108, 97, 116, 101, 1, 3, 1, 112, 1, 1, 64, 1, 5, 105, 110, 112, 117, 116, 4, 0, 4, 4, 0, 7, 112, 114, 111, 99, 101, 115, 115, 1, 5, 4, 1, 12, 103, 111, 108, 101, 109, 58, 105, 116, 47, 97, 112, 105, 5, 0, 4, 1, 31, 103, 111, 108, 101, 109, 58, 105, 116, 47, 114, 117, 115, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 45, 115, 101, 114, 118, 105, 99, 101, 4, 0, 11, 28, 1, 0, 22, 114, 117, 115, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 45, 115, 101, 114, 118, 105, 99, 101, 3, 2, 0, 0, 16, 12, 112, 97, 99, 107, 97, 103, 101, 45, 100, 111, 99, 115, 0, 123, 125, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 49, 56, 46, 50, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 54, 46, 48];

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_section() {}
