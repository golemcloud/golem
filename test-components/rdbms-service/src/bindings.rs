// Generated by `wit-bindgen` 0.25.0. DO NOT EDIT!
// Options used:
#[allow(dead_code)]
pub mod wasi {
    #[allow(dead_code)]
    pub mod rdbms {
        #[allow(dead_code, clippy::all)]
        pub mod postgres {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[derive(Clone)]
            pub enum Error {
                ConnectionFailure(_rt::String),
                QueryParameterFailure(_rt::String),
                QueryExecutionFailure(_rt::String),
                QueryResponseFailure(_rt::String),
                Other(_rt::String),
            }
            impl ::core::fmt::Debug for Error {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        Error::ConnectionFailure(e) => {
                            f.debug_tuple("Error::ConnectionFailure").field(e).finish()
                        }
                        Error::QueryParameterFailure(e) => f
                            .debug_tuple("Error::QueryParameterFailure")
                            .field(e)
                            .finish(),
                        Error::QueryExecutionFailure(e) => f
                            .debug_tuple("Error::QueryExecutionFailure")
                            .field(e)
                            .finish(),
                        Error::QueryResponseFailure(e) => f
                            .debug_tuple("Error::QueryResponseFailure")
                            .field(e)
                            .finish(),
                        Error::Other(e) => f.debug_tuple("Error::Other").field(e).finish(),
                    }
                }
            }
            impl ::core::fmt::Display for Error {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }

            impl std::error::Error for Error {}
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Uuid {
                pub high_bits: u64,
                pub low_bits: u64,
            }
            impl ::core::fmt::Debug for Uuid {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Uuid")
                        .field("high-bits", &self.high_bits)
                        .field("low-bits", &self.low_bits)
                        .finish()
                }
            }
            #[derive(Clone, Copy)]
            pub enum IpAddress {
                Ipv4((u8, u8, u8, u8)),
                Ipv6((u16, u16, u16, u16, u16, u16, u16, u16)),
            }
            impl ::core::fmt::Debug for IpAddress {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        IpAddress::Ipv4(e) => f.debug_tuple("IpAddress::Ipv4").field(e).finish(),
                        IpAddress::Ipv6(e) => f.debug_tuple("IpAddress::Ipv6").field(e).finish(),
                    }
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct MacAddress {
                pub octets: (u8, u8, u8, u8, u8, u8),
            }
            impl ::core::fmt::Debug for MacAddress {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("MacAddress")
                        .field("octets", &self.octets)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Date {
                pub year: i32,
                pub month: u8,
                pub day: u8,
            }
            impl ::core::fmt::Debug for Date {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Date")
                        .field("year", &self.year)
                        .field("month", &self.month)
                        .field("day", &self.day)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Time {
                pub hour: u8,
                pub minute: u8,
                pub second: u8,
                pub nanosecond: u32,
            }
            impl ::core::fmt::Debug for Time {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Time")
                        .field("hour", &self.hour)
                        .field("minute", &self.minute)
                        .field("second", &self.second)
                        .field("nanosecond", &self.nanosecond)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Timestamp {
                pub date: Date,
                pub time: Time,
            }
            impl ::core::fmt::Debug for Timestamp {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Timestamp")
                        .field("date", &self.date)
                        .field("time", &self.time)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Timestamptz {
                pub timestamp: Timestamp,
                pub offset: i32,
            }
            impl ::core::fmt::Debug for Timestamptz {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Timestamptz")
                        .field("timestamp", &self.timestamp)
                        .field("offset", &self.offset)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Timetz {
                pub time: Time,
                pub offset: i32,
            }
            impl ::core::fmt::Debug for Timetz {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Timetz")
                        .field("time", &self.time)
                        .field("offset", &self.offset)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Interval {
                pub months: i32,
                pub days: i32,
                pub microseconds: i64,
            }
            impl ::core::fmt::Debug for Interval {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Interval")
                        .field("months", &self.months)
                        .field("days", &self.days)
                        .field("microseconds", &self.microseconds)
                        .finish()
                }
            }
            #[derive(Clone, Copy)]
            pub enum Int4bound {
                Included(i32),
                Excluded(i32),
                Unbounded,
            }
            impl ::core::fmt::Debug for Int4bound {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        Int4bound::Included(e) => {
                            f.debug_tuple("Int4bound::Included").field(e).finish()
                        }
                        Int4bound::Excluded(e) => {
                            f.debug_tuple("Int4bound::Excluded").field(e).finish()
                        }
                        Int4bound::Unbounded => f.debug_tuple("Int4bound::Unbounded").finish(),
                    }
                }
            }
            #[derive(Clone, Copy)]
            pub enum Int8bound {
                Included(i64),
                Excluded(i64),
                Unbounded,
            }
            impl ::core::fmt::Debug for Int8bound {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        Int8bound::Included(e) => {
                            f.debug_tuple("Int8bound::Included").field(e).finish()
                        }
                        Int8bound::Excluded(e) => {
                            f.debug_tuple("Int8bound::Excluded").field(e).finish()
                        }
                        Int8bound::Unbounded => f.debug_tuple("Int8bound::Unbounded").finish(),
                    }
                }
            }
            #[derive(Clone)]
            pub enum Numbound {
                Included(_rt::String),
                Excluded(_rt::String),
                Unbounded,
            }
            impl ::core::fmt::Debug for Numbound {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        Numbound::Included(e) => {
                            f.debug_tuple("Numbound::Included").field(e).finish()
                        }
                        Numbound::Excluded(e) => {
                            f.debug_tuple("Numbound::Excluded").field(e).finish()
                        }
                        Numbound::Unbounded => f.debug_tuple("Numbound::Unbounded").finish(),
                    }
                }
            }
            #[derive(Clone, Copy)]
            pub enum Tsbound {
                Included(Timestamp),
                Excluded(Timestamp),
                Unbounded,
            }
            impl ::core::fmt::Debug for Tsbound {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        Tsbound::Included(e) => {
                            f.debug_tuple("Tsbound::Included").field(e).finish()
                        }
                        Tsbound::Excluded(e) => {
                            f.debug_tuple("Tsbound::Excluded").field(e).finish()
                        }
                        Tsbound::Unbounded => f.debug_tuple("Tsbound::Unbounded").finish(),
                    }
                }
            }
            #[derive(Clone, Copy)]
            pub enum Tstzbound {
                Included(Timestamptz),
                Excluded(Timestamptz),
                Unbounded,
            }
            impl ::core::fmt::Debug for Tstzbound {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        Tstzbound::Included(e) => {
                            f.debug_tuple("Tstzbound::Included").field(e).finish()
                        }
                        Tstzbound::Excluded(e) => {
                            f.debug_tuple("Tstzbound::Excluded").field(e).finish()
                        }
                        Tstzbound::Unbounded => f.debug_tuple("Tstzbound::Unbounded").finish(),
                    }
                }
            }
            #[derive(Clone, Copy)]
            pub enum Datebound {
                Included(Date),
                Excluded(Date),
                Unbounded,
            }
            impl ::core::fmt::Debug for Datebound {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        Datebound::Included(e) => {
                            f.debug_tuple("Datebound::Included").field(e).finish()
                        }
                        Datebound::Excluded(e) => {
                            f.debug_tuple("Datebound::Excluded").field(e).finish()
                        }
                        Datebound::Unbounded => f.debug_tuple("Datebound::Unbounded").finish(),
                    }
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Int4range {
                pub start: Int4bound,
                pub end: Int4bound,
            }
            impl ::core::fmt::Debug for Int4range {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Int4range")
                        .field("start", &self.start)
                        .field("end", &self.end)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Int8range {
                pub start: Int8bound,
                pub end: Int8bound,
            }
            impl ::core::fmt::Debug for Int8range {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Int8range")
                        .field("start", &self.start)
                        .field("end", &self.end)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct Numrange {
                pub start: Numbound,
                pub end: Numbound,
            }
            impl ::core::fmt::Debug for Numrange {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Numrange")
                        .field("start", &self.start)
                        .field("end", &self.end)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Tsrange {
                pub start: Tsbound,
                pub end: Tsbound,
            }
            impl ::core::fmt::Debug for Tsrange {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Tsrange")
                        .field("start", &self.start)
                        .field("end", &self.end)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Tstzrange {
                pub start: Tstzbound,
                pub end: Tstzbound,
            }
            impl ::core::fmt::Debug for Tstzrange {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Tstzrange")
                        .field("start", &self.start)
                        .field("end", &self.end)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Daterange {
                pub start: Datebound,
                pub end: Datebound,
            }
            impl ::core::fmt::Debug for Daterange {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Daterange")
                        .field("start", &self.start)
                        .field("end", &self.end)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct Enumeration {
                pub name: _rt::String,
                pub value: _rt::String,
            }
            impl ::core::fmt::Debug for Enumeration {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Enumeration")
                        .field("name", &self.name)
                        .field("value", &self.value)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub enum DbColumnTypePrimitive {
                Character,
                Int2,
                Int4,
                Int8,
                Float4,
                Float8,
                Numeric,
                Boolean,
                Text,
                Varchar,
                Bpchar,
                Timestamp,
                Timestamptz,
                Date,
                Time,
                Timetz,
                Interval,
                Bytea,
                Uuid,
                Xml,
                Json,
                Jsonb,
                Jsonpath,
                Inet,
                Cidr,
                Macaddr,
                Bit,
                Varbit,
                Int4range,
                Int8range,
                Numrange,
                Tsrange,
                Tstzrange,
                Daterange,
                Money,
                Oid,
                Enumeration(_rt::String),
            }
            impl ::core::fmt::Debug for DbColumnTypePrimitive {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        DbColumnTypePrimitive::Character => {
                            f.debug_tuple("DbColumnTypePrimitive::Character").finish()
                        }
                        DbColumnTypePrimitive::Int2 => {
                            f.debug_tuple("DbColumnTypePrimitive::Int2").finish()
                        }
                        DbColumnTypePrimitive::Int4 => {
                            f.debug_tuple("DbColumnTypePrimitive::Int4").finish()
                        }
                        DbColumnTypePrimitive::Int8 => {
                            f.debug_tuple("DbColumnTypePrimitive::Int8").finish()
                        }
                        DbColumnTypePrimitive::Float4 => {
                            f.debug_tuple("DbColumnTypePrimitive::Float4").finish()
                        }
                        DbColumnTypePrimitive::Float8 => {
                            f.debug_tuple("DbColumnTypePrimitive::Float8").finish()
                        }
                        DbColumnTypePrimitive::Numeric => {
                            f.debug_tuple("DbColumnTypePrimitive::Numeric").finish()
                        }
                        DbColumnTypePrimitive::Boolean => {
                            f.debug_tuple("DbColumnTypePrimitive::Boolean").finish()
                        }
                        DbColumnTypePrimitive::Text => {
                            f.debug_tuple("DbColumnTypePrimitive::Text").finish()
                        }
                        DbColumnTypePrimitive::Varchar => {
                            f.debug_tuple("DbColumnTypePrimitive::Varchar").finish()
                        }
                        DbColumnTypePrimitive::Bpchar => {
                            f.debug_tuple("DbColumnTypePrimitive::Bpchar").finish()
                        }
                        DbColumnTypePrimitive::Timestamp => {
                            f.debug_tuple("DbColumnTypePrimitive::Timestamp").finish()
                        }
                        DbColumnTypePrimitive::Timestamptz => {
                            f.debug_tuple("DbColumnTypePrimitive::Timestamptz").finish()
                        }
                        DbColumnTypePrimitive::Date => {
                            f.debug_tuple("DbColumnTypePrimitive::Date").finish()
                        }
                        DbColumnTypePrimitive::Time => {
                            f.debug_tuple("DbColumnTypePrimitive::Time").finish()
                        }
                        DbColumnTypePrimitive::Timetz => {
                            f.debug_tuple("DbColumnTypePrimitive::Timetz").finish()
                        }
                        DbColumnTypePrimitive::Interval => {
                            f.debug_tuple("DbColumnTypePrimitive::Interval").finish()
                        }
                        DbColumnTypePrimitive::Bytea => {
                            f.debug_tuple("DbColumnTypePrimitive::Bytea").finish()
                        }
                        DbColumnTypePrimitive::Uuid => {
                            f.debug_tuple("DbColumnTypePrimitive::Uuid").finish()
                        }
                        DbColumnTypePrimitive::Xml => {
                            f.debug_tuple("DbColumnTypePrimitive::Xml").finish()
                        }
                        DbColumnTypePrimitive::Json => {
                            f.debug_tuple("DbColumnTypePrimitive::Json").finish()
                        }
                        DbColumnTypePrimitive::Jsonb => {
                            f.debug_tuple("DbColumnTypePrimitive::Jsonb").finish()
                        }
                        DbColumnTypePrimitive::Jsonpath => {
                            f.debug_tuple("DbColumnTypePrimitive::Jsonpath").finish()
                        }
                        DbColumnTypePrimitive::Inet => {
                            f.debug_tuple("DbColumnTypePrimitive::Inet").finish()
                        }
                        DbColumnTypePrimitive::Cidr => {
                            f.debug_tuple("DbColumnTypePrimitive::Cidr").finish()
                        }
                        DbColumnTypePrimitive::Macaddr => {
                            f.debug_tuple("DbColumnTypePrimitive::Macaddr").finish()
                        }
                        DbColumnTypePrimitive::Bit => {
                            f.debug_tuple("DbColumnTypePrimitive::Bit").finish()
                        }
                        DbColumnTypePrimitive::Varbit => {
                            f.debug_tuple("DbColumnTypePrimitive::Varbit").finish()
                        }
                        DbColumnTypePrimitive::Int4range => {
                            f.debug_tuple("DbColumnTypePrimitive::Int4range").finish()
                        }
                        DbColumnTypePrimitive::Int8range => {
                            f.debug_tuple("DbColumnTypePrimitive::Int8range").finish()
                        }
                        DbColumnTypePrimitive::Numrange => {
                            f.debug_tuple("DbColumnTypePrimitive::Numrange").finish()
                        }
                        DbColumnTypePrimitive::Tsrange => {
                            f.debug_tuple("DbColumnTypePrimitive::Tsrange").finish()
                        }
                        DbColumnTypePrimitive::Tstzrange => {
                            f.debug_tuple("DbColumnTypePrimitive::Tstzrange").finish()
                        }
                        DbColumnTypePrimitive::Daterange => {
                            f.debug_tuple("DbColumnTypePrimitive::Daterange").finish()
                        }
                        DbColumnTypePrimitive::Money => {
                            f.debug_tuple("DbColumnTypePrimitive::Money").finish()
                        }
                        DbColumnTypePrimitive::Oid => {
                            f.debug_tuple("DbColumnTypePrimitive::Oid").finish()
                        }
                        DbColumnTypePrimitive::Enumeration(e) => f
                            .debug_tuple("DbColumnTypePrimitive::Enumeration")
                            .field(e)
                            .finish(),
                    }
                }
            }
            #[derive(Clone)]
            pub enum DbValuePrimitive {
                Character(i8),
                Int2(i16),
                Int4(i32),
                Int8(i64),
                Float4(f32),
                Float8(f64),
                Numeric(_rt::String),
                Boolean(bool),
                Text(_rt::String),
                Varchar(_rt::String),
                Bpchar(_rt::String),
                Timestamp(Timestamp),
                Timestamptz(Timestamptz),
                Date(Date),
                Time(Time),
                Timetz(Timetz),
                Interval(Interval),
                Bytea(_rt::Vec<u8>),
                Json(_rt::String),
                Jsonb(_rt::String),
                Jsonpath(_rt::String),
                Xml(_rt::String),
                Uuid(Uuid),
                Inet(IpAddress),
                Cidr(IpAddress),
                Macaddr(MacAddress),
                Bit(_rt::Vec<bool>),
                Varbit(_rt::Vec<bool>),
                Int4range(Int4range),
                Int8range(Int8range),
                Numrange(Numrange),
                Tsrange(Tsrange),
                Tstzrange(Tstzrange),
                Daterange(Daterange),
                Money(i64),
                Oid(u32),
                Enumeration(Enumeration),
                Null,
            }
            impl ::core::fmt::Debug for DbValuePrimitive {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        DbValuePrimitive::Character(e) => f
                            .debug_tuple("DbValuePrimitive::Character")
                            .field(e)
                            .finish(),
                        DbValuePrimitive::Int2(e) => {
                            f.debug_tuple("DbValuePrimitive::Int2").field(e).finish()
                        }
                        DbValuePrimitive::Int4(e) => {
                            f.debug_tuple("DbValuePrimitive::Int4").field(e).finish()
                        }
                        DbValuePrimitive::Int8(e) => {
                            f.debug_tuple("DbValuePrimitive::Int8").field(e).finish()
                        }
                        DbValuePrimitive::Float4(e) => {
                            f.debug_tuple("DbValuePrimitive::Float4").field(e).finish()
                        }
                        DbValuePrimitive::Float8(e) => {
                            f.debug_tuple("DbValuePrimitive::Float8").field(e).finish()
                        }
                        DbValuePrimitive::Numeric(e) => {
                            f.debug_tuple("DbValuePrimitive::Numeric").field(e).finish()
                        }
                        DbValuePrimitive::Boolean(e) => {
                            f.debug_tuple("DbValuePrimitive::Boolean").field(e).finish()
                        }
                        DbValuePrimitive::Text(e) => {
                            f.debug_tuple("DbValuePrimitive::Text").field(e).finish()
                        }
                        DbValuePrimitive::Varchar(e) => {
                            f.debug_tuple("DbValuePrimitive::Varchar").field(e).finish()
                        }
                        DbValuePrimitive::Bpchar(e) => {
                            f.debug_tuple("DbValuePrimitive::Bpchar").field(e).finish()
                        }
                        DbValuePrimitive::Timestamp(e) => f
                            .debug_tuple("DbValuePrimitive::Timestamp")
                            .field(e)
                            .finish(),
                        DbValuePrimitive::Timestamptz(e) => f
                            .debug_tuple("DbValuePrimitive::Timestamptz")
                            .field(e)
                            .finish(),
                        DbValuePrimitive::Date(e) => {
                            f.debug_tuple("DbValuePrimitive::Date").field(e).finish()
                        }
                        DbValuePrimitive::Time(e) => {
                            f.debug_tuple("DbValuePrimitive::Time").field(e).finish()
                        }
                        DbValuePrimitive::Timetz(e) => {
                            f.debug_tuple("DbValuePrimitive::Timetz").field(e).finish()
                        }
                        DbValuePrimitive::Interval(e) => f
                            .debug_tuple("DbValuePrimitive::Interval")
                            .field(e)
                            .finish(),
                        DbValuePrimitive::Bytea(e) => {
                            f.debug_tuple("DbValuePrimitive::Bytea").field(e).finish()
                        }
                        DbValuePrimitive::Json(e) => {
                            f.debug_tuple("DbValuePrimitive::Json").field(e).finish()
                        }
                        DbValuePrimitive::Jsonb(e) => {
                            f.debug_tuple("DbValuePrimitive::Jsonb").field(e).finish()
                        }
                        DbValuePrimitive::Jsonpath(e) => f
                            .debug_tuple("DbValuePrimitive::Jsonpath")
                            .field(e)
                            .finish(),
                        DbValuePrimitive::Xml(e) => {
                            f.debug_tuple("DbValuePrimitive::Xml").field(e).finish()
                        }
                        DbValuePrimitive::Uuid(e) => {
                            f.debug_tuple("DbValuePrimitive::Uuid").field(e).finish()
                        }
                        DbValuePrimitive::Inet(e) => {
                            f.debug_tuple("DbValuePrimitive::Inet").field(e).finish()
                        }
                        DbValuePrimitive::Cidr(e) => {
                            f.debug_tuple("DbValuePrimitive::Cidr").field(e).finish()
                        }
                        DbValuePrimitive::Macaddr(e) => {
                            f.debug_tuple("DbValuePrimitive::Macaddr").field(e).finish()
                        }
                        DbValuePrimitive::Bit(e) => {
                            f.debug_tuple("DbValuePrimitive::Bit").field(e).finish()
                        }
                        DbValuePrimitive::Varbit(e) => {
                            f.debug_tuple("DbValuePrimitive::Varbit").field(e).finish()
                        }
                        DbValuePrimitive::Int4range(e) => f
                            .debug_tuple("DbValuePrimitive::Int4range")
                            .field(e)
                            .finish(),
                        DbValuePrimitive::Int8range(e) => f
                            .debug_tuple("DbValuePrimitive::Int8range")
                            .field(e)
                            .finish(),
                        DbValuePrimitive::Numrange(e) => f
                            .debug_tuple("DbValuePrimitive::Numrange")
                            .field(e)
                            .finish(),
                        DbValuePrimitive::Tsrange(e) => {
                            f.debug_tuple("DbValuePrimitive::Tsrange").field(e).finish()
                        }
                        DbValuePrimitive::Tstzrange(e) => f
                            .debug_tuple("DbValuePrimitive::Tstzrange")
                            .field(e)
                            .finish(),
                        DbValuePrimitive::Daterange(e) => f
                            .debug_tuple("DbValuePrimitive::Daterange")
                            .field(e)
                            .finish(),
                        DbValuePrimitive::Money(e) => {
                            f.debug_tuple("DbValuePrimitive::Money").field(e).finish()
                        }
                        DbValuePrimitive::Oid(e) => {
                            f.debug_tuple("DbValuePrimitive::Oid").field(e).finish()
                        }
                        DbValuePrimitive::Enumeration(e) => f
                            .debug_tuple("DbValuePrimitive::Enumeration")
                            .field(e)
                            .finish(),
                        DbValuePrimitive::Null => f.debug_tuple("DbValuePrimitive::Null").finish(),
                    }
                }
            }
            #[derive(Clone)]
            pub enum DbColumnType {
                Primitive(DbColumnTypePrimitive),
                Array(DbColumnTypePrimitive),
            }
            impl ::core::fmt::Debug for DbColumnType {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        DbColumnType::Primitive(e) => {
                            f.debug_tuple("DbColumnType::Primitive").field(e).finish()
                        }
                        DbColumnType::Array(e) => {
                            f.debug_tuple("DbColumnType::Array").field(e).finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub struct DbColumn {
                pub ordinal: u64,
                pub name: _rt::String,
                pub db_type: DbColumnType,
                pub db_type_name: _rt::String,
            }
            impl ::core::fmt::Debug for DbColumn {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("DbColumn")
                        .field("ordinal", &self.ordinal)
                        .field("name", &self.name)
                        .field("db-type", &self.db_type)
                        .field("db-type-name", &self.db_type_name)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub enum DbValue {
                Primitive(DbValuePrimitive),
                Array(_rt::Vec<DbValuePrimitive>),
            }
            impl ::core::fmt::Debug for DbValue {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        DbValue::Primitive(e) => {
                            f.debug_tuple("DbValue::Primitive").field(e).finish()
                        }
                        DbValue::Array(e) => f.debug_tuple("DbValue::Array").field(e).finish(),
                    }
                }
            }
            /// A single row of values
            #[derive(Clone)]
            pub struct DbRow {
                pub values: _rt::Vec<DbValue>,
            }
            impl ::core::fmt::Debug for DbRow {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("DbRow")
                        .field("values", &self.values)
                        .finish()
                }
            }
            /// A potentially very large and lazy stream of rows:

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct DbResultSet {
                handle: _rt::Resource<DbResultSet>,
            }

            impl DbResultSet {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for DbResultSet {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:rdbms/postgres@0.0.1")]
                        extern "C" {
                            #[link_name = "[resource-drop]db-result-set"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct DbConnection {
                handle: _rt::Resource<DbConnection>,
            }

            impl DbConnection {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for DbConnection {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:rdbms/postgres@0.0.1")]
                        extern "C" {
                            #[link_name = "[resource-drop]db-connection"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            impl DbResultSet {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_columns(&self) -> _rt::Vec<DbColumn> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:rdbms/postgres@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]db-result-set.get-columns"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let base22 = l1;
                        let len22 = l2;
                        let mut result22 = _rt::Vec::with_capacity(len22);
                        for i in 0..len22 {
                            let base = base22.add(i * 40);
                            let e22 = {
                                let l3 = *base.add(0).cast::<i64>();
                                let l4 = *base.add(8).cast::<*mut u8>();
                                let l5 = *base.add(12).cast::<usize>();
                                let len6 = l5;
                                let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);
                                let l7 = i32::from(*base.add(16).cast::<u8>());
                                let v18 = match l7 {
                                    0 => {
                                        let e18 = {
                                            let l8 = i32::from(*base.add(20).cast::<u8>());
                                            let v12 = match l8 {
                                                0 => DbColumnTypePrimitive::Character,
                                                1 => DbColumnTypePrimitive::Int2,
                                                2 => DbColumnTypePrimitive::Int4,
                                                3 => DbColumnTypePrimitive::Int8,
                                                4 => DbColumnTypePrimitive::Float4,
                                                5 => DbColumnTypePrimitive::Float8,
                                                6 => DbColumnTypePrimitive::Numeric,
                                                7 => DbColumnTypePrimitive::Boolean,
                                                8 => DbColumnTypePrimitive::Text,
                                                9 => DbColumnTypePrimitive::Varchar,
                                                10 => DbColumnTypePrimitive::Bpchar,
                                                11 => DbColumnTypePrimitive::Timestamp,
                                                12 => DbColumnTypePrimitive::Timestamptz,
                                                13 => DbColumnTypePrimitive::Date,
                                                14 => DbColumnTypePrimitive::Time,
                                                15 => DbColumnTypePrimitive::Timetz,
                                                16 => DbColumnTypePrimitive::Interval,
                                                17 => DbColumnTypePrimitive::Bytea,
                                                18 => DbColumnTypePrimitive::Uuid,
                                                19 => DbColumnTypePrimitive::Xml,
                                                20 => DbColumnTypePrimitive::Json,
                                                21 => DbColumnTypePrimitive::Jsonb,
                                                22 => DbColumnTypePrimitive::Jsonpath,
                                                23 => DbColumnTypePrimitive::Inet,
                                                24 => DbColumnTypePrimitive::Cidr,
                                                25 => DbColumnTypePrimitive::Macaddr,
                                                26 => DbColumnTypePrimitive::Bit,
                                                27 => DbColumnTypePrimitive::Varbit,
                                                28 => DbColumnTypePrimitive::Int4range,
                                                29 => DbColumnTypePrimitive::Int8range,
                                                30 => DbColumnTypePrimitive::Numrange,
                                                31 => DbColumnTypePrimitive::Tsrange,
                                                32 => DbColumnTypePrimitive::Tstzrange,
                                                33 => DbColumnTypePrimitive::Daterange,
                                                34 => DbColumnTypePrimitive::Money,
                                                35 => DbColumnTypePrimitive::Oid,
                                                n => {
                                                    debug_assert_eq!(
                                                        n, 36,
                                                        "invalid enum discriminant"
                                                    );
                                                    let e12 = {
                                                        let l9 = *base.add(24).cast::<*mut u8>();
                                                        let l10 = *base.add(28).cast::<usize>();
                                                        let len11 = l10;
                                                        let bytes11 = _rt::Vec::from_raw_parts(
                                                            l9.cast(),
                                                            len11,
                                                            len11,
                                                        );

                                                        _rt::string_lift(bytes11)
                                                    };
                                                    DbColumnTypePrimitive::Enumeration(e12)
                                                }
                                            };

                                            v12
                                        };
                                        DbColumnType::Primitive(e18)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 1, "invalid enum discriminant");
                                        let e18 = {
                                            let l13 = i32::from(*base.add(20).cast::<u8>());
                                            let v17 = match l13 {
                                                0 => DbColumnTypePrimitive::Character,
                                                1 => DbColumnTypePrimitive::Int2,
                                                2 => DbColumnTypePrimitive::Int4,
                                                3 => DbColumnTypePrimitive::Int8,
                                                4 => DbColumnTypePrimitive::Float4,
                                                5 => DbColumnTypePrimitive::Float8,
                                                6 => DbColumnTypePrimitive::Numeric,
                                                7 => DbColumnTypePrimitive::Boolean,
                                                8 => DbColumnTypePrimitive::Text,
                                                9 => DbColumnTypePrimitive::Varchar,
                                                10 => DbColumnTypePrimitive::Bpchar,
                                                11 => DbColumnTypePrimitive::Timestamp,
                                                12 => DbColumnTypePrimitive::Timestamptz,
                                                13 => DbColumnTypePrimitive::Date,
                                                14 => DbColumnTypePrimitive::Time,
                                                15 => DbColumnTypePrimitive::Timetz,
                                                16 => DbColumnTypePrimitive::Interval,
                                                17 => DbColumnTypePrimitive::Bytea,
                                                18 => DbColumnTypePrimitive::Uuid,
                                                19 => DbColumnTypePrimitive::Xml,
                                                20 => DbColumnTypePrimitive::Json,
                                                21 => DbColumnTypePrimitive::Jsonb,
                                                22 => DbColumnTypePrimitive::Jsonpath,
                                                23 => DbColumnTypePrimitive::Inet,
                                                24 => DbColumnTypePrimitive::Cidr,
                                                25 => DbColumnTypePrimitive::Macaddr,
                                                26 => DbColumnTypePrimitive::Bit,
                                                27 => DbColumnTypePrimitive::Varbit,
                                                28 => DbColumnTypePrimitive::Int4range,
                                                29 => DbColumnTypePrimitive::Int8range,
                                                30 => DbColumnTypePrimitive::Numrange,
                                                31 => DbColumnTypePrimitive::Tsrange,
                                                32 => DbColumnTypePrimitive::Tstzrange,
                                                33 => DbColumnTypePrimitive::Daterange,
                                                34 => DbColumnTypePrimitive::Money,
                                                35 => DbColumnTypePrimitive::Oid,
                                                n => {
                                                    debug_assert_eq!(
                                                        n, 36,
                                                        "invalid enum discriminant"
                                                    );
                                                    let e17 = {
                                                        let l14 = *base.add(24).cast::<*mut u8>();
                                                        let l15 = *base.add(28).cast::<usize>();
                                                        let len16 = l15;
                                                        let bytes16 = _rt::Vec::from_raw_parts(
                                                            l14.cast(),
                                                            len16,
                                                            len16,
                                                        );

                                                        _rt::string_lift(bytes16)
                                                    };
                                                    DbColumnTypePrimitive::Enumeration(e17)
                                                }
                                            };

                                            v17
                                        };
                                        DbColumnType::Array(e18)
                                    }
                                };
                                let l19 = *base.add(32).cast::<*mut u8>();
                                let l20 = *base.add(36).cast::<usize>();
                                let len21 = l20;
                                let bytes21 = _rt::Vec::from_raw_parts(l19.cast(), len21, len21);

                                DbColumn {
                                    ordinal: l3 as u64,
                                    name: _rt::string_lift(bytes6),
                                    db_type: v18,
                                    db_type_name: _rt::string_lift(bytes21),
                                }
                            };
                            result22.push(e22);
                        }
                        _rt::cabi_dealloc(base22, len22 * 40, 8);
                        result22
                    }
                }
            }
            impl DbResultSet {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_next(&self) -> Option<_rt::Vec<DbRow>> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:rdbms/postgres@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]db-result-set.get-next"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<*mut u8>();
                                    let l3 = *ptr0.add(8).cast::<usize>();
                                    let base480 = l2;
                                    let len480 = l3;
                                    let mut result480 = _rt::Vec::with_capacity(len480);
                                    for i in 0..len480 {
                                        let base = base480.add(i * 8);
                                        let e480 = {
                                            let l4 = *base.add(0).cast::<*mut u8>();
                                            let l5 = *base.add(4).cast::<usize>();
                                            let base479 = l4;
                                            let len479 = l5;
                                            let mut result479 = _rt::Vec::with_capacity(len479);
                                            for i in 0..len479 {
                                                let base = base479.add(i * 64);
                                                let e479 = {
                                                    let l6 = i32::from(*base.add(0).cast::<u8>());
                                                    let v478 = match l6 {
                                                        0 => {
                                                            let e478 = {
                                                                let l7 = i32::from(
                                                                    *base.add(8).cast::<u8>(),
                                                                );
                                                                let v240 = match l7 {
                                                                    0 => {
                                                                        let e240 = {
                                                                            let l8 = i32::from(
                                                                                *base
                                                                                    .add(16)
                                                                                    .cast::<i8>(),
                                                                            );

                                                                            l8 as i8
                                                                        };
                                                                        DbValuePrimitive::Character(
                                                                            e240,
                                                                        )
                                                                    }
                                                                    1 => {
                                                                        let e240 = {
                                                                            let l9 = i32::from(
                                                                                *base
                                                                                    .add(16)
                                                                                    .cast::<i16>(),
                                                                            );

                                                                            l9 as i16
                                                                        };
                                                                        DbValuePrimitive::Int2(e240)
                                                                    }
                                                                    2 => {
                                                                        let e240 = {
                                                                            let l10 = *base
                                                                                .add(16)
                                                                                .cast::<i32>();

                                                                            l10
                                                                        };
                                                                        DbValuePrimitive::Int4(e240)
                                                                    }
                                                                    3 => {
                                                                        let e240 = {
                                                                            let l11 = *base
                                                                                .add(16)
                                                                                .cast::<i64>();

                                                                            l11
                                                                        };
                                                                        DbValuePrimitive::Int8(e240)
                                                                    }
                                                                    4 => {
                                                                        let e240 = {
                                                                            let l12 = *base
                                                                                .add(16)
                                                                                .cast::<f32>();

                                                                            l12
                                                                        };
                                                                        DbValuePrimitive::Float4(
                                                                            e240,
                                                                        )
                                                                    }
                                                                    5 => {
                                                                        let e240 = {
                                                                            let l13 = *base
                                                                                .add(16)
                                                                                .cast::<f64>();

                                                                            l13
                                                                        };
                                                                        DbValuePrimitive::Float8(
                                                                            e240,
                                                                        )
                                                                    }
                                                                    6 => {
                                                                        let e240 = {
                                                                            let l14 = *base
                                                                                .add(16)
                                                                                .cast::<*mut u8>();
                                                                            let l15 = *base
                                                                                .add(20)
                                                                                .cast::<usize>();
                                                                            let len16 = l15;
                                                                            let bytes16 = _rt::Vec::from_raw_parts(l14.cast(), len16, len16);

                                                                            _rt::string_lift(
                                                                                bytes16,
                                                                            )
                                                                        };
                                                                        DbValuePrimitive::Numeric(
                                                                            e240,
                                                                        )
                                                                    }
                                                                    7 => {
                                                                        let e240 = {
                                                                            let l17 = i32::from(
                                                                                *base
                                                                                    .add(16)
                                                                                    .cast::<u8>(),
                                                                            );

                                                                            _rt::bool_lift(
                                                                                l17 as u8,
                                                                            )
                                                                        };
                                                                        DbValuePrimitive::Boolean(
                                                                            e240,
                                                                        )
                                                                    }
                                                                    8 => {
                                                                        let e240 = {
                                                                            let l18 = *base
                                                                                .add(16)
                                                                                .cast::<*mut u8>();
                                                                            let l19 = *base
                                                                                .add(20)
                                                                                .cast::<usize>();
                                                                            let len20 = l19;
                                                                            let bytes20 = _rt::Vec::from_raw_parts(l18.cast(), len20, len20);

                                                                            _rt::string_lift(
                                                                                bytes20,
                                                                            )
                                                                        };
                                                                        DbValuePrimitive::Text(e240)
                                                                    }
                                                                    9 => {
                                                                        let e240 = {
                                                                            let l21 = *base
                                                                                .add(16)
                                                                                .cast::<*mut u8>();
                                                                            let l22 = *base
                                                                                .add(20)
                                                                                .cast::<usize>();
                                                                            let len23 = l22;
                                                                            let bytes23 = _rt::Vec::from_raw_parts(l21.cast(), len23, len23);

                                                                            _rt::string_lift(
                                                                                bytes23,
                                                                            )
                                                                        };
                                                                        DbValuePrimitive::Varchar(
                                                                            e240,
                                                                        )
                                                                    }
                                                                    10 => {
                                                                        let e240 = {
                                                                            let l24 = *base
                                                                                .add(16)
                                                                                .cast::<*mut u8>();
                                                                            let l25 = *base
                                                                                .add(20)
                                                                                .cast::<usize>();
                                                                            let len26 = l25;
                                                                            let bytes26 = _rt::Vec::from_raw_parts(l24.cast(), len26, len26);

                                                                            _rt::string_lift(
                                                                                bytes26,
                                                                            )
                                                                        };
                                                                        DbValuePrimitive::Bpchar(
                                                                            e240,
                                                                        )
                                                                    }
                                                                    11 => {
                                                                        let e240 = {
                                                                            let l27 = *base
                                                                                .add(16)
                                                                                .cast::<i32>();
                                                                            let l28 = i32::from(
                                                                                *base
                                                                                    .add(20)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let l29 = i32::from(
                                                                                *base
                                                                                    .add(21)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let l30 = i32::from(
                                                                                *base
                                                                                    .add(24)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let l31 = i32::from(
                                                                                *base
                                                                                    .add(25)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let l32 = i32::from(
                                                                                *base
                                                                                    .add(26)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let l33 = *base
                                                                                .add(28)
                                                                                .cast::<i32>();

                                                                            Timestamp {
                                                                                date: Date {
                                                                                    year: l27,
                                                                                    month: l28
                                                                                        as u8,
                                                                                    day: l29 as u8,
                                                                                },
                                                                                time: Time {
                                                                                    hour: l30 as u8,
                                                                                    minute: l31
                                                                                        as u8,
                                                                                    second: l32
                                                                                        as u8,
                                                                                    nanosecond: l33
                                                                                        as u32,
                                                                                },
                                                                            }
                                                                        };
                                                                        DbValuePrimitive::Timestamp(
                                                                            e240,
                                                                        )
                                                                    }
                                                                    12 => {
                                                                        let e240 = {
                                                                            let l34 = *base
                                                                                .add(16)
                                                                                .cast::<i32>();
                                                                            let l35 = i32::from(
                                                                                *base
                                                                                    .add(20)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let l36 = i32::from(
                                                                                *base
                                                                                    .add(21)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let l37 = i32::from(
                                                                                *base
                                                                                    .add(24)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let l38 = i32::from(
                                                                                *base
                                                                                    .add(25)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let l39 = i32::from(
                                                                                *base
                                                                                    .add(26)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let l40 = *base
                                                                                .add(28)
                                                                                .cast::<i32>();
                                                                            let l41 = *base
                                                                                .add(32)
                                                                                .cast::<i32>();

                                                                            Timestamptz{
                                        timestamp: Timestamp{
                                          date: Date{
                                            year: l34,
                                            month: l35 as u8,
                                            day: l36 as u8,
                                          },
                                          time: Time{
                                            hour: l37 as u8,
                                            minute: l38 as u8,
                                            second: l39 as u8,
                                            nanosecond: l40 as u32,
                                          },
                                        },
                                        offset: l41,
                                      }
                                                                        };
                                                                        DbValuePrimitive::Timestamptz(e240)
                                                                    }
                                                                    13 => {
                                                                        let e240 = {
                                                                            let l42 = *base
                                                                                .add(16)
                                                                                .cast::<i32>();
                                                                            let l43 = i32::from(
                                                                                *base
                                                                                    .add(20)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let l44 = i32::from(
                                                                                *base
                                                                                    .add(21)
                                                                                    .cast::<u8>(),
                                                                            );

                                                                            Date {
                                                                                year: l42,
                                                                                month: l43 as u8,
                                                                                day: l44 as u8,
                                                                            }
                                                                        };
                                                                        DbValuePrimitive::Date(e240)
                                                                    }
                                                                    14 => {
                                                                        let e240 = {
                                                                            let l45 = i32::from(
                                                                                *base
                                                                                    .add(16)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let l46 = i32::from(
                                                                                *base
                                                                                    .add(17)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let l47 = i32::from(
                                                                                *base
                                                                                    .add(18)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let l48 = *base
                                                                                .add(20)
                                                                                .cast::<i32>();

                                                                            Time {
                                                                                hour: l45 as u8,
                                                                                minute: l46 as u8,
                                                                                second: l47 as u8,
                                                                                nanosecond: l48
                                                                                    as u32,
                                                                            }
                                                                        };
                                                                        DbValuePrimitive::Time(e240)
                                                                    }
                                                                    15 => {
                                                                        let e240 = {
                                                                            let l49 = i32::from(
                                                                                *base
                                                                                    .add(16)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let l50 = i32::from(
                                                                                *base
                                                                                    .add(17)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let l51 = i32::from(
                                                                                *base
                                                                                    .add(18)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let l52 = *base
                                                                                .add(20)
                                                                                .cast::<i32>();
                                                                            let l53 = *base
                                                                                .add(24)
                                                                                .cast::<i32>();

                                                                            Timetz {
                                                                                time: Time {
                                                                                    hour: l49 as u8,
                                                                                    minute: l50
                                                                                        as u8,
                                                                                    second: l51
                                                                                        as u8,
                                                                                    nanosecond: l52
                                                                                        as u32,
                                                                                },
                                                                                offset: l53,
                                                                            }
                                                                        };
                                                                        DbValuePrimitive::Timetz(
                                                                            e240,
                                                                        )
                                                                    }
                                                                    16 => {
                                                                        let e240 = {
                                                                            let l54 = *base
                                                                                .add(16)
                                                                                .cast::<i32>();
                                                                            let l55 = *base
                                                                                .add(20)
                                                                                .cast::<i32>();
                                                                            let l56 = *base
                                                                                .add(24)
                                                                                .cast::<i64>();

                                                                            Interval {
                                                                                months: l54,
                                                                                days: l55,
                                                                                microseconds: l56,
                                                                            }
                                                                        };
                                                                        DbValuePrimitive::Interval(
                                                                            e240,
                                                                        )
                                                                    }
                                                                    17 => {
                                                                        let e240 = {
                                                                            let l57 = *base
                                                                                .add(16)
                                                                                .cast::<*mut u8>();
                                                                            let l58 = *base
                                                                                .add(20)
                                                                                .cast::<usize>();
                                                                            let len59 = l58;

                                                                            _rt::Vec::from_raw_parts(
                                                                                l57.cast(),
                                                                                len59,
                                                                                len59,
                                                                            )
                                                                        };
                                                                        DbValuePrimitive::Bytea(
                                                                            e240,
                                                                        )
                                                                    }
                                                                    18 => {
                                                                        let e240 = {
                                                                            let l60 = *base
                                                                                .add(16)
                                                                                .cast::<*mut u8>();
                                                                            let l61 = *base
                                                                                .add(20)
                                                                                .cast::<usize>();
                                                                            let len62 = l61;
                                                                            let bytes62 = _rt::Vec::from_raw_parts(l60.cast(), len62, len62);

                                                                            _rt::string_lift(
                                                                                bytes62,
                                                                            )
                                                                        };
                                                                        DbValuePrimitive::Json(e240)
                                                                    }
                                                                    19 => {
                                                                        let e240 = {
                                                                            let l63 = *base
                                                                                .add(16)
                                                                                .cast::<*mut u8>();
                                                                            let l64 = *base
                                                                                .add(20)
                                                                                .cast::<usize>();
                                                                            let len65 = l64;
                                                                            let bytes65 = _rt::Vec::from_raw_parts(l63.cast(), len65, len65);

                                                                            _rt::string_lift(
                                                                                bytes65,
                                                                            )
                                                                        };
                                                                        DbValuePrimitive::Jsonb(
                                                                            e240,
                                                                        )
                                                                    }
                                                                    20 => {
                                                                        let e240 = {
                                                                            let l66 = *base
                                                                                .add(16)
                                                                                .cast::<*mut u8>();
                                                                            let l67 = *base
                                                                                .add(20)
                                                                                .cast::<usize>();
                                                                            let len68 = l67;
                                                                            let bytes68 = _rt::Vec::from_raw_parts(l66.cast(), len68, len68);

                                                                            _rt::string_lift(
                                                                                bytes68,
                                                                            )
                                                                        };
                                                                        DbValuePrimitive::Jsonpath(
                                                                            e240,
                                                                        )
                                                                    }
                                                                    21 => {
                                                                        let e240 = {
                                                                            let l69 = *base
                                                                                .add(16)
                                                                                .cast::<*mut u8>();
                                                                            let l70 = *base
                                                                                .add(20)
                                                                                .cast::<usize>();
                                                                            let len71 = l70;
                                                                            let bytes71 = _rt::Vec::from_raw_parts(l69.cast(), len71, len71);

                                                                            _rt::string_lift(
                                                                                bytes71,
                                                                            )
                                                                        };
                                                                        DbValuePrimitive::Xml(e240)
                                                                    }
                                                                    22 => {
                                                                        let e240 = {
                                                                            let l72 = *base
                                                                                .add(16)
                                                                                .cast::<i64>();
                                                                            let l73 = *base
                                                                                .add(24)
                                                                                .cast::<i64>();

                                                                            Uuid {
                                                                                high_bits: l72
                                                                                    as u64,
                                                                                low_bits: l73
                                                                                    as u64,
                                                                            }
                                                                        };
                                                                        DbValuePrimitive::Uuid(e240)
                                                                    }
                                                                    23 => {
                                                                        let e240 = {
                                                                            let l74 = i32::from(
                                                                                *base
                                                                                    .add(16)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let v87 = match l74 {
                                                                                0 => {
                                                                                    let e87 = {
                                                                                        let l75 = i32::from(*base.add(18).cast::<u8>());
                                                                                        let l76 = i32::from(*base.add(19).cast::<u8>());
                                                                                        let l77 = i32::from(*base.add(20).cast::<u8>());
                                                                                        let l78 = i32::from(*base.add(21).cast::<u8>());

                                                                                        (l75 as u8, l76 as u8, l77 as u8, l78 as u8)
                                                                                    };
                                                                                    IpAddress::Ipv4(
                                                                                        e87,
                                                                                    )
                                                                                }
                                                                                n => {
                                                                                    debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                                                    let e87 = {
                                                                                        let l79 = i32::from(*base.add(18).cast::<u16>());
                                                                                        let l80 = i32::from(*base.add(20).cast::<u16>());
                                                                                        let l81 = i32::from(*base.add(22).cast::<u16>());
                                                                                        let l82 = i32::from(*base.add(24).cast::<u16>());
                                                                                        let l83 = i32::from(*base.add(26).cast::<u16>());
                                                                                        let l84 = i32::from(*base.add(28).cast::<u16>());
                                                                                        let l85 = i32::from(*base.add(30).cast::<u16>());
                                                                                        let l86 = i32::from(*base.add(32).cast::<u16>());

                                                                                        (l79 as u16, l80 as u16, l81 as u16, l82 as u16, l83 as u16, l84 as u16, l85 as u16, l86 as u16)
                                                                                    };
                                                                                    IpAddress::Ipv6(
                                                                                        e87,
                                                                                    )
                                                                                }
                                                                            };

                                                                            v87
                                                                        };
                                                                        DbValuePrimitive::Inet(e240)
                                                                    }
                                                                    24 => {
                                                                        let e240 = {
                                                                            let l88 = i32::from(
                                                                                *base
                                                                                    .add(16)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let v101 = match l88 {
                                                                                0 => {
                                                                                    let e101 = {
                                                                                        let l89 = i32::from(*base.add(18).cast::<u8>());
                                                                                        let l90 = i32::from(*base.add(19).cast::<u8>());
                                                                                        let l91 = i32::from(*base.add(20).cast::<u8>());
                                                                                        let l92 = i32::from(*base.add(21).cast::<u8>());

                                                                                        (l89 as u8, l90 as u8, l91 as u8, l92 as u8)
                                                                                    };
                                                                                    IpAddress::Ipv4(
                                                                                        e101,
                                                                                    )
                                                                                }
                                                                                n => {
                                                                                    debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                                                    let e101 = {
                                                                                        let l93 = i32::from(*base.add(18).cast::<u16>());
                                                                                        let l94 = i32::from(*base.add(20).cast::<u16>());
                                                                                        let l95 = i32::from(*base.add(22).cast::<u16>());
                                                                                        let l96 = i32::from(*base.add(24).cast::<u16>());
                                                                                        let l97 = i32::from(*base.add(26).cast::<u16>());
                                                                                        let l98 = i32::from(*base.add(28).cast::<u16>());
                                                                                        let l99 = i32::from(*base.add(30).cast::<u16>());
                                                                                        let l100 = i32::from(*base.add(32).cast::<u16>());

                                                                                        (l93 as u16, l94 as u16, l95 as u16, l96 as u16, l97 as u16, l98 as u16, l99 as u16, l100 as u16)
                                                                                    };
                                                                                    IpAddress::Ipv6(
                                                                                        e101,
                                                                                    )
                                                                                }
                                                                            };

                                                                            v101
                                                                        };
                                                                        DbValuePrimitive::Cidr(e240)
                                                                    }
                                                                    25 => {
                                                                        let e240 = {
                                                                            let l102 = i32::from(
                                                                                *base
                                                                                    .add(16)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let l103 = i32::from(
                                                                                *base
                                                                                    .add(17)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let l104 = i32::from(
                                                                                *base
                                                                                    .add(18)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let l105 = i32::from(
                                                                                *base
                                                                                    .add(19)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let l106 = i32::from(
                                                                                *base
                                                                                    .add(20)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let l107 = i32::from(
                                                                                *base
                                                                                    .add(21)
                                                                                    .cast::<u8>(),
                                                                            );

                                                                            MacAddress {
                                                                                octets: (
                                                                                    l102 as u8,
                                                                                    l103 as u8,
                                                                                    l104 as u8,
                                                                                    l105 as u8,
                                                                                    l106 as u8,
                                                                                    l107 as u8,
                                                                                ),
                                                                            }
                                                                        };
                                                                        DbValuePrimitive::Macaddr(
                                                                            e240,
                                                                        )
                                                                    }
                                                                    26 => {
                                                                        let e240 = {
                                                                            let l108 = *base
                                                                                .add(16)
                                                                                .cast::<*mut u8>();
                                                                            let l109 = *base
                                                                                .add(20)
                                                                                .cast::<usize>();
                                                                            let base111 = l108;
                                                                            let len111 = l109;
                                                                            let mut result111 = _rt::Vec::with_capacity(len111);
                                                                            for i in 0..len111 {
                                                                                let base = base111
                                                                                    .add(i * 1);
                                                                                let e111 = {
                                                                                    let l110 = i32::from(*base.add(0).cast::<u8>());

                                                                                    _rt::bool_lift(
                                                                                        l110 as u8,
                                                                                    )
                                                                                };
                                                                                result111
                                                                                    .push(e111);
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base111,
                                                                                len111 * 1,
                                                                                1,
                                                                            );

                                                                            result111
                                                                        };
                                                                        DbValuePrimitive::Bit(e240)
                                                                    }
                                                                    27 => {
                                                                        let e240 = {
                                                                            let l112 = *base
                                                                                .add(16)
                                                                                .cast::<*mut u8>();
                                                                            let l113 = *base
                                                                                .add(20)
                                                                                .cast::<usize>();
                                                                            let base115 = l112;
                                                                            let len115 = l113;
                                                                            let mut result115 = _rt::Vec::with_capacity(len115);
                                                                            for i in 0..len115 {
                                                                                let base = base115
                                                                                    .add(i * 1);
                                                                                let e115 = {
                                                                                    let l114 = i32::from(*base.add(0).cast::<u8>());

                                                                                    _rt::bool_lift(
                                                                                        l114 as u8,
                                                                                    )
                                                                                };
                                                                                result115
                                                                                    .push(e115);
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base115,
                                                                                len115 * 1,
                                                                                1,
                                                                            );

                                                                            result115
                                                                        };
                                                                        DbValuePrimitive::Varbit(
                                                                            e240,
                                                                        )
                                                                    }
                                                                    28 => {
                                                                        let e240 = {
                                                                            let l116 = i32::from(
                                                                                *base
                                                                                    .add(16)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let v119 = match l116 {
                                                                                0 => {
                                                                                    let e119 = {
                                                                                        let l117 = *base.add(20).cast::<i32>();

                                                                                        l117
                                                                                    };
                                                                                    Int4bound::Included(e119)
                                                                                }
                                                                                1 => {
                                                                                    let e119 = {
                                                                                        let l118 = *base.add(20).cast::<i32>();

                                                                                        l118
                                                                                    };
                                                                                    Int4bound::Excluded(e119)
                                                                                }
                                                                                n => {
                                                                                    debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                                    Int4bound::Unbounded
                                                                                }
                                                                            };
                                                                            let l120 = i32::from(
                                                                                *base
                                                                                    .add(24)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let v123 = match l120 {
                                                                                0 => {
                                                                                    let e123 = {
                                                                                        let l121 = *base.add(28).cast::<i32>();

                                                                                        l121
                                                                                    };
                                                                                    Int4bound::Included(e123)
                                                                                }
                                                                                1 => {
                                                                                    let e123 = {
                                                                                        let l122 = *base.add(28).cast::<i32>();

                                                                                        l122
                                                                                    };
                                                                                    Int4bound::Excluded(e123)
                                                                                }
                                                                                n => {
                                                                                    debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                                    Int4bound::Unbounded
                                                                                }
                                                                            };

                                                                            Int4range {
                                                                                start: v119,
                                                                                end: v123,
                                                                            }
                                                                        };
                                                                        DbValuePrimitive::Int4range(
                                                                            e240,
                                                                        )
                                                                    }
                                                                    29 => {
                                                                        let e240 = {
                                                                            let l124 = i32::from(
                                                                                *base
                                                                                    .add(16)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let v127 = match l124 {
                                                                                0 => {
                                                                                    let e127 = {
                                                                                        let l125 = *base.add(24).cast::<i64>();

                                                                                        l125
                                                                                    };
                                                                                    Int8bound::Included(e127)
                                                                                }
                                                                                1 => {
                                                                                    let e127 = {
                                                                                        let l126 = *base.add(24).cast::<i64>();

                                                                                        l126
                                                                                    };
                                                                                    Int8bound::Excluded(e127)
                                                                                }
                                                                                n => {
                                                                                    debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                                    Int8bound::Unbounded
                                                                                }
                                                                            };
                                                                            let l128 = i32::from(
                                                                                *base
                                                                                    .add(32)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let v131 = match l128 {
                                                                                0 => {
                                                                                    let e131 = {
                                                                                        let l129 = *base.add(40).cast::<i64>();

                                                                                        l129
                                                                                    };
                                                                                    Int8bound::Included(e131)
                                                                                }
                                                                                1 => {
                                                                                    let e131 = {
                                                                                        let l130 = *base.add(40).cast::<i64>();

                                                                                        l130
                                                                                    };
                                                                                    Int8bound::Excluded(e131)
                                                                                }
                                                                                n => {
                                                                                    debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                                    Int8bound::Unbounded
                                                                                }
                                                                            };

                                                                            Int8range {
                                                                                start: v127,
                                                                                end: v131,
                                                                            }
                                                                        };
                                                                        DbValuePrimitive::Int8range(
                                                                            e240,
                                                                        )
                                                                    }
                                                                    30 => {
                                                                        let e240 = {
                                                                            let l132 = i32::from(
                                                                                *base
                                                                                    .add(16)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let v139 = match l132 {
                                                                                0 => {
                                                                                    let e139 = {
                                                                                        let l133 = *base.add(20).cast::<*mut u8>();
                                                                                        let l134 = *base.add(24).cast::<usize>();
                                                                                        let len135 =
                                                                                            l134;
                                                                                        let bytes135 = _rt::Vec::from_raw_parts(l133.cast(), len135, len135);

                                                                                        _rt::string_lift(bytes135)
                                                                                    };
                                                                                    Numbound::Included(e139)
                                                                                }
                                                                                1 => {
                                                                                    let e139 = {
                                                                                        let l136 = *base.add(20).cast::<*mut u8>();
                                                                                        let l137 = *base.add(24).cast::<usize>();
                                                                                        let len138 =
                                                                                            l137;
                                                                                        let bytes138 = _rt::Vec::from_raw_parts(l136.cast(), len138, len138);

                                                                                        _rt::string_lift(bytes138)
                                                                                    };
                                                                                    Numbound::Excluded(e139)
                                                                                }
                                                                                n => {
                                                                                    debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                                    Numbound::Unbounded
                                                                                }
                                                                            };
                                                                            let l140 = i32::from(
                                                                                *base
                                                                                    .add(28)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let v147 = match l140 {
                                                                                0 => {
                                                                                    let e147 = {
                                                                                        let l141 = *base.add(32).cast::<*mut u8>();
                                                                                        let l142 = *base.add(36).cast::<usize>();
                                                                                        let len143 =
                                                                                            l142;
                                                                                        let bytes143 = _rt::Vec::from_raw_parts(l141.cast(), len143, len143);

                                                                                        _rt::string_lift(bytes143)
                                                                                    };
                                                                                    Numbound::Included(e147)
                                                                                }
                                                                                1 => {
                                                                                    let e147 = {
                                                                                        let l144 = *base.add(32).cast::<*mut u8>();
                                                                                        let l145 = *base.add(36).cast::<usize>();
                                                                                        let len146 =
                                                                                            l145;
                                                                                        let bytes146 = _rt::Vec::from_raw_parts(l144.cast(), len146, len146);

                                                                                        _rt::string_lift(bytes146)
                                                                                    };
                                                                                    Numbound::Excluded(e147)
                                                                                }
                                                                                n => {
                                                                                    debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                                    Numbound::Unbounded
                                                                                }
                                                                            };

                                                                            Numrange {
                                                                                start: v139,
                                                                                end: v147,
                                                                            }
                                                                        };
                                                                        DbValuePrimitive::Numrange(
                                                                            e240,
                                                                        )
                                                                    }
                                                                    31 => {
                                                                        let e240 = {
                                                                            let l148 = i32::from(
                                                                                *base
                                                                                    .add(16)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let v163 = match l148 {
                                                                                0 => {
                                                                                    let e163 = {
                                                                                        let l149 = *base.add(20).cast::<i32>();
                                                                                        let l150 = i32::from(*base.add(24).cast::<u8>());
                                                                                        let l151 = i32::from(*base.add(25).cast::<u8>());
                                                                                        let l152 = i32::from(*base.add(28).cast::<u8>());
                                                                                        let l153 = i32::from(*base.add(29).cast::<u8>());
                                                                                        let l154 = i32::from(*base.add(30).cast::<u8>());
                                                                                        let l155 = *base.add(32).cast::<i32>();

                                                                                        Timestamp{
                                              date: Date{
                                                year: l149,
                                                month: l150 as u8,
                                                day: l151 as u8,
                                              },
                                              time: Time{
                                                hour: l152 as u8,
                                                minute: l153 as u8,
                                                second: l154 as u8,
                                                nanosecond: l155 as u32,
                                              },
                                            }
                                                                                    };
                                                                                    Tsbound::Included(e163)
                                                                                }
                                                                                1 => {
                                                                                    let e163 = {
                                                                                        let l156 = *base.add(20).cast::<i32>();
                                                                                        let l157 = i32::from(*base.add(24).cast::<u8>());
                                                                                        let l158 = i32::from(*base.add(25).cast::<u8>());
                                                                                        let l159 = i32::from(*base.add(28).cast::<u8>());
                                                                                        let l160 = i32::from(*base.add(29).cast::<u8>());
                                                                                        let l161 = i32::from(*base.add(30).cast::<u8>());
                                                                                        let l162 = *base.add(32).cast::<i32>();

                                                                                        Timestamp{
                                              date: Date{
                                                year: l156,
                                                month: l157 as u8,
                                                day: l158 as u8,
                                              },
                                              time: Time{
                                                hour: l159 as u8,
                                                minute: l160 as u8,
                                                second: l161 as u8,
                                                nanosecond: l162 as u32,
                                              },
                                            }
                                                                                    };
                                                                                    Tsbound::Excluded(e163)
                                                                                }
                                                                                n => {
                                                                                    debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                                    Tsbound::Unbounded
                                                                                }
                                                                            };
                                                                            let l164 = i32::from(
                                                                                *base
                                                                                    .add(36)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let v179 = match l164 {
                                                                                0 => {
                                                                                    let e179 = {
                                                                                        let l165 = *base.add(40).cast::<i32>();
                                                                                        let l166 = i32::from(*base.add(44).cast::<u8>());
                                                                                        let l167 = i32::from(*base.add(45).cast::<u8>());
                                                                                        let l168 = i32::from(*base.add(48).cast::<u8>());
                                                                                        let l169 = i32::from(*base.add(49).cast::<u8>());
                                                                                        let l170 = i32::from(*base.add(50).cast::<u8>());
                                                                                        let l171 = *base.add(52).cast::<i32>();

                                                                                        Timestamp{
                                              date: Date{
                                                year: l165,
                                                month: l166 as u8,
                                                day: l167 as u8,
                                              },
                                              time: Time{
                                                hour: l168 as u8,
                                                minute: l169 as u8,
                                                second: l170 as u8,
                                                nanosecond: l171 as u32,
                                              },
                                            }
                                                                                    };
                                                                                    Tsbound::Included(e179)
                                                                                }
                                                                                1 => {
                                                                                    let e179 = {
                                                                                        let l172 = *base.add(40).cast::<i32>();
                                                                                        let l173 = i32::from(*base.add(44).cast::<u8>());
                                                                                        let l174 = i32::from(*base.add(45).cast::<u8>());
                                                                                        let l175 = i32::from(*base.add(48).cast::<u8>());
                                                                                        let l176 = i32::from(*base.add(49).cast::<u8>());
                                                                                        let l177 = i32::from(*base.add(50).cast::<u8>());
                                                                                        let l178 = *base.add(52).cast::<i32>();

                                                                                        Timestamp{
                                              date: Date{
                                                year: l172,
                                                month: l173 as u8,
                                                day: l174 as u8,
                                              },
                                              time: Time{
                                                hour: l175 as u8,
                                                minute: l176 as u8,
                                                second: l177 as u8,
                                                nanosecond: l178 as u32,
                                              },
                                            }
                                                                                    };
                                                                                    Tsbound::Excluded(e179)
                                                                                }
                                                                                n => {
                                                                                    debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                                    Tsbound::Unbounded
                                                                                }
                                                                            };

                                                                            Tsrange {
                                                                                start: v163,
                                                                                end: v179,
                                                                            }
                                                                        };
                                                                        DbValuePrimitive::Tsrange(
                                                                            e240,
                                                                        )
                                                                    }
                                                                    32 => {
                                                                        let e240 = {
                                                                            let l180 = i32::from(
                                                                                *base
                                                                                    .add(16)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let v197 = match l180 {
                                                                                0 => {
                                                                                    let e197 = {
                                                                                        let l181 = *base.add(20).cast::<i32>();
                                                                                        let l182 = i32::from(*base.add(24).cast::<u8>());
                                                                                        let l183 = i32::from(*base.add(25).cast::<u8>());
                                                                                        let l184 = i32::from(*base.add(28).cast::<u8>());
                                                                                        let l185 = i32::from(*base.add(29).cast::<u8>());
                                                                                        let l186 = i32::from(*base.add(30).cast::<u8>());
                                                                                        let l187 = *base.add(32).cast::<i32>();
                                                                                        let l188 = *base.add(36).cast::<i32>();

                                                                                        Timestamptz{
                                              timestamp: Timestamp{
                                                date: Date{
                                                  year: l181,
                                                  month: l182 as u8,
                                                  day: l183 as u8,
                                                },
                                                time: Time{
                                                  hour: l184 as u8,
                                                  minute: l185 as u8,
                                                  second: l186 as u8,
                                                  nanosecond: l187 as u32,
                                                },
                                              },
                                              offset: l188,
                                            }
                                                                                    };
                                                                                    Tstzbound::Included(e197)
                                                                                }
                                                                                1 => {
                                                                                    let e197 = {
                                                                                        let l189 = *base.add(20).cast::<i32>();
                                                                                        let l190 = i32::from(*base.add(24).cast::<u8>());
                                                                                        let l191 = i32::from(*base.add(25).cast::<u8>());
                                                                                        let l192 = i32::from(*base.add(28).cast::<u8>());
                                                                                        let l193 = i32::from(*base.add(29).cast::<u8>());
                                                                                        let l194 = i32::from(*base.add(30).cast::<u8>());
                                                                                        let l195 = *base.add(32).cast::<i32>();
                                                                                        let l196 = *base.add(36).cast::<i32>();

                                                                                        Timestamptz{
                                              timestamp: Timestamp{
                                                date: Date{
                                                  year: l189,
                                                  month: l190 as u8,
                                                  day: l191 as u8,
                                                },
                                                time: Time{
                                                  hour: l192 as u8,
                                                  minute: l193 as u8,
                                                  second: l194 as u8,
                                                  nanosecond: l195 as u32,
                                                },
                                              },
                                              offset: l196,
                                            }
                                                                                    };
                                                                                    Tstzbound::Excluded(e197)
                                                                                }
                                                                                n => {
                                                                                    debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                                    Tstzbound::Unbounded
                                                                                }
                                                                            };
                                                                            let l198 = i32::from(
                                                                                *base
                                                                                    .add(40)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let v215 = match l198 {
                                                                                0 => {
                                                                                    let e215 = {
                                                                                        let l199 = *base.add(44).cast::<i32>();
                                                                                        let l200 = i32::from(*base.add(48).cast::<u8>());
                                                                                        let l201 = i32::from(*base.add(49).cast::<u8>());
                                                                                        let l202 = i32::from(*base.add(52).cast::<u8>());
                                                                                        let l203 = i32::from(*base.add(53).cast::<u8>());
                                                                                        let l204 = i32::from(*base.add(54).cast::<u8>());
                                                                                        let l205 = *base.add(56).cast::<i32>();
                                                                                        let l206 = *base.add(60).cast::<i32>();

                                                                                        Timestamptz{
                                              timestamp: Timestamp{
                                                date: Date{
                                                  year: l199,
                                                  month: l200 as u8,
                                                  day: l201 as u8,
                                                },
                                                time: Time{
                                                  hour: l202 as u8,
                                                  minute: l203 as u8,
                                                  second: l204 as u8,
                                                  nanosecond: l205 as u32,
                                                },
                                              },
                                              offset: l206,
                                            }
                                                                                    };
                                                                                    Tstzbound::Included(e215)
                                                                                }
                                                                                1 => {
                                                                                    let e215 = {
                                                                                        let l207 = *base.add(44).cast::<i32>();
                                                                                        let l208 = i32::from(*base.add(48).cast::<u8>());
                                                                                        let l209 = i32::from(*base.add(49).cast::<u8>());
                                                                                        let l210 = i32::from(*base.add(52).cast::<u8>());
                                                                                        let l211 = i32::from(*base.add(53).cast::<u8>());
                                                                                        let l212 = i32::from(*base.add(54).cast::<u8>());
                                                                                        let l213 = *base.add(56).cast::<i32>();
                                                                                        let l214 = *base.add(60).cast::<i32>();

                                                                                        Timestamptz{
                                              timestamp: Timestamp{
                                                date: Date{
                                                  year: l207,
                                                  month: l208 as u8,
                                                  day: l209 as u8,
                                                },
                                                time: Time{
                                                  hour: l210 as u8,
                                                  minute: l211 as u8,
                                                  second: l212 as u8,
                                                  nanosecond: l213 as u32,
                                                },
                                              },
                                              offset: l214,
                                            }
                                                                                    };
                                                                                    Tstzbound::Excluded(e215)
                                                                                }
                                                                                n => {
                                                                                    debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                                    Tstzbound::Unbounded
                                                                                }
                                                                            };

                                                                            Tstzrange {
                                                                                start: v197,
                                                                                end: v215,
                                                                            }
                                                                        };
                                                                        DbValuePrimitive::Tstzrange(
                                                                            e240,
                                                                        )
                                                                    }
                                                                    33 => {
                                                                        let e240 = {
                                                                            let l216 = i32::from(
                                                                                *base
                                                                                    .add(16)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let v223 = match l216 {
                                                                                0 => {
                                                                                    let e223 = {
                                                                                        let l217 = *base.add(20).cast::<i32>();
                                                                                        let l218 = i32::from(*base.add(24).cast::<u8>());
                                                                                        let l219 = i32::from(*base.add(25).cast::<u8>());

                                                                                        Date{
                                              year: l217,
                                              month: l218 as u8,
                                              day: l219 as u8,
                                            }
                                                                                    };
                                                                                    Datebound::Included(e223)
                                                                                }
                                                                                1 => {
                                                                                    let e223 = {
                                                                                        let l220 = *base.add(20).cast::<i32>();
                                                                                        let l221 = i32::from(*base.add(24).cast::<u8>());
                                                                                        let l222 = i32::from(*base.add(25).cast::<u8>());

                                                                                        Date{
                                              year: l220,
                                              month: l221 as u8,
                                              day: l222 as u8,
                                            }
                                                                                    };
                                                                                    Datebound::Excluded(e223)
                                                                                }
                                                                                n => {
                                                                                    debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                                    Datebound::Unbounded
                                                                                }
                                                                            };
                                                                            let l224 = i32::from(
                                                                                *base
                                                                                    .add(28)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let v231 = match l224 {
                                                                                0 => {
                                                                                    let e231 = {
                                                                                        let l225 = *base.add(32).cast::<i32>();
                                                                                        let l226 = i32::from(*base.add(36).cast::<u8>());
                                                                                        let l227 = i32::from(*base.add(37).cast::<u8>());

                                                                                        Date{
                                              year: l225,
                                              month: l226 as u8,
                                              day: l227 as u8,
                                            }
                                                                                    };
                                                                                    Datebound::Included(e231)
                                                                                }
                                                                                1 => {
                                                                                    let e231 = {
                                                                                        let l228 = *base.add(32).cast::<i32>();
                                                                                        let l229 = i32::from(*base.add(36).cast::<u8>());
                                                                                        let l230 = i32::from(*base.add(37).cast::<u8>());

                                                                                        Date{
                                              year: l228,
                                              month: l229 as u8,
                                              day: l230 as u8,
                                            }
                                                                                    };
                                                                                    Datebound::Excluded(e231)
                                                                                }
                                                                                n => {
                                                                                    debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                                    Datebound::Unbounded
                                                                                }
                                                                            };

                                                                            Daterange {
                                                                                start: v223,
                                                                                end: v231,
                                                                            }
                                                                        };
                                                                        DbValuePrimitive::Daterange(
                                                                            e240,
                                                                        )
                                                                    }
                                                                    34 => {
                                                                        let e240 = {
                                                                            let l232 = *base
                                                                                .add(16)
                                                                                .cast::<i64>();

                                                                            l232
                                                                        };
                                                                        DbValuePrimitive::Money(
                                                                            e240,
                                                                        )
                                                                    }
                                                                    35 => {
                                                                        let e240 = {
                                                                            let l233 = *base
                                                                                .add(16)
                                                                                .cast::<i32>();

                                                                            l233 as u32
                                                                        };
                                                                        DbValuePrimitive::Oid(e240)
                                                                    }
                                                                    36 => {
                                                                        let e240 = {
                                                                            let l234 = *base
                                                                                .add(16)
                                                                                .cast::<*mut u8>();
                                                                            let l235 = *base
                                                                                .add(20)
                                                                                .cast::<usize>();
                                                                            let len236 = l235;
                                                                            let bytes236 = _rt::Vec::from_raw_parts(l234.cast(), len236, len236);
                                                                            let l237 = *base
                                                                                .add(24)
                                                                                .cast::<*mut u8>();
                                                                            let l238 = *base
                                                                                .add(28)
                                                                                .cast::<usize>();
                                                                            let len239 = l238;
                                                                            let bytes239 = _rt::Vec::from_raw_parts(l237.cast(), len239, len239);

                                                                            Enumeration {
                                                                                name:
                                                                                    _rt::string_lift(
                                                                                        bytes236,
                                                                                    ),
                                                                                value:
                                                                                    _rt::string_lift(
                                                                                        bytes239,
                                                                                    ),
                                                                            }
                                                                        };
                                                                        DbValuePrimitive::Enumeration(e240)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 37, "invalid enum discriminant");
                                                                        DbValuePrimitive::Null
                                                                    }
                                                                };

                                                                v240
                                                            };
                                                            DbValue::Primitive(e478)
                                                        }
                                                        n => {
                                                            debug_assert_eq!(
                                                                n, 1,
                                                                "invalid enum discriminant"
                                                            );
                                                            let e478 = {
                                                                let l241 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l242 =
                                                                    *base.add(12).cast::<usize>();
                                                                let base477 = l241;
                                                                let len477 = l242;
                                                                let mut result477 =
                                                                    _rt::Vec::with_capacity(len477);
                                                                for i in 0..len477 {
                                                                    let base = base477.add(i * 56);
                                                                    let e477 = {
                                                                        let l243 = i32::from(
                                                                            *base
                                                                                .add(0)
                                                                                .cast::<u8>(),
                                                                        );
                                                                        let v476 = match l243 {
                                                                            0 => {
                                                                                let e476 = {
                                                                                    let l244 = i32::from(*base.add(8).cast::<i8>());

                                                                                    l244 as i8
                                                                                };
                                                                                DbValuePrimitive::Character(e476)
                                                                            }
                                                                            1 => {
                                                                                let e476 = {
                                                                                    let l245 = i32::from(*base.add(8).cast::<i16>());

                                                                                    l245 as i16
                                                                                };
                                                                                DbValuePrimitive::Int2(e476)
                                                                            }
                                                                            2 => {
                                                                                let e476 = {
                                                                                    let l246 = *base.add(8).cast::<i32>();

                                                                                    l246
                                                                                };
                                                                                DbValuePrimitive::Int4(e476)
                                                                            }
                                                                            3 => {
                                                                                let e476 = {
                                                                                    let l247 = *base.add(8).cast::<i64>();

                                                                                    l247
                                                                                };
                                                                                DbValuePrimitive::Int8(e476)
                                                                            }
                                                                            4 => {
                                                                                let e476 = {
                                                                                    let l248 = *base.add(8).cast::<f32>();

                                                                                    l248
                                                                                };
                                                                                DbValuePrimitive::Float4(e476)
                                                                            }
                                                                            5 => {
                                                                                let e476 = {
                                                                                    let l249 = *base.add(8).cast::<f64>();

                                                                                    l249
                                                                                };
                                                                                DbValuePrimitive::Float8(e476)
                                                                            }
                                                                            6 => {
                                                                                let e476 = {
                                                                                    let l250 = *base.add(8).cast::<*mut u8>();
                                                                                    let l251 = *base.add(12).cast::<usize>();
                                                                                    let len252 =
                                                                                        l251;
                                                                                    let bytes252 = _rt::Vec::from_raw_parts(l250.cast(), len252, len252);

                                                                                    _rt::string_lift(
                                                                                        bytes252,
                                                                                    )
                                                                                };
                                                                                DbValuePrimitive::Numeric(e476)
                                                                            }
                                                                            7 => {
                                                                                let e476 = {
                                                                                    let l253 = i32::from(*base.add(8).cast::<u8>());

                                                                                    _rt::bool_lift(
                                                                                        l253 as u8,
                                                                                    )
                                                                                };
                                                                                DbValuePrimitive::Boolean(e476)
                                                                            }
                                                                            8 => {
                                                                                let e476 = {
                                                                                    let l254 = *base.add(8).cast::<*mut u8>();
                                                                                    let l255 = *base.add(12).cast::<usize>();
                                                                                    let len256 =
                                                                                        l255;
                                                                                    let bytes256 = _rt::Vec::from_raw_parts(l254.cast(), len256, len256);

                                                                                    _rt::string_lift(
                                                                                        bytes256,
                                                                                    )
                                                                                };
                                                                                DbValuePrimitive::Text(e476)
                                                                            }
                                                                            9 => {
                                                                                let e476 = {
                                                                                    let l257 = *base.add(8).cast::<*mut u8>();
                                                                                    let l258 = *base.add(12).cast::<usize>();
                                                                                    let len259 =
                                                                                        l258;
                                                                                    let bytes259 = _rt::Vec::from_raw_parts(l257.cast(), len259, len259);

                                                                                    _rt::string_lift(
                                                                                        bytes259,
                                                                                    )
                                                                                };
                                                                                DbValuePrimitive::Varchar(e476)
                                                                            }
                                                                            10 => {
                                                                                let e476 = {
                                                                                    let l260 = *base.add(8).cast::<*mut u8>();
                                                                                    let l261 = *base.add(12).cast::<usize>();
                                                                                    let len262 =
                                                                                        l261;
                                                                                    let bytes262 = _rt::Vec::from_raw_parts(l260.cast(), len262, len262);

                                                                                    _rt::string_lift(
                                                                                        bytes262,
                                                                                    )
                                                                                };
                                                                                DbValuePrimitive::Bpchar(e476)
                                                                            }
                                                                            11 => {
                                                                                let e476 = {
                                                                                    let l263 = *base.add(8).cast::<i32>();
                                                                                    let l264 = i32::from(*base.add(12).cast::<u8>());
                                                                                    let l265 = i32::from(*base.add(13).cast::<u8>());
                                                                                    let l266 = i32::from(*base.add(16).cast::<u8>());
                                                                                    let l267 = i32::from(*base.add(17).cast::<u8>());
                                                                                    let l268 = i32::from(*base.add(18).cast::<u8>());
                                                                                    let l269 = *base.add(20).cast::<i32>();

                                                                                    Timestamp{
                                            date: Date{
                                              year: l263,
                                              month: l264 as u8,
                                              day: l265 as u8,
                                            },
                                            time: Time{
                                              hour: l266 as u8,
                                              minute: l267 as u8,
                                              second: l268 as u8,
                                              nanosecond: l269 as u32,
                                            },
                                          }
                                                                                };
                                                                                DbValuePrimitive::Timestamp(e476)
                                                                            }
                                                                            12 => {
                                                                                let e476 = {
                                                                                    let l270 = *base.add(8).cast::<i32>();
                                                                                    let l271 = i32::from(*base.add(12).cast::<u8>());
                                                                                    let l272 = i32::from(*base.add(13).cast::<u8>());
                                                                                    let l273 = i32::from(*base.add(16).cast::<u8>());
                                                                                    let l274 = i32::from(*base.add(17).cast::<u8>());
                                                                                    let l275 = i32::from(*base.add(18).cast::<u8>());
                                                                                    let l276 = *base.add(20).cast::<i32>();
                                                                                    let l277 = *base.add(24).cast::<i32>();

                                                                                    Timestamptz{
                                            timestamp: Timestamp{
                                              date: Date{
                                                year: l270,
                                                month: l271 as u8,
                                                day: l272 as u8,
                                              },
                                              time: Time{
                                                hour: l273 as u8,
                                                minute: l274 as u8,
                                                second: l275 as u8,
                                                nanosecond: l276 as u32,
                                              },
                                            },
                                            offset: l277,
                                          }
                                                                                };
                                                                                DbValuePrimitive::Timestamptz(e476)
                                                                            }
                                                                            13 => {
                                                                                let e476 = {
                                                                                    let l278 = *base.add(8).cast::<i32>();
                                                                                    let l279 = i32::from(*base.add(12).cast::<u8>());
                                                                                    let l280 = i32::from(*base.add(13).cast::<u8>());

                                                                                    Date {
                                                                                        year: l278,
                                                                                        month: l279
                                                                                            as u8,
                                                                                        day: l280
                                                                                            as u8,
                                                                                    }
                                                                                };
                                                                                DbValuePrimitive::Date(e476)
                                                                            }
                                                                            14 => {
                                                                                let e476 = {
                                                                                    let l281 = i32::from(*base.add(8).cast::<u8>());
                                                                                    let l282 = i32::from(*base.add(9).cast::<u8>());
                                                                                    let l283 = i32::from(*base.add(10).cast::<u8>());
                                                                                    let l284 = *base.add(12).cast::<i32>();

                                                                                    Time{
                                            hour: l281 as u8,
                                            minute: l282 as u8,
                                            second: l283 as u8,
                                            nanosecond: l284 as u32,
                                          }
                                                                                };
                                                                                DbValuePrimitive::Time(e476)
                                                                            }
                                                                            15 => {
                                                                                let e476 = {
                                                                                    let l285 = i32::from(*base.add(8).cast::<u8>());
                                                                                    let l286 = i32::from(*base.add(9).cast::<u8>());
                                                                                    let l287 = i32::from(*base.add(10).cast::<u8>());
                                                                                    let l288 = *base.add(12).cast::<i32>();
                                                                                    let l289 = *base.add(16).cast::<i32>();

                                                                                    Timetz{
                                            time: Time{
                                              hour: l285 as u8,
                                              minute: l286 as u8,
                                              second: l287 as u8,
                                              nanosecond: l288 as u32,
                                            },
                                            offset: l289,
                                          }
                                                                                };
                                                                                DbValuePrimitive::Timetz(e476)
                                                                            }
                                                                            16 => {
                                                                                let e476 = {
                                                                                    let l290 = *base.add(8).cast::<i32>();
                                                                                    let l291 = *base.add(12).cast::<i32>();
                                                                                    let l292 = *base.add(16).cast::<i64>();

                                                                                    Interval{
                                            months: l290,
                                            days: l291,
                                            microseconds: l292,
                                          }
                                                                                };
                                                                                DbValuePrimitive::Interval(e476)
                                                                            }
                                                                            17 => {
                                                                                let e476 = {
                                                                                    let l293 = *base.add(8).cast::<*mut u8>();
                                                                                    let l294 = *base.add(12).cast::<usize>();
                                                                                    let len295 =
                                                                                        l294;

                                                                                    _rt::Vec::from_raw_parts(l293.cast(), len295, len295)
                                                                                };
                                                                                DbValuePrimitive::Bytea(e476)
                                                                            }
                                                                            18 => {
                                                                                let e476 = {
                                                                                    let l296 = *base.add(8).cast::<*mut u8>();
                                                                                    let l297 = *base.add(12).cast::<usize>();
                                                                                    let len298 =
                                                                                        l297;
                                                                                    let bytes298 = _rt::Vec::from_raw_parts(l296.cast(), len298, len298);

                                                                                    _rt::string_lift(
                                                                                        bytes298,
                                                                                    )
                                                                                };
                                                                                DbValuePrimitive::Json(e476)
                                                                            }
                                                                            19 => {
                                                                                let e476 = {
                                                                                    let l299 = *base.add(8).cast::<*mut u8>();
                                                                                    let l300 = *base.add(12).cast::<usize>();
                                                                                    let len301 =
                                                                                        l300;
                                                                                    let bytes301 = _rt::Vec::from_raw_parts(l299.cast(), len301, len301);

                                                                                    _rt::string_lift(
                                                                                        bytes301,
                                                                                    )
                                                                                };
                                                                                DbValuePrimitive::Jsonb(e476)
                                                                            }
                                                                            20 => {
                                                                                let e476 = {
                                                                                    let l302 = *base.add(8).cast::<*mut u8>();
                                                                                    let l303 = *base.add(12).cast::<usize>();
                                                                                    let len304 =
                                                                                        l303;
                                                                                    let bytes304 = _rt::Vec::from_raw_parts(l302.cast(), len304, len304);

                                                                                    _rt::string_lift(
                                                                                        bytes304,
                                                                                    )
                                                                                };
                                                                                DbValuePrimitive::Jsonpath(e476)
                                                                            }
                                                                            21 => {
                                                                                let e476 = {
                                                                                    let l305 = *base.add(8).cast::<*mut u8>();
                                                                                    let l306 = *base.add(12).cast::<usize>();
                                                                                    let len307 =
                                                                                        l306;
                                                                                    let bytes307 = _rt::Vec::from_raw_parts(l305.cast(), len307, len307);

                                                                                    _rt::string_lift(
                                                                                        bytes307,
                                                                                    )
                                                                                };
                                                                                DbValuePrimitive::Xml(e476)
                                                                            }
                                                                            22 => {
                                                                                let e476 = {
                                                                                    let l308 = *base.add(8).cast::<i64>();
                                                                                    let l309 = *base.add(16).cast::<i64>();

                                                                                    Uuid{
                                            high_bits: l308 as u64,
                                            low_bits: l309 as u64,
                                          }
                                                                                };
                                                                                DbValuePrimitive::Uuid(e476)
                                                                            }
                                                                            23 => {
                                                                                let e476 = {
                                                                                    let l310 = i32::from(*base.add(8).cast::<u8>());
                                                                                    let v323 =
                                                                                        match l310 {
                                                                                            0 => {
                                                                                                let e323 = {
                                                let l311 = i32::from(*base.add(10).cast::<u8>());
                                                let l312 = i32::from(*base.add(11).cast::<u8>());
                                                let l313 = i32::from(*base.add(12).cast::<u8>());
                                                let l314 = i32::from(*base.add(13).cast::<u8>());

                                                (l311 as u8, l312 as u8, l313 as u8, l314 as u8)
                                              };
                                                                                                IpAddress::Ipv4(e323)
                                                                                            }
                                                                                            n => {
                                                                                                debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                                                                let e323 = {
                                                let l315 = i32::from(*base.add(10).cast::<u16>());
                                                let l316 = i32::from(*base.add(12).cast::<u16>());
                                                let l317 = i32::from(*base.add(14).cast::<u16>());
                                                let l318 = i32::from(*base.add(16).cast::<u16>());
                                                let l319 = i32::from(*base.add(18).cast::<u16>());
                                                let l320 = i32::from(*base.add(20).cast::<u16>());
                                                let l321 = i32::from(*base.add(22).cast::<u16>());
                                                let l322 = i32::from(*base.add(24).cast::<u16>());

                                                (l315 as u16, l316 as u16, l317 as u16, l318 as u16, l319 as u16, l320 as u16, l321 as u16, l322 as u16)
                                              };
                                                                                                IpAddress::Ipv6(e323)
                                                                                            }
                                                                                        };

                                                                                    v323
                                                                                };
                                                                                DbValuePrimitive::Inet(e476)
                                                                            }
                                                                            24 => {
                                                                                let e476 = {
                                                                                    let l324 = i32::from(*base.add(8).cast::<u8>());
                                                                                    let v337 =
                                                                                        match l324 {
                                                                                            0 => {
                                                                                                let e337 = {
                                                let l325 = i32::from(*base.add(10).cast::<u8>());
                                                let l326 = i32::from(*base.add(11).cast::<u8>());
                                                let l327 = i32::from(*base.add(12).cast::<u8>());
                                                let l328 = i32::from(*base.add(13).cast::<u8>());

                                                (l325 as u8, l326 as u8, l327 as u8, l328 as u8)
                                              };
                                                                                                IpAddress::Ipv4(e337)
                                                                                            }
                                                                                            n => {
                                                                                                debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                                                                let e337 = {
                                                let l329 = i32::from(*base.add(10).cast::<u16>());
                                                let l330 = i32::from(*base.add(12).cast::<u16>());
                                                let l331 = i32::from(*base.add(14).cast::<u16>());
                                                let l332 = i32::from(*base.add(16).cast::<u16>());
                                                let l333 = i32::from(*base.add(18).cast::<u16>());
                                                let l334 = i32::from(*base.add(20).cast::<u16>());
                                                let l335 = i32::from(*base.add(22).cast::<u16>());
                                                let l336 = i32::from(*base.add(24).cast::<u16>());

                                                (l329 as u16, l330 as u16, l331 as u16, l332 as u16, l333 as u16, l334 as u16, l335 as u16, l336 as u16)
                                              };
                                                                                                IpAddress::Ipv6(e337)
                                                                                            }
                                                                                        };

                                                                                    v337
                                                                                };
                                                                                DbValuePrimitive::Cidr(e476)
                                                                            }
                                                                            25 => {
                                                                                let e476 = {
                                                                                    let l338 = i32::from(*base.add(8).cast::<u8>());
                                                                                    let l339 = i32::from(*base.add(9).cast::<u8>());
                                                                                    let l340 = i32::from(*base.add(10).cast::<u8>());
                                                                                    let l341 = i32::from(*base.add(11).cast::<u8>());
                                                                                    let l342 = i32::from(*base.add(12).cast::<u8>());
                                                                                    let l343 = i32::from(*base.add(13).cast::<u8>());

                                                                                    MacAddress{
                                            octets: (l338 as u8, l339 as u8, l340 as u8, l341 as u8, l342 as u8, l343 as u8),
                                          }
                                                                                };
                                                                                DbValuePrimitive::Macaddr(e476)
                                                                            }
                                                                            26 => {
                                                                                let e476 = {
                                                                                    let l344 = *base.add(8).cast::<*mut u8>();
                                                                                    let l345 = *base.add(12).cast::<usize>();
                                                                                    let base347 =
                                                                                        l344;
                                                                                    let len347 =
                                                                                        l345;
                                                                                    let mut result347 = _rt::Vec::with_capacity(len347);
                                                                                    for i in
                                                                                        0..len347
                                                                                    {
                                                                                        let base = base347.add(i * 1);
                                                                                        let e347 = {
                                                                                            let l346 = i32::from(*base.add(0).cast::<u8>());

                                                                                            _rt::bool_lift(l346 as u8)
                                                                                        };
                                                                                        result347
                                                                                            .push(
                                                                                            e347,
                                                                                        );
                                                                                    }
                                                                                    _rt::cabi_dealloc(base347, len347 * 1, 1);

                                                                                    result347
                                                                                };
                                                                                DbValuePrimitive::Bit(e476)
                                                                            }
                                                                            27 => {
                                                                                let e476 = {
                                                                                    let l348 = *base.add(8).cast::<*mut u8>();
                                                                                    let l349 = *base.add(12).cast::<usize>();
                                                                                    let base351 =
                                                                                        l348;
                                                                                    let len351 =
                                                                                        l349;
                                                                                    let mut result351 = _rt::Vec::with_capacity(len351);
                                                                                    for i in
                                                                                        0..len351
                                                                                    {
                                                                                        let base = base351.add(i * 1);
                                                                                        let e351 = {
                                                                                            let l350 = i32::from(*base.add(0).cast::<u8>());

                                                                                            _rt::bool_lift(l350 as u8)
                                                                                        };
                                                                                        result351
                                                                                            .push(
                                                                                            e351,
                                                                                        );
                                                                                    }
                                                                                    _rt::cabi_dealloc(base351, len351 * 1, 1);

                                                                                    result351
                                                                                };
                                                                                DbValuePrimitive::Varbit(e476)
                                                                            }
                                                                            28 => {
                                                                                let e476 = {
                                                                                    let l352 = i32::from(*base.add(8).cast::<u8>());
                                                                                    let v355 =
                                                                                        match l352 {
                                                                                            0 => {
                                                                                                let e355 = {
                                                let l353 = *base.add(12).cast::<i32>();

                                                l353
                                              };
                                                                                                Int4bound::Included(e355)
                                                                                            }
                                                                                            1 => {
                                                                                                let e355 = {
                                                let l354 = *base.add(12).cast::<i32>();

                                                l354
                                              };
                                                                                                Int4bound::Excluded(e355)
                                                                                            }
                                                                                            n => {
                                                                                                debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                                                Int4bound::Unbounded
                                                                                            }
                                                                                        };
                                                                                    let l356 = i32::from(*base.add(16).cast::<u8>());
                                                                                    let v359 =
                                                                                        match l356 {
                                                                                            0 => {
                                                                                                let e359 = {
                                                let l357 = *base.add(20).cast::<i32>();

                                                l357
                                              };
                                                                                                Int4bound::Included(e359)
                                                                                            }
                                                                                            1 => {
                                                                                                let e359 = {
                                                let l358 = *base.add(20).cast::<i32>();

                                                l358
                                              };
                                                                                                Int4bound::Excluded(e359)
                                                                                            }
                                                                                            n => {
                                                                                                debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                                                Int4bound::Unbounded
                                                                                            }
                                                                                        };

                                                                                    Int4range {
                                                                                        start: v355,
                                                                                        end: v359,
                                                                                    }
                                                                                };
                                                                                DbValuePrimitive::Int4range(e476)
                                                                            }
                                                                            29 => {
                                                                                let e476 = {
                                                                                    let l360 = i32::from(*base.add(8).cast::<u8>());
                                                                                    let v363 =
                                                                                        match l360 {
                                                                                            0 => {
                                                                                                let e363 = {
                                                let l361 = *base.add(16).cast::<i64>();

                                                l361
                                              };
                                                                                                Int8bound::Included(e363)
                                                                                            }
                                                                                            1 => {
                                                                                                let e363 = {
                                                let l362 = *base.add(16).cast::<i64>();

                                                l362
                                              };
                                                                                                Int8bound::Excluded(e363)
                                                                                            }
                                                                                            n => {
                                                                                                debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                                                Int8bound::Unbounded
                                                                                            }
                                                                                        };
                                                                                    let l364 = i32::from(*base.add(24).cast::<u8>());
                                                                                    let v367 =
                                                                                        match l364 {
                                                                                            0 => {
                                                                                                let e367 = {
                                                let l365 = *base.add(32).cast::<i64>();

                                                l365
                                              };
                                                                                                Int8bound::Included(e367)
                                                                                            }
                                                                                            1 => {
                                                                                                let e367 = {
                                                let l366 = *base.add(32).cast::<i64>();

                                                l366
                                              };
                                                                                                Int8bound::Excluded(e367)
                                                                                            }
                                                                                            n => {
                                                                                                debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                                                Int8bound::Unbounded
                                                                                            }
                                                                                        };

                                                                                    Int8range {
                                                                                        start: v363,
                                                                                        end: v367,
                                                                                    }
                                                                                };
                                                                                DbValuePrimitive::Int8range(e476)
                                                                            }
                                                                            30 => {
                                                                                let e476 = {
                                                                                    let l368 = i32::from(*base.add(8).cast::<u8>());
                                                                                    let v375 =
                                                                                        match l368 {
                                                                                            0 => {
                                                                                                let e375 = {
                                                let l369 = *base.add(12).cast::<*mut u8>();
                                                let l370 = *base.add(16).cast::<usize>();
                                                let len371 = l370;
                                                let bytes371 = _rt::Vec::from_raw_parts(l369.cast(), len371, len371);

                                                _rt::string_lift(bytes371)
                                              };
                                                                                                Numbound::Included(e375)
                                                                                            }
                                                                                            1 => {
                                                                                                let e375 = {
                                                let l372 = *base.add(12).cast::<*mut u8>();
                                                let l373 = *base.add(16).cast::<usize>();
                                                let len374 = l373;
                                                let bytes374 = _rt::Vec::from_raw_parts(l372.cast(), len374, len374);

                                                _rt::string_lift(bytes374)
                                              };
                                                                                                Numbound::Excluded(e375)
                                                                                            }
                                                                                            n => {
                                                                                                debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                                                Numbound::Unbounded
                                                                                            }
                                                                                        };
                                                                                    let l376 = i32::from(*base.add(20).cast::<u8>());
                                                                                    let v383 =
                                                                                        match l376 {
                                                                                            0 => {
                                                                                                let e383 = {
                                                let l377 = *base.add(24).cast::<*mut u8>();
                                                let l378 = *base.add(28).cast::<usize>();
                                                let len379 = l378;
                                                let bytes379 = _rt::Vec::from_raw_parts(l377.cast(), len379, len379);

                                                _rt::string_lift(bytes379)
                                              };
                                                                                                Numbound::Included(e383)
                                                                                            }
                                                                                            1 => {
                                                                                                let e383 = {
                                                let l380 = *base.add(24).cast::<*mut u8>();
                                                let l381 = *base.add(28).cast::<usize>();
                                                let len382 = l381;
                                                let bytes382 = _rt::Vec::from_raw_parts(l380.cast(), len382, len382);

                                                _rt::string_lift(bytes382)
                                              };
                                                                                                Numbound::Excluded(e383)
                                                                                            }
                                                                                            n => {
                                                                                                debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                                                Numbound::Unbounded
                                                                                            }
                                                                                        };

                                                                                    Numrange {
                                                                                        start: v375,
                                                                                        end: v383,
                                                                                    }
                                                                                };
                                                                                DbValuePrimitive::Numrange(e476)
                                                                            }
                                                                            31 => {
                                                                                let e476 = {
                                                                                    let l384 = i32::from(*base.add(8).cast::<u8>());
                                                                                    let v399 =
                                                                                        match l384 {
                                                                                            0 => {
                                                                                                let e399 = {
                                                let l385 = *base.add(12).cast::<i32>();
                                                let l386 = i32::from(*base.add(16).cast::<u8>());
                                                let l387 = i32::from(*base.add(17).cast::<u8>());
                                                let l388 = i32::from(*base.add(20).cast::<u8>());
                                                let l389 = i32::from(*base.add(21).cast::<u8>());
                                                let l390 = i32::from(*base.add(22).cast::<u8>());
                                                let l391 = *base.add(24).cast::<i32>();

                                                Timestamp{
                                                  date: Date{
                                                    year: l385,
                                                    month: l386 as u8,
                                                    day: l387 as u8,
                                                  },
                                                  time: Time{
                                                    hour: l388 as u8,
                                                    minute: l389 as u8,
                                                    second: l390 as u8,
                                                    nanosecond: l391 as u32,
                                                  },
                                                }
                                              };
                                                                                                Tsbound::Included(e399)
                                                                                            }
                                                                                            1 => {
                                                                                                let e399 = {
                                                let l392 = *base.add(12).cast::<i32>();
                                                let l393 = i32::from(*base.add(16).cast::<u8>());
                                                let l394 = i32::from(*base.add(17).cast::<u8>());
                                                let l395 = i32::from(*base.add(20).cast::<u8>());
                                                let l396 = i32::from(*base.add(21).cast::<u8>());
                                                let l397 = i32::from(*base.add(22).cast::<u8>());
                                                let l398 = *base.add(24).cast::<i32>();

                                                Timestamp{
                                                  date: Date{
                                                    year: l392,
                                                    month: l393 as u8,
                                                    day: l394 as u8,
                                                  },
                                                  time: Time{
                                                    hour: l395 as u8,
                                                    minute: l396 as u8,
                                                    second: l397 as u8,
                                                    nanosecond: l398 as u32,
                                                  },
                                                }
                                              };
                                                                                                Tsbound::Excluded(e399)
                                                                                            }
                                                                                            n => {
                                                                                                debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                                                Tsbound::Unbounded
                                                                                            }
                                                                                        };
                                                                                    let l400 = i32::from(*base.add(28).cast::<u8>());
                                                                                    let v415 =
                                                                                        match l400 {
                                                                                            0 => {
                                                                                                let e415 = {
                                                let l401 = *base.add(32).cast::<i32>();
                                                let l402 = i32::from(*base.add(36).cast::<u8>());
                                                let l403 = i32::from(*base.add(37).cast::<u8>());
                                                let l404 = i32::from(*base.add(40).cast::<u8>());
                                                let l405 = i32::from(*base.add(41).cast::<u8>());
                                                let l406 = i32::from(*base.add(42).cast::<u8>());
                                                let l407 = *base.add(44).cast::<i32>();

                                                Timestamp{
                                                  date: Date{
                                                    year: l401,
                                                    month: l402 as u8,
                                                    day: l403 as u8,
                                                  },
                                                  time: Time{
                                                    hour: l404 as u8,
                                                    minute: l405 as u8,
                                                    second: l406 as u8,
                                                    nanosecond: l407 as u32,
                                                  },
                                                }
                                              };
                                                                                                Tsbound::Included(e415)
                                                                                            }
                                                                                            1 => {
                                                                                                let e415 = {
                                                let l408 = *base.add(32).cast::<i32>();
                                                let l409 = i32::from(*base.add(36).cast::<u8>());
                                                let l410 = i32::from(*base.add(37).cast::<u8>());
                                                let l411 = i32::from(*base.add(40).cast::<u8>());
                                                let l412 = i32::from(*base.add(41).cast::<u8>());
                                                let l413 = i32::from(*base.add(42).cast::<u8>());
                                                let l414 = *base.add(44).cast::<i32>();

                                                Timestamp{
                                                  date: Date{
                                                    year: l408,
                                                    month: l409 as u8,
                                                    day: l410 as u8,
                                                  },
                                                  time: Time{
                                                    hour: l411 as u8,
                                                    minute: l412 as u8,
                                                    second: l413 as u8,
                                                    nanosecond: l414 as u32,
                                                  },
                                                }
                                              };
                                                                                                Tsbound::Excluded(e415)
                                                                                            }
                                                                                            n => {
                                                                                                debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                                                Tsbound::Unbounded
                                                                                            }
                                                                                        };

                                                                                    Tsrange {
                                                                                        start: v399,
                                                                                        end: v415,
                                                                                    }
                                                                                };
                                                                                DbValuePrimitive::Tsrange(e476)
                                                                            }
                                                                            32 => {
                                                                                let e476 = {
                                                                                    let l416 = i32::from(*base.add(8).cast::<u8>());
                                                                                    let v433 =
                                                                                        match l416 {
                                                                                            0 => {
                                                                                                let e433 = {
                                                let l417 = *base.add(12).cast::<i32>();
                                                let l418 = i32::from(*base.add(16).cast::<u8>());
                                                let l419 = i32::from(*base.add(17).cast::<u8>());
                                                let l420 = i32::from(*base.add(20).cast::<u8>());
                                                let l421 = i32::from(*base.add(21).cast::<u8>());
                                                let l422 = i32::from(*base.add(22).cast::<u8>());
                                                let l423 = *base.add(24).cast::<i32>();
                                                let l424 = *base.add(28).cast::<i32>();

                                                Timestamptz{
                                                  timestamp: Timestamp{
                                                    date: Date{
                                                      year: l417,
                                                      month: l418 as u8,
                                                      day: l419 as u8,
                                                    },
                                                    time: Time{
                                                      hour: l420 as u8,
                                                      minute: l421 as u8,
                                                      second: l422 as u8,
                                                      nanosecond: l423 as u32,
                                                    },
                                                  },
                                                  offset: l424,
                                                }
                                              };
                                                                                                Tstzbound::Included(e433)
                                                                                            }
                                                                                            1 => {
                                                                                                let e433 = {
                                                let l425 = *base.add(12).cast::<i32>();
                                                let l426 = i32::from(*base.add(16).cast::<u8>());
                                                let l427 = i32::from(*base.add(17).cast::<u8>());
                                                let l428 = i32::from(*base.add(20).cast::<u8>());
                                                let l429 = i32::from(*base.add(21).cast::<u8>());
                                                let l430 = i32::from(*base.add(22).cast::<u8>());
                                                let l431 = *base.add(24).cast::<i32>();
                                                let l432 = *base.add(28).cast::<i32>();

                                                Timestamptz{
                                                  timestamp: Timestamp{
                                                    date: Date{
                                                      year: l425,
                                                      month: l426 as u8,
                                                      day: l427 as u8,
                                                    },
                                                    time: Time{
                                                      hour: l428 as u8,
                                                      minute: l429 as u8,
                                                      second: l430 as u8,
                                                      nanosecond: l431 as u32,
                                                    },
                                                  },
                                                  offset: l432,
                                                }
                                              };
                                                                                                Tstzbound::Excluded(e433)
                                                                                            }
                                                                                            n => {
                                                                                                debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                                                Tstzbound::Unbounded
                                                                                            }
                                                                                        };
                                                                                    let l434 = i32::from(*base.add(32).cast::<u8>());
                                                                                    let v451 =
                                                                                        match l434 {
                                                                                            0 => {
                                                                                                let e451 = {
                                                let l435 = *base.add(36).cast::<i32>();
                                                let l436 = i32::from(*base.add(40).cast::<u8>());
                                                let l437 = i32::from(*base.add(41).cast::<u8>());
                                                let l438 = i32::from(*base.add(44).cast::<u8>());
                                                let l439 = i32::from(*base.add(45).cast::<u8>());
                                                let l440 = i32::from(*base.add(46).cast::<u8>());
                                                let l441 = *base.add(48).cast::<i32>();
                                                let l442 = *base.add(52).cast::<i32>();

                                                Timestamptz{
                                                  timestamp: Timestamp{
                                                    date: Date{
                                                      year: l435,
                                                      month: l436 as u8,
                                                      day: l437 as u8,
                                                    },
                                                    time: Time{
                                                      hour: l438 as u8,
                                                      minute: l439 as u8,
                                                      second: l440 as u8,
                                                      nanosecond: l441 as u32,
                                                    },
                                                  },
                                                  offset: l442,
                                                }
                                              };
                                                                                                Tstzbound::Included(e451)
                                                                                            }
                                                                                            1 => {
                                                                                                let e451 = {
                                                let l443 = *base.add(36).cast::<i32>();
                                                let l444 = i32::from(*base.add(40).cast::<u8>());
                                                let l445 = i32::from(*base.add(41).cast::<u8>());
                                                let l446 = i32::from(*base.add(44).cast::<u8>());
                                                let l447 = i32::from(*base.add(45).cast::<u8>());
                                                let l448 = i32::from(*base.add(46).cast::<u8>());
                                                let l449 = *base.add(48).cast::<i32>();
                                                let l450 = *base.add(52).cast::<i32>();

                                                Timestamptz{
                                                  timestamp: Timestamp{
                                                    date: Date{
                                                      year: l443,
                                                      month: l444 as u8,
                                                      day: l445 as u8,
                                                    },
                                                    time: Time{
                                                      hour: l446 as u8,
                                                      minute: l447 as u8,
                                                      second: l448 as u8,
                                                      nanosecond: l449 as u32,
                                                    },
                                                  },
                                                  offset: l450,
                                                }
                                              };
                                                                                                Tstzbound::Excluded(e451)
                                                                                            }
                                                                                            n => {
                                                                                                debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                                                Tstzbound::Unbounded
                                                                                            }
                                                                                        };

                                                                                    Tstzrange {
                                                                                        start: v433,
                                                                                        end: v451,
                                                                                    }
                                                                                };
                                                                                DbValuePrimitive::Tstzrange(e476)
                                                                            }
                                                                            33 => {
                                                                                let e476 = {
                                                                                    let l452 = i32::from(*base.add(8).cast::<u8>());
                                                                                    let v459 =
                                                                                        match l452 {
                                                                                            0 => {
                                                                                                let e459 = {
                                                let l453 = *base.add(12).cast::<i32>();
                                                let l454 = i32::from(*base.add(16).cast::<u8>());
                                                let l455 = i32::from(*base.add(17).cast::<u8>());

                                                Date{
                                                  year: l453,
                                                  month: l454 as u8,
                                                  day: l455 as u8,
                                                }
                                              };
                                                                                                Datebound::Included(e459)
                                                                                            }
                                                                                            1 => {
                                                                                                let e459 = {
                                                let l456 = *base.add(12).cast::<i32>();
                                                let l457 = i32::from(*base.add(16).cast::<u8>());
                                                let l458 = i32::from(*base.add(17).cast::<u8>());

                                                Date{
                                                  year: l456,
                                                  month: l457 as u8,
                                                  day: l458 as u8,
                                                }
                                              };
                                                                                                Datebound::Excluded(e459)
                                                                                            }
                                                                                            n => {
                                                                                                debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                                                Datebound::Unbounded
                                                                                            }
                                                                                        };
                                                                                    let l460 = i32::from(*base.add(20).cast::<u8>());
                                                                                    let v467 =
                                                                                        match l460 {
                                                                                            0 => {
                                                                                                let e467 = {
                                                let l461 = *base.add(24).cast::<i32>();
                                                let l462 = i32::from(*base.add(28).cast::<u8>());
                                                let l463 = i32::from(*base.add(29).cast::<u8>());

                                                Date{
                                                  year: l461,
                                                  month: l462 as u8,
                                                  day: l463 as u8,
                                                }
                                              };
                                                                                                Datebound::Included(e467)
                                                                                            }
                                                                                            1 => {
                                                                                                let e467 = {
                                                let l464 = *base.add(24).cast::<i32>();
                                                let l465 = i32::from(*base.add(28).cast::<u8>());
                                                let l466 = i32::from(*base.add(29).cast::<u8>());

                                                Date{
                                                  year: l464,
                                                  month: l465 as u8,
                                                  day: l466 as u8,
                                                }
                                              };
                                                                                                Datebound::Excluded(e467)
                                                                                            }
                                                                                            n => {
                                                                                                debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                                                Datebound::Unbounded
                                                                                            }
                                                                                        };

                                                                                    Daterange {
                                                                                        start: v459,
                                                                                        end: v467,
                                                                                    }
                                                                                };
                                                                                DbValuePrimitive::Daterange(e476)
                                                                            }
                                                                            34 => {
                                                                                let e476 = {
                                                                                    let l468 = *base.add(8).cast::<i64>();

                                                                                    l468
                                                                                };
                                                                                DbValuePrimitive::Money(e476)
                                                                            }
                                                                            35 => {
                                                                                let e476 = {
                                                                                    let l469 = *base.add(8).cast::<i32>();

                                                                                    l469 as u32
                                                                                };
                                                                                DbValuePrimitive::Oid(e476)
                                                                            }
                                                                            36 => {
                                                                                let e476 = {
                                                                                    let l470 = *base.add(8).cast::<*mut u8>();
                                                                                    let l471 = *base.add(12).cast::<usize>();
                                                                                    let len472 =
                                                                                        l471;
                                                                                    let bytes472 = _rt::Vec::from_raw_parts(l470.cast(), len472, len472);
                                                                                    let l473 = *base.add(16).cast::<*mut u8>();
                                                                                    let l474 = *base.add(20).cast::<usize>();
                                                                                    let len475 =
                                                                                        l474;
                                                                                    let bytes475 = _rt::Vec::from_raw_parts(l473.cast(), len475, len475);

                                                                                    Enumeration{
                                            name: _rt::string_lift(bytes472),
                                            value: _rt::string_lift(bytes475),
                                          }
                                                                                };
                                                                                DbValuePrimitive::Enumeration(e476)
                                                                            }
                                                                            n => {
                                                                                debug_assert_eq!(n, 37, "invalid enum discriminant");
                                                                                DbValuePrimitive::Null
                                                                            }
                                                                        };

                                                                        v476
                                                                    };
                                                                    result477.push(e477);
                                                                }
                                                                _rt::cabi_dealloc(
                                                                    base477,
                                                                    len477 * 56,
                                                                    8,
                                                                );

                                                                result477
                                                            };
                                                            DbValue::Array(e478)
                                                        }
                                                    };

                                                    v478
                                                };
                                                result479.push(e479);
                                            }
                                            _rt::cabi_dealloc(base479, len479 * 64, 8);

                                            DbRow { values: result479 }
                                        };
                                        result480.push(e480);
                                    }
                                    _rt::cabi_dealloc(base480, len480 * 8, 4);

                                    result480
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl DbConnection {
                #[allow(unused_unsafe, clippy::all)]
                pub fn open(address: &str) -> Result<DbConnection, Error> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let vec0 = address;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:rdbms/postgres@0.0.1")]
                        extern "C" {
                            #[link_name = "[static]db-connection.open"]
                            fn wit_import(_: *mut u8, _: usize, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import(ptr0.cast_mut(), len0, ptr1);
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => {
                                let e = {
                                    let l3 = *ptr1.add(4).cast::<i32>();

                                    DbConnection::from_handle(l3 as u32)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l4 = i32::from(*ptr1.add(4).cast::<u8>());
                                    let v20 = match l4 {
                                        0 => {
                                            let e20 = {
                                                let l5 = *ptr1.add(8).cast::<*mut u8>();
                                                let l6 = *ptr1.add(12).cast::<usize>();
                                                let len7 = l6;
                                                let bytes7 =
                                                    _rt::Vec::from_raw_parts(l5.cast(), len7, len7);

                                                _rt::string_lift(bytes7)
                                            };
                                            Error::ConnectionFailure(e20)
                                        }
                                        1 => {
                                            let e20 = {
                                                let l8 = *ptr1.add(8).cast::<*mut u8>();
                                                let l9 = *ptr1.add(12).cast::<usize>();
                                                let len10 = l9;
                                                let bytes10 = _rt::Vec::from_raw_parts(
                                                    l8.cast(),
                                                    len10,
                                                    len10,
                                                );

                                                _rt::string_lift(bytes10)
                                            };
                                            Error::QueryParameterFailure(e20)
                                        }
                                        2 => {
                                            let e20 = {
                                                let l11 = *ptr1.add(8).cast::<*mut u8>();
                                                let l12 = *ptr1.add(12).cast::<usize>();
                                                let len13 = l12;
                                                let bytes13 = _rt::Vec::from_raw_parts(
                                                    l11.cast(),
                                                    len13,
                                                    len13,
                                                );

                                                _rt::string_lift(bytes13)
                                            };
                                            Error::QueryExecutionFailure(e20)
                                        }
                                        3 => {
                                            let e20 = {
                                                let l14 = *ptr1.add(8).cast::<*mut u8>();
                                                let l15 = *ptr1.add(12).cast::<usize>();
                                                let len16 = l15;
                                                let bytes16 = _rt::Vec::from_raw_parts(
                                                    l14.cast(),
                                                    len16,
                                                    len16,
                                                );

                                                _rt::string_lift(bytes16)
                                            };
                                            Error::QueryResponseFailure(e20)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 4, "invalid enum discriminant");
                                            let e20 = {
                                                let l17 = *ptr1.add(8).cast::<*mut u8>();
                                                let l18 = *ptr1.add(12).cast::<usize>();
                                                let len19 = l18;
                                                let bytes19 = _rt::Vec::from_raw_parts(
                                                    l17.cast(),
                                                    len19,
                                                    len19,
                                                );

                                                _rt::string_lift(bytes19)
                                            };
                                            Error::Other(e20)
                                        }
                                    };

                                    v20
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl DbConnection {
                #[allow(unused_unsafe, clippy::all)]
                pub fn query(
                    &self,
                    statement: &str,
                    params: &[DbValue],
                ) -> Result<DbResultSet, Error> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let vec0 = statement;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec152 = params;
                        let len152 = vec152.len();
                        let layout152 =
                            _rt::alloc::Layout::from_size_align_unchecked(vec152.len() * 64, 8);
                        let result152 = if layout152.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout152).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout152);
                            }
                            ptr
                        } else {
                            {
                                ::core::ptr::null_mut()
                            }
                        };
                        for (i, e) in vec152.into_iter().enumerate() {
                            let base = result152.add(i * 64);
                            {
                                match e {
                                    DbValue::Primitive(e) => {
                                        *base.add(0).cast::<u8>() = (0i32) as u8;
                                        match e {
                                            DbValuePrimitive::Character(e) => {
                                                *base.add(8).cast::<u8>() = (0i32) as u8;
                                                *base.add(16).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            DbValuePrimitive::Int2(e) => {
                                                *base.add(8).cast::<u8>() = (1i32) as u8;
                                                *base.add(16).cast::<u16>() =
                                                    (_rt::as_i32(e)) as u16;
                                            }
                                            DbValuePrimitive::Int4(e) => {
                                                *base.add(8).cast::<u8>() = (2i32) as u8;
                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            DbValuePrimitive::Int8(e) => {
                                                *base.add(8).cast::<u8>() = (3i32) as u8;
                                                *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            DbValuePrimitive::Float4(e) => {
                                                *base.add(8).cast::<u8>() = (4i32) as u8;
                                                *base.add(16).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            DbValuePrimitive::Float8(e) => {
                                                *base.add(8).cast::<u8>() = (5i32) as u8;
                                                *base.add(16).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            DbValuePrimitive::Numeric(e) => {
                                                *base.add(8).cast::<u8>() = (6i32) as u8;
                                                let vec1 = e;
                                                let ptr1 = vec1.as_ptr().cast::<u8>();
                                                let len1 = vec1.len();
                                                *base.add(20).cast::<usize>() = len1;
                                                *base.add(16).cast::<*mut u8>() = ptr1.cast_mut();
                                            }
                                            DbValuePrimitive::Boolean(e) => {
                                                *base.add(8).cast::<u8>() = (7i32) as u8;
                                                *base.add(16).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                })
                                                    as u8;
                                            }
                                            DbValuePrimitive::Text(e) => {
                                                *base.add(8).cast::<u8>() = (8i32) as u8;
                                                let vec2 = e;
                                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                                let len2 = vec2.len();
                                                *base.add(20).cast::<usize>() = len2;
                                                *base.add(16).cast::<*mut u8>() = ptr2.cast_mut();
                                            }
                                            DbValuePrimitive::Varchar(e) => {
                                                *base.add(8).cast::<u8>() = (9i32) as u8;
                                                let vec3 = e;
                                                let ptr3 = vec3.as_ptr().cast::<u8>();
                                                let len3 = vec3.len();
                                                *base.add(20).cast::<usize>() = len3;
                                                *base.add(16).cast::<*mut u8>() = ptr3.cast_mut();
                                            }
                                            DbValuePrimitive::Bpchar(e) => {
                                                *base.add(8).cast::<u8>() = (10i32) as u8;
                                                let vec4 = e;
                                                let ptr4 = vec4.as_ptr().cast::<u8>();
                                                let len4 = vec4.len();
                                                *base.add(20).cast::<usize>() = len4;
                                                *base.add(16).cast::<*mut u8>() = ptr4.cast_mut();
                                            }
                                            DbValuePrimitive::Timestamp(e) => {
                                                *base.add(8).cast::<u8>() = (11i32) as u8;
                                                let Timestamp {
                                                    date: date5,
                                                    time: time5,
                                                } = e;
                                                let Date {
                                                    year: year6,
                                                    month: month6,
                                                    day: day6,
                                                } = date5;
                                                *base.add(16).cast::<i32>() = _rt::as_i32(year6);
                                                *base.add(20).cast::<u8>() =
                                                    (_rt::as_i32(month6)) as u8;
                                                *base.add(21).cast::<u8>() =
                                                    (_rt::as_i32(day6)) as u8;
                                                let Time {
                                                    hour: hour7,
                                                    minute: minute7,
                                                    second: second7,
                                                    nanosecond: nanosecond7,
                                                } = time5;
                                                *base.add(24).cast::<u8>() =
                                                    (_rt::as_i32(hour7)) as u8;
                                                *base.add(25).cast::<u8>() =
                                                    (_rt::as_i32(minute7)) as u8;
                                                *base.add(26).cast::<u8>() =
                                                    (_rt::as_i32(second7)) as u8;
                                                *base.add(28).cast::<i32>() =
                                                    _rt::as_i32(nanosecond7);
                                            }
                                            DbValuePrimitive::Timestamptz(e) => {
                                                *base.add(8).cast::<u8>() = (12i32) as u8;
                                                let Timestamptz {
                                                    timestamp: timestamp8,
                                                    offset: offset8,
                                                } = e;
                                                let Timestamp {
                                                    date: date9,
                                                    time: time9,
                                                } = timestamp8;
                                                let Date {
                                                    year: year10,
                                                    month: month10,
                                                    day: day10,
                                                } = date9;
                                                *base.add(16).cast::<i32>() = _rt::as_i32(year10);
                                                *base.add(20).cast::<u8>() =
                                                    (_rt::as_i32(month10)) as u8;
                                                *base.add(21).cast::<u8>() =
                                                    (_rt::as_i32(day10)) as u8;
                                                let Time {
                                                    hour: hour11,
                                                    minute: minute11,
                                                    second: second11,
                                                    nanosecond: nanosecond11,
                                                } = time9;
                                                *base.add(24).cast::<u8>() =
                                                    (_rt::as_i32(hour11)) as u8;
                                                *base.add(25).cast::<u8>() =
                                                    (_rt::as_i32(minute11)) as u8;
                                                *base.add(26).cast::<u8>() =
                                                    (_rt::as_i32(second11)) as u8;
                                                *base.add(28).cast::<i32>() =
                                                    _rt::as_i32(nanosecond11);
                                                *base.add(32).cast::<i32>() = _rt::as_i32(offset8);
                                            }
                                            DbValuePrimitive::Date(e) => {
                                                *base.add(8).cast::<u8>() = (13i32) as u8;
                                                let Date {
                                                    year: year12,
                                                    month: month12,
                                                    day: day12,
                                                } = e;
                                                *base.add(16).cast::<i32>() = _rt::as_i32(year12);
                                                *base.add(20).cast::<u8>() =
                                                    (_rt::as_i32(month12)) as u8;
                                                *base.add(21).cast::<u8>() =
                                                    (_rt::as_i32(day12)) as u8;
                                            }
                                            DbValuePrimitive::Time(e) => {
                                                *base.add(8).cast::<u8>() = (14i32) as u8;
                                                let Time {
                                                    hour: hour13,
                                                    minute: minute13,
                                                    second: second13,
                                                    nanosecond: nanosecond13,
                                                } = e;
                                                *base.add(16).cast::<u8>() =
                                                    (_rt::as_i32(hour13)) as u8;
                                                *base.add(17).cast::<u8>() =
                                                    (_rt::as_i32(minute13)) as u8;
                                                *base.add(18).cast::<u8>() =
                                                    (_rt::as_i32(second13)) as u8;
                                                *base.add(20).cast::<i32>() =
                                                    _rt::as_i32(nanosecond13);
                                            }
                                            DbValuePrimitive::Timetz(e) => {
                                                *base.add(8).cast::<u8>() = (15i32) as u8;
                                                let Timetz {
                                                    time: time14,
                                                    offset: offset14,
                                                } = e;
                                                let Time {
                                                    hour: hour15,
                                                    minute: minute15,
                                                    second: second15,
                                                    nanosecond: nanosecond15,
                                                } = time14;
                                                *base.add(16).cast::<u8>() =
                                                    (_rt::as_i32(hour15)) as u8;
                                                *base.add(17).cast::<u8>() =
                                                    (_rt::as_i32(minute15)) as u8;
                                                *base.add(18).cast::<u8>() =
                                                    (_rt::as_i32(second15)) as u8;
                                                *base.add(20).cast::<i32>() =
                                                    _rt::as_i32(nanosecond15);
                                                *base.add(24).cast::<i32>() = _rt::as_i32(offset14);
                                            }
                                            DbValuePrimitive::Interval(e) => {
                                                *base.add(8).cast::<u8>() = (16i32) as u8;
                                                let Interval {
                                                    months: months16,
                                                    days: days16,
                                                    microseconds: microseconds16,
                                                } = e;
                                                *base.add(16).cast::<i32>() = _rt::as_i32(months16);
                                                *base.add(20).cast::<i32>() = _rt::as_i32(days16);
                                                *base.add(24).cast::<i64>() =
                                                    _rt::as_i64(microseconds16);
                                            }
                                            DbValuePrimitive::Bytea(e) => {
                                                *base.add(8).cast::<u8>() = (17i32) as u8;
                                                let vec17 = e;
                                                let ptr17 = vec17.as_ptr().cast::<u8>();
                                                let len17 = vec17.len();
                                                *base.add(20).cast::<usize>() = len17;
                                                *base.add(16).cast::<*mut u8>() = ptr17.cast_mut();
                                            }
                                            DbValuePrimitive::Json(e) => {
                                                *base.add(8).cast::<u8>() = (18i32) as u8;
                                                let vec18 = e;
                                                let ptr18 = vec18.as_ptr().cast::<u8>();
                                                let len18 = vec18.len();
                                                *base.add(20).cast::<usize>() = len18;
                                                *base.add(16).cast::<*mut u8>() = ptr18.cast_mut();
                                            }
                                            DbValuePrimitive::Jsonb(e) => {
                                                *base.add(8).cast::<u8>() = (19i32) as u8;
                                                let vec19 = e;
                                                let ptr19 = vec19.as_ptr().cast::<u8>();
                                                let len19 = vec19.len();
                                                *base.add(20).cast::<usize>() = len19;
                                                *base.add(16).cast::<*mut u8>() = ptr19.cast_mut();
                                            }
                                            DbValuePrimitive::Jsonpath(e) => {
                                                *base.add(8).cast::<u8>() = (20i32) as u8;
                                                let vec20 = e;
                                                let ptr20 = vec20.as_ptr().cast::<u8>();
                                                let len20 = vec20.len();
                                                *base.add(20).cast::<usize>() = len20;
                                                *base.add(16).cast::<*mut u8>() = ptr20.cast_mut();
                                            }
                                            DbValuePrimitive::Xml(e) => {
                                                *base.add(8).cast::<u8>() = (21i32) as u8;
                                                let vec21 = e;
                                                let ptr21 = vec21.as_ptr().cast::<u8>();
                                                let len21 = vec21.len();
                                                *base.add(20).cast::<usize>() = len21;
                                                *base.add(16).cast::<*mut u8>() = ptr21.cast_mut();
                                            }
                                            DbValuePrimitive::Uuid(e) => {
                                                *base.add(8).cast::<u8>() = (22i32) as u8;
                                                let Uuid {
                                                    high_bits: high_bits22,
                                                    low_bits: low_bits22,
                                                } = e;
                                                *base.add(16).cast::<i64>() =
                                                    _rt::as_i64(high_bits22);
                                                *base.add(24).cast::<i64>() =
                                                    _rt::as_i64(low_bits22);
                                            }
                                            DbValuePrimitive::Inet(e) => {
                                                *base.add(8).cast::<u8>() = (23i32) as u8;
                                                match e {
                                                    IpAddress::Ipv4(e) => {
                                                        *base.add(16).cast::<u8>() = (0i32) as u8;
                                                        let (t23_0, t23_1, t23_2, t23_3) = e;
                                                        *base.add(18).cast::<u8>() =
                                                            (_rt::as_i32(t23_0)) as u8;
                                                        *base.add(19).cast::<u8>() =
                                                            (_rt::as_i32(t23_1)) as u8;
                                                        *base.add(20).cast::<u8>() =
                                                            (_rt::as_i32(t23_2)) as u8;
                                                        *base.add(21).cast::<u8>() =
                                                            (_rt::as_i32(t23_3)) as u8;
                                                    }
                                                    IpAddress::Ipv6(e) => {
                                                        *base.add(16).cast::<u8>() = (1i32) as u8;
                                                        let (
                                                            t24_0,
                                                            t24_1,
                                                            t24_2,
                                                            t24_3,
                                                            t24_4,
                                                            t24_5,
                                                            t24_6,
                                                            t24_7,
                                                        ) = e;
                                                        *base.add(18).cast::<u16>() =
                                                            (_rt::as_i32(t24_0)) as u16;
                                                        *base.add(20).cast::<u16>() =
                                                            (_rt::as_i32(t24_1)) as u16;
                                                        *base.add(22).cast::<u16>() =
                                                            (_rt::as_i32(t24_2)) as u16;
                                                        *base.add(24).cast::<u16>() =
                                                            (_rt::as_i32(t24_3)) as u16;
                                                        *base.add(26).cast::<u16>() =
                                                            (_rt::as_i32(t24_4)) as u16;
                                                        *base.add(28).cast::<u16>() =
                                                            (_rt::as_i32(t24_5)) as u16;
                                                        *base.add(30).cast::<u16>() =
                                                            (_rt::as_i32(t24_6)) as u16;
                                                        *base.add(32).cast::<u16>() =
                                                            (_rt::as_i32(t24_7)) as u16;
                                                    }
                                                }
                                            }
                                            DbValuePrimitive::Cidr(e) => {
                                                *base.add(8).cast::<u8>() = (24i32) as u8;
                                                match e {
                                                    IpAddress::Ipv4(e) => {
                                                        *base.add(16).cast::<u8>() = (0i32) as u8;
                                                        let (t25_0, t25_1, t25_2, t25_3) = e;
                                                        *base.add(18).cast::<u8>() =
                                                            (_rt::as_i32(t25_0)) as u8;
                                                        *base.add(19).cast::<u8>() =
                                                            (_rt::as_i32(t25_1)) as u8;
                                                        *base.add(20).cast::<u8>() =
                                                            (_rt::as_i32(t25_2)) as u8;
                                                        *base.add(21).cast::<u8>() =
                                                            (_rt::as_i32(t25_3)) as u8;
                                                    }
                                                    IpAddress::Ipv6(e) => {
                                                        *base.add(16).cast::<u8>() = (1i32) as u8;
                                                        let (
                                                            t26_0,
                                                            t26_1,
                                                            t26_2,
                                                            t26_3,
                                                            t26_4,
                                                            t26_5,
                                                            t26_6,
                                                            t26_7,
                                                        ) = e;
                                                        *base.add(18).cast::<u16>() =
                                                            (_rt::as_i32(t26_0)) as u16;
                                                        *base.add(20).cast::<u16>() =
                                                            (_rt::as_i32(t26_1)) as u16;
                                                        *base.add(22).cast::<u16>() =
                                                            (_rt::as_i32(t26_2)) as u16;
                                                        *base.add(24).cast::<u16>() =
                                                            (_rt::as_i32(t26_3)) as u16;
                                                        *base.add(26).cast::<u16>() =
                                                            (_rt::as_i32(t26_4)) as u16;
                                                        *base.add(28).cast::<u16>() =
                                                            (_rt::as_i32(t26_5)) as u16;
                                                        *base.add(30).cast::<u16>() =
                                                            (_rt::as_i32(t26_6)) as u16;
                                                        *base.add(32).cast::<u16>() =
                                                            (_rt::as_i32(t26_7)) as u16;
                                                    }
                                                }
                                            }
                                            DbValuePrimitive::Macaddr(e) => {
                                                *base.add(8).cast::<u8>() = (25i32) as u8;
                                                let MacAddress { octets: octets27 } = e;
                                                let (t28_0, t28_1, t28_2, t28_3, t28_4, t28_5) =
                                                    octets27;
                                                *base.add(16).cast::<u8>() =
                                                    (_rt::as_i32(t28_0)) as u8;
                                                *base.add(17).cast::<u8>() =
                                                    (_rt::as_i32(t28_1)) as u8;
                                                *base.add(18).cast::<u8>() =
                                                    (_rt::as_i32(t28_2)) as u8;
                                                *base.add(19).cast::<u8>() =
                                                    (_rt::as_i32(t28_3)) as u8;
                                                *base.add(20).cast::<u8>() =
                                                    (_rt::as_i32(t28_4)) as u8;
                                                *base.add(21).cast::<u8>() =
                                                    (_rt::as_i32(t28_5)) as u8;
                                            }
                                            DbValuePrimitive::Bit(e) => {
                                                *base.add(8).cast::<u8>() = (26i32) as u8;
                                                let vec29 = e;
                                                let len29 = vec29.len();
                                                let layout29 =
                                                    _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec29.len() * 1,
                                                        1,
                                                    );
                                                let result29 = if layout29.size() != 0 {
                                                    let ptr =
                                                        _rt::alloc::alloc(layout29).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout29);
                                                    }
                                                    ptr
                                                } else {
                                                    {
                                                        ::core::ptr::null_mut()
                                                    }
                                                };
                                                for (i, e) in vec29.into_iter().enumerate() {
                                                    let base = result29.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        })
                                                            as u8;
                                                    }
                                                }
                                                *base.add(20).cast::<usize>() = len29;
                                                *base.add(16).cast::<*mut u8>() = result29;
                                                cleanup_list
                                                    .extend_from_slice(&[(result29, layout29)]);
                                            }
                                            DbValuePrimitive::Varbit(e) => {
                                                *base.add(8).cast::<u8>() = (27i32) as u8;
                                                let vec30 = e;
                                                let len30 = vec30.len();
                                                let layout30 =
                                                    _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec30.len() * 1,
                                                        1,
                                                    );
                                                let result30 = if layout30.size() != 0 {
                                                    let ptr =
                                                        _rt::alloc::alloc(layout30).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout30);
                                                    }
                                                    ptr
                                                } else {
                                                    {
                                                        ::core::ptr::null_mut()
                                                    }
                                                };
                                                for (i, e) in vec30.into_iter().enumerate() {
                                                    let base = result30.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        })
                                                            as u8;
                                                    }
                                                }
                                                *base.add(20).cast::<usize>() = len30;
                                                *base.add(16).cast::<*mut u8>() = result30;
                                                cleanup_list
                                                    .extend_from_slice(&[(result30, layout30)]);
                                            }
                                            DbValuePrimitive::Int4range(e) => {
                                                *base.add(8).cast::<u8>() = (28i32) as u8;
                                                let Int4range {
                                                    start: start31,
                                                    end: end31,
                                                } = e;
                                                match start31 {
                                                    Int4bound::Included(e) => {
                                                        *base.add(16).cast::<u8>() = (0i32) as u8;
                                                        *base.add(20).cast::<i32>() =
                                                            _rt::as_i32(e);
                                                    }
                                                    Int4bound::Excluded(e) => {
                                                        *base.add(16).cast::<u8>() = (1i32) as u8;
                                                        *base.add(20).cast::<i32>() =
                                                            _rt::as_i32(e);
                                                    }
                                                    Int4bound::Unbounded => {
                                                        *base.add(16).cast::<u8>() = (2i32) as u8;
                                                    }
                                                }
                                                match end31 {
                                                    Int4bound::Included(e) => {
                                                        *base.add(24).cast::<u8>() = (0i32) as u8;
                                                        *base.add(28).cast::<i32>() =
                                                            _rt::as_i32(e);
                                                    }
                                                    Int4bound::Excluded(e) => {
                                                        *base.add(24).cast::<u8>() = (1i32) as u8;
                                                        *base.add(28).cast::<i32>() =
                                                            _rt::as_i32(e);
                                                    }
                                                    Int4bound::Unbounded => {
                                                        *base.add(24).cast::<u8>() = (2i32) as u8;
                                                    }
                                                }
                                            }
                                            DbValuePrimitive::Int8range(e) => {
                                                *base.add(8).cast::<u8>() = (29i32) as u8;
                                                let Int8range {
                                                    start: start32,
                                                    end: end32,
                                                } = e;
                                                match start32 {
                                                    Int8bound::Included(e) => {
                                                        *base.add(16).cast::<u8>() = (0i32) as u8;
                                                        *base.add(24).cast::<i64>() =
                                                            _rt::as_i64(e);
                                                    }
                                                    Int8bound::Excluded(e) => {
                                                        *base.add(16).cast::<u8>() = (1i32) as u8;
                                                        *base.add(24).cast::<i64>() =
                                                            _rt::as_i64(e);
                                                    }
                                                    Int8bound::Unbounded => {
                                                        *base.add(16).cast::<u8>() = (2i32) as u8;
                                                    }
                                                }
                                                match end32 {
                                                    Int8bound::Included(e) => {
                                                        *base.add(32).cast::<u8>() = (0i32) as u8;
                                                        *base.add(40).cast::<i64>() =
                                                            _rt::as_i64(e);
                                                    }
                                                    Int8bound::Excluded(e) => {
                                                        *base.add(32).cast::<u8>() = (1i32) as u8;
                                                        *base.add(40).cast::<i64>() =
                                                            _rt::as_i64(e);
                                                    }
                                                    Int8bound::Unbounded => {
                                                        *base.add(32).cast::<u8>() = (2i32) as u8;
                                                    }
                                                }
                                            }
                                            DbValuePrimitive::Numrange(e) => {
                                                *base.add(8).cast::<u8>() = (30i32) as u8;
                                                let Numrange {
                                                    start: start33,
                                                    end: end33,
                                                } = e;
                                                match start33 {
                                                    Numbound::Included(e) => {
                                                        *base.add(16).cast::<u8>() = (0i32) as u8;
                                                        let vec34 = e;
                                                        let ptr34 = vec34.as_ptr().cast::<u8>();
                                                        let len34 = vec34.len();
                                                        *base.add(24).cast::<usize>() = len34;
                                                        *base.add(20).cast::<*mut u8>() =
                                                            ptr34.cast_mut();
                                                    }
                                                    Numbound::Excluded(e) => {
                                                        *base.add(16).cast::<u8>() = (1i32) as u8;
                                                        let vec35 = e;
                                                        let ptr35 = vec35.as_ptr().cast::<u8>();
                                                        let len35 = vec35.len();
                                                        *base.add(24).cast::<usize>() = len35;
                                                        *base.add(20).cast::<*mut u8>() =
                                                            ptr35.cast_mut();
                                                    }
                                                    Numbound::Unbounded => {
                                                        *base.add(16).cast::<u8>() = (2i32) as u8;
                                                    }
                                                }
                                                match end33 {
                                                    Numbound::Included(e) => {
                                                        *base.add(28).cast::<u8>() = (0i32) as u8;
                                                        let vec36 = e;
                                                        let ptr36 = vec36.as_ptr().cast::<u8>();
                                                        let len36 = vec36.len();
                                                        *base.add(36).cast::<usize>() = len36;
                                                        *base.add(32).cast::<*mut u8>() =
                                                            ptr36.cast_mut();
                                                    }
                                                    Numbound::Excluded(e) => {
                                                        *base.add(28).cast::<u8>() = (1i32) as u8;
                                                        let vec37 = e;
                                                        let ptr37 = vec37.as_ptr().cast::<u8>();
                                                        let len37 = vec37.len();
                                                        *base.add(36).cast::<usize>() = len37;
                                                        *base.add(32).cast::<*mut u8>() =
                                                            ptr37.cast_mut();
                                                    }
                                                    Numbound::Unbounded => {
                                                        *base.add(28).cast::<u8>() = (2i32) as u8;
                                                    }
                                                }
                                            }
                                            DbValuePrimitive::Tsrange(e) => {
                                                *base.add(8).cast::<u8>() = (31i32) as u8;
                                                let Tsrange {
                                                    start: start38,
                                                    end: end38,
                                                } = e;
                                                match start38 {
                                                    Tsbound::Included(e) => {
                                                        *base.add(16).cast::<u8>() = (0i32) as u8;
                                                        let Timestamp {
                                                            date: date39,
                                                            time: time39,
                                                        } = e;
                                                        let Date {
                                                            year: year40,
                                                            month: month40,
                                                            day: day40,
                                                        } = date39;
                                                        *base.add(20).cast::<i32>() =
                                                            _rt::as_i32(year40);
                                                        *base.add(24).cast::<u8>() =
                                                            (_rt::as_i32(month40)) as u8;
                                                        *base.add(25).cast::<u8>() =
                                                            (_rt::as_i32(day40)) as u8;
                                                        let Time {
                                                            hour: hour41,
                                                            minute: minute41,
                                                            second: second41,
                                                            nanosecond: nanosecond41,
                                                        } = time39;
                                                        *base.add(28).cast::<u8>() =
                                                            (_rt::as_i32(hour41)) as u8;
                                                        *base.add(29).cast::<u8>() =
                                                            (_rt::as_i32(minute41)) as u8;
                                                        *base.add(30).cast::<u8>() =
                                                            (_rt::as_i32(second41)) as u8;
                                                        *base.add(32).cast::<i32>() =
                                                            _rt::as_i32(nanosecond41);
                                                    }
                                                    Tsbound::Excluded(e) => {
                                                        *base.add(16).cast::<u8>() = (1i32) as u8;
                                                        let Timestamp {
                                                            date: date42,
                                                            time: time42,
                                                        } = e;
                                                        let Date {
                                                            year: year43,
                                                            month: month43,
                                                            day: day43,
                                                        } = date42;
                                                        *base.add(20).cast::<i32>() =
                                                            _rt::as_i32(year43);
                                                        *base.add(24).cast::<u8>() =
                                                            (_rt::as_i32(month43)) as u8;
                                                        *base.add(25).cast::<u8>() =
                                                            (_rt::as_i32(day43)) as u8;
                                                        let Time {
                                                            hour: hour44,
                                                            minute: minute44,
                                                            second: second44,
                                                            nanosecond: nanosecond44,
                                                        } = time42;
                                                        *base.add(28).cast::<u8>() =
                                                            (_rt::as_i32(hour44)) as u8;
                                                        *base.add(29).cast::<u8>() =
                                                            (_rt::as_i32(minute44)) as u8;
                                                        *base.add(30).cast::<u8>() =
                                                            (_rt::as_i32(second44)) as u8;
                                                        *base.add(32).cast::<i32>() =
                                                            _rt::as_i32(nanosecond44);
                                                    }
                                                    Tsbound::Unbounded => {
                                                        *base.add(16).cast::<u8>() = (2i32) as u8;
                                                    }
                                                }
                                                match end38 {
                                                    Tsbound::Included(e) => {
                                                        *base.add(36).cast::<u8>() = (0i32) as u8;
                                                        let Timestamp {
                                                            date: date45,
                                                            time: time45,
                                                        } = e;
                                                        let Date {
                                                            year: year46,
                                                            month: month46,
                                                            day: day46,
                                                        } = date45;
                                                        *base.add(40).cast::<i32>() =
                                                            _rt::as_i32(year46);
                                                        *base.add(44).cast::<u8>() =
                                                            (_rt::as_i32(month46)) as u8;
                                                        *base.add(45).cast::<u8>() =
                                                            (_rt::as_i32(day46)) as u8;
                                                        let Time {
                                                            hour: hour47,
                                                            minute: minute47,
                                                            second: second47,
                                                            nanosecond: nanosecond47,
                                                        } = time45;
                                                        *base.add(48).cast::<u8>() =
                                                            (_rt::as_i32(hour47)) as u8;
                                                        *base.add(49).cast::<u8>() =
                                                            (_rt::as_i32(minute47)) as u8;
                                                        *base.add(50).cast::<u8>() =
                                                            (_rt::as_i32(second47)) as u8;
                                                        *base.add(52).cast::<i32>() =
                                                            _rt::as_i32(nanosecond47);
                                                    }
                                                    Tsbound::Excluded(e) => {
                                                        *base.add(36).cast::<u8>() = (1i32) as u8;
                                                        let Timestamp {
                                                            date: date48,
                                                            time: time48,
                                                        } = e;
                                                        let Date {
                                                            year: year49,
                                                            month: month49,
                                                            day: day49,
                                                        } = date48;
                                                        *base.add(40).cast::<i32>() =
                                                            _rt::as_i32(year49);
                                                        *base.add(44).cast::<u8>() =
                                                            (_rt::as_i32(month49)) as u8;
                                                        *base.add(45).cast::<u8>() =
                                                            (_rt::as_i32(day49)) as u8;
                                                        let Time {
                                                            hour: hour50,
                                                            minute: minute50,
                                                            second: second50,
                                                            nanosecond: nanosecond50,
                                                        } = time48;
                                                        *base.add(48).cast::<u8>() =
                                                            (_rt::as_i32(hour50)) as u8;
                                                        *base.add(49).cast::<u8>() =
                                                            (_rt::as_i32(minute50)) as u8;
                                                        *base.add(50).cast::<u8>() =
                                                            (_rt::as_i32(second50)) as u8;
                                                        *base.add(52).cast::<i32>() =
                                                            _rt::as_i32(nanosecond50);
                                                    }
                                                    Tsbound::Unbounded => {
                                                        *base.add(36).cast::<u8>() = (2i32) as u8;
                                                    }
                                                }
                                            }
                                            DbValuePrimitive::Tstzrange(e) => {
                                                *base.add(8).cast::<u8>() = (32i32) as u8;
                                                let Tstzrange {
                                                    start: start51,
                                                    end: end51,
                                                } = e;
                                                match start51 {
                                                    Tstzbound::Included(e) => {
                                                        *base.add(16).cast::<u8>() = (0i32) as u8;
                                                        let Timestamptz {
                                                            timestamp: timestamp52,
                                                            offset: offset52,
                                                        } = e;
                                                        let Timestamp {
                                                            date: date53,
                                                            time: time53,
                                                        } = timestamp52;
                                                        let Date {
                                                            year: year54,
                                                            month: month54,
                                                            day: day54,
                                                        } = date53;
                                                        *base.add(20).cast::<i32>() =
                                                            _rt::as_i32(year54);
                                                        *base.add(24).cast::<u8>() =
                                                            (_rt::as_i32(month54)) as u8;
                                                        *base.add(25).cast::<u8>() =
                                                            (_rt::as_i32(day54)) as u8;
                                                        let Time {
                                                            hour: hour55,
                                                            minute: minute55,
                                                            second: second55,
                                                            nanosecond: nanosecond55,
                                                        } = time53;
                                                        *base.add(28).cast::<u8>() =
                                                            (_rt::as_i32(hour55)) as u8;
                                                        *base.add(29).cast::<u8>() =
                                                            (_rt::as_i32(minute55)) as u8;
                                                        *base.add(30).cast::<u8>() =
                                                            (_rt::as_i32(second55)) as u8;
                                                        *base.add(32).cast::<i32>() =
                                                            _rt::as_i32(nanosecond55);
                                                        *base.add(36).cast::<i32>() =
                                                            _rt::as_i32(offset52);
                                                    }
                                                    Tstzbound::Excluded(e) => {
                                                        *base.add(16).cast::<u8>() = (1i32) as u8;
                                                        let Timestamptz {
                                                            timestamp: timestamp56,
                                                            offset: offset56,
                                                        } = e;
                                                        let Timestamp {
                                                            date: date57,
                                                            time: time57,
                                                        } = timestamp56;
                                                        let Date {
                                                            year: year58,
                                                            month: month58,
                                                            day: day58,
                                                        } = date57;
                                                        *base.add(20).cast::<i32>() =
                                                            _rt::as_i32(year58);
                                                        *base.add(24).cast::<u8>() =
                                                            (_rt::as_i32(month58)) as u8;
                                                        *base.add(25).cast::<u8>() =
                                                            (_rt::as_i32(day58)) as u8;
                                                        let Time {
                                                            hour: hour59,
                                                            minute: minute59,
                                                            second: second59,
                                                            nanosecond: nanosecond59,
                                                        } = time57;
                                                        *base.add(28).cast::<u8>() =
                                                            (_rt::as_i32(hour59)) as u8;
                                                        *base.add(29).cast::<u8>() =
                                                            (_rt::as_i32(minute59)) as u8;
                                                        *base.add(30).cast::<u8>() =
                                                            (_rt::as_i32(second59)) as u8;
                                                        *base.add(32).cast::<i32>() =
                                                            _rt::as_i32(nanosecond59);
                                                        *base.add(36).cast::<i32>() =
                                                            _rt::as_i32(offset56);
                                                    }
                                                    Tstzbound::Unbounded => {
                                                        *base.add(16).cast::<u8>() = (2i32) as u8;
                                                    }
                                                }
                                                match end51 {
                                                    Tstzbound::Included(e) => {
                                                        *base.add(40).cast::<u8>() = (0i32) as u8;
                                                        let Timestamptz {
                                                            timestamp: timestamp60,
                                                            offset: offset60,
                                                        } = e;
                                                        let Timestamp {
                                                            date: date61,
                                                            time: time61,
                                                        } = timestamp60;
                                                        let Date {
                                                            year: year62,
                                                            month: month62,
                                                            day: day62,
                                                        } = date61;
                                                        *base.add(44).cast::<i32>() =
                                                            _rt::as_i32(year62);
                                                        *base.add(48).cast::<u8>() =
                                                            (_rt::as_i32(month62)) as u8;
                                                        *base.add(49).cast::<u8>() =
                                                            (_rt::as_i32(day62)) as u8;
                                                        let Time {
                                                            hour: hour63,
                                                            minute: minute63,
                                                            second: second63,
                                                            nanosecond: nanosecond63,
                                                        } = time61;
                                                        *base.add(52).cast::<u8>() =
                                                            (_rt::as_i32(hour63)) as u8;
                                                        *base.add(53).cast::<u8>() =
                                                            (_rt::as_i32(minute63)) as u8;
                                                        *base.add(54).cast::<u8>() =
                                                            (_rt::as_i32(second63)) as u8;
                                                        *base.add(56).cast::<i32>() =
                                                            _rt::as_i32(nanosecond63);
                                                        *base.add(60).cast::<i32>() =
                                                            _rt::as_i32(offset60);
                                                    }
                                                    Tstzbound::Excluded(e) => {
                                                        *base.add(40).cast::<u8>() = (1i32) as u8;
                                                        let Timestamptz {
                                                            timestamp: timestamp64,
                                                            offset: offset64,
                                                        } = e;
                                                        let Timestamp {
                                                            date: date65,
                                                            time: time65,
                                                        } = timestamp64;
                                                        let Date {
                                                            year: year66,
                                                            month: month66,
                                                            day: day66,
                                                        } = date65;
                                                        *base.add(44).cast::<i32>() =
                                                            _rt::as_i32(year66);
                                                        *base.add(48).cast::<u8>() =
                                                            (_rt::as_i32(month66)) as u8;
                                                        *base.add(49).cast::<u8>() =
                                                            (_rt::as_i32(day66)) as u8;
                                                        let Time {
                                                            hour: hour67,
                                                            minute: minute67,
                                                            second: second67,
                                                            nanosecond: nanosecond67,
                                                        } = time65;
                                                        *base.add(52).cast::<u8>() =
                                                            (_rt::as_i32(hour67)) as u8;
                                                        *base.add(53).cast::<u8>() =
                                                            (_rt::as_i32(minute67)) as u8;
                                                        *base.add(54).cast::<u8>() =
                                                            (_rt::as_i32(second67)) as u8;
                                                        *base.add(56).cast::<i32>() =
                                                            _rt::as_i32(nanosecond67);
                                                        *base.add(60).cast::<i32>() =
                                                            _rt::as_i32(offset64);
                                                    }
                                                    Tstzbound::Unbounded => {
                                                        *base.add(40).cast::<u8>() = (2i32) as u8;
                                                    }
                                                }
                                            }
                                            DbValuePrimitive::Daterange(e) => {
                                                *base.add(8).cast::<u8>() = (33i32) as u8;
                                                let Daterange {
                                                    start: start68,
                                                    end: end68,
                                                } = e;
                                                match start68 {
                                                    Datebound::Included(e) => {
                                                        *base.add(16).cast::<u8>() = (0i32) as u8;
                                                        let Date {
                                                            year: year69,
                                                            month: month69,
                                                            day: day69,
                                                        } = e;
                                                        *base.add(20).cast::<i32>() =
                                                            _rt::as_i32(year69);
                                                        *base.add(24).cast::<u8>() =
                                                            (_rt::as_i32(month69)) as u8;
                                                        *base.add(25).cast::<u8>() =
                                                            (_rt::as_i32(day69)) as u8;
                                                    }
                                                    Datebound::Excluded(e) => {
                                                        *base.add(16).cast::<u8>() = (1i32) as u8;
                                                        let Date {
                                                            year: year70,
                                                            month: month70,
                                                            day: day70,
                                                        } = e;
                                                        *base.add(20).cast::<i32>() =
                                                            _rt::as_i32(year70);
                                                        *base.add(24).cast::<u8>() =
                                                            (_rt::as_i32(month70)) as u8;
                                                        *base.add(25).cast::<u8>() =
                                                            (_rt::as_i32(day70)) as u8;
                                                    }
                                                    Datebound::Unbounded => {
                                                        *base.add(16).cast::<u8>() = (2i32) as u8;
                                                    }
                                                }
                                                match end68 {
                                                    Datebound::Included(e) => {
                                                        *base.add(28).cast::<u8>() = (0i32) as u8;
                                                        let Date {
                                                            year: year71,
                                                            month: month71,
                                                            day: day71,
                                                        } = e;
                                                        *base.add(32).cast::<i32>() =
                                                            _rt::as_i32(year71);
                                                        *base.add(36).cast::<u8>() =
                                                            (_rt::as_i32(month71)) as u8;
                                                        *base.add(37).cast::<u8>() =
                                                            (_rt::as_i32(day71)) as u8;
                                                    }
                                                    Datebound::Excluded(e) => {
                                                        *base.add(28).cast::<u8>() = (1i32) as u8;
                                                        let Date {
                                                            year: year72,
                                                            month: month72,
                                                            day: day72,
                                                        } = e;
                                                        *base.add(32).cast::<i32>() =
                                                            _rt::as_i32(year72);
                                                        *base.add(36).cast::<u8>() =
                                                            (_rt::as_i32(month72)) as u8;
                                                        *base.add(37).cast::<u8>() =
                                                            (_rt::as_i32(day72)) as u8;
                                                    }
                                                    Datebound::Unbounded => {
                                                        *base.add(28).cast::<u8>() = (2i32) as u8;
                                                    }
                                                }
                                            }
                                            DbValuePrimitive::Money(e) => {
                                                *base.add(8).cast::<u8>() = (34i32) as u8;
                                                *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            DbValuePrimitive::Oid(e) => {
                                                *base.add(8).cast::<u8>() = (35i32) as u8;
                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            DbValuePrimitive::Enumeration(e) => {
                                                *base.add(8).cast::<u8>() = (36i32) as u8;
                                                let Enumeration {
                                                    name: name73,
                                                    value: value73,
                                                } = e;
                                                let vec74 = name73;
                                                let ptr74 = vec74.as_ptr().cast::<u8>();
                                                let len74 = vec74.len();
                                                *base.add(20).cast::<usize>() = len74;
                                                *base.add(16).cast::<*mut u8>() = ptr74.cast_mut();
                                                let vec75 = value73;
                                                let ptr75 = vec75.as_ptr().cast::<u8>();
                                                let len75 = vec75.len();
                                                *base.add(28).cast::<usize>() = len75;
                                                *base.add(24).cast::<*mut u8>() = ptr75.cast_mut();
                                            }
                                            DbValuePrimitive::Null => {
                                                *base.add(8).cast::<u8>() = (37i32) as u8;
                                            }
                                        }
                                    }
                                    DbValue::Array(e) => {
                                        *base.add(0).cast::<u8>() = (1i32) as u8;
                                        let vec151 = e;
                                        let len151 = vec151.len();
                                        let layout151 =
                                            _rt::alloc::Layout::from_size_align_unchecked(
                                                vec151.len() * 56,
                                                8,
                                            );
                                        let result151 = if layout151.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout151).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout151);
                                            }
                                            ptr
                                        } else {
                                            {
                                                ::core::ptr::null_mut()
                                            }
                                        };
                                        for (i, e) in vec151.into_iter().enumerate() {
                                            let base = result151.add(i * 56);
                                            {
                                                match e {
                                                    DbValuePrimitive::Character(e) => {
                                                        *base.add(0).cast::<u8>() = (0i32) as u8;
                                                        *base.add(8).cast::<u8>() =
                                                            (_rt::as_i32(e)) as u8;
                                                    }
                                                    DbValuePrimitive::Int2(e) => {
                                                        *base.add(0).cast::<u8>() = (1i32) as u8;
                                                        *base.add(8).cast::<u16>() =
                                                            (_rt::as_i32(e)) as u16;
                                                    }
                                                    DbValuePrimitive::Int4(e) => {
                                                        *base.add(0).cast::<u8>() = (2i32) as u8;
                                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    DbValuePrimitive::Int8(e) => {
                                                        *base.add(0).cast::<u8>() = (3i32) as u8;
                                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                    }
                                                    DbValuePrimitive::Float4(e) => {
                                                        *base.add(0).cast::<u8>() = (4i32) as u8;
                                                        *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                                    }
                                                    DbValuePrimitive::Float8(e) => {
                                                        *base.add(0).cast::<u8>() = (5i32) as u8;
                                                        *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                                    }
                                                    DbValuePrimitive::Numeric(e) => {
                                                        *base.add(0).cast::<u8>() = (6i32) as u8;
                                                        let vec76 = e;
                                                        let ptr76 = vec76.as_ptr().cast::<u8>();
                                                        let len76 = vec76.len();
                                                        *base.add(12).cast::<usize>() = len76;
                                                        *base.add(8).cast::<*mut u8>() =
                                                            ptr76.cast_mut();
                                                    }
                                                    DbValuePrimitive::Boolean(e) => {
                                                        *base.add(0).cast::<u8>() = (7i32) as u8;
                                                        *base.add(8).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        })
                                                            as u8;
                                                    }
                                                    DbValuePrimitive::Text(e) => {
                                                        *base.add(0).cast::<u8>() = (8i32) as u8;
                                                        let vec77 = e;
                                                        let ptr77 = vec77.as_ptr().cast::<u8>();
                                                        let len77 = vec77.len();
                                                        *base.add(12).cast::<usize>() = len77;
                                                        *base.add(8).cast::<*mut u8>() =
                                                            ptr77.cast_mut();
                                                    }
                                                    DbValuePrimitive::Varchar(e) => {
                                                        *base.add(0).cast::<u8>() = (9i32) as u8;
                                                        let vec78 = e;
                                                        let ptr78 = vec78.as_ptr().cast::<u8>();
                                                        let len78 = vec78.len();
                                                        *base.add(12).cast::<usize>() = len78;
                                                        *base.add(8).cast::<*mut u8>() =
                                                            ptr78.cast_mut();
                                                    }
                                                    DbValuePrimitive::Bpchar(e) => {
                                                        *base.add(0).cast::<u8>() = (10i32) as u8;
                                                        let vec79 = e;
                                                        let ptr79 = vec79.as_ptr().cast::<u8>();
                                                        let len79 = vec79.len();
                                                        *base.add(12).cast::<usize>() = len79;
                                                        *base.add(8).cast::<*mut u8>() =
                                                            ptr79.cast_mut();
                                                    }
                                                    DbValuePrimitive::Timestamp(e) => {
                                                        *base.add(0).cast::<u8>() = (11i32) as u8;
                                                        let Timestamp {
                                                            date: date80,
                                                            time: time80,
                                                        } = e;
                                                        let Date {
                                                            year: year81,
                                                            month: month81,
                                                            day: day81,
                                                        } = date80;
                                                        *base.add(8).cast::<i32>() =
                                                            _rt::as_i32(year81);
                                                        *base.add(12).cast::<u8>() =
                                                            (_rt::as_i32(month81)) as u8;
                                                        *base.add(13).cast::<u8>() =
                                                            (_rt::as_i32(day81)) as u8;
                                                        let Time {
                                                            hour: hour82,
                                                            minute: minute82,
                                                            second: second82,
                                                            nanosecond: nanosecond82,
                                                        } = time80;
                                                        *base.add(16).cast::<u8>() =
                                                            (_rt::as_i32(hour82)) as u8;
                                                        *base.add(17).cast::<u8>() =
                                                            (_rt::as_i32(minute82)) as u8;
                                                        *base.add(18).cast::<u8>() =
                                                            (_rt::as_i32(second82)) as u8;
                                                        *base.add(20).cast::<i32>() =
                                                            _rt::as_i32(nanosecond82);
                                                    }
                                                    DbValuePrimitive::Timestamptz(e) => {
                                                        *base.add(0).cast::<u8>() = (12i32) as u8;
                                                        let Timestamptz {
                                                            timestamp: timestamp83,
                                                            offset: offset83,
                                                        } = e;
                                                        let Timestamp {
                                                            date: date84,
                                                            time: time84,
                                                        } = timestamp83;
                                                        let Date {
                                                            year: year85,
                                                            month: month85,
                                                            day: day85,
                                                        } = date84;
                                                        *base.add(8).cast::<i32>() =
                                                            _rt::as_i32(year85);
                                                        *base.add(12).cast::<u8>() =
                                                            (_rt::as_i32(month85)) as u8;
                                                        *base.add(13).cast::<u8>() =
                                                            (_rt::as_i32(day85)) as u8;
                                                        let Time {
                                                            hour: hour86,
                                                            minute: minute86,
                                                            second: second86,
                                                            nanosecond: nanosecond86,
                                                        } = time84;
                                                        *base.add(16).cast::<u8>() =
                                                            (_rt::as_i32(hour86)) as u8;
                                                        *base.add(17).cast::<u8>() =
                                                            (_rt::as_i32(minute86)) as u8;
                                                        *base.add(18).cast::<u8>() =
                                                            (_rt::as_i32(second86)) as u8;
                                                        *base.add(20).cast::<i32>() =
                                                            _rt::as_i32(nanosecond86);
                                                        *base.add(24).cast::<i32>() =
                                                            _rt::as_i32(offset83);
                                                    }
                                                    DbValuePrimitive::Date(e) => {
                                                        *base.add(0).cast::<u8>() = (13i32) as u8;
                                                        let Date {
                                                            year: year87,
                                                            month: month87,
                                                            day: day87,
                                                        } = e;
                                                        *base.add(8).cast::<i32>() =
                                                            _rt::as_i32(year87);
                                                        *base.add(12).cast::<u8>() =
                                                            (_rt::as_i32(month87)) as u8;
                                                        *base.add(13).cast::<u8>() =
                                                            (_rt::as_i32(day87)) as u8;
                                                    }
                                                    DbValuePrimitive::Time(e) => {
                                                        *base.add(0).cast::<u8>() = (14i32) as u8;
                                                        let Time {
                                                            hour: hour88,
                                                            minute: minute88,
                                                            second: second88,
                                                            nanosecond: nanosecond88,
                                                        } = e;
                                                        *base.add(8).cast::<u8>() =
                                                            (_rt::as_i32(hour88)) as u8;
                                                        *base.add(9).cast::<u8>() =
                                                            (_rt::as_i32(minute88)) as u8;
                                                        *base.add(10).cast::<u8>() =
                                                            (_rt::as_i32(second88)) as u8;
                                                        *base.add(12).cast::<i32>() =
                                                            _rt::as_i32(nanosecond88);
                                                    }
                                                    DbValuePrimitive::Timetz(e) => {
                                                        *base.add(0).cast::<u8>() = (15i32) as u8;
                                                        let Timetz {
                                                            time: time89,
                                                            offset: offset89,
                                                        } = e;
                                                        let Time {
                                                            hour: hour90,
                                                            minute: minute90,
                                                            second: second90,
                                                            nanosecond: nanosecond90,
                                                        } = time89;
                                                        *base.add(8).cast::<u8>() =
                                                            (_rt::as_i32(hour90)) as u8;
                                                        *base.add(9).cast::<u8>() =
                                                            (_rt::as_i32(minute90)) as u8;
                                                        *base.add(10).cast::<u8>() =
                                                            (_rt::as_i32(second90)) as u8;
                                                        *base.add(12).cast::<i32>() =
                                                            _rt::as_i32(nanosecond90);
                                                        *base.add(16).cast::<i32>() =
                                                            _rt::as_i32(offset89);
                                                    }
                                                    DbValuePrimitive::Interval(e) => {
                                                        *base.add(0).cast::<u8>() = (16i32) as u8;
                                                        let Interval {
                                                            months: months91,
                                                            days: days91,
                                                            microseconds: microseconds91,
                                                        } = e;
                                                        *base.add(8).cast::<i32>() =
                                                            _rt::as_i32(months91);
                                                        *base.add(12).cast::<i32>() =
                                                            _rt::as_i32(days91);
                                                        *base.add(16).cast::<i64>() =
                                                            _rt::as_i64(microseconds91);
                                                    }
                                                    DbValuePrimitive::Bytea(e) => {
                                                        *base.add(0).cast::<u8>() = (17i32) as u8;
                                                        let vec92 = e;
                                                        let ptr92 = vec92.as_ptr().cast::<u8>();
                                                        let len92 = vec92.len();
                                                        *base.add(12).cast::<usize>() = len92;
                                                        *base.add(8).cast::<*mut u8>() =
                                                            ptr92.cast_mut();
                                                    }
                                                    DbValuePrimitive::Json(e) => {
                                                        *base.add(0).cast::<u8>() = (18i32) as u8;
                                                        let vec93 = e;
                                                        let ptr93 = vec93.as_ptr().cast::<u8>();
                                                        let len93 = vec93.len();
                                                        *base.add(12).cast::<usize>() = len93;
                                                        *base.add(8).cast::<*mut u8>() =
                                                            ptr93.cast_mut();
                                                    }
                                                    DbValuePrimitive::Jsonb(e) => {
                                                        *base.add(0).cast::<u8>() = (19i32) as u8;
                                                        let vec94 = e;
                                                        let ptr94 = vec94.as_ptr().cast::<u8>();
                                                        let len94 = vec94.len();
                                                        *base.add(12).cast::<usize>() = len94;
                                                        *base.add(8).cast::<*mut u8>() =
                                                            ptr94.cast_mut();
                                                    }
                                                    DbValuePrimitive::Jsonpath(e) => {
                                                        *base.add(0).cast::<u8>() = (20i32) as u8;
                                                        let vec95 = e;
                                                        let ptr95 = vec95.as_ptr().cast::<u8>();
                                                        let len95 = vec95.len();
                                                        *base.add(12).cast::<usize>() = len95;
                                                        *base.add(8).cast::<*mut u8>() =
                                                            ptr95.cast_mut();
                                                    }
                                                    DbValuePrimitive::Xml(e) => {
                                                        *base.add(0).cast::<u8>() = (21i32) as u8;
                                                        let vec96 = e;
                                                        let ptr96 = vec96.as_ptr().cast::<u8>();
                                                        let len96 = vec96.len();
                                                        *base.add(12).cast::<usize>() = len96;
                                                        *base.add(8).cast::<*mut u8>() =
                                                            ptr96.cast_mut();
                                                    }
                                                    DbValuePrimitive::Uuid(e) => {
                                                        *base.add(0).cast::<u8>() = (22i32) as u8;
                                                        let Uuid {
                                                            high_bits: high_bits97,
                                                            low_bits: low_bits97,
                                                        } = e;
                                                        *base.add(8).cast::<i64>() =
                                                            _rt::as_i64(high_bits97);
                                                        *base.add(16).cast::<i64>() =
                                                            _rt::as_i64(low_bits97);
                                                    }
                                                    DbValuePrimitive::Inet(e) => {
                                                        *base.add(0).cast::<u8>() = (23i32) as u8;
                                                        match e {
                                                            IpAddress::Ipv4(e) => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (0i32) as u8;
                                                                let (t98_0, t98_1, t98_2, t98_3) =
                                                                    e;
                                                                *base.add(10).cast::<u8>() =
                                                                    (_rt::as_i32(t98_0)) as u8;
                                                                *base.add(11).cast::<u8>() =
                                                                    (_rt::as_i32(t98_1)) as u8;
                                                                *base.add(12).cast::<u8>() =
                                                                    (_rt::as_i32(t98_2)) as u8;
                                                                *base.add(13).cast::<u8>() =
                                                                    (_rt::as_i32(t98_3)) as u8;
                                                            }
                                                            IpAddress::Ipv6(e) => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                let (
                                                                    t99_0,
                                                                    t99_1,
                                                                    t99_2,
                                                                    t99_3,
                                                                    t99_4,
                                                                    t99_5,
                                                                    t99_6,
                                                                    t99_7,
                                                                ) = e;
                                                                *base.add(10).cast::<u16>() =
                                                                    (_rt::as_i32(t99_0)) as u16;
                                                                *base.add(12).cast::<u16>() =
                                                                    (_rt::as_i32(t99_1)) as u16;
                                                                *base.add(14).cast::<u16>() =
                                                                    (_rt::as_i32(t99_2)) as u16;
                                                                *base.add(16).cast::<u16>() =
                                                                    (_rt::as_i32(t99_3)) as u16;
                                                                *base.add(18).cast::<u16>() =
                                                                    (_rt::as_i32(t99_4)) as u16;
                                                                *base.add(20).cast::<u16>() =
                                                                    (_rt::as_i32(t99_5)) as u16;
                                                                *base.add(22).cast::<u16>() =
                                                                    (_rt::as_i32(t99_6)) as u16;
                                                                *base.add(24).cast::<u16>() =
                                                                    (_rt::as_i32(t99_7)) as u16;
                                                            }
                                                        }
                                                    }
                                                    DbValuePrimitive::Cidr(e) => {
                                                        *base.add(0).cast::<u8>() = (24i32) as u8;
                                                        match e {
                                                            IpAddress::Ipv4(e) => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (0i32) as u8;
                                                                let (
                                                                    t100_0,
                                                                    t100_1,
                                                                    t100_2,
                                                                    t100_3,
                                                                ) = e;
                                                                *base.add(10).cast::<u8>() =
                                                                    (_rt::as_i32(t100_0)) as u8;
                                                                *base.add(11).cast::<u8>() =
                                                                    (_rt::as_i32(t100_1)) as u8;
                                                                *base.add(12).cast::<u8>() =
                                                                    (_rt::as_i32(t100_2)) as u8;
                                                                *base.add(13).cast::<u8>() =
                                                                    (_rt::as_i32(t100_3)) as u8;
                                                            }
                                                            IpAddress::Ipv6(e) => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                let (
                                                                    t101_0,
                                                                    t101_1,
                                                                    t101_2,
                                                                    t101_3,
                                                                    t101_4,
                                                                    t101_5,
                                                                    t101_6,
                                                                    t101_7,
                                                                ) = e;
                                                                *base.add(10).cast::<u16>() =
                                                                    (_rt::as_i32(t101_0)) as u16;
                                                                *base.add(12).cast::<u16>() =
                                                                    (_rt::as_i32(t101_1)) as u16;
                                                                *base.add(14).cast::<u16>() =
                                                                    (_rt::as_i32(t101_2)) as u16;
                                                                *base.add(16).cast::<u16>() =
                                                                    (_rt::as_i32(t101_3)) as u16;
                                                                *base.add(18).cast::<u16>() =
                                                                    (_rt::as_i32(t101_4)) as u16;
                                                                *base.add(20).cast::<u16>() =
                                                                    (_rt::as_i32(t101_5)) as u16;
                                                                *base.add(22).cast::<u16>() =
                                                                    (_rt::as_i32(t101_6)) as u16;
                                                                *base.add(24).cast::<u16>() =
                                                                    (_rt::as_i32(t101_7)) as u16;
                                                            }
                                                        }
                                                    }
                                                    DbValuePrimitive::Macaddr(e) => {
                                                        *base.add(0).cast::<u8>() = (25i32) as u8;
                                                        let MacAddress { octets: octets102 } = e;
                                                        let (
                                                            t103_0,
                                                            t103_1,
                                                            t103_2,
                                                            t103_3,
                                                            t103_4,
                                                            t103_5,
                                                        ) = octets102;
                                                        *base.add(8).cast::<u8>() =
                                                            (_rt::as_i32(t103_0)) as u8;
                                                        *base.add(9).cast::<u8>() =
                                                            (_rt::as_i32(t103_1)) as u8;
                                                        *base.add(10).cast::<u8>() =
                                                            (_rt::as_i32(t103_2)) as u8;
                                                        *base.add(11).cast::<u8>() =
                                                            (_rt::as_i32(t103_3)) as u8;
                                                        *base.add(12).cast::<u8>() =
                                                            (_rt::as_i32(t103_4)) as u8;
                                                        *base.add(13).cast::<u8>() =
                                                            (_rt::as_i32(t103_5)) as u8;
                                                    }
                                                    DbValuePrimitive::Bit(e) => {
                                                        *base.add(0).cast::<u8>() = (26i32) as u8;
                                                        let vec104 = e;
                                                        let len104 = vec104.len();
                                                        let layout104 = _rt::alloc::Layout::from_size_align_unchecked(vec104.len() * 1, 1);
                                                        let result104 = if layout104.size() != 0 {
                                                            let ptr = _rt::alloc::alloc(layout104)
                                                                .cast::<u8>();
                                                            if ptr.is_null() {
                                                                _rt::alloc::handle_alloc_error(
                                                                    layout104,
                                                                );
                                                            }
                                                            ptr
                                                        } else {
                                                            {
                                                                ::core::ptr::null_mut()
                                                            }
                                                        };
                                                        for (i, e) in vec104.into_iter().enumerate()
                                                        {
                                                            let base = result104.add(i * 1);
                                                            {
                                                                *base.add(0).cast::<u8>() = (match e
                                                                {
                                                                    true => 1,
                                                                    false => 0,
                                                                })
                                                                    as u8;
                                                            }
                                                        }
                                                        *base.add(12).cast::<usize>() = len104;
                                                        *base.add(8).cast::<*mut u8>() = result104;
                                                        cleanup_list.extend_from_slice(&[(
                                                            result104, layout104,
                                                        )]);
                                                    }
                                                    DbValuePrimitive::Varbit(e) => {
                                                        *base.add(0).cast::<u8>() = (27i32) as u8;
                                                        let vec105 = e;
                                                        let len105 = vec105.len();
                                                        let layout105 = _rt::alloc::Layout::from_size_align_unchecked(vec105.len() * 1, 1);
                                                        let result105 = if layout105.size() != 0 {
                                                            let ptr = _rt::alloc::alloc(layout105)
                                                                .cast::<u8>();
                                                            if ptr.is_null() {
                                                                _rt::alloc::handle_alloc_error(
                                                                    layout105,
                                                                );
                                                            }
                                                            ptr
                                                        } else {
                                                            {
                                                                ::core::ptr::null_mut()
                                                            }
                                                        };
                                                        for (i, e) in vec105.into_iter().enumerate()
                                                        {
                                                            let base = result105.add(i * 1);
                                                            {
                                                                *base.add(0).cast::<u8>() = (match e
                                                                {
                                                                    true => 1,
                                                                    false => 0,
                                                                })
                                                                    as u8;
                                                            }
                                                        }
                                                        *base.add(12).cast::<usize>() = len105;
                                                        *base.add(8).cast::<*mut u8>() = result105;
                                                        cleanup_list.extend_from_slice(&[(
                                                            result105, layout105,
                                                        )]);
                                                    }
                                                    DbValuePrimitive::Int4range(e) => {
                                                        *base.add(0).cast::<u8>() = (28i32) as u8;
                                                        let Int4range {
                                                            start: start106,
                                                            end: end106,
                                                        } = e;
                                                        match start106 {
                                                            Int4bound::Included(e) => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (0i32) as u8;
                                                                *base.add(12).cast::<i32>() =
                                                                    _rt::as_i32(e);
                                                            }
                                                            Int4bound::Excluded(e) => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                *base.add(12).cast::<i32>() =
                                                                    _rt::as_i32(e);
                                                            }
                                                            Int4bound::Unbounded => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (2i32) as u8;
                                                            }
                                                        }
                                                        match end106 {
                                                            Int4bound::Included(e) => {
                                                                *base.add(16).cast::<u8>() =
                                                                    (0i32) as u8;
                                                                *base.add(20).cast::<i32>() =
                                                                    _rt::as_i32(e);
                                                            }
                                                            Int4bound::Excluded(e) => {
                                                                *base.add(16).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                *base.add(20).cast::<i32>() =
                                                                    _rt::as_i32(e);
                                                            }
                                                            Int4bound::Unbounded => {
                                                                *base.add(16).cast::<u8>() =
                                                                    (2i32) as u8;
                                                            }
                                                        }
                                                    }
                                                    DbValuePrimitive::Int8range(e) => {
                                                        *base.add(0).cast::<u8>() = (29i32) as u8;
                                                        let Int8range {
                                                            start: start107,
                                                            end: end107,
                                                        } = e;
                                                        match start107 {
                                                            Int8bound::Included(e) => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (0i32) as u8;
                                                                *base.add(16).cast::<i64>() =
                                                                    _rt::as_i64(e);
                                                            }
                                                            Int8bound::Excluded(e) => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                *base.add(16).cast::<i64>() =
                                                                    _rt::as_i64(e);
                                                            }
                                                            Int8bound::Unbounded => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (2i32) as u8;
                                                            }
                                                        }
                                                        match end107 {
                                                            Int8bound::Included(e) => {
                                                                *base.add(24).cast::<u8>() =
                                                                    (0i32) as u8;
                                                                *base.add(32).cast::<i64>() =
                                                                    _rt::as_i64(e);
                                                            }
                                                            Int8bound::Excluded(e) => {
                                                                *base.add(24).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                *base.add(32).cast::<i64>() =
                                                                    _rt::as_i64(e);
                                                            }
                                                            Int8bound::Unbounded => {
                                                                *base.add(24).cast::<u8>() =
                                                                    (2i32) as u8;
                                                            }
                                                        }
                                                    }
                                                    DbValuePrimitive::Numrange(e) => {
                                                        *base.add(0).cast::<u8>() = (30i32) as u8;
                                                        let Numrange {
                                                            start: start108,
                                                            end: end108,
                                                        } = e;
                                                        match start108 {
                                                            Numbound::Included(e) => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (0i32) as u8;
                                                                let vec109 = e;
                                                                let ptr109 =
                                                                    vec109.as_ptr().cast::<u8>();
                                                                let len109 = vec109.len();
                                                                *base.add(16).cast::<usize>() =
                                                                    len109;
                                                                *base.add(12).cast::<*mut u8>() =
                                                                    ptr109.cast_mut();
                                                            }
                                                            Numbound::Excluded(e) => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                let vec110 = e;
                                                                let ptr110 =
                                                                    vec110.as_ptr().cast::<u8>();
                                                                let len110 = vec110.len();
                                                                *base.add(16).cast::<usize>() =
                                                                    len110;
                                                                *base.add(12).cast::<*mut u8>() =
                                                                    ptr110.cast_mut();
                                                            }
                                                            Numbound::Unbounded => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (2i32) as u8;
                                                            }
                                                        }
                                                        match end108 {
                                                            Numbound::Included(e) => {
                                                                *base.add(20).cast::<u8>() =
                                                                    (0i32) as u8;
                                                                let vec111 = e;
                                                                let ptr111 =
                                                                    vec111.as_ptr().cast::<u8>();
                                                                let len111 = vec111.len();
                                                                *base.add(28).cast::<usize>() =
                                                                    len111;
                                                                *base.add(24).cast::<*mut u8>() =
                                                                    ptr111.cast_mut();
                                                            }
                                                            Numbound::Excluded(e) => {
                                                                *base.add(20).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                let vec112 = e;
                                                                let ptr112 =
                                                                    vec112.as_ptr().cast::<u8>();
                                                                let len112 = vec112.len();
                                                                *base.add(28).cast::<usize>() =
                                                                    len112;
                                                                *base.add(24).cast::<*mut u8>() =
                                                                    ptr112.cast_mut();
                                                            }
                                                            Numbound::Unbounded => {
                                                                *base.add(20).cast::<u8>() =
                                                                    (2i32) as u8;
                                                            }
                                                        }
                                                    }
                                                    DbValuePrimitive::Tsrange(e) => {
                                                        *base.add(0).cast::<u8>() = (31i32) as u8;
                                                        let Tsrange {
                                                            start: start113,
                                                            end: end113,
                                                        } = e;
                                                        match start113 {
                                                            Tsbound::Included(e) => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (0i32) as u8;
                                                                let Timestamp {
                                                                    date: date114,
                                                                    time: time114,
                                                                } = e;
                                                                let Date {
                                                                    year: year115,
                                                                    month: month115,
                                                                    day: day115,
                                                                } = date114;
                                                                *base.add(12).cast::<i32>() =
                                                                    _rt::as_i32(year115);
                                                                *base.add(16).cast::<u8>() =
                                                                    (_rt::as_i32(month115)) as u8;
                                                                *base.add(17).cast::<u8>() =
                                                                    (_rt::as_i32(day115)) as u8;
                                                                let Time {
                                                                    hour: hour116,
                                                                    minute: minute116,
                                                                    second: second116,
                                                                    nanosecond: nanosecond116,
                                                                } = time114;
                                                                *base.add(20).cast::<u8>() =
                                                                    (_rt::as_i32(hour116)) as u8;
                                                                *base.add(21).cast::<u8>() =
                                                                    (_rt::as_i32(minute116)) as u8;
                                                                *base.add(22).cast::<u8>() =
                                                                    (_rt::as_i32(second116)) as u8;
                                                                *base.add(24).cast::<i32>() =
                                                                    _rt::as_i32(nanosecond116);
                                                            }
                                                            Tsbound::Excluded(e) => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                let Timestamp {
                                                                    date: date117,
                                                                    time: time117,
                                                                } = e;
                                                                let Date {
                                                                    year: year118,
                                                                    month: month118,
                                                                    day: day118,
                                                                } = date117;
                                                                *base.add(12).cast::<i32>() =
                                                                    _rt::as_i32(year118);
                                                                *base.add(16).cast::<u8>() =
                                                                    (_rt::as_i32(month118)) as u8;
                                                                *base.add(17).cast::<u8>() =
                                                                    (_rt::as_i32(day118)) as u8;
                                                                let Time {
                                                                    hour: hour119,
                                                                    minute: minute119,
                                                                    second: second119,
                                                                    nanosecond: nanosecond119,
                                                                } = time117;
                                                                *base.add(20).cast::<u8>() =
                                                                    (_rt::as_i32(hour119)) as u8;
                                                                *base.add(21).cast::<u8>() =
                                                                    (_rt::as_i32(minute119)) as u8;
                                                                *base.add(22).cast::<u8>() =
                                                                    (_rt::as_i32(second119)) as u8;
                                                                *base.add(24).cast::<i32>() =
                                                                    _rt::as_i32(nanosecond119);
                                                            }
                                                            Tsbound::Unbounded => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (2i32) as u8;
                                                            }
                                                        }
                                                        match end113 {
                                                            Tsbound::Included(e) => {
                                                                *base.add(28).cast::<u8>() =
                                                                    (0i32) as u8;
                                                                let Timestamp {
                                                                    date: date120,
                                                                    time: time120,
                                                                } = e;
                                                                let Date {
                                                                    year: year121,
                                                                    month: month121,
                                                                    day: day121,
                                                                } = date120;
                                                                *base.add(32).cast::<i32>() =
                                                                    _rt::as_i32(year121);
                                                                *base.add(36).cast::<u8>() =
                                                                    (_rt::as_i32(month121)) as u8;
                                                                *base.add(37).cast::<u8>() =
                                                                    (_rt::as_i32(day121)) as u8;
                                                                let Time {
                                                                    hour: hour122,
                                                                    minute: minute122,
                                                                    second: second122,
                                                                    nanosecond: nanosecond122,
                                                                } = time120;
                                                                *base.add(40).cast::<u8>() =
                                                                    (_rt::as_i32(hour122)) as u8;
                                                                *base.add(41).cast::<u8>() =
                                                                    (_rt::as_i32(minute122)) as u8;
                                                                *base.add(42).cast::<u8>() =
                                                                    (_rt::as_i32(second122)) as u8;
                                                                *base.add(44).cast::<i32>() =
                                                                    _rt::as_i32(nanosecond122);
                                                            }
                                                            Tsbound::Excluded(e) => {
                                                                *base.add(28).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                let Timestamp {
                                                                    date: date123,
                                                                    time: time123,
                                                                } = e;
                                                                let Date {
                                                                    year: year124,
                                                                    month: month124,
                                                                    day: day124,
                                                                } = date123;
                                                                *base.add(32).cast::<i32>() =
                                                                    _rt::as_i32(year124);
                                                                *base.add(36).cast::<u8>() =
                                                                    (_rt::as_i32(month124)) as u8;
                                                                *base.add(37).cast::<u8>() =
                                                                    (_rt::as_i32(day124)) as u8;
                                                                let Time {
                                                                    hour: hour125,
                                                                    minute: minute125,
                                                                    second: second125,
                                                                    nanosecond: nanosecond125,
                                                                } = time123;
                                                                *base.add(40).cast::<u8>() =
                                                                    (_rt::as_i32(hour125)) as u8;
                                                                *base.add(41).cast::<u8>() =
                                                                    (_rt::as_i32(minute125)) as u8;
                                                                *base.add(42).cast::<u8>() =
                                                                    (_rt::as_i32(second125)) as u8;
                                                                *base.add(44).cast::<i32>() =
                                                                    _rt::as_i32(nanosecond125);
                                                            }
                                                            Tsbound::Unbounded => {
                                                                *base.add(28).cast::<u8>() =
                                                                    (2i32) as u8;
                                                            }
                                                        }
                                                    }
                                                    DbValuePrimitive::Tstzrange(e) => {
                                                        *base.add(0).cast::<u8>() = (32i32) as u8;
                                                        let Tstzrange {
                                                            start: start126,
                                                            end: end126,
                                                        } = e;
                                                        match start126 {
                                                            Tstzbound::Included(e) => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (0i32) as u8;
                                                                let Timestamptz {
                                                                    timestamp: timestamp127,
                                                                    offset: offset127,
                                                                } = e;
                                                                let Timestamp {
                                                                    date: date128,
                                                                    time: time128,
                                                                } = timestamp127;
                                                                let Date {
                                                                    year: year129,
                                                                    month: month129,
                                                                    day: day129,
                                                                } = date128;
                                                                *base.add(12).cast::<i32>() =
                                                                    _rt::as_i32(year129);
                                                                *base.add(16).cast::<u8>() =
                                                                    (_rt::as_i32(month129)) as u8;
                                                                *base.add(17).cast::<u8>() =
                                                                    (_rt::as_i32(day129)) as u8;
                                                                let Time {
                                                                    hour: hour130,
                                                                    minute: minute130,
                                                                    second: second130,
                                                                    nanosecond: nanosecond130,
                                                                } = time128;
                                                                *base.add(20).cast::<u8>() =
                                                                    (_rt::as_i32(hour130)) as u8;
                                                                *base.add(21).cast::<u8>() =
                                                                    (_rt::as_i32(minute130)) as u8;
                                                                *base.add(22).cast::<u8>() =
                                                                    (_rt::as_i32(second130)) as u8;
                                                                *base.add(24).cast::<i32>() =
                                                                    _rt::as_i32(nanosecond130);
                                                                *base.add(28).cast::<i32>() =
                                                                    _rt::as_i32(offset127);
                                                            }
                                                            Tstzbound::Excluded(e) => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                let Timestamptz {
                                                                    timestamp: timestamp131,
                                                                    offset: offset131,
                                                                } = e;
                                                                let Timestamp {
                                                                    date: date132,
                                                                    time: time132,
                                                                } = timestamp131;
                                                                let Date {
                                                                    year: year133,
                                                                    month: month133,
                                                                    day: day133,
                                                                } = date132;
                                                                *base.add(12).cast::<i32>() =
                                                                    _rt::as_i32(year133);
                                                                *base.add(16).cast::<u8>() =
                                                                    (_rt::as_i32(month133)) as u8;
                                                                *base.add(17).cast::<u8>() =
                                                                    (_rt::as_i32(day133)) as u8;
                                                                let Time {
                                                                    hour: hour134,
                                                                    minute: minute134,
                                                                    second: second134,
                                                                    nanosecond: nanosecond134,
                                                                } = time132;
                                                                *base.add(20).cast::<u8>() =
                                                                    (_rt::as_i32(hour134)) as u8;
                                                                *base.add(21).cast::<u8>() =
                                                                    (_rt::as_i32(minute134)) as u8;
                                                                *base.add(22).cast::<u8>() =
                                                                    (_rt::as_i32(second134)) as u8;
                                                                *base.add(24).cast::<i32>() =
                                                                    _rt::as_i32(nanosecond134);
                                                                *base.add(28).cast::<i32>() =
                                                                    _rt::as_i32(offset131);
                                                            }
                                                            Tstzbound::Unbounded => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (2i32) as u8;
                                                            }
                                                        }
                                                        match end126 {
                                                            Tstzbound::Included(e) => {
                                                                *base.add(32).cast::<u8>() =
                                                                    (0i32) as u8;
                                                                let Timestamptz {
                                                                    timestamp: timestamp135,
                                                                    offset: offset135,
                                                                } = e;
                                                                let Timestamp {
                                                                    date: date136,
                                                                    time: time136,
                                                                } = timestamp135;
                                                                let Date {
                                                                    year: year137,
                                                                    month: month137,
                                                                    day: day137,
                                                                } = date136;
                                                                *base.add(36).cast::<i32>() =
                                                                    _rt::as_i32(year137);
                                                                *base.add(40).cast::<u8>() =
                                                                    (_rt::as_i32(month137)) as u8;
                                                                *base.add(41).cast::<u8>() =
                                                                    (_rt::as_i32(day137)) as u8;
                                                                let Time {
                                                                    hour: hour138,
                                                                    minute: minute138,
                                                                    second: second138,
                                                                    nanosecond: nanosecond138,
                                                                } = time136;
                                                                *base.add(44).cast::<u8>() =
                                                                    (_rt::as_i32(hour138)) as u8;
                                                                *base.add(45).cast::<u8>() =
                                                                    (_rt::as_i32(minute138)) as u8;
                                                                *base.add(46).cast::<u8>() =
                                                                    (_rt::as_i32(second138)) as u8;
                                                                *base.add(48).cast::<i32>() =
                                                                    _rt::as_i32(nanosecond138);
                                                                *base.add(52).cast::<i32>() =
                                                                    _rt::as_i32(offset135);
                                                            }
                                                            Tstzbound::Excluded(e) => {
                                                                *base.add(32).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                let Timestamptz {
                                                                    timestamp: timestamp139,
                                                                    offset: offset139,
                                                                } = e;
                                                                let Timestamp {
                                                                    date: date140,
                                                                    time: time140,
                                                                } = timestamp139;
                                                                let Date {
                                                                    year: year141,
                                                                    month: month141,
                                                                    day: day141,
                                                                } = date140;
                                                                *base.add(36).cast::<i32>() =
                                                                    _rt::as_i32(year141);
                                                                *base.add(40).cast::<u8>() =
                                                                    (_rt::as_i32(month141)) as u8;
                                                                *base.add(41).cast::<u8>() =
                                                                    (_rt::as_i32(day141)) as u8;
                                                                let Time {
                                                                    hour: hour142,
                                                                    minute: minute142,
                                                                    second: second142,
                                                                    nanosecond: nanosecond142,
                                                                } = time140;
                                                                *base.add(44).cast::<u8>() =
                                                                    (_rt::as_i32(hour142)) as u8;
                                                                *base.add(45).cast::<u8>() =
                                                                    (_rt::as_i32(minute142)) as u8;
                                                                *base.add(46).cast::<u8>() =
                                                                    (_rt::as_i32(second142)) as u8;
                                                                *base.add(48).cast::<i32>() =
                                                                    _rt::as_i32(nanosecond142);
                                                                *base.add(52).cast::<i32>() =
                                                                    _rt::as_i32(offset139);
                                                            }
                                                            Tstzbound::Unbounded => {
                                                                *base.add(32).cast::<u8>() =
                                                                    (2i32) as u8;
                                                            }
                                                        }
                                                    }
                                                    DbValuePrimitive::Daterange(e) => {
                                                        *base.add(0).cast::<u8>() = (33i32) as u8;
                                                        let Daterange {
                                                            start: start143,
                                                            end: end143,
                                                        } = e;
                                                        match start143 {
                                                            Datebound::Included(e) => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (0i32) as u8;
                                                                let Date {
                                                                    year: year144,
                                                                    month: month144,
                                                                    day: day144,
                                                                } = e;
                                                                *base.add(12).cast::<i32>() =
                                                                    _rt::as_i32(year144);
                                                                *base.add(16).cast::<u8>() =
                                                                    (_rt::as_i32(month144)) as u8;
                                                                *base.add(17).cast::<u8>() =
                                                                    (_rt::as_i32(day144)) as u8;
                                                            }
                                                            Datebound::Excluded(e) => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                let Date {
                                                                    year: year145,
                                                                    month: month145,
                                                                    day: day145,
                                                                } = e;
                                                                *base.add(12).cast::<i32>() =
                                                                    _rt::as_i32(year145);
                                                                *base.add(16).cast::<u8>() =
                                                                    (_rt::as_i32(month145)) as u8;
                                                                *base.add(17).cast::<u8>() =
                                                                    (_rt::as_i32(day145)) as u8;
                                                            }
                                                            Datebound::Unbounded => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (2i32) as u8;
                                                            }
                                                        }
                                                        match end143 {
                                                            Datebound::Included(e) => {
                                                                *base.add(20).cast::<u8>() =
                                                                    (0i32) as u8;
                                                                let Date {
                                                                    year: year146,
                                                                    month: month146,
                                                                    day: day146,
                                                                } = e;
                                                                *base.add(24).cast::<i32>() =
                                                                    _rt::as_i32(year146);
                                                                *base.add(28).cast::<u8>() =
                                                                    (_rt::as_i32(month146)) as u8;
                                                                *base.add(29).cast::<u8>() =
                                                                    (_rt::as_i32(day146)) as u8;
                                                            }
                                                            Datebound::Excluded(e) => {
                                                                *base.add(20).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                let Date {
                                                                    year: year147,
                                                                    month: month147,
                                                                    day: day147,
                                                                } = e;
                                                                *base.add(24).cast::<i32>() =
                                                                    _rt::as_i32(year147);
                                                                *base.add(28).cast::<u8>() =
                                                                    (_rt::as_i32(month147)) as u8;
                                                                *base.add(29).cast::<u8>() =
                                                                    (_rt::as_i32(day147)) as u8;
                                                            }
                                                            Datebound::Unbounded => {
                                                                *base.add(20).cast::<u8>() =
                                                                    (2i32) as u8;
                                                            }
                                                        }
                                                    }
                                                    DbValuePrimitive::Money(e) => {
                                                        *base.add(0).cast::<u8>() = (34i32) as u8;
                                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                    }
                                                    DbValuePrimitive::Oid(e) => {
                                                        *base.add(0).cast::<u8>() = (35i32) as u8;
                                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    DbValuePrimitive::Enumeration(e) => {
                                                        *base.add(0).cast::<u8>() = (36i32) as u8;
                                                        let Enumeration {
                                                            name: name148,
                                                            value: value148,
                                                        } = e;
                                                        let vec149 = name148;
                                                        let ptr149 = vec149.as_ptr().cast::<u8>();
                                                        let len149 = vec149.len();
                                                        *base.add(12).cast::<usize>() = len149;
                                                        *base.add(8).cast::<*mut u8>() =
                                                            ptr149.cast_mut();
                                                        let vec150 = value148;
                                                        let ptr150 = vec150.as_ptr().cast::<u8>();
                                                        let len150 = vec150.len();
                                                        *base.add(20).cast::<usize>() = len150;
                                                        *base.add(16).cast::<*mut u8>() =
                                                            ptr150.cast_mut();
                                                    }
                                                    DbValuePrimitive::Null => {
                                                        *base.add(0).cast::<u8>() = (37i32) as u8;
                                                    }
                                                }
                                            }
                                        }
                                        *base.add(12).cast::<usize>() = len151;
                                        *base.add(8).cast::<*mut u8>() = result151;
                                        cleanup_list.extend_from_slice(&[(result151, layout151)]);
                                    }
                                }
                            }
                        }
                        let ptr153 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:rdbms/postgres@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]db-connection.query"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            result152,
                            len152,
                            ptr153,
                        );
                        let l154 = i32::from(*ptr153.add(0).cast::<u8>());
                        if layout152.size() != 0 {
                            _rt::alloc::dealloc(result152.cast(), layout152);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l154 {
                            0 => {
                                let e = {
                                    let l155 = *ptr153.add(4).cast::<i32>();

                                    DbResultSet::from_handle(l155 as u32)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l156 = i32::from(*ptr153.add(4).cast::<u8>());
                                    let v172 = match l156 {
                                        0 => {
                                            let e172 = {
                                                let l157 = *ptr153.add(8).cast::<*mut u8>();
                                                let l158 = *ptr153.add(12).cast::<usize>();
                                                let len159 = l158;
                                                let bytes159 = _rt::Vec::from_raw_parts(
                                                    l157.cast(),
                                                    len159,
                                                    len159,
                                                );

                                                _rt::string_lift(bytes159)
                                            };
                                            Error::ConnectionFailure(e172)
                                        }
                                        1 => {
                                            let e172 = {
                                                let l160 = *ptr153.add(8).cast::<*mut u8>();
                                                let l161 = *ptr153.add(12).cast::<usize>();
                                                let len162 = l161;
                                                let bytes162 = _rt::Vec::from_raw_parts(
                                                    l160.cast(),
                                                    len162,
                                                    len162,
                                                );

                                                _rt::string_lift(bytes162)
                                            };
                                            Error::QueryParameterFailure(e172)
                                        }
                                        2 => {
                                            let e172 = {
                                                let l163 = *ptr153.add(8).cast::<*mut u8>();
                                                let l164 = *ptr153.add(12).cast::<usize>();
                                                let len165 = l164;
                                                let bytes165 = _rt::Vec::from_raw_parts(
                                                    l163.cast(),
                                                    len165,
                                                    len165,
                                                );

                                                _rt::string_lift(bytes165)
                                            };
                                            Error::QueryExecutionFailure(e172)
                                        }
                                        3 => {
                                            let e172 = {
                                                let l166 = *ptr153.add(8).cast::<*mut u8>();
                                                let l167 = *ptr153.add(12).cast::<usize>();
                                                let len168 = l167;
                                                let bytes168 = _rt::Vec::from_raw_parts(
                                                    l166.cast(),
                                                    len168,
                                                    len168,
                                                );

                                                _rt::string_lift(bytes168)
                                            };
                                            Error::QueryResponseFailure(e172)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 4, "invalid enum discriminant");
                                            let e172 = {
                                                let l169 = *ptr153.add(8).cast::<*mut u8>();
                                                let l170 = *ptr153.add(12).cast::<usize>();
                                                let len171 = l170;
                                                let bytes171 = _rt::Vec::from_raw_parts(
                                                    l169.cast(),
                                                    len171,
                                                    len171,
                                                );

                                                _rt::string_lift(bytes171)
                                            };
                                            Error::Other(e172)
                                        }
                                    };

                                    v172
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl DbConnection {
                #[allow(unused_unsafe, clippy::all)]
                pub fn execute(&self, statement: &str, params: &[DbValue]) -> Result<u64, Error> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 24]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 24]);
                        let vec0 = statement;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec152 = params;
                        let len152 = vec152.len();
                        let layout152 =
                            _rt::alloc::Layout::from_size_align_unchecked(vec152.len() * 64, 8);
                        let result152 = if layout152.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout152).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout152);
                            }
                            ptr
                        } else {
                            {
                                ::core::ptr::null_mut()
                            }
                        };
                        for (i, e) in vec152.into_iter().enumerate() {
                            let base = result152.add(i * 64);
                            {
                                match e {
                                    DbValue::Primitive(e) => {
                                        *base.add(0).cast::<u8>() = (0i32) as u8;
                                        match e {
                                            DbValuePrimitive::Character(e) => {
                                                *base.add(8).cast::<u8>() = (0i32) as u8;
                                                *base.add(16).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            DbValuePrimitive::Int2(e) => {
                                                *base.add(8).cast::<u8>() = (1i32) as u8;
                                                *base.add(16).cast::<u16>() =
                                                    (_rt::as_i32(e)) as u16;
                                            }
                                            DbValuePrimitive::Int4(e) => {
                                                *base.add(8).cast::<u8>() = (2i32) as u8;
                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            DbValuePrimitive::Int8(e) => {
                                                *base.add(8).cast::<u8>() = (3i32) as u8;
                                                *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            DbValuePrimitive::Float4(e) => {
                                                *base.add(8).cast::<u8>() = (4i32) as u8;
                                                *base.add(16).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            DbValuePrimitive::Float8(e) => {
                                                *base.add(8).cast::<u8>() = (5i32) as u8;
                                                *base.add(16).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            DbValuePrimitive::Numeric(e) => {
                                                *base.add(8).cast::<u8>() = (6i32) as u8;
                                                let vec1 = e;
                                                let ptr1 = vec1.as_ptr().cast::<u8>();
                                                let len1 = vec1.len();
                                                *base.add(20).cast::<usize>() = len1;
                                                *base.add(16).cast::<*mut u8>() = ptr1.cast_mut();
                                            }
                                            DbValuePrimitive::Boolean(e) => {
                                                *base.add(8).cast::<u8>() = (7i32) as u8;
                                                *base.add(16).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                })
                                                    as u8;
                                            }
                                            DbValuePrimitive::Text(e) => {
                                                *base.add(8).cast::<u8>() = (8i32) as u8;
                                                let vec2 = e;
                                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                                let len2 = vec2.len();
                                                *base.add(20).cast::<usize>() = len2;
                                                *base.add(16).cast::<*mut u8>() = ptr2.cast_mut();
                                            }
                                            DbValuePrimitive::Varchar(e) => {
                                                *base.add(8).cast::<u8>() = (9i32) as u8;
                                                let vec3 = e;
                                                let ptr3 = vec3.as_ptr().cast::<u8>();
                                                let len3 = vec3.len();
                                                *base.add(20).cast::<usize>() = len3;
                                                *base.add(16).cast::<*mut u8>() = ptr3.cast_mut();
                                            }
                                            DbValuePrimitive::Bpchar(e) => {
                                                *base.add(8).cast::<u8>() = (10i32) as u8;
                                                let vec4 = e;
                                                let ptr4 = vec4.as_ptr().cast::<u8>();
                                                let len4 = vec4.len();
                                                *base.add(20).cast::<usize>() = len4;
                                                *base.add(16).cast::<*mut u8>() = ptr4.cast_mut();
                                            }
                                            DbValuePrimitive::Timestamp(e) => {
                                                *base.add(8).cast::<u8>() = (11i32) as u8;
                                                let Timestamp {
                                                    date: date5,
                                                    time: time5,
                                                } = e;
                                                let Date {
                                                    year: year6,
                                                    month: month6,
                                                    day: day6,
                                                } = date5;
                                                *base.add(16).cast::<i32>() = _rt::as_i32(year6);
                                                *base.add(20).cast::<u8>() =
                                                    (_rt::as_i32(month6)) as u8;
                                                *base.add(21).cast::<u8>() =
                                                    (_rt::as_i32(day6)) as u8;
                                                let Time {
                                                    hour: hour7,
                                                    minute: minute7,
                                                    second: second7,
                                                    nanosecond: nanosecond7,
                                                } = time5;
                                                *base.add(24).cast::<u8>() =
                                                    (_rt::as_i32(hour7)) as u8;
                                                *base.add(25).cast::<u8>() =
                                                    (_rt::as_i32(minute7)) as u8;
                                                *base.add(26).cast::<u8>() =
                                                    (_rt::as_i32(second7)) as u8;
                                                *base.add(28).cast::<i32>() =
                                                    _rt::as_i32(nanosecond7);
                                            }
                                            DbValuePrimitive::Timestamptz(e) => {
                                                *base.add(8).cast::<u8>() = (12i32) as u8;
                                                let Timestamptz {
                                                    timestamp: timestamp8,
                                                    offset: offset8,
                                                } = e;
                                                let Timestamp {
                                                    date: date9,
                                                    time: time9,
                                                } = timestamp8;
                                                let Date {
                                                    year: year10,
                                                    month: month10,
                                                    day: day10,
                                                } = date9;
                                                *base.add(16).cast::<i32>() = _rt::as_i32(year10);
                                                *base.add(20).cast::<u8>() =
                                                    (_rt::as_i32(month10)) as u8;
                                                *base.add(21).cast::<u8>() =
                                                    (_rt::as_i32(day10)) as u8;
                                                let Time {
                                                    hour: hour11,
                                                    minute: minute11,
                                                    second: second11,
                                                    nanosecond: nanosecond11,
                                                } = time9;
                                                *base.add(24).cast::<u8>() =
                                                    (_rt::as_i32(hour11)) as u8;
                                                *base.add(25).cast::<u8>() =
                                                    (_rt::as_i32(minute11)) as u8;
                                                *base.add(26).cast::<u8>() =
                                                    (_rt::as_i32(second11)) as u8;
                                                *base.add(28).cast::<i32>() =
                                                    _rt::as_i32(nanosecond11);
                                                *base.add(32).cast::<i32>() = _rt::as_i32(offset8);
                                            }
                                            DbValuePrimitive::Date(e) => {
                                                *base.add(8).cast::<u8>() = (13i32) as u8;
                                                let Date {
                                                    year: year12,
                                                    month: month12,
                                                    day: day12,
                                                } = e;
                                                *base.add(16).cast::<i32>() = _rt::as_i32(year12);
                                                *base.add(20).cast::<u8>() =
                                                    (_rt::as_i32(month12)) as u8;
                                                *base.add(21).cast::<u8>() =
                                                    (_rt::as_i32(day12)) as u8;
                                            }
                                            DbValuePrimitive::Time(e) => {
                                                *base.add(8).cast::<u8>() = (14i32) as u8;
                                                let Time {
                                                    hour: hour13,
                                                    minute: minute13,
                                                    second: second13,
                                                    nanosecond: nanosecond13,
                                                } = e;
                                                *base.add(16).cast::<u8>() =
                                                    (_rt::as_i32(hour13)) as u8;
                                                *base.add(17).cast::<u8>() =
                                                    (_rt::as_i32(minute13)) as u8;
                                                *base.add(18).cast::<u8>() =
                                                    (_rt::as_i32(second13)) as u8;
                                                *base.add(20).cast::<i32>() =
                                                    _rt::as_i32(nanosecond13);
                                            }
                                            DbValuePrimitive::Timetz(e) => {
                                                *base.add(8).cast::<u8>() = (15i32) as u8;
                                                let Timetz {
                                                    time: time14,
                                                    offset: offset14,
                                                } = e;
                                                let Time {
                                                    hour: hour15,
                                                    minute: minute15,
                                                    second: second15,
                                                    nanosecond: nanosecond15,
                                                } = time14;
                                                *base.add(16).cast::<u8>() =
                                                    (_rt::as_i32(hour15)) as u8;
                                                *base.add(17).cast::<u8>() =
                                                    (_rt::as_i32(minute15)) as u8;
                                                *base.add(18).cast::<u8>() =
                                                    (_rt::as_i32(second15)) as u8;
                                                *base.add(20).cast::<i32>() =
                                                    _rt::as_i32(nanosecond15);
                                                *base.add(24).cast::<i32>() = _rt::as_i32(offset14);
                                            }
                                            DbValuePrimitive::Interval(e) => {
                                                *base.add(8).cast::<u8>() = (16i32) as u8;
                                                let Interval {
                                                    months: months16,
                                                    days: days16,
                                                    microseconds: microseconds16,
                                                } = e;
                                                *base.add(16).cast::<i32>() = _rt::as_i32(months16);
                                                *base.add(20).cast::<i32>() = _rt::as_i32(days16);
                                                *base.add(24).cast::<i64>() =
                                                    _rt::as_i64(microseconds16);
                                            }
                                            DbValuePrimitive::Bytea(e) => {
                                                *base.add(8).cast::<u8>() = (17i32) as u8;
                                                let vec17 = e;
                                                let ptr17 = vec17.as_ptr().cast::<u8>();
                                                let len17 = vec17.len();
                                                *base.add(20).cast::<usize>() = len17;
                                                *base.add(16).cast::<*mut u8>() = ptr17.cast_mut();
                                            }
                                            DbValuePrimitive::Json(e) => {
                                                *base.add(8).cast::<u8>() = (18i32) as u8;
                                                let vec18 = e;
                                                let ptr18 = vec18.as_ptr().cast::<u8>();
                                                let len18 = vec18.len();
                                                *base.add(20).cast::<usize>() = len18;
                                                *base.add(16).cast::<*mut u8>() = ptr18.cast_mut();
                                            }
                                            DbValuePrimitive::Jsonb(e) => {
                                                *base.add(8).cast::<u8>() = (19i32) as u8;
                                                let vec19 = e;
                                                let ptr19 = vec19.as_ptr().cast::<u8>();
                                                let len19 = vec19.len();
                                                *base.add(20).cast::<usize>() = len19;
                                                *base.add(16).cast::<*mut u8>() = ptr19.cast_mut();
                                            }
                                            DbValuePrimitive::Jsonpath(e) => {
                                                *base.add(8).cast::<u8>() = (20i32) as u8;
                                                let vec20 = e;
                                                let ptr20 = vec20.as_ptr().cast::<u8>();
                                                let len20 = vec20.len();
                                                *base.add(20).cast::<usize>() = len20;
                                                *base.add(16).cast::<*mut u8>() = ptr20.cast_mut();
                                            }
                                            DbValuePrimitive::Xml(e) => {
                                                *base.add(8).cast::<u8>() = (21i32) as u8;
                                                let vec21 = e;
                                                let ptr21 = vec21.as_ptr().cast::<u8>();
                                                let len21 = vec21.len();
                                                *base.add(20).cast::<usize>() = len21;
                                                *base.add(16).cast::<*mut u8>() = ptr21.cast_mut();
                                            }
                                            DbValuePrimitive::Uuid(e) => {
                                                *base.add(8).cast::<u8>() = (22i32) as u8;
                                                let Uuid {
                                                    high_bits: high_bits22,
                                                    low_bits: low_bits22,
                                                } = e;
                                                *base.add(16).cast::<i64>() =
                                                    _rt::as_i64(high_bits22);
                                                *base.add(24).cast::<i64>() =
                                                    _rt::as_i64(low_bits22);
                                            }
                                            DbValuePrimitive::Inet(e) => {
                                                *base.add(8).cast::<u8>() = (23i32) as u8;
                                                match e {
                                                    IpAddress::Ipv4(e) => {
                                                        *base.add(16).cast::<u8>() = (0i32) as u8;
                                                        let (t23_0, t23_1, t23_2, t23_3) = e;
                                                        *base.add(18).cast::<u8>() =
                                                            (_rt::as_i32(t23_0)) as u8;
                                                        *base.add(19).cast::<u8>() =
                                                            (_rt::as_i32(t23_1)) as u8;
                                                        *base.add(20).cast::<u8>() =
                                                            (_rt::as_i32(t23_2)) as u8;
                                                        *base.add(21).cast::<u8>() =
                                                            (_rt::as_i32(t23_3)) as u8;
                                                    }
                                                    IpAddress::Ipv6(e) => {
                                                        *base.add(16).cast::<u8>() = (1i32) as u8;
                                                        let (
                                                            t24_0,
                                                            t24_1,
                                                            t24_2,
                                                            t24_3,
                                                            t24_4,
                                                            t24_5,
                                                            t24_6,
                                                            t24_7,
                                                        ) = e;
                                                        *base.add(18).cast::<u16>() =
                                                            (_rt::as_i32(t24_0)) as u16;
                                                        *base.add(20).cast::<u16>() =
                                                            (_rt::as_i32(t24_1)) as u16;
                                                        *base.add(22).cast::<u16>() =
                                                            (_rt::as_i32(t24_2)) as u16;
                                                        *base.add(24).cast::<u16>() =
                                                            (_rt::as_i32(t24_3)) as u16;
                                                        *base.add(26).cast::<u16>() =
                                                            (_rt::as_i32(t24_4)) as u16;
                                                        *base.add(28).cast::<u16>() =
                                                            (_rt::as_i32(t24_5)) as u16;
                                                        *base.add(30).cast::<u16>() =
                                                            (_rt::as_i32(t24_6)) as u16;
                                                        *base.add(32).cast::<u16>() =
                                                            (_rt::as_i32(t24_7)) as u16;
                                                    }
                                                }
                                            }
                                            DbValuePrimitive::Cidr(e) => {
                                                *base.add(8).cast::<u8>() = (24i32) as u8;
                                                match e {
                                                    IpAddress::Ipv4(e) => {
                                                        *base.add(16).cast::<u8>() = (0i32) as u8;
                                                        let (t25_0, t25_1, t25_2, t25_3) = e;
                                                        *base.add(18).cast::<u8>() =
                                                            (_rt::as_i32(t25_0)) as u8;
                                                        *base.add(19).cast::<u8>() =
                                                            (_rt::as_i32(t25_1)) as u8;
                                                        *base.add(20).cast::<u8>() =
                                                            (_rt::as_i32(t25_2)) as u8;
                                                        *base.add(21).cast::<u8>() =
                                                            (_rt::as_i32(t25_3)) as u8;
                                                    }
                                                    IpAddress::Ipv6(e) => {
                                                        *base.add(16).cast::<u8>() = (1i32) as u8;
                                                        let (
                                                            t26_0,
                                                            t26_1,
                                                            t26_2,
                                                            t26_3,
                                                            t26_4,
                                                            t26_5,
                                                            t26_6,
                                                            t26_7,
                                                        ) = e;
                                                        *base.add(18).cast::<u16>() =
                                                            (_rt::as_i32(t26_0)) as u16;
                                                        *base.add(20).cast::<u16>() =
                                                            (_rt::as_i32(t26_1)) as u16;
                                                        *base.add(22).cast::<u16>() =
                                                            (_rt::as_i32(t26_2)) as u16;
                                                        *base.add(24).cast::<u16>() =
                                                            (_rt::as_i32(t26_3)) as u16;
                                                        *base.add(26).cast::<u16>() =
                                                            (_rt::as_i32(t26_4)) as u16;
                                                        *base.add(28).cast::<u16>() =
                                                            (_rt::as_i32(t26_5)) as u16;
                                                        *base.add(30).cast::<u16>() =
                                                            (_rt::as_i32(t26_6)) as u16;
                                                        *base.add(32).cast::<u16>() =
                                                            (_rt::as_i32(t26_7)) as u16;
                                                    }
                                                }
                                            }
                                            DbValuePrimitive::Macaddr(e) => {
                                                *base.add(8).cast::<u8>() = (25i32) as u8;
                                                let MacAddress { octets: octets27 } = e;
                                                let (t28_0, t28_1, t28_2, t28_3, t28_4, t28_5) =
                                                    octets27;
                                                *base.add(16).cast::<u8>() =
                                                    (_rt::as_i32(t28_0)) as u8;
                                                *base.add(17).cast::<u8>() =
                                                    (_rt::as_i32(t28_1)) as u8;
                                                *base.add(18).cast::<u8>() =
                                                    (_rt::as_i32(t28_2)) as u8;
                                                *base.add(19).cast::<u8>() =
                                                    (_rt::as_i32(t28_3)) as u8;
                                                *base.add(20).cast::<u8>() =
                                                    (_rt::as_i32(t28_4)) as u8;
                                                *base.add(21).cast::<u8>() =
                                                    (_rt::as_i32(t28_5)) as u8;
                                            }
                                            DbValuePrimitive::Bit(e) => {
                                                *base.add(8).cast::<u8>() = (26i32) as u8;
                                                let vec29 = e;
                                                let len29 = vec29.len();
                                                let layout29 =
                                                    _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec29.len() * 1,
                                                        1,
                                                    );
                                                let result29 = if layout29.size() != 0 {
                                                    let ptr =
                                                        _rt::alloc::alloc(layout29).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout29);
                                                    }
                                                    ptr
                                                } else {
                                                    {
                                                        ::core::ptr::null_mut()
                                                    }
                                                };
                                                for (i, e) in vec29.into_iter().enumerate() {
                                                    let base = result29.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        })
                                                            as u8;
                                                    }
                                                }
                                                *base.add(20).cast::<usize>() = len29;
                                                *base.add(16).cast::<*mut u8>() = result29;
                                                cleanup_list
                                                    .extend_from_slice(&[(result29, layout29)]);
                                            }
                                            DbValuePrimitive::Varbit(e) => {
                                                *base.add(8).cast::<u8>() = (27i32) as u8;
                                                let vec30 = e;
                                                let len30 = vec30.len();
                                                let layout30 =
                                                    _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec30.len() * 1,
                                                        1,
                                                    );
                                                let result30 = if layout30.size() != 0 {
                                                    let ptr =
                                                        _rt::alloc::alloc(layout30).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout30);
                                                    }
                                                    ptr
                                                } else {
                                                    {
                                                        ::core::ptr::null_mut()
                                                    }
                                                };
                                                for (i, e) in vec30.into_iter().enumerate() {
                                                    let base = result30.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        })
                                                            as u8;
                                                    }
                                                }
                                                *base.add(20).cast::<usize>() = len30;
                                                *base.add(16).cast::<*mut u8>() = result30;
                                                cleanup_list
                                                    .extend_from_slice(&[(result30, layout30)]);
                                            }
                                            DbValuePrimitive::Int4range(e) => {
                                                *base.add(8).cast::<u8>() = (28i32) as u8;
                                                let Int4range {
                                                    start: start31,
                                                    end: end31,
                                                } = e;
                                                match start31 {
                                                    Int4bound::Included(e) => {
                                                        *base.add(16).cast::<u8>() = (0i32) as u8;
                                                        *base.add(20).cast::<i32>() =
                                                            _rt::as_i32(e);
                                                    }
                                                    Int4bound::Excluded(e) => {
                                                        *base.add(16).cast::<u8>() = (1i32) as u8;
                                                        *base.add(20).cast::<i32>() =
                                                            _rt::as_i32(e);
                                                    }
                                                    Int4bound::Unbounded => {
                                                        *base.add(16).cast::<u8>() = (2i32) as u8;
                                                    }
                                                }
                                                match end31 {
                                                    Int4bound::Included(e) => {
                                                        *base.add(24).cast::<u8>() = (0i32) as u8;
                                                        *base.add(28).cast::<i32>() =
                                                            _rt::as_i32(e);
                                                    }
                                                    Int4bound::Excluded(e) => {
                                                        *base.add(24).cast::<u8>() = (1i32) as u8;
                                                        *base.add(28).cast::<i32>() =
                                                            _rt::as_i32(e);
                                                    }
                                                    Int4bound::Unbounded => {
                                                        *base.add(24).cast::<u8>() = (2i32) as u8;
                                                    }
                                                }
                                            }
                                            DbValuePrimitive::Int8range(e) => {
                                                *base.add(8).cast::<u8>() = (29i32) as u8;
                                                let Int8range {
                                                    start: start32,
                                                    end: end32,
                                                } = e;
                                                match start32 {
                                                    Int8bound::Included(e) => {
                                                        *base.add(16).cast::<u8>() = (0i32) as u8;
                                                        *base.add(24).cast::<i64>() =
                                                            _rt::as_i64(e);
                                                    }
                                                    Int8bound::Excluded(e) => {
                                                        *base.add(16).cast::<u8>() = (1i32) as u8;
                                                        *base.add(24).cast::<i64>() =
                                                            _rt::as_i64(e);
                                                    }
                                                    Int8bound::Unbounded => {
                                                        *base.add(16).cast::<u8>() = (2i32) as u8;
                                                    }
                                                }
                                                match end32 {
                                                    Int8bound::Included(e) => {
                                                        *base.add(32).cast::<u8>() = (0i32) as u8;
                                                        *base.add(40).cast::<i64>() =
                                                            _rt::as_i64(e);
                                                    }
                                                    Int8bound::Excluded(e) => {
                                                        *base.add(32).cast::<u8>() = (1i32) as u8;
                                                        *base.add(40).cast::<i64>() =
                                                            _rt::as_i64(e);
                                                    }
                                                    Int8bound::Unbounded => {
                                                        *base.add(32).cast::<u8>() = (2i32) as u8;
                                                    }
                                                }
                                            }
                                            DbValuePrimitive::Numrange(e) => {
                                                *base.add(8).cast::<u8>() = (30i32) as u8;
                                                let Numrange {
                                                    start: start33,
                                                    end: end33,
                                                } = e;
                                                match start33 {
                                                    Numbound::Included(e) => {
                                                        *base.add(16).cast::<u8>() = (0i32) as u8;
                                                        let vec34 = e;
                                                        let ptr34 = vec34.as_ptr().cast::<u8>();
                                                        let len34 = vec34.len();
                                                        *base.add(24).cast::<usize>() = len34;
                                                        *base.add(20).cast::<*mut u8>() =
                                                            ptr34.cast_mut();
                                                    }
                                                    Numbound::Excluded(e) => {
                                                        *base.add(16).cast::<u8>() = (1i32) as u8;
                                                        let vec35 = e;
                                                        let ptr35 = vec35.as_ptr().cast::<u8>();
                                                        let len35 = vec35.len();
                                                        *base.add(24).cast::<usize>() = len35;
                                                        *base.add(20).cast::<*mut u8>() =
                                                            ptr35.cast_mut();
                                                    }
                                                    Numbound::Unbounded => {
                                                        *base.add(16).cast::<u8>() = (2i32) as u8;
                                                    }
                                                }
                                                match end33 {
                                                    Numbound::Included(e) => {
                                                        *base.add(28).cast::<u8>() = (0i32) as u8;
                                                        let vec36 = e;
                                                        let ptr36 = vec36.as_ptr().cast::<u8>();
                                                        let len36 = vec36.len();
                                                        *base.add(36).cast::<usize>() = len36;
                                                        *base.add(32).cast::<*mut u8>() =
                                                            ptr36.cast_mut();
                                                    }
                                                    Numbound::Excluded(e) => {
                                                        *base.add(28).cast::<u8>() = (1i32) as u8;
                                                        let vec37 = e;
                                                        let ptr37 = vec37.as_ptr().cast::<u8>();
                                                        let len37 = vec37.len();
                                                        *base.add(36).cast::<usize>() = len37;
                                                        *base.add(32).cast::<*mut u8>() =
                                                            ptr37.cast_mut();
                                                    }
                                                    Numbound::Unbounded => {
                                                        *base.add(28).cast::<u8>() = (2i32) as u8;
                                                    }
                                                }
                                            }
                                            DbValuePrimitive::Tsrange(e) => {
                                                *base.add(8).cast::<u8>() = (31i32) as u8;
                                                let Tsrange {
                                                    start: start38,
                                                    end: end38,
                                                } = e;
                                                match start38 {
                                                    Tsbound::Included(e) => {
                                                        *base.add(16).cast::<u8>() = (0i32) as u8;
                                                        let Timestamp {
                                                            date: date39,
                                                            time: time39,
                                                        } = e;
                                                        let Date {
                                                            year: year40,
                                                            month: month40,
                                                            day: day40,
                                                        } = date39;
                                                        *base.add(20).cast::<i32>() =
                                                            _rt::as_i32(year40);
                                                        *base.add(24).cast::<u8>() =
                                                            (_rt::as_i32(month40)) as u8;
                                                        *base.add(25).cast::<u8>() =
                                                            (_rt::as_i32(day40)) as u8;
                                                        let Time {
                                                            hour: hour41,
                                                            minute: minute41,
                                                            second: second41,
                                                            nanosecond: nanosecond41,
                                                        } = time39;
                                                        *base.add(28).cast::<u8>() =
                                                            (_rt::as_i32(hour41)) as u8;
                                                        *base.add(29).cast::<u8>() =
                                                            (_rt::as_i32(minute41)) as u8;
                                                        *base.add(30).cast::<u8>() =
                                                            (_rt::as_i32(second41)) as u8;
                                                        *base.add(32).cast::<i32>() =
                                                            _rt::as_i32(nanosecond41);
                                                    }
                                                    Tsbound::Excluded(e) => {
                                                        *base.add(16).cast::<u8>() = (1i32) as u8;
                                                        let Timestamp {
                                                            date: date42,
                                                            time: time42,
                                                        } = e;
                                                        let Date {
                                                            year: year43,
                                                            month: month43,
                                                            day: day43,
                                                        } = date42;
                                                        *base.add(20).cast::<i32>() =
                                                            _rt::as_i32(year43);
                                                        *base.add(24).cast::<u8>() =
                                                            (_rt::as_i32(month43)) as u8;
                                                        *base.add(25).cast::<u8>() =
                                                            (_rt::as_i32(day43)) as u8;
                                                        let Time {
                                                            hour: hour44,
                                                            minute: minute44,
                                                            second: second44,
                                                            nanosecond: nanosecond44,
                                                        } = time42;
                                                        *base.add(28).cast::<u8>() =
                                                            (_rt::as_i32(hour44)) as u8;
                                                        *base.add(29).cast::<u8>() =
                                                            (_rt::as_i32(minute44)) as u8;
                                                        *base.add(30).cast::<u8>() =
                                                            (_rt::as_i32(second44)) as u8;
                                                        *base.add(32).cast::<i32>() =
                                                            _rt::as_i32(nanosecond44);
                                                    }
                                                    Tsbound::Unbounded => {
                                                        *base.add(16).cast::<u8>() = (2i32) as u8;
                                                    }
                                                }
                                                match end38 {
                                                    Tsbound::Included(e) => {
                                                        *base.add(36).cast::<u8>() = (0i32) as u8;
                                                        let Timestamp {
                                                            date: date45,
                                                            time: time45,
                                                        } = e;
                                                        let Date {
                                                            year: year46,
                                                            month: month46,
                                                            day: day46,
                                                        } = date45;
                                                        *base.add(40).cast::<i32>() =
                                                            _rt::as_i32(year46);
                                                        *base.add(44).cast::<u8>() =
                                                            (_rt::as_i32(month46)) as u8;
                                                        *base.add(45).cast::<u8>() =
                                                            (_rt::as_i32(day46)) as u8;
                                                        let Time {
                                                            hour: hour47,
                                                            minute: minute47,
                                                            second: second47,
                                                            nanosecond: nanosecond47,
                                                        } = time45;
                                                        *base.add(48).cast::<u8>() =
                                                            (_rt::as_i32(hour47)) as u8;
                                                        *base.add(49).cast::<u8>() =
                                                            (_rt::as_i32(minute47)) as u8;
                                                        *base.add(50).cast::<u8>() =
                                                            (_rt::as_i32(second47)) as u8;
                                                        *base.add(52).cast::<i32>() =
                                                            _rt::as_i32(nanosecond47);
                                                    }
                                                    Tsbound::Excluded(e) => {
                                                        *base.add(36).cast::<u8>() = (1i32) as u8;
                                                        let Timestamp {
                                                            date: date48,
                                                            time: time48,
                                                        } = e;
                                                        let Date {
                                                            year: year49,
                                                            month: month49,
                                                            day: day49,
                                                        } = date48;
                                                        *base.add(40).cast::<i32>() =
                                                            _rt::as_i32(year49);
                                                        *base.add(44).cast::<u8>() =
                                                            (_rt::as_i32(month49)) as u8;
                                                        *base.add(45).cast::<u8>() =
                                                            (_rt::as_i32(day49)) as u8;
                                                        let Time {
                                                            hour: hour50,
                                                            minute: minute50,
                                                            second: second50,
                                                            nanosecond: nanosecond50,
                                                        } = time48;
                                                        *base.add(48).cast::<u8>() =
                                                            (_rt::as_i32(hour50)) as u8;
                                                        *base.add(49).cast::<u8>() =
                                                            (_rt::as_i32(minute50)) as u8;
                                                        *base.add(50).cast::<u8>() =
                                                            (_rt::as_i32(second50)) as u8;
                                                        *base.add(52).cast::<i32>() =
                                                            _rt::as_i32(nanosecond50);
                                                    }
                                                    Tsbound::Unbounded => {
                                                        *base.add(36).cast::<u8>() = (2i32) as u8;
                                                    }
                                                }
                                            }
                                            DbValuePrimitive::Tstzrange(e) => {
                                                *base.add(8).cast::<u8>() = (32i32) as u8;
                                                let Tstzrange {
                                                    start: start51,
                                                    end: end51,
                                                } = e;
                                                match start51 {
                                                    Tstzbound::Included(e) => {
                                                        *base.add(16).cast::<u8>() = (0i32) as u8;
                                                        let Timestamptz {
                                                            timestamp: timestamp52,
                                                            offset: offset52,
                                                        } = e;
                                                        let Timestamp {
                                                            date: date53,
                                                            time: time53,
                                                        } = timestamp52;
                                                        let Date {
                                                            year: year54,
                                                            month: month54,
                                                            day: day54,
                                                        } = date53;
                                                        *base.add(20).cast::<i32>() =
                                                            _rt::as_i32(year54);
                                                        *base.add(24).cast::<u8>() =
                                                            (_rt::as_i32(month54)) as u8;
                                                        *base.add(25).cast::<u8>() =
                                                            (_rt::as_i32(day54)) as u8;
                                                        let Time {
                                                            hour: hour55,
                                                            minute: minute55,
                                                            second: second55,
                                                            nanosecond: nanosecond55,
                                                        } = time53;
                                                        *base.add(28).cast::<u8>() =
                                                            (_rt::as_i32(hour55)) as u8;
                                                        *base.add(29).cast::<u8>() =
                                                            (_rt::as_i32(minute55)) as u8;
                                                        *base.add(30).cast::<u8>() =
                                                            (_rt::as_i32(second55)) as u8;
                                                        *base.add(32).cast::<i32>() =
                                                            _rt::as_i32(nanosecond55);
                                                        *base.add(36).cast::<i32>() =
                                                            _rt::as_i32(offset52);
                                                    }
                                                    Tstzbound::Excluded(e) => {
                                                        *base.add(16).cast::<u8>() = (1i32) as u8;
                                                        let Timestamptz {
                                                            timestamp: timestamp56,
                                                            offset: offset56,
                                                        } = e;
                                                        let Timestamp {
                                                            date: date57,
                                                            time: time57,
                                                        } = timestamp56;
                                                        let Date {
                                                            year: year58,
                                                            month: month58,
                                                            day: day58,
                                                        } = date57;
                                                        *base.add(20).cast::<i32>() =
                                                            _rt::as_i32(year58);
                                                        *base.add(24).cast::<u8>() =
                                                            (_rt::as_i32(month58)) as u8;
                                                        *base.add(25).cast::<u8>() =
                                                            (_rt::as_i32(day58)) as u8;
                                                        let Time {
                                                            hour: hour59,
                                                            minute: minute59,
                                                            second: second59,
                                                            nanosecond: nanosecond59,
                                                        } = time57;
                                                        *base.add(28).cast::<u8>() =
                                                            (_rt::as_i32(hour59)) as u8;
                                                        *base.add(29).cast::<u8>() =
                                                            (_rt::as_i32(minute59)) as u8;
                                                        *base.add(30).cast::<u8>() =
                                                            (_rt::as_i32(second59)) as u8;
                                                        *base.add(32).cast::<i32>() =
                                                            _rt::as_i32(nanosecond59);
                                                        *base.add(36).cast::<i32>() =
                                                            _rt::as_i32(offset56);
                                                    }
                                                    Tstzbound::Unbounded => {
                                                        *base.add(16).cast::<u8>() = (2i32) as u8;
                                                    }
                                                }
                                                match end51 {
                                                    Tstzbound::Included(e) => {
                                                        *base.add(40).cast::<u8>() = (0i32) as u8;
                                                        let Timestamptz {
                                                            timestamp: timestamp60,
                                                            offset: offset60,
                                                        } = e;
                                                        let Timestamp {
                                                            date: date61,
                                                            time: time61,
                                                        } = timestamp60;
                                                        let Date {
                                                            year: year62,
                                                            month: month62,
                                                            day: day62,
                                                        } = date61;
                                                        *base.add(44).cast::<i32>() =
                                                            _rt::as_i32(year62);
                                                        *base.add(48).cast::<u8>() =
                                                            (_rt::as_i32(month62)) as u8;
                                                        *base.add(49).cast::<u8>() =
                                                            (_rt::as_i32(day62)) as u8;
                                                        let Time {
                                                            hour: hour63,
                                                            minute: minute63,
                                                            second: second63,
                                                            nanosecond: nanosecond63,
                                                        } = time61;
                                                        *base.add(52).cast::<u8>() =
                                                            (_rt::as_i32(hour63)) as u8;
                                                        *base.add(53).cast::<u8>() =
                                                            (_rt::as_i32(minute63)) as u8;
                                                        *base.add(54).cast::<u8>() =
                                                            (_rt::as_i32(second63)) as u8;
                                                        *base.add(56).cast::<i32>() =
                                                            _rt::as_i32(nanosecond63);
                                                        *base.add(60).cast::<i32>() =
                                                            _rt::as_i32(offset60);
                                                    }
                                                    Tstzbound::Excluded(e) => {
                                                        *base.add(40).cast::<u8>() = (1i32) as u8;
                                                        let Timestamptz {
                                                            timestamp: timestamp64,
                                                            offset: offset64,
                                                        } = e;
                                                        let Timestamp {
                                                            date: date65,
                                                            time: time65,
                                                        } = timestamp64;
                                                        let Date {
                                                            year: year66,
                                                            month: month66,
                                                            day: day66,
                                                        } = date65;
                                                        *base.add(44).cast::<i32>() =
                                                            _rt::as_i32(year66);
                                                        *base.add(48).cast::<u8>() =
                                                            (_rt::as_i32(month66)) as u8;
                                                        *base.add(49).cast::<u8>() =
                                                            (_rt::as_i32(day66)) as u8;
                                                        let Time {
                                                            hour: hour67,
                                                            minute: minute67,
                                                            second: second67,
                                                            nanosecond: nanosecond67,
                                                        } = time65;
                                                        *base.add(52).cast::<u8>() =
                                                            (_rt::as_i32(hour67)) as u8;
                                                        *base.add(53).cast::<u8>() =
                                                            (_rt::as_i32(minute67)) as u8;
                                                        *base.add(54).cast::<u8>() =
                                                            (_rt::as_i32(second67)) as u8;
                                                        *base.add(56).cast::<i32>() =
                                                            _rt::as_i32(nanosecond67);
                                                        *base.add(60).cast::<i32>() =
                                                            _rt::as_i32(offset64);
                                                    }
                                                    Tstzbound::Unbounded => {
                                                        *base.add(40).cast::<u8>() = (2i32) as u8;
                                                    }
                                                }
                                            }
                                            DbValuePrimitive::Daterange(e) => {
                                                *base.add(8).cast::<u8>() = (33i32) as u8;
                                                let Daterange {
                                                    start: start68,
                                                    end: end68,
                                                } = e;
                                                match start68 {
                                                    Datebound::Included(e) => {
                                                        *base.add(16).cast::<u8>() = (0i32) as u8;
                                                        let Date {
                                                            year: year69,
                                                            month: month69,
                                                            day: day69,
                                                        } = e;
                                                        *base.add(20).cast::<i32>() =
                                                            _rt::as_i32(year69);
                                                        *base.add(24).cast::<u8>() =
                                                            (_rt::as_i32(month69)) as u8;
                                                        *base.add(25).cast::<u8>() =
                                                            (_rt::as_i32(day69)) as u8;
                                                    }
                                                    Datebound::Excluded(e) => {
                                                        *base.add(16).cast::<u8>() = (1i32) as u8;
                                                        let Date {
                                                            year: year70,
                                                            month: month70,
                                                            day: day70,
                                                        } = e;
                                                        *base.add(20).cast::<i32>() =
                                                            _rt::as_i32(year70);
                                                        *base.add(24).cast::<u8>() =
                                                            (_rt::as_i32(month70)) as u8;
                                                        *base.add(25).cast::<u8>() =
                                                            (_rt::as_i32(day70)) as u8;
                                                    }
                                                    Datebound::Unbounded => {
                                                        *base.add(16).cast::<u8>() = (2i32) as u8;
                                                    }
                                                }
                                                match end68 {
                                                    Datebound::Included(e) => {
                                                        *base.add(28).cast::<u8>() = (0i32) as u8;
                                                        let Date {
                                                            year: year71,
                                                            month: month71,
                                                            day: day71,
                                                        } = e;
                                                        *base.add(32).cast::<i32>() =
                                                            _rt::as_i32(year71);
                                                        *base.add(36).cast::<u8>() =
                                                            (_rt::as_i32(month71)) as u8;
                                                        *base.add(37).cast::<u8>() =
                                                            (_rt::as_i32(day71)) as u8;
                                                    }
                                                    Datebound::Excluded(e) => {
                                                        *base.add(28).cast::<u8>() = (1i32) as u8;
                                                        let Date {
                                                            year: year72,
                                                            month: month72,
                                                            day: day72,
                                                        } = e;
                                                        *base.add(32).cast::<i32>() =
                                                            _rt::as_i32(year72);
                                                        *base.add(36).cast::<u8>() =
                                                            (_rt::as_i32(month72)) as u8;
                                                        *base.add(37).cast::<u8>() =
                                                            (_rt::as_i32(day72)) as u8;
                                                    }
                                                    Datebound::Unbounded => {
                                                        *base.add(28).cast::<u8>() = (2i32) as u8;
                                                    }
                                                }
                                            }
                                            DbValuePrimitive::Money(e) => {
                                                *base.add(8).cast::<u8>() = (34i32) as u8;
                                                *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            DbValuePrimitive::Oid(e) => {
                                                *base.add(8).cast::<u8>() = (35i32) as u8;
                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            DbValuePrimitive::Enumeration(e) => {
                                                *base.add(8).cast::<u8>() = (36i32) as u8;
                                                let Enumeration {
                                                    name: name73,
                                                    value: value73,
                                                } = e;
                                                let vec74 = name73;
                                                let ptr74 = vec74.as_ptr().cast::<u8>();
                                                let len74 = vec74.len();
                                                *base.add(20).cast::<usize>() = len74;
                                                *base.add(16).cast::<*mut u8>() = ptr74.cast_mut();
                                                let vec75 = value73;
                                                let ptr75 = vec75.as_ptr().cast::<u8>();
                                                let len75 = vec75.len();
                                                *base.add(28).cast::<usize>() = len75;
                                                *base.add(24).cast::<*mut u8>() = ptr75.cast_mut();
                                            }
                                            DbValuePrimitive::Null => {
                                                *base.add(8).cast::<u8>() = (37i32) as u8;
                                            }
                                        }
                                    }
                                    DbValue::Array(e) => {
                                        *base.add(0).cast::<u8>() = (1i32) as u8;
                                        let vec151 = e;
                                        let len151 = vec151.len();
                                        let layout151 =
                                            _rt::alloc::Layout::from_size_align_unchecked(
                                                vec151.len() * 56,
                                                8,
                                            );
                                        let result151 = if layout151.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout151).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout151);
                                            }
                                            ptr
                                        } else {
                                            {
                                                ::core::ptr::null_mut()
                                            }
                                        };
                                        for (i, e) in vec151.into_iter().enumerate() {
                                            let base = result151.add(i * 56);
                                            {
                                                match e {
                                                    DbValuePrimitive::Character(e) => {
                                                        *base.add(0).cast::<u8>() = (0i32) as u8;
                                                        *base.add(8).cast::<u8>() =
                                                            (_rt::as_i32(e)) as u8;
                                                    }
                                                    DbValuePrimitive::Int2(e) => {
                                                        *base.add(0).cast::<u8>() = (1i32) as u8;
                                                        *base.add(8).cast::<u16>() =
                                                            (_rt::as_i32(e)) as u16;
                                                    }
                                                    DbValuePrimitive::Int4(e) => {
                                                        *base.add(0).cast::<u8>() = (2i32) as u8;
                                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    DbValuePrimitive::Int8(e) => {
                                                        *base.add(0).cast::<u8>() = (3i32) as u8;
                                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                    }
                                                    DbValuePrimitive::Float4(e) => {
                                                        *base.add(0).cast::<u8>() = (4i32) as u8;
                                                        *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                                    }
                                                    DbValuePrimitive::Float8(e) => {
                                                        *base.add(0).cast::<u8>() = (5i32) as u8;
                                                        *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                                    }
                                                    DbValuePrimitive::Numeric(e) => {
                                                        *base.add(0).cast::<u8>() = (6i32) as u8;
                                                        let vec76 = e;
                                                        let ptr76 = vec76.as_ptr().cast::<u8>();
                                                        let len76 = vec76.len();
                                                        *base.add(12).cast::<usize>() = len76;
                                                        *base.add(8).cast::<*mut u8>() =
                                                            ptr76.cast_mut();
                                                    }
                                                    DbValuePrimitive::Boolean(e) => {
                                                        *base.add(0).cast::<u8>() = (7i32) as u8;
                                                        *base.add(8).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        })
                                                            as u8;
                                                    }
                                                    DbValuePrimitive::Text(e) => {
                                                        *base.add(0).cast::<u8>() = (8i32) as u8;
                                                        let vec77 = e;
                                                        let ptr77 = vec77.as_ptr().cast::<u8>();
                                                        let len77 = vec77.len();
                                                        *base.add(12).cast::<usize>() = len77;
                                                        *base.add(8).cast::<*mut u8>() =
                                                            ptr77.cast_mut();
                                                    }
                                                    DbValuePrimitive::Varchar(e) => {
                                                        *base.add(0).cast::<u8>() = (9i32) as u8;
                                                        let vec78 = e;
                                                        let ptr78 = vec78.as_ptr().cast::<u8>();
                                                        let len78 = vec78.len();
                                                        *base.add(12).cast::<usize>() = len78;
                                                        *base.add(8).cast::<*mut u8>() =
                                                            ptr78.cast_mut();
                                                    }
                                                    DbValuePrimitive::Bpchar(e) => {
                                                        *base.add(0).cast::<u8>() = (10i32) as u8;
                                                        let vec79 = e;
                                                        let ptr79 = vec79.as_ptr().cast::<u8>();
                                                        let len79 = vec79.len();
                                                        *base.add(12).cast::<usize>() = len79;
                                                        *base.add(8).cast::<*mut u8>() =
                                                            ptr79.cast_mut();
                                                    }
                                                    DbValuePrimitive::Timestamp(e) => {
                                                        *base.add(0).cast::<u8>() = (11i32) as u8;
                                                        let Timestamp {
                                                            date: date80,
                                                            time: time80,
                                                        } = e;
                                                        let Date {
                                                            year: year81,
                                                            month: month81,
                                                            day: day81,
                                                        } = date80;
                                                        *base.add(8).cast::<i32>() =
                                                            _rt::as_i32(year81);
                                                        *base.add(12).cast::<u8>() =
                                                            (_rt::as_i32(month81)) as u8;
                                                        *base.add(13).cast::<u8>() =
                                                            (_rt::as_i32(day81)) as u8;
                                                        let Time {
                                                            hour: hour82,
                                                            minute: minute82,
                                                            second: second82,
                                                            nanosecond: nanosecond82,
                                                        } = time80;
                                                        *base.add(16).cast::<u8>() =
                                                            (_rt::as_i32(hour82)) as u8;
                                                        *base.add(17).cast::<u8>() =
                                                            (_rt::as_i32(minute82)) as u8;
                                                        *base.add(18).cast::<u8>() =
                                                            (_rt::as_i32(second82)) as u8;
                                                        *base.add(20).cast::<i32>() =
                                                            _rt::as_i32(nanosecond82);
                                                    }
                                                    DbValuePrimitive::Timestamptz(e) => {
                                                        *base.add(0).cast::<u8>() = (12i32) as u8;
                                                        let Timestamptz {
                                                            timestamp: timestamp83,
                                                            offset: offset83,
                                                        } = e;
                                                        let Timestamp {
                                                            date: date84,
                                                            time: time84,
                                                        } = timestamp83;
                                                        let Date {
                                                            year: year85,
                                                            month: month85,
                                                            day: day85,
                                                        } = date84;
                                                        *base.add(8).cast::<i32>() =
                                                            _rt::as_i32(year85);
                                                        *base.add(12).cast::<u8>() =
                                                            (_rt::as_i32(month85)) as u8;
                                                        *base.add(13).cast::<u8>() =
                                                            (_rt::as_i32(day85)) as u8;
                                                        let Time {
                                                            hour: hour86,
                                                            minute: minute86,
                                                            second: second86,
                                                            nanosecond: nanosecond86,
                                                        } = time84;
                                                        *base.add(16).cast::<u8>() =
                                                            (_rt::as_i32(hour86)) as u8;
                                                        *base.add(17).cast::<u8>() =
                                                            (_rt::as_i32(minute86)) as u8;
                                                        *base.add(18).cast::<u8>() =
                                                            (_rt::as_i32(second86)) as u8;
                                                        *base.add(20).cast::<i32>() =
                                                            _rt::as_i32(nanosecond86);
                                                        *base.add(24).cast::<i32>() =
                                                            _rt::as_i32(offset83);
                                                    }
                                                    DbValuePrimitive::Date(e) => {
                                                        *base.add(0).cast::<u8>() = (13i32) as u8;
                                                        let Date {
                                                            year: year87,
                                                            month: month87,
                                                            day: day87,
                                                        } = e;
                                                        *base.add(8).cast::<i32>() =
                                                            _rt::as_i32(year87);
                                                        *base.add(12).cast::<u8>() =
                                                            (_rt::as_i32(month87)) as u8;
                                                        *base.add(13).cast::<u8>() =
                                                            (_rt::as_i32(day87)) as u8;
                                                    }
                                                    DbValuePrimitive::Time(e) => {
                                                        *base.add(0).cast::<u8>() = (14i32) as u8;
                                                        let Time {
                                                            hour: hour88,
                                                            minute: minute88,
                                                            second: second88,
                                                            nanosecond: nanosecond88,
                                                        } = e;
                                                        *base.add(8).cast::<u8>() =
                                                            (_rt::as_i32(hour88)) as u8;
                                                        *base.add(9).cast::<u8>() =
                                                            (_rt::as_i32(minute88)) as u8;
                                                        *base.add(10).cast::<u8>() =
                                                            (_rt::as_i32(second88)) as u8;
                                                        *base.add(12).cast::<i32>() =
                                                            _rt::as_i32(nanosecond88);
                                                    }
                                                    DbValuePrimitive::Timetz(e) => {
                                                        *base.add(0).cast::<u8>() = (15i32) as u8;
                                                        let Timetz {
                                                            time: time89,
                                                            offset: offset89,
                                                        } = e;
                                                        let Time {
                                                            hour: hour90,
                                                            minute: minute90,
                                                            second: second90,
                                                            nanosecond: nanosecond90,
                                                        } = time89;
                                                        *base.add(8).cast::<u8>() =
                                                            (_rt::as_i32(hour90)) as u8;
                                                        *base.add(9).cast::<u8>() =
                                                            (_rt::as_i32(minute90)) as u8;
                                                        *base.add(10).cast::<u8>() =
                                                            (_rt::as_i32(second90)) as u8;
                                                        *base.add(12).cast::<i32>() =
                                                            _rt::as_i32(nanosecond90);
                                                        *base.add(16).cast::<i32>() =
                                                            _rt::as_i32(offset89);
                                                    }
                                                    DbValuePrimitive::Interval(e) => {
                                                        *base.add(0).cast::<u8>() = (16i32) as u8;
                                                        let Interval {
                                                            months: months91,
                                                            days: days91,
                                                            microseconds: microseconds91,
                                                        } = e;
                                                        *base.add(8).cast::<i32>() =
                                                            _rt::as_i32(months91);
                                                        *base.add(12).cast::<i32>() =
                                                            _rt::as_i32(days91);
                                                        *base.add(16).cast::<i64>() =
                                                            _rt::as_i64(microseconds91);
                                                    }
                                                    DbValuePrimitive::Bytea(e) => {
                                                        *base.add(0).cast::<u8>() = (17i32) as u8;
                                                        let vec92 = e;
                                                        let ptr92 = vec92.as_ptr().cast::<u8>();
                                                        let len92 = vec92.len();
                                                        *base.add(12).cast::<usize>() = len92;
                                                        *base.add(8).cast::<*mut u8>() =
                                                            ptr92.cast_mut();
                                                    }
                                                    DbValuePrimitive::Json(e) => {
                                                        *base.add(0).cast::<u8>() = (18i32) as u8;
                                                        let vec93 = e;
                                                        let ptr93 = vec93.as_ptr().cast::<u8>();
                                                        let len93 = vec93.len();
                                                        *base.add(12).cast::<usize>() = len93;
                                                        *base.add(8).cast::<*mut u8>() =
                                                            ptr93.cast_mut();
                                                    }
                                                    DbValuePrimitive::Jsonb(e) => {
                                                        *base.add(0).cast::<u8>() = (19i32) as u8;
                                                        let vec94 = e;
                                                        let ptr94 = vec94.as_ptr().cast::<u8>();
                                                        let len94 = vec94.len();
                                                        *base.add(12).cast::<usize>() = len94;
                                                        *base.add(8).cast::<*mut u8>() =
                                                            ptr94.cast_mut();
                                                    }
                                                    DbValuePrimitive::Jsonpath(e) => {
                                                        *base.add(0).cast::<u8>() = (20i32) as u8;
                                                        let vec95 = e;
                                                        let ptr95 = vec95.as_ptr().cast::<u8>();
                                                        let len95 = vec95.len();
                                                        *base.add(12).cast::<usize>() = len95;
                                                        *base.add(8).cast::<*mut u8>() =
                                                            ptr95.cast_mut();
                                                    }
                                                    DbValuePrimitive::Xml(e) => {
                                                        *base.add(0).cast::<u8>() = (21i32) as u8;
                                                        let vec96 = e;
                                                        let ptr96 = vec96.as_ptr().cast::<u8>();
                                                        let len96 = vec96.len();
                                                        *base.add(12).cast::<usize>() = len96;
                                                        *base.add(8).cast::<*mut u8>() =
                                                            ptr96.cast_mut();
                                                    }
                                                    DbValuePrimitive::Uuid(e) => {
                                                        *base.add(0).cast::<u8>() = (22i32) as u8;
                                                        let Uuid {
                                                            high_bits: high_bits97,
                                                            low_bits: low_bits97,
                                                        } = e;
                                                        *base.add(8).cast::<i64>() =
                                                            _rt::as_i64(high_bits97);
                                                        *base.add(16).cast::<i64>() =
                                                            _rt::as_i64(low_bits97);
                                                    }
                                                    DbValuePrimitive::Inet(e) => {
                                                        *base.add(0).cast::<u8>() = (23i32) as u8;
                                                        match e {
                                                            IpAddress::Ipv4(e) => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (0i32) as u8;
                                                                let (t98_0, t98_1, t98_2, t98_3) =
                                                                    e;
                                                                *base.add(10).cast::<u8>() =
                                                                    (_rt::as_i32(t98_0)) as u8;
                                                                *base.add(11).cast::<u8>() =
                                                                    (_rt::as_i32(t98_1)) as u8;
                                                                *base.add(12).cast::<u8>() =
                                                                    (_rt::as_i32(t98_2)) as u8;
                                                                *base.add(13).cast::<u8>() =
                                                                    (_rt::as_i32(t98_3)) as u8;
                                                            }
                                                            IpAddress::Ipv6(e) => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                let (
                                                                    t99_0,
                                                                    t99_1,
                                                                    t99_2,
                                                                    t99_3,
                                                                    t99_4,
                                                                    t99_5,
                                                                    t99_6,
                                                                    t99_7,
                                                                ) = e;
                                                                *base.add(10).cast::<u16>() =
                                                                    (_rt::as_i32(t99_0)) as u16;
                                                                *base.add(12).cast::<u16>() =
                                                                    (_rt::as_i32(t99_1)) as u16;
                                                                *base.add(14).cast::<u16>() =
                                                                    (_rt::as_i32(t99_2)) as u16;
                                                                *base.add(16).cast::<u16>() =
                                                                    (_rt::as_i32(t99_3)) as u16;
                                                                *base.add(18).cast::<u16>() =
                                                                    (_rt::as_i32(t99_4)) as u16;
                                                                *base.add(20).cast::<u16>() =
                                                                    (_rt::as_i32(t99_5)) as u16;
                                                                *base.add(22).cast::<u16>() =
                                                                    (_rt::as_i32(t99_6)) as u16;
                                                                *base.add(24).cast::<u16>() =
                                                                    (_rt::as_i32(t99_7)) as u16;
                                                            }
                                                        }
                                                    }
                                                    DbValuePrimitive::Cidr(e) => {
                                                        *base.add(0).cast::<u8>() = (24i32) as u8;
                                                        match e {
                                                            IpAddress::Ipv4(e) => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (0i32) as u8;
                                                                let (
                                                                    t100_0,
                                                                    t100_1,
                                                                    t100_2,
                                                                    t100_3,
                                                                ) = e;
                                                                *base.add(10).cast::<u8>() =
                                                                    (_rt::as_i32(t100_0)) as u8;
                                                                *base.add(11).cast::<u8>() =
                                                                    (_rt::as_i32(t100_1)) as u8;
                                                                *base.add(12).cast::<u8>() =
                                                                    (_rt::as_i32(t100_2)) as u8;
                                                                *base.add(13).cast::<u8>() =
                                                                    (_rt::as_i32(t100_3)) as u8;
                                                            }
                                                            IpAddress::Ipv6(e) => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                let (
                                                                    t101_0,
                                                                    t101_1,
                                                                    t101_2,
                                                                    t101_3,
                                                                    t101_4,
                                                                    t101_5,
                                                                    t101_6,
                                                                    t101_7,
                                                                ) = e;
                                                                *base.add(10).cast::<u16>() =
                                                                    (_rt::as_i32(t101_0)) as u16;
                                                                *base.add(12).cast::<u16>() =
                                                                    (_rt::as_i32(t101_1)) as u16;
                                                                *base.add(14).cast::<u16>() =
                                                                    (_rt::as_i32(t101_2)) as u16;
                                                                *base.add(16).cast::<u16>() =
                                                                    (_rt::as_i32(t101_3)) as u16;
                                                                *base.add(18).cast::<u16>() =
                                                                    (_rt::as_i32(t101_4)) as u16;
                                                                *base.add(20).cast::<u16>() =
                                                                    (_rt::as_i32(t101_5)) as u16;
                                                                *base.add(22).cast::<u16>() =
                                                                    (_rt::as_i32(t101_6)) as u16;
                                                                *base.add(24).cast::<u16>() =
                                                                    (_rt::as_i32(t101_7)) as u16;
                                                            }
                                                        }
                                                    }
                                                    DbValuePrimitive::Macaddr(e) => {
                                                        *base.add(0).cast::<u8>() = (25i32) as u8;
                                                        let MacAddress { octets: octets102 } = e;
                                                        let (
                                                            t103_0,
                                                            t103_1,
                                                            t103_2,
                                                            t103_3,
                                                            t103_4,
                                                            t103_5,
                                                        ) = octets102;
                                                        *base.add(8).cast::<u8>() =
                                                            (_rt::as_i32(t103_0)) as u8;
                                                        *base.add(9).cast::<u8>() =
                                                            (_rt::as_i32(t103_1)) as u8;
                                                        *base.add(10).cast::<u8>() =
                                                            (_rt::as_i32(t103_2)) as u8;
                                                        *base.add(11).cast::<u8>() =
                                                            (_rt::as_i32(t103_3)) as u8;
                                                        *base.add(12).cast::<u8>() =
                                                            (_rt::as_i32(t103_4)) as u8;
                                                        *base.add(13).cast::<u8>() =
                                                            (_rt::as_i32(t103_5)) as u8;
                                                    }
                                                    DbValuePrimitive::Bit(e) => {
                                                        *base.add(0).cast::<u8>() = (26i32) as u8;
                                                        let vec104 = e;
                                                        let len104 = vec104.len();
                                                        let layout104 = _rt::alloc::Layout::from_size_align_unchecked(vec104.len() * 1, 1);
                                                        let result104 = if layout104.size() != 0 {
                                                            let ptr = _rt::alloc::alloc(layout104)
                                                                .cast::<u8>();
                                                            if ptr.is_null() {
                                                                _rt::alloc::handle_alloc_error(
                                                                    layout104,
                                                                );
                                                            }
                                                            ptr
                                                        } else {
                                                            {
                                                                ::core::ptr::null_mut()
                                                            }
                                                        };
                                                        for (i, e) in vec104.into_iter().enumerate()
                                                        {
                                                            let base = result104.add(i * 1);
                                                            {
                                                                *base.add(0).cast::<u8>() = (match e
                                                                {
                                                                    true => 1,
                                                                    false => 0,
                                                                })
                                                                    as u8;
                                                            }
                                                        }
                                                        *base.add(12).cast::<usize>() = len104;
                                                        *base.add(8).cast::<*mut u8>() = result104;
                                                        cleanup_list.extend_from_slice(&[(
                                                            result104, layout104,
                                                        )]);
                                                    }
                                                    DbValuePrimitive::Varbit(e) => {
                                                        *base.add(0).cast::<u8>() = (27i32) as u8;
                                                        let vec105 = e;
                                                        let len105 = vec105.len();
                                                        let layout105 = _rt::alloc::Layout::from_size_align_unchecked(vec105.len() * 1, 1);
                                                        let result105 = if layout105.size() != 0 {
                                                            let ptr = _rt::alloc::alloc(layout105)
                                                                .cast::<u8>();
                                                            if ptr.is_null() {
                                                                _rt::alloc::handle_alloc_error(
                                                                    layout105,
                                                                );
                                                            }
                                                            ptr
                                                        } else {
                                                            {
                                                                ::core::ptr::null_mut()
                                                            }
                                                        };
                                                        for (i, e) in vec105.into_iter().enumerate()
                                                        {
                                                            let base = result105.add(i * 1);
                                                            {
                                                                *base.add(0).cast::<u8>() = (match e
                                                                {
                                                                    true => 1,
                                                                    false => 0,
                                                                })
                                                                    as u8;
                                                            }
                                                        }
                                                        *base.add(12).cast::<usize>() = len105;
                                                        *base.add(8).cast::<*mut u8>() = result105;
                                                        cleanup_list.extend_from_slice(&[(
                                                            result105, layout105,
                                                        )]);
                                                    }
                                                    DbValuePrimitive::Int4range(e) => {
                                                        *base.add(0).cast::<u8>() = (28i32) as u8;
                                                        let Int4range {
                                                            start: start106,
                                                            end: end106,
                                                        } = e;
                                                        match start106 {
                                                            Int4bound::Included(e) => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (0i32) as u8;
                                                                *base.add(12).cast::<i32>() =
                                                                    _rt::as_i32(e);
                                                            }
                                                            Int4bound::Excluded(e) => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                *base.add(12).cast::<i32>() =
                                                                    _rt::as_i32(e);
                                                            }
                                                            Int4bound::Unbounded => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (2i32) as u8;
                                                            }
                                                        }
                                                        match end106 {
                                                            Int4bound::Included(e) => {
                                                                *base.add(16).cast::<u8>() =
                                                                    (0i32) as u8;
                                                                *base.add(20).cast::<i32>() =
                                                                    _rt::as_i32(e);
                                                            }
                                                            Int4bound::Excluded(e) => {
                                                                *base.add(16).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                *base.add(20).cast::<i32>() =
                                                                    _rt::as_i32(e);
                                                            }
                                                            Int4bound::Unbounded => {
                                                                *base.add(16).cast::<u8>() =
                                                                    (2i32) as u8;
                                                            }
                                                        }
                                                    }
                                                    DbValuePrimitive::Int8range(e) => {
                                                        *base.add(0).cast::<u8>() = (29i32) as u8;
                                                        let Int8range {
                                                            start: start107,
                                                            end: end107,
                                                        } = e;
                                                        match start107 {
                                                            Int8bound::Included(e) => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (0i32) as u8;
                                                                *base.add(16).cast::<i64>() =
                                                                    _rt::as_i64(e);
                                                            }
                                                            Int8bound::Excluded(e) => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                *base.add(16).cast::<i64>() =
                                                                    _rt::as_i64(e);
                                                            }
                                                            Int8bound::Unbounded => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (2i32) as u8;
                                                            }
                                                        }
                                                        match end107 {
                                                            Int8bound::Included(e) => {
                                                                *base.add(24).cast::<u8>() =
                                                                    (0i32) as u8;
                                                                *base.add(32).cast::<i64>() =
                                                                    _rt::as_i64(e);
                                                            }
                                                            Int8bound::Excluded(e) => {
                                                                *base.add(24).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                *base.add(32).cast::<i64>() =
                                                                    _rt::as_i64(e);
                                                            }
                                                            Int8bound::Unbounded => {
                                                                *base.add(24).cast::<u8>() =
                                                                    (2i32) as u8;
                                                            }
                                                        }
                                                    }
                                                    DbValuePrimitive::Numrange(e) => {
                                                        *base.add(0).cast::<u8>() = (30i32) as u8;
                                                        let Numrange {
                                                            start: start108,
                                                            end: end108,
                                                        } = e;
                                                        match start108 {
                                                            Numbound::Included(e) => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (0i32) as u8;
                                                                let vec109 = e;
                                                                let ptr109 =
                                                                    vec109.as_ptr().cast::<u8>();
                                                                let len109 = vec109.len();
                                                                *base.add(16).cast::<usize>() =
                                                                    len109;
                                                                *base.add(12).cast::<*mut u8>() =
                                                                    ptr109.cast_mut();
                                                            }
                                                            Numbound::Excluded(e) => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                let vec110 = e;
                                                                let ptr110 =
                                                                    vec110.as_ptr().cast::<u8>();
                                                                let len110 = vec110.len();
                                                                *base.add(16).cast::<usize>() =
                                                                    len110;
                                                                *base.add(12).cast::<*mut u8>() =
                                                                    ptr110.cast_mut();
                                                            }
                                                            Numbound::Unbounded => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (2i32) as u8;
                                                            }
                                                        }
                                                        match end108 {
                                                            Numbound::Included(e) => {
                                                                *base.add(20).cast::<u8>() =
                                                                    (0i32) as u8;
                                                                let vec111 = e;
                                                                let ptr111 =
                                                                    vec111.as_ptr().cast::<u8>();
                                                                let len111 = vec111.len();
                                                                *base.add(28).cast::<usize>() =
                                                                    len111;
                                                                *base.add(24).cast::<*mut u8>() =
                                                                    ptr111.cast_mut();
                                                            }
                                                            Numbound::Excluded(e) => {
                                                                *base.add(20).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                let vec112 = e;
                                                                let ptr112 =
                                                                    vec112.as_ptr().cast::<u8>();
                                                                let len112 = vec112.len();
                                                                *base.add(28).cast::<usize>() =
                                                                    len112;
                                                                *base.add(24).cast::<*mut u8>() =
                                                                    ptr112.cast_mut();
                                                            }
                                                            Numbound::Unbounded => {
                                                                *base.add(20).cast::<u8>() =
                                                                    (2i32) as u8;
                                                            }
                                                        }
                                                    }
                                                    DbValuePrimitive::Tsrange(e) => {
                                                        *base.add(0).cast::<u8>() = (31i32) as u8;
                                                        let Tsrange {
                                                            start: start113,
                                                            end: end113,
                                                        } = e;
                                                        match start113 {
                                                            Tsbound::Included(e) => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (0i32) as u8;
                                                                let Timestamp {
                                                                    date: date114,
                                                                    time: time114,
                                                                } = e;
                                                                let Date {
                                                                    year: year115,
                                                                    month: month115,
                                                                    day: day115,
                                                                } = date114;
                                                                *base.add(12).cast::<i32>() =
                                                                    _rt::as_i32(year115);
                                                                *base.add(16).cast::<u8>() =
                                                                    (_rt::as_i32(month115)) as u8;
                                                                *base.add(17).cast::<u8>() =
                                                                    (_rt::as_i32(day115)) as u8;
                                                                let Time {
                                                                    hour: hour116,
                                                                    minute: minute116,
                                                                    second: second116,
                                                                    nanosecond: nanosecond116,
                                                                } = time114;
                                                                *base.add(20).cast::<u8>() =
                                                                    (_rt::as_i32(hour116)) as u8;
                                                                *base.add(21).cast::<u8>() =
                                                                    (_rt::as_i32(minute116)) as u8;
                                                                *base.add(22).cast::<u8>() =
                                                                    (_rt::as_i32(second116)) as u8;
                                                                *base.add(24).cast::<i32>() =
                                                                    _rt::as_i32(nanosecond116);
                                                            }
                                                            Tsbound::Excluded(e) => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                let Timestamp {
                                                                    date: date117,
                                                                    time: time117,
                                                                } = e;
                                                                let Date {
                                                                    year: year118,
                                                                    month: month118,
                                                                    day: day118,
                                                                } = date117;
                                                                *base.add(12).cast::<i32>() =
                                                                    _rt::as_i32(year118);
                                                                *base.add(16).cast::<u8>() =
                                                                    (_rt::as_i32(month118)) as u8;
                                                                *base.add(17).cast::<u8>() =
                                                                    (_rt::as_i32(day118)) as u8;
                                                                let Time {
                                                                    hour: hour119,
                                                                    minute: minute119,
                                                                    second: second119,
                                                                    nanosecond: nanosecond119,
                                                                } = time117;
                                                                *base.add(20).cast::<u8>() =
                                                                    (_rt::as_i32(hour119)) as u8;
                                                                *base.add(21).cast::<u8>() =
                                                                    (_rt::as_i32(minute119)) as u8;
                                                                *base.add(22).cast::<u8>() =
                                                                    (_rt::as_i32(second119)) as u8;
                                                                *base.add(24).cast::<i32>() =
                                                                    _rt::as_i32(nanosecond119);
                                                            }
                                                            Tsbound::Unbounded => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (2i32) as u8;
                                                            }
                                                        }
                                                        match end113 {
                                                            Tsbound::Included(e) => {
                                                                *base.add(28).cast::<u8>() =
                                                                    (0i32) as u8;
                                                                let Timestamp {
                                                                    date: date120,
                                                                    time: time120,
                                                                } = e;
                                                                let Date {
                                                                    year: year121,
                                                                    month: month121,
                                                                    day: day121,
                                                                } = date120;
                                                                *base.add(32).cast::<i32>() =
                                                                    _rt::as_i32(year121);
                                                                *base.add(36).cast::<u8>() =
                                                                    (_rt::as_i32(month121)) as u8;
                                                                *base.add(37).cast::<u8>() =
                                                                    (_rt::as_i32(day121)) as u8;
                                                                let Time {
                                                                    hour: hour122,
                                                                    minute: minute122,
                                                                    second: second122,
                                                                    nanosecond: nanosecond122,
                                                                } = time120;
                                                                *base.add(40).cast::<u8>() =
                                                                    (_rt::as_i32(hour122)) as u8;
                                                                *base.add(41).cast::<u8>() =
                                                                    (_rt::as_i32(minute122)) as u8;
                                                                *base.add(42).cast::<u8>() =
                                                                    (_rt::as_i32(second122)) as u8;
                                                                *base.add(44).cast::<i32>() =
                                                                    _rt::as_i32(nanosecond122);
                                                            }
                                                            Tsbound::Excluded(e) => {
                                                                *base.add(28).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                let Timestamp {
                                                                    date: date123,
                                                                    time: time123,
                                                                } = e;
                                                                let Date {
                                                                    year: year124,
                                                                    month: month124,
                                                                    day: day124,
                                                                } = date123;
                                                                *base.add(32).cast::<i32>() =
                                                                    _rt::as_i32(year124);
                                                                *base.add(36).cast::<u8>() =
                                                                    (_rt::as_i32(month124)) as u8;
                                                                *base.add(37).cast::<u8>() =
                                                                    (_rt::as_i32(day124)) as u8;
                                                                let Time {
                                                                    hour: hour125,
                                                                    minute: minute125,
                                                                    second: second125,
                                                                    nanosecond: nanosecond125,
                                                                } = time123;
                                                                *base.add(40).cast::<u8>() =
                                                                    (_rt::as_i32(hour125)) as u8;
                                                                *base.add(41).cast::<u8>() =
                                                                    (_rt::as_i32(minute125)) as u8;
                                                                *base.add(42).cast::<u8>() =
                                                                    (_rt::as_i32(second125)) as u8;
                                                                *base.add(44).cast::<i32>() =
                                                                    _rt::as_i32(nanosecond125);
                                                            }
                                                            Tsbound::Unbounded => {
                                                                *base.add(28).cast::<u8>() =
                                                                    (2i32) as u8;
                                                            }
                                                        }
                                                    }
                                                    DbValuePrimitive::Tstzrange(e) => {
                                                        *base.add(0).cast::<u8>() = (32i32) as u8;
                                                        let Tstzrange {
                                                            start: start126,
                                                            end: end126,
                                                        } = e;
                                                        match start126 {
                                                            Tstzbound::Included(e) => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (0i32) as u8;
                                                                let Timestamptz {
                                                                    timestamp: timestamp127,
                                                                    offset: offset127,
                                                                } = e;
                                                                let Timestamp {
                                                                    date: date128,
                                                                    time: time128,
                                                                } = timestamp127;
                                                                let Date {
                                                                    year: year129,
                                                                    month: month129,
                                                                    day: day129,
                                                                } = date128;
                                                                *base.add(12).cast::<i32>() =
                                                                    _rt::as_i32(year129);
                                                                *base.add(16).cast::<u8>() =
                                                                    (_rt::as_i32(month129)) as u8;
                                                                *base.add(17).cast::<u8>() =
                                                                    (_rt::as_i32(day129)) as u8;
                                                                let Time {
                                                                    hour: hour130,
                                                                    minute: minute130,
                                                                    second: second130,
                                                                    nanosecond: nanosecond130,
                                                                } = time128;
                                                                *base.add(20).cast::<u8>() =
                                                                    (_rt::as_i32(hour130)) as u8;
                                                                *base.add(21).cast::<u8>() =
                                                                    (_rt::as_i32(minute130)) as u8;
                                                                *base.add(22).cast::<u8>() =
                                                                    (_rt::as_i32(second130)) as u8;
                                                                *base.add(24).cast::<i32>() =
                                                                    _rt::as_i32(nanosecond130);
                                                                *base.add(28).cast::<i32>() =
                                                                    _rt::as_i32(offset127);
                                                            }
                                                            Tstzbound::Excluded(e) => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                let Timestamptz {
                                                                    timestamp: timestamp131,
                                                                    offset: offset131,
                                                                } = e;
                                                                let Timestamp {
                                                                    date: date132,
                                                                    time: time132,
                                                                } = timestamp131;
                                                                let Date {
                                                                    year: year133,
                                                                    month: month133,
                                                                    day: day133,
                                                                } = date132;
                                                                *base.add(12).cast::<i32>() =
                                                                    _rt::as_i32(year133);
                                                                *base.add(16).cast::<u8>() =
                                                                    (_rt::as_i32(month133)) as u8;
                                                                *base.add(17).cast::<u8>() =
                                                                    (_rt::as_i32(day133)) as u8;
                                                                let Time {
                                                                    hour: hour134,
                                                                    minute: minute134,
                                                                    second: second134,
                                                                    nanosecond: nanosecond134,
                                                                } = time132;
                                                                *base.add(20).cast::<u8>() =
                                                                    (_rt::as_i32(hour134)) as u8;
                                                                *base.add(21).cast::<u8>() =
                                                                    (_rt::as_i32(minute134)) as u8;
                                                                *base.add(22).cast::<u8>() =
                                                                    (_rt::as_i32(second134)) as u8;
                                                                *base.add(24).cast::<i32>() =
                                                                    _rt::as_i32(nanosecond134);
                                                                *base.add(28).cast::<i32>() =
                                                                    _rt::as_i32(offset131);
                                                            }
                                                            Tstzbound::Unbounded => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (2i32) as u8;
                                                            }
                                                        }
                                                        match end126 {
                                                            Tstzbound::Included(e) => {
                                                                *base.add(32).cast::<u8>() =
                                                                    (0i32) as u8;
                                                                let Timestamptz {
                                                                    timestamp: timestamp135,
                                                                    offset: offset135,
                                                                } = e;
                                                                let Timestamp {
                                                                    date: date136,
                                                                    time: time136,
                                                                } = timestamp135;
                                                                let Date {
                                                                    year: year137,
                                                                    month: month137,
                                                                    day: day137,
                                                                } = date136;
                                                                *base.add(36).cast::<i32>() =
                                                                    _rt::as_i32(year137);
                                                                *base.add(40).cast::<u8>() =
                                                                    (_rt::as_i32(month137)) as u8;
                                                                *base.add(41).cast::<u8>() =
                                                                    (_rt::as_i32(day137)) as u8;
                                                                let Time {
                                                                    hour: hour138,
                                                                    minute: minute138,
                                                                    second: second138,
                                                                    nanosecond: nanosecond138,
                                                                } = time136;
                                                                *base.add(44).cast::<u8>() =
                                                                    (_rt::as_i32(hour138)) as u8;
                                                                *base.add(45).cast::<u8>() =
                                                                    (_rt::as_i32(minute138)) as u8;
                                                                *base.add(46).cast::<u8>() =
                                                                    (_rt::as_i32(second138)) as u8;
                                                                *base.add(48).cast::<i32>() =
                                                                    _rt::as_i32(nanosecond138);
                                                                *base.add(52).cast::<i32>() =
                                                                    _rt::as_i32(offset135);
                                                            }
                                                            Tstzbound::Excluded(e) => {
                                                                *base.add(32).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                let Timestamptz {
                                                                    timestamp: timestamp139,
                                                                    offset: offset139,
                                                                } = e;
                                                                let Timestamp {
                                                                    date: date140,
                                                                    time: time140,
                                                                } = timestamp139;
                                                                let Date {
                                                                    year: year141,
                                                                    month: month141,
                                                                    day: day141,
                                                                } = date140;
                                                                *base.add(36).cast::<i32>() =
                                                                    _rt::as_i32(year141);
                                                                *base.add(40).cast::<u8>() =
                                                                    (_rt::as_i32(month141)) as u8;
                                                                *base.add(41).cast::<u8>() =
                                                                    (_rt::as_i32(day141)) as u8;
                                                                let Time {
                                                                    hour: hour142,
                                                                    minute: minute142,
                                                                    second: second142,
                                                                    nanosecond: nanosecond142,
                                                                } = time140;
                                                                *base.add(44).cast::<u8>() =
                                                                    (_rt::as_i32(hour142)) as u8;
                                                                *base.add(45).cast::<u8>() =
                                                                    (_rt::as_i32(minute142)) as u8;
                                                                *base.add(46).cast::<u8>() =
                                                                    (_rt::as_i32(second142)) as u8;
                                                                *base.add(48).cast::<i32>() =
                                                                    _rt::as_i32(nanosecond142);
                                                                *base.add(52).cast::<i32>() =
                                                                    _rt::as_i32(offset139);
                                                            }
                                                            Tstzbound::Unbounded => {
                                                                *base.add(32).cast::<u8>() =
                                                                    (2i32) as u8;
                                                            }
                                                        }
                                                    }
                                                    DbValuePrimitive::Daterange(e) => {
                                                        *base.add(0).cast::<u8>() = (33i32) as u8;
                                                        let Daterange {
                                                            start: start143,
                                                            end: end143,
                                                        } = e;
                                                        match start143 {
                                                            Datebound::Included(e) => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (0i32) as u8;
                                                                let Date {
                                                                    year: year144,
                                                                    month: month144,
                                                                    day: day144,
                                                                } = e;
                                                                *base.add(12).cast::<i32>() =
                                                                    _rt::as_i32(year144);
                                                                *base.add(16).cast::<u8>() =
                                                                    (_rt::as_i32(month144)) as u8;
                                                                *base.add(17).cast::<u8>() =
                                                                    (_rt::as_i32(day144)) as u8;
                                                            }
                                                            Datebound::Excluded(e) => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                let Date {
                                                                    year: year145,
                                                                    month: month145,
                                                                    day: day145,
                                                                } = e;
                                                                *base.add(12).cast::<i32>() =
                                                                    _rt::as_i32(year145);
                                                                *base.add(16).cast::<u8>() =
                                                                    (_rt::as_i32(month145)) as u8;
                                                                *base.add(17).cast::<u8>() =
                                                                    (_rt::as_i32(day145)) as u8;
                                                            }
                                                            Datebound::Unbounded => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (2i32) as u8;
                                                            }
                                                        }
                                                        match end143 {
                                                            Datebound::Included(e) => {
                                                                *base.add(20).cast::<u8>() =
                                                                    (0i32) as u8;
                                                                let Date {
                                                                    year: year146,
                                                                    month: month146,
                                                                    day: day146,
                                                                } = e;
                                                                *base.add(24).cast::<i32>() =
                                                                    _rt::as_i32(year146);
                                                                *base.add(28).cast::<u8>() =
                                                                    (_rt::as_i32(month146)) as u8;
                                                                *base.add(29).cast::<u8>() =
                                                                    (_rt::as_i32(day146)) as u8;
                                                            }
                                                            Datebound::Excluded(e) => {
                                                                *base.add(20).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                let Date {
                                                                    year: year147,
                                                                    month: month147,
                                                                    day: day147,
                                                                } = e;
                                                                *base.add(24).cast::<i32>() =
                                                                    _rt::as_i32(year147);
                                                                *base.add(28).cast::<u8>() =
                                                                    (_rt::as_i32(month147)) as u8;
                                                                *base.add(29).cast::<u8>() =
                                                                    (_rt::as_i32(day147)) as u8;
                                                            }
                                                            Datebound::Unbounded => {
                                                                *base.add(20).cast::<u8>() =
                                                                    (2i32) as u8;
                                                            }
                                                        }
                                                    }
                                                    DbValuePrimitive::Money(e) => {
                                                        *base.add(0).cast::<u8>() = (34i32) as u8;
                                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                    }
                                                    DbValuePrimitive::Oid(e) => {
                                                        *base.add(0).cast::<u8>() = (35i32) as u8;
                                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    DbValuePrimitive::Enumeration(e) => {
                                                        *base.add(0).cast::<u8>() = (36i32) as u8;
                                                        let Enumeration {
                                                            name: name148,
                                                            value: value148,
                                                        } = e;
                                                        let vec149 = name148;
                                                        let ptr149 = vec149.as_ptr().cast::<u8>();
                                                        let len149 = vec149.len();
                                                        *base.add(12).cast::<usize>() = len149;
                                                        *base.add(8).cast::<*mut u8>() =
                                                            ptr149.cast_mut();
                                                        let vec150 = value148;
                                                        let ptr150 = vec150.as_ptr().cast::<u8>();
                                                        let len150 = vec150.len();
                                                        *base.add(20).cast::<usize>() = len150;
                                                        *base.add(16).cast::<*mut u8>() =
                                                            ptr150.cast_mut();
                                                    }
                                                    DbValuePrimitive::Null => {
                                                        *base.add(0).cast::<u8>() = (37i32) as u8;
                                                    }
                                                }
                                            }
                                        }
                                        *base.add(12).cast::<usize>() = len151;
                                        *base.add(8).cast::<*mut u8>() = result151;
                                        cleanup_list.extend_from_slice(&[(result151, layout151)]);
                                    }
                                }
                            }
                        }
                        let ptr153 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:rdbms/postgres@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]db-connection.execute"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            result152,
                            len152,
                            ptr153,
                        );
                        let l154 = i32::from(*ptr153.add(0).cast::<u8>());
                        if layout152.size() != 0 {
                            _rt::alloc::dealloc(result152.cast(), layout152);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l154 {
                            0 => {
                                let e = {
                                    let l155 = *ptr153.add(8).cast::<i64>();

                                    l155 as u64
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l156 = i32::from(*ptr153.add(8).cast::<u8>());
                                    let v172 = match l156 {
                                        0 => {
                                            let e172 = {
                                                let l157 = *ptr153.add(12).cast::<*mut u8>();
                                                let l158 = *ptr153.add(16).cast::<usize>();
                                                let len159 = l158;
                                                let bytes159 = _rt::Vec::from_raw_parts(
                                                    l157.cast(),
                                                    len159,
                                                    len159,
                                                );

                                                _rt::string_lift(bytes159)
                                            };
                                            Error::ConnectionFailure(e172)
                                        }
                                        1 => {
                                            let e172 = {
                                                let l160 = *ptr153.add(12).cast::<*mut u8>();
                                                let l161 = *ptr153.add(16).cast::<usize>();
                                                let len162 = l161;
                                                let bytes162 = _rt::Vec::from_raw_parts(
                                                    l160.cast(),
                                                    len162,
                                                    len162,
                                                );

                                                _rt::string_lift(bytes162)
                                            };
                                            Error::QueryParameterFailure(e172)
                                        }
                                        2 => {
                                            let e172 = {
                                                let l163 = *ptr153.add(12).cast::<*mut u8>();
                                                let l164 = *ptr153.add(16).cast::<usize>();
                                                let len165 = l164;
                                                let bytes165 = _rt::Vec::from_raw_parts(
                                                    l163.cast(),
                                                    len165,
                                                    len165,
                                                );

                                                _rt::string_lift(bytes165)
                                            };
                                            Error::QueryExecutionFailure(e172)
                                        }
                                        3 => {
                                            let e172 = {
                                                let l166 = *ptr153.add(12).cast::<*mut u8>();
                                                let l167 = *ptr153.add(16).cast::<usize>();
                                                let len168 = l167;
                                                let bytes168 = _rt::Vec::from_raw_parts(
                                                    l166.cast(),
                                                    len168,
                                                    len168,
                                                );

                                                _rt::string_lift(bytes168)
                                            };
                                            Error::QueryResponseFailure(e172)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 4, "invalid enum discriminant");
                                            let e172 = {
                                                let l169 = *ptr153.add(12).cast::<*mut u8>();
                                                let l170 = *ptr153.add(16).cast::<usize>();
                                                let len171 = l170;
                                                let bytes171 = _rt::Vec::from_raw_parts(
                                                    l169.cast(),
                                                    len171,
                                                    len171,
                                                );

                                                _rt::string_lift(bytes171)
                                            };
                                            Error::Other(e172)
                                        }
                                    };

                                    v172
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
        }

        #[allow(dead_code, clippy::all)]
        pub mod mysql {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[derive(Clone)]
            pub enum Error {
                ConnectionFailure(_rt::String),
                QueryParameterFailure(_rt::String),
                QueryExecutionFailure(_rt::String),
                QueryResponseFailure(_rt::String),
                Other(_rt::String),
            }
            impl ::core::fmt::Debug for Error {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        Error::ConnectionFailure(e) => {
                            f.debug_tuple("Error::ConnectionFailure").field(e).finish()
                        }
                        Error::QueryParameterFailure(e) => f
                            .debug_tuple("Error::QueryParameterFailure")
                            .field(e)
                            .finish(),
                        Error::QueryExecutionFailure(e) => f
                            .debug_tuple("Error::QueryExecutionFailure")
                            .field(e)
                            .finish(),
                        Error::QueryResponseFailure(e) => f
                            .debug_tuple("Error::QueryResponseFailure")
                            .field(e)
                            .finish(),
                        Error::Other(e) => f.debug_tuple("Error::Other").field(e).finish(),
                    }
                }
            }
            impl ::core::fmt::Display for Error {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }

            impl std::error::Error for Error {}
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Date {
                pub year: i32,
                pub month: u8,
                pub day: u8,
            }
            impl ::core::fmt::Debug for Date {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Date")
                        .field("year", &self.year)
                        .field("month", &self.month)
                        .field("day", &self.day)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Time {
                pub hour: u8,
                pub minute: u8,
                pub second: u8,
                pub nanosecond: u32,
            }
            impl ::core::fmt::Debug for Time {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Time")
                        .field("hour", &self.hour)
                        .field("minute", &self.minute)
                        .field("second", &self.second)
                        .field("nanosecond", &self.nanosecond)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Timestamp {
                pub date: Date,
                pub time: Time,
            }
            impl ::core::fmt::Debug for Timestamp {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Timestamp")
                        .field("date", &self.date)
                        .field("time", &self.time)
                        .finish()
                }
            }
            #[derive(Clone, Copy)]
            pub enum DbColumnType {
                Boolean,
                Tinyint,
                Smallint,
                Mediumint,
                Int,
                Bigint,
                TinyintUnsigned,
                SmallintUnsigned,
                MediumintUnsigned,
                IntUnsigned,
                BigintUnsigned,
                Float,
                Double,
                Decimal,
                Date,
                Datetime,
                Timestamp,
                Time,
                Year,
                Fixchar,
                Varchar,
                Tinytext,
                Text,
                Mediumtext,
                Longtext,
                Binary,
                Varbinary,
                Tinyblob,
                Blob,
                Mediumblob,
                Longblob,
                Enumeration,
                Set,
                Bit,
                Json,
            }
            impl ::core::fmt::Debug for DbColumnType {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        DbColumnType::Boolean => f.debug_tuple("DbColumnType::Boolean").finish(),
                        DbColumnType::Tinyint => f.debug_tuple("DbColumnType::Tinyint").finish(),
                        DbColumnType::Smallint => f.debug_tuple("DbColumnType::Smallint").finish(),
                        DbColumnType::Mediumint => {
                            f.debug_tuple("DbColumnType::Mediumint").finish()
                        }
                        DbColumnType::Int => f.debug_tuple("DbColumnType::Int").finish(),
                        DbColumnType::Bigint => f.debug_tuple("DbColumnType::Bigint").finish(),
                        DbColumnType::TinyintUnsigned => {
                            f.debug_tuple("DbColumnType::TinyintUnsigned").finish()
                        }
                        DbColumnType::SmallintUnsigned => {
                            f.debug_tuple("DbColumnType::SmallintUnsigned").finish()
                        }
                        DbColumnType::MediumintUnsigned => {
                            f.debug_tuple("DbColumnType::MediumintUnsigned").finish()
                        }
                        DbColumnType::IntUnsigned => {
                            f.debug_tuple("DbColumnType::IntUnsigned").finish()
                        }
                        DbColumnType::BigintUnsigned => {
                            f.debug_tuple("DbColumnType::BigintUnsigned").finish()
                        }
                        DbColumnType::Float => f.debug_tuple("DbColumnType::Float").finish(),
                        DbColumnType::Double => f.debug_tuple("DbColumnType::Double").finish(),
                        DbColumnType::Decimal => f.debug_tuple("DbColumnType::Decimal").finish(),
                        DbColumnType::Date => f.debug_tuple("DbColumnType::Date").finish(),
                        DbColumnType::Datetime => f.debug_tuple("DbColumnType::Datetime").finish(),
                        DbColumnType::Timestamp => {
                            f.debug_tuple("DbColumnType::Timestamp").finish()
                        }
                        DbColumnType::Time => f.debug_tuple("DbColumnType::Time").finish(),
                        DbColumnType::Year => f.debug_tuple("DbColumnType::Year").finish(),
                        DbColumnType::Fixchar => f.debug_tuple("DbColumnType::Fixchar").finish(),
                        DbColumnType::Varchar => f.debug_tuple("DbColumnType::Varchar").finish(),
                        DbColumnType::Tinytext => f.debug_tuple("DbColumnType::Tinytext").finish(),
                        DbColumnType::Text => f.debug_tuple("DbColumnType::Text").finish(),
                        DbColumnType::Mediumtext => {
                            f.debug_tuple("DbColumnType::Mediumtext").finish()
                        }
                        DbColumnType::Longtext => f.debug_tuple("DbColumnType::Longtext").finish(),
                        DbColumnType::Binary => f.debug_tuple("DbColumnType::Binary").finish(),
                        DbColumnType::Varbinary => {
                            f.debug_tuple("DbColumnType::Varbinary").finish()
                        }
                        DbColumnType::Tinyblob => f.debug_tuple("DbColumnType::Tinyblob").finish(),
                        DbColumnType::Blob => f.debug_tuple("DbColumnType::Blob").finish(),
                        DbColumnType::Mediumblob => {
                            f.debug_tuple("DbColumnType::Mediumblob").finish()
                        }
                        DbColumnType::Longblob => f.debug_tuple("DbColumnType::Longblob").finish(),
                        DbColumnType::Enumeration => {
                            f.debug_tuple("DbColumnType::Enumeration").finish()
                        }
                        DbColumnType::Set => f.debug_tuple("DbColumnType::Set").finish(),
                        DbColumnType::Bit => f.debug_tuple("DbColumnType::Bit").finish(),
                        DbColumnType::Json => f.debug_tuple("DbColumnType::Json").finish(),
                    }
                }
            }
            #[derive(Clone)]
            pub struct DbColumn {
                pub ordinal: u64,
                pub name: _rt::String,
                pub db_type: DbColumnType,
                pub db_type_name: _rt::String,
            }
            impl ::core::fmt::Debug for DbColumn {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("DbColumn")
                        .field("ordinal", &self.ordinal)
                        .field("name", &self.name)
                        .field("db-type", &self.db_type)
                        .field("db-type-name", &self.db_type_name)
                        .finish()
                }
            }
            /// Value descriptor for a single database value
            #[derive(Clone)]
            pub enum DbValue {
                Boolean(bool),
                Tinyint(i8),
                Smallint(i16),
                /// s24
                Mediumint(i32),
                Int(i32),
                Bigint(i64),
                TinyintUnsigned(u8),
                SmallintUnsigned(u16),
                /// u24
                MediumintUnsigned(u32),
                IntUnsigned(u32),
                BigintUnsigned(u64),
                Float(f32),
                Double(f64),
                Decimal(_rt::String),
                Date(Date),
                Datetime(Timestamp),
                Timestamp(Timestamp),
                Time(Time),
                Year(u16),
                Fixchar(_rt::String),
                Varchar(_rt::String),
                Tinytext(_rt::String),
                Text(_rt::String),
                Mediumtext(_rt::String),
                Longtext(_rt::String),
                Binary(_rt::Vec<u8>),
                Varbinary(_rt::Vec<u8>),
                Tinyblob(_rt::Vec<u8>),
                Blob(_rt::Vec<u8>),
                Mediumblob(_rt::Vec<u8>),
                Longblob(_rt::Vec<u8>),
                Enumeration(_rt::String),
                Set(_rt::String),
                Bit(_rt::Vec<bool>),
                Json(_rt::String),
                Null,
            }
            impl ::core::fmt::Debug for DbValue {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        DbValue::Boolean(e) => f.debug_tuple("DbValue::Boolean").field(e).finish(),
                        DbValue::Tinyint(e) => f.debug_tuple("DbValue::Tinyint").field(e).finish(),
                        DbValue::Smallint(e) => {
                            f.debug_tuple("DbValue::Smallint").field(e).finish()
                        }
                        DbValue::Mediumint(e) => {
                            f.debug_tuple("DbValue::Mediumint").field(e).finish()
                        }
                        DbValue::Int(e) => f.debug_tuple("DbValue::Int").field(e).finish(),
                        DbValue::Bigint(e) => f.debug_tuple("DbValue::Bigint").field(e).finish(),
                        DbValue::TinyintUnsigned(e) => {
                            f.debug_tuple("DbValue::TinyintUnsigned").field(e).finish()
                        }
                        DbValue::SmallintUnsigned(e) => {
                            f.debug_tuple("DbValue::SmallintUnsigned").field(e).finish()
                        }
                        DbValue::MediumintUnsigned(e) => f
                            .debug_tuple("DbValue::MediumintUnsigned")
                            .field(e)
                            .finish(),
                        DbValue::IntUnsigned(e) => {
                            f.debug_tuple("DbValue::IntUnsigned").field(e).finish()
                        }
                        DbValue::BigintUnsigned(e) => {
                            f.debug_tuple("DbValue::BigintUnsigned").field(e).finish()
                        }
                        DbValue::Float(e) => f.debug_tuple("DbValue::Float").field(e).finish(),
                        DbValue::Double(e) => f.debug_tuple("DbValue::Double").field(e).finish(),
                        DbValue::Decimal(e) => f.debug_tuple("DbValue::Decimal").field(e).finish(),
                        DbValue::Date(e) => f.debug_tuple("DbValue::Date").field(e).finish(),
                        DbValue::Datetime(e) => {
                            f.debug_tuple("DbValue::Datetime").field(e).finish()
                        }
                        DbValue::Timestamp(e) => {
                            f.debug_tuple("DbValue::Timestamp").field(e).finish()
                        }
                        DbValue::Time(e) => f.debug_tuple("DbValue::Time").field(e).finish(),
                        DbValue::Year(e) => f.debug_tuple("DbValue::Year").field(e).finish(),
                        DbValue::Fixchar(e) => f.debug_tuple("DbValue::Fixchar").field(e).finish(),
                        DbValue::Varchar(e) => f.debug_tuple("DbValue::Varchar").field(e).finish(),
                        DbValue::Tinytext(e) => {
                            f.debug_tuple("DbValue::Tinytext").field(e).finish()
                        }
                        DbValue::Text(e) => f.debug_tuple("DbValue::Text").field(e).finish(),
                        DbValue::Mediumtext(e) => {
                            f.debug_tuple("DbValue::Mediumtext").field(e).finish()
                        }
                        DbValue::Longtext(e) => {
                            f.debug_tuple("DbValue::Longtext").field(e).finish()
                        }
                        DbValue::Binary(e) => f.debug_tuple("DbValue::Binary").field(e).finish(),
                        DbValue::Varbinary(e) => {
                            f.debug_tuple("DbValue::Varbinary").field(e).finish()
                        }
                        DbValue::Tinyblob(e) => {
                            f.debug_tuple("DbValue::Tinyblob").field(e).finish()
                        }
                        DbValue::Blob(e) => f.debug_tuple("DbValue::Blob").field(e).finish(),
                        DbValue::Mediumblob(e) => {
                            f.debug_tuple("DbValue::Mediumblob").field(e).finish()
                        }
                        DbValue::Longblob(e) => {
                            f.debug_tuple("DbValue::Longblob").field(e).finish()
                        }
                        DbValue::Enumeration(e) => {
                            f.debug_tuple("DbValue::Enumeration").field(e).finish()
                        }
                        DbValue::Set(e) => f.debug_tuple("DbValue::Set").field(e).finish(),
                        DbValue::Bit(e) => f.debug_tuple("DbValue::Bit").field(e).finish(),
                        DbValue::Json(e) => f.debug_tuple("DbValue::Json").field(e).finish(),
                        DbValue::Null => f.debug_tuple("DbValue::Null").finish(),
                    }
                }
            }
            /// A single row of values
            #[derive(Clone)]
            pub struct DbRow {
                pub values: _rt::Vec<DbValue>,
            }
            impl ::core::fmt::Debug for DbRow {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("DbRow")
                        .field("values", &self.values)
                        .finish()
                }
            }
            /// A potentially very large and lazy stream of rows:

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct DbResultSet {
                handle: _rt::Resource<DbResultSet>,
            }

            impl DbResultSet {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for DbResultSet {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:rdbms/mysql@0.0.1")]
                        extern "C" {
                            #[link_name = "[resource-drop]db-result-set"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct DbConnection {
                handle: _rt::Resource<DbConnection>,
            }

            impl DbConnection {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for DbConnection {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:rdbms/mysql@0.0.1")]
                        extern "C" {
                            #[link_name = "[resource-drop]db-connection"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            impl DbResultSet {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_columns(&self) -> _rt::Vec<DbColumn> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:rdbms/mysql@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]db-result-set.get-columns"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let base12 = l1;
                        let len12 = l2;
                        let mut result12 = _rt::Vec::with_capacity(len12);
                        for i in 0..len12 {
                            let base = base12.add(i * 32);
                            let e12 = {
                                let l3 = *base.add(0).cast::<i64>();
                                let l4 = *base.add(8).cast::<*mut u8>();
                                let l5 = *base.add(12).cast::<usize>();
                                let len6 = l5;
                                let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);
                                let l7 = i32::from(*base.add(16).cast::<u8>());
                                let v8 = match l7 {
                                    0 => DbColumnType::Boolean,
                                    1 => DbColumnType::Tinyint,
                                    2 => DbColumnType::Smallint,
                                    3 => DbColumnType::Mediumint,
                                    4 => DbColumnType::Int,
                                    5 => DbColumnType::Bigint,
                                    6 => DbColumnType::TinyintUnsigned,
                                    7 => DbColumnType::SmallintUnsigned,
                                    8 => DbColumnType::MediumintUnsigned,
                                    9 => DbColumnType::IntUnsigned,
                                    10 => DbColumnType::BigintUnsigned,
                                    11 => DbColumnType::Float,
                                    12 => DbColumnType::Double,
                                    13 => DbColumnType::Decimal,
                                    14 => DbColumnType::Date,
                                    15 => DbColumnType::Datetime,
                                    16 => DbColumnType::Timestamp,
                                    17 => DbColumnType::Time,
                                    18 => DbColumnType::Year,
                                    19 => DbColumnType::Fixchar,
                                    20 => DbColumnType::Varchar,
                                    21 => DbColumnType::Tinytext,
                                    22 => DbColumnType::Text,
                                    23 => DbColumnType::Mediumtext,
                                    24 => DbColumnType::Longtext,
                                    25 => DbColumnType::Binary,
                                    26 => DbColumnType::Varbinary,
                                    27 => DbColumnType::Tinyblob,
                                    28 => DbColumnType::Blob,
                                    29 => DbColumnType::Mediumblob,
                                    30 => DbColumnType::Longblob,
                                    31 => DbColumnType::Enumeration,
                                    32 => DbColumnType::Set,
                                    33 => DbColumnType::Bit,
                                    n => {
                                        debug_assert_eq!(n, 34, "invalid enum discriminant");
                                        DbColumnType::Json
                                    }
                                };
                                let l9 = *base.add(20).cast::<*mut u8>();
                                let l10 = *base.add(24).cast::<usize>();
                                let len11 = l10;
                                let bytes11 = _rt::Vec::from_raw_parts(l9.cast(), len11, len11);

                                DbColumn {
                                    ordinal: l3 as u64,
                                    name: _rt::string_lift(bytes6),
                                    db_type: v8,
                                    db_type_name: _rt::string_lift(bytes11),
                                }
                            };
                            result12.push(e12);
                        }
                        _rt::cabi_dealloc(base12, len12 * 32, 8);
                        result12
                    }
                }
            }
            impl DbResultSet {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_next(&self) -> Option<_rt::Vec<DbRow>> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:rdbms/mysql@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]db-result-set.get-next"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<*mut u8>();
                                    let l3 = *ptr0.add(8).cast::<usize>();
                                    let base96 = l2;
                                    let len96 = l3;
                                    let mut result96 = _rt::Vec::with_capacity(len96);
                                    for i in 0..len96 {
                                        let base = base96.add(i * 8);
                                        let e96 = {
                                            let l4 = *base.add(0).cast::<*mut u8>();
                                            let l5 = *base.add(4).cast::<usize>();
                                            let base95 = l4;
                                            let len95 = l5;
                                            let mut result95 = _rt::Vec::with_capacity(len95);
                                            for i in 0..len95 {
                                                let base = base95.add(i * 24);
                                                let e95 = {
                                                    let l6 = i32::from(*base.add(0).cast::<u8>());
                                                    let v94 = match l6 {
                                                        0 => {
                                                            let e94 = {
                                                                let l7 = i32::from(
                                                                    *base.add(8).cast::<u8>(),
                                                                );

                                                                _rt::bool_lift(l7 as u8)
                                                            };
                                                            DbValue::Boolean(e94)
                                                        }
                                                        1 => {
                                                            let e94 = {
                                                                let l8 = i32::from(
                                                                    *base.add(8).cast::<i8>(),
                                                                );

                                                                l8 as i8
                                                            };
                                                            DbValue::Tinyint(e94)
                                                        }
                                                        2 => {
                                                            let e94 = {
                                                                let l9 = i32::from(
                                                                    *base.add(8).cast::<i16>(),
                                                                );

                                                                l9 as i16
                                                            };
                                                            DbValue::Smallint(e94)
                                                        }
                                                        3 => {
                                                            let e94 = {
                                                                let l10 =
                                                                    *base.add(8).cast::<i32>();

                                                                l10
                                                            };
                                                            DbValue::Mediumint(e94)
                                                        }
                                                        4 => {
                                                            let e94 = {
                                                                let l11 =
                                                                    *base.add(8).cast::<i32>();

                                                                l11
                                                            };
                                                            DbValue::Int(e94)
                                                        }
                                                        5 => {
                                                            let e94 = {
                                                                let l12 =
                                                                    *base.add(8).cast::<i64>();

                                                                l12
                                                            };
                                                            DbValue::Bigint(e94)
                                                        }
                                                        6 => {
                                                            let e94 = {
                                                                let l13 = i32::from(
                                                                    *base.add(8).cast::<u8>(),
                                                                );

                                                                l13 as u8
                                                            };
                                                            DbValue::TinyintUnsigned(e94)
                                                        }
                                                        7 => {
                                                            let e94 = {
                                                                let l14 = i32::from(
                                                                    *base.add(8).cast::<u16>(),
                                                                );

                                                                l14 as u16
                                                            };
                                                            DbValue::SmallintUnsigned(e94)
                                                        }
                                                        8 => {
                                                            let e94 = {
                                                                let l15 =
                                                                    *base.add(8).cast::<i32>();

                                                                l15 as u32
                                                            };
                                                            DbValue::MediumintUnsigned(e94)
                                                        }
                                                        9 => {
                                                            let e94 = {
                                                                let l16 =
                                                                    *base.add(8).cast::<i32>();

                                                                l16 as u32
                                                            };
                                                            DbValue::IntUnsigned(e94)
                                                        }
                                                        10 => {
                                                            let e94 = {
                                                                let l17 =
                                                                    *base.add(8).cast::<i64>();

                                                                l17 as u64
                                                            };
                                                            DbValue::BigintUnsigned(e94)
                                                        }
                                                        11 => {
                                                            let e94 = {
                                                                let l18 =
                                                                    *base.add(8).cast::<f32>();

                                                                l18
                                                            };
                                                            DbValue::Float(e94)
                                                        }
                                                        12 => {
                                                            let e94 = {
                                                                let l19 =
                                                                    *base.add(8).cast::<f64>();

                                                                l19
                                                            };
                                                            DbValue::Double(e94)
                                                        }
                                                        13 => {
                                                            let e94 = {
                                                                let l20 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l21 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len22 = l21;
                                                                let bytes22 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l20.cast(),
                                                                        len22,
                                                                        len22,
                                                                    );

                                                                _rt::string_lift(bytes22)
                                                            };
                                                            DbValue::Decimal(e94)
                                                        }
                                                        14 => {
                                                            let e94 = {
                                                                let l23 =
                                                                    *base.add(8).cast::<i32>();
                                                                let l24 = i32::from(
                                                                    *base.add(12).cast::<u8>(),
                                                                );
                                                                let l25 = i32::from(
                                                                    *base.add(13).cast::<u8>(),
                                                                );

                                                                Date {
                                                                    year: l23,
                                                                    month: l24 as u8,
                                                                    day: l25 as u8,
                                                                }
                                                            };
                                                            DbValue::Date(e94)
                                                        }
                                                        15 => {
                                                            let e94 = {
                                                                let l26 =
                                                                    *base.add(8).cast::<i32>();
                                                                let l27 = i32::from(
                                                                    *base.add(12).cast::<u8>(),
                                                                );
                                                                let l28 = i32::from(
                                                                    *base.add(13).cast::<u8>(),
                                                                );
                                                                let l29 = i32::from(
                                                                    *base.add(16).cast::<u8>(),
                                                                );
                                                                let l30 = i32::from(
                                                                    *base.add(17).cast::<u8>(),
                                                                );
                                                                let l31 = i32::from(
                                                                    *base.add(18).cast::<u8>(),
                                                                );
                                                                let l32 =
                                                                    *base.add(20).cast::<i32>();

                                                                Timestamp {
                                                                    date: Date {
                                                                        year: l26,
                                                                        month: l27 as u8,
                                                                        day: l28 as u8,
                                                                    },
                                                                    time: Time {
                                                                        hour: l29 as u8,
                                                                        minute: l30 as u8,
                                                                        second: l31 as u8,
                                                                        nanosecond: l32 as u32,
                                                                    },
                                                                }
                                                            };
                                                            DbValue::Datetime(e94)
                                                        }
                                                        16 => {
                                                            let e94 = {
                                                                let l33 =
                                                                    *base.add(8).cast::<i32>();
                                                                let l34 = i32::from(
                                                                    *base.add(12).cast::<u8>(),
                                                                );
                                                                let l35 = i32::from(
                                                                    *base.add(13).cast::<u8>(),
                                                                );
                                                                let l36 = i32::from(
                                                                    *base.add(16).cast::<u8>(),
                                                                );
                                                                let l37 = i32::from(
                                                                    *base.add(17).cast::<u8>(),
                                                                );
                                                                let l38 = i32::from(
                                                                    *base.add(18).cast::<u8>(),
                                                                );
                                                                let l39 =
                                                                    *base.add(20).cast::<i32>();

                                                                Timestamp {
                                                                    date: Date {
                                                                        year: l33,
                                                                        month: l34 as u8,
                                                                        day: l35 as u8,
                                                                    },
                                                                    time: Time {
                                                                        hour: l36 as u8,
                                                                        minute: l37 as u8,
                                                                        second: l38 as u8,
                                                                        nanosecond: l39 as u32,
                                                                    },
                                                                }
                                                            };
                                                            DbValue::Timestamp(e94)
                                                        }
                                                        17 => {
                                                            let e94 = {
                                                                let l40 = i32::from(
                                                                    *base.add(8).cast::<u8>(),
                                                                );
                                                                let l41 = i32::from(
                                                                    *base.add(9).cast::<u8>(),
                                                                );
                                                                let l42 = i32::from(
                                                                    *base.add(10).cast::<u8>(),
                                                                );
                                                                let l43 =
                                                                    *base.add(12).cast::<i32>();

                                                                Time {
                                                                    hour: l40 as u8,
                                                                    minute: l41 as u8,
                                                                    second: l42 as u8,
                                                                    nanosecond: l43 as u32,
                                                                }
                                                            };
                                                            DbValue::Time(e94)
                                                        }
                                                        18 => {
                                                            let e94 = {
                                                                let l44 = i32::from(
                                                                    *base.add(8).cast::<u16>(),
                                                                );

                                                                l44 as u16
                                                            };
                                                            DbValue::Year(e94)
                                                        }
                                                        19 => {
                                                            let e94 = {
                                                                let l45 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l46 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len47 = l46;
                                                                let bytes47 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l45.cast(),
                                                                        len47,
                                                                        len47,
                                                                    );

                                                                _rt::string_lift(bytes47)
                                                            };
                                                            DbValue::Fixchar(e94)
                                                        }
                                                        20 => {
                                                            let e94 = {
                                                                let l48 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l49 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len50 = l49;
                                                                let bytes50 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l48.cast(),
                                                                        len50,
                                                                        len50,
                                                                    );

                                                                _rt::string_lift(bytes50)
                                                            };
                                                            DbValue::Varchar(e94)
                                                        }
                                                        21 => {
                                                            let e94 = {
                                                                let l51 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l52 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len53 = l52;
                                                                let bytes53 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l51.cast(),
                                                                        len53,
                                                                        len53,
                                                                    );

                                                                _rt::string_lift(bytes53)
                                                            };
                                                            DbValue::Tinytext(e94)
                                                        }
                                                        22 => {
                                                            let e94 = {
                                                                let l54 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l55 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len56 = l55;
                                                                let bytes56 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l54.cast(),
                                                                        len56,
                                                                        len56,
                                                                    );

                                                                _rt::string_lift(bytes56)
                                                            };
                                                            DbValue::Text(e94)
                                                        }
                                                        23 => {
                                                            let e94 = {
                                                                let l57 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l58 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len59 = l58;
                                                                let bytes59 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l57.cast(),
                                                                        len59,
                                                                        len59,
                                                                    );

                                                                _rt::string_lift(bytes59)
                                                            };
                                                            DbValue::Mediumtext(e94)
                                                        }
                                                        24 => {
                                                            let e94 = {
                                                                let l60 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l61 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len62 = l61;
                                                                let bytes62 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l60.cast(),
                                                                        len62,
                                                                        len62,
                                                                    );

                                                                _rt::string_lift(bytes62)
                                                            };
                                                            DbValue::Longtext(e94)
                                                        }
                                                        25 => {
                                                            let e94 = {
                                                                let l63 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l64 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len65 = l64;

                                                                _rt::Vec::from_raw_parts(
                                                                    l63.cast(),
                                                                    len65,
                                                                    len65,
                                                                )
                                                            };
                                                            DbValue::Binary(e94)
                                                        }
                                                        26 => {
                                                            let e94 = {
                                                                let l66 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l67 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len68 = l67;

                                                                _rt::Vec::from_raw_parts(
                                                                    l66.cast(),
                                                                    len68,
                                                                    len68,
                                                                )
                                                            };
                                                            DbValue::Varbinary(e94)
                                                        }
                                                        27 => {
                                                            let e94 = {
                                                                let l69 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l70 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len71 = l70;

                                                                _rt::Vec::from_raw_parts(
                                                                    l69.cast(),
                                                                    len71,
                                                                    len71,
                                                                )
                                                            };
                                                            DbValue::Tinyblob(e94)
                                                        }
                                                        28 => {
                                                            let e94 = {
                                                                let l72 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l73 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len74 = l73;

                                                                _rt::Vec::from_raw_parts(
                                                                    l72.cast(),
                                                                    len74,
                                                                    len74,
                                                                )
                                                            };
                                                            DbValue::Blob(e94)
                                                        }
                                                        29 => {
                                                            let e94 = {
                                                                let l75 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l76 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len77 = l76;

                                                                _rt::Vec::from_raw_parts(
                                                                    l75.cast(),
                                                                    len77,
                                                                    len77,
                                                                )
                                                            };
                                                            DbValue::Mediumblob(e94)
                                                        }
                                                        30 => {
                                                            let e94 = {
                                                                let l78 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l79 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len80 = l79;

                                                                _rt::Vec::from_raw_parts(
                                                                    l78.cast(),
                                                                    len80,
                                                                    len80,
                                                                )
                                                            };
                                                            DbValue::Longblob(e94)
                                                        }
                                                        31 => {
                                                            let e94 = {
                                                                let l81 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l82 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len83 = l82;
                                                                let bytes83 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l81.cast(),
                                                                        len83,
                                                                        len83,
                                                                    );

                                                                _rt::string_lift(bytes83)
                                                            };
                                                            DbValue::Enumeration(e94)
                                                        }
                                                        32 => {
                                                            let e94 = {
                                                                let l84 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l85 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len86 = l85;
                                                                let bytes86 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l84.cast(),
                                                                        len86,
                                                                        len86,
                                                                    );

                                                                _rt::string_lift(bytes86)
                                                            };
                                                            DbValue::Set(e94)
                                                        }
                                                        33 => {
                                                            let e94 = {
                                                                let l87 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l88 =
                                                                    *base.add(12).cast::<usize>();
                                                                let base90 = l87;
                                                                let len90 = l88;
                                                                let mut result90 =
                                                                    _rt::Vec::with_capacity(len90);
                                                                for i in 0..len90 {
                                                                    let base = base90.add(i * 1);
                                                                    let e90 = {
                                                                        let l89 = i32::from(
                                                                            *base
                                                                                .add(0)
                                                                                .cast::<u8>(),
                                                                        );

                                                                        _rt::bool_lift(l89 as u8)
                                                                    };
                                                                    result90.push(e90);
                                                                }
                                                                _rt::cabi_dealloc(
                                                                    base90,
                                                                    len90 * 1,
                                                                    1,
                                                                );

                                                                result90
                                                            };
                                                            DbValue::Bit(e94)
                                                        }
                                                        34 => {
                                                            let e94 = {
                                                                let l91 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l92 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len93 = l92;
                                                                let bytes93 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l91.cast(),
                                                                        len93,
                                                                        len93,
                                                                    );

                                                                _rt::string_lift(bytes93)
                                                            };
                                                            DbValue::Json(e94)
                                                        }
                                                        n => {
                                                            debug_assert_eq!(
                                                                n, 35,
                                                                "invalid enum discriminant"
                                                            );
                                                            DbValue::Null
                                                        }
                                                    };

                                                    v94
                                                };
                                                result95.push(e95);
                                            }
                                            _rt::cabi_dealloc(base95, len95 * 24, 8);

                                            DbRow { values: result95 }
                                        };
                                        result96.push(e96);
                                    }
                                    _rt::cabi_dealloc(base96, len96 * 8, 4);

                                    result96
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl DbConnection {
                #[allow(unused_unsafe, clippy::all)]
                pub fn open(address: &str) -> Result<DbConnection, Error> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let vec0 = address;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:rdbms/mysql@0.0.1")]
                        extern "C" {
                            #[link_name = "[static]db-connection.open"]
                            fn wit_import(_: *mut u8, _: usize, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import(ptr0.cast_mut(), len0, ptr1);
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => {
                                let e = {
                                    let l3 = *ptr1.add(4).cast::<i32>();

                                    DbConnection::from_handle(l3 as u32)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l4 = i32::from(*ptr1.add(4).cast::<u8>());
                                    let v20 = match l4 {
                                        0 => {
                                            let e20 = {
                                                let l5 = *ptr1.add(8).cast::<*mut u8>();
                                                let l6 = *ptr1.add(12).cast::<usize>();
                                                let len7 = l6;
                                                let bytes7 =
                                                    _rt::Vec::from_raw_parts(l5.cast(), len7, len7);

                                                _rt::string_lift(bytes7)
                                            };
                                            Error::ConnectionFailure(e20)
                                        }
                                        1 => {
                                            let e20 = {
                                                let l8 = *ptr1.add(8).cast::<*mut u8>();
                                                let l9 = *ptr1.add(12).cast::<usize>();
                                                let len10 = l9;
                                                let bytes10 = _rt::Vec::from_raw_parts(
                                                    l8.cast(),
                                                    len10,
                                                    len10,
                                                );

                                                _rt::string_lift(bytes10)
                                            };
                                            Error::QueryParameterFailure(e20)
                                        }
                                        2 => {
                                            let e20 = {
                                                let l11 = *ptr1.add(8).cast::<*mut u8>();
                                                let l12 = *ptr1.add(12).cast::<usize>();
                                                let len13 = l12;
                                                let bytes13 = _rt::Vec::from_raw_parts(
                                                    l11.cast(),
                                                    len13,
                                                    len13,
                                                );

                                                _rt::string_lift(bytes13)
                                            };
                                            Error::QueryExecutionFailure(e20)
                                        }
                                        3 => {
                                            let e20 = {
                                                let l14 = *ptr1.add(8).cast::<*mut u8>();
                                                let l15 = *ptr1.add(12).cast::<usize>();
                                                let len16 = l15;
                                                let bytes16 = _rt::Vec::from_raw_parts(
                                                    l14.cast(),
                                                    len16,
                                                    len16,
                                                );

                                                _rt::string_lift(bytes16)
                                            };
                                            Error::QueryResponseFailure(e20)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 4, "invalid enum discriminant");
                                            let e20 = {
                                                let l17 = *ptr1.add(8).cast::<*mut u8>();
                                                let l18 = *ptr1.add(12).cast::<usize>();
                                                let len19 = l18;
                                                let bytes19 = _rt::Vec::from_raw_parts(
                                                    l17.cast(),
                                                    len19,
                                                    len19,
                                                );

                                                _rt::string_lift(bytes19)
                                            };
                                            Error::Other(e20)
                                        }
                                    };

                                    v20
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl DbConnection {
                #[allow(unused_unsafe, clippy::all)]
                pub fn query(
                    &self,
                    statement: &str,
                    params: &[DbValue],
                ) -> Result<DbResultSet, Error> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let vec0 = statement;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec26 = params;
                        let len26 = vec26.len();
                        let layout26 =
                            _rt::alloc::Layout::from_size_align_unchecked(vec26.len() * 24, 8);
                        let result26 = if layout26.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout26).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout26);
                            }
                            ptr
                        } else {
                            {
                                ::core::ptr::null_mut()
                            }
                        };
                        for (i, e) in vec26.into_iter().enumerate() {
                            let base = result26.add(i * 24);
                            {
                                match e {
                                    DbValue::Boolean(e) => {
                                        *base.add(0).cast::<u8>() = (0i32) as u8;
                                        *base.add(8).cast::<u8>() = (match e {
                                            true => 1,
                                            false => 0,
                                        })
                                            as u8;
                                    }
                                    DbValue::Tinyint(e) => {
                                        *base.add(0).cast::<u8>() = (1i32) as u8;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                    }
                                    DbValue::Smallint(e) => {
                                        *base.add(0).cast::<u8>() = (2i32) as u8;
                                        *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                    }
                                    DbValue::Mediumint(e) => {
                                        *base.add(0).cast::<u8>() = (3i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::Int(e) => {
                                        *base.add(0).cast::<u8>() = (4i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::Bigint(e) => {
                                        *base.add(0).cast::<u8>() = (5i32) as u8;
                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    DbValue::TinyintUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (6i32) as u8;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                    }
                                    DbValue::SmallintUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (7i32) as u8;
                                        *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                    }
                                    DbValue::MediumintUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (8i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::IntUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (9i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::BigintUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (10i32) as u8;
                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    DbValue::Float(e) => {
                                        *base.add(0).cast::<u8>() = (11i32) as u8;
                                        *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                    }
                                    DbValue::Double(e) => {
                                        *base.add(0).cast::<u8>() = (12i32) as u8;
                                        *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                    }
                                    DbValue::Decimal(e) => {
                                        *base.add(0).cast::<u8>() = (13i32) as u8;
                                        let vec1 = e;
                                        let ptr1 = vec1.as_ptr().cast::<u8>();
                                        let len1 = vec1.len();
                                        *base.add(12).cast::<usize>() = len1;
                                        *base.add(8).cast::<*mut u8>() = ptr1.cast_mut();
                                    }
                                    DbValue::Date(e) => {
                                        *base.add(0).cast::<u8>() = (14i32) as u8;
                                        let Date {
                                            year: year2,
                                            month: month2,
                                            day: day2,
                                        } = e;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(year2);
                                        *base.add(12).cast::<u8>() = (_rt::as_i32(month2)) as u8;
                                        *base.add(13).cast::<u8>() = (_rt::as_i32(day2)) as u8;
                                    }
                                    DbValue::Datetime(e) => {
                                        *base.add(0).cast::<u8>() = (15i32) as u8;
                                        let Timestamp {
                                            date: date3,
                                            time: time3,
                                        } = e;
                                        let Date {
                                            year: year4,
                                            month: month4,
                                            day: day4,
                                        } = date3;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(year4);
                                        *base.add(12).cast::<u8>() = (_rt::as_i32(month4)) as u8;
                                        *base.add(13).cast::<u8>() = (_rt::as_i32(day4)) as u8;
                                        let Time {
                                            hour: hour5,
                                            minute: minute5,
                                            second: second5,
                                            nanosecond: nanosecond5,
                                        } = time3;
                                        *base.add(16).cast::<u8>() = (_rt::as_i32(hour5)) as u8;
                                        *base.add(17).cast::<u8>() = (_rt::as_i32(minute5)) as u8;
                                        *base.add(18).cast::<u8>() = (_rt::as_i32(second5)) as u8;
                                        *base.add(20).cast::<i32>() = _rt::as_i32(nanosecond5);
                                    }
                                    DbValue::Timestamp(e) => {
                                        *base.add(0).cast::<u8>() = (16i32) as u8;
                                        let Timestamp {
                                            date: date6,
                                            time: time6,
                                        } = e;
                                        let Date {
                                            year: year7,
                                            month: month7,
                                            day: day7,
                                        } = date6;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(year7);
                                        *base.add(12).cast::<u8>() = (_rt::as_i32(month7)) as u8;
                                        *base.add(13).cast::<u8>() = (_rt::as_i32(day7)) as u8;
                                        let Time {
                                            hour: hour8,
                                            minute: minute8,
                                            second: second8,
                                            nanosecond: nanosecond8,
                                        } = time6;
                                        *base.add(16).cast::<u8>() = (_rt::as_i32(hour8)) as u8;
                                        *base.add(17).cast::<u8>() = (_rt::as_i32(minute8)) as u8;
                                        *base.add(18).cast::<u8>() = (_rt::as_i32(second8)) as u8;
                                        *base.add(20).cast::<i32>() = _rt::as_i32(nanosecond8);
                                    }
                                    DbValue::Time(e) => {
                                        *base.add(0).cast::<u8>() = (17i32) as u8;
                                        let Time {
                                            hour: hour9,
                                            minute: minute9,
                                            second: second9,
                                            nanosecond: nanosecond9,
                                        } = e;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(hour9)) as u8;
                                        *base.add(9).cast::<u8>() = (_rt::as_i32(minute9)) as u8;
                                        *base.add(10).cast::<u8>() = (_rt::as_i32(second9)) as u8;
                                        *base.add(12).cast::<i32>() = _rt::as_i32(nanosecond9);
                                    }
                                    DbValue::Year(e) => {
                                        *base.add(0).cast::<u8>() = (18i32) as u8;
                                        *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                    }
                                    DbValue::Fixchar(e) => {
                                        *base.add(0).cast::<u8>() = (19i32) as u8;
                                        let vec10 = e;
                                        let ptr10 = vec10.as_ptr().cast::<u8>();
                                        let len10 = vec10.len();
                                        *base.add(12).cast::<usize>() = len10;
                                        *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                    }
                                    DbValue::Varchar(e) => {
                                        *base.add(0).cast::<u8>() = (20i32) as u8;
                                        let vec11 = e;
                                        let ptr11 = vec11.as_ptr().cast::<u8>();
                                        let len11 = vec11.len();
                                        *base.add(12).cast::<usize>() = len11;
                                        *base.add(8).cast::<*mut u8>() = ptr11.cast_mut();
                                    }
                                    DbValue::Tinytext(e) => {
                                        *base.add(0).cast::<u8>() = (21i32) as u8;
                                        let vec12 = e;
                                        let ptr12 = vec12.as_ptr().cast::<u8>();
                                        let len12 = vec12.len();
                                        *base.add(12).cast::<usize>() = len12;
                                        *base.add(8).cast::<*mut u8>() = ptr12.cast_mut();
                                    }
                                    DbValue::Text(e) => {
                                        *base.add(0).cast::<u8>() = (22i32) as u8;
                                        let vec13 = e;
                                        let ptr13 = vec13.as_ptr().cast::<u8>();
                                        let len13 = vec13.len();
                                        *base.add(12).cast::<usize>() = len13;
                                        *base.add(8).cast::<*mut u8>() = ptr13.cast_mut();
                                    }
                                    DbValue::Mediumtext(e) => {
                                        *base.add(0).cast::<u8>() = (23i32) as u8;
                                        let vec14 = e;
                                        let ptr14 = vec14.as_ptr().cast::<u8>();
                                        let len14 = vec14.len();
                                        *base.add(12).cast::<usize>() = len14;
                                        *base.add(8).cast::<*mut u8>() = ptr14.cast_mut();
                                    }
                                    DbValue::Longtext(e) => {
                                        *base.add(0).cast::<u8>() = (24i32) as u8;
                                        let vec15 = e;
                                        let ptr15 = vec15.as_ptr().cast::<u8>();
                                        let len15 = vec15.len();
                                        *base.add(12).cast::<usize>() = len15;
                                        *base.add(8).cast::<*mut u8>() = ptr15.cast_mut();
                                    }
                                    DbValue::Binary(e) => {
                                        *base.add(0).cast::<u8>() = (25i32) as u8;
                                        let vec16 = e;
                                        let ptr16 = vec16.as_ptr().cast::<u8>();
                                        let len16 = vec16.len();
                                        *base.add(12).cast::<usize>() = len16;
                                        *base.add(8).cast::<*mut u8>() = ptr16.cast_mut();
                                    }
                                    DbValue::Varbinary(e) => {
                                        *base.add(0).cast::<u8>() = (26i32) as u8;
                                        let vec17 = e;
                                        let ptr17 = vec17.as_ptr().cast::<u8>();
                                        let len17 = vec17.len();
                                        *base.add(12).cast::<usize>() = len17;
                                        *base.add(8).cast::<*mut u8>() = ptr17.cast_mut();
                                    }
                                    DbValue::Tinyblob(e) => {
                                        *base.add(0).cast::<u8>() = (27i32) as u8;
                                        let vec18 = e;
                                        let ptr18 = vec18.as_ptr().cast::<u8>();
                                        let len18 = vec18.len();
                                        *base.add(12).cast::<usize>() = len18;
                                        *base.add(8).cast::<*mut u8>() = ptr18.cast_mut();
                                    }
                                    DbValue::Blob(e) => {
                                        *base.add(0).cast::<u8>() = (28i32) as u8;
                                        let vec19 = e;
                                        let ptr19 = vec19.as_ptr().cast::<u8>();
                                        let len19 = vec19.len();
                                        *base.add(12).cast::<usize>() = len19;
                                        *base.add(8).cast::<*mut u8>() = ptr19.cast_mut();
                                    }
                                    DbValue::Mediumblob(e) => {
                                        *base.add(0).cast::<u8>() = (29i32) as u8;
                                        let vec20 = e;
                                        let ptr20 = vec20.as_ptr().cast::<u8>();
                                        let len20 = vec20.len();
                                        *base.add(12).cast::<usize>() = len20;
                                        *base.add(8).cast::<*mut u8>() = ptr20.cast_mut();
                                    }
                                    DbValue::Longblob(e) => {
                                        *base.add(0).cast::<u8>() = (30i32) as u8;
                                        let vec21 = e;
                                        let ptr21 = vec21.as_ptr().cast::<u8>();
                                        let len21 = vec21.len();
                                        *base.add(12).cast::<usize>() = len21;
                                        *base.add(8).cast::<*mut u8>() = ptr21.cast_mut();
                                    }
                                    DbValue::Enumeration(e) => {
                                        *base.add(0).cast::<u8>() = (31i32) as u8;
                                        let vec22 = e;
                                        let ptr22 = vec22.as_ptr().cast::<u8>();
                                        let len22 = vec22.len();
                                        *base.add(12).cast::<usize>() = len22;
                                        *base.add(8).cast::<*mut u8>() = ptr22.cast_mut();
                                    }
                                    DbValue::Set(e) => {
                                        *base.add(0).cast::<u8>() = (32i32) as u8;
                                        let vec23 = e;
                                        let ptr23 = vec23.as_ptr().cast::<u8>();
                                        let len23 = vec23.len();
                                        *base.add(12).cast::<usize>() = len23;
                                        *base.add(8).cast::<*mut u8>() = ptr23.cast_mut();
                                    }
                                    DbValue::Bit(e) => {
                                        *base.add(0).cast::<u8>() = (33i32) as u8;
                                        let vec24 = e;
                                        let len24 = vec24.len();
                                        let layout24 =
                                            _rt::alloc::Layout::from_size_align_unchecked(
                                                vec24.len() * 1,
                                                1,
                                            );
                                        let result24 = if layout24.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout24).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout24);
                                            }
                                            ptr
                                        } else {
                                            {
                                                ::core::ptr::null_mut()
                                            }
                                        };
                                        for (i, e) in vec24.into_iter().enumerate() {
                                            let base = result24.add(i * 1);
                                            {
                                                *base.add(0).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                })
                                                    as u8;
                                            }
                                        }
                                        *base.add(12).cast::<usize>() = len24;
                                        *base.add(8).cast::<*mut u8>() = result24;
                                        cleanup_list.extend_from_slice(&[(result24, layout24)]);
                                    }
                                    DbValue::Json(e) => {
                                        *base.add(0).cast::<u8>() = (34i32) as u8;
                                        let vec25 = e;
                                        let ptr25 = vec25.as_ptr().cast::<u8>();
                                        let len25 = vec25.len();
                                        *base.add(12).cast::<usize>() = len25;
                                        *base.add(8).cast::<*mut u8>() = ptr25.cast_mut();
                                    }
                                    DbValue::Null => {
                                        *base.add(0).cast::<u8>() = (35i32) as u8;
                                    }
                                }
                            }
                        }
                        let ptr27 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:rdbms/mysql@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]db-connection.query"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            result26,
                            len26,
                            ptr27,
                        );
                        let l28 = i32::from(*ptr27.add(0).cast::<u8>());
                        if layout26.size() != 0 {
                            _rt::alloc::dealloc(result26.cast(), layout26);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l28 {
                            0 => {
                                let e = {
                                    let l29 = *ptr27.add(4).cast::<i32>();

                                    DbResultSet::from_handle(l29 as u32)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l30 = i32::from(*ptr27.add(4).cast::<u8>());
                                    let v46 = match l30 {
                                        0 => {
                                            let e46 = {
                                                let l31 = *ptr27.add(8).cast::<*mut u8>();
                                                let l32 = *ptr27.add(12).cast::<usize>();
                                                let len33 = l32;
                                                let bytes33 = _rt::Vec::from_raw_parts(
                                                    l31.cast(),
                                                    len33,
                                                    len33,
                                                );

                                                _rt::string_lift(bytes33)
                                            };
                                            Error::ConnectionFailure(e46)
                                        }
                                        1 => {
                                            let e46 = {
                                                let l34 = *ptr27.add(8).cast::<*mut u8>();
                                                let l35 = *ptr27.add(12).cast::<usize>();
                                                let len36 = l35;
                                                let bytes36 = _rt::Vec::from_raw_parts(
                                                    l34.cast(),
                                                    len36,
                                                    len36,
                                                );

                                                _rt::string_lift(bytes36)
                                            };
                                            Error::QueryParameterFailure(e46)
                                        }
                                        2 => {
                                            let e46 = {
                                                let l37 = *ptr27.add(8).cast::<*mut u8>();
                                                let l38 = *ptr27.add(12).cast::<usize>();
                                                let len39 = l38;
                                                let bytes39 = _rt::Vec::from_raw_parts(
                                                    l37.cast(),
                                                    len39,
                                                    len39,
                                                );

                                                _rt::string_lift(bytes39)
                                            };
                                            Error::QueryExecutionFailure(e46)
                                        }
                                        3 => {
                                            let e46 = {
                                                let l40 = *ptr27.add(8).cast::<*mut u8>();
                                                let l41 = *ptr27.add(12).cast::<usize>();
                                                let len42 = l41;
                                                let bytes42 = _rt::Vec::from_raw_parts(
                                                    l40.cast(),
                                                    len42,
                                                    len42,
                                                );

                                                _rt::string_lift(bytes42)
                                            };
                                            Error::QueryResponseFailure(e46)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 4, "invalid enum discriminant");
                                            let e46 = {
                                                let l43 = *ptr27.add(8).cast::<*mut u8>();
                                                let l44 = *ptr27.add(12).cast::<usize>();
                                                let len45 = l44;
                                                let bytes45 = _rt::Vec::from_raw_parts(
                                                    l43.cast(),
                                                    len45,
                                                    len45,
                                                );

                                                _rt::string_lift(bytes45)
                                            };
                                            Error::Other(e46)
                                        }
                                    };

                                    v46
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl DbConnection {
                #[allow(unused_unsafe, clippy::all)]
                pub fn execute(&self, statement: &str, params: &[DbValue]) -> Result<u64, Error> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 24]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 24]);
                        let vec0 = statement;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec26 = params;
                        let len26 = vec26.len();
                        let layout26 =
                            _rt::alloc::Layout::from_size_align_unchecked(vec26.len() * 24, 8);
                        let result26 = if layout26.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout26).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout26);
                            }
                            ptr
                        } else {
                            {
                                ::core::ptr::null_mut()
                            }
                        };
                        for (i, e) in vec26.into_iter().enumerate() {
                            let base = result26.add(i * 24);
                            {
                                match e {
                                    DbValue::Boolean(e) => {
                                        *base.add(0).cast::<u8>() = (0i32) as u8;
                                        *base.add(8).cast::<u8>() = (match e {
                                            true => 1,
                                            false => 0,
                                        })
                                            as u8;
                                    }
                                    DbValue::Tinyint(e) => {
                                        *base.add(0).cast::<u8>() = (1i32) as u8;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                    }
                                    DbValue::Smallint(e) => {
                                        *base.add(0).cast::<u8>() = (2i32) as u8;
                                        *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                    }
                                    DbValue::Mediumint(e) => {
                                        *base.add(0).cast::<u8>() = (3i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::Int(e) => {
                                        *base.add(0).cast::<u8>() = (4i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::Bigint(e) => {
                                        *base.add(0).cast::<u8>() = (5i32) as u8;
                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    DbValue::TinyintUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (6i32) as u8;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                    }
                                    DbValue::SmallintUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (7i32) as u8;
                                        *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                    }
                                    DbValue::MediumintUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (8i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::IntUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (9i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::BigintUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (10i32) as u8;
                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    DbValue::Float(e) => {
                                        *base.add(0).cast::<u8>() = (11i32) as u8;
                                        *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                    }
                                    DbValue::Double(e) => {
                                        *base.add(0).cast::<u8>() = (12i32) as u8;
                                        *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                    }
                                    DbValue::Decimal(e) => {
                                        *base.add(0).cast::<u8>() = (13i32) as u8;
                                        let vec1 = e;
                                        let ptr1 = vec1.as_ptr().cast::<u8>();
                                        let len1 = vec1.len();
                                        *base.add(12).cast::<usize>() = len1;
                                        *base.add(8).cast::<*mut u8>() = ptr1.cast_mut();
                                    }
                                    DbValue::Date(e) => {
                                        *base.add(0).cast::<u8>() = (14i32) as u8;
                                        let Date {
                                            year: year2,
                                            month: month2,
                                            day: day2,
                                        } = e;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(year2);
                                        *base.add(12).cast::<u8>() = (_rt::as_i32(month2)) as u8;
                                        *base.add(13).cast::<u8>() = (_rt::as_i32(day2)) as u8;
                                    }
                                    DbValue::Datetime(e) => {
                                        *base.add(0).cast::<u8>() = (15i32) as u8;
                                        let Timestamp {
                                            date: date3,
                                            time: time3,
                                        } = e;
                                        let Date {
                                            year: year4,
                                            month: month4,
                                            day: day4,
                                        } = date3;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(year4);
                                        *base.add(12).cast::<u8>() = (_rt::as_i32(month4)) as u8;
                                        *base.add(13).cast::<u8>() = (_rt::as_i32(day4)) as u8;
                                        let Time {
                                            hour: hour5,
                                            minute: minute5,
                                            second: second5,
                                            nanosecond: nanosecond5,
                                        } = time3;
                                        *base.add(16).cast::<u8>() = (_rt::as_i32(hour5)) as u8;
                                        *base.add(17).cast::<u8>() = (_rt::as_i32(minute5)) as u8;
                                        *base.add(18).cast::<u8>() = (_rt::as_i32(second5)) as u8;
                                        *base.add(20).cast::<i32>() = _rt::as_i32(nanosecond5);
                                    }
                                    DbValue::Timestamp(e) => {
                                        *base.add(0).cast::<u8>() = (16i32) as u8;
                                        let Timestamp {
                                            date: date6,
                                            time: time6,
                                        } = e;
                                        let Date {
                                            year: year7,
                                            month: month7,
                                            day: day7,
                                        } = date6;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(year7);
                                        *base.add(12).cast::<u8>() = (_rt::as_i32(month7)) as u8;
                                        *base.add(13).cast::<u8>() = (_rt::as_i32(day7)) as u8;
                                        let Time {
                                            hour: hour8,
                                            minute: minute8,
                                            second: second8,
                                            nanosecond: nanosecond8,
                                        } = time6;
                                        *base.add(16).cast::<u8>() = (_rt::as_i32(hour8)) as u8;
                                        *base.add(17).cast::<u8>() = (_rt::as_i32(minute8)) as u8;
                                        *base.add(18).cast::<u8>() = (_rt::as_i32(second8)) as u8;
                                        *base.add(20).cast::<i32>() = _rt::as_i32(nanosecond8);
                                    }
                                    DbValue::Time(e) => {
                                        *base.add(0).cast::<u8>() = (17i32) as u8;
                                        let Time {
                                            hour: hour9,
                                            minute: minute9,
                                            second: second9,
                                            nanosecond: nanosecond9,
                                        } = e;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(hour9)) as u8;
                                        *base.add(9).cast::<u8>() = (_rt::as_i32(minute9)) as u8;
                                        *base.add(10).cast::<u8>() = (_rt::as_i32(second9)) as u8;
                                        *base.add(12).cast::<i32>() = _rt::as_i32(nanosecond9);
                                    }
                                    DbValue::Year(e) => {
                                        *base.add(0).cast::<u8>() = (18i32) as u8;
                                        *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                    }
                                    DbValue::Fixchar(e) => {
                                        *base.add(0).cast::<u8>() = (19i32) as u8;
                                        let vec10 = e;
                                        let ptr10 = vec10.as_ptr().cast::<u8>();
                                        let len10 = vec10.len();
                                        *base.add(12).cast::<usize>() = len10;
                                        *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                    }
                                    DbValue::Varchar(e) => {
                                        *base.add(0).cast::<u8>() = (20i32) as u8;
                                        let vec11 = e;
                                        let ptr11 = vec11.as_ptr().cast::<u8>();
                                        let len11 = vec11.len();
                                        *base.add(12).cast::<usize>() = len11;
                                        *base.add(8).cast::<*mut u8>() = ptr11.cast_mut();
                                    }
                                    DbValue::Tinytext(e) => {
                                        *base.add(0).cast::<u8>() = (21i32) as u8;
                                        let vec12 = e;
                                        let ptr12 = vec12.as_ptr().cast::<u8>();
                                        let len12 = vec12.len();
                                        *base.add(12).cast::<usize>() = len12;
                                        *base.add(8).cast::<*mut u8>() = ptr12.cast_mut();
                                    }
                                    DbValue::Text(e) => {
                                        *base.add(0).cast::<u8>() = (22i32) as u8;
                                        let vec13 = e;
                                        let ptr13 = vec13.as_ptr().cast::<u8>();
                                        let len13 = vec13.len();
                                        *base.add(12).cast::<usize>() = len13;
                                        *base.add(8).cast::<*mut u8>() = ptr13.cast_mut();
                                    }
                                    DbValue::Mediumtext(e) => {
                                        *base.add(0).cast::<u8>() = (23i32) as u8;
                                        let vec14 = e;
                                        let ptr14 = vec14.as_ptr().cast::<u8>();
                                        let len14 = vec14.len();
                                        *base.add(12).cast::<usize>() = len14;
                                        *base.add(8).cast::<*mut u8>() = ptr14.cast_mut();
                                    }
                                    DbValue::Longtext(e) => {
                                        *base.add(0).cast::<u8>() = (24i32) as u8;
                                        let vec15 = e;
                                        let ptr15 = vec15.as_ptr().cast::<u8>();
                                        let len15 = vec15.len();
                                        *base.add(12).cast::<usize>() = len15;
                                        *base.add(8).cast::<*mut u8>() = ptr15.cast_mut();
                                    }
                                    DbValue::Binary(e) => {
                                        *base.add(0).cast::<u8>() = (25i32) as u8;
                                        let vec16 = e;
                                        let ptr16 = vec16.as_ptr().cast::<u8>();
                                        let len16 = vec16.len();
                                        *base.add(12).cast::<usize>() = len16;
                                        *base.add(8).cast::<*mut u8>() = ptr16.cast_mut();
                                    }
                                    DbValue::Varbinary(e) => {
                                        *base.add(0).cast::<u8>() = (26i32) as u8;
                                        let vec17 = e;
                                        let ptr17 = vec17.as_ptr().cast::<u8>();
                                        let len17 = vec17.len();
                                        *base.add(12).cast::<usize>() = len17;
                                        *base.add(8).cast::<*mut u8>() = ptr17.cast_mut();
                                    }
                                    DbValue::Tinyblob(e) => {
                                        *base.add(0).cast::<u8>() = (27i32) as u8;
                                        let vec18 = e;
                                        let ptr18 = vec18.as_ptr().cast::<u8>();
                                        let len18 = vec18.len();
                                        *base.add(12).cast::<usize>() = len18;
                                        *base.add(8).cast::<*mut u8>() = ptr18.cast_mut();
                                    }
                                    DbValue::Blob(e) => {
                                        *base.add(0).cast::<u8>() = (28i32) as u8;
                                        let vec19 = e;
                                        let ptr19 = vec19.as_ptr().cast::<u8>();
                                        let len19 = vec19.len();
                                        *base.add(12).cast::<usize>() = len19;
                                        *base.add(8).cast::<*mut u8>() = ptr19.cast_mut();
                                    }
                                    DbValue::Mediumblob(e) => {
                                        *base.add(0).cast::<u8>() = (29i32) as u8;
                                        let vec20 = e;
                                        let ptr20 = vec20.as_ptr().cast::<u8>();
                                        let len20 = vec20.len();
                                        *base.add(12).cast::<usize>() = len20;
                                        *base.add(8).cast::<*mut u8>() = ptr20.cast_mut();
                                    }
                                    DbValue::Longblob(e) => {
                                        *base.add(0).cast::<u8>() = (30i32) as u8;
                                        let vec21 = e;
                                        let ptr21 = vec21.as_ptr().cast::<u8>();
                                        let len21 = vec21.len();
                                        *base.add(12).cast::<usize>() = len21;
                                        *base.add(8).cast::<*mut u8>() = ptr21.cast_mut();
                                    }
                                    DbValue::Enumeration(e) => {
                                        *base.add(0).cast::<u8>() = (31i32) as u8;
                                        let vec22 = e;
                                        let ptr22 = vec22.as_ptr().cast::<u8>();
                                        let len22 = vec22.len();
                                        *base.add(12).cast::<usize>() = len22;
                                        *base.add(8).cast::<*mut u8>() = ptr22.cast_mut();
                                    }
                                    DbValue::Set(e) => {
                                        *base.add(0).cast::<u8>() = (32i32) as u8;
                                        let vec23 = e;
                                        let ptr23 = vec23.as_ptr().cast::<u8>();
                                        let len23 = vec23.len();
                                        *base.add(12).cast::<usize>() = len23;
                                        *base.add(8).cast::<*mut u8>() = ptr23.cast_mut();
                                    }
                                    DbValue::Bit(e) => {
                                        *base.add(0).cast::<u8>() = (33i32) as u8;
                                        let vec24 = e;
                                        let len24 = vec24.len();
                                        let layout24 =
                                            _rt::alloc::Layout::from_size_align_unchecked(
                                                vec24.len() * 1,
                                                1,
                                            );
                                        let result24 = if layout24.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout24).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout24);
                                            }
                                            ptr
                                        } else {
                                            {
                                                ::core::ptr::null_mut()
                                            }
                                        };
                                        for (i, e) in vec24.into_iter().enumerate() {
                                            let base = result24.add(i * 1);
                                            {
                                                *base.add(0).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                })
                                                    as u8;
                                            }
                                        }
                                        *base.add(12).cast::<usize>() = len24;
                                        *base.add(8).cast::<*mut u8>() = result24;
                                        cleanup_list.extend_from_slice(&[(result24, layout24)]);
                                    }
                                    DbValue::Json(e) => {
                                        *base.add(0).cast::<u8>() = (34i32) as u8;
                                        let vec25 = e;
                                        let ptr25 = vec25.as_ptr().cast::<u8>();
                                        let len25 = vec25.len();
                                        *base.add(12).cast::<usize>() = len25;
                                        *base.add(8).cast::<*mut u8>() = ptr25.cast_mut();
                                    }
                                    DbValue::Null => {
                                        *base.add(0).cast::<u8>() = (35i32) as u8;
                                    }
                                }
                            }
                        }
                        let ptr27 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:rdbms/mysql@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]db-connection.execute"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            result26,
                            len26,
                            ptr27,
                        );
                        let l28 = i32::from(*ptr27.add(0).cast::<u8>());
                        if layout26.size() != 0 {
                            _rt::alloc::dealloc(result26.cast(), layout26);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l28 {
                            0 => {
                                let e = {
                                    let l29 = *ptr27.add(8).cast::<i64>();

                                    l29 as u64
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l30 = i32::from(*ptr27.add(8).cast::<u8>());
                                    let v46 = match l30 {
                                        0 => {
                                            let e46 = {
                                                let l31 = *ptr27.add(12).cast::<*mut u8>();
                                                let l32 = *ptr27.add(16).cast::<usize>();
                                                let len33 = l32;
                                                let bytes33 = _rt::Vec::from_raw_parts(
                                                    l31.cast(),
                                                    len33,
                                                    len33,
                                                );

                                                _rt::string_lift(bytes33)
                                            };
                                            Error::ConnectionFailure(e46)
                                        }
                                        1 => {
                                            let e46 = {
                                                let l34 = *ptr27.add(12).cast::<*mut u8>();
                                                let l35 = *ptr27.add(16).cast::<usize>();
                                                let len36 = l35;
                                                let bytes36 = _rt::Vec::from_raw_parts(
                                                    l34.cast(),
                                                    len36,
                                                    len36,
                                                );

                                                _rt::string_lift(bytes36)
                                            };
                                            Error::QueryParameterFailure(e46)
                                        }
                                        2 => {
                                            let e46 = {
                                                let l37 = *ptr27.add(12).cast::<*mut u8>();
                                                let l38 = *ptr27.add(16).cast::<usize>();
                                                let len39 = l38;
                                                let bytes39 = _rt::Vec::from_raw_parts(
                                                    l37.cast(),
                                                    len39,
                                                    len39,
                                                );

                                                _rt::string_lift(bytes39)
                                            };
                                            Error::QueryExecutionFailure(e46)
                                        }
                                        3 => {
                                            let e46 = {
                                                let l40 = *ptr27.add(12).cast::<*mut u8>();
                                                let l41 = *ptr27.add(16).cast::<usize>();
                                                let len42 = l41;
                                                let bytes42 = _rt::Vec::from_raw_parts(
                                                    l40.cast(),
                                                    len42,
                                                    len42,
                                                );

                                                _rt::string_lift(bytes42)
                                            };
                                            Error::QueryResponseFailure(e46)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 4, "invalid enum discriminant");
                                            let e46 = {
                                                let l43 = *ptr27.add(12).cast::<*mut u8>();
                                                let l44 = *ptr27.add(16).cast::<usize>();
                                                let len45 = l44;
                                                let bytes45 = _rt::Vec::from_raw_parts(
                                                    l43.cast(),
                                                    len45,
                                                    len45,
                                                );

                                                _rt::string_lift(bytes45)
                                            };
                                            Error::Other(e46)
                                        }
                                    };

                                    v46
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
        }
    }
}
#[allow(dead_code)]
pub mod exports {
    #[allow(dead_code)]
    pub mod golem {
        #[allow(dead_code)]
        pub mod it {
            #[allow(dead_code, clippy::all)]
            pub mod api {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type PostgresDbRow = super::super::super::super::wasi::rdbms::postgres::DbRow;
                pub type PostgresDbColumn =
                    super::super::super::super::wasi::rdbms::postgres::DbColumn;
                pub type MysqlDbRow = super::super::super::super::wasi::rdbms::mysql::DbRow;
                pub type MysqlDbColumn = super::super::super::super::wasi::rdbms::mysql::DbColumn;
                #[derive(Clone)]
                pub struct PostgresQueryResult {
                    pub columns: _rt::Vec<PostgresDbColumn>,
                    pub rows: _rt::Vec<PostgresDbRow>,
                }
                impl ::core::fmt::Debug for PostgresQueryResult {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("PostgresQueryResult")
                            .field("columns", &self.columns)
                            .field("rows", &self.rows)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub struct MysqlQueryResult {
                    pub columns: _rt::Vec<MysqlDbColumn>,
                    pub rows: _rt::Vec<MysqlDbRow>,
                }
                impl ::core::fmt::Debug for MysqlQueryResult {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("MysqlQueryResult")
                            .field("columns", &self.columns)
                            .field("rows", &self.rows)
                            .finish()
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_check_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::check();
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let vec2 = (result0.into_bytes()).into_boxed_slice();
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    ::core::mem::forget(vec2);
                    *ptr1.add(4).cast::<usize>() = len2;
                    *ptr1.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_check<T: Guest>(arg0: *mut u8) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0.add(4).cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_mysql_execute_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let base4 = arg2;
                    let len4 = arg3;
                    let mut result4 = _rt::Vec::with_capacity(len4);
                    for i in 0..len4 {
                        let base = base4.add(i * 8);
                        let e4 = {
                            let l1 = *base.add(0).cast::<*mut u8>();
                            let l2 = *base.add(4).cast::<usize>();
                            let len3 = l2;
                            let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);

                            _rt::string_lift(bytes3)
                        };
                        result4.push(e4);
                    }
                    _rt::cabi_dealloc(base4, len4 * 8, 4);
                    let result5 = T::mysql_execute(_rt::string_lift(bytes0), result4);
                    let ptr6 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result5 {
                        Ok(e) => {
                            *ptr6.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr6.add(8).cast::<i64>() = _rt::as_i64(e);
                        }
                        Err(e) => {
                            *ptr6.add(0).cast::<u8>() = (1i32) as u8;
                            let vec7 = (e.into_bytes()).into_boxed_slice();
                            let ptr7 = vec7.as_ptr().cast::<u8>();
                            let len7 = vec7.len();
                            ::core::mem::forget(vec7);
                            *ptr6.add(12).cast::<usize>() = len7;
                            *ptr6.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                        }
                    };
                    ptr6
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_mysql_execute<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = *arg0.add(8).cast::<*mut u8>();
                            let l2 = *arg0.add(12).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_mysql_query_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let base4 = arg2;
                    let len4 = arg3;
                    let mut result4 = _rt::Vec::with_capacity(len4);
                    for i in 0..len4 {
                        let base = base4.add(i * 8);
                        let e4 = {
                            let l1 = *base.add(0).cast::<*mut u8>();
                            let l2 = *base.add(4).cast::<usize>();
                            let len3 = l2;
                            let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);

                            _rt::string_lift(bytes3)
                        };
                        result4.push(e4);
                    }
                    _rt::cabi_dealloc(base4, len4 * 8, 4);
                    let result5 = T::mysql_query(_rt::string_lift(bytes0), result4);
                    let ptr6 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result5 {
                        Ok(e) => {
                            *ptr6.add(0).cast::<u8>() = (0i32) as u8;
                            let MysqlQueryResult {
                                columns: columns7,
                                rows: rows7,
                            } = e;
                            let vec12 = columns7;
                            let len12 = vec12.len();
                            let layout12 =
                                _rt::alloc::Layout::from_size_align_unchecked(vec12.len() * 32, 8);
                            let result12 = if layout12.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout12);
                                }
                                ptr
                            } else {
                                {
                                    ::core::ptr::null_mut()
                                }
                            };
                            for (i, e) in vec12.into_iter().enumerate() {
                                let base = result12.add(i * 32);
                                {
                                    let super::super::super::super::wasi::rdbms::mysql::DbColumn {
                                        ordinal: ordinal8,
                                        name: name8,
                                        db_type: db_type8,
                                        db_type_name: db_type_name8,
                                    } = e;
                                    *base.add(0).cast::<i64>() = _rt::as_i64(ordinal8);
                                    let vec9 = (name8.into_bytes()).into_boxed_slice();
                                    let ptr9 = vec9.as_ptr().cast::<u8>();
                                    let len9 = vec9.len();
                                    ::core::mem::forget(vec9);
                                    *base.add(12).cast::<usize>() = len9;
                                    *base.add(8).cast::<*mut u8>() = ptr9.cast_mut();
                                    use super::super::super::super::wasi::rdbms::mysql::DbColumnType as V10;
                                    match db_type8 {
                                        V10::Boolean => {
                                            *base.add(16).cast::<u8>() = (0i32) as u8;
                                        }
                                        V10::Tinyint => {
                                            *base.add(16).cast::<u8>() = (1i32) as u8;
                                        }
                                        V10::Smallint => {
                                            *base.add(16).cast::<u8>() = (2i32) as u8;
                                        }
                                        V10::Mediumint => {
                                            *base.add(16).cast::<u8>() = (3i32) as u8;
                                        }
                                        V10::Int => {
                                            *base.add(16).cast::<u8>() = (4i32) as u8;
                                        }
                                        V10::Bigint => {
                                            *base.add(16).cast::<u8>() = (5i32) as u8;
                                        }
                                        V10::TinyintUnsigned => {
                                            *base.add(16).cast::<u8>() = (6i32) as u8;
                                        }
                                        V10::SmallintUnsigned => {
                                            *base.add(16).cast::<u8>() = (7i32) as u8;
                                        }
                                        V10::MediumintUnsigned => {
                                            *base.add(16).cast::<u8>() = (8i32) as u8;
                                        }
                                        V10::IntUnsigned => {
                                            *base.add(16).cast::<u8>() = (9i32) as u8;
                                        }
                                        V10::BigintUnsigned => {
                                            *base.add(16).cast::<u8>() = (10i32) as u8;
                                        }
                                        V10::Float => {
                                            *base.add(16).cast::<u8>() = (11i32) as u8;
                                        }
                                        V10::Double => {
                                            *base.add(16).cast::<u8>() = (12i32) as u8;
                                        }
                                        V10::Decimal => {
                                            *base.add(16).cast::<u8>() = (13i32) as u8;
                                        }
                                        V10::Date => {
                                            *base.add(16).cast::<u8>() = (14i32) as u8;
                                        }
                                        V10::Datetime => {
                                            *base.add(16).cast::<u8>() = (15i32) as u8;
                                        }
                                        V10::Timestamp => {
                                            *base.add(16).cast::<u8>() = (16i32) as u8;
                                        }
                                        V10::Time => {
                                            *base.add(16).cast::<u8>() = (17i32) as u8;
                                        }
                                        V10::Year => {
                                            *base.add(16).cast::<u8>() = (18i32) as u8;
                                        }
                                        V10::Fixchar => {
                                            *base.add(16).cast::<u8>() = (19i32) as u8;
                                        }
                                        V10::Varchar => {
                                            *base.add(16).cast::<u8>() = (20i32) as u8;
                                        }
                                        V10::Tinytext => {
                                            *base.add(16).cast::<u8>() = (21i32) as u8;
                                        }
                                        V10::Text => {
                                            *base.add(16).cast::<u8>() = (22i32) as u8;
                                        }
                                        V10::Mediumtext => {
                                            *base.add(16).cast::<u8>() = (23i32) as u8;
                                        }
                                        V10::Longtext => {
                                            *base.add(16).cast::<u8>() = (24i32) as u8;
                                        }
                                        V10::Binary => {
                                            *base.add(16).cast::<u8>() = (25i32) as u8;
                                        }
                                        V10::Varbinary => {
                                            *base.add(16).cast::<u8>() = (26i32) as u8;
                                        }
                                        V10::Tinyblob => {
                                            *base.add(16).cast::<u8>() = (27i32) as u8;
                                        }
                                        V10::Blob => {
                                            *base.add(16).cast::<u8>() = (28i32) as u8;
                                        }
                                        V10::Mediumblob => {
                                            *base.add(16).cast::<u8>() = (29i32) as u8;
                                        }
                                        V10::Longblob => {
                                            *base.add(16).cast::<u8>() = (30i32) as u8;
                                        }
                                        V10::Enumeration => {
                                            *base.add(16).cast::<u8>() = (31i32) as u8;
                                        }
                                        V10::Set => {
                                            *base.add(16).cast::<u8>() = (32i32) as u8;
                                        }
                                        V10::Bit => {
                                            *base.add(16).cast::<u8>() = (33i32) as u8;
                                        }
                                        V10::Json => {
                                            *base.add(16).cast::<u8>() = (34i32) as u8;
                                        }
                                    }
                                    let vec11 = (db_type_name8.into_bytes()).into_boxed_slice();
                                    let ptr11 = vec11.as_ptr().cast::<u8>();
                                    let len11 = vec11.len();
                                    ::core::mem::forget(vec11);
                                    *base.add(24).cast::<usize>() = len11;
                                    *base.add(20).cast::<*mut u8>() = ptr11.cast_mut();
                                }
                            }
                            *ptr6.add(8).cast::<usize>() = len12;
                            *ptr6.add(4).cast::<*mut u8>() = result12;
                            let vec41 = rows7;
                            let len41 = vec41.len();
                            let layout41 =
                                _rt::alloc::Layout::from_size_align_unchecked(vec41.len() * 8, 4);
                            let result41 = if layout41.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout41).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout41);
                                }
                                ptr
                            } else {
                                {
                                    ::core::ptr::null_mut()
                                }
                            };
                            for (i, e) in vec41.into_iter().enumerate() {
                                let base = result41.add(i * 8);
                                {
                                    let super::super::super::super::wasi::rdbms::mysql::DbRow {
                                        values: values13,
                                    } = e;
                                    let vec40 = values13;
                                    let len40 = vec40.len();
                                    let layout40 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec40.len() * 24,
                                        8,
                                    );
                                    let result40 = if layout40.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout40).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout40);
                                        }
                                        ptr
                                    } else {
                                        {
                                            ::core::ptr::null_mut()
                                        }
                                    };
                                    for (i, e) in vec40.into_iter().enumerate() {
                                        let base = result40.add(i * 24);
                                        {
                                            use super::super::super::super::wasi::rdbms::mysql::DbValue as V39;
                                            match e {
                                                V39::Boolean(e) => {
                                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                                    *base.add(8).cast::<u8>() = (match e {
                                                        true => 1,
                                                        false => 0,
                                                    })
                                                        as u8;
                                                }
                                                V39::Tinyint(e) => {
                                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                                    *base.add(8).cast::<u8>() =
                                                        (_rt::as_i32(e)) as u8;
                                                }
                                                V39::Smallint(e) => {
                                                    *base.add(0).cast::<u8>() = (2i32) as u8;
                                                    *base.add(8).cast::<u16>() =
                                                        (_rt::as_i32(e)) as u16;
                                                }
                                                V39::Mediumint(e) => {
                                                    *base.add(0).cast::<u8>() = (3i32) as u8;
                                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                }
                                                V39::Int(e) => {
                                                    *base.add(0).cast::<u8>() = (4i32) as u8;
                                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                }
                                                V39::Bigint(e) => {
                                                    *base.add(0).cast::<u8>() = (5i32) as u8;
                                                    *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                }
                                                V39::TinyintUnsigned(e) => {
                                                    *base.add(0).cast::<u8>() = (6i32) as u8;
                                                    *base.add(8).cast::<u8>() =
                                                        (_rt::as_i32(e)) as u8;
                                                }
                                                V39::SmallintUnsigned(e) => {
                                                    *base.add(0).cast::<u8>() = (7i32) as u8;
                                                    *base.add(8).cast::<u16>() =
                                                        (_rt::as_i32(e)) as u16;
                                                }
                                                V39::MediumintUnsigned(e) => {
                                                    *base.add(0).cast::<u8>() = (8i32) as u8;
                                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                }
                                                V39::IntUnsigned(e) => {
                                                    *base.add(0).cast::<u8>() = (9i32) as u8;
                                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                }
                                                V39::BigintUnsigned(e) => {
                                                    *base.add(0).cast::<u8>() = (10i32) as u8;
                                                    *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                }
                                                V39::Float(e) => {
                                                    *base.add(0).cast::<u8>() = (11i32) as u8;
                                                    *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                                }
                                                V39::Double(e) => {
                                                    *base.add(0).cast::<u8>() = (12i32) as u8;
                                                    *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                                }
                                                V39::Decimal(e) => {
                                                    *base.add(0).cast::<u8>() = (13i32) as u8;
                                                    let vec14 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr14 = vec14.as_ptr().cast::<u8>();
                                                    let len14 = vec14.len();
                                                    ::core::mem::forget(vec14);
                                                    *base.add(12).cast::<usize>() = len14;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr14.cast_mut();
                                                }
                                                V39::Date(e) => {
                                                    *base.add(0).cast::<u8>() = (14i32) as u8;
                                                    let super::super::super::super::wasi::rdbms::mysql::Date{ year:year15, month:month15, day:day15, } = e;
                                                    *base.add(8).cast::<i32>() =
                                                        _rt::as_i32(year15);
                                                    *base.add(12).cast::<u8>() =
                                                        (_rt::as_i32(month15)) as u8;
                                                    *base.add(13).cast::<u8>() =
                                                        (_rt::as_i32(day15)) as u8;
                                                }
                                                V39::Datetime(e) => {
                                                    *base.add(0).cast::<u8>() = (15i32) as u8;
                                                    let super::super::super::super::wasi::rdbms::mysql::Timestamp{ date:date16, time:time16, } = e;
                                                    let super::super::super::super::wasi::rdbms::mysql::Date{ year:year17, month:month17, day:day17, } = date16;
                                                    *base.add(8).cast::<i32>() =
                                                        _rt::as_i32(year17);
                                                    *base.add(12).cast::<u8>() =
                                                        (_rt::as_i32(month17)) as u8;
                                                    *base.add(13).cast::<u8>() =
                                                        (_rt::as_i32(day17)) as u8;
                                                    let super::super::super::super::wasi::rdbms::mysql::Time{ hour:hour18, minute:minute18, second:second18, nanosecond:nanosecond18, } = time16;
                                                    *base.add(16).cast::<u8>() =
                                                        (_rt::as_i32(hour18)) as u8;
                                                    *base.add(17).cast::<u8>() =
                                                        (_rt::as_i32(minute18)) as u8;
                                                    *base.add(18).cast::<u8>() =
                                                        (_rt::as_i32(second18)) as u8;
                                                    *base.add(20).cast::<i32>() =
                                                        _rt::as_i32(nanosecond18);
                                                }
                                                V39::Timestamp(e) => {
                                                    *base.add(0).cast::<u8>() = (16i32) as u8;
                                                    let super::super::super::super::wasi::rdbms::mysql::Timestamp{ date:date19, time:time19, } = e;
                                                    let super::super::super::super::wasi::rdbms::mysql::Date{ year:year20, month:month20, day:day20, } = date19;
                                                    *base.add(8).cast::<i32>() =
                                                        _rt::as_i32(year20);
                                                    *base.add(12).cast::<u8>() =
                                                        (_rt::as_i32(month20)) as u8;
                                                    *base.add(13).cast::<u8>() =
                                                        (_rt::as_i32(day20)) as u8;
                                                    let super::super::super::super::wasi::rdbms::mysql::Time{ hour:hour21, minute:minute21, second:second21, nanosecond:nanosecond21, } = time19;
                                                    *base.add(16).cast::<u8>() =
                                                        (_rt::as_i32(hour21)) as u8;
                                                    *base.add(17).cast::<u8>() =
                                                        (_rt::as_i32(minute21)) as u8;
                                                    *base.add(18).cast::<u8>() =
                                                        (_rt::as_i32(second21)) as u8;
                                                    *base.add(20).cast::<i32>() =
                                                        _rt::as_i32(nanosecond21);
                                                }
                                                V39::Time(e) => {
                                                    *base.add(0).cast::<u8>() = (17i32) as u8;
                                                    let super::super::super::super::wasi::rdbms::mysql::Time{ hour:hour22, minute:minute22, second:second22, nanosecond:nanosecond22, } = e;
                                                    *base.add(8).cast::<u8>() =
                                                        (_rt::as_i32(hour22)) as u8;
                                                    *base.add(9).cast::<u8>() =
                                                        (_rt::as_i32(minute22)) as u8;
                                                    *base.add(10).cast::<u8>() =
                                                        (_rt::as_i32(second22)) as u8;
                                                    *base.add(12).cast::<i32>() =
                                                        _rt::as_i32(nanosecond22);
                                                }
                                                V39::Year(e) => {
                                                    *base.add(0).cast::<u8>() = (18i32) as u8;
                                                    *base.add(8).cast::<u16>() =
                                                        (_rt::as_i32(e)) as u16;
                                                }
                                                V39::Fixchar(e) => {
                                                    *base.add(0).cast::<u8>() = (19i32) as u8;
                                                    let vec23 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr23 = vec23.as_ptr().cast::<u8>();
                                                    let len23 = vec23.len();
                                                    ::core::mem::forget(vec23);
                                                    *base.add(12).cast::<usize>() = len23;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr23.cast_mut();
                                                }
                                                V39::Varchar(e) => {
                                                    *base.add(0).cast::<u8>() = (20i32) as u8;
                                                    let vec24 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr24 = vec24.as_ptr().cast::<u8>();
                                                    let len24 = vec24.len();
                                                    ::core::mem::forget(vec24);
                                                    *base.add(12).cast::<usize>() = len24;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr24.cast_mut();
                                                }
                                                V39::Tinytext(e) => {
                                                    *base.add(0).cast::<u8>() = (21i32) as u8;
                                                    let vec25 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr25 = vec25.as_ptr().cast::<u8>();
                                                    let len25 = vec25.len();
                                                    ::core::mem::forget(vec25);
                                                    *base.add(12).cast::<usize>() = len25;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr25.cast_mut();
                                                }
                                                V39::Text(e) => {
                                                    *base.add(0).cast::<u8>() = (22i32) as u8;
                                                    let vec26 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr26 = vec26.as_ptr().cast::<u8>();
                                                    let len26 = vec26.len();
                                                    ::core::mem::forget(vec26);
                                                    *base.add(12).cast::<usize>() = len26;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr26.cast_mut();
                                                }
                                                V39::Mediumtext(e) => {
                                                    *base.add(0).cast::<u8>() = (23i32) as u8;
                                                    let vec27 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr27 = vec27.as_ptr().cast::<u8>();
                                                    let len27 = vec27.len();
                                                    ::core::mem::forget(vec27);
                                                    *base.add(12).cast::<usize>() = len27;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr27.cast_mut();
                                                }
                                                V39::Longtext(e) => {
                                                    *base.add(0).cast::<u8>() = (24i32) as u8;
                                                    let vec28 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr28 = vec28.as_ptr().cast::<u8>();
                                                    let len28 = vec28.len();
                                                    ::core::mem::forget(vec28);
                                                    *base.add(12).cast::<usize>() = len28;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr28.cast_mut();
                                                }
                                                V39::Binary(e) => {
                                                    *base.add(0).cast::<u8>() = (25i32) as u8;
                                                    let vec29 = (e).into_boxed_slice();
                                                    let ptr29 = vec29.as_ptr().cast::<u8>();
                                                    let len29 = vec29.len();
                                                    ::core::mem::forget(vec29);
                                                    *base.add(12).cast::<usize>() = len29;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr29.cast_mut();
                                                }
                                                V39::Varbinary(e) => {
                                                    *base.add(0).cast::<u8>() = (26i32) as u8;
                                                    let vec30 = (e).into_boxed_slice();
                                                    let ptr30 = vec30.as_ptr().cast::<u8>();
                                                    let len30 = vec30.len();
                                                    ::core::mem::forget(vec30);
                                                    *base.add(12).cast::<usize>() = len30;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr30.cast_mut();
                                                }
                                                V39::Tinyblob(e) => {
                                                    *base.add(0).cast::<u8>() = (27i32) as u8;
                                                    let vec31 = (e).into_boxed_slice();
                                                    let ptr31 = vec31.as_ptr().cast::<u8>();
                                                    let len31 = vec31.len();
                                                    ::core::mem::forget(vec31);
                                                    *base.add(12).cast::<usize>() = len31;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr31.cast_mut();
                                                }
                                                V39::Blob(e) => {
                                                    *base.add(0).cast::<u8>() = (28i32) as u8;
                                                    let vec32 = (e).into_boxed_slice();
                                                    let ptr32 = vec32.as_ptr().cast::<u8>();
                                                    let len32 = vec32.len();
                                                    ::core::mem::forget(vec32);
                                                    *base.add(12).cast::<usize>() = len32;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr32.cast_mut();
                                                }
                                                V39::Mediumblob(e) => {
                                                    *base.add(0).cast::<u8>() = (29i32) as u8;
                                                    let vec33 = (e).into_boxed_slice();
                                                    let ptr33 = vec33.as_ptr().cast::<u8>();
                                                    let len33 = vec33.len();
                                                    ::core::mem::forget(vec33);
                                                    *base.add(12).cast::<usize>() = len33;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr33.cast_mut();
                                                }
                                                V39::Longblob(e) => {
                                                    *base.add(0).cast::<u8>() = (30i32) as u8;
                                                    let vec34 = (e).into_boxed_slice();
                                                    let ptr34 = vec34.as_ptr().cast::<u8>();
                                                    let len34 = vec34.len();
                                                    ::core::mem::forget(vec34);
                                                    *base.add(12).cast::<usize>() = len34;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr34.cast_mut();
                                                }
                                                V39::Enumeration(e) => {
                                                    *base.add(0).cast::<u8>() = (31i32) as u8;
                                                    let vec35 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr35 = vec35.as_ptr().cast::<u8>();
                                                    let len35 = vec35.len();
                                                    ::core::mem::forget(vec35);
                                                    *base.add(12).cast::<usize>() = len35;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr35.cast_mut();
                                                }
                                                V39::Set(e) => {
                                                    *base.add(0).cast::<u8>() = (32i32) as u8;
                                                    let vec36 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr36 = vec36.as_ptr().cast::<u8>();
                                                    let len36 = vec36.len();
                                                    ::core::mem::forget(vec36);
                                                    *base.add(12).cast::<usize>() = len36;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr36.cast_mut();
                                                }
                                                V39::Bit(e) => {
                                                    *base.add(0).cast::<u8>() = (33i32) as u8;
                                                    let vec37 = e;
                                                    let len37 = vec37.len();
                                                    let layout37 = _rt::alloc::Layout::from_size_align_unchecked(vec37.len() * 1, 1);
                                                    let result37 = if layout37.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout37)
                                                            .cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(
                                                                layout37,
                                                            );
                                                        }
                                                        ptr
                                                    } else {
                                                        {
                                                            ::core::ptr::null_mut()
                                                        }
                                                    };
                                                    for (i, e) in vec37.into_iter().enumerate() {
                                                        let base = result37.add(i * 1);
                                                        {
                                                            *base.add(0).cast::<u8>() = (match e {
                                                                true => 1,
                                                                false => 0,
                                                            })
                                                                as u8;
                                                        }
                                                    }
                                                    *base.add(12).cast::<usize>() = len37;
                                                    *base.add(8).cast::<*mut u8>() = result37;
                                                }
                                                V39::Json(e) => {
                                                    *base.add(0).cast::<u8>() = (34i32) as u8;
                                                    let vec38 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr38 = vec38.as_ptr().cast::<u8>();
                                                    let len38 = vec38.len();
                                                    ::core::mem::forget(vec38);
                                                    *base.add(12).cast::<usize>() = len38;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr38.cast_mut();
                                                }
                                                V39::Null => {
                                                    *base.add(0).cast::<u8>() = (35i32) as u8;
                                                }
                                            }
                                        }
                                    }
                                    *base.add(4).cast::<usize>() = len40;
                                    *base.add(0).cast::<*mut u8>() = result40;
                                }
                            }
                            *ptr6.add(16).cast::<usize>() = len41;
                            *ptr6.add(12).cast::<*mut u8>() = result41;
                        }
                        Err(e) => {
                            *ptr6.add(0).cast::<u8>() = (1i32) as u8;
                            let vec42 = (e.into_bytes()).into_boxed_slice();
                            let ptr42 = vec42.as_ptr().cast::<u8>();
                            let len42 = vec42.len();
                            ::core::mem::forget(vec42);
                            *ptr6.add(8).cast::<usize>() = len42;
                            *ptr6.add(4).cast::<*mut u8>() = ptr42.cast_mut();
                        }
                    };
                    ptr6
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_mysql_query<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l5 = *arg0.add(4).cast::<*mut u8>();
                            let l6 = *arg0.add(8).cast::<usize>();
                            let base7 = l5;
                            let len7 = l6;
                            for i in 0..len7 {
                                let base = base7.add(i * 32);
                                {
                                    let l1 = *base.add(8).cast::<*mut u8>();
                                    let l2 = *base.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l1, l2, 1);
                                    let l3 = *base.add(20).cast::<*mut u8>();
                                    let l4 = *base.add(24).cast::<usize>();
                                    _rt::cabi_dealloc(l3, l4, 1);
                                }
                            }
                            _rt::cabi_dealloc(base7, len7 * 32, 8);
                            let l53 = *arg0.add(12).cast::<*mut u8>();
                            let l54 = *arg0.add(16).cast::<usize>();
                            let base55 = l53;
                            let len55 = l54;
                            for i in 0..len55 {
                                let base = base55.add(i * 8);
                                {
                                    let l50 = *base.add(0).cast::<*mut u8>();
                                    let l51 = *base.add(4).cast::<usize>();
                                    let base52 = l50;
                                    let len52 = l51;
                                    for i in 0..len52 {
                                        let base = base52.add(i * 24);
                                        {
                                            let l8 = i32::from(*base.add(0).cast::<u8>());
                                            match l8 {
                                                0 => (),
                                                1 => (),
                                                2 => (),
                                                3 => (),
                                                4 => (),
                                                5 => (),
                                                6 => (),
                                                7 => (),
                                                8 => (),
                                                9 => (),
                                                10 => (),
                                                11 => (),
                                                12 => (),
                                                13 => {
                                                    let l9 = *base.add(8).cast::<*mut u8>();
                                                    let l10 = *base.add(12).cast::<usize>();
                                                    _rt::cabi_dealloc(l9, l10, 1);
                                                }
                                                14 => (),
                                                15 => (),
                                                16 => (),
                                                17 => (),
                                                18 => (),
                                                19 => {
                                                    let l11 = *base.add(8).cast::<*mut u8>();
                                                    let l12 = *base.add(12).cast::<usize>();
                                                    _rt::cabi_dealloc(l11, l12, 1);
                                                }
                                                20 => {
                                                    let l13 = *base.add(8).cast::<*mut u8>();
                                                    let l14 = *base.add(12).cast::<usize>();
                                                    _rt::cabi_dealloc(l13, l14, 1);
                                                }
                                                21 => {
                                                    let l15 = *base.add(8).cast::<*mut u8>();
                                                    let l16 = *base.add(12).cast::<usize>();
                                                    _rt::cabi_dealloc(l15, l16, 1);
                                                }
                                                22 => {
                                                    let l17 = *base.add(8).cast::<*mut u8>();
                                                    let l18 = *base.add(12).cast::<usize>();
                                                    _rt::cabi_dealloc(l17, l18, 1);
                                                }
                                                23 => {
                                                    let l19 = *base.add(8).cast::<*mut u8>();
                                                    let l20 = *base.add(12).cast::<usize>();
                                                    _rt::cabi_dealloc(l19, l20, 1);
                                                }
                                                24 => {
                                                    let l21 = *base.add(8).cast::<*mut u8>();
                                                    let l22 = *base.add(12).cast::<usize>();
                                                    _rt::cabi_dealloc(l21, l22, 1);
                                                }
                                                25 => {
                                                    let l23 = *base.add(8).cast::<*mut u8>();
                                                    let l24 = *base.add(12).cast::<usize>();
                                                    let base25 = l23;
                                                    let len25 = l24;
                                                    _rt::cabi_dealloc(base25, len25 * 1, 1);
                                                }
                                                26 => {
                                                    let l26 = *base.add(8).cast::<*mut u8>();
                                                    let l27 = *base.add(12).cast::<usize>();
                                                    let base28 = l26;
                                                    let len28 = l27;
                                                    _rt::cabi_dealloc(base28, len28 * 1, 1);
                                                }
                                                27 => {
                                                    let l29 = *base.add(8).cast::<*mut u8>();
                                                    let l30 = *base.add(12).cast::<usize>();
                                                    let base31 = l29;
                                                    let len31 = l30;
                                                    _rt::cabi_dealloc(base31, len31 * 1, 1);
                                                }
                                                28 => {
                                                    let l32 = *base.add(8).cast::<*mut u8>();
                                                    let l33 = *base.add(12).cast::<usize>();
                                                    let base34 = l32;
                                                    let len34 = l33;
                                                    _rt::cabi_dealloc(base34, len34 * 1, 1);
                                                }
                                                29 => {
                                                    let l35 = *base.add(8).cast::<*mut u8>();
                                                    let l36 = *base.add(12).cast::<usize>();
                                                    let base37 = l35;
                                                    let len37 = l36;
                                                    _rt::cabi_dealloc(base37, len37 * 1, 1);
                                                }
                                                30 => {
                                                    let l38 = *base.add(8).cast::<*mut u8>();
                                                    let l39 = *base.add(12).cast::<usize>();
                                                    let base40 = l38;
                                                    let len40 = l39;
                                                    _rt::cabi_dealloc(base40, len40 * 1, 1);
                                                }
                                                31 => {
                                                    let l41 = *base.add(8).cast::<*mut u8>();
                                                    let l42 = *base.add(12).cast::<usize>();
                                                    _rt::cabi_dealloc(l41, l42, 1);
                                                }
                                                32 => {
                                                    let l43 = *base.add(8).cast::<*mut u8>();
                                                    let l44 = *base.add(12).cast::<usize>();
                                                    _rt::cabi_dealloc(l43, l44, 1);
                                                }
                                                33 => {
                                                    let l45 = *base.add(8).cast::<*mut u8>();
                                                    let l46 = *base.add(12).cast::<usize>();
                                                    let base47 = l45;
                                                    let len47 = l46;
                                                    _rt::cabi_dealloc(base47, len47 * 1, 1);
                                                }
                                                34 => {
                                                    let l48 = *base.add(8).cast::<*mut u8>();
                                                    let l49 = *base.add(12).cast::<usize>();
                                                    _rt::cabi_dealloc(l48, l49, 1);
                                                }
                                                _ => (),
                                            }
                                        }
                                    }
                                    _rt::cabi_dealloc(base52, len52 * 24, 8);
                                }
                            }
                            _rt::cabi_dealloc(base55, len55 * 8, 4);
                        }
                        _ => {
                            let l56 = *arg0.add(4).cast::<*mut u8>();
                            let l57 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l56, l57, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_postgres_execute_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let base4 = arg2;
                    let len4 = arg3;
                    let mut result4 = _rt::Vec::with_capacity(len4);
                    for i in 0..len4 {
                        let base = base4.add(i * 8);
                        let e4 = {
                            let l1 = *base.add(0).cast::<*mut u8>();
                            let l2 = *base.add(4).cast::<usize>();
                            let len3 = l2;
                            let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);

                            _rt::string_lift(bytes3)
                        };
                        result4.push(e4);
                    }
                    _rt::cabi_dealloc(base4, len4 * 8, 4);
                    let result5 = T::postgres_execute(_rt::string_lift(bytes0), result4);
                    let ptr6 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result5 {
                        Ok(e) => {
                            *ptr6.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr6.add(8).cast::<i64>() = _rt::as_i64(e);
                        }
                        Err(e) => {
                            *ptr6.add(0).cast::<u8>() = (1i32) as u8;
                            let vec7 = (e.into_bytes()).into_boxed_slice();
                            let ptr7 = vec7.as_ptr().cast::<u8>();
                            let len7 = vec7.len();
                            ::core::mem::forget(vec7);
                            *ptr6.add(12).cast::<usize>() = len7;
                            *ptr6.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                        }
                    };
                    ptr6
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_postgres_execute<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = *arg0.add(8).cast::<*mut u8>();
                            let l2 = *arg0.add(12).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_postgres_query_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let base4 = arg2;
                    let len4 = arg3;
                    let mut result4 = _rt::Vec::with_capacity(len4);
                    for i in 0..len4 {
                        let base = base4.add(i * 8);
                        let e4 = {
                            let l1 = *base.add(0).cast::<*mut u8>();
                            let l2 = *base.add(4).cast::<usize>();
                            let len3 = l2;
                            let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);

                            _rt::string_lift(bytes3)
                        };
                        result4.push(e4);
                    }
                    _rt::cabi_dealloc(base4, len4 * 8, 4);
                    let result5 = T::postgres_query(_rt::string_lift(bytes0), result4);
                    let ptr6 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result5 {
                        Ok(e) => {
                            *ptr6.add(0).cast::<u8>() = (0i32) as u8;
                            let PostgresQueryResult {
                                columns: columns7,
                                rows: rows7,
                            } = e;
                            let vec16 = columns7;
                            let len16 = vec16.len();
                            let layout16 =
                                _rt::alloc::Layout::from_size_align_unchecked(vec16.len() * 40, 8);
                            let result16 = if layout16.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout16).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout16);
                                }
                                ptr
                            } else {
                                {
                                    ::core::ptr::null_mut()
                                }
                            };
                            for (i, e) in vec16.into_iter().enumerate() {
                                let base = result16.add(i * 40);
                                {
                                    let super::super::super::super::wasi::rdbms::postgres::DbColumn{ ordinal:ordinal8, name:name8, db_type:db_type8, db_type_name:db_type_name8, } = e;
                                    *base.add(0).cast::<i64>() = _rt::as_i64(ordinal8);
                                    let vec9 = (name8.into_bytes()).into_boxed_slice();
                                    let ptr9 = vec9.as_ptr().cast::<u8>();
                                    let len9 = vec9.len();
                                    ::core::mem::forget(vec9);
                                    *base.add(12).cast::<usize>() = len9;
                                    *base.add(8).cast::<*mut u8>() = ptr9.cast_mut();
                                    use super::super::super::super::wasi::rdbms::postgres::DbColumnType as V14;
                                    match db_type8 {
                                        V14::Primitive(e) => {
                                            *base.add(16).cast::<u8>() = (0i32) as u8;
                                            use super::super::super::super::wasi::rdbms::postgres::DbColumnTypePrimitive as V11;
                                            match e {
                                                V11::Character => {
                                                    *base.add(20).cast::<u8>() = (0i32) as u8;
                                                }
                                                V11::Int2 => {
                                                    *base.add(20).cast::<u8>() = (1i32) as u8;
                                                }
                                                V11::Int4 => {
                                                    *base.add(20).cast::<u8>() = (2i32) as u8;
                                                }
                                                V11::Int8 => {
                                                    *base.add(20).cast::<u8>() = (3i32) as u8;
                                                }
                                                V11::Float4 => {
                                                    *base.add(20).cast::<u8>() = (4i32) as u8;
                                                }
                                                V11::Float8 => {
                                                    *base.add(20).cast::<u8>() = (5i32) as u8;
                                                }
                                                V11::Numeric => {
                                                    *base.add(20).cast::<u8>() = (6i32) as u8;
                                                }
                                                V11::Boolean => {
                                                    *base.add(20).cast::<u8>() = (7i32) as u8;
                                                }
                                                V11::Text => {
                                                    *base.add(20).cast::<u8>() = (8i32) as u8;
                                                }
                                                V11::Varchar => {
                                                    *base.add(20).cast::<u8>() = (9i32) as u8;
                                                }
                                                V11::Bpchar => {
                                                    *base.add(20).cast::<u8>() = (10i32) as u8;
                                                }
                                                V11::Timestamp => {
                                                    *base.add(20).cast::<u8>() = (11i32) as u8;
                                                }
                                                V11::Timestamptz => {
                                                    *base.add(20).cast::<u8>() = (12i32) as u8;
                                                }
                                                V11::Date => {
                                                    *base.add(20).cast::<u8>() = (13i32) as u8;
                                                }
                                                V11::Time => {
                                                    *base.add(20).cast::<u8>() = (14i32) as u8;
                                                }
                                                V11::Timetz => {
                                                    *base.add(20).cast::<u8>() = (15i32) as u8;
                                                }
                                                V11::Interval => {
                                                    *base.add(20).cast::<u8>() = (16i32) as u8;
                                                }
                                                V11::Bytea => {
                                                    *base.add(20).cast::<u8>() = (17i32) as u8;
                                                }
                                                V11::Uuid => {
                                                    *base.add(20).cast::<u8>() = (18i32) as u8;
                                                }
                                                V11::Xml => {
                                                    *base.add(20).cast::<u8>() = (19i32) as u8;
                                                }
                                                V11::Json => {
                                                    *base.add(20).cast::<u8>() = (20i32) as u8;
                                                }
                                                V11::Jsonb => {
                                                    *base.add(20).cast::<u8>() = (21i32) as u8;
                                                }
                                                V11::Jsonpath => {
                                                    *base.add(20).cast::<u8>() = (22i32) as u8;
                                                }
                                                V11::Inet => {
                                                    *base.add(20).cast::<u8>() = (23i32) as u8;
                                                }
                                                V11::Cidr => {
                                                    *base.add(20).cast::<u8>() = (24i32) as u8;
                                                }
                                                V11::Macaddr => {
                                                    *base.add(20).cast::<u8>() = (25i32) as u8;
                                                }
                                                V11::Bit => {
                                                    *base.add(20).cast::<u8>() = (26i32) as u8;
                                                }
                                                V11::Varbit => {
                                                    *base.add(20).cast::<u8>() = (27i32) as u8;
                                                }
                                                V11::Int4range => {
                                                    *base.add(20).cast::<u8>() = (28i32) as u8;
                                                }
                                                V11::Int8range => {
                                                    *base.add(20).cast::<u8>() = (29i32) as u8;
                                                }
                                                V11::Numrange => {
                                                    *base.add(20).cast::<u8>() = (30i32) as u8;
                                                }
                                                V11::Tsrange => {
                                                    *base.add(20).cast::<u8>() = (31i32) as u8;
                                                }
                                                V11::Tstzrange => {
                                                    *base.add(20).cast::<u8>() = (32i32) as u8;
                                                }
                                                V11::Daterange => {
                                                    *base.add(20).cast::<u8>() = (33i32) as u8;
                                                }
                                                V11::Money => {
                                                    *base.add(20).cast::<u8>() = (34i32) as u8;
                                                }
                                                V11::Oid => {
                                                    *base.add(20).cast::<u8>() = (35i32) as u8;
                                                }
                                                V11::Enumeration(e) => {
                                                    *base.add(20).cast::<u8>() = (36i32) as u8;
                                                    let vec10 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr10 = vec10.as_ptr().cast::<u8>();
                                                    let len10 = vec10.len();
                                                    ::core::mem::forget(vec10);
                                                    *base.add(28).cast::<usize>() = len10;
                                                    *base.add(24).cast::<*mut u8>() =
                                                        ptr10.cast_mut();
                                                }
                                            }
                                        }
                                        V14::Array(e) => {
                                            *base.add(16).cast::<u8>() = (1i32) as u8;
                                            use super::super::super::super::wasi::rdbms::postgres::DbColumnTypePrimitive as V13;
                                            match e {
                                                V13::Character => {
                                                    *base.add(20).cast::<u8>() = (0i32) as u8;
                                                }
                                                V13::Int2 => {
                                                    *base.add(20).cast::<u8>() = (1i32) as u8;
                                                }
                                                V13::Int4 => {
                                                    *base.add(20).cast::<u8>() = (2i32) as u8;
                                                }
                                                V13::Int8 => {
                                                    *base.add(20).cast::<u8>() = (3i32) as u8;
                                                }
                                                V13::Float4 => {
                                                    *base.add(20).cast::<u8>() = (4i32) as u8;
                                                }
                                                V13::Float8 => {
                                                    *base.add(20).cast::<u8>() = (5i32) as u8;
                                                }
                                                V13::Numeric => {
                                                    *base.add(20).cast::<u8>() = (6i32) as u8;
                                                }
                                                V13::Boolean => {
                                                    *base.add(20).cast::<u8>() = (7i32) as u8;
                                                }
                                                V13::Text => {
                                                    *base.add(20).cast::<u8>() = (8i32) as u8;
                                                }
                                                V13::Varchar => {
                                                    *base.add(20).cast::<u8>() = (9i32) as u8;
                                                }
                                                V13::Bpchar => {
                                                    *base.add(20).cast::<u8>() = (10i32) as u8;
                                                }
                                                V13::Timestamp => {
                                                    *base.add(20).cast::<u8>() = (11i32) as u8;
                                                }
                                                V13::Timestamptz => {
                                                    *base.add(20).cast::<u8>() = (12i32) as u8;
                                                }
                                                V13::Date => {
                                                    *base.add(20).cast::<u8>() = (13i32) as u8;
                                                }
                                                V13::Time => {
                                                    *base.add(20).cast::<u8>() = (14i32) as u8;
                                                }
                                                V13::Timetz => {
                                                    *base.add(20).cast::<u8>() = (15i32) as u8;
                                                }
                                                V13::Interval => {
                                                    *base.add(20).cast::<u8>() = (16i32) as u8;
                                                }
                                                V13::Bytea => {
                                                    *base.add(20).cast::<u8>() = (17i32) as u8;
                                                }
                                                V13::Uuid => {
                                                    *base.add(20).cast::<u8>() = (18i32) as u8;
                                                }
                                                V13::Xml => {
                                                    *base.add(20).cast::<u8>() = (19i32) as u8;
                                                }
                                                V13::Json => {
                                                    *base.add(20).cast::<u8>() = (20i32) as u8;
                                                }
                                                V13::Jsonb => {
                                                    *base.add(20).cast::<u8>() = (21i32) as u8;
                                                }
                                                V13::Jsonpath => {
                                                    *base.add(20).cast::<u8>() = (22i32) as u8;
                                                }
                                                V13::Inet => {
                                                    *base.add(20).cast::<u8>() = (23i32) as u8;
                                                }
                                                V13::Cidr => {
                                                    *base.add(20).cast::<u8>() = (24i32) as u8;
                                                }
                                                V13::Macaddr => {
                                                    *base.add(20).cast::<u8>() = (25i32) as u8;
                                                }
                                                V13::Bit => {
                                                    *base.add(20).cast::<u8>() = (26i32) as u8;
                                                }
                                                V13::Varbit => {
                                                    *base.add(20).cast::<u8>() = (27i32) as u8;
                                                }
                                                V13::Int4range => {
                                                    *base.add(20).cast::<u8>() = (28i32) as u8;
                                                }
                                                V13::Int8range => {
                                                    *base.add(20).cast::<u8>() = (29i32) as u8;
                                                }
                                                V13::Numrange => {
                                                    *base.add(20).cast::<u8>() = (30i32) as u8;
                                                }
                                                V13::Tsrange => {
                                                    *base.add(20).cast::<u8>() = (31i32) as u8;
                                                }
                                                V13::Tstzrange => {
                                                    *base.add(20).cast::<u8>() = (32i32) as u8;
                                                }
                                                V13::Daterange => {
                                                    *base.add(20).cast::<u8>() = (33i32) as u8;
                                                }
                                                V13::Money => {
                                                    *base.add(20).cast::<u8>() = (34i32) as u8;
                                                }
                                                V13::Oid => {
                                                    *base.add(20).cast::<u8>() = (35i32) as u8;
                                                }
                                                V13::Enumeration(e) => {
                                                    *base.add(20).cast::<u8>() = (36i32) as u8;
                                                    let vec12 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr12 = vec12.as_ptr().cast::<u8>();
                                                    let len12 = vec12.len();
                                                    ::core::mem::forget(vec12);
                                                    *base.add(28).cast::<usize>() = len12;
                                                    *base.add(24).cast::<*mut u8>() =
                                                        ptr12.cast_mut();
                                                }
                                            }
                                        }
                                    }
                                    let vec15 = (db_type_name8.into_bytes()).into_boxed_slice();
                                    let ptr15 = vec15.as_ptr().cast::<u8>();
                                    let len15 = vec15.len();
                                    ::core::mem::forget(vec15);
                                    *base.add(36).cast::<usize>() = len15;
                                    *base.add(32).cast::<*mut u8>() = ptr15.cast_mut();
                                }
                            }
                            *ptr6.add(8).cast::<usize>() = len16;
                            *ptr6.add(4).cast::<*mut u8>() = result16;
                            let vec201 = rows7;
                            let len201 = vec201.len();
                            let layout201 =
                                _rt::alloc::Layout::from_size_align_unchecked(vec201.len() * 8, 4);
                            let result201 = if layout201.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout201).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout201);
                                }
                                ptr
                            } else {
                                {
                                    ::core::ptr::null_mut()
                                }
                            };
                            for (i, e) in vec201.into_iter().enumerate() {
                                let base = result201.add(i * 8);
                                {
                                    let super::super::super::super::wasi::rdbms::postgres::DbRow {
                                        values: values17,
                                    } = e;
                                    let vec200 = values17;
                                    let len200 = vec200.len();
                                    let layout200 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec200.len() * 64,
                                        8,
                                    );
                                    let result200 = if layout200.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout200).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout200);
                                        }
                                        ptr
                                    } else {
                                        {
                                            ::core::ptr::null_mut()
                                        }
                                    };
                                    for (i, e) in vec200.into_iter().enumerate() {
                                        let base = result200.add(i * 64);
                                        {
                                            use super::super::super::super::wasi::rdbms::postgres::DbValue as V199;
                                            match e {
                                                V199::Primitive(e) => {
                                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                                    use super::super::super::super::wasi::rdbms::postgres::DbValuePrimitive as V107;
                                                    match e {
                                                        V107::Character(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (0i32) as u8;
                                                            *base.add(16).cast::<u8>() =
                                                                (_rt::as_i32(e)) as u8;
                                                        }
                                                        V107::Int2(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (1i32) as u8;
                                                            *base.add(16).cast::<u16>() =
                                                                (_rt::as_i32(e)) as u16;
                                                        }
                                                        V107::Int4(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (2i32) as u8;
                                                            *base.add(16).cast::<i32>() =
                                                                _rt::as_i32(e);
                                                        }
                                                        V107::Int8(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (3i32) as u8;
                                                            *base.add(16).cast::<i64>() =
                                                                _rt::as_i64(e);
                                                        }
                                                        V107::Float4(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (4i32) as u8;
                                                            *base.add(16).cast::<f32>() =
                                                                _rt::as_f32(e);
                                                        }
                                                        V107::Float8(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (5i32) as u8;
                                                            *base.add(16).cast::<f64>() =
                                                                _rt::as_f64(e);
                                                        }
                                                        V107::Numeric(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (6i32) as u8;
                                                            let vec18 =
                                                                (e.into_bytes()).into_boxed_slice();
                                                            let ptr18 = vec18.as_ptr().cast::<u8>();
                                                            let len18 = vec18.len();
                                                            ::core::mem::forget(vec18);
                                                            *base.add(20).cast::<usize>() = len18;
                                                            *base.add(16).cast::<*mut u8>() =
                                                                ptr18.cast_mut();
                                                        }
                                                        V107::Boolean(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (7i32) as u8;
                                                            *base.add(16).cast::<u8>() = (match e {
                                                                true => 1,
                                                                false => 0,
                                                            })
                                                                as u8;
                                                        }
                                                        V107::Text(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (8i32) as u8;
                                                            let vec19 =
                                                                (e.into_bytes()).into_boxed_slice();
                                                            let ptr19 = vec19.as_ptr().cast::<u8>();
                                                            let len19 = vec19.len();
                                                            ::core::mem::forget(vec19);
                                                            *base.add(20).cast::<usize>() = len19;
                                                            *base.add(16).cast::<*mut u8>() =
                                                                ptr19.cast_mut();
                                                        }
                                                        V107::Varchar(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (9i32) as u8;
                                                            let vec20 =
                                                                (e.into_bytes()).into_boxed_slice();
                                                            let ptr20 = vec20.as_ptr().cast::<u8>();
                                                            let len20 = vec20.len();
                                                            ::core::mem::forget(vec20);
                                                            *base.add(20).cast::<usize>() = len20;
                                                            *base.add(16).cast::<*mut u8>() =
                                                                ptr20.cast_mut();
                                                        }
                                                        V107::Bpchar(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (10i32) as u8;
                                                            let vec21 =
                                                                (e.into_bytes()).into_boxed_slice();
                                                            let ptr21 = vec21.as_ptr().cast::<u8>();
                                                            let len21 = vec21.len();
                                                            ::core::mem::forget(vec21);
                                                            *base.add(20).cast::<usize>() = len21;
                                                            *base.add(16).cast::<*mut u8>() =
                                                                ptr21.cast_mut();
                                                        }
                                                        V107::Timestamp(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (11i32) as u8;
                                                            let super::super::super::super::wasi::rdbms::postgres::Timestamp{ date:date22, time:time22, } = e;
                                                            let super::super::super::super::wasi::rdbms::postgres::Date{ year:year23, month:month23, day:day23, } = date22;
                                                            *base.add(16).cast::<i32>() =
                                                                _rt::as_i32(year23);
                                                            *base.add(20).cast::<u8>() =
                                                                (_rt::as_i32(month23)) as u8;
                                                            *base.add(21).cast::<u8>() =
                                                                (_rt::as_i32(day23)) as u8;
                                                            let super::super::super::super::wasi::rdbms::postgres::Time{ hour:hour24, minute:minute24, second:second24, nanosecond:nanosecond24, } = time22;
                                                            *base.add(24).cast::<u8>() =
                                                                (_rt::as_i32(hour24)) as u8;
                                                            *base.add(25).cast::<u8>() =
                                                                (_rt::as_i32(minute24)) as u8;
                                                            *base.add(26).cast::<u8>() =
                                                                (_rt::as_i32(second24)) as u8;
                                                            *base.add(28).cast::<i32>() =
                                                                _rt::as_i32(nanosecond24);
                                                        }
                                                        V107::Timestamptz(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (12i32) as u8;
                                                            let super::super::super::super::wasi::rdbms::postgres::Timestamptz{ timestamp:timestamp25, offset:offset25, } = e;
                                                            let super::super::super::super::wasi::rdbms::postgres::Timestamp{ date:date26, time:time26, } = timestamp25;
                                                            let super::super::super::super::wasi::rdbms::postgres::Date{ year:year27, month:month27, day:day27, } = date26;
                                                            *base.add(16).cast::<i32>() =
                                                                _rt::as_i32(year27);
                                                            *base.add(20).cast::<u8>() =
                                                                (_rt::as_i32(month27)) as u8;
                                                            *base.add(21).cast::<u8>() =
                                                                (_rt::as_i32(day27)) as u8;
                                                            let super::super::super::super::wasi::rdbms::postgres::Time{ hour:hour28, minute:minute28, second:second28, nanosecond:nanosecond28, } = time26;
                                                            *base.add(24).cast::<u8>() =
                                                                (_rt::as_i32(hour28)) as u8;
                                                            *base.add(25).cast::<u8>() =
                                                                (_rt::as_i32(minute28)) as u8;
                                                            *base.add(26).cast::<u8>() =
                                                                (_rt::as_i32(second28)) as u8;
                                                            *base.add(28).cast::<i32>() =
                                                                _rt::as_i32(nanosecond28);
                                                            *base.add(32).cast::<i32>() =
                                                                _rt::as_i32(offset25);
                                                        }
                                                        V107::Date(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (13i32) as u8;
                                                            let super::super::super::super::wasi::rdbms::postgres::Date{ year:year29, month:month29, day:day29, } = e;
                                                            *base.add(16).cast::<i32>() =
                                                                _rt::as_i32(year29);
                                                            *base.add(20).cast::<u8>() =
                                                                (_rt::as_i32(month29)) as u8;
                                                            *base.add(21).cast::<u8>() =
                                                                (_rt::as_i32(day29)) as u8;
                                                        }
                                                        V107::Time(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (14i32) as u8;
                                                            let super::super::super::super::wasi::rdbms::postgres::Time{ hour:hour30, minute:minute30, second:second30, nanosecond:nanosecond30, } = e;
                                                            *base.add(16).cast::<u8>() =
                                                                (_rt::as_i32(hour30)) as u8;
                                                            *base.add(17).cast::<u8>() =
                                                                (_rt::as_i32(minute30)) as u8;
                                                            *base.add(18).cast::<u8>() =
                                                                (_rt::as_i32(second30)) as u8;
                                                            *base.add(20).cast::<i32>() =
                                                                _rt::as_i32(nanosecond30);
                                                        }
                                                        V107::Timetz(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (15i32) as u8;
                                                            let super::super::super::super::wasi::rdbms::postgres::Timetz{ time:time31, offset:offset31, } = e;
                                                            let super::super::super::super::wasi::rdbms::postgres::Time{ hour:hour32, minute:minute32, second:second32, nanosecond:nanosecond32, } = time31;
                                                            *base.add(16).cast::<u8>() =
                                                                (_rt::as_i32(hour32)) as u8;
                                                            *base.add(17).cast::<u8>() =
                                                                (_rt::as_i32(minute32)) as u8;
                                                            *base.add(18).cast::<u8>() =
                                                                (_rt::as_i32(second32)) as u8;
                                                            *base.add(20).cast::<i32>() =
                                                                _rt::as_i32(nanosecond32);
                                                            *base.add(24).cast::<i32>() =
                                                                _rt::as_i32(offset31);
                                                        }
                                                        V107::Interval(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (16i32) as u8;
                                                            let super::super::super::super::wasi::rdbms::postgres::Interval{ months:months33, days:days33, microseconds:microseconds33, } = e;
                                                            *base.add(16).cast::<i32>() =
                                                                _rt::as_i32(months33);
                                                            *base.add(20).cast::<i32>() =
                                                                _rt::as_i32(days33);
                                                            *base.add(24).cast::<i64>() =
                                                                _rt::as_i64(microseconds33);
                                                        }
                                                        V107::Bytea(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (17i32) as u8;
                                                            let vec34 = (e).into_boxed_slice();
                                                            let ptr34 = vec34.as_ptr().cast::<u8>();
                                                            let len34 = vec34.len();
                                                            ::core::mem::forget(vec34);
                                                            *base.add(20).cast::<usize>() = len34;
                                                            *base.add(16).cast::<*mut u8>() =
                                                                ptr34.cast_mut();
                                                        }
                                                        V107::Json(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (18i32) as u8;
                                                            let vec35 =
                                                                (e.into_bytes()).into_boxed_slice();
                                                            let ptr35 = vec35.as_ptr().cast::<u8>();
                                                            let len35 = vec35.len();
                                                            ::core::mem::forget(vec35);
                                                            *base.add(20).cast::<usize>() = len35;
                                                            *base.add(16).cast::<*mut u8>() =
                                                                ptr35.cast_mut();
                                                        }
                                                        V107::Jsonb(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (19i32) as u8;
                                                            let vec36 =
                                                                (e.into_bytes()).into_boxed_slice();
                                                            let ptr36 = vec36.as_ptr().cast::<u8>();
                                                            let len36 = vec36.len();
                                                            ::core::mem::forget(vec36);
                                                            *base.add(20).cast::<usize>() = len36;
                                                            *base.add(16).cast::<*mut u8>() =
                                                                ptr36.cast_mut();
                                                        }
                                                        V107::Jsonpath(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (20i32) as u8;
                                                            let vec37 =
                                                                (e.into_bytes()).into_boxed_slice();
                                                            let ptr37 = vec37.as_ptr().cast::<u8>();
                                                            let len37 = vec37.len();
                                                            ::core::mem::forget(vec37);
                                                            *base.add(20).cast::<usize>() = len37;
                                                            *base.add(16).cast::<*mut u8>() =
                                                                ptr37.cast_mut();
                                                        }
                                                        V107::Xml(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (21i32) as u8;
                                                            let vec38 =
                                                                (e.into_bytes()).into_boxed_slice();
                                                            let ptr38 = vec38.as_ptr().cast::<u8>();
                                                            let len38 = vec38.len();
                                                            ::core::mem::forget(vec38);
                                                            *base.add(20).cast::<usize>() = len38;
                                                            *base.add(16).cast::<*mut u8>() =
                                                                ptr38.cast_mut();
                                                        }
                                                        V107::Uuid(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (22i32) as u8;
                                                            let super::super::super::super::wasi::rdbms::postgres::Uuid{ high_bits:high_bits39, low_bits:low_bits39, } = e;
                                                            *base.add(16).cast::<i64>() =
                                                                _rt::as_i64(high_bits39);
                                                            *base.add(24).cast::<i64>() =
                                                                _rt::as_i64(low_bits39);
                                                        }
                                                        V107::Inet(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (23i32) as u8;
                                                            use super::super::super::super::wasi::rdbms::postgres::IpAddress as V42;
                                                            match e {
                                                                V42::Ipv4(e) => {
                                                                    *base.add(16).cast::<u8>() =
                                                                        (0i32) as u8;
                                                                    let (
                                                                        t40_0,
                                                                        t40_1,
                                                                        t40_2,
                                                                        t40_3,
                                                                    ) = e;
                                                                    *base.add(18).cast::<u8>() =
                                                                        (_rt::as_i32(t40_0)) as u8;
                                                                    *base.add(19).cast::<u8>() =
                                                                        (_rt::as_i32(t40_1)) as u8;
                                                                    *base.add(20).cast::<u8>() =
                                                                        (_rt::as_i32(t40_2)) as u8;
                                                                    *base.add(21).cast::<u8>() =
                                                                        (_rt::as_i32(t40_3)) as u8;
                                                                }
                                                                V42::Ipv6(e) => {
                                                                    *base.add(16).cast::<u8>() =
                                                                        (1i32) as u8;
                                                                    let (
                                                                        t41_0,
                                                                        t41_1,
                                                                        t41_2,
                                                                        t41_3,
                                                                        t41_4,
                                                                        t41_5,
                                                                        t41_6,
                                                                        t41_7,
                                                                    ) = e;
                                                                    *base.add(18).cast::<u16>() =
                                                                        (_rt::as_i32(t41_0)) as u16;
                                                                    *base.add(20).cast::<u16>() =
                                                                        (_rt::as_i32(t41_1)) as u16;
                                                                    *base.add(22).cast::<u16>() =
                                                                        (_rt::as_i32(t41_2)) as u16;
                                                                    *base.add(24).cast::<u16>() =
                                                                        (_rt::as_i32(t41_3)) as u16;
                                                                    *base.add(26).cast::<u16>() =
                                                                        (_rt::as_i32(t41_4)) as u16;
                                                                    *base.add(28).cast::<u16>() =
                                                                        (_rt::as_i32(t41_5)) as u16;
                                                                    *base.add(30).cast::<u16>() =
                                                                        (_rt::as_i32(t41_6)) as u16;
                                                                    *base.add(32).cast::<u16>() =
                                                                        (_rt::as_i32(t41_7)) as u16;
                                                                }
                                                            }
                                                        }
                                                        V107::Cidr(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (24i32) as u8;
                                                            use super::super::super::super::wasi::rdbms::postgres::IpAddress as V45;
                                                            match e {
                                                                V45::Ipv4(e) => {
                                                                    *base.add(16).cast::<u8>() =
                                                                        (0i32) as u8;
                                                                    let (
                                                                        t43_0,
                                                                        t43_1,
                                                                        t43_2,
                                                                        t43_3,
                                                                    ) = e;
                                                                    *base.add(18).cast::<u8>() =
                                                                        (_rt::as_i32(t43_0)) as u8;
                                                                    *base.add(19).cast::<u8>() =
                                                                        (_rt::as_i32(t43_1)) as u8;
                                                                    *base.add(20).cast::<u8>() =
                                                                        (_rt::as_i32(t43_2)) as u8;
                                                                    *base.add(21).cast::<u8>() =
                                                                        (_rt::as_i32(t43_3)) as u8;
                                                                }
                                                                V45::Ipv6(e) => {
                                                                    *base.add(16).cast::<u8>() =
                                                                        (1i32) as u8;
                                                                    let (
                                                                        t44_0,
                                                                        t44_1,
                                                                        t44_2,
                                                                        t44_3,
                                                                        t44_4,
                                                                        t44_5,
                                                                        t44_6,
                                                                        t44_7,
                                                                    ) = e;
                                                                    *base.add(18).cast::<u16>() =
                                                                        (_rt::as_i32(t44_0)) as u16;
                                                                    *base.add(20).cast::<u16>() =
                                                                        (_rt::as_i32(t44_1)) as u16;
                                                                    *base.add(22).cast::<u16>() =
                                                                        (_rt::as_i32(t44_2)) as u16;
                                                                    *base.add(24).cast::<u16>() =
                                                                        (_rt::as_i32(t44_3)) as u16;
                                                                    *base.add(26).cast::<u16>() =
                                                                        (_rt::as_i32(t44_4)) as u16;
                                                                    *base.add(28).cast::<u16>() =
                                                                        (_rt::as_i32(t44_5)) as u16;
                                                                    *base.add(30).cast::<u16>() =
                                                                        (_rt::as_i32(t44_6)) as u16;
                                                                    *base.add(32).cast::<u16>() =
                                                                        (_rt::as_i32(t44_7)) as u16;
                                                                }
                                                            }
                                                        }
                                                        V107::Macaddr(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (25i32) as u8;
                                                            let super::super::super::super::wasi::rdbms::postgres::MacAddress{ octets:octets46, } = e;
                                                            let (
                                                                t47_0,
                                                                t47_1,
                                                                t47_2,
                                                                t47_3,
                                                                t47_4,
                                                                t47_5,
                                                            ) = octets46;
                                                            *base.add(16).cast::<u8>() =
                                                                (_rt::as_i32(t47_0)) as u8;
                                                            *base.add(17).cast::<u8>() =
                                                                (_rt::as_i32(t47_1)) as u8;
                                                            *base.add(18).cast::<u8>() =
                                                                (_rt::as_i32(t47_2)) as u8;
                                                            *base.add(19).cast::<u8>() =
                                                                (_rt::as_i32(t47_3)) as u8;
                                                            *base.add(20).cast::<u8>() =
                                                                (_rt::as_i32(t47_4)) as u8;
                                                            *base.add(21).cast::<u8>() =
                                                                (_rt::as_i32(t47_5)) as u8;
                                                        }
                                                        V107::Bit(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (26i32) as u8;
                                                            let vec48 = e;
                                                            let len48 = vec48.len();
                                                            let layout48 = _rt::alloc::Layout::from_size_align_unchecked(vec48.len() * 1, 1);
                                                            let result48 = if layout48.size() != 0 {
                                                                let ptr =
                                                                    _rt::alloc::alloc(layout48)
                                                                        .cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(
                                                                        layout48,
                                                                    );
                                                                }
                                                                ptr
                                                            } else {
                                                                {
                                                                    ::core::ptr::null_mut()
                                                                }
                                                            };
                                                            for (i, e) in
                                                                vec48.into_iter().enumerate()
                                                            {
                                                                let base = result48.add(i * 1);
                                                                {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (match e {
                                                                            true => 1,
                                                                            false => 0,
                                                                        })
                                                                            as u8;
                                                                }
                                                            }
                                                            *base.add(20).cast::<usize>() = len48;
                                                            *base.add(16).cast::<*mut u8>() =
                                                                result48;
                                                        }
                                                        V107::Varbit(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (27i32) as u8;
                                                            let vec49 = e;
                                                            let len49 = vec49.len();
                                                            let layout49 = _rt::alloc::Layout::from_size_align_unchecked(vec49.len() * 1, 1);
                                                            let result49 = if layout49.size() != 0 {
                                                                let ptr =
                                                                    _rt::alloc::alloc(layout49)
                                                                        .cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(
                                                                        layout49,
                                                                    );
                                                                }
                                                                ptr
                                                            } else {
                                                                {
                                                                    ::core::ptr::null_mut()
                                                                }
                                                            };
                                                            for (i, e) in
                                                                vec49.into_iter().enumerate()
                                                            {
                                                                let base = result49.add(i * 1);
                                                                {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (match e {
                                                                            true => 1,
                                                                            false => 0,
                                                                        })
                                                                            as u8;
                                                                }
                                                            }
                                                            *base.add(20).cast::<usize>() = len49;
                                                            *base.add(16).cast::<*mut u8>() =
                                                                result49;
                                                        }
                                                        V107::Int4range(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (28i32) as u8;
                                                            let super::super::super::super::wasi::rdbms::postgres::Int4range{ start:start50, end:end50, } = e;
                                                            use super::super::super::super::wasi::rdbms::postgres::Int4bound as V51;
                                                            match start50 {
                                                                V51::Included(e) => {
                                                                    *base.add(16).cast::<u8>() =
                                                                        (0i32) as u8;
                                                                    *base.add(20).cast::<i32>() =
                                                                        _rt::as_i32(e);
                                                                }
                                                                V51::Excluded(e) => {
                                                                    *base.add(16).cast::<u8>() =
                                                                        (1i32) as u8;
                                                                    *base.add(20).cast::<i32>() =
                                                                        _rt::as_i32(e);
                                                                }
                                                                V51::Unbounded => {
                                                                    *base.add(16).cast::<u8>() =
                                                                        (2i32) as u8;
                                                                }
                                                            }
                                                            use super::super::super::super::wasi::rdbms::postgres::Int4bound as V52;
                                                            match end50 {
                                                                V52::Included(e) => {
                                                                    *base.add(24).cast::<u8>() =
                                                                        (0i32) as u8;
                                                                    *base.add(28).cast::<i32>() =
                                                                        _rt::as_i32(e);
                                                                }
                                                                V52::Excluded(e) => {
                                                                    *base.add(24).cast::<u8>() =
                                                                        (1i32) as u8;
                                                                    *base.add(28).cast::<i32>() =
                                                                        _rt::as_i32(e);
                                                                }
                                                                V52::Unbounded => {
                                                                    *base.add(24).cast::<u8>() =
                                                                        (2i32) as u8;
                                                                }
                                                            }
                                                        }
                                                        V107::Int8range(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (29i32) as u8;
                                                            let super::super::super::super::wasi::rdbms::postgres::Int8range{ start:start53, end:end53, } = e;
                                                            use super::super::super::super::wasi::rdbms::postgres::Int8bound as V54;
                                                            match start53 {
                                                                V54::Included(e) => {
                                                                    *base.add(16).cast::<u8>() =
                                                                        (0i32) as u8;
                                                                    *base.add(24).cast::<i64>() =
                                                                        _rt::as_i64(e);
                                                                }
                                                                V54::Excluded(e) => {
                                                                    *base.add(16).cast::<u8>() =
                                                                        (1i32) as u8;
                                                                    *base.add(24).cast::<i64>() =
                                                                        _rt::as_i64(e);
                                                                }
                                                                V54::Unbounded => {
                                                                    *base.add(16).cast::<u8>() =
                                                                        (2i32) as u8;
                                                                }
                                                            }
                                                            use super::super::super::super::wasi::rdbms::postgres::Int8bound as V55;
                                                            match end53 {
                                                                V55::Included(e) => {
                                                                    *base.add(32).cast::<u8>() =
                                                                        (0i32) as u8;
                                                                    *base.add(40).cast::<i64>() =
                                                                        _rt::as_i64(e);
                                                                }
                                                                V55::Excluded(e) => {
                                                                    *base.add(32).cast::<u8>() =
                                                                        (1i32) as u8;
                                                                    *base.add(40).cast::<i64>() =
                                                                        _rt::as_i64(e);
                                                                }
                                                                V55::Unbounded => {
                                                                    *base.add(32).cast::<u8>() =
                                                                        (2i32) as u8;
                                                                }
                                                            }
                                                        }
                                                        V107::Numrange(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (30i32) as u8;
                                                            let super::super::super::super::wasi::rdbms::postgres::Numrange{ start:start56, end:end56, } = e;
                                                            use super::super::super::super::wasi::rdbms::postgres::Numbound as V59;
                                                            match start56 {
                                                                V59::Included(e) => {
                                                                    *base.add(16).cast::<u8>() =
                                                                        (0i32) as u8;
                                                                    let vec57 = (e.into_bytes())
                                                                        .into_boxed_slice();
                                                                    let ptr57 =
                                                                        vec57.as_ptr().cast::<u8>();
                                                                    let len57 = vec57.len();
                                                                    ::core::mem::forget(vec57);
                                                                    *base.add(24).cast::<usize>() =
                                                                        len57;
                                                                    *base
                                                                        .add(20)
                                                                        .cast::<*mut u8>() =
                                                                        ptr57.cast_mut();
                                                                }
                                                                V59::Excluded(e) => {
                                                                    *base.add(16).cast::<u8>() =
                                                                        (1i32) as u8;
                                                                    let vec58 = (e.into_bytes())
                                                                        .into_boxed_slice();
                                                                    let ptr58 =
                                                                        vec58.as_ptr().cast::<u8>();
                                                                    let len58 = vec58.len();
                                                                    ::core::mem::forget(vec58);
                                                                    *base.add(24).cast::<usize>() =
                                                                        len58;
                                                                    *base
                                                                        .add(20)
                                                                        .cast::<*mut u8>() =
                                                                        ptr58.cast_mut();
                                                                }
                                                                V59::Unbounded => {
                                                                    *base.add(16).cast::<u8>() =
                                                                        (2i32) as u8;
                                                                }
                                                            }
                                                            use super::super::super::super::wasi::rdbms::postgres::Numbound as V62;
                                                            match end56 {
                                                                V62::Included(e) => {
                                                                    *base.add(28).cast::<u8>() =
                                                                        (0i32) as u8;
                                                                    let vec60 = (e.into_bytes())
                                                                        .into_boxed_slice();
                                                                    let ptr60 =
                                                                        vec60.as_ptr().cast::<u8>();
                                                                    let len60 = vec60.len();
                                                                    ::core::mem::forget(vec60);
                                                                    *base.add(36).cast::<usize>() =
                                                                        len60;
                                                                    *base
                                                                        .add(32)
                                                                        .cast::<*mut u8>() =
                                                                        ptr60.cast_mut();
                                                                }
                                                                V62::Excluded(e) => {
                                                                    *base.add(28).cast::<u8>() =
                                                                        (1i32) as u8;
                                                                    let vec61 = (e.into_bytes())
                                                                        .into_boxed_slice();
                                                                    let ptr61 =
                                                                        vec61.as_ptr().cast::<u8>();
                                                                    let len61 = vec61.len();
                                                                    ::core::mem::forget(vec61);
                                                                    *base.add(36).cast::<usize>() =
                                                                        len61;
                                                                    *base
                                                                        .add(32)
                                                                        .cast::<*mut u8>() =
                                                                        ptr61.cast_mut();
                                                                }
                                                                V62::Unbounded => {
                                                                    *base.add(28).cast::<u8>() =
                                                                        (2i32) as u8;
                                                                }
                                                            }
                                                        }
                                                        V107::Tsrange(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (31i32) as u8;
                                                            let super::super::super::super::wasi::rdbms::postgres::Tsrange{ start:start63, end:end63, } = e;
                                                            use super::super::super::super::wasi::rdbms::postgres::Tsbound as V70;
                                                            match start63 {
                                                                V70::Included(e) => {
                                                                    *base.add(16).cast::<u8>() =
                                                                        (0i32) as u8;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Timestamp{ date:date64, time:time64, } = e;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Date{ year:year65, month:month65, day:day65, } = date64;
                                                                    *base.add(20).cast::<i32>() =
                                                                        _rt::as_i32(year65);
                                                                    *base.add(24).cast::<u8>() =
                                                                        (_rt::as_i32(month65))
                                                                            as u8;
                                                                    *base.add(25).cast::<u8>() =
                                                                        (_rt::as_i32(day65)) as u8;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Time{ hour:hour66, minute:minute66, second:second66, nanosecond:nanosecond66, } = time64;
                                                                    *base.add(28).cast::<u8>() =
                                                                        (_rt::as_i32(hour66)) as u8;
                                                                    *base.add(29).cast::<u8>() =
                                                                        (_rt::as_i32(minute66))
                                                                            as u8;
                                                                    *base.add(30).cast::<u8>() =
                                                                        (_rt::as_i32(second66))
                                                                            as u8;
                                                                    *base.add(32).cast::<i32>() =
                                                                        _rt::as_i32(nanosecond66);
                                                                }
                                                                V70::Excluded(e) => {
                                                                    *base.add(16).cast::<u8>() =
                                                                        (1i32) as u8;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Timestamp{ date:date67, time:time67, } = e;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Date{ year:year68, month:month68, day:day68, } = date67;
                                                                    *base.add(20).cast::<i32>() =
                                                                        _rt::as_i32(year68);
                                                                    *base.add(24).cast::<u8>() =
                                                                        (_rt::as_i32(month68))
                                                                            as u8;
                                                                    *base.add(25).cast::<u8>() =
                                                                        (_rt::as_i32(day68)) as u8;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Time{ hour:hour69, minute:minute69, second:second69, nanosecond:nanosecond69, } = time67;
                                                                    *base.add(28).cast::<u8>() =
                                                                        (_rt::as_i32(hour69)) as u8;
                                                                    *base.add(29).cast::<u8>() =
                                                                        (_rt::as_i32(minute69))
                                                                            as u8;
                                                                    *base.add(30).cast::<u8>() =
                                                                        (_rt::as_i32(second69))
                                                                            as u8;
                                                                    *base.add(32).cast::<i32>() =
                                                                        _rt::as_i32(nanosecond69);
                                                                }
                                                                V70::Unbounded => {
                                                                    *base.add(16).cast::<u8>() =
                                                                        (2i32) as u8;
                                                                }
                                                            }
                                                            use super::super::super::super::wasi::rdbms::postgres::Tsbound as V77;
                                                            match end63 {
                                                                V77::Included(e) => {
                                                                    *base.add(36).cast::<u8>() =
                                                                        (0i32) as u8;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Timestamp{ date:date71, time:time71, } = e;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Date{ year:year72, month:month72, day:day72, } = date71;
                                                                    *base.add(40).cast::<i32>() =
                                                                        _rt::as_i32(year72);
                                                                    *base.add(44).cast::<u8>() =
                                                                        (_rt::as_i32(month72))
                                                                            as u8;
                                                                    *base.add(45).cast::<u8>() =
                                                                        (_rt::as_i32(day72)) as u8;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Time{ hour:hour73, minute:minute73, second:second73, nanosecond:nanosecond73, } = time71;
                                                                    *base.add(48).cast::<u8>() =
                                                                        (_rt::as_i32(hour73)) as u8;
                                                                    *base.add(49).cast::<u8>() =
                                                                        (_rt::as_i32(minute73))
                                                                            as u8;
                                                                    *base.add(50).cast::<u8>() =
                                                                        (_rt::as_i32(second73))
                                                                            as u8;
                                                                    *base.add(52).cast::<i32>() =
                                                                        _rt::as_i32(nanosecond73);
                                                                }
                                                                V77::Excluded(e) => {
                                                                    *base.add(36).cast::<u8>() =
                                                                        (1i32) as u8;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Timestamp{ date:date74, time:time74, } = e;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Date{ year:year75, month:month75, day:day75, } = date74;
                                                                    *base.add(40).cast::<i32>() =
                                                                        _rt::as_i32(year75);
                                                                    *base.add(44).cast::<u8>() =
                                                                        (_rt::as_i32(month75))
                                                                            as u8;
                                                                    *base.add(45).cast::<u8>() =
                                                                        (_rt::as_i32(day75)) as u8;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Time{ hour:hour76, minute:minute76, second:second76, nanosecond:nanosecond76, } = time74;
                                                                    *base.add(48).cast::<u8>() =
                                                                        (_rt::as_i32(hour76)) as u8;
                                                                    *base.add(49).cast::<u8>() =
                                                                        (_rt::as_i32(minute76))
                                                                            as u8;
                                                                    *base.add(50).cast::<u8>() =
                                                                        (_rt::as_i32(second76))
                                                                            as u8;
                                                                    *base.add(52).cast::<i32>() =
                                                                        _rt::as_i32(nanosecond76);
                                                                }
                                                                V77::Unbounded => {
                                                                    *base.add(36).cast::<u8>() =
                                                                        (2i32) as u8;
                                                                }
                                                            }
                                                        }
                                                        V107::Tstzrange(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (32i32) as u8;
                                                            let super::super::super::super::wasi::rdbms::postgres::Tstzrange{ start:start78, end:end78, } = e;
                                                            use super::super::super::super::wasi::rdbms::postgres::Tstzbound as V87;
                                                            match start78 {
                                                                V87::Included(e) => {
                                                                    *base.add(16).cast::<u8>() =
                                                                        (0i32) as u8;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Timestamptz{ timestamp:timestamp79, offset:offset79, } = e;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Timestamp{ date:date80, time:time80, } = timestamp79;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Date{ year:year81, month:month81, day:day81, } = date80;
                                                                    *base.add(20).cast::<i32>() =
                                                                        _rt::as_i32(year81);
                                                                    *base.add(24).cast::<u8>() =
                                                                        (_rt::as_i32(month81))
                                                                            as u8;
                                                                    *base.add(25).cast::<u8>() =
                                                                        (_rt::as_i32(day81)) as u8;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Time{ hour:hour82, minute:minute82, second:second82, nanosecond:nanosecond82, } = time80;
                                                                    *base.add(28).cast::<u8>() =
                                                                        (_rt::as_i32(hour82)) as u8;
                                                                    *base.add(29).cast::<u8>() =
                                                                        (_rt::as_i32(minute82))
                                                                            as u8;
                                                                    *base.add(30).cast::<u8>() =
                                                                        (_rt::as_i32(second82))
                                                                            as u8;
                                                                    *base.add(32).cast::<i32>() =
                                                                        _rt::as_i32(nanosecond82);
                                                                    *base.add(36).cast::<i32>() =
                                                                        _rt::as_i32(offset79);
                                                                }
                                                                V87::Excluded(e) => {
                                                                    *base.add(16).cast::<u8>() =
                                                                        (1i32) as u8;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Timestamptz{ timestamp:timestamp83, offset:offset83, } = e;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Timestamp{ date:date84, time:time84, } = timestamp83;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Date{ year:year85, month:month85, day:day85, } = date84;
                                                                    *base.add(20).cast::<i32>() =
                                                                        _rt::as_i32(year85);
                                                                    *base.add(24).cast::<u8>() =
                                                                        (_rt::as_i32(month85))
                                                                            as u8;
                                                                    *base.add(25).cast::<u8>() =
                                                                        (_rt::as_i32(day85)) as u8;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Time{ hour:hour86, minute:minute86, second:second86, nanosecond:nanosecond86, } = time84;
                                                                    *base.add(28).cast::<u8>() =
                                                                        (_rt::as_i32(hour86)) as u8;
                                                                    *base.add(29).cast::<u8>() =
                                                                        (_rt::as_i32(minute86))
                                                                            as u8;
                                                                    *base.add(30).cast::<u8>() =
                                                                        (_rt::as_i32(second86))
                                                                            as u8;
                                                                    *base.add(32).cast::<i32>() =
                                                                        _rt::as_i32(nanosecond86);
                                                                    *base.add(36).cast::<i32>() =
                                                                        _rt::as_i32(offset83);
                                                                }
                                                                V87::Unbounded => {
                                                                    *base.add(16).cast::<u8>() =
                                                                        (2i32) as u8;
                                                                }
                                                            }
                                                            use super::super::super::super::wasi::rdbms::postgres::Tstzbound as V96;
                                                            match end78 {
                                                                V96::Included(e) => {
                                                                    *base.add(40).cast::<u8>() =
                                                                        (0i32) as u8;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Timestamptz{ timestamp:timestamp88, offset:offset88, } = e;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Timestamp{ date:date89, time:time89, } = timestamp88;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Date{ year:year90, month:month90, day:day90, } = date89;
                                                                    *base.add(44).cast::<i32>() =
                                                                        _rt::as_i32(year90);
                                                                    *base.add(48).cast::<u8>() =
                                                                        (_rt::as_i32(month90))
                                                                            as u8;
                                                                    *base.add(49).cast::<u8>() =
                                                                        (_rt::as_i32(day90)) as u8;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Time{ hour:hour91, minute:minute91, second:second91, nanosecond:nanosecond91, } = time89;
                                                                    *base.add(52).cast::<u8>() =
                                                                        (_rt::as_i32(hour91)) as u8;
                                                                    *base.add(53).cast::<u8>() =
                                                                        (_rt::as_i32(minute91))
                                                                            as u8;
                                                                    *base.add(54).cast::<u8>() =
                                                                        (_rt::as_i32(second91))
                                                                            as u8;
                                                                    *base.add(56).cast::<i32>() =
                                                                        _rt::as_i32(nanosecond91);
                                                                    *base.add(60).cast::<i32>() =
                                                                        _rt::as_i32(offset88);
                                                                }
                                                                V96::Excluded(e) => {
                                                                    *base.add(40).cast::<u8>() =
                                                                        (1i32) as u8;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Timestamptz{ timestamp:timestamp92, offset:offset92, } = e;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Timestamp{ date:date93, time:time93, } = timestamp92;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Date{ year:year94, month:month94, day:day94, } = date93;
                                                                    *base.add(44).cast::<i32>() =
                                                                        _rt::as_i32(year94);
                                                                    *base.add(48).cast::<u8>() =
                                                                        (_rt::as_i32(month94))
                                                                            as u8;
                                                                    *base.add(49).cast::<u8>() =
                                                                        (_rt::as_i32(day94)) as u8;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Time{ hour:hour95, minute:minute95, second:second95, nanosecond:nanosecond95, } = time93;
                                                                    *base.add(52).cast::<u8>() =
                                                                        (_rt::as_i32(hour95)) as u8;
                                                                    *base.add(53).cast::<u8>() =
                                                                        (_rt::as_i32(minute95))
                                                                            as u8;
                                                                    *base.add(54).cast::<u8>() =
                                                                        (_rt::as_i32(second95))
                                                                            as u8;
                                                                    *base.add(56).cast::<i32>() =
                                                                        _rt::as_i32(nanosecond95);
                                                                    *base.add(60).cast::<i32>() =
                                                                        _rt::as_i32(offset92);
                                                                }
                                                                V96::Unbounded => {
                                                                    *base.add(40).cast::<u8>() =
                                                                        (2i32) as u8;
                                                                }
                                                            }
                                                        }
                                                        V107::Daterange(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (33i32) as u8;
                                                            let super::super::super::super::wasi::rdbms::postgres::Daterange{ start:start97, end:end97, } = e;
                                                            use super::super::super::super::wasi::rdbms::postgres::Datebound as V100;
                                                            match start97 {
                                                                V100::Included(e) => {
                                                                    *base.add(16).cast::<u8>() =
                                                                        (0i32) as u8;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Date{ year:year98, month:month98, day:day98, } = e;
                                                                    *base.add(20).cast::<i32>() =
                                                                        _rt::as_i32(year98);
                                                                    *base.add(24).cast::<u8>() =
                                                                        (_rt::as_i32(month98))
                                                                            as u8;
                                                                    *base.add(25).cast::<u8>() =
                                                                        (_rt::as_i32(day98)) as u8;
                                                                }
                                                                V100::Excluded(e) => {
                                                                    *base.add(16).cast::<u8>() =
                                                                        (1i32) as u8;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Date{ year:year99, month:month99, day:day99, } = e;
                                                                    *base.add(20).cast::<i32>() =
                                                                        _rt::as_i32(year99);
                                                                    *base.add(24).cast::<u8>() =
                                                                        (_rt::as_i32(month99))
                                                                            as u8;
                                                                    *base.add(25).cast::<u8>() =
                                                                        (_rt::as_i32(day99)) as u8;
                                                                }
                                                                V100::Unbounded => {
                                                                    *base.add(16).cast::<u8>() =
                                                                        (2i32) as u8;
                                                                }
                                                            }
                                                            use super::super::super::super::wasi::rdbms::postgres::Datebound as V103;
                                                            match end97 {
                                                                V103::Included(e) => {
                                                                    *base.add(28).cast::<u8>() =
                                                                        (0i32) as u8;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Date{ year:year101, month:month101, day:day101, } = e;
                                                                    *base.add(32).cast::<i32>() =
                                                                        _rt::as_i32(year101);
                                                                    *base.add(36).cast::<u8>() =
                                                                        (_rt::as_i32(month101))
                                                                            as u8;
                                                                    *base.add(37).cast::<u8>() =
                                                                        (_rt::as_i32(day101)) as u8;
                                                                }
                                                                V103::Excluded(e) => {
                                                                    *base.add(28).cast::<u8>() =
                                                                        (1i32) as u8;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Date{ year:year102, month:month102, day:day102, } = e;
                                                                    *base.add(32).cast::<i32>() =
                                                                        _rt::as_i32(year102);
                                                                    *base.add(36).cast::<u8>() =
                                                                        (_rt::as_i32(month102))
                                                                            as u8;
                                                                    *base.add(37).cast::<u8>() =
                                                                        (_rt::as_i32(day102)) as u8;
                                                                }
                                                                V103::Unbounded => {
                                                                    *base.add(28).cast::<u8>() =
                                                                        (2i32) as u8;
                                                                }
                                                            }
                                                        }
                                                        V107::Money(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (34i32) as u8;
                                                            *base.add(16).cast::<i64>() =
                                                                _rt::as_i64(e);
                                                        }
                                                        V107::Oid(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (35i32) as u8;
                                                            *base.add(16).cast::<i32>() =
                                                                _rt::as_i32(e);
                                                        }
                                                        V107::Enumeration(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (36i32) as u8;
                                                            let super::super::super::super::wasi::rdbms::postgres::Enumeration{ name:name104, value:value104, } = e;
                                                            let vec105 = (name104.into_bytes())
                                                                .into_boxed_slice();
                                                            let ptr105 =
                                                                vec105.as_ptr().cast::<u8>();
                                                            let len105 = vec105.len();
                                                            ::core::mem::forget(vec105);
                                                            *base.add(20).cast::<usize>() = len105;
                                                            *base.add(16).cast::<*mut u8>() =
                                                                ptr105.cast_mut();
                                                            let vec106 = (value104.into_bytes())
                                                                .into_boxed_slice();
                                                            let ptr106 =
                                                                vec106.as_ptr().cast::<u8>();
                                                            let len106 = vec106.len();
                                                            ::core::mem::forget(vec106);
                                                            *base.add(28).cast::<usize>() = len106;
                                                            *base.add(24).cast::<*mut u8>() =
                                                                ptr106.cast_mut();
                                                        }
                                                        V107::Null => {
                                                            *base.add(8).cast::<u8>() =
                                                                (37i32) as u8;
                                                        }
                                                    }
                                                }
                                                V199::Array(e) => {
                                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                                    let vec198 = e;
                                                    let len198 = vec198.len();
                                                    let layout198 = _rt::alloc::Layout::from_size_align_unchecked(vec198.len() * 56, 8);
                                                    let result198 = if layout198.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout198)
                                                            .cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(
                                                                layout198,
                                                            );
                                                        }
                                                        ptr
                                                    } else {
                                                        {
                                                            ::core::ptr::null_mut()
                                                        }
                                                    };
                                                    for (i, e) in vec198.into_iter().enumerate() {
                                                        let base = result198.add(i * 56);
                                                        {
                                                            use super::super::super::super::wasi::rdbms::postgres::DbValuePrimitive as V197;
                                                            match e {
                                                                V197::Character(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (0i32) as u8;
                                                                    *base.add(8).cast::<u8>() =
                                                                        (_rt::as_i32(e)) as u8;
                                                                }
                                                                V197::Int2(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (1i32) as u8;
                                                                    *base.add(8).cast::<u16>() =
                                                                        (_rt::as_i32(e)) as u16;
                                                                }
                                                                V197::Int4(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (2i32) as u8;
                                                                    *base.add(8).cast::<i32>() =
                                                                        _rt::as_i32(e);
                                                                }
                                                                V197::Int8(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (3i32) as u8;
                                                                    *base.add(8).cast::<i64>() =
                                                                        _rt::as_i64(e);
                                                                }
                                                                V197::Float4(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (4i32) as u8;
                                                                    *base.add(8).cast::<f32>() =
                                                                        _rt::as_f32(e);
                                                                }
                                                                V197::Float8(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (5i32) as u8;
                                                                    *base.add(8).cast::<f64>() =
                                                                        _rt::as_f64(e);
                                                                }
                                                                V197::Numeric(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (6i32) as u8;
                                                                    let vec108 = (e.into_bytes())
                                                                        .into_boxed_slice();
                                                                    let ptr108 = vec108
                                                                        .as_ptr()
                                                                        .cast::<u8>();
                                                                    let len108 = vec108.len();
                                                                    ::core::mem::forget(vec108);
                                                                    *base.add(12).cast::<usize>() =
                                                                        len108;
                                                                    *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>() =
                                                                        ptr108.cast_mut();
                                                                }
                                                                V197::Boolean(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (7i32) as u8;
                                                                    *base.add(8).cast::<u8>() =
                                                                        (match e {
                                                                            true => 1,
                                                                            false => 0,
                                                                        })
                                                                            as u8;
                                                                }
                                                                V197::Text(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (8i32) as u8;
                                                                    let vec109 = (e.into_bytes())
                                                                        .into_boxed_slice();
                                                                    let ptr109 = vec109
                                                                        .as_ptr()
                                                                        .cast::<u8>();
                                                                    let len109 = vec109.len();
                                                                    ::core::mem::forget(vec109);
                                                                    *base.add(12).cast::<usize>() =
                                                                        len109;
                                                                    *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>() =
                                                                        ptr109.cast_mut();
                                                                }
                                                                V197::Varchar(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (9i32) as u8;
                                                                    let vec110 = (e.into_bytes())
                                                                        .into_boxed_slice();
                                                                    let ptr110 = vec110
                                                                        .as_ptr()
                                                                        .cast::<u8>();
                                                                    let len110 = vec110.len();
                                                                    ::core::mem::forget(vec110);
                                                                    *base.add(12).cast::<usize>() =
                                                                        len110;
                                                                    *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>() =
                                                                        ptr110.cast_mut();
                                                                }
                                                                V197::Bpchar(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (10i32) as u8;
                                                                    let vec111 = (e.into_bytes())
                                                                        .into_boxed_slice();
                                                                    let ptr111 = vec111
                                                                        .as_ptr()
                                                                        .cast::<u8>();
                                                                    let len111 = vec111.len();
                                                                    ::core::mem::forget(vec111);
                                                                    *base.add(12).cast::<usize>() =
                                                                        len111;
                                                                    *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>() =
                                                                        ptr111.cast_mut();
                                                                }
                                                                V197::Timestamp(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (11i32) as u8;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Timestamp{ date:date112, time:time112, } = e;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Date{ year:year113, month:month113, day:day113, } = date112;
                                                                    *base.add(8).cast::<i32>() =
                                                                        _rt::as_i32(year113);
                                                                    *base.add(12).cast::<u8>() =
                                                                        (_rt::as_i32(month113))
                                                                            as u8;
                                                                    *base.add(13).cast::<u8>() =
                                                                        (_rt::as_i32(day113)) as u8;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Time{ hour:hour114, minute:minute114, second:second114, nanosecond:nanosecond114, } = time112;
                                                                    *base.add(16).cast::<u8>() =
                                                                        (_rt::as_i32(hour114))
                                                                            as u8;
                                                                    *base.add(17).cast::<u8>() =
                                                                        (_rt::as_i32(minute114))
                                                                            as u8;
                                                                    *base.add(18).cast::<u8>() =
                                                                        (_rt::as_i32(second114))
                                                                            as u8;
                                                                    *base.add(20).cast::<i32>() =
                                                                        _rt::as_i32(nanosecond114);
                                                                }
                                                                V197::Timestamptz(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (12i32) as u8;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Timestamptz{ timestamp:timestamp115, offset:offset115, } = e;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Timestamp{ date:date116, time:time116, } = timestamp115;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Date{ year:year117, month:month117, day:day117, } = date116;
                                                                    *base.add(8).cast::<i32>() =
                                                                        _rt::as_i32(year117);
                                                                    *base.add(12).cast::<u8>() =
                                                                        (_rt::as_i32(month117))
                                                                            as u8;
                                                                    *base.add(13).cast::<u8>() =
                                                                        (_rt::as_i32(day117)) as u8;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Time{ hour:hour118, minute:minute118, second:second118, nanosecond:nanosecond118, } = time116;
                                                                    *base.add(16).cast::<u8>() =
                                                                        (_rt::as_i32(hour118))
                                                                            as u8;
                                                                    *base.add(17).cast::<u8>() =
                                                                        (_rt::as_i32(minute118))
                                                                            as u8;
                                                                    *base.add(18).cast::<u8>() =
                                                                        (_rt::as_i32(second118))
                                                                            as u8;
                                                                    *base.add(20).cast::<i32>() =
                                                                        _rt::as_i32(nanosecond118);
                                                                    *base.add(24).cast::<i32>() =
                                                                        _rt::as_i32(offset115);
                                                                }
                                                                V197::Date(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (13i32) as u8;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Date{ year:year119, month:month119, day:day119, } = e;
                                                                    *base.add(8).cast::<i32>() =
                                                                        _rt::as_i32(year119);
                                                                    *base.add(12).cast::<u8>() =
                                                                        (_rt::as_i32(month119))
                                                                            as u8;
                                                                    *base.add(13).cast::<u8>() =
                                                                        (_rt::as_i32(day119)) as u8;
                                                                }
                                                                V197::Time(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (14i32) as u8;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Time{ hour:hour120, minute:minute120, second:second120, nanosecond:nanosecond120, } = e;
                                                                    *base.add(8).cast::<u8>() =
                                                                        (_rt::as_i32(hour120))
                                                                            as u8;
                                                                    *base.add(9).cast::<u8>() =
                                                                        (_rt::as_i32(minute120))
                                                                            as u8;
                                                                    *base.add(10).cast::<u8>() =
                                                                        (_rt::as_i32(second120))
                                                                            as u8;
                                                                    *base.add(12).cast::<i32>() =
                                                                        _rt::as_i32(nanosecond120);
                                                                }
                                                                V197::Timetz(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (15i32) as u8;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Timetz{ time:time121, offset:offset121, } = e;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Time{ hour:hour122, minute:minute122, second:second122, nanosecond:nanosecond122, } = time121;
                                                                    *base.add(8).cast::<u8>() =
                                                                        (_rt::as_i32(hour122))
                                                                            as u8;
                                                                    *base.add(9).cast::<u8>() =
                                                                        (_rt::as_i32(minute122))
                                                                            as u8;
                                                                    *base.add(10).cast::<u8>() =
                                                                        (_rt::as_i32(second122))
                                                                            as u8;
                                                                    *base.add(12).cast::<i32>() =
                                                                        _rt::as_i32(nanosecond122);
                                                                    *base.add(16).cast::<i32>() =
                                                                        _rt::as_i32(offset121);
                                                                }
                                                                V197::Interval(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (16i32) as u8;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Interval{ months:months123, days:days123, microseconds:microseconds123, } = e;
                                                                    *base.add(8).cast::<i32>() =
                                                                        _rt::as_i32(months123);
                                                                    *base.add(12).cast::<i32>() =
                                                                        _rt::as_i32(days123);
                                                                    *base.add(16).cast::<i64>() =
                                                                        _rt::as_i64(
                                                                            microseconds123,
                                                                        );
                                                                }
                                                                V197::Bytea(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (17i32) as u8;
                                                                    let vec124 =
                                                                        (e).into_boxed_slice();
                                                                    let ptr124 = vec124
                                                                        .as_ptr()
                                                                        .cast::<u8>();
                                                                    let len124 = vec124.len();
                                                                    ::core::mem::forget(vec124);
                                                                    *base.add(12).cast::<usize>() =
                                                                        len124;
                                                                    *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>() =
                                                                        ptr124.cast_mut();
                                                                }
                                                                V197::Json(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (18i32) as u8;
                                                                    let vec125 = (e.into_bytes())
                                                                        .into_boxed_slice();
                                                                    let ptr125 = vec125
                                                                        .as_ptr()
                                                                        .cast::<u8>();
                                                                    let len125 = vec125.len();
                                                                    ::core::mem::forget(vec125);
                                                                    *base.add(12).cast::<usize>() =
                                                                        len125;
                                                                    *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>() =
                                                                        ptr125.cast_mut();
                                                                }
                                                                V197::Jsonb(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (19i32) as u8;
                                                                    let vec126 = (e.into_bytes())
                                                                        .into_boxed_slice();
                                                                    let ptr126 = vec126
                                                                        .as_ptr()
                                                                        .cast::<u8>();
                                                                    let len126 = vec126.len();
                                                                    ::core::mem::forget(vec126);
                                                                    *base.add(12).cast::<usize>() =
                                                                        len126;
                                                                    *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>() =
                                                                        ptr126.cast_mut();
                                                                }
                                                                V197::Jsonpath(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (20i32) as u8;
                                                                    let vec127 = (e.into_bytes())
                                                                        .into_boxed_slice();
                                                                    let ptr127 = vec127
                                                                        .as_ptr()
                                                                        .cast::<u8>();
                                                                    let len127 = vec127.len();
                                                                    ::core::mem::forget(vec127);
                                                                    *base.add(12).cast::<usize>() =
                                                                        len127;
                                                                    *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>() =
                                                                        ptr127.cast_mut();
                                                                }
                                                                V197::Xml(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (21i32) as u8;
                                                                    let vec128 = (e.into_bytes())
                                                                        .into_boxed_slice();
                                                                    let ptr128 = vec128
                                                                        .as_ptr()
                                                                        .cast::<u8>();
                                                                    let len128 = vec128.len();
                                                                    ::core::mem::forget(vec128);
                                                                    *base.add(12).cast::<usize>() =
                                                                        len128;
                                                                    *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>() =
                                                                        ptr128.cast_mut();
                                                                }
                                                                V197::Uuid(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (22i32) as u8;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Uuid{ high_bits:high_bits129, low_bits:low_bits129, } = e;
                                                                    *base.add(8).cast::<i64>() =
                                                                        _rt::as_i64(high_bits129);
                                                                    *base.add(16).cast::<i64>() =
                                                                        _rt::as_i64(low_bits129);
                                                                }
                                                                V197::Inet(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (23i32) as u8;
                                                                    use super::super::super::super::wasi::rdbms::postgres::IpAddress as V132;
                                                                    match e {
                                                                        V132::Ipv4(e) => {
                                                                            *base
                                                                                .add(8)
                                                                                .cast::<u8>() =
                                                                                (0i32) as u8;
                                                                            let (
                                                                                t130_0,
                                                                                t130_1,
                                                                                t130_2,
                                                                                t130_3,
                                                                            ) = e;
                                                                            *base
                                                                                .add(10)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    t130_0,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(11)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    t130_1,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(12)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    t130_2,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(13)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    t130_3,
                                                                                ))
                                                                                    as u8;
                                                                        }
                                                                        V132::Ipv6(e) => {
                                                                            *base
                                                                                .add(8)
                                                                                .cast::<u8>() =
                                                                                (1i32) as u8;
                                                                            let (
                                                                                t131_0,
                                                                                t131_1,
                                                                                t131_2,
                                                                                t131_3,
                                                                                t131_4,
                                                                                t131_5,
                                                                                t131_6,
                                                                                t131_7,
                                                                            ) = e;
                                                                            *base
                                                                                .add(10)
                                                                                .cast::<u16>() =
                                                                                (_rt::as_i32(
                                                                                    t131_0,
                                                                                ))
                                                                                    as u16;
                                                                            *base
                                                                                .add(12)
                                                                                .cast::<u16>() =
                                                                                (_rt::as_i32(
                                                                                    t131_1,
                                                                                ))
                                                                                    as u16;
                                                                            *base
                                                                                .add(14)
                                                                                .cast::<u16>() =
                                                                                (_rt::as_i32(
                                                                                    t131_2,
                                                                                ))
                                                                                    as u16;
                                                                            *base
                                                                                .add(16)
                                                                                .cast::<u16>() =
                                                                                (_rt::as_i32(
                                                                                    t131_3,
                                                                                ))
                                                                                    as u16;
                                                                            *base
                                                                                .add(18)
                                                                                .cast::<u16>() =
                                                                                (_rt::as_i32(
                                                                                    t131_4,
                                                                                ))
                                                                                    as u16;
                                                                            *base
                                                                                .add(20)
                                                                                .cast::<u16>() =
                                                                                (_rt::as_i32(
                                                                                    t131_5,
                                                                                ))
                                                                                    as u16;
                                                                            *base
                                                                                .add(22)
                                                                                .cast::<u16>() =
                                                                                (_rt::as_i32(
                                                                                    t131_6,
                                                                                ))
                                                                                    as u16;
                                                                            *base
                                                                                .add(24)
                                                                                .cast::<u16>() =
                                                                                (_rt::as_i32(
                                                                                    t131_7,
                                                                                ))
                                                                                    as u16;
                                                                        }
                                                                    }
                                                                }
                                                                V197::Cidr(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (24i32) as u8;
                                                                    use super::super::super::super::wasi::rdbms::postgres::IpAddress as V135;
                                                                    match e {
                                                                        V135::Ipv4(e) => {
                                                                            *base
                                                                                .add(8)
                                                                                .cast::<u8>() =
                                                                                (0i32) as u8;
                                                                            let (
                                                                                t133_0,
                                                                                t133_1,
                                                                                t133_2,
                                                                                t133_3,
                                                                            ) = e;
                                                                            *base
                                                                                .add(10)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    t133_0,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(11)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    t133_1,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(12)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    t133_2,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(13)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    t133_3,
                                                                                ))
                                                                                    as u8;
                                                                        }
                                                                        V135::Ipv6(e) => {
                                                                            *base
                                                                                .add(8)
                                                                                .cast::<u8>() =
                                                                                (1i32) as u8;
                                                                            let (
                                                                                t134_0,
                                                                                t134_1,
                                                                                t134_2,
                                                                                t134_3,
                                                                                t134_4,
                                                                                t134_5,
                                                                                t134_6,
                                                                                t134_7,
                                                                            ) = e;
                                                                            *base
                                                                                .add(10)
                                                                                .cast::<u16>() =
                                                                                (_rt::as_i32(
                                                                                    t134_0,
                                                                                ))
                                                                                    as u16;
                                                                            *base
                                                                                .add(12)
                                                                                .cast::<u16>() =
                                                                                (_rt::as_i32(
                                                                                    t134_1,
                                                                                ))
                                                                                    as u16;
                                                                            *base
                                                                                .add(14)
                                                                                .cast::<u16>() =
                                                                                (_rt::as_i32(
                                                                                    t134_2,
                                                                                ))
                                                                                    as u16;
                                                                            *base
                                                                                .add(16)
                                                                                .cast::<u16>() =
                                                                                (_rt::as_i32(
                                                                                    t134_3,
                                                                                ))
                                                                                    as u16;
                                                                            *base
                                                                                .add(18)
                                                                                .cast::<u16>() =
                                                                                (_rt::as_i32(
                                                                                    t134_4,
                                                                                ))
                                                                                    as u16;
                                                                            *base
                                                                                .add(20)
                                                                                .cast::<u16>() =
                                                                                (_rt::as_i32(
                                                                                    t134_5,
                                                                                ))
                                                                                    as u16;
                                                                            *base
                                                                                .add(22)
                                                                                .cast::<u16>() =
                                                                                (_rt::as_i32(
                                                                                    t134_6,
                                                                                ))
                                                                                    as u16;
                                                                            *base
                                                                                .add(24)
                                                                                .cast::<u16>() =
                                                                                (_rt::as_i32(
                                                                                    t134_7,
                                                                                ))
                                                                                    as u16;
                                                                        }
                                                                    }
                                                                }
                                                                V197::Macaddr(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (25i32) as u8;
                                                                    let super::super::super::super::wasi::rdbms::postgres::MacAddress{ octets:octets136, } = e;
                                                                    let (
                                                                        t137_0,
                                                                        t137_1,
                                                                        t137_2,
                                                                        t137_3,
                                                                        t137_4,
                                                                        t137_5,
                                                                    ) = octets136;
                                                                    *base.add(8).cast::<u8>() =
                                                                        (_rt::as_i32(t137_0)) as u8;
                                                                    *base.add(9).cast::<u8>() =
                                                                        (_rt::as_i32(t137_1)) as u8;
                                                                    *base.add(10).cast::<u8>() =
                                                                        (_rt::as_i32(t137_2)) as u8;
                                                                    *base.add(11).cast::<u8>() =
                                                                        (_rt::as_i32(t137_3)) as u8;
                                                                    *base.add(12).cast::<u8>() =
                                                                        (_rt::as_i32(t137_4)) as u8;
                                                                    *base.add(13).cast::<u8>() =
                                                                        (_rt::as_i32(t137_5)) as u8;
                                                                }
                                                                V197::Bit(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (26i32) as u8;
                                                                    let vec138 = e;
                                                                    let len138 = vec138.len();
                                                                    let layout138 = _rt::alloc::Layout::from_size_align_unchecked(vec138.len() * 1, 1);
                                                                    let result138 = if layout138
                                                                        .size()
                                                                        != 0
                                                                    {
                                                                        let ptr =
                                                                            _rt::alloc::alloc(
                                                                                layout138,
                                                                            )
                                                                            .cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout138);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        {
                                                                            ::core::ptr::null_mut()
                                                                        }
                                                                    };
                                                                    for (i, e) in vec138
                                                                        .into_iter()
                                                                        .enumerate()
                                                                    {
                                                                        let base =
                                                                            result138.add(i * 1);
                                                                        {
                                                                            *base
                                                                                .add(0)
                                                                                .cast::<u8>() =
                                                                                (match e {
                                                                                    true => 1,
                                                                                    false => 0,
                                                                                })
                                                                                    as u8;
                                                                        }
                                                                    }
                                                                    *base.add(12).cast::<usize>() =
                                                                        len138;
                                                                    *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>() =
                                                                        result138;
                                                                }
                                                                V197::Varbit(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (27i32) as u8;
                                                                    let vec139 = e;
                                                                    let len139 = vec139.len();
                                                                    let layout139 = _rt::alloc::Layout::from_size_align_unchecked(vec139.len() * 1, 1);
                                                                    let result139 = if layout139
                                                                        .size()
                                                                        != 0
                                                                    {
                                                                        let ptr =
                                                                            _rt::alloc::alloc(
                                                                                layout139,
                                                                            )
                                                                            .cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout139);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        {
                                                                            ::core::ptr::null_mut()
                                                                        }
                                                                    };
                                                                    for (i, e) in vec139
                                                                        .into_iter()
                                                                        .enumerate()
                                                                    {
                                                                        let base =
                                                                            result139.add(i * 1);
                                                                        {
                                                                            *base
                                                                                .add(0)
                                                                                .cast::<u8>() =
                                                                                (match e {
                                                                                    true => 1,
                                                                                    false => 0,
                                                                                })
                                                                                    as u8;
                                                                        }
                                                                    }
                                                                    *base.add(12).cast::<usize>() =
                                                                        len139;
                                                                    *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>() =
                                                                        result139;
                                                                }
                                                                V197::Int4range(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (28i32) as u8;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Int4range{ start:start140, end:end140, } = e;
                                                                    use super::super::super::super::wasi::rdbms::postgres::Int4bound as V141;
                                                                    match start140 {
                                                                        V141::Included(e) => {
                                                                            *base
                                                                                .add(8)
                                                                                .cast::<u8>() =
                                                                                (0i32) as u8;
                                                                            *base
                                                                                .add(12)
                                                                                .cast::<i32>() =
                                                                                _rt::as_i32(e);
                                                                        }
                                                                        V141::Excluded(e) => {
                                                                            *base
                                                                                .add(8)
                                                                                .cast::<u8>() =
                                                                                (1i32) as u8;
                                                                            *base
                                                                                .add(12)
                                                                                .cast::<i32>() =
                                                                                _rt::as_i32(e);
                                                                        }
                                                                        V141::Unbounded => {
                                                                            *base
                                                                                .add(8)
                                                                                .cast::<u8>() =
                                                                                (2i32) as u8;
                                                                        }
                                                                    }
                                                                    use super::super::super::super::wasi::rdbms::postgres::Int4bound as V142;
                                                                    match end140 {
                                                                        V142::Included(e) => {
                                                                            *base
                                                                                .add(16)
                                                                                .cast::<u8>() =
                                                                                (0i32) as u8;
                                                                            *base
                                                                                .add(20)
                                                                                .cast::<i32>() =
                                                                                _rt::as_i32(e);
                                                                        }
                                                                        V142::Excluded(e) => {
                                                                            *base
                                                                                .add(16)
                                                                                .cast::<u8>() =
                                                                                (1i32) as u8;
                                                                            *base
                                                                                .add(20)
                                                                                .cast::<i32>() =
                                                                                _rt::as_i32(e);
                                                                        }
                                                                        V142::Unbounded => {
                                                                            *base
                                                                                .add(16)
                                                                                .cast::<u8>() =
                                                                                (2i32) as u8;
                                                                        }
                                                                    }
                                                                }
                                                                V197::Int8range(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (29i32) as u8;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Int8range{ start:start143, end:end143, } = e;
                                                                    use super::super::super::super::wasi::rdbms::postgres::Int8bound as V144;
                                                                    match start143 {
                                                                        V144::Included(e) => {
                                                                            *base
                                                                                .add(8)
                                                                                .cast::<u8>() =
                                                                                (0i32) as u8;
                                                                            *base
                                                                                .add(16)
                                                                                .cast::<i64>() =
                                                                                _rt::as_i64(e);
                                                                        }
                                                                        V144::Excluded(e) => {
                                                                            *base
                                                                                .add(8)
                                                                                .cast::<u8>() =
                                                                                (1i32) as u8;
                                                                            *base
                                                                                .add(16)
                                                                                .cast::<i64>() =
                                                                                _rt::as_i64(e);
                                                                        }
                                                                        V144::Unbounded => {
                                                                            *base
                                                                                .add(8)
                                                                                .cast::<u8>() =
                                                                                (2i32) as u8;
                                                                        }
                                                                    }
                                                                    use super::super::super::super::wasi::rdbms::postgres::Int8bound as V145;
                                                                    match end143 {
                                                                        V145::Included(e) => {
                                                                            *base
                                                                                .add(24)
                                                                                .cast::<u8>() =
                                                                                (0i32) as u8;
                                                                            *base
                                                                                .add(32)
                                                                                .cast::<i64>() =
                                                                                _rt::as_i64(e);
                                                                        }
                                                                        V145::Excluded(e) => {
                                                                            *base
                                                                                .add(24)
                                                                                .cast::<u8>() =
                                                                                (1i32) as u8;
                                                                            *base
                                                                                .add(32)
                                                                                .cast::<i64>() =
                                                                                _rt::as_i64(e);
                                                                        }
                                                                        V145::Unbounded => {
                                                                            *base
                                                                                .add(24)
                                                                                .cast::<u8>() =
                                                                                (2i32) as u8;
                                                                        }
                                                                    }
                                                                }
                                                                V197::Numrange(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (30i32) as u8;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Numrange{ start:start146, end:end146, } = e;
                                                                    use super::super::super::super::wasi::rdbms::postgres::Numbound as V149;
                                                                    match start146 {
                                                                        V149::Included(e) => {
                                                                            *base
                                                                                .add(8)
                                                                                .cast::<u8>() =
                                                                                (0i32) as u8;
                                                                            let vec147 = (e
                                                                                .into_bytes())
                                                                            .into_boxed_slice();
                                                                            let ptr147 = vec147
                                                                                .as_ptr()
                                                                                .cast::<u8>();
                                                                            let len147 =
                                                                                vec147.len();
                                                                            ::core::mem::forget(
                                                                                vec147,
                                                                            );
                                                                            *base
                                                                                .add(16)
                                                                                .cast::<usize>() =
                                                                                len147;
                                                                            *base
                                                                                .add(12)
                                                                                .cast::<*mut u8>(
                                                                                ) =
                                                                                ptr147.cast_mut();
                                                                        }
                                                                        V149::Excluded(e) => {
                                                                            *base
                                                                                .add(8)
                                                                                .cast::<u8>() =
                                                                                (1i32) as u8;
                                                                            let vec148 = (e
                                                                                .into_bytes())
                                                                            .into_boxed_slice();
                                                                            let ptr148 = vec148
                                                                                .as_ptr()
                                                                                .cast::<u8>();
                                                                            let len148 =
                                                                                vec148.len();
                                                                            ::core::mem::forget(
                                                                                vec148,
                                                                            );
                                                                            *base
                                                                                .add(16)
                                                                                .cast::<usize>() =
                                                                                len148;
                                                                            *base
                                                                                .add(12)
                                                                                .cast::<*mut u8>(
                                                                                ) =
                                                                                ptr148.cast_mut();
                                                                        }
                                                                        V149::Unbounded => {
                                                                            *base
                                                                                .add(8)
                                                                                .cast::<u8>() =
                                                                                (2i32) as u8;
                                                                        }
                                                                    }
                                                                    use super::super::super::super::wasi::rdbms::postgres::Numbound as V152;
                                                                    match end146 {
                                                                        V152::Included(e) => {
                                                                            *base
                                                                                .add(20)
                                                                                .cast::<u8>() =
                                                                                (0i32) as u8;
                                                                            let vec150 = (e
                                                                                .into_bytes())
                                                                            .into_boxed_slice();
                                                                            let ptr150 = vec150
                                                                                .as_ptr()
                                                                                .cast::<u8>();
                                                                            let len150 =
                                                                                vec150.len();
                                                                            ::core::mem::forget(
                                                                                vec150,
                                                                            );
                                                                            *base
                                                                                .add(28)
                                                                                .cast::<usize>() =
                                                                                len150;
                                                                            *base
                                                                                .add(24)
                                                                                .cast::<*mut u8>(
                                                                                ) =
                                                                                ptr150.cast_mut();
                                                                        }
                                                                        V152::Excluded(e) => {
                                                                            *base
                                                                                .add(20)
                                                                                .cast::<u8>() =
                                                                                (1i32) as u8;
                                                                            let vec151 = (e
                                                                                .into_bytes())
                                                                            .into_boxed_slice();
                                                                            let ptr151 = vec151
                                                                                .as_ptr()
                                                                                .cast::<u8>();
                                                                            let len151 =
                                                                                vec151.len();
                                                                            ::core::mem::forget(
                                                                                vec151,
                                                                            );
                                                                            *base
                                                                                .add(28)
                                                                                .cast::<usize>() =
                                                                                len151;
                                                                            *base
                                                                                .add(24)
                                                                                .cast::<*mut u8>(
                                                                                ) =
                                                                                ptr151.cast_mut();
                                                                        }
                                                                        V152::Unbounded => {
                                                                            *base
                                                                                .add(20)
                                                                                .cast::<u8>() =
                                                                                (2i32) as u8;
                                                                        }
                                                                    }
                                                                }
                                                                V197::Tsrange(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (31i32) as u8;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Tsrange{ start:start153, end:end153, } = e;
                                                                    use super::super::super::super::wasi::rdbms::postgres::Tsbound as V160;
                                                                    match start153 {
                                                                        V160::Included(e) => {
                                                                            *base
                                                                                .add(8)
                                                                                .cast::<u8>() =
                                                                                (0i32) as u8;
                                                                            let super::super::super::super::wasi::rdbms::postgres::Timestamp{ date:date154, time:time154, } = e;
                                                                            let super::super::super::super::wasi::rdbms::postgres::Date{ year:year155, month:month155, day:day155, } = date154;
                                                                            *base
                                                                                .add(12)
                                                                                .cast::<i32>() =
                                                                                _rt::as_i32(
                                                                                    year155,
                                                                                );
                                                                            *base
                                                                                .add(16)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    month155,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(17)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    day155,
                                                                                ))
                                                                                    as u8;
                                                                            let super::super::super::super::wasi::rdbms::postgres::Time{ hour:hour156, minute:minute156, second:second156, nanosecond:nanosecond156, } = time154;
                                                                            *base
                                                                                .add(20)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    hour156,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(21)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    minute156,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(22)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    second156,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(24)
                                                                                .cast::<i32>() =
                                                                                _rt::as_i32(
                                                                                    nanosecond156,
                                                                                );
                                                                        }
                                                                        V160::Excluded(e) => {
                                                                            *base
                                                                                .add(8)
                                                                                .cast::<u8>() =
                                                                                (1i32) as u8;
                                                                            let super::super::super::super::wasi::rdbms::postgres::Timestamp{ date:date157, time:time157, } = e;
                                                                            let super::super::super::super::wasi::rdbms::postgres::Date{ year:year158, month:month158, day:day158, } = date157;
                                                                            *base
                                                                                .add(12)
                                                                                .cast::<i32>() =
                                                                                _rt::as_i32(
                                                                                    year158,
                                                                                );
                                                                            *base
                                                                                .add(16)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    month158,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(17)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    day158,
                                                                                ))
                                                                                    as u8;
                                                                            let super::super::super::super::wasi::rdbms::postgres::Time{ hour:hour159, minute:minute159, second:second159, nanosecond:nanosecond159, } = time157;
                                                                            *base
                                                                                .add(20)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    hour159,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(21)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    minute159,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(22)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    second159,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(24)
                                                                                .cast::<i32>() =
                                                                                _rt::as_i32(
                                                                                    nanosecond159,
                                                                                );
                                                                        }
                                                                        V160::Unbounded => {
                                                                            *base
                                                                                .add(8)
                                                                                .cast::<u8>() =
                                                                                (2i32) as u8;
                                                                        }
                                                                    }
                                                                    use super::super::super::super::wasi::rdbms::postgres::Tsbound as V167;
                                                                    match end153 {
                                                                        V167::Included(e) => {
                                                                            *base
                                                                                .add(28)
                                                                                .cast::<u8>() =
                                                                                (0i32) as u8;
                                                                            let super::super::super::super::wasi::rdbms::postgres::Timestamp{ date:date161, time:time161, } = e;
                                                                            let super::super::super::super::wasi::rdbms::postgres::Date{ year:year162, month:month162, day:day162, } = date161;
                                                                            *base
                                                                                .add(32)
                                                                                .cast::<i32>() =
                                                                                _rt::as_i32(
                                                                                    year162,
                                                                                );
                                                                            *base
                                                                                .add(36)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    month162,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(37)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    day162,
                                                                                ))
                                                                                    as u8;
                                                                            let super::super::super::super::wasi::rdbms::postgres::Time{ hour:hour163, minute:minute163, second:second163, nanosecond:nanosecond163, } = time161;
                                                                            *base
                                                                                .add(40)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    hour163,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(41)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    minute163,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(42)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    second163,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(44)
                                                                                .cast::<i32>() =
                                                                                _rt::as_i32(
                                                                                    nanosecond163,
                                                                                );
                                                                        }
                                                                        V167::Excluded(e) => {
                                                                            *base
                                                                                .add(28)
                                                                                .cast::<u8>() =
                                                                                (1i32) as u8;
                                                                            let super::super::super::super::wasi::rdbms::postgres::Timestamp{ date:date164, time:time164, } = e;
                                                                            let super::super::super::super::wasi::rdbms::postgres::Date{ year:year165, month:month165, day:day165, } = date164;
                                                                            *base
                                                                                .add(32)
                                                                                .cast::<i32>() =
                                                                                _rt::as_i32(
                                                                                    year165,
                                                                                );
                                                                            *base
                                                                                .add(36)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    month165,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(37)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    day165,
                                                                                ))
                                                                                    as u8;
                                                                            let super::super::super::super::wasi::rdbms::postgres::Time{ hour:hour166, minute:minute166, second:second166, nanosecond:nanosecond166, } = time164;
                                                                            *base
                                                                                .add(40)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    hour166,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(41)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    minute166,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(42)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    second166,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(44)
                                                                                .cast::<i32>() =
                                                                                _rt::as_i32(
                                                                                    nanosecond166,
                                                                                );
                                                                        }
                                                                        V167::Unbounded => {
                                                                            *base
                                                                                .add(28)
                                                                                .cast::<u8>() =
                                                                                (2i32) as u8;
                                                                        }
                                                                    }
                                                                }
                                                                V197::Tstzrange(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (32i32) as u8;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Tstzrange{ start:start168, end:end168, } = e;
                                                                    use super::super::super::super::wasi::rdbms::postgres::Tstzbound as V177;
                                                                    match start168 {
                                                                        V177::Included(e) => {
                                                                            *base
                                                                                .add(8)
                                                                                .cast::<u8>() =
                                                                                (0i32) as u8;
                                                                            let super::super::super::super::wasi::rdbms::postgres::Timestamptz{ timestamp:timestamp169, offset:offset169, } = e;
                                                                            let super::super::super::super::wasi::rdbms::postgres::Timestamp{ date:date170, time:time170, } = timestamp169;
                                                                            let super::super::super::super::wasi::rdbms::postgres::Date{ year:year171, month:month171, day:day171, } = date170;
                                                                            *base
                                                                                .add(12)
                                                                                .cast::<i32>() =
                                                                                _rt::as_i32(
                                                                                    year171,
                                                                                );
                                                                            *base
                                                                                .add(16)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    month171,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(17)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    day171,
                                                                                ))
                                                                                    as u8;
                                                                            let super::super::super::super::wasi::rdbms::postgres::Time{ hour:hour172, minute:minute172, second:second172, nanosecond:nanosecond172, } = time170;
                                                                            *base
                                                                                .add(20)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    hour172,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(21)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    minute172,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(22)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    second172,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(24)
                                                                                .cast::<i32>() =
                                                                                _rt::as_i32(
                                                                                    nanosecond172,
                                                                                );
                                                                            *base
                                                                                .add(28)
                                                                                .cast::<i32>() =
                                                                                _rt::as_i32(
                                                                                    offset169,
                                                                                );
                                                                        }
                                                                        V177::Excluded(e) => {
                                                                            *base
                                                                                .add(8)
                                                                                .cast::<u8>() =
                                                                                (1i32) as u8;
                                                                            let super::super::super::super::wasi::rdbms::postgres::Timestamptz{ timestamp:timestamp173, offset:offset173, } = e;
                                                                            let super::super::super::super::wasi::rdbms::postgres::Timestamp{ date:date174, time:time174, } = timestamp173;
                                                                            let super::super::super::super::wasi::rdbms::postgres::Date{ year:year175, month:month175, day:day175, } = date174;
                                                                            *base
                                                                                .add(12)
                                                                                .cast::<i32>() =
                                                                                _rt::as_i32(
                                                                                    year175,
                                                                                );
                                                                            *base
                                                                                .add(16)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    month175,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(17)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    day175,
                                                                                ))
                                                                                    as u8;
                                                                            let super::super::super::super::wasi::rdbms::postgres::Time{ hour:hour176, minute:minute176, second:second176, nanosecond:nanosecond176, } = time174;
                                                                            *base
                                                                                .add(20)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    hour176,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(21)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    minute176,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(22)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    second176,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(24)
                                                                                .cast::<i32>() =
                                                                                _rt::as_i32(
                                                                                    nanosecond176,
                                                                                );
                                                                            *base
                                                                                .add(28)
                                                                                .cast::<i32>() =
                                                                                _rt::as_i32(
                                                                                    offset173,
                                                                                );
                                                                        }
                                                                        V177::Unbounded => {
                                                                            *base
                                                                                .add(8)
                                                                                .cast::<u8>() =
                                                                                (2i32) as u8;
                                                                        }
                                                                    }
                                                                    use super::super::super::super::wasi::rdbms::postgres::Tstzbound as V186;
                                                                    match end168 {
                                                                        V186::Included(e) => {
                                                                            *base
                                                                                .add(32)
                                                                                .cast::<u8>() =
                                                                                (0i32) as u8;
                                                                            let super::super::super::super::wasi::rdbms::postgres::Timestamptz{ timestamp:timestamp178, offset:offset178, } = e;
                                                                            let super::super::super::super::wasi::rdbms::postgres::Timestamp{ date:date179, time:time179, } = timestamp178;
                                                                            let super::super::super::super::wasi::rdbms::postgres::Date{ year:year180, month:month180, day:day180, } = date179;
                                                                            *base
                                                                                .add(36)
                                                                                .cast::<i32>() =
                                                                                _rt::as_i32(
                                                                                    year180,
                                                                                );
                                                                            *base
                                                                                .add(40)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    month180,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(41)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    day180,
                                                                                ))
                                                                                    as u8;
                                                                            let super::super::super::super::wasi::rdbms::postgres::Time{ hour:hour181, minute:minute181, second:second181, nanosecond:nanosecond181, } = time179;
                                                                            *base
                                                                                .add(44)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    hour181,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(45)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    minute181,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(46)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    second181,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(48)
                                                                                .cast::<i32>() =
                                                                                _rt::as_i32(
                                                                                    nanosecond181,
                                                                                );
                                                                            *base
                                                                                .add(52)
                                                                                .cast::<i32>() =
                                                                                _rt::as_i32(
                                                                                    offset178,
                                                                                );
                                                                        }
                                                                        V186::Excluded(e) => {
                                                                            *base
                                                                                .add(32)
                                                                                .cast::<u8>() =
                                                                                (1i32) as u8;
                                                                            let super::super::super::super::wasi::rdbms::postgres::Timestamptz{ timestamp:timestamp182, offset:offset182, } = e;
                                                                            let super::super::super::super::wasi::rdbms::postgres::Timestamp{ date:date183, time:time183, } = timestamp182;
                                                                            let super::super::super::super::wasi::rdbms::postgres::Date{ year:year184, month:month184, day:day184, } = date183;
                                                                            *base
                                                                                .add(36)
                                                                                .cast::<i32>() =
                                                                                _rt::as_i32(
                                                                                    year184,
                                                                                );
                                                                            *base
                                                                                .add(40)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    month184,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(41)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    day184,
                                                                                ))
                                                                                    as u8;
                                                                            let super::super::super::super::wasi::rdbms::postgres::Time{ hour:hour185, minute:minute185, second:second185, nanosecond:nanosecond185, } = time183;
                                                                            *base
                                                                                .add(44)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    hour185,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(45)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    minute185,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(46)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    second185,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(48)
                                                                                .cast::<i32>() =
                                                                                _rt::as_i32(
                                                                                    nanosecond185,
                                                                                );
                                                                            *base
                                                                                .add(52)
                                                                                .cast::<i32>() =
                                                                                _rt::as_i32(
                                                                                    offset182,
                                                                                );
                                                                        }
                                                                        V186::Unbounded => {
                                                                            *base
                                                                                .add(32)
                                                                                .cast::<u8>() =
                                                                                (2i32) as u8;
                                                                        }
                                                                    }
                                                                }
                                                                V197::Daterange(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (33i32) as u8;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Daterange{ start:start187, end:end187, } = e;
                                                                    use super::super::super::super::wasi::rdbms::postgres::Datebound as V190;
                                                                    match start187 {
                                                                        V190::Included(e) => {
                                                                            *base
                                                                                .add(8)
                                                                                .cast::<u8>() =
                                                                                (0i32) as u8;
                                                                            let super::super::super::super::wasi::rdbms::postgres::Date{ year:year188, month:month188, day:day188, } = e;
                                                                            *base
                                                                                .add(12)
                                                                                .cast::<i32>() =
                                                                                _rt::as_i32(
                                                                                    year188,
                                                                                );
                                                                            *base
                                                                                .add(16)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    month188,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(17)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    day188,
                                                                                ))
                                                                                    as u8;
                                                                        }
                                                                        V190::Excluded(e) => {
                                                                            *base
                                                                                .add(8)
                                                                                .cast::<u8>() =
                                                                                (1i32) as u8;
                                                                            let super::super::super::super::wasi::rdbms::postgres::Date{ year:year189, month:month189, day:day189, } = e;
                                                                            *base
                                                                                .add(12)
                                                                                .cast::<i32>() =
                                                                                _rt::as_i32(
                                                                                    year189,
                                                                                );
                                                                            *base
                                                                                .add(16)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    month189,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(17)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    day189,
                                                                                ))
                                                                                    as u8;
                                                                        }
                                                                        V190::Unbounded => {
                                                                            *base
                                                                                .add(8)
                                                                                .cast::<u8>() =
                                                                                (2i32) as u8;
                                                                        }
                                                                    }
                                                                    use super::super::super::super::wasi::rdbms::postgres::Datebound as V193;
                                                                    match end187 {
                                                                        V193::Included(e) => {
                                                                            *base
                                                                                .add(20)
                                                                                .cast::<u8>() =
                                                                                (0i32) as u8;
                                                                            let super::super::super::super::wasi::rdbms::postgres::Date{ year:year191, month:month191, day:day191, } = e;
                                                                            *base
                                                                                .add(24)
                                                                                .cast::<i32>() =
                                                                                _rt::as_i32(
                                                                                    year191,
                                                                                );
                                                                            *base
                                                                                .add(28)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    month191,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(29)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    day191,
                                                                                ))
                                                                                    as u8;
                                                                        }
                                                                        V193::Excluded(e) => {
                                                                            *base
                                                                                .add(20)
                                                                                .cast::<u8>() =
                                                                                (1i32) as u8;
                                                                            let super::super::super::super::wasi::rdbms::postgres::Date{ year:year192, month:month192, day:day192, } = e;
                                                                            *base
                                                                                .add(24)
                                                                                .cast::<i32>() =
                                                                                _rt::as_i32(
                                                                                    year192,
                                                                                );
                                                                            *base
                                                                                .add(28)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    month192,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(29)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    day192,
                                                                                ))
                                                                                    as u8;
                                                                        }
                                                                        V193::Unbounded => {
                                                                            *base
                                                                                .add(20)
                                                                                .cast::<u8>() =
                                                                                (2i32) as u8;
                                                                        }
                                                                    }
                                                                }
                                                                V197::Money(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (34i32) as u8;
                                                                    *base.add(8).cast::<i64>() =
                                                                        _rt::as_i64(e);
                                                                }
                                                                V197::Oid(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (35i32) as u8;
                                                                    *base.add(8).cast::<i32>() =
                                                                        _rt::as_i32(e);
                                                                }
                                                                V197::Enumeration(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (36i32) as u8;
                                                                    let super::super::super::super::wasi::rdbms::postgres::Enumeration{ name:name194, value:value194, } = e;
                                                                    let vec195 = (name194
                                                                        .into_bytes())
                                                                    .into_boxed_slice();
                                                                    let ptr195 = vec195
                                                                        .as_ptr()
                                                                        .cast::<u8>();
                                                                    let len195 = vec195.len();
                                                                    ::core::mem::forget(vec195);
                                                                    *base.add(12).cast::<usize>() =
                                                                        len195;
                                                                    *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>() =
                                                                        ptr195.cast_mut();
                                                                    let vec196 = (value194
                                                                        .into_bytes())
                                                                    .into_boxed_slice();
                                                                    let ptr196 = vec196
                                                                        .as_ptr()
                                                                        .cast::<u8>();
                                                                    let len196 = vec196.len();
                                                                    ::core::mem::forget(vec196);
                                                                    *base.add(20).cast::<usize>() =
                                                                        len196;
                                                                    *base
                                                                        .add(16)
                                                                        .cast::<*mut u8>() =
                                                                        ptr196.cast_mut();
                                                                }
                                                                V197::Null => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (37i32) as u8;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    *base.add(12).cast::<usize>() = len198;
                                                    *base.add(8).cast::<*mut u8>() = result198;
                                                }
                                            }
                                        }
                                    }
                                    *base.add(4).cast::<usize>() = len200;
                                    *base.add(0).cast::<*mut u8>() = result200;
                                }
                            }
                            *ptr6.add(16).cast::<usize>() = len201;
                            *ptr6.add(12).cast::<*mut u8>() = result201;
                        }
                        Err(e) => {
                            *ptr6.add(0).cast::<u8>() = (1i32) as u8;
                            let vec202 = (e.into_bytes()).into_boxed_slice();
                            let ptr202 = vec202.as_ptr().cast::<u8>();
                            let len202 = vec202.len();
                            ::core::mem::forget(vec202);
                            *ptr6.add(8).cast::<usize>() = len202;
                            *ptr6.add(4).cast::<*mut u8>() = ptr202.cast_mut();
                        }
                    };
                    ptr6
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_postgres_query<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l12 = *arg0.add(4).cast::<*mut u8>();
                            let l13 = *arg0.add(8).cast::<usize>();
                            let base14 = l12;
                            let len14 = l13;
                            for i in 0..len14 {
                                let base = base14.add(i * 40);
                                {
                                    let l1 = *base.add(8).cast::<*mut u8>();
                                    let l2 = *base.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l1, l2, 1);
                                    let l3 = i32::from(*base.add(16).cast::<u8>());
                                    match l3 {
                                        0 => {
                                            let l4 = i32::from(*base.add(20).cast::<u8>());
                                            match l4 {
                                                0 => (),
                                                1 => (),
                                                2 => (),
                                                3 => (),
                                                4 => (),
                                                5 => (),
                                                6 => (),
                                                7 => (),
                                                8 => (),
                                                9 => (),
                                                10 => (),
                                                11 => (),
                                                12 => (),
                                                13 => (),
                                                14 => (),
                                                15 => (),
                                                16 => (),
                                                17 => (),
                                                18 => (),
                                                19 => (),
                                                20 => (),
                                                21 => (),
                                                22 => (),
                                                23 => (),
                                                24 => (),
                                                25 => (),
                                                26 => (),
                                                27 => (),
                                                28 => (),
                                                29 => (),
                                                30 => (),
                                                31 => (),
                                                32 => (),
                                                33 => (),
                                                34 => (),
                                                35 => (),
                                                _ => {
                                                    let l5 = *base.add(24).cast::<*mut u8>();
                                                    let l6 = *base.add(28).cast::<usize>();
                                                    _rt::cabi_dealloc(l5, l6, 1);
                                                }
                                            }
                                        }
                                        _ => {
                                            let l7 = i32::from(*base.add(20).cast::<u8>());
                                            match l7 {
                                                0 => (),
                                                1 => (),
                                                2 => (),
                                                3 => (),
                                                4 => (),
                                                5 => (),
                                                6 => (),
                                                7 => (),
                                                8 => (),
                                                9 => (),
                                                10 => (),
                                                11 => (),
                                                12 => (),
                                                13 => (),
                                                14 => (),
                                                15 => (),
                                                16 => (),
                                                17 => (),
                                                18 => (),
                                                19 => (),
                                                20 => (),
                                                21 => (),
                                                22 => (),
                                                23 => (),
                                                24 => (),
                                                25 => (),
                                                26 => (),
                                                27 => (),
                                                28 => (),
                                                29 => (),
                                                30 => (),
                                                31 => (),
                                                32 => (),
                                                33 => (),
                                                34 => (),
                                                35 => (),
                                                _ => {
                                                    let l8 = *base.add(24).cast::<*mut u8>();
                                                    let l9 = *base.add(28).cast::<usize>();
                                                    _rt::cabi_dealloc(l8, l9, 1);
                                                }
                                            }
                                        }
                                    }
                                    let l10 = *base.add(32).cast::<*mut u8>();
                                    let l11 = *base.add(36).cast::<usize>();
                                    _rt::cabi_dealloc(l10, l11, 1);
                                }
                            }
                            _rt::cabi_dealloc(base14, len14 * 40, 8);
                            let l102 = *arg0.add(12).cast::<*mut u8>();
                            let l103 = *arg0.add(16).cast::<usize>();
                            let base104 = l102;
                            let len104 = l103;
                            for i in 0..len104 {
                                let base = base104.add(i * 8);
                                {
                                    let l99 = *base.add(0).cast::<*mut u8>();
                                    let l100 = *base.add(4).cast::<usize>();
                                    let base101 = l99;
                                    let len101 = l100;
                                    for i in 0..len101 {
                                        let base = base101.add(i * 64);
                                        {
                                            let l15 = i32::from(*base.add(0).cast::<u8>());
                                            match l15 {
                                                0 => {
                                                    let l16 = i32::from(*base.add(8).cast::<u8>());
                                                    match l16 {
                                                        0 => (),
                                                        1 => (),
                                                        2 => (),
                                                        3 => (),
                                                        4 => (),
                                                        5 => (),
                                                        6 => {
                                                            let l17 =
                                                                *base.add(16).cast::<*mut u8>();
                                                            let l18 = *base.add(20).cast::<usize>();
                                                            _rt::cabi_dealloc(l17, l18, 1);
                                                        }
                                                        7 => (),
                                                        8 => {
                                                            let l19 =
                                                                *base.add(16).cast::<*mut u8>();
                                                            let l20 = *base.add(20).cast::<usize>();
                                                            _rt::cabi_dealloc(l19, l20, 1);
                                                        }
                                                        9 => {
                                                            let l21 =
                                                                *base.add(16).cast::<*mut u8>();
                                                            let l22 = *base.add(20).cast::<usize>();
                                                            _rt::cabi_dealloc(l21, l22, 1);
                                                        }
                                                        10 => {
                                                            let l23 =
                                                                *base.add(16).cast::<*mut u8>();
                                                            let l24 = *base.add(20).cast::<usize>();
                                                            _rt::cabi_dealloc(l23, l24, 1);
                                                        }
                                                        11 => (),
                                                        12 => (),
                                                        13 => (),
                                                        14 => (),
                                                        15 => (),
                                                        16 => (),
                                                        17 => {
                                                            let l25 =
                                                                *base.add(16).cast::<*mut u8>();
                                                            let l26 = *base.add(20).cast::<usize>();
                                                            let base27 = l25;
                                                            let len27 = l26;
                                                            _rt::cabi_dealloc(base27, len27 * 1, 1);
                                                        }
                                                        18 => {
                                                            let l28 =
                                                                *base.add(16).cast::<*mut u8>();
                                                            let l29 = *base.add(20).cast::<usize>();
                                                            _rt::cabi_dealloc(l28, l29, 1);
                                                        }
                                                        19 => {
                                                            let l30 =
                                                                *base.add(16).cast::<*mut u8>();
                                                            let l31 = *base.add(20).cast::<usize>();
                                                            _rt::cabi_dealloc(l30, l31, 1);
                                                        }
                                                        20 => {
                                                            let l32 =
                                                                *base.add(16).cast::<*mut u8>();
                                                            let l33 = *base.add(20).cast::<usize>();
                                                            _rt::cabi_dealloc(l32, l33, 1);
                                                        }
                                                        21 => {
                                                            let l34 =
                                                                *base.add(16).cast::<*mut u8>();
                                                            let l35 = *base.add(20).cast::<usize>();
                                                            _rt::cabi_dealloc(l34, l35, 1);
                                                        }
                                                        22 => (),
                                                        23 => (),
                                                        24 => (),
                                                        25 => (),
                                                        26 => {
                                                            let l36 =
                                                                *base.add(16).cast::<*mut u8>();
                                                            let l37 = *base.add(20).cast::<usize>();
                                                            let base38 = l36;
                                                            let len38 = l37;
                                                            _rt::cabi_dealloc(base38, len38 * 1, 1);
                                                        }
                                                        27 => {
                                                            let l39 =
                                                                *base.add(16).cast::<*mut u8>();
                                                            let l40 = *base.add(20).cast::<usize>();
                                                            let base41 = l39;
                                                            let len41 = l40;
                                                            _rt::cabi_dealloc(base41, len41 * 1, 1);
                                                        }
                                                        28 => (),
                                                        29 => (),
                                                        30 => {
                                                            let l42 = i32::from(
                                                                *base.add(16).cast::<u8>(),
                                                            );
                                                            match l42 {
                                                                0 => {
                                                                    let l43 = *base
                                                                        .add(20)
                                                                        .cast::<*mut u8>();
                                                                    let l44 = *base
                                                                        .add(24)
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l43, l44, 1);
                                                                }
                                                                1 => {
                                                                    let l45 = *base
                                                                        .add(20)
                                                                        .cast::<*mut u8>();
                                                                    let l46 = *base
                                                                        .add(24)
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l45, l46, 1);
                                                                }
                                                                _ => (),
                                                            }
                                                            let l47 = i32::from(
                                                                *base.add(28).cast::<u8>(),
                                                            );
                                                            match l47 {
                                                                0 => {
                                                                    let l48 = *base
                                                                        .add(32)
                                                                        .cast::<*mut u8>();
                                                                    let l49 = *base
                                                                        .add(36)
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l48, l49, 1);
                                                                }
                                                                1 => {
                                                                    let l50 = *base
                                                                        .add(32)
                                                                        .cast::<*mut u8>();
                                                                    let l51 = *base
                                                                        .add(36)
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l50, l51, 1);
                                                                }
                                                                _ => (),
                                                            }
                                                        }
                                                        31 => (),
                                                        32 => (),
                                                        33 => (),
                                                        34 => (),
                                                        35 => (),
                                                        36 => {
                                                            let l52 =
                                                                *base.add(16).cast::<*mut u8>();
                                                            let l53 = *base.add(20).cast::<usize>();
                                                            _rt::cabi_dealloc(l52, l53, 1);
                                                            let l54 =
                                                                *base.add(24).cast::<*mut u8>();
                                                            let l55 = *base.add(28).cast::<usize>();
                                                            _rt::cabi_dealloc(l54, l55, 1);
                                                        }
                                                        _ => (),
                                                    }
                                                }
                                                _ => {
                                                    let l96 = *base.add(8).cast::<*mut u8>();
                                                    let l97 = *base.add(12).cast::<usize>();
                                                    let base98 = l96;
                                                    let len98 = l97;
                                                    for i in 0..len98 {
                                                        let base = base98.add(i * 56);
                                                        {
                                                            let l56 = i32::from(
                                                                *base.add(0).cast::<u8>(),
                                                            );
                                                            match l56 {
                                                                0 => (),
                                                                1 => (),
                                                                2 => (),
                                                                3 => (),
                                                                4 => (),
                                                                5 => (),
                                                                6 => {
                                                                    let l57 = *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>();
                                                                    let l58 = *base
                                                                        .add(12)
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l57, l58, 1);
                                                                }
                                                                7 => (),
                                                                8 => {
                                                                    let l59 = *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>();
                                                                    let l60 = *base
                                                                        .add(12)
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l59, l60, 1);
                                                                }
                                                                9 => {
                                                                    let l61 = *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>();
                                                                    let l62 = *base
                                                                        .add(12)
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l61, l62, 1);
                                                                }
                                                                10 => {
                                                                    let l63 = *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>();
                                                                    let l64 = *base
                                                                        .add(12)
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l63, l64, 1);
                                                                }
                                                                11 => (),
                                                                12 => (),
                                                                13 => (),
                                                                14 => (),
                                                                15 => (),
                                                                16 => (),
                                                                17 => {
                                                                    let l65 = *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>();
                                                                    let l66 = *base
                                                                        .add(12)
                                                                        .cast::<usize>();
                                                                    let base67 = l65;
                                                                    let len67 = l66;
                                                                    _rt::cabi_dealloc(
                                                                        base67,
                                                                        len67 * 1,
                                                                        1,
                                                                    );
                                                                }
                                                                18 => {
                                                                    let l68 = *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>();
                                                                    let l69 = *base
                                                                        .add(12)
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l68, l69, 1);
                                                                }
                                                                19 => {
                                                                    let l70 = *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>();
                                                                    let l71 = *base
                                                                        .add(12)
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l70, l71, 1);
                                                                }
                                                                20 => {
                                                                    let l72 = *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>();
                                                                    let l73 = *base
                                                                        .add(12)
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l72, l73, 1);
                                                                }
                                                                21 => {
                                                                    let l74 = *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>();
                                                                    let l75 = *base
                                                                        .add(12)
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l74, l75, 1);
                                                                }
                                                                22 => (),
                                                                23 => (),
                                                                24 => (),
                                                                25 => (),
                                                                26 => {
                                                                    let l76 = *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>();
                                                                    let l77 = *base
                                                                        .add(12)
                                                                        .cast::<usize>();
                                                                    let base78 = l76;
                                                                    let len78 = l77;
                                                                    _rt::cabi_dealloc(
                                                                        base78,
                                                                        len78 * 1,
                                                                        1,
                                                                    );
                                                                }
                                                                27 => {
                                                                    let l79 = *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>();
                                                                    let l80 = *base
                                                                        .add(12)
                                                                        .cast::<usize>();
                                                                    let base81 = l79;
                                                                    let len81 = l80;
                                                                    _rt::cabi_dealloc(
                                                                        base81,
                                                                        len81 * 1,
                                                                        1,
                                                                    );
                                                                }
                                                                28 => (),
                                                                29 => (),
                                                                30 => {
                                                                    let l82 = i32::from(
                                                                        *base.add(8).cast::<u8>(),
                                                                    );
                                                                    match l82 {
                                                                        0 => {
                                                                            let l83 = *base
                                                                                .add(12)
                                                                                .cast::<*mut u8>();
                                                                            let l84 = *base
                                                                                .add(16)
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(
                                                                                l83, l84, 1,
                                                                            );
                                                                        }
                                                                        1 => {
                                                                            let l85 = *base
                                                                                .add(12)
                                                                                .cast::<*mut u8>();
                                                                            let l86 = *base
                                                                                .add(16)
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(
                                                                                l85, l86, 1,
                                                                            );
                                                                        }
                                                                        _ => (),
                                                                    }
                                                                    let l87 = i32::from(
                                                                        *base.add(20).cast::<u8>(),
                                                                    );
                                                                    match l87 {
                                                                        0 => {
                                                                            let l88 = *base
                                                                                .add(24)
                                                                                .cast::<*mut u8>();
                                                                            let l89 = *base
                                                                                .add(28)
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(
                                                                                l88, l89, 1,
                                                                            );
                                                                        }
                                                                        1 => {
                                                                            let l90 = *base
                                                                                .add(24)
                                                                                .cast::<*mut u8>();
                                                                            let l91 = *base
                                                                                .add(28)
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(
                                                                                l90, l91, 1,
                                                                            );
                                                                        }
                                                                        _ => (),
                                                                    }
                                                                }
                                                                31 => (),
                                                                32 => (),
                                                                33 => (),
                                                                34 => (),
                                                                35 => (),
                                                                36 => {
                                                                    let l92 = *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>();
                                                                    let l93 = *base
                                                                        .add(12)
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l92, l93, 1);
                                                                    let l94 = *base
                                                                        .add(16)
                                                                        .cast::<*mut u8>();
                                                                    let l95 = *base
                                                                        .add(20)
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l94, l95, 1);
                                                                }
                                                                _ => (),
                                                            }
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(base98, len98 * 56, 8);
                                                }
                                            }
                                        }
                                    }
                                    _rt::cabi_dealloc(base101, len101 * 64, 8);
                                }
                            }
                            _rt::cabi_dealloc(base104, len104 * 8, 4);
                        }
                        _ => {
                            let l105 = *arg0.add(4).cast::<*mut u8>();
                            let l106 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l105, l106, 1);
                        }
                    }
                }
                pub trait Guest {
                    fn check() -> _rt::String;
                    fn mysql_execute(
                        statement: _rt::String,
                        params: _rt::Vec<_rt::String>,
                    ) -> Result<u64, _rt::String>;
                    fn mysql_query(
                        statement: _rt::String,
                        params: _rt::Vec<_rt::String>,
                    ) -> Result<MysqlQueryResult, _rt::String>;
                    fn postgres_execute(
                        statement: _rt::String,
                        params: _rt::Vec<_rt::String>,
                    ) -> Result<u64, _rt::String>;
                    fn postgres_query(
                        statement: _rt::String,
                        params: _rt::Vec<_rt::String>,
                    ) -> Result<PostgresQueryResult, _rt::String>;
                }
                #[doc(hidden)]

                macro_rules! __export_golem_it_api_cabi{
  ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

    #[export_name = "golem:it/api#check"]
    unsafe extern "C" fn export_check() -> *mut u8 {
      $($path_to_types)*::_export_check_cabi::<$ty>()
    }
    #[export_name = "cabi_post_golem:it/api#check"]
    unsafe extern "C" fn _post_return_check(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_check::<$ty>(arg0)
    }
    #[export_name = "golem:it/api#mysql-execute"]
    unsafe extern "C" fn export_mysql_execute(arg0: *mut u8,arg1: usize,arg2: *mut u8,arg3: usize,) -> *mut u8 {
      $($path_to_types)*::_export_mysql_execute_cabi::<$ty>(arg0, arg1, arg2, arg3)
    }
    #[export_name = "cabi_post_golem:it/api#mysql-execute"]
    unsafe extern "C" fn _post_return_mysql_execute(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_mysql_execute::<$ty>(arg0)
    }
    #[export_name = "golem:it/api#mysql-query"]
    unsafe extern "C" fn export_mysql_query(arg0: *mut u8,arg1: usize,arg2: *mut u8,arg3: usize,) -> *mut u8 {
      $($path_to_types)*::_export_mysql_query_cabi::<$ty>(arg0, arg1, arg2, arg3)
    }
    #[export_name = "cabi_post_golem:it/api#mysql-query"]
    unsafe extern "C" fn _post_return_mysql_query(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_mysql_query::<$ty>(arg0)
    }
    #[export_name = "golem:it/api#postgres-execute"]
    unsafe extern "C" fn export_postgres_execute(arg0: *mut u8,arg1: usize,arg2: *mut u8,arg3: usize,) -> *mut u8 {
      $($path_to_types)*::_export_postgres_execute_cabi::<$ty>(arg0, arg1, arg2, arg3)
    }
    #[export_name = "cabi_post_golem:it/api#postgres-execute"]
    unsafe extern "C" fn _post_return_postgres_execute(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_postgres_execute::<$ty>(arg0)
    }
    #[export_name = "golem:it/api#postgres-query"]
    unsafe extern "C" fn export_postgres_query(arg0: *mut u8,arg1: usize,arg2: *mut u8,arg3: usize,) -> *mut u8 {
      $($path_to_types)*::_export_postgres_query_cabi::<$ty>(arg0, arg1, arg2, arg3)
    }
    #[export_name = "cabi_post_golem:it/api#postgres-query"]
    unsafe extern "C" fn _post_return_postgres_query(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_postgres_query::<$ty>(arg0)
    }
  };);
}
                #[doc(hidden)]
                pub(crate) use __export_golem_it_api_cabi;
                #[repr(align(8))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 20]);
                static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 20]);
            }
        }
    }
}
mod _rt {
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;

    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};

    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        // NB: This would ideally be `u32` but it is not. The fact that this has
        // interior mutability is not exposed in the API of this type except for the
        // `take_handle` method which is supposed to in theory be private.
        //
        // This represents, almost all the time, a valid handle value. When it's
        // invalid it's stored as `u32::MAX`.
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }

    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }

    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }

        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }

        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }

    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource")
                .field("handle", &self.handle)
                .finish()
        }
    }

    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    // If this handle was "taken" then don't do anything in the
                    // destructor.
                    u32::MAX => {}

                    // ... but otherwise do actually destroy it with the imported
                    // component model intrinsic as defined through `T`.
                    other => T::drop(other),
                }
            }
        }
    }
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr as *mut u8, layout);
    }
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            core::hint::unreachable_unchecked()
        }
    }

    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }

    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }

    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }

    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }

    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }

    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }

    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }

    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }

    pub fn as_f32<T: AsF32>(t: T) -> f32 {
        t.as_f32()
    }

    pub trait AsF32 {
        fn as_f32(self) -> f32;
    }

    impl<'a, T: Copy + AsF32> AsF32 for &'a T {
        fn as_f32(self) -> f32 {
            (*self).as_f32()
        }
    }

    impl AsF32 for f32 {
        #[inline]
        fn as_f32(self) -> f32 {
            self as f32
        }
    }

    pub fn as_f64<T: AsF64>(t: T) -> f64 {
        t.as_f64()
    }

    pub trait AsF64 {
        fn as_f64(self) -> f64;
    }

    impl<'a, T: Copy + AsF64> AsF64 for &'a T {
        fn as_f64(self) -> f64 {
            (*self).as_f64()
        }
    }

    impl AsF64 for f64 {
        #[inline]
        fn as_f64(self) -> f64 {
            self as f64
        }
    }
    pub use alloc_crate::alloc;

    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    extern crate alloc as alloc_crate;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_rdbms_service_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::golem::it::api::__export_golem_it_api_cabi!($ty with_types_in $($path_to_types_root)*::exports::golem::it::api);
  )
}
#[doc(inline)]
pub(crate) use __export_rdbms_service_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.25.0:rdbms-service:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 4502] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\x92\"\x01A\x02\x01A\x0a\
\x01BW\x01q\x05\x12connection-failure\x01s\0\x17query-parameter-failure\x01s\0\x17\
query-execution-failure\x01s\0\x16query-response-failure\x01s\0\x05other\x01s\0\x04\
\0\x05error\x03\0\0\x01r\x02\x09high-bitsw\x08low-bitsw\x04\0\x04uuid\x03\0\x02\x01\
o\x04}}}}\x01o\x08{{{{{{{{\x01q\x02\x04ipv4\x01\x04\0\x04ipv6\x01\x05\0\x04\0\x0a\
ip-address\x03\0\x06\x01o\x06}}}}}}\x01r\x01\x06octets\x08\x04\0\x0bmac-address\x03\
\0\x09\x01r\x03\x04yearz\x05month}\x03day}\x04\0\x04date\x03\0\x0b\x01r\x04\x04h\
our}\x06minute}\x06second}\x0ananosecondy\x04\0\x04time\x03\0\x0d\x01r\x02\x04da\
te\x0c\x04time\x0e\x04\0\x09timestamp\x03\0\x0f\x01r\x02\x09timestamp\x10\x06off\
setz\x04\0\x0btimestamptz\x03\0\x11\x01r\x02\x04time\x0e\x06offsetz\x04\0\x06tim\
etz\x03\0\x13\x01r\x03\x06monthsz\x04daysz\x0cmicrosecondsx\x04\0\x08interval\x03\
\0\x15\x01q\x03\x08included\x01z\0\x08excluded\x01z\0\x09unbounded\0\0\x04\0\x09\
int4bound\x03\0\x17\x01q\x03\x08included\x01x\0\x08excluded\x01x\0\x09unbounded\0\
\0\x04\0\x09int8bound\x03\0\x19\x01q\x03\x08included\x01s\0\x08excluded\x01s\0\x09\
unbounded\0\0\x04\0\x08numbound\x03\0\x1b\x01q\x03\x08included\x01\x10\0\x08excl\
uded\x01\x10\0\x09unbounded\0\0\x04\0\x07tsbound\x03\0\x1d\x01q\x03\x08included\x01\
\x12\0\x08excluded\x01\x12\0\x09unbounded\0\0\x04\0\x09tstzbound\x03\0\x1f\x01q\x03\
\x08included\x01\x0c\0\x08excluded\x01\x0c\0\x09unbounded\0\0\x04\0\x09datebound\
\x03\0!\x01r\x02\x05start\x18\x03end\x18\x04\0\x09int4range\x03\0#\x01r\x02\x05s\
tart\x1a\x03end\x1a\x04\0\x09int8range\x03\0%\x01r\x02\x05start\x1c\x03end\x1c\x04\
\0\x08numrange\x03\0'\x01r\x02\x05start\x1e\x03end\x1e\x04\0\x07tsrange\x03\0)\x01\
r\x02\x05start\x20\x03end\x20\x04\0\x09tstzrange\x03\0+\x01r\x02\x05start\"\x03e\
nd\"\x04\0\x09daterange\x03\0-\x01r\x02\x04names\x05values\x04\0\x0benumeration\x03\
\0/\x01q%\x09character\0\0\x04int2\0\0\x04int4\0\0\x04int8\0\0\x06float4\0\0\x06\
float8\0\0\x07numeric\0\0\x07boolean\0\0\x04text\0\0\x07varchar\0\0\x06bpchar\0\0\
\x09timestamp\0\0\x0btimestamptz\0\0\x04date\0\0\x04time\0\0\x06timetz\0\0\x08in\
terval\0\0\x05bytea\0\0\x04uuid\0\0\x03xml\0\0\x04json\0\0\x05jsonb\0\0\x08jsonp\
ath\0\0\x04inet\0\0\x04cidr\0\0\x07macaddr\0\0\x03bit\0\0\x06varbit\0\0\x09int4r\
ange\0\0\x09int8range\0\0\x08numrange\0\0\x07tsrange\0\0\x09tstzrange\0\0\x09dat\
erange\0\0\x05money\0\0\x03oid\0\0\x0benumeration\x01s\0\x04\0\x18db-column-type\
-primitive\x03\01\x01p}\x01p\x7f\x01q&\x09character\x01~\0\x04int2\x01|\0\x04int\
4\x01z\0\x04int8\x01x\0\x06float4\x01v\0\x06float8\x01u\0\x07numeric\x01s\0\x07b\
oolean\x01\x7f\0\x04text\x01s\0\x07varchar\x01s\0\x06bpchar\x01s\0\x09timestamp\x01\
\x10\0\x0btimestamptz\x01\x12\0\x04date\x01\x0c\0\x04time\x01\x0e\0\x06timetz\x01\
\x14\0\x08interval\x01\x16\0\x05bytea\x013\0\x04json\x01s\0\x05jsonb\x01s\0\x08j\
sonpath\x01s\0\x03xml\x01s\0\x04uuid\x01\x03\0\x04inet\x01\x07\0\x04cidr\x01\x07\
\0\x07macaddr\x01\x0a\0\x03bit\x014\0\x06varbit\x014\0\x09int4range\x01$\0\x09in\
t8range\x01&\0\x08numrange\x01(\0\x07tsrange\x01*\0\x09tstzrange\x01,\0\x09dater\
ange\x01.\0\x05money\x01x\0\x03oid\x01y\0\x0benumeration\x010\0\x04null\0\0\x04\0\
\x12db-value-primitive\x03\05\x01q\x02\x09primitive\x012\0\x05array\x012\0\x04\0\
\x0edb-column-type\x03\07\x01r\x04\x07ordinalw\x04names\x07db-type8\x0cdb-type-n\
ames\x04\0\x09db-column\x03\09\x01p6\x01q\x02\x09primitive\x016\0\x05array\x01;\0\
\x04\0\x08db-value\x03\0<\x01p=\x01r\x01\x06values>\x04\0\x06db-row\x03\0?\x04\0\
\x0ddb-result-set\x03\x01\x04\0\x0ddb-connection\x03\x01\x01hA\x01p:\x01@\x01\x04\
self\xc3\0\0\xc4\0\x04\0![method]db-result-set.get-columns\x01E\x01p\xc0\0\x01k\xc6\
\0\x01@\x01\x04self\xc3\0\0\xc7\0\x04\0\x1e[method]db-result-set.get-next\x01H\x01\
iB\x01j\x01\xc9\0\x01\x01\x01@\x01\x07addresss\0\xca\0\x04\0\x1a[static]db-conne\
ction.open\x01K\x01hB\x01iA\x01j\x01\xcd\0\x01\x01\x01@\x03\x04self\xcc\0\x09sta\
tements\x06params>\0\xce\0\x04\0\x1b[method]db-connection.query\x01O\x01j\x01w\x01\
\x01\x01@\x03\x04self\xcc\0\x09statements\x06params>\0\xd0\0\x04\0\x1d[method]db\
-connection.execute\x01Q\x03\x01\x19wasi:rdbms/postgres@0.0.1\x05\0\x01B)\x01q\x05\
\x12connection-failure\x01s\0\x17query-parameter-failure\x01s\0\x17query-executi\
on-failure\x01s\0\x16query-response-failure\x01s\0\x05other\x01s\0\x04\0\x05erro\
r\x03\0\0\x01r\x03\x04yearz\x05month}\x03day}\x04\0\x04date\x03\0\x02\x01r\x04\x04\
hour}\x06minute}\x06second}\x0ananosecondy\x04\0\x04time\x03\0\x04\x01r\x02\x04d\
ate\x03\x04time\x05\x04\0\x09timestamp\x03\0\x06\x01q#\x07boolean\0\0\x07tinyint\
\0\0\x08smallint\0\0\x09mediumint\0\0\x03int\0\0\x06bigint\0\0\x10tinyint-unsign\
ed\0\0\x11smallint-unsigned\0\0\x12mediumint-unsigned\0\0\x0cint-unsigned\0\0\x0f\
bigint-unsigned\0\0\x05float\0\0\x06double\0\0\x07decimal\0\0\x04date\0\0\x08dat\
etime\0\0\x09timestamp\0\0\x04time\0\0\x04year\0\0\x07fixchar\0\0\x07varchar\0\0\
\x08tinytext\0\0\x04text\0\0\x0amediumtext\0\0\x08longtext\0\0\x06binary\0\0\x09\
varbinary\0\0\x08tinyblob\0\0\x04blob\0\0\x0amediumblob\0\0\x08longblob\0\0\x0be\
numeration\0\0\x03set\0\0\x03bit\0\0\x04json\0\0\x04\0\x0edb-column-type\x03\0\x08\
\x01r\x04\x07ordinalw\x04names\x07db-type\x09\x0cdb-type-names\x04\0\x09db-colum\
n\x03\0\x0a\x01p}\x01p\x7f\x01q$\x07boolean\x01\x7f\0\x07tinyint\x01~\0\x08small\
int\x01|\0\x09mediumint\x01z\0\x03int\x01z\0\x06bigint\x01x\0\x10tinyint-unsigne\
d\x01}\0\x11smallint-unsigned\x01{\0\x12mediumint-unsigned\x01y\0\x0cint-unsigne\
d\x01y\0\x0fbigint-unsigned\x01w\0\x05float\x01v\0\x06double\x01u\0\x07decimal\x01\
s\0\x04date\x01\x03\0\x08datetime\x01\x07\0\x09timestamp\x01\x07\0\x04time\x01\x05\
\0\x04year\x01{\0\x07fixchar\x01s\0\x07varchar\x01s\0\x08tinytext\x01s\0\x04text\
\x01s\0\x0amediumtext\x01s\0\x08longtext\x01s\0\x06binary\x01\x0c\0\x09varbinary\
\x01\x0c\0\x08tinyblob\x01\x0c\0\x04blob\x01\x0c\0\x0amediumblob\x01\x0c\0\x08lo\
ngblob\x01\x0c\0\x0benumeration\x01s\0\x03set\x01s\0\x03bit\x01\x0d\0\x04json\x01\
s\0\x04null\0\0\x04\0\x08db-value\x03\0\x0e\x01p\x0f\x01r\x01\x06values\x10\x04\0\
\x06db-row\x03\0\x11\x04\0\x0ddb-result-set\x03\x01\x04\0\x0ddb-connection\x03\x01\
\x01h\x13\x01p\x0b\x01@\x01\x04self\x15\0\x16\x04\0![method]db-result-set.get-co\
lumns\x01\x17\x01p\x12\x01k\x18\x01@\x01\x04self\x15\0\x19\x04\0\x1e[method]db-r\
esult-set.get-next\x01\x1a\x01i\x14\x01j\x01\x1b\x01\x01\x01@\x01\x07addresss\0\x1c\
\x04\0\x1a[static]db-connection.open\x01\x1d\x01h\x14\x01i\x13\x01j\x01\x1f\x01\x01\
\x01@\x03\x04self\x1e\x09statements\x06params\x10\0\x20\x04\0\x1b[method]db-conn\
ection.query\x01!\x01j\x01w\x01\x01\x01@\x03\x04self\x1e\x09statements\x06params\
\x10\0\"\x04\0\x1d[method]db-connection.execute\x01#\x03\x01\x16wasi:rdbms/mysql\
@0.0.1\x05\x01\x02\x03\0\0\x06db-row\x02\x03\0\0\x09db-column\x02\x03\0\x01\x06d\
b-row\x02\x03\0\x01\x09db-column\x01B\x1d\x02\x03\x02\x01\x02\x04\0\x0fpostgres-\
db-row\x03\0\0\x02\x03\x02\x01\x03\x04\0\x12postgres-db-column\x03\0\x02\x02\x03\
\x02\x01\x04\x04\0\x0cmysql-db-row\x03\0\x04\x02\x03\x02\x01\x05\x04\0\x0fmysql-\
db-column\x03\0\x06\x01p\x03\x01p\x01\x01r\x02\x07columns\x08\x04rows\x09\x04\0\x15\
postgres-query-result\x03\0\x0a\x01p\x07\x01p\x05\x01r\x02\x07columns\x0c\x04row\
s\x0d\x04\0\x12mysql-query-result\x03\0\x0e\x01@\0\0s\x04\0\x05check\x01\x10\x01\
ps\x01j\x01w\x01s\x01@\x02\x09statements\x06params\x11\0\x12\x04\0\x0dmysql-exec\
ute\x01\x13\x01j\x01\x0f\x01s\x01@\x02\x09statements\x06params\x11\0\x14\x04\0\x0b\
mysql-query\x01\x15\x04\0\x10postgres-execute\x01\x13\x01j\x01\x0b\x01s\x01@\x02\
\x09statements\x06params\x11\0\x16\x04\0\x0epostgres-query\x01\x17\x04\x01\x0cgo\
lem:it/api\x05\x06\x04\x01\x16golem:it/rdbms-service\x04\0\x0b\x13\x01\0\x0drdbm\
s-service\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.\
208.1\x10wit-bindgen-rust\x060.25.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
