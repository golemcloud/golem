// Generated by `wit-bindgen` 0.25.0. DO NOT EDIT!
// Options used:
#[allow(dead_code)]
pub mod wasi {
    #[allow(dead_code)]
    pub mod rdbms {
        #[allow(dead_code, clippy::all)]
        pub mod postgres {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[derive(Clone)]
            pub enum Error {
                ConnectionFailure(_rt::String),
                QueryParameterFailure(_rt::String),
                QueryExecutionFailure(_rt::String),
                QueryResponseFailure(_rt::String),
                Other(_rt::String),
            }
            impl ::core::fmt::Debug for Error {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        Error::ConnectionFailure(e) => {
                            f.debug_tuple("Error::ConnectionFailure").field(e).finish()
                        }
                        Error::QueryParameterFailure(e) => f
                            .debug_tuple("Error::QueryParameterFailure")
                            .field(e)
                            .finish(),
                        Error::QueryExecutionFailure(e) => f
                            .debug_tuple("Error::QueryExecutionFailure")
                            .field(e)
                            .finish(),
                        Error::QueryResponseFailure(e) => f
                            .debug_tuple("Error::QueryResponseFailure")
                            .field(e)
                            .finish(),
                        Error::Other(e) => f.debug_tuple("Error::Other").field(e).finish(),
                    }
                }
            }
            impl ::core::fmt::Display for Error {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }

            impl std::error::Error for Error {}
            /// variant db-column-type {
            /// int2,
            /// int4,
            /// int8,
            /// float4,
            /// float8,
            /// numeric,
            /// bool,
            /// text,
            /// varchar,
            /// timestamp,
            /// timestamptz,
            /// date,
            /// time,
            /// timetz,
            /// interval,
            /// bytea,
            /// uuid,
            /// xml,
            /// json,
            /// jsonb,
            /// inet,
            /// macaddr,
            /// cidr,
            /// point,
            /// line,
            /// lseg,
            /// box,
            /// polygon,
            /// circle,
            /// path,
            /// box2d,
            /// polygonz,
            /// circlez,
            /// pathz,
            /// hstore,
            /// tsvector,
            /// tsquery,
            /// range,
            /// tstzrange,
            /// int4range,
            /// int8range,
            /// numrange,
            /// tsrange,
            /// tstzrange
            /// }
            #[derive(Clone, Copy)]
            pub enum DbColumnTypePrimitive {
                Int8,
                Int16,
                Int32,
                Int64,
                Float,
                Double,
                Decimal,
                Boolean,
                Timestamp,
                Date,
                Time,
                Interval,
                Text,
                Blob,
                Json,
                Xml,
                Uuid,
            }
            impl ::core::fmt::Debug for DbColumnTypePrimitive {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        DbColumnTypePrimitive::Int8 => {
                            f.debug_tuple("DbColumnTypePrimitive::Int8").finish()
                        }
                        DbColumnTypePrimitive::Int16 => {
                            f.debug_tuple("DbColumnTypePrimitive::Int16").finish()
                        }
                        DbColumnTypePrimitive::Int32 => {
                            f.debug_tuple("DbColumnTypePrimitive::Int32").finish()
                        }
                        DbColumnTypePrimitive::Int64 => {
                            f.debug_tuple("DbColumnTypePrimitive::Int64").finish()
                        }
                        DbColumnTypePrimitive::Float => {
                            f.debug_tuple("DbColumnTypePrimitive::Float").finish()
                        }
                        DbColumnTypePrimitive::Double => {
                            f.debug_tuple("DbColumnTypePrimitive::Double").finish()
                        }
                        DbColumnTypePrimitive::Decimal => {
                            f.debug_tuple("DbColumnTypePrimitive::Decimal").finish()
                        }
                        DbColumnTypePrimitive::Boolean => {
                            f.debug_tuple("DbColumnTypePrimitive::Boolean").finish()
                        }
                        DbColumnTypePrimitive::Timestamp => {
                            f.debug_tuple("DbColumnTypePrimitive::Timestamp").finish()
                        }
                        DbColumnTypePrimitive::Date => {
                            f.debug_tuple("DbColumnTypePrimitive::Date").finish()
                        }
                        DbColumnTypePrimitive::Time => {
                            f.debug_tuple("DbColumnTypePrimitive::Time").finish()
                        }
                        DbColumnTypePrimitive::Interval => {
                            f.debug_tuple("DbColumnTypePrimitive::Interval").finish()
                        }
                        DbColumnTypePrimitive::Text => {
                            f.debug_tuple("DbColumnTypePrimitive::Text").finish()
                        }
                        DbColumnTypePrimitive::Blob => {
                            f.debug_tuple("DbColumnTypePrimitive::Blob").finish()
                        }
                        DbColumnTypePrimitive::Json => {
                            f.debug_tuple("DbColumnTypePrimitive::Json").finish()
                        }
                        DbColumnTypePrimitive::Xml => {
                            f.debug_tuple("DbColumnTypePrimitive::Xml").finish()
                        }
                        DbColumnTypePrimitive::Uuid => {
                            f.debug_tuple("DbColumnTypePrimitive::Uuid").finish()
                        }
                    }
                }
            }
            #[derive(Clone, Copy)]
            pub enum DbColumnType {
                Primitive(DbColumnTypePrimitive),
                Array(DbColumnTypePrimitive),
            }
            impl ::core::fmt::Debug for DbColumnType {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        DbColumnType::Primitive(e) => {
                            f.debug_tuple("DbColumnType::Primitive").field(e).finish()
                        }
                        DbColumnType::Array(e) => {
                            f.debug_tuple("DbColumnType::Array").field(e).finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub struct DbColumn {
                pub ordinal: u64,
                pub name: _rt::String,
                pub db_type: DbColumnType,
                pub db_type_name: _rt::String,
            }
            impl ::core::fmt::Debug for DbColumn {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("DbColumn")
                        .field("ordinal", &self.ordinal)
                        .field("name", &self.name)
                        .field("db-type", &self.db_type)
                        .field("db-type-name", &self.db_type_name)
                        .finish()
                }
            }
            /// Value descriptor for a single database value
            #[derive(Clone)]
            pub enum DbValuePrimitive {
                Int8(i8),
                Int16(i16),
                Int32(i32),
                Int64(i64),
                Float(f32),
                Double(f64),
                Decimal(_rt::String),
                Boolean(bool),
                Timestamp(i64),
                Date(i64),
                Time(i64),
                Interval(i64),
                Text(_rt::String),
                Blob(_rt::Vec<u8>),
                Json(_rt::String),
                Xml(_rt::String),
                Uuid((u64, u64)),
                Null,
            }
            impl ::core::fmt::Debug for DbValuePrimitive {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        DbValuePrimitive::Int8(e) => {
                            f.debug_tuple("DbValuePrimitive::Int8").field(e).finish()
                        }
                        DbValuePrimitive::Int16(e) => {
                            f.debug_tuple("DbValuePrimitive::Int16").field(e).finish()
                        }
                        DbValuePrimitive::Int32(e) => {
                            f.debug_tuple("DbValuePrimitive::Int32").field(e).finish()
                        }
                        DbValuePrimitive::Int64(e) => {
                            f.debug_tuple("DbValuePrimitive::Int64").field(e).finish()
                        }
                        DbValuePrimitive::Float(e) => {
                            f.debug_tuple("DbValuePrimitive::Float").field(e).finish()
                        }
                        DbValuePrimitive::Double(e) => {
                            f.debug_tuple("DbValuePrimitive::Double").field(e).finish()
                        }
                        DbValuePrimitive::Decimal(e) => {
                            f.debug_tuple("DbValuePrimitive::Decimal").field(e).finish()
                        }
                        DbValuePrimitive::Boolean(e) => {
                            f.debug_tuple("DbValuePrimitive::Boolean").field(e).finish()
                        }
                        DbValuePrimitive::Timestamp(e) => f
                            .debug_tuple("DbValuePrimitive::Timestamp")
                            .field(e)
                            .finish(),
                        DbValuePrimitive::Date(e) => {
                            f.debug_tuple("DbValuePrimitive::Date").field(e).finish()
                        }
                        DbValuePrimitive::Time(e) => {
                            f.debug_tuple("DbValuePrimitive::Time").field(e).finish()
                        }
                        DbValuePrimitive::Interval(e) => f
                            .debug_tuple("DbValuePrimitive::Interval")
                            .field(e)
                            .finish(),
                        DbValuePrimitive::Text(e) => {
                            f.debug_tuple("DbValuePrimitive::Text").field(e).finish()
                        }
                        DbValuePrimitive::Blob(e) => {
                            f.debug_tuple("DbValuePrimitive::Blob").field(e).finish()
                        }
                        DbValuePrimitive::Json(e) => {
                            f.debug_tuple("DbValuePrimitive::Json").field(e).finish()
                        }
                        DbValuePrimitive::Xml(e) => {
                            f.debug_tuple("DbValuePrimitive::Xml").field(e).finish()
                        }
                        DbValuePrimitive::Uuid(e) => {
                            f.debug_tuple("DbValuePrimitive::Uuid").field(e).finish()
                        }
                        DbValuePrimitive::Null => f.debug_tuple("DbValuePrimitive::Null").finish(),
                    }
                }
            }
            #[derive(Clone)]
            pub enum DbValue {
                Primitive(DbValuePrimitive),
                Array(_rt::Vec<DbValuePrimitive>),
            }
            impl ::core::fmt::Debug for DbValue {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        DbValue::Primitive(e) => {
                            f.debug_tuple("DbValue::Primitive").field(e).finish()
                        }
                        DbValue::Array(e) => f.debug_tuple("DbValue::Array").field(e).finish(),
                    }
                }
            }
            /// A single row of values
            #[derive(Clone)]
            pub struct DbRow {
                pub values: _rt::Vec<DbValue>,
            }
            impl ::core::fmt::Debug for DbRow {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("DbRow")
                        .field("values", &self.values)
                        .finish()
                }
            }
            /// A potentially very large and lazy stream of rows:

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct DbResultSet {
                handle: _rt::Resource<DbResultSet>,
            }

            impl DbResultSet {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for DbResultSet {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:rdbms/postgres@0.0.1")]
                        extern "C" {
                            #[link_name = "[resource-drop]db-result-set"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct DbConnection {
                handle: _rt::Resource<DbConnection>,
            }

            impl DbConnection {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for DbConnection {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:rdbms/postgres@0.0.1")]
                        extern "C" {
                            #[link_name = "[resource-drop]db-connection"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            impl DbResultSet {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_columns(&self) -> _rt::Vec<DbColumn> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:rdbms/postgres@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]db-result-set.get-columns"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let base16 = l1;
                        let len16 = l2;
                        let mut result16 = _rt::Vec::with_capacity(len16);
                        for i in 0..len16 {
                            let base = base16.add(i * 32);
                            let e16 = {
                                let l3 = *base.add(0).cast::<i64>();
                                let l4 = *base.add(8).cast::<*mut u8>();
                                let l5 = *base.add(12).cast::<usize>();
                                let len6 = l5;
                                let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);
                                let l7 = i32::from(*base.add(16).cast::<u8>());
                                let v12 = match l7 {
                                    0 => {
                                        let e12 = {
                                            let l8 = i32::from(*base.add(17).cast::<u8>());
                                            let v9 = match l8 {
                                                0 => DbColumnTypePrimitive::Int8,
                                                1 => DbColumnTypePrimitive::Int16,
                                                2 => DbColumnTypePrimitive::Int32,
                                                3 => DbColumnTypePrimitive::Int64,
                                                4 => DbColumnTypePrimitive::Float,
                                                5 => DbColumnTypePrimitive::Double,
                                                6 => DbColumnTypePrimitive::Decimal,
                                                7 => DbColumnTypePrimitive::Boolean,
                                                8 => DbColumnTypePrimitive::Timestamp,
                                                9 => DbColumnTypePrimitive::Date,
                                                10 => DbColumnTypePrimitive::Time,
                                                11 => DbColumnTypePrimitive::Interval,
                                                12 => DbColumnTypePrimitive::Text,
                                                13 => DbColumnTypePrimitive::Blob,
                                                14 => DbColumnTypePrimitive::Json,
                                                15 => DbColumnTypePrimitive::Xml,
                                                n => {
                                                    debug_assert_eq!(
                                                        n, 16,
                                                        "invalid enum discriminant"
                                                    );
                                                    DbColumnTypePrimitive::Uuid
                                                }
                                            };

                                            v9
                                        };
                                        DbColumnType::Primitive(e12)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 1, "invalid enum discriminant");
                                        let e12 = {
                                            let l10 = i32::from(*base.add(17).cast::<u8>());
                                            let v11 = match l10 {
                                                0 => DbColumnTypePrimitive::Int8,
                                                1 => DbColumnTypePrimitive::Int16,
                                                2 => DbColumnTypePrimitive::Int32,
                                                3 => DbColumnTypePrimitive::Int64,
                                                4 => DbColumnTypePrimitive::Float,
                                                5 => DbColumnTypePrimitive::Double,
                                                6 => DbColumnTypePrimitive::Decimal,
                                                7 => DbColumnTypePrimitive::Boolean,
                                                8 => DbColumnTypePrimitive::Timestamp,
                                                9 => DbColumnTypePrimitive::Date,
                                                10 => DbColumnTypePrimitive::Time,
                                                11 => DbColumnTypePrimitive::Interval,
                                                12 => DbColumnTypePrimitive::Text,
                                                13 => DbColumnTypePrimitive::Blob,
                                                14 => DbColumnTypePrimitive::Json,
                                                15 => DbColumnTypePrimitive::Xml,
                                                n => {
                                                    debug_assert_eq!(
                                                        n, 16,
                                                        "invalid enum discriminant"
                                                    );
                                                    DbColumnTypePrimitive::Uuid
                                                }
                                            };

                                            v11
                                        };
                                        DbColumnType::Array(e12)
                                    }
                                };
                                let l13 = *base.add(20).cast::<*mut u8>();
                                let l14 = *base.add(24).cast::<usize>();
                                let len15 = l14;
                                let bytes15 = _rt::Vec::from_raw_parts(l13.cast(), len15, len15);

                                DbColumn {
                                    ordinal: l3 as u64,
                                    name: _rt::string_lift(bytes6),
                                    db_type: v12,
                                    db_type_name: _rt::string_lift(bytes15),
                                }
                            };
                            result16.push(e16);
                        }
                        _rt::cabi_dealloc(base16, len16 * 32, 8);
                        result16
                    }
                }
            }
            impl DbResultSet {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_next(&self) -> Option<_rt::Vec<DbRow>> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:rdbms/postgres@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]db-result-set.get-next"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<*mut u8>();
                                    let l3 = *ptr0.add(8).cast::<usize>();
                                    let base72 = l2;
                                    let len72 = l3;
                                    let mut result72 = _rt::Vec::with_capacity(len72);
                                    for i in 0..len72 {
                                        let base = base72.add(i * 8);
                                        let e72 = {
                                            let l4 = *base.add(0).cast::<*mut u8>();
                                            let l5 = *base.add(4).cast::<usize>();
                                            let base71 = l4;
                                            let len71 = l5;
                                            let mut result71 = _rt::Vec::with_capacity(len71);
                                            for i in 0..len71 {
                                                let base = base71.add(i * 32);
                                                let e71 = {
                                                    let l6 = i32::from(*base.add(0).cast::<u8>());
                                                    let v70 = match l6 {
                                                        0 => {
                                                            let e70 = {
                                                                let l7 = i32::from(
                                                                    *base.add(8).cast::<u8>(),
                                                                );
                                                                let v36 = match l7 {
                                                                    0 => {
                                                                        let e36 = {
                                                                            let l8 = i32::from(
                                                                                *base
                                                                                    .add(16)
                                                                                    .cast::<i8>(),
                                                                            );

                                                                            l8 as i8
                                                                        };
                                                                        DbValuePrimitive::Int8(e36)
                                                                    }
                                                                    1 => {
                                                                        let e36 = {
                                                                            let l9 = i32::from(
                                                                                *base
                                                                                    .add(16)
                                                                                    .cast::<i16>(),
                                                                            );

                                                                            l9 as i16
                                                                        };
                                                                        DbValuePrimitive::Int16(e36)
                                                                    }
                                                                    2 => {
                                                                        let e36 = {
                                                                            let l10 = *base
                                                                                .add(16)
                                                                                .cast::<i32>();

                                                                            l10
                                                                        };
                                                                        DbValuePrimitive::Int32(e36)
                                                                    }
                                                                    3 => {
                                                                        let e36 = {
                                                                            let l11 = *base
                                                                                .add(16)
                                                                                .cast::<i64>();

                                                                            l11
                                                                        };
                                                                        DbValuePrimitive::Int64(e36)
                                                                    }
                                                                    4 => {
                                                                        let e36 = {
                                                                            let l12 = *base
                                                                                .add(16)
                                                                                .cast::<f32>();

                                                                            l12
                                                                        };
                                                                        DbValuePrimitive::Float(e36)
                                                                    }
                                                                    5 => {
                                                                        let e36 = {
                                                                            let l13 = *base
                                                                                .add(16)
                                                                                .cast::<f64>();

                                                                            l13
                                                                        };
                                                                        DbValuePrimitive::Double(
                                                                            e36,
                                                                        )
                                                                    }
                                                                    6 => {
                                                                        let e36 = {
                                                                            let l14 = *base
                                                                                .add(16)
                                                                                .cast::<*mut u8>();
                                                                            let l15 = *base
                                                                                .add(20)
                                                                                .cast::<usize>();
                                                                            let len16 = l15;
                                                                            let bytes16 = _rt::Vec::from_raw_parts(l14.cast(), len16, len16);

                                                                            _rt::string_lift(
                                                                                bytes16,
                                                                            )
                                                                        };
                                                                        DbValuePrimitive::Decimal(
                                                                            e36,
                                                                        )
                                                                    }
                                                                    7 => {
                                                                        let e36 = {
                                                                            let l17 = i32::from(
                                                                                *base
                                                                                    .add(16)
                                                                                    .cast::<u8>(),
                                                                            );

                                                                            _rt::bool_lift(
                                                                                l17 as u8,
                                                                            )
                                                                        };
                                                                        DbValuePrimitive::Boolean(
                                                                            e36,
                                                                        )
                                                                    }
                                                                    8 => {
                                                                        let e36 = {
                                                                            let l18 = *base
                                                                                .add(16)
                                                                                .cast::<i64>();

                                                                            l18
                                                                        };
                                                                        DbValuePrimitive::Timestamp(
                                                                            e36,
                                                                        )
                                                                    }
                                                                    9 => {
                                                                        let e36 = {
                                                                            let l19 = *base
                                                                                .add(16)
                                                                                .cast::<i64>();

                                                                            l19
                                                                        };
                                                                        DbValuePrimitive::Date(e36)
                                                                    }
                                                                    10 => {
                                                                        let e36 = {
                                                                            let l20 = *base
                                                                                .add(16)
                                                                                .cast::<i64>();

                                                                            l20
                                                                        };
                                                                        DbValuePrimitive::Time(e36)
                                                                    }
                                                                    11 => {
                                                                        let e36 = {
                                                                            let l21 = *base
                                                                                .add(16)
                                                                                .cast::<i64>();

                                                                            l21
                                                                        };
                                                                        DbValuePrimitive::Interval(
                                                                            e36,
                                                                        )
                                                                    }
                                                                    12 => {
                                                                        let e36 = {
                                                                            let l22 = *base
                                                                                .add(16)
                                                                                .cast::<*mut u8>();
                                                                            let l23 = *base
                                                                                .add(20)
                                                                                .cast::<usize>();
                                                                            let len24 = l23;
                                                                            let bytes24 = _rt::Vec::from_raw_parts(l22.cast(), len24, len24);

                                                                            _rt::string_lift(
                                                                                bytes24,
                                                                            )
                                                                        };
                                                                        DbValuePrimitive::Text(e36)
                                                                    }
                                                                    13 => {
                                                                        let e36 = {
                                                                            let l25 = *base
                                                                                .add(16)
                                                                                .cast::<*mut u8>();
                                                                            let l26 = *base
                                                                                .add(20)
                                                                                .cast::<usize>();
                                                                            let len27 = l26;

                                                                            _rt::Vec::from_raw_parts(
                                                                                l25.cast(),
                                                                                len27,
                                                                                len27,
                                                                            )
                                                                        };
                                                                        DbValuePrimitive::Blob(e36)
                                                                    }
                                                                    14 => {
                                                                        let e36 = {
                                                                            let l28 = *base
                                                                                .add(16)
                                                                                .cast::<*mut u8>();
                                                                            let l29 = *base
                                                                                .add(20)
                                                                                .cast::<usize>();
                                                                            let len30 = l29;
                                                                            let bytes30 = _rt::Vec::from_raw_parts(l28.cast(), len30, len30);

                                                                            _rt::string_lift(
                                                                                bytes30,
                                                                            )
                                                                        };
                                                                        DbValuePrimitive::Json(e36)
                                                                    }
                                                                    15 => {
                                                                        let e36 = {
                                                                            let l31 = *base
                                                                                .add(16)
                                                                                .cast::<*mut u8>();
                                                                            let l32 = *base
                                                                                .add(20)
                                                                                .cast::<usize>();
                                                                            let len33 = l32;
                                                                            let bytes33 = _rt::Vec::from_raw_parts(l31.cast(), len33, len33);

                                                                            _rt::string_lift(
                                                                                bytes33,
                                                                            )
                                                                        };
                                                                        DbValuePrimitive::Xml(e36)
                                                                    }
                                                                    16 => {
                                                                        let e36 = {
                                                                            let l34 = *base
                                                                                .add(16)
                                                                                .cast::<i64>();
                                                                            let l35 = *base
                                                                                .add(24)
                                                                                .cast::<i64>();

                                                                            (l34 as u64, l35 as u64)
                                                                        };
                                                                        DbValuePrimitive::Uuid(e36)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 17, "invalid enum discriminant");
                                                                        DbValuePrimitive::Null
                                                                    }
                                                                };

                                                                v36
                                                            };
                                                            DbValue::Primitive(e70)
                                                        }
                                                        n => {
                                                            debug_assert_eq!(
                                                                n, 1,
                                                                "invalid enum discriminant"
                                                            );
                                                            let e70 = {
                                                                let l37 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l38 =
                                                                    *base.add(12).cast::<usize>();
                                                                let base69 = l37;
                                                                let len69 = l38;
                                                                let mut result69 =
                                                                    _rt::Vec::with_capacity(len69);
                                                                for i in 0..len69 {
                                                                    let base = base69.add(i * 24);
                                                                    let e69 = {
                                                                        let l39 = i32::from(
                                                                            *base
                                                                                .add(0)
                                                                                .cast::<u8>(),
                                                                        );
                                                                        let v68 = match l39 {
                                                                            0 => {
                                                                                let e68 = {
                                                                                    let l40 = i32::from(*base.add(8).cast::<i8>());

                                                                                    l40 as i8
                                                                                };
                                                                                DbValuePrimitive::Int8(e68)
                                                                            }
                                                                            1 => {
                                                                                let e68 = {
                                                                                    let l41 = i32::from(*base.add(8).cast::<i16>());

                                                                                    l41 as i16
                                                                                };
                                                                                DbValuePrimitive::Int16(e68)
                                                                            }
                                                                            2 => {
                                                                                let e68 = {
                                                                                    let l42 = *base.add(8).cast::<i32>();

                                                                                    l42
                                                                                };
                                                                                DbValuePrimitive::Int32(e68)
                                                                            }
                                                                            3 => {
                                                                                let e68 = {
                                                                                    let l43 = *base.add(8).cast::<i64>();

                                                                                    l43
                                                                                };
                                                                                DbValuePrimitive::Int64(e68)
                                                                            }
                                                                            4 => {
                                                                                let e68 = {
                                                                                    let l44 = *base.add(8).cast::<f32>();

                                                                                    l44
                                                                                };
                                                                                DbValuePrimitive::Float(e68)
                                                                            }
                                                                            5 => {
                                                                                let e68 = {
                                                                                    let l45 = *base.add(8).cast::<f64>();

                                                                                    l45
                                                                                };
                                                                                DbValuePrimitive::Double(e68)
                                                                            }
                                                                            6 => {
                                                                                let e68 = {
                                                                                    let l46 = *base.add(8).cast::<*mut u8>();
                                                                                    let l47 = *base.add(12).cast::<usize>();
                                                                                    let len48 = l47;
                                                                                    let bytes48 = _rt::Vec::from_raw_parts(l46.cast(), len48, len48);

                                                                                    _rt::string_lift(
                                                                                        bytes48,
                                                                                    )
                                                                                };
                                                                                DbValuePrimitive::Decimal(e68)
                                                                            }
                                                                            7 => {
                                                                                let e68 = {
                                                                                    let l49 = i32::from(*base.add(8).cast::<u8>());

                                                                                    _rt::bool_lift(
                                                                                        l49 as u8,
                                                                                    )
                                                                                };
                                                                                DbValuePrimitive::Boolean(e68)
                                                                            }
                                                                            8 => {
                                                                                let e68 = {
                                                                                    let l50 = *base.add(8).cast::<i64>();

                                                                                    l50
                                                                                };
                                                                                DbValuePrimitive::Timestamp(e68)
                                                                            }
                                                                            9 => {
                                                                                let e68 = {
                                                                                    let l51 = *base.add(8).cast::<i64>();

                                                                                    l51
                                                                                };
                                                                                DbValuePrimitive::Date(e68)
                                                                            }
                                                                            10 => {
                                                                                let e68 = {
                                                                                    let l52 = *base.add(8).cast::<i64>();

                                                                                    l52
                                                                                };
                                                                                DbValuePrimitive::Time(e68)
                                                                            }
                                                                            11 => {
                                                                                let e68 = {
                                                                                    let l53 = *base.add(8).cast::<i64>();

                                                                                    l53
                                                                                };
                                                                                DbValuePrimitive::Interval(e68)
                                                                            }
                                                                            12 => {
                                                                                let e68 = {
                                                                                    let l54 = *base.add(8).cast::<*mut u8>();
                                                                                    let l55 = *base.add(12).cast::<usize>();
                                                                                    let len56 = l55;
                                                                                    let bytes56 = _rt::Vec::from_raw_parts(l54.cast(), len56, len56);

                                                                                    _rt::string_lift(
                                                                                        bytes56,
                                                                                    )
                                                                                };
                                                                                DbValuePrimitive::Text(e68)
                                                                            }
                                                                            13 => {
                                                                                let e68 = {
                                                                                    let l57 = *base.add(8).cast::<*mut u8>();
                                                                                    let l58 = *base.add(12).cast::<usize>();
                                                                                    let len59 = l58;

                                                                                    _rt::Vec::from_raw_parts(l57.cast(), len59, len59)
                                                                                };
                                                                                DbValuePrimitive::Blob(e68)
                                                                            }
                                                                            14 => {
                                                                                let e68 = {
                                                                                    let l60 = *base.add(8).cast::<*mut u8>();
                                                                                    let l61 = *base.add(12).cast::<usize>();
                                                                                    let len62 = l61;
                                                                                    let bytes62 = _rt::Vec::from_raw_parts(l60.cast(), len62, len62);

                                                                                    _rt::string_lift(
                                                                                        bytes62,
                                                                                    )
                                                                                };
                                                                                DbValuePrimitive::Json(e68)
                                                                            }
                                                                            15 => {
                                                                                let e68 = {
                                                                                    let l63 = *base.add(8).cast::<*mut u8>();
                                                                                    let l64 = *base.add(12).cast::<usize>();
                                                                                    let len65 = l64;
                                                                                    let bytes65 = _rt::Vec::from_raw_parts(l63.cast(), len65, len65);

                                                                                    _rt::string_lift(
                                                                                        bytes65,
                                                                                    )
                                                                                };
                                                                                DbValuePrimitive::Xml(e68)
                                                                            }
                                                                            16 => {
                                                                                let e68 = {
                                                                                    let l66 = *base.add(8).cast::<i64>();
                                                                                    let l67 = *base.add(16).cast::<i64>();

                                                                                    (
                                                                                        l66 as u64,
                                                                                        l67 as u64,
                                                                                    )
                                                                                };
                                                                                DbValuePrimitive::Uuid(e68)
                                                                            }
                                                                            n => {
                                                                                debug_assert_eq!(n, 17, "invalid enum discriminant");
                                                                                DbValuePrimitive::Null
                                                                            }
                                                                        };

                                                                        v68
                                                                    };
                                                                    result69.push(e69);
                                                                }
                                                                _rt::cabi_dealloc(
                                                                    base69,
                                                                    len69 * 24,
                                                                    8,
                                                                );

                                                                result69
                                                            };
                                                            DbValue::Array(e70)
                                                        }
                                                    };

                                                    v70
                                                };
                                                result71.push(e71);
                                            }
                                            _rt::cabi_dealloc(base71, len71 * 32, 8);

                                            DbRow { values: result71 }
                                        };
                                        result72.push(e72);
                                    }
                                    _rt::cabi_dealloc(base72, len72 * 8, 4);

                                    result72
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl DbConnection {
                #[allow(unused_unsafe, clippy::all)]
                pub fn open(address: &str) -> Result<DbConnection, Error> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let vec0 = address;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:rdbms/postgres@0.0.1")]
                        extern "C" {
                            #[link_name = "[static]db-connection.open"]
                            fn wit_import(_: *mut u8, _: usize, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import(ptr0.cast_mut(), len0, ptr1);
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => {
                                let e = {
                                    let l3 = *ptr1.add(4).cast::<i32>();

                                    DbConnection::from_handle(l3 as u32)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l4 = i32::from(*ptr1.add(4).cast::<u8>());
                                    let v20 = match l4 {
                                        0 => {
                                            let e20 = {
                                                let l5 = *ptr1.add(8).cast::<*mut u8>();
                                                let l6 = *ptr1.add(12).cast::<usize>();
                                                let len7 = l6;
                                                let bytes7 =
                                                    _rt::Vec::from_raw_parts(l5.cast(), len7, len7);

                                                _rt::string_lift(bytes7)
                                            };
                                            Error::ConnectionFailure(e20)
                                        }
                                        1 => {
                                            let e20 = {
                                                let l8 = *ptr1.add(8).cast::<*mut u8>();
                                                let l9 = *ptr1.add(12).cast::<usize>();
                                                let len10 = l9;
                                                let bytes10 = _rt::Vec::from_raw_parts(
                                                    l8.cast(),
                                                    len10,
                                                    len10,
                                                );

                                                _rt::string_lift(bytes10)
                                            };
                                            Error::QueryParameterFailure(e20)
                                        }
                                        2 => {
                                            let e20 = {
                                                let l11 = *ptr1.add(8).cast::<*mut u8>();
                                                let l12 = *ptr1.add(12).cast::<usize>();
                                                let len13 = l12;
                                                let bytes13 = _rt::Vec::from_raw_parts(
                                                    l11.cast(),
                                                    len13,
                                                    len13,
                                                );

                                                _rt::string_lift(bytes13)
                                            };
                                            Error::QueryExecutionFailure(e20)
                                        }
                                        3 => {
                                            let e20 = {
                                                let l14 = *ptr1.add(8).cast::<*mut u8>();
                                                let l15 = *ptr1.add(12).cast::<usize>();
                                                let len16 = l15;
                                                let bytes16 = _rt::Vec::from_raw_parts(
                                                    l14.cast(),
                                                    len16,
                                                    len16,
                                                );

                                                _rt::string_lift(bytes16)
                                            };
                                            Error::QueryResponseFailure(e20)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 4, "invalid enum discriminant");
                                            let e20 = {
                                                let l17 = *ptr1.add(8).cast::<*mut u8>();
                                                let l18 = *ptr1.add(12).cast::<usize>();
                                                let len19 = l18;
                                                let bytes19 = _rt::Vec::from_raw_parts(
                                                    l17.cast(),
                                                    len19,
                                                    len19,
                                                );

                                                _rt::string_lift(bytes19)
                                            };
                                            Error::Other(e20)
                                        }
                                    };

                                    v20
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl DbConnection {
                #[allow(unused_unsafe, clippy::all)]
                pub fn query(
                    &self,
                    statement: &str,
                    params: &[DbValue],
                ) -> Result<DbResultSet, Error> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let vec0 = statement;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec14 = params;
                        let len14 = vec14.len();
                        let layout14 =
                            _rt::alloc::Layout::from_size_align_unchecked(vec14.len() * 32, 8);
                        let result14 = if layout14.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout14).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout14);
                            }
                            ptr
                        } else {
                            {
                                ::core::ptr::null_mut()
                            }
                        };
                        for (i, e) in vec14.into_iter().enumerate() {
                            let base = result14.add(i * 32);
                            {
                                match e {
                                    DbValue::Primitive(e) => {
                                        *base.add(0).cast::<u8>() = (0i32) as u8;
                                        match e {
                                            DbValuePrimitive::Int8(e) => {
                                                *base.add(8).cast::<u8>() = (0i32) as u8;
                                                *base.add(16).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            DbValuePrimitive::Int16(e) => {
                                                *base.add(8).cast::<u8>() = (1i32) as u8;
                                                *base.add(16).cast::<u16>() =
                                                    (_rt::as_i32(e)) as u16;
                                            }
                                            DbValuePrimitive::Int32(e) => {
                                                *base.add(8).cast::<u8>() = (2i32) as u8;
                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            DbValuePrimitive::Int64(e) => {
                                                *base.add(8).cast::<u8>() = (3i32) as u8;
                                                *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            DbValuePrimitive::Float(e) => {
                                                *base.add(8).cast::<u8>() = (4i32) as u8;
                                                *base.add(16).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            DbValuePrimitive::Double(e) => {
                                                *base.add(8).cast::<u8>() = (5i32) as u8;
                                                *base.add(16).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            DbValuePrimitive::Decimal(e) => {
                                                *base.add(8).cast::<u8>() = (6i32) as u8;
                                                let vec1 = e;
                                                let ptr1 = vec1.as_ptr().cast::<u8>();
                                                let len1 = vec1.len();
                                                *base.add(20).cast::<usize>() = len1;
                                                *base.add(16).cast::<*mut u8>() = ptr1.cast_mut();
                                            }
                                            DbValuePrimitive::Boolean(e) => {
                                                *base.add(8).cast::<u8>() = (7i32) as u8;
                                                *base.add(16).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                })
                                                    as u8;
                                            }
                                            DbValuePrimitive::Timestamp(e) => {
                                                *base.add(8).cast::<u8>() = (8i32) as u8;
                                                *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            DbValuePrimitive::Date(e) => {
                                                *base.add(8).cast::<u8>() = (9i32) as u8;
                                                *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            DbValuePrimitive::Time(e) => {
                                                *base.add(8).cast::<u8>() = (10i32) as u8;
                                                *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            DbValuePrimitive::Interval(e) => {
                                                *base.add(8).cast::<u8>() = (11i32) as u8;
                                                *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            DbValuePrimitive::Text(e) => {
                                                *base.add(8).cast::<u8>() = (12i32) as u8;
                                                let vec2 = e;
                                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                                let len2 = vec2.len();
                                                *base.add(20).cast::<usize>() = len2;
                                                *base.add(16).cast::<*mut u8>() = ptr2.cast_mut();
                                            }
                                            DbValuePrimitive::Blob(e) => {
                                                *base.add(8).cast::<u8>() = (13i32) as u8;
                                                let vec3 = e;
                                                let ptr3 = vec3.as_ptr().cast::<u8>();
                                                let len3 = vec3.len();
                                                *base.add(20).cast::<usize>() = len3;
                                                *base.add(16).cast::<*mut u8>() = ptr3.cast_mut();
                                            }
                                            DbValuePrimitive::Json(e) => {
                                                *base.add(8).cast::<u8>() = (14i32) as u8;
                                                let vec4 = e;
                                                let ptr4 = vec4.as_ptr().cast::<u8>();
                                                let len4 = vec4.len();
                                                *base.add(20).cast::<usize>() = len4;
                                                *base.add(16).cast::<*mut u8>() = ptr4.cast_mut();
                                            }
                                            DbValuePrimitive::Xml(e) => {
                                                *base.add(8).cast::<u8>() = (15i32) as u8;
                                                let vec5 = e;
                                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                                let len5 = vec5.len();
                                                *base.add(20).cast::<usize>() = len5;
                                                *base.add(16).cast::<*mut u8>() = ptr5.cast_mut();
                                            }
                                            DbValuePrimitive::Uuid(e) => {
                                                *base.add(8).cast::<u8>() = (16i32) as u8;
                                                let (t6_0, t6_1) = e;
                                                *base.add(16).cast::<i64>() = _rt::as_i64(t6_0);
                                                *base.add(24).cast::<i64>() = _rt::as_i64(t6_1);
                                            }
                                            DbValuePrimitive::Null => {
                                                *base.add(8).cast::<u8>() = (17i32) as u8;
                                            }
                                        }
                                    }
                                    DbValue::Array(e) => {
                                        *base.add(0).cast::<u8>() = (1i32) as u8;
                                        let vec13 = e;
                                        let len13 = vec13.len();
                                        let layout13 =
                                            _rt::alloc::Layout::from_size_align_unchecked(
                                                vec13.len() * 24,
                                                8,
                                            );
                                        let result13 = if layout13.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout13).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout13);
                                            }
                                            ptr
                                        } else {
                                            {
                                                ::core::ptr::null_mut()
                                            }
                                        };
                                        for (i, e) in vec13.into_iter().enumerate() {
                                            let base = result13.add(i * 24);
                                            {
                                                match e {
                                                    DbValuePrimitive::Int8(e) => {
                                                        *base.add(0).cast::<u8>() = (0i32) as u8;
                                                        *base.add(8).cast::<u8>() =
                                                            (_rt::as_i32(e)) as u8;
                                                    }
                                                    DbValuePrimitive::Int16(e) => {
                                                        *base.add(0).cast::<u8>() = (1i32) as u8;
                                                        *base.add(8).cast::<u16>() =
                                                            (_rt::as_i32(e)) as u16;
                                                    }
                                                    DbValuePrimitive::Int32(e) => {
                                                        *base.add(0).cast::<u8>() = (2i32) as u8;
                                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    DbValuePrimitive::Int64(e) => {
                                                        *base.add(0).cast::<u8>() = (3i32) as u8;
                                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                    }
                                                    DbValuePrimitive::Float(e) => {
                                                        *base.add(0).cast::<u8>() = (4i32) as u8;
                                                        *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                                    }
                                                    DbValuePrimitive::Double(e) => {
                                                        *base.add(0).cast::<u8>() = (5i32) as u8;
                                                        *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                                    }
                                                    DbValuePrimitive::Decimal(e) => {
                                                        *base.add(0).cast::<u8>() = (6i32) as u8;
                                                        let vec7 = e;
                                                        let ptr7 = vec7.as_ptr().cast::<u8>();
                                                        let len7 = vec7.len();
                                                        *base.add(12).cast::<usize>() = len7;
                                                        *base.add(8).cast::<*mut u8>() =
                                                            ptr7.cast_mut();
                                                    }
                                                    DbValuePrimitive::Boolean(e) => {
                                                        *base.add(0).cast::<u8>() = (7i32) as u8;
                                                        *base.add(8).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        })
                                                            as u8;
                                                    }
                                                    DbValuePrimitive::Timestamp(e) => {
                                                        *base.add(0).cast::<u8>() = (8i32) as u8;
                                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                    }
                                                    DbValuePrimitive::Date(e) => {
                                                        *base.add(0).cast::<u8>() = (9i32) as u8;
                                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                    }
                                                    DbValuePrimitive::Time(e) => {
                                                        *base.add(0).cast::<u8>() = (10i32) as u8;
                                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                    }
                                                    DbValuePrimitive::Interval(e) => {
                                                        *base.add(0).cast::<u8>() = (11i32) as u8;
                                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                    }
                                                    DbValuePrimitive::Text(e) => {
                                                        *base.add(0).cast::<u8>() = (12i32) as u8;
                                                        let vec8 = e;
                                                        let ptr8 = vec8.as_ptr().cast::<u8>();
                                                        let len8 = vec8.len();
                                                        *base.add(12).cast::<usize>() = len8;
                                                        *base.add(8).cast::<*mut u8>() =
                                                            ptr8.cast_mut();
                                                    }
                                                    DbValuePrimitive::Blob(e) => {
                                                        *base.add(0).cast::<u8>() = (13i32) as u8;
                                                        let vec9 = e;
                                                        let ptr9 = vec9.as_ptr().cast::<u8>();
                                                        let len9 = vec9.len();
                                                        *base.add(12).cast::<usize>() = len9;
                                                        *base.add(8).cast::<*mut u8>() =
                                                            ptr9.cast_mut();
                                                    }
                                                    DbValuePrimitive::Json(e) => {
                                                        *base.add(0).cast::<u8>() = (14i32) as u8;
                                                        let vec10 = e;
                                                        let ptr10 = vec10.as_ptr().cast::<u8>();
                                                        let len10 = vec10.len();
                                                        *base.add(12).cast::<usize>() = len10;
                                                        *base.add(8).cast::<*mut u8>() =
                                                            ptr10.cast_mut();
                                                    }
                                                    DbValuePrimitive::Xml(e) => {
                                                        *base.add(0).cast::<u8>() = (15i32) as u8;
                                                        let vec11 = e;
                                                        let ptr11 = vec11.as_ptr().cast::<u8>();
                                                        let len11 = vec11.len();
                                                        *base.add(12).cast::<usize>() = len11;
                                                        *base.add(8).cast::<*mut u8>() =
                                                            ptr11.cast_mut();
                                                    }
                                                    DbValuePrimitive::Uuid(e) => {
                                                        *base.add(0).cast::<u8>() = (16i32) as u8;
                                                        let (t12_0, t12_1) = e;
                                                        *base.add(8).cast::<i64>() =
                                                            _rt::as_i64(t12_0);
                                                        *base.add(16).cast::<i64>() =
                                                            _rt::as_i64(t12_1);
                                                    }
                                                    DbValuePrimitive::Null => {
                                                        *base.add(0).cast::<u8>() = (17i32) as u8;
                                                    }
                                                }
                                            }
                                        }
                                        *base.add(12).cast::<usize>() = len13;
                                        *base.add(8).cast::<*mut u8>() = result13;
                                        cleanup_list.extend_from_slice(&[(result13, layout13)]);
                                    }
                                }
                            }
                        }
                        let ptr15 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:rdbms/postgres@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]db-connection.query"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            result14,
                            len14,
                            ptr15,
                        );
                        let l16 = i32::from(*ptr15.add(0).cast::<u8>());
                        if layout14.size() != 0 {
                            _rt::alloc::dealloc(result14.cast(), layout14);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l16 {
                            0 => {
                                let e = {
                                    let l17 = *ptr15.add(4).cast::<i32>();

                                    DbResultSet::from_handle(l17 as u32)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l18 = i32::from(*ptr15.add(4).cast::<u8>());
                                    let v34 = match l18 {
                                        0 => {
                                            let e34 = {
                                                let l19 = *ptr15.add(8).cast::<*mut u8>();
                                                let l20 = *ptr15.add(12).cast::<usize>();
                                                let len21 = l20;
                                                let bytes21 = _rt::Vec::from_raw_parts(
                                                    l19.cast(),
                                                    len21,
                                                    len21,
                                                );

                                                _rt::string_lift(bytes21)
                                            };
                                            Error::ConnectionFailure(e34)
                                        }
                                        1 => {
                                            let e34 = {
                                                let l22 = *ptr15.add(8).cast::<*mut u8>();
                                                let l23 = *ptr15.add(12).cast::<usize>();
                                                let len24 = l23;
                                                let bytes24 = _rt::Vec::from_raw_parts(
                                                    l22.cast(),
                                                    len24,
                                                    len24,
                                                );

                                                _rt::string_lift(bytes24)
                                            };
                                            Error::QueryParameterFailure(e34)
                                        }
                                        2 => {
                                            let e34 = {
                                                let l25 = *ptr15.add(8).cast::<*mut u8>();
                                                let l26 = *ptr15.add(12).cast::<usize>();
                                                let len27 = l26;
                                                let bytes27 = _rt::Vec::from_raw_parts(
                                                    l25.cast(),
                                                    len27,
                                                    len27,
                                                );

                                                _rt::string_lift(bytes27)
                                            };
                                            Error::QueryExecutionFailure(e34)
                                        }
                                        3 => {
                                            let e34 = {
                                                let l28 = *ptr15.add(8).cast::<*mut u8>();
                                                let l29 = *ptr15.add(12).cast::<usize>();
                                                let len30 = l29;
                                                let bytes30 = _rt::Vec::from_raw_parts(
                                                    l28.cast(),
                                                    len30,
                                                    len30,
                                                );

                                                _rt::string_lift(bytes30)
                                            };
                                            Error::QueryResponseFailure(e34)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 4, "invalid enum discriminant");
                                            let e34 = {
                                                let l31 = *ptr15.add(8).cast::<*mut u8>();
                                                let l32 = *ptr15.add(12).cast::<usize>();
                                                let len33 = l32;
                                                let bytes33 = _rt::Vec::from_raw_parts(
                                                    l31.cast(),
                                                    len33,
                                                    len33,
                                                );

                                                _rt::string_lift(bytes33)
                                            };
                                            Error::Other(e34)
                                        }
                                    };

                                    v34
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl DbConnection {
                #[allow(unused_unsafe, clippy::all)]
                pub fn execute(&self, statement: &str, params: &[DbValue]) -> Result<u64, Error> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 24]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 24]);
                        let vec0 = statement;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec14 = params;
                        let len14 = vec14.len();
                        let layout14 =
                            _rt::alloc::Layout::from_size_align_unchecked(vec14.len() * 32, 8);
                        let result14 = if layout14.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout14).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout14);
                            }
                            ptr
                        } else {
                            {
                                ::core::ptr::null_mut()
                            }
                        };
                        for (i, e) in vec14.into_iter().enumerate() {
                            let base = result14.add(i * 32);
                            {
                                match e {
                                    DbValue::Primitive(e) => {
                                        *base.add(0).cast::<u8>() = (0i32) as u8;
                                        match e {
                                            DbValuePrimitive::Int8(e) => {
                                                *base.add(8).cast::<u8>() = (0i32) as u8;
                                                *base.add(16).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            DbValuePrimitive::Int16(e) => {
                                                *base.add(8).cast::<u8>() = (1i32) as u8;
                                                *base.add(16).cast::<u16>() =
                                                    (_rt::as_i32(e)) as u16;
                                            }
                                            DbValuePrimitive::Int32(e) => {
                                                *base.add(8).cast::<u8>() = (2i32) as u8;
                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            DbValuePrimitive::Int64(e) => {
                                                *base.add(8).cast::<u8>() = (3i32) as u8;
                                                *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            DbValuePrimitive::Float(e) => {
                                                *base.add(8).cast::<u8>() = (4i32) as u8;
                                                *base.add(16).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            DbValuePrimitive::Double(e) => {
                                                *base.add(8).cast::<u8>() = (5i32) as u8;
                                                *base.add(16).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            DbValuePrimitive::Decimal(e) => {
                                                *base.add(8).cast::<u8>() = (6i32) as u8;
                                                let vec1 = e;
                                                let ptr1 = vec1.as_ptr().cast::<u8>();
                                                let len1 = vec1.len();
                                                *base.add(20).cast::<usize>() = len1;
                                                *base.add(16).cast::<*mut u8>() = ptr1.cast_mut();
                                            }
                                            DbValuePrimitive::Boolean(e) => {
                                                *base.add(8).cast::<u8>() = (7i32) as u8;
                                                *base.add(16).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                })
                                                    as u8;
                                            }
                                            DbValuePrimitive::Timestamp(e) => {
                                                *base.add(8).cast::<u8>() = (8i32) as u8;
                                                *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            DbValuePrimitive::Date(e) => {
                                                *base.add(8).cast::<u8>() = (9i32) as u8;
                                                *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            DbValuePrimitive::Time(e) => {
                                                *base.add(8).cast::<u8>() = (10i32) as u8;
                                                *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            DbValuePrimitive::Interval(e) => {
                                                *base.add(8).cast::<u8>() = (11i32) as u8;
                                                *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            DbValuePrimitive::Text(e) => {
                                                *base.add(8).cast::<u8>() = (12i32) as u8;
                                                let vec2 = e;
                                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                                let len2 = vec2.len();
                                                *base.add(20).cast::<usize>() = len2;
                                                *base.add(16).cast::<*mut u8>() = ptr2.cast_mut();
                                            }
                                            DbValuePrimitive::Blob(e) => {
                                                *base.add(8).cast::<u8>() = (13i32) as u8;
                                                let vec3 = e;
                                                let ptr3 = vec3.as_ptr().cast::<u8>();
                                                let len3 = vec3.len();
                                                *base.add(20).cast::<usize>() = len3;
                                                *base.add(16).cast::<*mut u8>() = ptr3.cast_mut();
                                            }
                                            DbValuePrimitive::Json(e) => {
                                                *base.add(8).cast::<u8>() = (14i32) as u8;
                                                let vec4 = e;
                                                let ptr4 = vec4.as_ptr().cast::<u8>();
                                                let len4 = vec4.len();
                                                *base.add(20).cast::<usize>() = len4;
                                                *base.add(16).cast::<*mut u8>() = ptr4.cast_mut();
                                            }
                                            DbValuePrimitive::Xml(e) => {
                                                *base.add(8).cast::<u8>() = (15i32) as u8;
                                                let vec5 = e;
                                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                                let len5 = vec5.len();
                                                *base.add(20).cast::<usize>() = len5;
                                                *base.add(16).cast::<*mut u8>() = ptr5.cast_mut();
                                            }
                                            DbValuePrimitive::Uuid(e) => {
                                                *base.add(8).cast::<u8>() = (16i32) as u8;
                                                let (t6_0, t6_1) = e;
                                                *base.add(16).cast::<i64>() = _rt::as_i64(t6_0);
                                                *base.add(24).cast::<i64>() = _rt::as_i64(t6_1);
                                            }
                                            DbValuePrimitive::Null => {
                                                *base.add(8).cast::<u8>() = (17i32) as u8;
                                            }
                                        }
                                    }
                                    DbValue::Array(e) => {
                                        *base.add(0).cast::<u8>() = (1i32) as u8;
                                        let vec13 = e;
                                        let len13 = vec13.len();
                                        let layout13 =
                                            _rt::alloc::Layout::from_size_align_unchecked(
                                                vec13.len() * 24,
                                                8,
                                            );
                                        let result13 = if layout13.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout13).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout13);
                                            }
                                            ptr
                                        } else {
                                            {
                                                ::core::ptr::null_mut()
                                            }
                                        };
                                        for (i, e) in vec13.into_iter().enumerate() {
                                            let base = result13.add(i * 24);
                                            {
                                                match e {
                                                    DbValuePrimitive::Int8(e) => {
                                                        *base.add(0).cast::<u8>() = (0i32) as u8;
                                                        *base.add(8).cast::<u8>() =
                                                            (_rt::as_i32(e)) as u8;
                                                    }
                                                    DbValuePrimitive::Int16(e) => {
                                                        *base.add(0).cast::<u8>() = (1i32) as u8;
                                                        *base.add(8).cast::<u16>() =
                                                            (_rt::as_i32(e)) as u16;
                                                    }
                                                    DbValuePrimitive::Int32(e) => {
                                                        *base.add(0).cast::<u8>() = (2i32) as u8;
                                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    DbValuePrimitive::Int64(e) => {
                                                        *base.add(0).cast::<u8>() = (3i32) as u8;
                                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                    }
                                                    DbValuePrimitive::Float(e) => {
                                                        *base.add(0).cast::<u8>() = (4i32) as u8;
                                                        *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                                    }
                                                    DbValuePrimitive::Double(e) => {
                                                        *base.add(0).cast::<u8>() = (5i32) as u8;
                                                        *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                                    }
                                                    DbValuePrimitive::Decimal(e) => {
                                                        *base.add(0).cast::<u8>() = (6i32) as u8;
                                                        let vec7 = e;
                                                        let ptr7 = vec7.as_ptr().cast::<u8>();
                                                        let len7 = vec7.len();
                                                        *base.add(12).cast::<usize>() = len7;
                                                        *base.add(8).cast::<*mut u8>() =
                                                            ptr7.cast_mut();
                                                    }
                                                    DbValuePrimitive::Boolean(e) => {
                                                        *base.add(0).cast::<u8>() = (7i32) as u8;
                                                        *base.add(8).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        })
                                                            as u8;
                                                    }
                                                    DbValuePrimitive::Timestamp(e) => {
                                                        *base.add(0).cast::<u8>() = (8i32) as u8;
                                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                    }
                                                    DbValuePrimitive::Date(e) => {
                                                        *base.add(0).cast::<u8>() = (9i32) as u8;
                                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                    }
                                                    DbValuePrimitive::Time(e) => {
                                                        *base.add(0).cast::<u8>() = (10i32) as u8;
                                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                    }
                                                    DbValuePrimitive::Interval(e) => {
                                                        *base.add(0).cast::<u8>() = (11i32) as u8;
                                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                    }
                                                    DbValuePrimitive::Text(e) => {
                                                        *base.add(0).cast::<u8>() = (12i32) as u8;
                                                        let vec8 = e;
                                                        let ptr8 = vec8.as_ptr().cast::<u8>();
                                                        let len8 = vec8.len();
                                                        *base.add(12).cast::<usize>() = len8;
                                                        *base.add(8).cast::<*mut u8>() =
                                                            ptr8.cast_mut();
                                                    }
                                                    DbValuePrimitive::Blob(e) => {
                                                        *base.add(0).cast::<u8>() = (13i32) as u8;
                                                        let vec9 = e;
                                                        let ptr9 = vec9.as_ptr().cast::<u8>();
                                                        let len9 = vec9.len();
                                                        *base.add(12).cast::<usize>() = len9;
                                                        *base.add(8).cast::<*mut u8>() =
                                                            ptr9.cast_mut();
                                                    }
                                                    DbValuePrimitive::Json(e) => {
                                                        *base.add(0).cast::<u8>() = (14i32) as u8;
                                                        let vec10 = e;
                                                        let ptr10 = vec10.as_ptr().cast::<u8>();
                                                        let len10 = vec10.len();
                                                        *base.add(12).cast::<usize>() = len10;
                                                        *base.add(8).cast::<*mut u8>() =
                                                            ptr10.cast_mut();
                                                    }
                                                    DbValuePrimitive::Xml(e) => {
                                                        *base.add(0).cast::<u8>() = (15i32) as u8;
                                                        let vec11 = e;
                                                        let ptr11 = vec11.as_ptr().cast::<u8>();
                                                        let len11 = vec11.len();
                                                        *base.add(12).cast::<usize>() = len11;
                                                        *base.add(8).cast::<*mut u8>() =
                                                            ptr11.cast_mut();
                                                    }
                                                    DbValuePrimitive::Uuid(e) => {
                                                        *base.add(0).cast::<u8>() = (16i32) as u8;
                                                        let (t12_0, t12_1) = e;
                                                        *base.add(8).cast::<i64>() =
                                                            _rt::as_i64(t12_0);
                                                        *base.add(16).cast::<i64>() =
                                                            _rt::as_i64(t12_1);
                                                    }
                                                    DbValuePrimitive::Null => {
                                                        *base.add(0).cast::<u8>() = (17i32) as u8;
                                                    }
                                                }
                                            }
                                        }
                                        *base.add(12).cast::<usize>() = len13;
                                        *base.add(8).cast::<*mut u8>() = result13;
                                        cleanup_list.extend_from_slice(&[(result13, layout13)]);
                                    }
                                }
                            }
                        }
                        let ptr15 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:rdbms/postgres@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]db-connection.execute"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            result14,
                            len14,
                            ptr15,
                        );
                        let l16 = i32::from(*ptr15.add(0).cast::<u8>());
                        if layout14.size() != 0 {
                            _rt::alloc::dealloc(result14.cast(), layout14);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l16 {
                            0 => {
                                let e = {
                                    let l17 = *ptr15.add(8).cast::<i64>();

                                    l17 as u64
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l18 = i32::from(*ptr15.add(8).cast::<u8>());
                                    let v34 = match l18 {
                                        0 => {
                                            let e34 = {
                                                let l19 = *ptr15.add(12).cast::<*mut u8>();
                                                let l20 = *ptr15.add(16).cast::<usize>();
                                                let len21 = l20;
                                                let bytes21 = _rt::Vec::from_raw_parts(
                                                    l19.cast(),
                                                    len21,
                                                    len21,
                                                );

                                                _rt::string_lift(bytes21)
                                            };
                                            Error::ConnectionFailure(e34)
                                        }
                                        1 => {
                                            let e34 = {
                                                let l22 = *ptr15.add(12).cast::<*mut u8>();
                                                let l23 = *ptr15.add(16).cast::<usize>();
                                                let len24 = l23;
                                                let bytes24 = _rt::Vec::from_raw_parts(
                                                    l22.cast(),
                                                    len24,
                                                    len24,
                                                );

                                                _rt::string_lift(bytes24)
                                            };
                                            Error::QueryParameterFailure(e34)
                                        }
                                        2 => {
                                            let e34 = {
                                                let l25 = *ptr15.add(12).cast::<*mut u8>();
                                                let l26 = *ptr15.add(16).cast::<usize>();
                                                let len27 = l26;
                                                let bytes27 = _rt::Vec::from_raw_parts(
                                                    l25.cast(),
                                                    len27,
                                                    len27,
                                                );

                                                _rt::string_lift(bytes27)
                                            };
                                            Error::QueryExecutionFailure(e34)
                                        }
                                        3 => {
                                            let e34 = {
                                                let l28 = *ptr15.add(12).cast::<*mut u8>();
                                                let l29 = *ptr15.add(16).cast::<usize>();
                                                let len30 = l29;
                                                let bytes30 = _rt::Vec::from_raw_parts(
                                                    l28.cast(),
                                                    len30,
                                                    len30,
                                                );

                                                _rt::string_lift(bytes30)
                                            };
                                            Error::QueryResponseFailure(e34)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 4, "invalid enum discriminant");
                                            let e34 = {
                                                let l31 = *ptr15.add(12).cast::<*mut u8>();
                                                let l32 = *ptr15.add(16).cast::<usize>();
                                                let len33 = l32;
                                                let bytes33 = _rt::Vec::from_raw_parts(
                                                    l31.cast(),
                                                    len33,
                                                    len33,
                                                );

                                                _rt::string_lift(bytes33)
                                            };
                                            Error::Other(e34)
                                        }
                                    };

                                    v34
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
        }

        #[allow(dead_code, clippy::all)]
        pub mod mysql {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[derive(Clone)]
            pub enum Error {
                ConnectionFailure(_rt::String),
                QueryParameterFailure(_rt::String),
                QueryExecutionFailure(_rt::String),
                QueryResponseFailure(_rt::String),
                Other(_rt::String),
            }
            impl ::core::fmt::Debug for Error {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        Error::ConnectionFailure(e) => {
                            f.debug_tuple("Error::ConnectionFailure").field(e).finish()
                        }
                        Error::QueryParameterFailure(e) => f
                            .debug_tuple("Error::QueryParameterFailure")
                            .field(e)
                            .finish(),
                        Error::QueryExecutionFailure(e) => f
                            .debug_tuple("Error::QueryExecutionFailure")
                            .field(e)
                            .finish(),
                        Error::QueryResponseFailure(e) => f
                            .debug_tuple("Error::QueryResponseFailure")
                            .field(e)
                            .finish(),
                        Error::Other(e) => f.debug_tuple("Error::Other").field(e).finish(),
                    }
                }
            }
            impl ::core::fmt::Display for Error {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }

            impl std::error::Error for Error {}
            #[derive(Clone, Copy)]
            pub enum DbColumnType {
                Boolean,
                Tinyint,
                Smallint,
                Mediumint,
                Int,
                Bigint,
                TinyUnsigned,
                SmallUnsigned,
                MediumUnsigned,
                Unsigned,
                BigUnsigned,
                Float,
                Double,
                Decimal,
                Date,
                Datetime,
                Timestamp,
                Time,
                Year,
                Fixchar,
                Varchar,
                Tinytext,
                Text,
                Mediumtext,
                Longtext,
                Binary,
                Varbinary,
                Tinyblob,
                Blob,
                Mediumblob,
                Longblob,
                Enumeration,
                Set,
                Bit,
                Json,
            }
            impl ::core::fmt::Debug for DbColumnType {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        DbColumnType::Boolean => f.debug_tuple("DbColumnType::Boolean").finish(),
                        DbColumnType::Tinyint => f.debug_tuple("DbColumnType::Tinyint").finish(),
                        DbColumnType::Smallint => f.debug_tuple("DbColumnType::Smallint").finish(),
                        DbColumnType::Mediumint => {
                            f.debug_tuple("DbColumnType::Mediumint").finish()
                        }
                        DbColumnType::Int => f.debug_tuple("DbColumnType::Int").finish(),
                        DbColumnType::Bigint => f.debug_tuple("DbColumnType::Bigint").finish(),
                        DbColumnType::TinyUnsigned => {
                            f.debug_tuple("DbColumnType::TinyUnsigned").finish()
                        }
                        DbColumnType::SmallUnsigned => {
                            f.debug_tuple("DbColumnType::SmallUnsigned").finish()
                        }
                        DbColumnType::MediumUnsigned => {
                            f.debug_tuple("DbColumnType::MediumUnsigned").finish()
                        }
                        DbColumnType::Unsigned => f.debug_tuple("DbColumnType::Unsigned").finish(),
                        DbColumnType::BigUnsigned => {
                            f.debug_tuple("DbColumnType::BigUnsigned").finish()
                        }
                        DbColumnType::Float => f.debug_tuple("DbColumnType::Float").finish(),
                        DbColumnType::Double => f.debug_tuple("DbColumnType::Double").finish(),
                        DbColumnType::Decimal => f.debug_tuple("DbColumnType::Decimal").finish(),
                        DbColumnType::Date => f.debug_tuple("DbColumnType::Date").finish(),
                        DbColumnType::Datetime => f.debug_tuple("DbColumnType::Datetime").finish(),
                        DbColumnType::Timestamp => {
                            f.debug_tuple("DbColumnType::Timestamp").finish()
                        }
                        DbColumnType::Time => f.debug_tuple("DbColumnType::Time").finish(),
                        DbColumnType::Year => f.debug_tuple("DbColumnType::Year").finish(),
                        DbColumnType::Fixchar => f.debug_tuple("DbColumnType::Fixchar").finish(),
                        DbColumnType::Varchar => f.debug_tuple("DbColumnType::Varchar").finish(),
                        DbColumnType::Tinytext => f.debug_tuple("DbColumnType::Tinytext").finish(),
                        DbColumnType::Text => f.debug_tuple("DbColumnType::Text").finish(),
                        DbColumnType::Mediumtext => {
                            f.debug_tuple("DbColumnType::Mediumtext").finish()
                        }
                        DbColumnType::Longtext => f.debug_tuple("DbColumnType::Longtext").finish(),
                        DbColumnType::Binary => f.debug_tuple("DbColumnType::Binary").finish(),
                        DbColumnType::Varbinary => {
                            f.debug_tuple("DbColumnType::Varbinary").finish()
                        }
                        DbColumnType::Tinyblob => f.debug_tuple("DbColumnType::Tinyblob").finish(),
                        DbColumnType::Blob => f.debug_tuple("DbColumnType::Blob").finish(),
                        DbColumnType::Mediumblob => {
                            f.debug_tuple("DbColumnType::Mediumblob").finish()
                        }
                        DbColumnType::Longblob => f.debug_tuple("DbColumnType::Longblob").finish(),
                        DbColumnType::Enumeration => {
                            f.debug_tuple("DbColumnType::Enumeration").finish()
                        }
                        DbColumnType::Set => f.debug_tuple("DbColumnType::Set").finish(),
                        DbColumnType::Bit => f.debug_tuple("DbColumnType::Bit").finish(),
                        DbColumnType::Json => f.debug_tuple("DbColumnType::Json").finish(),
                    }
                }
            }
            #[derive(Clone)]
            pub struct DbColumn {
                pub ordinal: u64,
                pub name: _rt::String,
                pub db_type: DbColumnType,
                pub db_type_name: _rt::String,
            }
            impl ::core::fmt::Debug for DbColumn {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("DbColumn")
                        .field("ordinal", &self.ordinal)
                        .field("name", &self.name)
                        .field("db-type", &self.db_type)
                        .field("db-type-name", &self.db_type_name)
                        .finish()
                }
            }
            /// Value descriptor for a single database value
            #[derive(Clone)]
            pub enum DbValue {
                Boolean(bool),
                Tinyint(i8),
                Smallint(i16),
                Mediumint(i32),
                /// s24
                Int(i32),
                Bigint(i64),
                TinyUnsigned(u8),
                SmallUnsigned(u16),
                MediumUnsigned(u32),
                /// u24
                Unsigned(u32),
                BigUnsigned(u64),
                Float(f32),
                Double(f64),
                Decimal(_rt::String),
                Date(i64),
                Datetime(i64),
                Timestamp(i64),
                Time(i64),
                Year(i8),
                Fixchar(_rt::String),
                Varchar(_rt::String),
                Tinytext(_rt::String),
                Text(_rt::String),
                Mediumtext(_rt::String),
                Longtext(_rt::String),
                Binary(_rt::Vec<u8>),
                Varbinary(_rt::Vec<u8>),
                Tinyblob(_rt::Vec<u8>),
                Blob(_rt::Vec<u8>),
                Mediumblob(_rt::Vec<u8>),
                Longblob(_rt::Vec<u8>),
                Enumeration(_rt::String),
                Set(_rt::String),
                Bit(u8),
                Json(_rt::String),
                Null,
            }
            impl ::core::fmt::Debug for DbValue {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        DbValue::Boolean(e) => f.debug_tuple("DbValue::Boolean").field(e).finish(),
                        DbValue::Tinyint(e) => f.debug_tuple("DbValue::Tinyint").field(e).finish(),
                        DbValue::Smallint(e) => {
                            f.debug_tuple("DbValue::Smallint").field(e).finish()
                        }
                        DbValue::Mediumint(e) => {
                            f.debug_tuple("DbValue::Mediumint").field(e).finish()
                        }
                        DbValue::Int(e) => f.debug_tuple("DbValue::Int").field(e).finish(),
                        DbValue::Bigint(e) => f.debug_tuple("DbValue::Bigint").field(e).finish(),
                        DbValue::TinyUnsigned(e) => {
                            f.debug_tuple("DbValue::TinyUnsigned").field(e).finish()
                        }
                        DbValue::SmallUnsigned(e) => {
                            f.debug_tuple("DbValue::SmallUnsigned").field(e).finish()
                        }
                        DbValue::MediumUnsigned(e) => {
                            f.debug_tuple("DbValue::MediumUnsigned").field(e).finish()
                        }
                        DbValue::Unsigned(e) => {
                            f.debug_tuple("DbValue::Unsigned").field(e).finish()
                        }
                        DbValue::BigUnsigned(e) => {
                            f.debug_tuple("DbValue::BigUnsigned").field(e).finish()
                        }
                        DbValue::Float(e) => f.debug_tuple("DbValue::Float").field(e).finish(),
                        DbValue::Double(e) => f.debug_tuple("DbValue::Double").field(e).finish(),
                        DbValue::Decimal(e) => f.debug_tuple("DbValue::Decimal").field(e).finish(),
                        DbValue::Date(e) => f.debug_tuple("DbValue::Date").field(e).finish(),
                        DbValue::Datetime(e) => {
                            f.debug_tuple("DbValue::Datetime").field(e).finish()
                        }
                        DbValue::Timestamp(e) => {
                            f.debug_tuple("DbValue::Timestamp").field(e).finish()
                        }
                        DbValue::Time(e) => f.debug_tuple("DbValue::Time").field(e).finish(),
                        DbValue::Year(e) => f.debug_tuple("DbValue::Year").field(e).finish(),
                        DbValue::Fixchar(e) => f.debug_tuple("DbValue::Fixchar").field(e).finish(),
                        DbValue::Varchar(e) => f.debug_tuple("DbValue::Varchar").field(e).finish(),
                        DbValue::Tinytext(e) => {
                            f.debug_tuple("DbValue::Tinytext").field(e).finish()
                        }
                        DbValue::Text(e) => f.debug_tuple("DbValue::Text").field(e).finish(),
                        DbValue::Mediumtext(e) => {
                            f.debug_tuple("DbValue::Mediumtext").field(e).finish()
                        }
                        DbValue::Longtext(e) => {
                            f.debug_tuple("DbValue::Longtext").field(e).finish()
                        }
                        DbValue::Binary(e) => f.debug_tuple("DbValue::Binary").field(e).finish(),
                        DbValue::Varbinary(e) => {
                            f.debug_tuple("DbValue::Varbinary").field(e).finish()
                        }
                        DbValue::Tinyblob(e) => {
                            f.debug_tuple("DbValue::Tinyblob").field(e).finish()
                        }
                        DbValue::Blob(e) => f.debug_tuple("DbValue::Blob").field(e).finish(),
                        DbValue::Mediumblob(e) => {
                            f.debug_tuple("DbValue::Mediumblob").field(e).finish()
                        }
                        DbValue::Longblob(e) => {
                            f.debug_tuple("DbValue::Longblob").field(e).finish()
                        }
                        DbValue::Enumeration(e) => {
                            f.debug_tuple("DbValue::Enumeration").field(e).finish()
                        }
                        DbValue::Set(e) => f.debug_tuple("DbValue::Set").field(e).finish(),
                        DbValue::Bit(e) => f.debug_tuple("DbValue::Bit").field(e).finish(),
                        DbValue::Json(e) => f.debug_tuple("DbValue::Json").field(e).finish(),
                        DbValue::Null => f.debug_tuple("DbValue::Null").finish(),
                    }
                }
            }
            /// A single row of values
            #[derive(Clone)]
            pub struct DbRow {
                pub values: _rt::Vec<DbValue>,
            }
            impl ::core::fmt::Debug for DbRow {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("DbRow")
                        .field("values", &self.values)
                        .finish()
                }
            }
            /// A potentially very large and lazy stream of rows:

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct DbResultSet {
                handle: _rt::Resource<DbResultSet>,
            }

            impl DbResultSet {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for DbResultSet {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:rdbms/mysql@0.0.1")]
                        extern "C" {
                            #[link_name = "[resource-drop]db-result-set"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct DbConnection {
                handle: _rt::Resource<DbConnection>,
            }

            impl DbConnection {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for DbConnection {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:rdbms/mysql@0.0.1")]
                        extern "C" {
                            #[link_name = "[resource-drop]db-connection"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            impl DbResultSet {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_columns(&self) -> _rt::Vec<DbColumn> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:rdbms/mysql@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]db-result-set.get-columns"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let base12 = l1;
                        let len12 = l2;
                        let mut result12 = _rt::Vec::with_capacity(len12);
                        for i in 0..len12 {
                            let base = base12.add(i * 32);
                            let e12 = {
                                let l3 = *base.add(0).cast::<i64>();
                                let l4 = *base.add(8).cast::<*mut u8>();
                                let l5 = *base.add(12).cast::<usize>();
                                let len6 = l5;
                                let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);
                                let l7 = i32::from(*base.add(16).cast::<u8>());
                                let v8 = match l7 {
                                    0 => DbColumnType::Boolean,
                                    1 => DbColumnType::Tinyint,
                                    2 => DbColumnType::Smallint,
                                    3 => DbColumnType::Mediumint,
                                    4 => DbColumnType::Int,
                                    5 => DbColumnType::Bigint,
                                    6 => DbColumnType::TinyUnsigned,
                                    7 => DbColumnType::SmallUnsigned,
                                    8 => DbColumnType::MediumUnsigned,
                                    9 => DbColumnType::Unsigned,
                                    10 => DbColumnType::BigUnsigned,
                                    11 => DbColumnType::Float,
                                    12 => DbColumnType::Double,
                                    13 => DbColumnType::Decimal,
                                    14 => DbColumnType::Date,
                                    15 => DbColumnType::Datetime,
                                    16 => DbColumnType::Timestamp,
                                    17 => DbColumnType::Time,
                                    18 => DbColumnType::Year,
                                    19 => DbColumnType::Fixchar,
                                    20 => DbColumnType::Varchar,
                                    21 => DbColumnType::Tinytext,
                                    22 => DbColumnType::Text,
                                    23 => DbColumnType::Mediumtext,
                                    24 => DbColumnType::Longtext,
                                    25 => DbColumnType::Binary,
                                    26 => DbColumnType::Varbinary,
                                    27 => DbColumnType::Tinyblob,
                                    28 => DbColumnType::Blob,
                                    29 => DbColumnType::Mediumblob,
                                    30 => DbColumnType::Longblob,
                                    31 => DbColumnType::Enumeration,
                                    32 => DbColumnType::Set,
                                    33 => DbColumnType::Bit,
                                    n => {
                                        debug_assert_eq!(n, 34, "invalid enum discriminant");
                                        DbColumnType::Json
                                    }
                                };
                                let l9 = *base.add(20).cast::<*mut u8>();
                                let l10 = *base.add(24).cast::<usize>();
                                let len11 = l10;
                                let bytes11 = _rt::Vec::from_raw_parts(l9.cast(), len11, len11);

                                DbColumn {
                                    ordinal: l3 as u64,
                                    name: _rt::string_lift(bytes6),
                                    db_type: v8,
                                    db_type_name: _rt::string_lift(bytes11),
                                }
                            };
                            result12.push(e12);
                        }
                        _rt::cabi_dealloc(base12, len12 * 32, 8);
                        result12
                    }
                }
            }
            impl DbResultSet {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_next(&self) -> Option<_rt::Vec<DbRow>> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:rdbms/mysql@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]db-result-set.get-next"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<*mut u8>();
                                    let l3 = *ptr0.add(8).cast::<usize>();
                                    let base76 = l2;
                                    let len76 = l3;
                                    let mut result76 = _rt::Vec::with_capacity(len76);
                                    for i in 0..len76 {
                                        let base = base76.add(i * 8);
                                        let e76 = {
                                            let l4 = *base.add(0).cast::<*mut u8>();
                                            let l5 = *base.add(4).cast::<usize>();
                                            let base75 = l4;
                                            let len75 = l5;
                                            let mut result75 = _rt::Vec::with_capacity(len75);
                                            for i in 0..len75 {
                                                let base = base75.add(i * 16);
                                                let e75 = {
                                                    let l6 = i32::from(*base.add(0).cast::<u8>());
                                                    let v74 = match l6 {
                                                        0 => {
                                                            let e74 = {
                                                                let l7 = i32::from(
                                                                    *base.add(8).cast::<u8>(),
                                                                );

                                                                _rt::bool_lift(l7 as u8)
                                                            };
                                                            DbValue::Boolean(e74)
                                                        }
                                                        1 => {
                                                            let e74 = {
                                                                let l8 = i32::from(
                                                                    *base.add(8).cast::<i8>(),
                                                                );

                                                                l8 as i8
                                                            };
                                                            DbValue::Tinyint(e74)
                                                        }
                                                        2 => {
                                                            let e74 = {
                                                                let l9 = i32::from(
                                                                    *base.add(8).cast::<i16>(),
                                                                );

                                                                l9 as i16
                                                            };
                                                            DbValue::Smallint(e74)
                                                        }
                                                        3 => {
                                                            let e74 = {
                                                                let l10 =
                                                                    *base.add(8).cast::<i32>();

                                                                l10
                                                            };
                                                            DbValue::Mediumint(e74)
                                                        }
                                                        4 => {
                                                            let e74 = {
                                                                let l11 =
                                                                    *base.add(8).cast::<i32>();

                                                                l11
                                                            };
                                                            DbValue::Int(e74)
                                                        }
                                                        5 => {
                                                            let e74 = {
                                                                let l12 =
                                                                    *base.add(8).cast::<i64>();

                                                                l12
                                                            };
                                                            DbValue::Bigint(e74)
                                                        }
                                                        6 => {
                                                            let e74 = {
                                                                let l13 = i32::from(
                                                                    *base.add(8).cast::<u8>(),
                                                                );

                                                                l13 as u8
                                                            };
                                                            DbValue::TinyUnsigned(e74)
                                                        }
                                                        7 => {
                                                            let e74 = {
                                                                let l14 = i32::from(
                                                                    *base.add(8).cast::<u16>(),
                                                                );

                                                                l14 as u16
                                                            };
                                                            DbValue::SmallUnsigned(e74)
                                                        }
                                                        8 => {
                                                            let e74 = {
                                                                let l15 =
                                                                    *base.add(8).cast::<i32>();

                                                                l15 as u32
                                                            };
                                                            DbValue::MediumUnsigned(e74)
                                                        }
                                                        9 => {
                                                            let e74 = {
                                                                let l16 =
                                                                    *base.add(8).cast::<i32>();

                                                                l16 as u32
                                                            };
                                                            DbValue::Unsigned(e74)
                                                        }
                                                        10 => {
                                                            let e74 = {
                                                                let l17 =
                                                                    *base.add(8).cast::<i64>();

                                                                l17 as u64
                                                            };
                                                            DbValue::BigUnsigned(e74)
                                                        }
                                                        11 => {
                                                            let e74 = {
                                                                let l18 =
                                                                    *base.add(8).cast::<f32>();

                                                                l18
                                                            };
                                                            DbValue::Float(e74)
                                                        }
                                                        12 => {
                                                            let e74 = {
                                                                let l19 =
                                                                    *base.add(8).cast::<f64>();

                                                                l19
                                                            };
                                                            DbValue::Double(e74)
                                                        }
                                                        13 => {
                                                            let e74 = {
                                                                let l20 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l21 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len22 = l21;
                                                                let bytes22 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l20.cast(),
                                                                        len22,
                                                                        len22,
                                                                    );

                                                                _rt::string_lift(bytes22)
                                                            };
                                                            DbValue::Decimal(e74)
                                                        }
                                                        14 => {
                                                            let e74 = {
                                                                let l23 =
                                                                    *base.add(8).cast::<i64>();

                                                                l23
                                                            };
                                                            DbValue::Date(e74)
                                                        }
                                                        15 => {
                                                            let e74 = {
                                                                let l24 =
                                                                    *base.add(8).cast::<i64>();

                                                                l24
                                                            };
                                                            DbValue::Datetime(e74)
                                                        }
                                                        16 => {
                                                            let e74 = {
                                                                let l25 =
                                                                    *base.add(8).cast::<i64>();

                                                                l25
                                                            };
                                                            DbValue::Timestamp(e74)
                                                        }
                                                        17 => {
                                                            let e74 = {
                                                                let l26 =
                                                                    *base.add(8).cast::<i64>();

                                                                l26
                                                            };
                                                            DbValue::Time(e74)
                                                        }
                                                        18 => {
                                                            let e74 = {
                                                                let l27 = i32::from(
                                                                    *base.add(8).cast::<i8>(),
                                                                );

                                                                l27 as i8
                                                            };
                                                            DbValue::Year(e74)
                                                        }
                                                        19 => {
                                                            let e74 = {
                                                                let l28 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l29 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len30 = l29;
                                                                let bytes30 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l28.cast(),
                                                                        len30,
                                                                        len30,
                                                                    );

                                                                _rt::string_lift(bytes30)
                                                            };
                                                            DbValue::Fixchar(e74)
                                                        }
                                                        20 => {
                                                            let e74 = {
                                                                let l31 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l32 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len33 = l32;
                                                                let bytes33 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l31.cast(),
                                                                        len33,
                                                                        len33,
                                                                    );

                                                                _rt::string_lift(bytes33)
                                                            };
                                                            DbValue::Varchar(e74)
                                                        }
                                                        21 => {
                                                            let e74 = {
                                                                let l34 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l35 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len36 = l35;
                                                                let bytes36 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l34.cast(),
                                                                        len36,
                                                                        len36,
                                                                    );

                                                                _rt::string_lift(bytes36)
                                                            };
                                                            DbValue::Tinytext(e74)
                                                        }
                                                        22 => {
                                                            let e74 = {
                                                                let l37 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l38 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len39 = l38;
                                                                let bytes39 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l37.cast(),
                                                                        len39,
                                                                        len39,
                                                                    );

                                                                _rt::string_lift(bytes39)
                                                            };
                                                            DbValue::Text(e74)
                                                        }
                                                        23 => {
                                                            let e74 = {
                                                                let l40 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l41 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len42 = l41;
                                                                let bytes42 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l40.cast(),
                                                                        len42,
                                                                        len42,
                                                                    );

                                                                _rt::string_lift(bytes42)
                                                            };
                                                            DbValue::Mediumtext(e74)
                                                        }
                                                        24 => {
                                                            let e74 = {
                                                                let l43 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l44 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len45 = l44;
                                                                let bytes45 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l43.cast(),
                                                                        len45,
                                                                        len45,
                                                                    );

                                                                _rt::string_lift(bytes45)
                                                            };
                                                            DbValue::Longtext(e74)
                                                        }
                                                        25 => {
                                                            let e74 = {
                                                                let l46 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l47 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len48 = l47;

                                                                _rt::Vec::from_raw_parts(
                                                                    l46.cast(),
                                                                    len48,
                                                                    len48,
                                                                )
                                                            };
                                                            DbValue::Binary(e74)
                                                        }
                                                        26 => {
                                                            let e74 = {
                                                                let l49 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l50 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len51 = l50;

                                                                _rt::Vec::from_raw_parts(
                                                                    l49.cast(),
                                                                    len51,
                                                                    len51,
                                                                )
                                                            };
                                                            DbValue::Varbinary(e74)
                                                        }
                                                        27 => {
                                                            let e74 = {
                                                                let l52 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l53 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len54 = l53;

                                                                _rt::Vec::from_raw_parts(
                                                                    l52.cast(),
                                                                    len54,
                                                                    len54,
                                                                )
                                                            };
                                                            DbValue::Tinyblob(e74)
                                                        }
                                                        28 => {
                                                            let e74 = {
                                                                let l55 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l56 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len57 = l56;

                                                                _rt::Vec::from_raw_parts(
                                                                    l55.cast(),
                                                                    len57,
                                                                    len57,
                                                                )
                                                            };
                                                            DbValue::Blob(e74)
                                                        }
                                                        29 => {
                                                            let e74 = {
                                                                let l58 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l59 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len60 = l59;

                                                                _rt::Vec::from_raw_parts(
                                                                    l58.cast(),
                                                                    len60,
                                                                    len60,
                                                                )
                                                            };
                                                            DbValue::Mediumblob(e74)
                                                        }
                                                        30 => {
                                                            let e74 = {
                                                                let l61 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l62 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len63 = l62;

                                                                _rt::Vec::from_raw_parts(
                                                                    l61.cast(),
                                                                    len63,
                                                                    len63,
                                                                )
                                                            };
                                                            DbValue::Longblob(e74)
                                                        }
                                                        31 => {
                                                            let e74 = {
                                                                let l64 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l65 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len66 = l65;
                                                                let bytes66 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l64.cast(),
                                                                        len66,
                                                                        len66,
                                                                    );

                                                                _rt::string_lift(bytes66)
                                                            };
                                                            DbValue::Enumeration(e74)
                                                        }
                                                        32 => {
                                                            let e74 = {
                                                                let l67 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l68 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len69 = l68;
                                                                let bytes69 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l67.cast(),
                                                                        len69,
                                                                        len69,
                                                                    );

                                                                _rt::string_lift(bytes69)
                                                            };
                                                            DbValue::Set(e74)
                                                        }
                                                        33 => {
                                                            let e74 = {
                                                                let l70 = i32::from(
                                                                    *base.add(8).cast::<u8>(),
                                                                );

                                                                l70 as u8
                                                            };
                                                            DbValue::Bit(e74)
                                                        }
                                                        34 => {
                                                            let e74 = {
                                                                let l71 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l72 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len73 = l72;
                                                                let bytes73 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l71.cast(),
                                                                        len73,
                                                                        len73,
                                                                    );

                                                                _rt::string_lift(bytes73)
                                                            };
                                                            DbValue::Json(e74)
                                                        }
                                                        n => {
                                                            debug_assert_eq!(
                                                                n, 35,
                                                                "invalid enum discriminant"
                                                            );
                                                            DbValue::Null
                                                        }
                                                    };

                                                    v74
                                                };
                                                result75.push(e75);
                                            }
                                            _rt::cabi_dealloc(base75, len75 * 16, 8);

                                            DbRow { values: result75 }
                                        };
                                        result76.push(e76);
                                    }
                                    _rt::cabi_dealloc(base76, len76 * 8, 4);

                                    result76
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl DbConnection {
                #[allow(unused_unsafe, clippy::all)]
                pub fn open(address: &str) -> Result<DbConnection, Error> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let vec0 = address;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:rdbms/mysql@0.0.1")]
                        extern "C" {
                            #[link_name = "[static]db-connection.open"]
                            fn wit_import(_: *mut u8, _: usize, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import(ptr0.cast_mut(), len0, ptr1);
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => {
                                let e = {
                                    let l3 = *ptr1.add(4).cast::<i32>();

                                    DbConnection::from_handle(l3 as u32)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l4 = i32::from(*ptr1.add(4).cast::<u8>());
                                    let v20 = match l4 {
                                        0 => {
                                            let e20 = {
                                                let l5 = *ptr1.add(8).cast::<*mut u8>();
                                                let l6 = *ptr1.add(12).cast::<usize>();
                                                let len7 = l6;
                                                let bytes7 =
                                                    _rt::Vec::from_raw_parts(l5.cast(), len7, len7);

                                                _rt::string_lift(bytes7)
                                            };
                                            Error::ConnectionFailure(e20)
                                        }
                                        1 => {
                                            let e20 = {
                                                let l8 = *ptr1.add(8).cast::<*mut u8>();
                                                let l9 = *ptr1.add(12).cast::<usize>();
                                                let len10 = l9;
                                                let bytes10 = _rt::Vec::from_raw_parts(
                                                    l8.cast(),
                                                    len10,
                                                    len10,
                                                );

                                                _rt::string_lift(bytes10)
                                            };
                                            Error::QueryParameterFailure(e20)
                                        }
                                        2 => {
                                            let e20 = {
                                                let l11 = *ptr1.add(8).cast::<*mut u8>();
                                                let l12 = *ptr1.add(12).cast::<usize>();
                                                let len13 = l12;
                                                let bytes13 = _rt::Vec::from_raw_parts(
                                                    l11.cast(),
                                                    len13,
                                                    len13,
                                                );

                                                _rt::string_lift(bytes13)
                                            };
                                            Error::QueryExecutionFailure(e20)
                                        }
                                        3 => {
                                            let e20 = {
                                                let l14 = *ptr1.add(8).cast::<*mut u8>();
                                                let l15 = *ptr1.add(12).cast::<usize>();
                                                let len16 = l15;
                                                let bytes16 = _rt::Vec::from_raw_parts(
                                                    l14.cast(),
                                                    len16,
                                                    len16,
                                                );

                                                _rt::string_lift(bytes16)
                                            };
                                            Error::QueryResponseFailure(e20)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 4, "invalid enum discriminant");
                                            let e20 = {
                                                let l17 = *ptr1.add(8).cast::<*mut u8>();
                                                let l18 = *ptr1.add(12).cast::<usize>();
                                                let len19 = l18;
                                                let bytes19 = _rt::Vec::from_raw_parts(
                                                    l17.cast(),
                                                    len19,
                                                    len19,
                                                );

                                                _rt::string_lift(bytes19)
                                            };
                                            Error::Other(e20)
                                        }
                                    };

                                    v20
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl DbConnection {
                #[allow(unused_unsafe, clippy::all)]
                pub fn query(
                    &self,
                    statement: &str,
                    params: &[DbValue],
                ) -> Result<DbResultSet, Error> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let vec0 = statement;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec17 = params;
                        let len17 = vec17.len();
                        let layout17 =
                            _rt::alloc::Layout::from_size_align_unchecked(vec17.len() * 16, 8);
                        let result17 = if layout17.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout17).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout17);
                            }
                            ptr
                        } else {
                            {
                                ::core::ptr::null_mut()
                            }
                        };
                        for (i, e) in vec17.into_iter().enumerate() {
                            let base = result17.add(i * 16);
                            {
                                match e {
                                    DbValue::Boolean(e) => {
                                        *base.add(0).cast::<u8>() = (0i32) as u8;
                                        *base.add(8).cast::<u8>() = (match e {
                                            true => 1,
                                            false => 0,
                                        })
                                            as u8;
                                    }
                                    DbValue::Tinyint(e) => {
                                        *base.add(0).cast::<u8>() = (1i32) as u8;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                    }
                                    DbValue::Smallint(e) => {
                                        *base.add(0).cast::<u8>() = (2i32) as u8;
                                        *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                    }
                                    DbValue::Mediumint(e) => {
                                        *base.add(0).cast::<u8>() = (3i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::Int(e) => {
                                        *base.add(0).cast::<u8>() = (4i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::Bigint(e) => {
                                        *base.add(0).cast::<u8>() = (5i32) as u8;
                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    DbValue::TinyUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (6i32) as u8;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                    }
                                    DbValue::SmallUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (7i32) as u8;
                                        *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                    }
                                    DbValue::MediumUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (8i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::Unsigned(e) => {
                                        *base.add(0).cast::<u8>() = (9i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::BigUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (10i32) as u8;
                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    DbValue::Float(e) => {
                                        *base.add(0).cast::<u8>() = (11i32) as u8;
                                        *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                    }
                                    DbValue::Double(e) => {
                                        *base.add(0).cast::<u8>() = (12i32) as u8;
                                        *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                    }
                                    DbValue::Decimal(e) => {
                                        *base.add(0).cast::<u8>() = (13i32) as u8;
                                        let vec1 = e;
                                        let ptr1 = vec1.as_ptr().cast::<u8>();
                                        let len1 = vec1.len();
                                        *base.add(12).cast::<usize>() = len1;
                                        *base.add(8).cast::<*mut u8>() = ptr1.cast_mut();
                                    }
                                    DbValue::Date(e) => {
                                        *base.add(0).cast::<u8>() = (14i32) as u8;
                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    DbValue::Datetime(e) => {
                                        *base.add(0).cast::<u8>() = (15i32) as u8;
                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    DbValue::Timestamp(e) => {
                                        *base.add(0).cast::<u8>() = (16i32) as u8;
                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    DbValue::Time(e) => {
                                        *base.add(0).cast::<u8>() = (17i32) as u8;
                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    DbValue::Year(e) => {
                                        *base.add(0).cast::<u8>() = (18i32) as u8;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                    }
                                    DbValue::Fixchar(e) => {
                                        *base.add(0).cast::<u8>() = (19i32) as u8;
                                        let vec2 = e;
                                        let ptr2 = vec2.as_ptr().cast::<u8>();
                                        let len2 = vec2.len();
                                        *base.add(12).cast::<usize>() = len2;
                                        *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                    }
                                    DbValue::Varchar(e) => {
                                        *base.add(0).cast::<u8>() = (20i32) as u8;
                                        let vec3 = e;
                                        let ptr3 = vec3.as_ptr().cast::<u8>();
                                        let len3 = vec3.len();
                                        *base.add(12).cast::<usize>() = len3;
                                        *base.add(8).cast::<*mut u8>() = ptr3.cast_mut();
                                    }
                                    DbValue::Tinytext(e) => {
                                        *base.add(0).cast::<u8>() = (21i32) as u8;
                                        let vec4 = e;
                                        let ptr4 = vec4.as_ptr().cast::<u8>();
                                        let len4 = vec4.len();
                                        *base.add(12).cast::<usize>() = len4;
                                        *base.add(8).cast::<*mut u8>() = ptr4.cast_mut();
                                    }
                                    DbValue::Text(e) => {
                                        *base.add(0).cast::<u8>() = (22i32) as u8;
                                        let vec5 = e;
                                        let ptr5 = vec5.as_ptr().cast::<u8>();
                                        let len5 = vec5.len();
                                        *base.add(12).cast::<usize>() = len5;
                                        *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                    }
                                    DbValue::Mediumtext(e) => {
                                        *base.add(0).cast::<u8>() = (23i32) as u8;
                                        let vec6 = e;
                                        let ptr6 = vec6.as_ptr().cast::<u8>();
                                        let len6 = vec6.len();
                                        *base.add(12).cast::<usize>() = len6;
                                        *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                    }
                                    DbValue::Longtext(e) => {
                                        *base.add(0).cast::<u8>() = (24i32) as u8;
                                        let vec7 = e;
                                        let ptr7 = vec7.as_ptr().cast::<u8>();
                                        let len7 = vec7.len();
                                        *base.add(12).cast::<usize>() = len7;
                                        *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                    }
                                    DbValue::Binary(e) => {
                                        *base.add(0).cast::<u8>() = (25i32) as u8;
                                        let vec8 = e;
                                        let ptr8 = vec8.as_ptr().cast::<u8>();
                                        let len8 = vec8.len();
                                        *base.add(12).cast::<usize>() = len8;
                                        *base.add(8).cast::<*mut u8>() = ptr8.cast_mut();
                                    }
                                    DbValue::Varbinary(e) => {
                                        *base.add(0).cast::<u8>() = (26i32) as u8;
                                        let vec9 = e;
                                        let ptr9 = vec9.as_ptr().cast::<u8>();
                                        let len9 = vec9.len();
                                        *base.add(12).cast::<usize>() = len9;
                                        *base.add(8).cast::<*mut u8>() = ptr9.cast_mut();
                                    }
                                    DbValue::Tinyblob(e) => {
                                        *base.add(0).cast::<u8>() = (27i32) as u8;
                                        let vec10 = e;
                                        let ptr10 = vec10.as_ptr().cast::<u8>();
                                        let len10 = vec10.len();
                                        *base.add(12).cast::<usize>() = len10;
                                        *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                    }
                                    DbValue::Blob(e) => {
                                        *base.add(0).cast::<u8>() = (28i32) as u8;
                                        let vec11 = e;
                                        let ptr11 = vec11.as_ptr().cast::<u8>();
                                        let len11 = vec11.len();
                                        *base.add(12).cast::<usize>() = len11;
                                        *base.add(8).cast::<*mut u8>() = ptr11.cast_mut();
                                    }
                                    DbValue::Mediumblob(e) => {
                                        *base.add(0).cast::<u8>() = (29i32) as u8;
                                        let vec12 = e;
                                        let ptr12 = vec12.as_ptr().cast::<u8>();
                                        let len12 = vec12.len();
                                        *base.add(12).cast::<usize>() = len12;
                                        *base.add(8).cast::<*mut u8>() = ptr12.cast_mut();
                                    }
                                    DbValue::Longblob(e) => {
                                        *base.add(0).cast::<u8>() = (30i32) as u8;
                                        let vec13 = e;
                                        let ptr13 = vec13.as_ptr().cast::<u8>();
                                        let len13 = vec13.len();
                                        *base.add(12).cast::<usize>() = len13;
                                        *base.add(8).cast::<*mut u8>() = ptr13.cast_mut();
                                    }
                                    DbValue::Enumeration(e) => {
                                        *base.add(0).cast::<u8>() = (31i32) as u8;
                                        let vec14 = e;
                                        let ptr14 = vec14.as_ptr().cast::<u8>();
                                        let len14 = vec14.len();
                                        *base.add(12).cast::<usize>() = len14;
                                        *base.add(8).cast::<*mut u8>() = ptr14.cast_mut();
                                    }
                                    DbValue::Set(e) => {
                                        *base.add(0).cast::<u8>() = (32i32) as u8;
                                        let vec15 = e;
                                        let ptr15 = vec15.as_ptr().cast::<u8>();
                                        let len15 = vec15.len();
                                        *base.add(12).cast::<usize>() = len15;
                                        *base.add(8).cast::<*mut u8>() = ptr15.cast_mut();
                                    }
                                    DbValue::Bit(e) => {
                                        *base.add(0).cast::<u8>() = (33i32) as u8;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                    }
                                    DbValue::Json(e) => {
                                        *base.add(0).cast::<u8>() = (34i32) as u8;
                                        let vec16 = e;
                                        let ptr16 = vec16.as_ptr().cast::<u8>();
                                        let len16 = vec16.len();
                                        *base.add(12).cast::<usize>() = len16;
                                        *base.add(8).cast::<*mut u8>() = ptr16.cast_mut();
                                    }
                                    DbValue::Null => {
                                        *base.add(0).cast::<u8>() = (35i32) as u8;
                                    }
                                }
                            }
                        }
                        let ptr18 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:rdbms/mysql@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]db-connection.query"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            result17,
                            len17,
                            ptr18,
                        );
                        let l19 = i32::from(*ptr18.add(0).cast::<u8>());
                        if layout17.size() != 0 {
                            _rt::alloc::dealloc(result17.cast(), layout17);
                        }
                        match l19 {
                            0 => {
                                let e = {
                                    let l20 = *ptr18.add(4).cast::<i32>();

                                    DbResultSet::from_handle(l20 as u32)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l21 = i32::from(*ptr18.add(4).cast::<u8>());
                                    let v37 = match l21 {
                                        0 => {
                                            let e37 = {
                                                let l22 = *ptr18.add(8).cast::<*mut u8>();
                                                let l23 = *ptr18.add(12).cast::<usize>();
                                                let len24 = l23;
                                                let bytes24 = _rt::Vec::from_raw_parts(
                                                    l22.cast(),
                                                    len24,
                                                    len24,
                                                );

                                                _rt::string_lift(bytes24)
                                            };
                                            Error::ConnectionFailure(e37)
                                        }
                                        1 => {
                                            let e37 = {
                                                let l25 = *ptr18.add(8).cast::<*mut u8>();
                                                let l26 = *ptr18.add(12).cast::<usize>();
                                                let len27 = l26;
                                                let bytes27 = _rt::Vec::from_raw_parts(
                                                    l25.cast(),
                                                    len27,
                                                    len27,
                                                );

                                                _rt::string_lift(bytes27)
                                            };
                                            Error::QueryParameterFailure(e37)
                                        }
                                        2 => {
                                            let e37 = {
                                                let l28 = *ptr18.add(8).cast::<*mut u8>();
                                                let l29 = *ptr18.add(12).cast::<usize>();
                                                let len30 = l29;
                                                let bytes30 = _rt::Vec::from_raw_parts(
                                                    l28.cast(),
                                                    len30,
                                                    len30,
                                                );

                                                _rt::string_lift(bytes30)
                                            };
                                            Error::QueryExecutionFailure(e37)
                                        }
                                        3 => {
                                            let e37 = {
                                                let l31 = *ptr18.add(8).cast::<*mut u8>();
                                                let l32 = *ptr18.add(12).cast::<usize>();
                                                let len33 = l32;
                                                let bytes33 = _rt::Vec::from_raw_parts(
                                                    l31.cast(),
                                                    len33,
                                                    len33,
                                                );

                                                _rt::string_lift(bytes33)
                                            };
                                            Error::QueryResponseFailure(e37)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 4, "invalid enum discriminant");
                                            let e37 = {
                                                let l34 = *ptr18.add(8).cast::<*mut u8>();
                                                let l35 = *ptr18.add(12).cast::<usize>();
                                                let len36 = l35;
                                                let bytes36 = _rt::Vec::from_raw_parts(
                                                    l34.cast(),
                                                    len36,
                                                    len36,
                                                );

                                                _rt::string_lift(bytes36)
                                            };
                                            Error::Other(e37)
                                        }
                                    };

                                    v37
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl DbConnection {
                #[allow(unused_unsafe, clippy::all)]
                pub fn execute(&self, statement: &str, params: &[DbValue]) -> Result<u64, Error> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 24]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 24]);
                        let vec0 = statement;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec17 = params;
                        let len17 = vec17.len();
                        let layout17 =
                            _rt::alloc::Layout::from_size_align_unchecked(vec17.len() * 16, 8);
                        let result17 = if layout17.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout17).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout17);
                            }
                            ptr
                        } else {
                            {
                                ::core::ptr::null_mut()
                            }
                        };
                        for (i, e) in vec17.into_iter().enumerate() {
                            let base = result17.add(i * 16);
                            {
                                match e {
                                    DbValue::Boolean(e) => {
                                        *base.add(0).cast::<u8>() = (0i32) as u8;
                                        *base.add(8).cast::<u8>() = (match e {
                                            true => 1,
                                            false => 0,
                                        })
                                            as u8;
                                    }
                                    DbValue::Tinyint(e) => {
                                        *base.add(0).cast::<u8>() = (1i32) as u8;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                    }
                                    DbValue::Smallint(e) => {
                                        *base.add(0).cast::<u8>() = (2i32) as u8;
                                        *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                    }
                                    DbValue::Mediumint(e) => {
                                        *base.add(0).cast::<u8>() = (3i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::Int(e) => {
                                        *base.add(0).cast::<u8>() = (4i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::Bigint(e) => {
                                        *base.add(0).cast::<u8>() = (5i32) as u8;
                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    DbValue::TinyUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (6i32) as u8;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                    }
                                    DbValue::SmallUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (7i32) as u8;
                                        *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                    }
                                    DbValue::MediumUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (8i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::Unsigned(e) => {
                                        *base.add(0).cast::<u8>() = (9i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::BigUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (10i32) as u8;
                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    DbValue::Float(e) => {
                                        *base.add(0).cast::<u8>() = (11i32) as u8;
                                        *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                    }
                                    DbValue::Double(e) => {
                                        *base.add(0).cast::<u8>() = (12i32) as u8;
                                        *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                    }
                                    DbValue::Decimal(e) => {
                                        *base.add(0).cast::<u8>() = (13i32) as u8;
                                        let vec1 = e;
                                        let ptr1 = vec1.as_ptr().cast::<u8>();
                                        let len1 = vec1.len();
                                        *base.add(12).cast::<usize>() = len1;
                                        *base.add(8).cast::<*mut u8>() = ptr1.cast_mut();
                                    }
                                    DbValue::Date(e) => {
                                        *base.add(0).cast::<u8>() = (14i32) as u8;
                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    DbValue::Datetime(e) => {
                                        *base.add(0).cast::<u8>() = (15i32) as u8;
                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    DbValue::Timestamp(e) => {
                                        *base.add(0).cast::<u8>() = (16i32) as u8;
                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    DbValue::Time(e) => {
                                        *base.add(0).cast::<u8>() = (17i32) as u8;
                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    DbValue::Year(e) => {
                                        *base.add(0).cast::<u8>() = (18i32) as u8;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                    }
                                    DbValue::Fixchar(e) => {
                                        *base.add(0).cast::<u8>() = (19i32) as u8;
                                        let vec2 = e;
                                        let ptr2 = vec2.as_ptr().cast::<u8>();
                                        let len2 = vec2.len();
                                        *base.add(12).cast::<usize>() = len2;
                                        *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                    }
                                    DbValue::Varchar(e) => {
                                        *base.add(0).cast::<u8>() = (20i32) as u8;
                                        let vec3 = e;
                                        let ptr3 = vec3.as_ptr().cast::<u8>();
                                        let len3 = vec3.len();
                                        *base.add(12).cast::<usize>() = len3;
                                        *base.add(8).cast::<*mut u8>() = ptr3.cast_mut();
                                    }
                                    DbValue::Tinytext(e) => {
                                        *base.add(0).cast::<u8>() = (21i32) as u8;
                                        let vec4 = e;
                                        let ptr4 = vec4.as_ptr().cast::<u8>();
                                        let len4 = vec4.len();
                                        *base.add(12).cast::<usize>() = len4;
                                        *base.add(8).cast::<*mut u8>() = ptr4.cast_mut();
                                    }
                                    DbValue::Text(e) => {
                                        *base.add(0).cast::<u8>() = (22i32) as u8;
                                        let vec5 = e;
                                        let ptr5 = vec5.as_ptr().cast::<u8>();
                                        let len5 = vec5.len();
                                        *base.add(12).cast::<usize>() = len5;
                                        *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                    }
                                    DbValue::Mediumtext(e) => {
                                        *base.add(0).cast::<u8>() = (23i32) as u8;
                                        let vec6 = e;
                                        let ptr6 = vec6.as_ptr().cast::<u8>();
                                        let len6 = vec6.len();
                                        *base.add(12).cast::<usize>() = len6;
                                        *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                    }
                                    DbValue::Longtext(e) => {
                                        *base.add(0).cast::<u8>() = (24i32) as u8;
                                        let vec7 = e;
                                        let ptr7 = vec7.as_ptr().cast::<u8>();
                                        let len7 = vec7.len();
                                        *base.add(12).cast::<usize>() = len7;
                                        *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                    }
                                    DbValue::Binary(e) => {
                                        *base.add(0).cast::<u8>() = (25i32) as u8;
                                        let vec8 = e;
                                        let ptr8 = vec8.as_ptr().cast::<u8>();
                                        let len8 = vec8.len();
                                        *base.add(12).cast::<usize>() = len8;
                                        *base.add(8).cast::<*mut u8>() = ptr8.cast_mut();
                                    }
                                    DbValue::Varbinary(e) => {
                                        *base.add(0).cast::<u8>() = (26i32) as u8;
                                        let vec9 = e;
                                        let ptr9 = vec9.as_ptr().cast::<u8>();
                                        let len9 = vec9.len();
                                        *base.add(12).cast::<usize>() = len9;
                                        *base.add(8).cast::<*mut u8>() = ptr9.cast_mut();
                                    }
                                    DbValue::Tinyblob(e) => {
                                        *base.add(0).cast::<u8>() = (27i32) as u8;
                                        let vec10 = e;
                                        let ptr10 = vec10.as_ptr().cast::<u8>();
                                        let len10 = vec10.len();
                                        *base.add(12).cast::<usize>() = len10;
                                        *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                    }
                                    DbValue::Blob(e) => {
                                        *base.add(0).cast::<u8>() = (28i32) as u8;
                                        let vec11 = e;
                                        let ptr11 = vec11.as_ptr().cast::<u8>();
                                        let len11 = vec11.len();
                                        *base.add(12).cast::<usize>() = len11;
                                        *base.add(8).cast::<*mut u8>() = ptr11.cast_mut();
                                    }
                                    DbValue::Mediumblob(e) => {
                                        *base.add(0).cast::<u8>() = (29i32) as u8;
                                        let vec12 = e;
                                        let ptr12 = vec12.as_ptr().cast::<u8>();
                                        let len12 = vec12.len();
                                        *base.add(12).cast::<usize>() = len12;
                                        *base.add(8).cast::<*mut u8>() = ptr12.cast_mut();
                                    }
                                    DbValue::Longblob(e) => {
                                        *base.add(0).cast::<u8>() = (30i32) as u8;
                                        let vec13 = e;
                                        let ptr13 = vec13.as_ptr().cast::<u8>();
                                        let len13 = vec13.len();
                                        *base.add(12).cast::<usize>() = len13;
                                        *base.add(8).cast::<*mut u8>() = ptr13.cast_mut();
                                    }
                                    DbValue::Enumeration(e) => {
                                        *base.add(0).cast::<u8>() = (31i32) as u8;
                                        let vec14 = e;
                                        let ptr14 = vec14.as_ptr().cast::<u8>();
                                        let len14 = vec14.len();
                                        *base.add(12).cast::<usize>() = len14;
                                        *base.add(8).cast::<*mut u8>() = ptr14.cast_mut();
                                    }
                                    DbValue::Set(e) => {
                                        *base.add(0).cast::<u8>() = (32i32) as u8;
                                        let vec15 = e;
                                        let ptr15 = vec15.as_ptr().cast::<u8>();
                                        let len15 = vec15.len();
                                        *base.add(12).cast::<usize>() = len15;
                                        *base.add(8).cast::<*mut u8>() = ptr15.cast_mut();
                                    }
                                    DbValue::Bit(e) => {
                                        *base.add(0).cast::<u8>() = (33i32) as u8;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                    }
                                    DbValue::Json(e) => {
                                        *base.add(0).cast::<u8>() = (34i32) as u8;
                                        let vec16 = e;
                                        let ptr16 = vec16.as_ptr().cast::<u8>();
                                        let len16 = vec16.len();
                                        *base.add(12).cast::<usize>() = len16;
                                        *base.add(8).cast::<*mut u8>() = ptr16.cast_mut();
                                    }
                                    DbValue::Null => {
                                        *base.add(0).cast::<u8>() = (35i32) as u8;
                                    }
                                }
                            }
                        }
                        let ptr18 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:rdbms/mysql@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]db-connection.execute"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            result17,
                            len17,
                            ptr18,
                        );
                        let l19 = i32::from(*ptr18.add(0).cast::<u8>());
                        if layout17.size() != 0 {
                            _rt::alloc::dealloc(result17.cast(), layout17);
                        }
                        match l19 {
                            0 => {
                                let e = {
                                    let l20 = *ptr18.add(8).cast::<i64>();

                                    l20 as u64
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l21 = i32::from(*ptr18.add(8).cast::<u8>());
                                    let v37 = match l21 {
                                        0 => {
                                            let e37 = {
                                                let l22 = *ptr18.add(12).cast::<*mut u8>();
                                                let l23 = *ptr18.add(16).cast::<usize>();
                                                let len24 = l23;
                                                let bytes24 = _rt::Vec::from_raw_parts(
                                                    l22.cast(),
                                                    len24,
                                                    len24,
                                                );

                                                _rt::string_lift(bytes24)
                                            };
                                            Error::ConnectionFailure(e37)
                                        }
                                        1 => {
                                            let e37 = {
                                                let l25 = *ptr18.add(12).cast::<*mut u8>();
                                                let l26 = *ptr18.add(16).cast::<usize>();
                                                let len27 = l26;
                                                let bytes27 = _rt::Vec::from_raw_parts(
                                                    l25.cast(),
                                                    len27,
                                                    len27,
                                                );

                                                _rt::string_lift(bytes27)
                                            };
                                            Error::QueryParameterFailure(e37)
                                        }
                                        2 => {
                                            let e37 = {
                                                let l28 = *ptr18.add(12).cast::<*mut u8>();
                                                let l29 = *ptr18.add(16).cast::<usize>();
                                                let len30 = l29;
                                                let bytes30 = _rt::Vec::from_raw_parts(
                                                    l28.cast(),
                                                    len30,
                                                    len30,
                                                );

                                                _rt::string_lift(bytes30)
                                            };
                                            Error::QueryExecutionFailure(e37)
                                        }
                                        3 => {
                                            let e37 = {
                                                let l31 = *ptr18.add(12).cast::<*mut u8>();
                                                let l32 = *ptr18.add(16).cast::<usize>();
                                                let len33 = l32;
                                                let bytes33 = _rt::Vec::from_raw_parts(
                                                    l31.cast(),
                                                    len33,
                                                    len33,
                                                );

                                                _rt::string_lift(bytes33)
                                            };
                                            Error::QueryResponseFailure(e37)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 4, "invalid enum discriminant");
                                            let e37 = {
                                                let l34 = *ptr18.add(12).cast::<*mut u8>();
                                                let l35 = *ptr18.add(16).cast::<usize>();
                                                let len36 = l35;
                                                let bytes36 = _rt::Vec::from_raw_parts(
                                                    l34.cast(),
                                                    len36,
                                                    len36,
                                                );

                                                _rt::string_lift(bytes36)
                                            };
                                            Error::Other(e37)
                                        }
                                    };

                                    v37
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
        }
    }
}
#[allow(dead_code)]
pub mod exports {
    #[allow(dead_code)]
    pub mod golem {
        #[allow(dead_code)]
        pub mod it {
            #[allow(dead_code, clippy::all)]
            pub mod api {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type PostgresDbRow = super::super::super::super::wasi::rdbms::postgres::DbRow;
                pub type PostgresDbColumn =
                    super::super::super::super::wasi::rdbms::postgres::DbColumn;
                pub type MysqlDbRow = super::super::super::super::wasi::rdbms::mysql::DbRow;
                pub type MysqlDbColumn = super::super::super::super::wasi::rdbms::mysql::DbColumn;
                #[derive(Clone)]
                pub struct PostgresQueryResult {
                    pub columns: _rt::Vec<PostgresDbColumn>,
                    pub rows: _rt::Vec<PostgresDbRow>,
                }
                impl ::core::fmt::Debug for PostgresQueryResult {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("PostgresQueryResult")
                            .field("columns", &self.columns)
                            .field("rows", &self.rows)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub struct MysqlQueryResult {
                    pub columns: _rt::Vec<MysqlDbColumn>,
                    pub rows: _rt::Vec<MysqlDbRow>,
                }
                impl ::core::fmt::Debug for MysqlQueryResult {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("MysqlQueryResult")
                            .field("columns", &self.columns)
                            .field("rows", &self.rows)
                            .finish()
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_check_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::check();
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let vec2 = (result0.into_bytes()).into_boxed_slice();
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    ::core::mem::forget(vec2);
                    *ptr1.add(4).cast::<usize>() = len2;
                    *ptr1.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_check<T: Guest>(arg0: *mut u8) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0.add(4).cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_mysql_execute_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let base4 = arg2;
                    let len4 = arg3;
                    let mut result4 = _rt::Vec::with_capacity(len4);
                    for i in 0..len4 {
                        let base = base4.add(i * 8);
                        let e4 = {
                            let l1 = *base.add(0).cast::<*mut u8>();
                            let l2 = *base.add(4).cast::<usize>();
                            let len3 = l2;
                            let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);

                            _rt::string_lift(bytes3)
                        };
                        result4.push(e4);
                    }
                    _rt::cabi_dealloc(base4, len4 * 8, 4);
                    let result5 = T::mysql_execute(_rt::string_lift(bytes0), result4);
                    let ptr6 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result5 {
                        Ok(e) => {
                            *ptr6.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr6.add(8).cast::<i64>() = _rt::as_i64(e);
                        }
                        Err(e) => {
                            *ptr6.add(0).cast::<u8>() = (1i32) as u8;
                            let vec7 = (e.into_bytes()).into_boxed_slice();
                            let ptr7 = vec7.as_ptr().cast::<u8>();
                            let len7 = vec7.len();
                            ::core::mem::forget(vec7);
                            *ptr6.add(12).cast::<usize>() = len7;
                            *ptr6.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                        }
                    };
                    ptr6
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_mysql_execute<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = *arg0.add(8).cast::<*mut u8>();
                            let l2 = *arg0.add(12).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_mysql_query_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let base4 = arg2;
                    let len4 = arg3;
                    let mut result4 = _rt::Vec::with_capacity(len4);
                    for i in 0..len4 {
                        let base = base4.add(i * 8);
                        let e4 = {
                            let l1 = *base.add(0).cast::<*mut u8>();
                            let l2 = *base.add(4).cast::<usize>();
                            let len3 = l2;
                            let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);

                            _rt::string_lift(bytes3)
                        };
                        result4.push(e4);
                    }
                    _rt::cabi_dealloc(base4, len4 * 8, 4);
                    let result5 = T::mysql_query(_rt::string_lift(bytes0), result4);
                    let ptr6 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result5 {
                        Ok(e) => {
                            *ptr6.add(0).cast::<u8>() = (0i32) as u8;
                            let MysqlQueryResult {
                                columns: columns7,
                                rows: rows7,
                            } = e;
                            let vec12 = columns7;
                            let len12 = vec12.len();
                            let layout12 =
                                _rt::alloc::Layout::from_size_align_unchecked(vec12.len() * 32, 8);
                            let result12 = if layout12.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout12);
                                }
                                ptr
                            } else {
                                {
                                    ::core::ptr::null_mut()
                                }
                            };
                            for (i, e) in vec12.into_iter().enumerate() {
                                let base = result12.add(i * 32);
                                {
                                    let super::super::super::super::wasi::rdbms::mysql::DbColumn {
                                        ordinal: ordinal8,
                                        name: name8,
                                        db_type: db_type8,
                                        db_type_name: db_type_name8,
                                    } = e;
                                    *base.add(0).cast::<i64>() = _rt::as_i64(ordinal8);
                                    let vec9 = (name8.into_bytes()).into_boxed_slice();
                                    let ptr9 = vec9.as_ptr().cast::<u8>();
                                    let len9 = vec9.len();
                                    ::core::mem::forget(vec9);
                                    *base.add(12).cast::<usize>() = len9;
                                    *base.add(8).cast::<*mut u8>() = ptr9.cast_mut();
                                    use super::super::super::super::wasi::rdbms::mysql::DbColumnType as V10;
                                    match db_type8 {
                                        V10::Boolean => {
                                            *base.add(16).cast::<u8>() = (0i32) as u8;
                                        }
                                        V10::Tinyint => {
                                            *base.add(16).cast::<u8>() = (1i32) as u8;
                                        }
                                        V10::Smallint => {
                                            *base.add(16).cast::<u8>() = (2i32) as u8;
                                        }
                                        V10::Mediumint => {
                                            *base.add(16).cast::<u8>() = (3i32) as u8;
                                        }
                                        V10::Int => {
                                            *base.add(16).cast::<u8>() = (4i32) as u8;
                                        }
                                        V10::Bigint => {
                                            *base.add(16).cast::<u8>() = (5i32) as u8;
                                        }
                                        V10::TinyUnsigned => {
                                            *base.add(16).cast::<u8>() = (6i32) as u8;
                                        }
                                        V10::SmallUnsigned => {
                                            *base.add(16).cast::<u8>() = (7i32) as u8;
                                        }
                                        V10::MediumUnsigned => {
                                            *base.add(16).cast::<u8>() = (8i32) as u8;
                                        }
                                        V10::Unsigned => {
                                            *base.add(16).cast::<u8>() = (9i32) as u8;
                                        }
                                        V10::BigUnsigned => {
                                            *base.add(16).cast::<u8>() = (10i32) as u8;
                                        }
                                        V10::Float => {
                                            *base.add(16).cast::<u8>() = (11i32) as u8;
                                        }
                                        V10::Double => {
                                            *base.add(16).cast::<u8>() = (12i32) as u8;
                                        }
                                        V10::Decimal => {
                                            *base.add(16).cast::<u8>() = (13i32) as u8;
                                        }
                                        V10::Date => {
                                            *base.add(16).cast::<u8>() = (14i32) as u8;
                                        }
                                        V10::Datetime => {
                                            *base.add(16).cast::<u8>() = (15i32) as u8;
                                        }
                                        V10::Timestamp => {
                                            *base.add(16).cast::<u8>() = (16i32) as u8;
                                        }
                                        V10::Time => {
                                            *base.add(16).cast::<u8>() = (17i32) as u8;
                                        }
                                        V10::Year => {
                                            *base.add(16).cast::<u8>() = (18i32) as u8;
                                        }
                                        V10::Fixchar => {
                                            *base.add(16).cast::<u8>() = (19i32) as u8;
                                        }
                                        V10::Varchar => {
                                            *base.add(16).cast::<u8>() = (20i32) as u8;
                                        }
                                        V10::Tinytext => {
                                            *base.add(16).cast::<u8>() = (21i32) as u8;
                                        }
                                        V10::Text => {
                                            *base.add(16).cast::<u8>() = (22i32) as u8;
                                        }
                                        V10::Mediumtext => {
                                            *base.add(16).cast::<u8>() = (23i32) as u8;
                                        }
                                        V10::Longtext => {
                                            *base.add(16).cast::<u8>() = (24i32) as u8;
                                        }
                                        V10::Binary => {
                                            *base.add(16).cast::<u8>() = (25i32) as u8;
                                        }
                                        V10::Varbinary => {
                                            *base.add(16).cast::<u8>() = (26i32) as u8;
                                        }
                                        V10::Tinyblob => {
                                            *base.add(16).cast::<u8>() = (27i32) as u8;
                                        }
                                        V10::Blob => {
                                            *base.add(16).cast::<u8>() = (28i32) as u8;
                                        }
                                        V10::Mediumblob => {
                                            *base.add(16).cast::<u8>() = (29i32) as u8;
                                        }
                                        V10::Longblob => {
                                            *base.add(16).cast::<u8>() = (30i32) as u8;
                                        }
                                        V10::Enumeration => {
                                            *base.add(16).cast::<u8>() = (31i32) as u8;
                                        }
                                        V10::Set => {
                                            *base.add(16).cast::<u8>() = (32i32) as u8;
                                        }
                                        V10::Bit => {
                                            *base.add(16).cast::<u8>() = (33i32) as u8;
                                        }
                                        V10::Json => {
                                            *base.add(16).cast::<u8>() = (34i32) as u8;
                                        }
                                    }
                                    let vec11 = (db_type_name8.into_bytes()).into_boxed_slice();
                                    let ptr11 = vec11.as_ptr().cast::<u8>();
                                    let len11 = vec11.len();
                                    ::core::mem::forget(vec11);
                                    *base.add(24).cast::<usize>() = len11;
                                    *base.add(20).cast::<*mut u8>() = ptr11.cast_mut();
                                }
                            }
                            *ptr6.add(8).cast::<usize>() = len12;
                            *ptr6.add(4).cast::<*mut u8>() = result12;
                            let vec32 = rows7;
                            let len32 = vec32.len();
                            let layout32 =
                                _rt::alloc::Layout::from_size_align_unchecked(vec32.len() * 8, 4);
                            let result32 = if layout32.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout32).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout32);
                                }
                                ptr
                            } else {
                                {
                                    ::core::ptr::null_mut()
                                }
                            };
                            for (i, e) in vec32.into_iter().enumerate() {
                                let base = result32.add(i * 8);
                                {
                                    let super::super::super::super::wasi::rdbms::mysql::DbRow {
                                        values: values13,
                                    } = e;
                                    let vec31 = values13;
                                    let len31 = vec31.len();
                                    let layout31 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec31.len() * 16,
                                        8,
                                    );
                                    let result31 = if layout31.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout31).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout31);
                                        }
                                        ptr
                                    } else {
                                        {
                                            ::core::ptr::null_mut()
                                        }
                                    };
                                    for (i, e) in vec31.into_iter().enumerate() {
                                        let base = result31.add(i * 16);
                                        {
                                            use super::super::super::super::wasi::rdbms::mysql::DbValue as V30;
                                            match e {
                                                V30::Boolean(e) => {
                                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                                    *base.add(8).cast::<u8>() = (match e {
                                                        true => 1,
                                                        false => 0,
                                                    })
                                                        as u8;
                                                }
                                                V30::Tinyint(e) => {
                                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                                    *base.add(8).cast::<u8>() =
                                                        (_rt::as_i32(e)) as u8;
                                                }
                                                V30::Smallint(e) => {
                                                    *base.add(0).cast::<u8>() = (2i32) as u8;
                                                    *base.add(8).cast::<u16>() =
                                                        (_rt::as_i32(e)) as u16;
                                                }
                                                V30::Mediumint(e) => {
                                                    *base.add(0).cast::<u8>() = (3i32) as u8;
                                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                }
                                                V30::Int(e) => {
                                                    *base.add(0).cast::<u8>() = (4i32) as u8;
                                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                }
                                                V30::Bigint(e) => {
                                                    *base.add(0).cast::<u8>() = (5i32) as u8;
                                                    *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                }
                                                V30::TinyUnsigned(e) => {
                                                    *base.add(0).cast::<u8>() = (6i32) as u8;
                                                    *base.add(8).cast::<u8>() =
                                                        (_rt::as_i32(e)) as u8;
                                                }
                                                V30::SmallUnsigned(e) => {
                                                    *base.add(0).cast::<u8>() = (7i32) as u8;
                                                    *base.add(8).cast::<u16>() =
                                                        (_rt::as_i32(e)) as u16;
                                                }
                                                V30::MediumUnsigned(e) => {
                                                    *base.add(0).cast::<u8>() = (8i32) as u8;
                                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                }
                                                V30::Unsigned(e) => {
                                                    *base.add(0).cast::<u8>() = (9i32) as u8;
                                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                }
                                                V30::BigUnsigned(e) => {
                                                    *base.add(0).cast::<u8>() = (10i32) as u8;
                                                    *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                }
                                                V30::Float(e) => {
                                                    *base.add(0).cast::<u8>() = (11i32) as u8;
                                                    *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                                }
                                                V30::Double(e) => {
                                                    *base.add(0).cast::<u8>() = (12i32) as u8;
                                                    *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                                }
                                                V30::Decimal(e) => {
                                                    *base.add(0).cast::<u8>() = (13i32) as u8;
                                                    let vec14 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr14 = vec14.as_ptr().cast::<u8>();
                                                    let len14 = vec14.len();
                                                    ::core::mem::forget(vec14);
                                                    *base.add(12).cast::<usize>() = len14;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr14.cast_mut();
                                                }
                                                V30::Date(e) => {
                                                    *base.add(0).cast::<u8>() = (14i32) as u8;
                                                    *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                }
                                                V30::Datetime(e) => {
                                                    *base.add(0).cast::<u8>() = (15i32) as u8;
                                                    *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                }
                                                V30::Timestamp(e) => {
                                                    *base.add(0).cast::<u8>() = (16i32) as u8;
                                                    *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                }
                                                V30::Time(e) => {
                                                    *base.add(0).cast::<u8>() = (17i32) as u8;
                                                    *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                }
                                                V30::Year(e) => {
                                                    *base.add(0).cast::<u8>() = (18i32) as u8;
                                                    *base.add(8).cast::<u8>() =
                                                        (_rt::as_i32(e)) as u8;
                                                }
                                                V30::Fixchar(e) => {
                                                    *base.add(0).cast::<u8>() = (19i32) as u8;
                                                    let vec15 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr15 = vec15.as_ptr().cast::<u8>();
                                                    let len15 = vec15.len();
                                                    ::core::mem::forget(vec15);
                                                    *base.add(12).cast::<usize>() = len15;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr15.cast_mut();
                                                }
                                                V30::Varchar(e) => {
                                                    *base.add(0).cast::<u8>() = (20i32) as u8;
                                                    let vec16 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr16 = vec16.as_ptr().cast::<u8>();
                                                    let len16 = vec16.len();
                                                    ::core::mem::forget(vec16);
                                                    *base.add(12).cast::<usize>() = len16;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr16.cast_mut();
                                                }
                                                V30::Tinytext(e) => {
                                                    *base.add(0).cast::<u8>() = (21i32) as u8;
                                                    let vec17 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr17 = vec17.as_ptr().cast::<u8>();
                                                    let len17 = vec17.len();
                                                    ::core::mem::forget(vec17);
                                                    *base.add(12).cast::<usize>() = len17;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr17.cast_mut();
                                                }
                                                V30::Text(e) => {
                                                    *base.add(0).cast::<u8>() = (22i32) as u8;
                                                    let vec18 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr18 = vec18.as_ptr().cast::<u8>();
                                                    let len18 = vec18.len();
                                                    ::core::mem::forget(vec18);
                                                    *base.add(12).cast::<usize>() = len18;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr18.cast_mut();
                                                }
                                                V30::Mediumtext(e) => {
                                                    *base.add(0).cast::<u8>() = (23i32) as u8;
                                                    let vec19 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr19 = vec19.as_ptr().cast::<u8>();
                                                    let len19 = vec19.len();
                                                    ::core::mem::forget(vec19);
                                                    *base.add(12).cast::<usize>() = len19;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr19.cast_mut();
                                                }
                                                V30::Longtext(e) => {
                                                    *base.add(0).cast::<u8>() = (24i32) as u8;
                                                    let vec20 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr20 = vec20.as_ptr().cast::<u8>();
                                                    let len20 = vec20.len();
                                                    ::core::mem::forget(vec20);
                                                    *base.add(12).cast::<usize>() = len20;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr20.cast_mut();
                                                }
                                                V30::Binary(e) => {
                                                    *base.add(0).cast::<u8>() = (25i32) as u8;
                                                    let vec21 = (e).into_boxed_slice();
                                                    let ptr21 = vec21.as_ptr().cast::<u8>();
                                                    let len21 = vec21.len();
                                                    ::core::mem::forget(vec21);
                                                    *base.add(12).cast::<usize>() = len21;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr21.cast_mut();
                                                }
                                                V30::Varbinary(e) => {
                                                    *base.add(0).cast::<u8>() = (26i32) as u8;
                                                    let vec22 = (e).into_boxed_slice();
                                                    let ptr22 = vec22.as_ptr().cast::<u8>();
                                                    let len22 = vec22.len();
                                                    ::core::mem::forget(vec22);
                                                    *base.add(12).cast::<usize>() = len22;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr22.cast_mut();
                                                }
                                                V30::Tinyblob(e) => {
                                                    *base.add(0).cast::<u8>() = (27i32) as u8;
                                                    let vec23 = (e).into_boxed_slice();
                                                    let ptr23 = vec23.as_ptr().cast::<u8>();
                                                    let len23 = vec23.len();
                                                    ::core::mem::forget(vec23);
                                                    *base.add(12).cast::<usize>() = len23;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr23.cast_mut();
                                                }
                                                V30::Blob(e) => {
                                                    *base.add(0).cast::<u8>() = (28i32) as u8;
                                                    let vec24 = (e).into_boxed_slice();
                                                    let ptr24 = vec24.as_ptr().cast::<u8>();
                                                    let len24 = vec24.len();
                                                    ::core::mem::forget(vec24);
                                                    *base.add(12).cast::<usize>() = len24;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr24.cast_mut();
                                                }
                                                V30::Mediumblob(e) => {
                                                    *base.add(0).cast::<u8>() = (29i32) as u8;
                                                    let vec25 = (e).into_boxed_slice();
                                                    let ptr25 = vec25.as_ptr().cast::<u8>();
                                                    let len25 = vec25.len();
                                                    ::core::mem::forget(vec25);
                                                    *base.add(12).cast::<usize>() = len25;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr25.cast_mut();
                                                }
                                                V30::Longblob(e) => {
                                                    *base.add(0).cast::<u8>() = (30i32) as u8;
                                                    let vec26 = (e).into_boxed_slice();
                                                    let ptr26 = vec26.as_ptr().cast::<u8>();
                                                    let len26 = vec26.len();
                                                    ::core::mem::forget(vec26);
                                                    *base.add(12).cast::<usize>() = len26;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr26.cast_mut();
                                                }
                                                V30::Enumeration(e) => {
                                                    *base.add(0).cast::<u8>() = (31i32) as u8;
                                                    let vec27 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr27 = vec27.as_ptr().cast::<u8>();
                                                    let len27 = vec27.len();
                                                    ::core::mem::forget(vec27);
                                                    *base.add(12).cast::<usize>() = len27;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr27.cast_mut();
                                                }
                                                V30::Set(e) => {
                                                    *base.add(0).cast::<u8>() = (32i32) as u8;
                                                    let vec28 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr28 = vec28.as_ptr().cast::<u8>();
                                                    let len28 = vec28.len();
                                                    ::core::mem::forget(vec28);
                                                    *base.add(12).cast::<usize>() = len28;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr28.cast_mut();
                                                }
                                                V30::Bit(e) => {
                                                    *base.add(0).cast::<u8>() = (33i32) as u8;
                                                    *base.add(8).cast::<u8>() =
                                                        (_rt::as_i32(e)) as u8;
                                                }
                                                V30::Json(e) => {
                                                    *base.add(0).cast::<u8>() = (34i32) as u8;
                                                    let vec29 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr29 = vec29.as_ptr().cast::<u8>();
                                                    let len29 = vec29.len();
                                                    ::core::mem::forget(vec29);
                                                    *base.add(12).cast::<usize>() = len29;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr29.cast_mut();
                                                }
                                                V30::Null => {
                                                    *base.add(0).cast::<u8>() = (35i32) as u8;
                                                }
                                            }
                                        }
                                    }
                                    *base.add(4).cast::<usize>() = len31;
                                    *base.add(0).cast::<*mut u8>() = result31;
                                }
                            }
                            *ptr6.add(16).cast::<usize>() = len32;
                            *ptr6.add(12).cast::<*mut u8>() = result32;
                        }
                        Err(e) => {
                            *ptr6.add(0).cast::<u8>() = (1i32) as u8;
                            let vec33 = (e.into_bytes()).into_boxed_slice();
                            let ptr33 = vec33.as_ptr().cast::<u8>();
                            let len33 = vec33.len();
                            ::core::mem::forget(vec33);
                            *ptr6.add(8).cast::<usize>() = len33;
                            *ptr6.add(4).cast::<*mut u8>() = ptr33.cast_mut();
                        }
                    };
                    ptr6
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_mysql_query<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l5 = *arg0.add(4).cast::<*mut u8>();
                            let l6 = *arg0.add(8).cast::<usize>();
                            let base7 = l5;
                            let len7 = l6;
                            for i in 0..len7 {
                                let base = base7.add(i * 32);
                                {
                                    let l1 = *base.add(8).cast::<*mut u8>();
                                    let l2 = *base.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l1, l2, 1);
                                    let l3 = *base.add(20).cast::<*mut u8>();
                                    let l4 = *base.add(24).cast::<usize>();
                                    _rt::cabi_dealloc(l3, l4, 1);
                                }
                            }
                            _rt::cabi_dealloc(base7, len7 * 32, 8);
                            let l50 = *arg0.add(12).cast::<*mut u8>();
                            let l51 = *arg0.add(16).cast::<usize>();
                            let base52 = l50;
                            let len52 = l51;
                            for i in 0..len52 {
                                let base = base52.add(i * 8);
                                {
                                    let l47 = *base.add(0).cast::<*mut u8>();
                                    let l48 = *base.add(4).cast::<usize>();
                                    let base49 = l47;
                                    let len49 = l48;
                                    for i in 0..len49 {
                                        let base = base49.add(i * 16);
                                        {
                                            let l8 = i32::from(*base.add(0).cast::<u8>());
                                            match l8 {
                                                0 => (),
                                                1 => (),
                                                2 => (),
                                                3 => (),
                                                4 => (),
                                                5 => (),
                                                6 => (),
                                                7 => (),
                                                8 => (),
                                                9 => (),
                                                10 => (),
                                                11 => (),
                                                12 => (),
                                                13 => {
                                                    let l9 = *base.add(8).cast::<*mut u8>();
                                                    let l10 = *base.add(12).cast::<usize>();
                                                    _rt::cabi_dealloc(l9, l10, 1);
                                                }
                                                14 => (),
                                                15 => (),
                                                16 => (),
                                                17 => (),
                                                18 => (),
                                                19 => {
                                                    let l11 = *base.add(8).cast::<*mut u8>();
                                                    let l12 = *base.add(12).cast::<usize>();
                                                    _rt::cabi_dealloc(l11, l12, 1);
                                                }
                                                20 => {
                                                    let l13 = *base.add(8).cast::<*mut u8>();
                                                    let l14 = *base.add(12).cast::<usize>();
                                                    _rt::cabi_dealloc(l13, l14, 1);
                                                }
                                                21 => {
                                                    let l15 = *base.add(8).cast::<*mut u8>();
                                                    let l16 = *base.add(12).cast::<usize>();
                                                    _rt::cabi_dealloc(l15, l16, 1);
                                                }
                                                22 => {
                                                    let l17 = *base.add(8).cast::<*mut u8>();
                                                    let l18 = *base.add(12).cast::<usize>();
                                                    _rt::cabi_dealloc(l17, l18, 1);
                                                }
                                                23 => {
                                                    let l19 = *base.add(8).cast::<*mut u8>();
                                                    let l20 = *base.add(12).cast::<usize>();
                                                    _rt::cabi_dealloc(l19, l20, 1);
                                                }
                                                24 => {
                                                    let l21 = *base.add(8).cast::<*mut u8>();
                                                    let l22 = *base.add(12).cast::<usize>();
                                                    _rt::cabi_dealloc(l21, l22, 1);
                                                }
                                                25 => {
                                                    let l23 = *base.add(8).cast::<*mut u8>();
                                                    let l24 = *base.add(12).cast::<usize>();
                                                    let base25 = l23;
                                                    let len25 = l24;
                                                    _rt::cabi_dealloc(base25, len25 * 1, 1);
                                                }
                                                26 => {
                                                    let l26 = *base.add(8).cast::<*mut u8>();
                                                    let l27 = *base.add(12).cast::<usize>();
                                                    let base28 = l26;
                                                    let len28 = l27;
                                                    _rt::cabi_dealloc(base28, len28 * 1, 1);
                                                }
                                                27 => {
                                                    let l29 = *base.add(8).cast::<*mut u8>();
                                                    let l30 = *base.add(12).cast::<usize>();
                                                    let base31 = l29;
                                                    let len31 = l30;
                                                    _rt::cabi_dealloc(base31, len31 * 1, 1);
                                                }
                                                28 => {
                                                    let l32 = *base.add(8).cast::<*mut u8>();
                                                    let l33 = *base.add(12).cast::<usize>();
                                                    let base34 = l32;
                                                    let len34 = l33;
                                                    _rt::cabi_dealloc(base34, len34 * 1, 1);
                                                }
                                                29 => {
                                                    let l35 = *base.add(8).cast::<*mut u8>();
                                                    let l36 = *base.add(12).cast::<usize>();
                                                    let base37 = l35;
                                                    let len37 = l36;
                                                    _rt::cabi_dealloc(base37, len37 * 1, 1);
                                                }
                                                30 => {
                                                    let l38 = *base.add(8).cast::<*mut u8>();
                                                    let l39 = *base.add(12).cast::<usize>();
                                                    let base40 = l38;
                                                    let len40 = l39;
                                                    _rt::cabi_dealloc(base40, len40 * 1, 1);
                                                }
                                                31 => {
                                                    let l41 = *base.add(8).cast::<*mut u8>();
                                                    let l42 = *base.add(12).cast::<usize>();
                                                    _rt::cabi_dealloc(l41, l42, 1);
                                                }
                                                32 => {
                                                    let l43 = *base.add(8).cast::<*mut u8>();
                                                    let l44 = *base.add(12).cast::<usize>();
                                                    _rt::cabi_dealloc(l43, l44, 1);
                                                }
                                                33 => (),
                                                34 => {
                                                    let l45 = *base.add(8).cast::<*mut u8>();
                                                    let l46 = *base.add(12).cast::<usize>();
                                                    _rt::cabi_dealloc(l45, l46, 1);
                                                }
                                                _ => (),
                                            }
                                        }
                                    }
                                    _rt::cabi_dealloc(base49, len49 * 16, 8);
                                }
                            }
                            _rt::cabi_dealloc(base52, len52 * 8, 4);
                        }
                        _ => {
                            let l53 = *arg0.add(4).cast::<*mut u8>();
                            let l54 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l53, l54, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_postgres_execute_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let base4 = arg2;
                    let len4 = arg3;
                    let mut result4 = _rt::Vec::with_capacity(len4);
                    for i in 0..len4 {
                        let base = base4.add(i * 8);
                        let e4 = {
                            let l1 = *base.add(0).cast::<*mut u8>();
                            let l2 = *base.add(4).cast::<usize>();
                            let len3 = l2;
                            let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);

                            _rt::string_lift(bytes3)
                        };
                        result4.push(e4);
                    }
                    _rt::cabi_dealloc(base4, len4 * 8, 4);
                    let result5 = T::postgres_execute(_rt::string_lift(bytes0), result4);
                    let ptr6 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result5 {
                        Ok(e) => {
                            *ptr6.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr6.add(8).cast::<i64>() = _rt::as_i64(e);
                        }
                        Err(e) => {
                            *ptr6.add(0).cast::<u8>() = (1i32) as u8;
                            let vec7 = (e.into_bytes()).into_boxed_slice();
                            let ptr7 = vec7.as_ptr().cast::<u8>();
                            let len7 = vec7.len();
                            ::core::mem::forget(vec7);
                            *ptr6.add(12).cast::<usize>() = len7;
                            *ptr6.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                        }
                    };
                    ptr6
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_postgres_execute<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = *arg0.add(8).cast::<*mut u8>();
                            let l2 = *arg0.add(12).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_postgres_query_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let base4 = arg2;
                    let len4 = arg3;
                    let mut result4 = _rt::Vec::with_capacity(len4);
                    for i in 0..len4 {
                        let base = base4.add(i * 8);
                        let e4 = {
                            let l1 = *base.add(0).cast::<*mut u8>();
                            let l2 = *base.add(4).cast::<usize>();
                            let len3 = l2;
                            let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);

                            _rt::string_lift(bytes3)
                        };
                        result4.push(e4);
                    }
                    _rt::cabi_dealloc(base4, len4 * 8, 4);
                    let result5 = T::postgres_query(_rt::string_lift(bytes0), result4);
                    let ptr6 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result5 {
                        Ok(e) => {
                            *ptr6.add(0).cast::<u8>() = (0i32) as u8;
                            let PostgresQueryResult {
                                columns: columns7,
                                rows: rows7,
                            } = e;
                            let vec14 = columns7;
                            let len14 = vec14.len();
                            let layout14 =
                                _rt::alloc::Layout::from_size_align_unchecked(vec14.len() * 32, 8);
                            let result14 = if layout14.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout14).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout14);
                                }
                                ptr
                            } else {
                                {
                                    ::core::ptr::null_mut()
                                }
                            };
                            for (i, e) in vec14.into_iter().enumerate() {
                                let base = result14.add(i * 32);
                                {
                                    let super::super::super::super::wasi::rdbms::postgres::DbColumn{ ordinal:ordinal8, name:name8, db_type:db_type8, db_type_name:db_type_name8, } = e;
                                    *base.add(0).cast::<i64>() = _rt::as_i64(ordinal8);
                                    let vec9 = (name8.into_bytes()).into_boxed_slice();
                                    let ptr9 = vec9.as_ptr().cast::<u8>();
                                    let len9 = vec9.len();
                                    ::core::mem::forget(vec9);
                                    *base.add(12).cast::<usize>() = len9;
                                    *base.add(8).cast::<*mut u8>() = ptr9.cast_mut();
                                    use super::super::super::super::wasi::rdbms::postgres::DbColumnType as V12;
                                    match db_type8 {
                                        V12::Primitive(e) => {
                                            *base.add(16).cast::<u8>() = (0i32) as u8;
                                            use super::super::super::super::wasi::rdbms::postgres::DbColumnTypePrimitive as V10;
                                            match e {
                                                V10::Int8 => {
                                                    *base.add(17).cast::<u8>() = (0i32) as u8;
                                                }
                                                V10::Int16 => {
                                                    *base.add(17).cast::<u8>() = (1i32) as u8;
                                                }
                                                V10::Int32 => {
                                                    *base.add(17).cast::<u8>() = (2i32) as u8;
                                                }
                                                V10::Int64 => {
                                                    *base.add(17).cast::<u8>() = (3i32) as u8;
                                                }
                                                V10::Float => {
                                                    *base.add(17).cast::<u8>() = (4i32) as u8;
                                                }
                                                V10::Double => {
                                                    *base.add(17).cast::<u8>() = (5i32) as u8;
                                                }
                                                V10::Decimal => {
                                                    *base.add(17).cast::<u8>() = (6i32) as u8;
                                                }
                                                V10::Boolean => {
                                                    *base.add(17).cast::<u8>() = (7i32) as u8;
                                                }
                                                V10::Timestamp => {
                                                    *base.add(17).cast::<u8>() = (8i32) as u8;
                                                }
                                                V10::Date => {
                                                    *base.add(17).cast::<u8>() = (9i32) as u8;
                                                }
                                                V10::Time => {
                                                    *base.add(17).cast::<u8>() = (10i32) as u8;
                                                }
                                                V10::Interval => {
                                                    *base.add(17).cast::<u8>() = (11i32) as u8;
                                                }
                                                V10::Text => {
                                                    *base.add(17).cast::<u8>() = (12i32) as u8;
                                                }
                                                V10::Blob => {
                                                    *base.add(17).cast::<u8>() = (13i32) as u8;
                                                }
                                                V10::Json => {
                                                    *base.add(17).cast::<u8>() = (14i32) as u8;
                                                }
                                                V10::Xml => {
                                                    *base.add(17).cast::<u8>() = (15i32) as u8;
                                                }
                                                V10::Uuid => {
                                                    *base.add(17).cast::<u8>() = (16i32) as u8;
                                                }
                                            }
                                        }
                                        V12::Array(e) => {
                                            *base.add(16).cast::<u8>() = (1i32) as u8;
                                            use super::super::super::super::wasi::rdbms::postgres::DbColumnTypePrimitive as V11;
                                            match e {
                                                V11::Int8 => {
                                                    *base.add(17).cast::<u8>() = (0i32) as u8;
                                                }
                                                V11::Int16 => {
                                                    *base.add(17).cast::<u8>() = (1i32) as u8;
                                                }
                                                V11::Int32 => {
                                                    *base.add(17).cast::<u8>() = (2i32) as u8;
                                                }
                                                V11::Int64 => {
                                                    *base.add(17).cast::<u8>() = (3i32) as u8;
                                                }
                                                V11::Float => {
                                                    *base.add(17).cast::<u8>() = (4i32) as u8;
                                                }
                                                V11::Double => {
                                                    *base.add(17).cast::<u8>() = (5i32) as u8;
                                                }
                                                V11::Decimal => {
                                                    *base.add(17).cast::<u8>() = (6i32) as u8;
                                                }
                                                V11::Boolean => {
                                                    *base.add(17).cast::<u8>() = (7i32) as u8;
                                                }
                                                V11::Timestamp => {
                                                    *base.add(17).cast::<u8>() = (8i32) as u8;
                                                }
                                                V11::Date => {
                                                    *base.add(17).cast::<u8>() = (9i32) as u8;
                                                }
                                                V11::Time => {
                                                    *base.add(17).cast::<u8>() = (10i32) as u8;
                                                }
                                                V11::Interval => {
                                                    *base.add(17).cast::<u8>() = (11i32) as u8;
                                                }
                                                V11::Text => {
                                                    *base.add(17).cast::<u8>() = (12i32) as u8;
                                                }
                                                V11::Blob => {
                                                    *base.add(17).cast::<u8>() = (13i32) as u8;
                                                }
                                                V11::Json => {
                                                    *base.add(17).cast::<u8>() = (14i32) as u8;
                                                }
                                                V11::Xml => {
                                                    *base.add(17).cast::<u8>() = (15i32) as u8;
                                                }
                                                V11::Uuid => {
                                                    *base.add(17).cast::<u8>() = (16i32) as u8;
                                                }
                                            }
                                        }
                                    }
                                    let vec13 = (db_type_name8.into_bytes()).into_boxed_slice();
                                    let ptr13 = vec13.as_ptr().cast::<u8>();
                                    let len13 = vec13.len();
                                    ::core::mem::forget(vec13);
                                    *base.add(24).cast::<usize>() = len13;
                                    *base.add(20).cast::<*mut u8>() = ptr13.cast_mut();
                                }
                            }
                            *ptr6.add(8).cast::<usize>() = len14;
                            *ptr6.add(4).cast::<*mut u8>() = result14;
                            let vec33 = rows7;
                            let len33 = vec33.len();
                            let layout33 =
                                _rt::alloc::Layout::from_size_align_unchecked(vec33.len() * 8, 4);
                            let result33 = if layout33.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout33).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout33);
                                }
                                ptr
                            } else {
                                {
                                    ::core::ptr::null_mut()
                                }
                            };
                            for (i, e) in vec33.into_iter().enumerate() {
                                let base = result33.add(i * 8);
                                {
                                    let super::super::super::super::wasi::rdbms::postgres::DbRow {
                                        values: values15,
                                    } = e;
                                    let vec32 = values15;
                                    let len32 = vec32.len();
                                    let layout32 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec32.len() * 32,
                                        8,
                                    );
                                    let result32 = if layout32.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout32).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout32);
                                        }
                                        ptr
                                    } else {
                                        {
                                            ::core::ptr::null_mut()
                                        }
                                    };
                                    for (i, e) in vec32.into_iter().enumerate() {
                                        let base = result32.add(i * 32);
                                        {
                                            use super::super::super::super::wasi::rdbms::postgres::DbValue as V31;
                                            match e {
                                                V31::Primitive(e) => {
                                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                                    use super::super::super::super::wasi::rdbms::postgres::DbValuePrimitive as V22;
                                                    match e {
                                                        V22::Int8(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (0i32) as u8;
                                                            *base.add(16).cast::<u8>() =
                                                                (_rt::as_i32(e)) as u8;
                                                        }
                                                        V22::Int16(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (1i32) as u8;
                                                            *base.add(16).cast::<u16>() =
                                                                (_rt::as_i32(e)) as u16;
                                                        }
                                                        V22::Int32(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (2i32) as u8;
                                                            *base.add(16).cast::<i32>() =
                                                                _rt::as_i32(e);
                                                        }
                                                        V22::Int64(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (3i32) as u8;
                                                            *base.add(16).cast::<i64>() =
                                                                _rt::as_i64(e);
                                                        }
                                                        V22::Float(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (4i32) as u8;
                                                            *base.add(16).cast::<f32>() =
                                                                _rt::as_f32(e);
                                                        }
                                                        V22::Double(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (5i32) as u8;
                                                            *base.add(16).cast::<f64>() =
                                                                _rt::as_f64(e);
                                                        }
                                                        V22::Decimal(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (6i32) as u8;
                                                            let vec16 =
                                                                (e.into_bytes()).into_boxed_slice();
                                                            let ptr16 = vec16.as_ptr().cast::<u8>();
                                                            let len16 = vec16.len();
                                                            ::core::mem::forget(vec16);
                                                            *base.add(20).cast::<usize>() = len16;
                                                            *base.add(16).cast::<*mut u8>() =
                                                                ptr16.cast_mut();
                                                        }
                                                        V22::Boolean(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (7i32) as u8;
                                                            *base.add(16).cast::<u8>() = (match e {
                                                                true => 1,
                                                                false => 0,
                                                            })
                                                                as u8;
                                                        }
                                                        V22::Timestamp(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (8i32) as u8;
                                                            *base.add(16).cast::<i64>() =
                                                                _rt::as_i64(e);
                                                        }
                                                        V22::Date(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (9i32) as u8;
                                                            *base.add(16).cast::<i64>() =
                                                                _rt::as_i64(e);
                                                        }
                                                        V22::Time(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (10i32) as u8;
                                                            *base.add(16).cast::<i64>() =
                                                                _rt::as_i64(e);
                                                        }
                                                        V22::Interval(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (11i32) as u8;
                                                            *base.add(16).cast::<i64>() =
                                                                _rt::as_i64(e);
                                                        }
                                                        V22::Text(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (12i32) as u8;
                                                            let vec17 =
                                                                (e.into_bytes()).into_boxed_slice();
                                                            let ptr17 = vec17.as_ptr().cast::<u8>();
                                                            let len17 = vec17.len();
                                                            ::core::mem::forget(vec17);
                                                            *base.add(20).cast::<usize>() = len17;
                                                            *base.add(16).cast::<*mut u8>() =
                                                                ptr17.cast_mut();
                                                        }
                                                        V22::Blob(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (13i32) as u8;
                                                            let vec18 = (e).into_boxed_slice();
                                                            let ptr18 = vec18.as_ptr().cast::<u8>();
                                                            let len18 = vec18.len();
                                                            ::core::mem::forget(vec18);
                                                            *base.add(20).cast::<usize>() = len18;
                                                            *base.add(16).cast::<*mut u8>() =
                                                                ptr18.cast_mut();
                                                        }
                                                        V22::Json(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (14i32) as u8;
                                                            let vec19 =
                                                                (e.into_bytes()).into_boxed_slice();
                                                            let ptr19 = vec19.as_ptr().cast::<u8>();
                                                            let len19 = vec19.len();
                                                            ::core::mem::forget(vec19);
                                                            *base.add(20).cast::<usize>() = len19;
                                                            *base.add(16).cast::<*mut u8>() =
                                                                ptr19.cast_mut();
                                                        }
                                                        V22::Xml(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (15i32) as u8;
                                                            let vec20 =
                                                                (e.into_bytes()).into_boxed_slice();
                                                            let ptr20 = vec20.as_ptr().cast::<u8>();
                                                            let len20 = vec20.len();
                                                            ::core::mem::forget(vec20);
                                                            *base.add(20).cast::<usize>() = len20;
                                                            *base.add(16).cast::<*mut u8>() =
                                                                ptr20.cast_mut();
                                                        }
                                                        V22::Uuid(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (16i32) as u8;
                                                            let (t21_0, t21_1) = e;
                                                            *base.add(16).cast::<i64>() =
                                                                _rt::as_i64(t21_0);
                                                            *base.add(24).cast::<i64>() =
                                                                _rt::as_i64(t21_1);
                                                        }
                                                        V22::Null => {
                                                            *base.add(8).cast::<u8>() =
                                                                (17i32) as u8;
                                                        }
                                                    }
                                                }
                                                V31::Array(e) => {
                                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                                    let vec30 = e;
                                                    let len30 = vec30.len();
                                                    let layout30 = _rt::alloc::Layout::from_size_align_unchecked(vec30.len() * 24, 8);
                                                    let result30 = if layout30.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout30)
                                                            .cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(
                                                                layout30,
                                                            );
                                                        }
                                                        ptr
                                                    } else {
                                                        {
                                                            ::core::ptr::null_mut()
                                                        }
                                                    };
                                                    for (i, e) in vec30.into_iter().enumerate() {
                                                        let base = result30.add(i * 24);
                                                        {
                                                            use super::super::super::super::wasi::rdbms::postgres::DbValuePrimitive as V29;
                                                            match e {
                                                                V29::Int8(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (0i32) as u8;
                                                                    *base.add(8).cast::<u8>() =
                                                                        (_rt::as_i32(e)) as u8;
                                                                }
                                                                V29::Int16(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (1i32) as u8;
                                                                    *base.add(8).cast::<u16>() =
                                                                        (_rt::as_i32(e)) as u16;
                                                                }
                                                                V29::Int32(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (2i32) as u8;
                                                                    *base.add(8).cast::<i32>() =
                                                                        _rt::as_i32(e);
                                                                }
                                                                V29::Int64(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (3i32) as u8;
                                                                    *base.add(8).cast::<i64>() =
                                                                        _rt::as_i64(e);
                                                                }
                                                                V29::Float(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (4i32) as u8;
                                                                    *base.add(8).cast::<f32>() =
                                                                        _rt::as_f32(e);
                                                                }
                                                                V29::Double(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (5i32) as u8;
                                                                    *base.add(8).cast::<f64>() =
                                                                        _rt::as_f64(e);
                                                                }
                                                                V29::Decimal(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (6i32) as u8;
                                                                    let vec23 = (e.into_bytes())
                                                                        .into_boxed_slice();
                                                                    let ptr23 =
                                                                        vec23.as_ptr().cast::<u8>();
                                                                    let len23 = vec23.len();
                                                                    ::core::mem::forget(vec23);
                                                                    *base.add(12).cast::<usize>() =
                                                                        len23;
                                                                    *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>() =
                                                                        ptr23.cast_mut();
                                                                }
                                                                V29::Boolean(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (7i32) as u8;
                                                                    *base.add(8).cast::<u8>() =
                                                                        (match e {
                                                                            true => 1,
                                                                            false => 0,
                                                                        })
                                                                            as u8;
                                                                }
                                                                V29::Timestamp(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (8i32) as u8;
                                                                    *base.add(8).cast::<i64>() =
                                                                        _rt::as_i64(e);
                                                                }
                                                                V29::Date(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (9i32) as u8;
                                                                    *base.add(8).cast::<i64>() =
                                                                        _rt::as_i64(e);
                                                                }
                                                                V29::Time(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (10i32) as u8;
                                                                    *base.add(8).cast::<i64>() =
                                                                        _rt::as_i64(e);
                                                                }
                                                                V29::Interval(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (11i32) as u8;
                                                                    *base.add(8).cast::<i64>() =
                                                                        _rt::as_i64(e);
                                                                }
                                                                V29::Text(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (12i32) as u8;
                                                                    let vec24 = (e.into_bytes())
                                                                        .into_boxed_slice();
                                                                    let ptr24 =
                                                                        vec24.as_ptr().cast::<u8>();
                                                                    let len24 = vec24.len();
                                                                    ::core::mem::forget(vec24);
                                                                    *base.add(12).cast::<usize>() =
                                                                        len24;
                                                                    *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>() =
                                                                        ptr24.cast_mut();
                                                                }
                                                                V29::Blob(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (13i32) as u8;
                                                                    let vec25 =
                                                                        (e).into_boxed_slice();
                                                                    let ptr25 =
                                                                        vec25.as_ptr().cast::<u8>();
                                                                    let len25 = vec25.len();
                                                                    ::core::mem::forget(vec25);
                                                                    *base.add(12).cast::<usize>() =
                                                                        len25;
                                                                    *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>() =
                                                                        ptr25.cast_mut();
                                                                }
                                                                V29::Json(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (14i32) as u8;
                                                                    let vec26 = (e.into_bytes())
                                                                        .into_boxed_slice();
                                                                    let ptr26 =
                                                                        vec26.as_ptr().cast::<u8>();
                                                                    let len26 = vec26.len();
                                                                    ::core::mem::forget(vec26);
                                                                    *base.add(12).cast::<usize>() =
                                                                        len26;
                                                                    *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>() =
                                                                        ptr26.cast_mut();
                                                                }
                                                                V29::Xml(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (15i32) as u8;
                                                                    let vec27 = (e.into_bytes())
                                                                        .into_boxed_slice();
                                                                    let ptr27 =
                                                                        vec27.as_ptr().cast::<u8>();
                                                                    let len27 = vec27.len();
                                                                    ::core::mem::forget(vec27);
                                                                    *base.add(12).cast::<usize>() =
                                                                        len27;
                                                                    *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>() =
                                                                        ptr27.cast_mut();
                                                                }
                                                                V29::Uuid(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (16i32) as u8;
                                                                    let (t28_0, t28_1) = e;
                                                                    *base.add(8).cast::<i64>() =
                                                                        _rt::as_i64(t28_0);
                                                                    *base.add(16).cast::<i64>() =
                                                                        _rt::as_i64(t28_1);
                                                                }
                                                                V29::Null => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (17i32) as u8;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    *base.add(12).cast::<usize>() = len30;
                                                    *base.add(8).cast::<*mut u8>() = result30;
                                                }
                                            }
                                        }
                                    }
                                    *base.add(4).cast::<usize>() = len32;
                                    *base.add(0).cast::<*mut u8>() = result32;
                                }
                            }
                            *ptr6.add(16).cast::<usize>() = len33;
                            *ptr6.add(12).cast::<*mut u8>() = result33;
                        }
                        Err(e) => {
                            *ptr6.add(0).cast::<u8>() = (1i32) as u8;
                            let vec34 = (e.into_bytes()).into_boxed_slice();
                            let ptr34 = vec34.as_ptr().cast::<u8>();
                            let len34 = vec34.len();
                            ::core::mem::forget(vec34);
                            *ptr6.add(8).cast::<usize>() = len34;
                            *ptr6.add(4).cast::<*mut u8>() = ptr34.cast_mut();
                        }
                    };
                    ptr6
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_postgres_query<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l5 = *arg0.add(4).cast::<*mut u8>();
                            let l6 = *arg0.add(8).cast::<usize>();
                            let base7 = l5;
                            let len7 = l6;
                            for i in 0..len7 {
                                let base = base7.add(i * 32);
                                {
                                    let l1 = *base.add(8).cast::<*mut u8>();
                                    let l2 = *base.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l1, l2, 1);
                                    let l3 = *base.add(20).cast::<*mut u8>();
                                    let l4 = *base.add(24).cast::<usize>();
                                    _rt::cabi_dealloc(l3, l4, 1);
                                }
                            }
                            _rt::cabi_dealloc(base7, len7 * 32, 8);
                            let l39 = *arg0.add(12).cast::<*mut u8>();
                            let l40 = *arg0.add(16).cast::<usize>();
                            let base41 = l39;
                            let len41 = l40;
                            for i in 0..len41 {
                                let base = base41.add(i * 8);
                                {
                                    let l36 = *base.add(0).cast::<*mut u8>();
                                    let l37 = *base.add(4).cast::<usize>();
                                    let base38 = l36;
                                    let len38 = l37;
                                    for i in 0..len38 {
                                        let base = base38.add(i * 32);
                                        {
                                            let l8 = i32::from(*base.add(0).cast::<u8>());
                                            match l8 {
                                                0 => {
                                                    let l9 = i32::from(*base.add(8).cast::<u8>());
                                                    match l9 {
                                                        0 => (),
                                                        1 => (),
                                                        2 => (),
                                                        3 => (),
                                                        4 => (),
                                                        5 => (),
                                                        6 => {
                                                            let l10 =
                                                                *base.add(16).cast::<*mut u8>();
                                                            let l11 = *base.add(20).cast::<usize>();
                                                            _rt::cabi_dealloc(l10, l11, 1);
                                                        }
                                                        7 => (),
                                                        8 => (),
                                                        9 => (),
                                                        10 => (),
                                                        11 => (),
                                                        12 => {
                                                            let l12 =
                                                                *base.add(16).cast::<*mut u8>();
                                                            let l13 = *base.add(20).cast::<usize>();
                                                            _rt::cabi_dealloc(l12, l13, 1);
                                                        }
                                                        13 => {
                                                            let l14 =
                                                                *base.add(16).cast::<*mut u8>();
                                                            let l15 = *base.add(20).cast::<usize>();
                                                            let base16 = l14;
                                                            let len16 = l15;
                                                            _rt::cabi_dealloc(base16, len16 * 1, 1);
                                                        }
                                                        14 => {
                                                            let l17 =
                                                                *base.add(16).cast::<*mut u8>();
                                                            let l18 = *base.add(20).cast::<usize>();
                                                            _rt::cabi_dealloc(l17, l18, 1);
                                                        }
                                                        15 => {
                                                            let l19 =
                                                                *base.add(16).cast::<*mut u8>();
                                                            let l20 = *base.add(20).cast::<usize>();
                                                            _rt::cabi_dealloc(l19, l20, 1);
                                                        }
                                                        16 => (),
                                                        _ => (),
                                                    }
                                                }
                                                _ => {
                                                    let l33 = *base.add(8).cast::<*mut u8>();
                                                    let l34 = *base.add(12).cast::<usize>();
                                                    let base35 = l33;
                                                    let len35 = l34;
                                                    for i in 0..len35 {
                                                        let base = base35.add(i * 24);
                                                        {
                                                            let l21 = i32::from(
                                                                *base.add(0).cast::<u8>(),
                                                            );
                                                            match l21 {
                                                                0 => (),
                                                                1 => (),
                                                                2 => (),
                                                                3 => (),
                                                                4 => (),
                                                                5 => (),
                                                                6 => {
                                                                    let l22 = *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>();
                                                                    let l23 = *base
                                                                        .add(12)
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l22, l23, 1);
                                                                }
                                                                7 => (),
                                                                8 => (),
                                                                9 => (),
                                                                10 => (),
                                                                11 => (),
                                                                12 => {
                                                                    let l24 = *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>();
                                                                    let l25 = *base
                                                                        .add(12)
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l24, l25, 1);
                                                                }
                                                                13 => {
                                                                    let l26 = *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>();
                                                                    let l27 = *base
                                                                        .add(12)
                                                                        .cast::<usize>();
                                                                    let base28 = l26;
                                                                    let len28 = l27;
                                                                    _rt::cabi_dealloc(
                                                                        base28,
                                                                        len28 * 1,
                                                                        1,
                                                                    );
                                                                }
                                                                14 => {
                                                                    let l29 = *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>();
                                                                    let l30 = *base
                                                                        .add(12)
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l29, l30, 1);
                                                                }
                                                                15 => {
                                                                    let l31 = *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>();
                                                                    let l32 = *base
                                                                        .add(12)
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l31, l32, 1);
                                                                }
                                                                16 => (),
                                                                _ => (),
                                                            }
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(base35, len35 * 24, 8);
                                                }
                                            }
                                        }
                                    }
                                    _rt::cabi_dealloc(base38, len38 * 32, 8);
                                }
                            }
                            _rt::cabi_dealloc(base41, len41 * 8, 4);
                        }
                        _ => {
                            let l42 = *arg0.add(4).cast::<*mut u8>();
                            let l43 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l42, l43, 1);
                        }
                    }
                }
                pub trait Guest {
                    fn check() -> _rt::String;
                    fn mysql_execute(
                        statement: _rt::String,
                        params: _rt::Vec<_rt::String>,
                    ) -> Result<u64, _rt::String>;
                    fn mysql_query(
                        statement: _rt::String,
                        params: _rt::Vec<_rt::String>,
                    ) -> Result<MysqlQueryResult, _rt::String>;
                    fn postgres_execute(
                        statement: _rt::String,
                        params: _rt::Vec<_rt::String>,
                    ) -> Result<u64, _rt::String>;
                    fn postgres_query(
                        statement: _rt::String,
                        params: _rt::Vec<_rt::String>,
                    ) -> Result<PostgresQueryResult, _rt::String>;
                }
                #[doc(hidden)]

                macro_rules! __export_golem_it_api_cabi{
  ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

    #[export_name = "golem:it/api#check"]
    unsafe extern "C" fn export_check() -> *mut u8 {
      $($path_to_types)*::_export_check_cabi::<$ty>()
    }
    #[export_name = "cabi_post_golem:it/api#check"]
    unsafe extern "C" fn _post_return_check(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_check::<$ty>(arg0)
    }
    #[export_name = "golem:it/api#mysql-execute"]
    unsafe extern "C" fn export_mysql_execute(arg0: *mut u8,arg1: usize,arg2: *mut u8,arg3: usize,) -> *mut u8 {
      $($path_to_types)*::_export_mysql_execute_cabi::<$ty>(arg0, arg1, arg2, arg3)
    }
    #[export_name = "cabi_post_golem:it/api#mysql-execute"]
    unsafe extern "C" fn _post_return_mysql_execute(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_mysql_execute::<$ty>(arg0)
    }
    #[export_name = "golem:it/api#mysql-query"]
    unsafe extern "C" fn export_mysql_query(arg0: *mut u8,arg1: usize,arg2: *mut u8,arg3: usize,) -> *mut u8 {
      $($path_to_types)*::_export_mysql_query_cabi::<$ty>(arg0, arg1, arg2, arg3)
    }
    #[export_name = "cabi_post_golem:it/api#mysql-query"]
    unsafe extern "C" fn _post_return_mysql_query(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_mysql_query::<$ty>(arg0)
    }
    #[export_name = "golem:it/api#postgres-execute"]
    unsafe extern "C" fn export_postgres_execute(arg0: *mut u8,arg1: usize,arg2: *mut u8,arg3: usize,) -> *mut u8 {
      $($path_to_types)*::_export_postgres_execute_cabi::<$ty>(arg0, arg1, arg2, arg3)
    }
    #[export_name = "cabi_post_golem:it/api#postgres-execute"]
    unsafe extern "C" fn _post_return_postgres_execute(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_postgres_execute::<$ty>(arg0)
    }
    #[export_name = "golem:it/api#postgres-query"]
    unsafe extern "C" fn export_postgres_query(arg0: *mut u8,arg1: usize,arg2: *mut u8,arg3: usize,) -> *mut u8 {
      $($path_to_types)*::_export_postgres_query_cabi::<$ty>(arg0, arg1, arg2, arg3)
    }
    #[export_name = "cabi_post_golem:it/api#postgres-query"]
    unsafe extern "C" fn _post_return_postgres_query(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_postgres_query::<$ty>(arg0)
    }
  };);
}
                #[doc(hidden)]
                pub(crate) use __export_golem_it_api_cabi;
                #[repr(align(8))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 20]);
                static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 20]);
            }
        }
    }
}
mod _rt {
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;

    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};

    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        // NB: This would ideally be `u32` but it is not. The fact that this has
        // interior mutability is not exposed in the API of this type except for the
        // `take_handle` method which is supposed to in theory be private.
        //
        // This represents, almost all the time, a valid handle value. When it's
        // invalid it's stored as `u32::MAX`.
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }

    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }

    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }

        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }

        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }

    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource")
                .field("handle", &self.handle)
                .finish()
        }
    }

    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    // If this handle was "taken" then don't do anything in the
                    // destructor.
                    u32::MAX => {}

                    // ... but otherwise do actually destroy it with the imported
                    // component model intrinsic as defined through `T`.
                    other => T::drop(other),
                }
            }
        }
    }
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr as *mut u8, layout);
    }
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            core::hint::unreachable_unchecked()
        }
    }

    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }

    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }

    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }

    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }

    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }

    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }

    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }

    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }

    pub fn as_f32<T: AsF32>(t: T) -> f32 {
        t.as_f32()
    }

    pub trait AsF32 {
        fn as_f32(self) -> f32;
    }

    impl<'a, T: Copy + AsF32> AsF32 for &'a T {
        fn as_f32(self) -> f32 {
            (*self).as_f32()
        }
    }

    impl AsF32 for f32 {
        #[inline]
        fn as_f32(self) -> f32 {
            self as f32
        }
    }

    pub fn as_f64<T: AsF64>(t: T) -> f64 {
        t.as_f64()
    }

    pub trait AsF64 {
        fn as_f64(self) -> f64;
    }

    impl<'a, T: Copy + AsF64> AsF64 for &'a T {
        fn as_f64(self) -> f64 {
            (*self).as_f64()
        }
    }

    impl AsF64 for f64 {
        #[inline]
        fn as_f64(self) -> f64 {
            self as f64
        }
    }
    pub use alloc_crate::alloc;

    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    extern crate alloc as alloc_crate;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_rdbms_service_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::golem::it::api::__export_golem_it_api_cabi!($ty with_types_in $($path_to_types_root)*::exports::golem::it::api);
  )
}
#[doc(inline)]
pub(crate) use __export_rdbms_service_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.25.0:rdbms-service:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 3049] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xe5\x16\x01A\x02\x01\
A\x0a\x01B(\x01q\x05\x12connection-failure\x01s\0\x17query-parameter-failure\x01\
s\0\x17query-execution-failure\x01s\0\x16query-response-failure\x01s\0\x05other\x01\
s\0\x04\0\x05error\x03\0\0\x01q\x11\x04int8\0\0\x05int16\0\0\x05int32\0\0\x05int\
64\0\0\x05float\0\0\x06double\0\0\x07decimal\0\0\x07boolean\0\0\x09timestamp\0\0\
\x04date\0\0\x04time\0\0\x08interval\0\0\x04text\0\0\x04blob\0\0\x04json\0\0\x03\
xml\0\0\x04uuid\0\0\x04\0\x18db-column-type-primitive\x03\0\x02\x01q\x02\x09prim\
itive\x01\x03\0\x05array\x01\x03\0\x04\0\x0edb-column-type\x03\0\x04\x01r\x04\x07\
ordinalw\x04names\x07db-type\x05\x0cdb-type-names\x04\0\x09db-column\x03\0\x06\x01\
p}\x01o\x02ww\x01q\x12\x04int8\x01~\0\x05int16\x01|\0\x05int32\x01z\0\x05int64\x01\
x\0\x05float\x01v\0\x06double\x01u\0\x07decimal\x01s\0\x07boolean\x01\x7f\0\x09t\
imestamp\x01x\0\x04date\x01x\0\x04time\x01x\0\x08interval\x01x\0\x04text\x01s\0\x04\
blob\x01\x08\0\x04json\x01s\0\x03xml\x01s\0\x04uuid\x01\x09\0\x04null\0\0\x04\0\x12\
db-value-primitive\x03\0\x0a\x01p\x0b\x01q\x02\x09primitive\x01\x0b\0\x05array\x01\
\x0c\0\x04\0\x08db-value\x03\0\x0d\x01p\x0e\x01r\x01\x06values\x0f\x04\0\x06db-r\
ow\x03\0\x10\x04\0\x0ddb-result-set\x03\x01\x04\0\x0ddb-connection\x03\x01\x01h\x12\
\x01p\x07\x01@\x01\x04self\x14\0\x15\x04\0![method]db-result-set.get-columns\x01\
\x16\x01p\x11\x01k\x17\x01@\x01\x04self\x14\0\x18\x04\0\x1e[method]db-result-set\
.get-next\x01\x19\x01i\x13\x01j\x01\x1a\x01\x01\x01@\x01\x07addresss\0\x1b\x04\0\
\x1a[static]db-connection.open\x01\x1c\x01h\x13\x01i\x12\x01j\x01\x1e\x01\x01\x01\
@\x03\x04self\x1d\x09statements\x06params\x0f\0\x1f\x04\0\x1b[method]db-connecti\
on.query\x01\x20\x01j\x01w\x01\x01\x01@\x03\x04self\x1d\x09statements\x06params\x0f\
\0!\x04\0\x1d[method]db-connection.execute\x01\"\x03\x01\x19wasi:rdbms/postgres@\
0.0.1\x05\0\x01B\"\x01q\x05\x12connection-failure\x01s\0\x17query-parameter-fail\
ure\x01s\0\x17query-execution-failure\x01s\0\x16query-response-failure\x01s\0\x05\
other\x01s\0\x04\0\x05error\x03\0\0\x01q#\x07boolean\0\0\x07tinyint\0\0\x08small\
int\0\0\x09mediumint\0\0\x03int\0\0\x06bigint\0\0\x0dtiny-unsigned\0\0\x0esmall-\
unsigned\0\0\x0fmedium-unsigned\0\0\x08unsigned\0\0\x0cbig-unsigned\0\0\x05float\
\0\0\x06double\0\0\x07decimal\0\0\x04date\0\0\x08datetime\0\0\x09timestamp\0\0\x04\
time\0\0\x04year\0\0\x07fixchar\0\0\x07varchar\0\0\x08tinytext\0\0\x04text\0\0\x0a\
mediumtext\0\0\x08longtext\0\0\x06binary\0\0\x09varbinary\0\0\x08tinyblob\0\0\x04\
blob\0\0\x0amediumblob\0\0\x08longblob\0\0\x0benumeration\0\0\x03set\0\0\x03bit\0\
\0\x04json\0\0\x04\0\x0edb-column-type\x03\0\x02\x01r\x04\x07ordinalw\x04names\x07\
db-type\x03\x0cdb-type-names\x04\0\x09db-column\x03\0\x04\x01p}\x01q$\x07boolean\
\x01\x7f\0\x07tinyint\x01~\0\x08smallint\x01|\0\x09mediumint\x01z\0\x03int\x01z\0\
\x06bigint\x01x\0\x0dtiny-unsigned\x01}\0\x0esmall-unsigned\x01{\0\x0fmedium-uns\
igned\x01y\0\x08unsigned\x01y\0\x0cbig-unsigned\x01w\0\x05float\x01v\0\x06double\
\x01u\0\x07decimal\x01s\0\x04date\x01x\0\x08datetime\x01x\0\x09timestamp\x01x\0\x04\
time\x01x\0\x04year\x01~\0\x07fixchar\x01s\0\x07varchar\x01s\0\x08tinytext\x01s\0\
\x04text\x01s\0\x0amediumtext\x01s\0\x08longtext\x01s\0\x06binary\x01\x06\0\x09v\
arbinary\x01\x06\0\x08tinyblob\x01\x06\0\x04blob\x01\x06\0\x0amediumblob\x01\x06\
\0\x08longblob\x01\x06\0\x0benumeration\x01s\0\x03set\x01s\0\x03bit\x01}\0\x04js\
on\x01s\0\x04null\0\0\x04\0\x08db-value\x03\0\x07\x01p\x08\x01r\x01\x06values\x09\
\x04\0\x06db-row\x03\0\x0a\x04\0\x0ddb-result-set\x03\x01\x04\0\x0ddb-connection\
\x03\x01\x01h\x0c\x01p\x05\x01@\x01\x04self\x0e\0\x0f\x04\0![method]db-result-se\
t.get-columns\x01\x10\x01p\x0b\x01k\x11\x01@\x01\x04self\x0e\0\x12\x04\0\x1e[met\
hod]db-result-set.get-next\x01\x13\x01i\x0d\x01j\x01\x14\x01\x01\x01@\x01\x07add\
resss\0\x15\x04\0\x1a[static]db-connection.open\x01\x16\x01h\x0d\x01i\x0c\x01j\x01\
\x18\x01\x01\x01@\x03\x04self\x17\x09statements\x06params\x09\0\x19\x04\0\x1b[me\
thod]db-connection.query\x01\x1a\x01j\x01w\x01\x01\x01@\x03\x04self\x17\x09state\
ments\x06params\x09\0\x1b\x04\0\x1d[method]db-connection.execute\x01\x1c\x03\x01\
\x16wasi:rdbms/mysql@0.0.1\x05\x01\x02\x03\0\0\x06db-row\x02\x03\0\0\x09db-colum\
n\x02\x03\0\x01\x06db-row\x02\x03\0\x01\x09db-column\x01B\x1d\x02\x03\x02\x01\x02\
\x04\0\x0fpostgres-db-row\x03\0\0\x02\x03\x02\x01\x03\x04\0\x12postgres-db-colum\
n\x03\0\x02\x02\x03\x02\x01\x04\x04\0\x0cmysql-db-row\x03\0\x04\x02\x03\x02\x01\x05\
\x04\0\x0fmysql-db-column\x03\0\x06\x01p\x03\x01p\x01\x01r\x02\x07columns\x08\x04\
rows\x09\x04\0\x15postgres-query-result\x03\0\x0a\x01p\x07\x01p\x05\x01r\x02\x07\
columns\x0c\x04rows\x0d\x04\0\x12mysql-query-result\x03\0\x0e\x01@\0\0s\x04\0\x05\
check\x01\x10\x01ps\x01j\x01w\x01s\x01@\x02\x09statements\x06params\x11\0\x12\x04\
\0\x0dmysql-execute\x01\x13\x01j\x01\x0f\x01s\x01@\x02\x09statements\x06params\x11\
\0\x14\x04\0\x0bmysql-query\x01\x15\x04\0\x10postgres-execute\x01\x13\x01j\x01\x0b\
\x01s\x01@\x02\x09statements\x06params\x11\0\x16\x04\0\x0epostgres-query\x01\x17\
\x04\x01\x0cgolem:it/api\x05\x06\x04\x01\x16golem:it/rdbms-service\x04\0\x0b\x13\
\x01\0\x0drdbms-service\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-c\
omponent\x070.208.1\x10wit-bindgen-rust\x060.25.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
