// Generated by `wit-bindgen` 0.25.0. DO NOT EDIT!
// Options used:
#[allow(dead_code)]
pub mod wasi {
    #[allow(dead_code)]
    pub mod rdbms {
        #[allow(dead_code, clippy::all)]
        pub mod postgres {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[derive(Clone)]
            pub enum Error {
                ConnectionFailure(_rt::String),
                QueryParameterFailure(_rt::String),
                QueryExecutionFailure(_rt::String),
                QueryResponseFailure(_rt::String),
                Other(_rt::String),
            }
            impl ::core::fmt::Debug for Error {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        Error::ConnectionFailure(e) => {
                            f.debug_tuple("Error::ConnectionFailure").field(e).finish()
                        }
                        Error::QueryParameterFailure(e) => f
                            .debug_tuple("Error::QueryParameterFailure")
                            .field(e)
                            .finish(),
                        Error::QueryExecutionFailure(e) => f
                            .debug_tuple("Error::QueryExecutionFailure")
                            .field(e)
                            .finish(),
                        Error::QueryResponseFailure(e) => f
                            .debug_tuple("Error::QueryResponseFailure")
                            .field(e)
                            .finish(),
                        Error::Other(e) => f.debug_tuple("Error::Other").field(e).finish(),
                    }
                }
            }
            impl ::core::fmt::Display for Error {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }

            impl std::error::Error for Error {}
            pub type Uuid = (u64, u64);
            pub type Ipv4Address = (u8, u8, u8, u8);
            pub type Ipv6Address = (u16, u16, u16, u16, u16, u16, u16, u16);
            #[derive(Clone, Copy)]
            pub enum IpAddress {
                Ipv4(Ipv4Address),
                Ipv6(Ipv6Address),
            }
            impl ::core::fmt::Debug for IpAddress {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        IpAddress::Ipv4(e) => f.debug_tuple("IpAddress::Ipv4").field(e).finish(),
                        IpAddress::Ipv6(e) => f.debug_tuple("IpAddress::Ipv6").field(e).finish(),
                    }
                }
            }
            pub type MacAddress = (u8, u8, u8, u8, u8, u8);
            pub type Date = (i32, u8, u8);
            /// year, month, day
            pub type Time = (u8, u8, u8, u32);
            /// hour, minute, second, nanosecond
            pub type Timetz = (u8, u8, u8, u32, i32);
            /// hour, minute, second, nanosecond, timezone offset in seconds
            pub type Timestamp = (i32, u8, u8, u8, u8, u8, u32);
            /// year, month, day, hour, minute, second, nanosecond
            pub type Timestamptz = (i32, u8, u8, u8, u8, u8, u32, i32);
            /// year, month, day, hour, minute, second, nanosecond, timezone offset in seconds
            pub type Interval = (i32, i32, i64);
            /// months, days, microseconds
            pub type Int4range = (Option<(i32, bool)>, Option<(i32, bool)>);
            pub type Int8range = (Option<(i64, bool)>, Option<(i64, bool)>);
            pub type Numrange = (Option<(_rt::String, bool)>, Option<(_rt::String, bool)>);
            pub type Tsrange = (Option<(Timestamp, bool)>, Option<(Timestamp, bool)>);
            pub type Tstzrange = (Option<(Timestamptz, bool)>, Option<(Timestamptz, bool)>);
            pub type Daterange = (Option<(Date, bool)>, Option<(Date, bool)>);
            pub type BitVec = _rt::Vec<bool>;
            #[derive(Clone)]
            pub enum DbColumnTypePrimitive {
                Character,
                Int2,
                Int4,
                Int8,
                Float4,
                Float8,
                Numeric,
                Boolean,
                Text,
                Varchar,
                Bpchar,
                Timestamp,
                Timestamptz,
                Date,
                Time,
                Timetz,
                Interval,
                Bytea,
                Uuid,
                Xml,
                Json,
                Jsonb,
                Inet,
                Cidr,
                Macaddr,
                Bit,
                Varbit,
                Int4range,
                Int8range,
                Numrange,
                Tsrange,
                Tstzrange,
                Daterange,
                Oid,
                CustomEnum(_rt::String),
            }
            impl ::core::fmt::Debug for DbColumnTypePrimitive {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        DbColumnTypePrimitive::Character => {
                            f.debug_tuple("DbColumnTypePrimitive::Character").finish()
                        }
                        DbColumnTypePrimitive::Int2 => {
                            f.debug_tuple("DbColumnTypePrimitive::Int2").finish()
                        }
                        DbColumnTypePrimitive::Int4 => {
                            f.debug_tuple("DbColumnTypePrimitive::Int4").finish()
                        }
                        DbColumnTypePrimitive::Int8 => {
                            f.debug_tuple("DbColumnTypePrimitive::Int8").finish()
                        }
                        DbColumnTypePrimitive::Float4 => {
                            f.debug_tuple("DbColumnTypePrimitive::Float4").finish()
                        }
                        DbColumnTypePrimitive::Float8 => {
                            f.debug_tuple("DbColumnTypePrimitive::Float8").finish()
                        }
                        DbColumnTypePrimitive::Numeric => {
                            f.debug_tuple("DbColumnTypePrimitive::Numeric").finish()
                        }
                        DbColumnTypePrimitive::Boolean => {
                            f.debug_tuple("DbColumnTypePrimitive::Boolean").finish()
                        }
                        DbColumnTypePrimitive::Text => {
                            f.debug_tuple("DbColumnTypePrimitive::Text").finish()
                        }
                        DbColumnTypePrimitive::Varchar => {
                            f.debug_tuple("DbColumnTypePrimitive::Varchar").finish()
                        }
                        DbColumnTypePrimitive::Bpchar => {
                            f.debug_tuple("DbColumnTypePrimitive::Bpchar").finish()
                        }
                        DbColumnTypePrimitive::Timestamp => {
                            f.debug_tuple("DbColumnTypePrimitive::Timestamp").finish()
                        }
                        DbColumnTypePrimitive::Timestamptz => {
                            f.debug_tuple("DbColumnTypePrimitive::Timestamptz").finish()
                        }
                        DbColumnTypePrimitive::Date => {
                            f.debug_tuple("DbColumnTypePrimitive::Date").finish()
                        }
                        DbColumnTypePrimitive::Time => {
                            f.debug_tuple("DbColumnTypePrimitive::Time").finish()
                        }
                        DbColumnTypePrimitive::Timetz => {
                            f.debug_tuple("DbColumnTypePrimitive::Timetz").finish()
                        }
                        DbColumnTypePrimitive::Interval => {
                            f.debug_tuple("DbColumnTypePrimitive::Interval").finish()
                        }
                        DbColumnTypePrimitive::Bytea => {
                            f.debug_tuple("DbColumnTypePrimitive::Bytea").finish()
                        }
                        DbColumnTypePrimitive::Uuid => {
                            f.debug_tuple("DbColumnTypePrimitive::Uuid").finish()
                        }
                        DbColumnTypePrimitive::Xml => {
                            f.debug_tuple("DbColumnTypePrimitive::Xml").finish()
                        }
                        DbColumnTypePrimitive::Json => {
                            f.debug_tuple("DbColumnTypePrimitive::Json").finish()
                        }
                        DbColumnTypePrimitive::Jsonb => {
                            f.debug_tuple("DbColumnTypePrimitive::Jsonb").finish()
                        }
                        DbColumnTypePrimitive::Inet => {
                            f.debug_tuple("DbColumnTypePrimitive::Inet").finish()
                        }
                        DbColumnTypePrimitive::Cidr => {
                            f.debug_tuple("DbColumnTypePrimitive::Cidr").finish()
                        }
                        DbColumnTypePrimitive::Macaddr => {
                            f.debug_tuple("DbColumnTypePrimitive::Macaddr").finish()
                        }
                        DbColumnTypePrimitive::Bit => {
                            f.debug_tuple("DbColumnTypePrimitive::Bit").finish()
                        }
                        DbColumnTypePrimitive::Varbit => {
                            f.debug_tuple("DbColumnTypePrimitive::Varbit").finish()
                        }
                        DbColumnTypePrimitive::Int4range => {
                            f.debug_tuple("DbColumnTypePrimitive::Int4range").finish()
                        }
                        DbColumnTypePrimitive::Int8range => {
                            f.debug_tuple("DbColumnTypePrimitive::Int8range").finish()
                        }
                        DbColumnTypePrimitive::Numrange => {
                            f.debug_tuple("DbColumnTypePrimitive::Numrange").finish()
                        }
                        DbColumnTypePrimitive::Tsrange => {
                            f.debug_tuple("DbColumnTypePrimitive::Tsrange").finish()
                        }
                        DbColumnTypePrimitive::Tstzrange => {
                            f.debug_tuple("DbColumnTypePrimitive::Tstzrange").finish()
                        }
                        DbColumnTypePrimitive::Daterange => {
                            f.debug_tuple("DbColumnTypePrimitive::Daterange").finish()
                        }
                        DbColumnTypePrimitive::Oid => {
                            f.debug_tuple("DbColumnTypePrimitive::Oid").finish()
                        }
                        DbColumnTypePrimitive::CustomEnum(e) => f
                            .debug_tuple("DbColumnTypePrimitive::CustomEnum")
                            .field(e)
                            .finish(),
                    }
                }
            }
            #[derive(Clone)]
            pub enum DbValuePrimitive {
                Character(i8),
                Int2(i16),
                Int4(i32),
                Int8(i64),
                Float4(f32),
                Float8(f64),
                Numeric(_rt::String),
                Boolean(bool),
                Text(_rt::String),
                Varchar(_rt::String),
                Bpchar(_rt::String),
                Timestamp(Timestamp),
                Timestamptz(Timestamptz),
                Date(Date),
                Time(Time),
                Timetz(Timetz),
                Interval(Interval),
                Bytea(_rt::Vec<u8>),
                Json(_rt::String),
                Jsonb(_rt::String),
                Xml(_rt::String),
                Uuid(Uuid),
                Inet(IpAddress),
                Cidr(IpAddress),
                Macaddr(MacAddress),
                Bit(BitVec),
                Varbit(BitVec),
                Int4range(Int4range),
                Int8range(Int8range),
                Numrange(Numrange),
                Tsrange(Tsrange),
                Tstzrange(Tstzrange),
                Daterange(Daterange),
                Oid(u32),
                CustomEnum(_rt::String),
                Null,
            }
            impl ::core::fmt::Debug for DbValuePrimitive {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        DbValuePrimitive::Character(e) => f
                            .debug_tuple("DbValuePrimitive::Character")
                            .field(e)
                            .finish(),
                        DbValuePrimitive::Int2(e) => {
                            f.debug_tuple("DbValuePrimitive::Int2").field(e).finish()
                        }
                        DbValuePrimitive::Int4(e) => {
                            f.debug_tuple("DbValuePrimitive::Int4").field(e).finish()
                        }
                        DbValuePrimitive::Int8(e) => {
                            f.debug_tuple("DbValuePrimitive::Int8").field(e).finish()
                        }
                        DbValuePrimitive::Float4(e) => {
                            f.debug_tuple("DbValuePrimitive::Float4").field(e).finish()
                        }
                        DbValuePrimitive::Float8(e) => {
                            f.debug_tuple("DbValuePrimitive::Float8").field(e).finish()
                        }
                        DbValuePrimitive::Numeric(e) => {
                            f.debug_tuple("DbValuePrimitive::Numeric").field(e).finish()
                        }
                        DbValuePrimitive::Boolean(e) => {
                            f.debug_tuple("DbValuePrimitive::Boolean").field(e).finish()
                        }
                        DbValuePrimitive::Text(e) => {
                            f.debug_tuple("DbValuePrimitive::Text").field(e).finish()
                        }
                        DbValuePrimitive::Varchar(e) => {
                            f.debug_tuple("DbValuePrimitive::Varchar").field(e).finish()
                        }
                        DbValuePrimitive::Bpchar(e) => {
                            f.debug_tuple("DbValuePrimitive::Bpchar").field(e).finish()
                        }
                        DbValuePrimitive::Timestamp(e) => f
                            .debug_tuple("DbValuePrimitive::Timestamp")
                            .field(e)
                            .finish(),
                        DbValuePrimitive::Timestamptz(e) => f
                            .debug_tuple("DbValuePrimitive::Timestamptz")
                            .field(e)
                            .finish(),
                        DbValuePrimitive::Date(e) => {
                            f.debug_tuple("DbValuePrimitive::Date").field(e).finish()
                        }
                        DbValuePrimitive::Time(e) => {
                            f.debug_tuple("DbValuePrimitive::Time").field(e).finish()
                        }
                        DbValuePrimitive::Timetz(e) => {
                            f.debug_tuple("DbValuePrimitive::Timetz").field(e).finish()
                        }
                        DbValuePrimitive::Interval(e) => f
                            .debug_tuple("DbValuePrimitive::Interval")
                            .field(e)
                            .finish(),
                        DbValuePrimitive::Bytea(e) => {
                            f.debug_tuple("DbValuePrimitive::Bytea").field(e).finish()
                        }
                        DbValuePrimitive::Json(e) => {
                            f.debug_tuple("DbValuePrimitive::Json").field(e).finish()
                        }
                        DbValuePrimitive::Jsonb(e) => {
                            f.debug_tuple("DbValuePrimitive::Jsonb").field(e).finish()
                        }
                        DbValuePrimitive::Xml(e) => {
                            f.debug_tuple("DbValuePrimitive::Xml").field(e).finish()
                        }
                        DbValuePrimitive::Uuid(e) => {
                            f.debug_tuple("DbValuePrimitive::Uuid").field(e).finish()
                        }
                        DbValuePrimitive::Inet(e) => {
                            f.debug_tuple("DbValuePrimitive::Inet").field(e).finish()
                        }
                        DbValuePrimitive::Cidr(e) => {
                            f.debug_tuple("DbValuePrimitive::Cidr").field(e).finish()
                        }
                        DbValuePrimitive::Macaddr(e) => {
                            f.debug_tuple("DbValuePrimitive::Macaddr").field(e).finish()
                        }
                        DbValuePrimitive::Bit(e) => {
                            f.debug_tuple("DbValuePrimitive::Bit").field(e).finish()
                        }
                        DbValuePrimitive::Varbit(e) => {
                            f.debug_tuple("DbValuePrimitive::Varbit").field(e).finish()
                        }
                        DbValuePrimitive::Int4range(e) => f
                            .debug_tuple("DbValuePrimitive::Int4range")
                            .field(e)
                            .finish(),
                        DbValuePrimitive::Int8range(e) => f
                            .debug_tuple("DbValuePrimitive::Int8range")
                            .field(e)
                            .finish(),
                        DbValuePrimitive::Numrange(e) => f
                            .debug_tuple("DbValuePrimitive::Numrange")
                            .field(e)
                            .finish(),
                        DbValuePrimitive::Tsrange(e) => {
                            f.debug_tuple("DbValuePrimitive::Tsrange").field(e).finish()
                        }
                        DbValuePrimitive::Tstzrange(e) => f
                            .debug_tuple("DbValuePrimitive::Tstzrange")
                            .field(e)
                            .finish(),
                        DbValuePrimitive::Daterange(e) => f
                            .debug_tuple("DbValuePrimitive::Daterange")
                            .field(e)
                            .finish(),
                        DbValuePrimitive::Oid(e) => {
                            f.debug_tuple("DbValuePrimitive::Oid").field(e).finish()
                        }
                        DbValuePrimitive::CustomEnum(e) => f
                            .debug_tuple("DbValuePrimitive::CustomEnum")
                            .field(e)
                            .finish(),
                        DbValuePrimitive::Null => f.debug_tuple("DbValuePrimitive::Null").finish(),
                    }
                }
            }
            #[derive(Clone)]
            pub enum DbColumnType {
                Primitive(DbColumnTypePrimitive),
                Array(DbColumnTypePrimitive),
            }
            impl ::core::fmt::Debug for DbColumnType {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        DbColumnType::Primitive(e) => {
                            f.debug_tuple("DbColumnType::Primitive").field(e).finish()
                        }
                        DbColumnType::Array(e) => {
                            f.debug_tuple("DbColumnType::Array").field(e).finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub struct DbColumn {
                pub ordinal: u64,
                pub name: _rt::String,
                pub db_type: DbColumnType,
                pub db_type_name: _rt::String,
            }
            impl ::core::fmt::Debug for DbColumn {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("DbColumn")
                        .field("ordinal", &self.ordinal)
                        .field("name", &self.name)
                        .field("db-type", &self.db_type)
                        .field("db-type-name", &self.db_type_name)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub enum DbValue {
                Primitive(DbValuePrimitive),
                Array(_rt::Vec<DbValuePrimitive>),
            }
            impl ::core::fmt::Debug for DbValue {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        DbValue::Primitive(e) => {
                            f.debug_tuple("DbValue::Primitive").field(e).finish()
                        }
                        DbValue::Array(e) => f.debug_tuple("DbValue::Array").field(e).finish(),
                    }
                }
            }
            /// A single row of values
            #[derive(Clone)]
            pub struct DbRow {
                pub values: _rt::Vec<DbValue>,
            }
            impl ::core::fmt::Debug for DbRow {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("DbRow")
                        .field("values", &self.values)
                        .finish()
                }
            }
            /// A potentially very large and lazy stream of rows:

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct DbResultSet {
                handle: _rt::Resource<DbResultSet>,
            }

            impl DbResultSet {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for DbResultSet {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:rdbms/postgres@0.0.1")]
                        extern "C" {
                            #[link_name = "[resource-drop]db-result-set"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct DbConnection {
                handle: _rt::Resource<DbConnection>,
            }

            impl DbConnection {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for DbConnection {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:rdbms/postgres@0.0.1")]
                        extern "C" {
                            #[link_name = "[resource-drop]db-connection"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            impl DbResultSet {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_columns(&self) -> _rt::Vec<DbColumn> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:rdbms/postgres@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]db-result-set.get-columns"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let base22 = l1;
                        let len22 = l2;
                        let mut result22 = _rt::Vec::with_capacity(len22);
                        for i in 0..len22 {
                            let base = base22.add(i * 40);
                            let e22 = {
                                let l3 = *base.add(0).cast::<i64>();
                                let l4 = *base.add(8).cast::<*mut u8>();
                                let l5 = *base.add(12).cast::<usize>();
                                let len6 = l5;
                                let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);
                                let l7 = i32::from(*base.add(16).cast::<u8>());
                                let v18 = match l7 {
                                    0 => {
                                        let e18 = {
                                            let l8 = i32::from(*base.add(20).cast::<u8>());
                                            let v12 = match l8 {
                                                0 => DbColumnTypePrimitive::Character,
                                                1 => DbColumnTypePrimitive::Int2,
                                                2 => DbColumnTypePrimitive::Int4,
                                                3 => DbColumnTypePrimitive::Int8,
                                                4 => DbColumnTypePrimitive::Float4,
                                                5 => DbColumnTypePrimitive::Float8,
                                                6 => DbColumnTypePrimitive::Numeric,
                                                7 => DbColumnTypePrimitive::Boolean,
                                                8 => DbColumnTypePrimitive::Text,
                                                9 => DbColumnTypePrimitive::Varchar,
                                                10 => DbColumnTypePrimitive::Bpchar,
                                                11 => DbColumnTypePrimitive::Timestamp,
                                                12 => DbColumnTypePrimitive::Timestamptz,
                                                13 => DbColumnTypePrimitive::Date,
                                                14 => DbColumnTypePrimitive::Time,
                                                15 => DbColumnTypePrimitive::Timetz,
                                                16 => DbColumnTypePrimitive::Interval,
                                                17 => DbColumnTypePrimitive::Bytea,
                                                18 => DbColumnTypePrimitive::Uuid,
                                                19 => DbColumnTypePrimitive::Xml,
                                                20 => DbColumnTypePrimitive::Json,
                                                21 => DbColumnTypePrimitive::Jsonb,
                                                22 => DbColumnTypePrimitive::Inet,
                                                23 => DbColumnTypePrimitive::Cidr,
                                                24 => DbColumnTypePrimitive::Macaddr,
                                                25 => DbColumnTypePrimitive::Bit,
                                                26 => DbColumnTypePrimitive::Varbit,
                                                27 => DbColumnTypePrimitive::Int4range,
                                                28 => DbColumnTypePrimitive::Int8range,
                                                29 => DbColumnTypePrimitive::Numrange,
                                                30 => DbColumnTypePrimitive::Tsrange,
                                                31 => DbColumnTypePrimitive::Tstzrange,
                                                32 => DbColumnTypePrimitive::Daterange,
                                                33 => DbColumnTypePrimitive::Oid,
                                                n => {
                                                    debug_assert_eq!(
                                                        n, 34,
                                                        "invalid enum discriminant"
                                                    );
                                                    let e12 = {
                                                        let l9 = *base.add(24).cast::<*mut u8>();
                                                        let l10 = *base.add(28).cast::<usize>();
                                                        let len11 = l10;
                                                        let bytes11 = _rt::Vec::from_raw_parts(
                                                            l9.cast(),
                                                            len11,
                                                            len11,
                                                        );

                                                        _rt::string_lift(bytes11)
                                                    };
                                                    DbColumnTypePrimitive::CustomEnum(e12)
                                                }
                                            };

                                            v12
                                        };
                                        DbColumnType::Primitive(e18)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 1, "invalid enum discriminant");
                                        let e18 = {
                                            let l13 = i32::from(*base.add(20).cast::<u8>());
                                            let v17 = match l13 {
                                                0 => DbColumnTypePrimitive::Character,
                                                1 => DbColumnTypePrimitive::Int2,
                                                2 => DbColumnTypePrimitive::Int4,
                                                3 => DbColumnTypePrimitive::Int8,
                                                4 => DbColumnTypePrimitive::Float4,
                                                5 => DbColumnTypePrimitive::Float8,
                                                6 => DbColumnTypePrimitive::Numeric,
                                                7 => DbColumnTypePrimitive::Boolean,
                                                8 => DbColumnTypePrimitive::Text,
                                                9 => DbColumnTypePrimitive::Varchar,
                                                10 => DbColumnTypePrimitive::Bpchar,
                                                11 => DbColumnTypePrimitive::Timestamp,
                                                12 => DbColumnTypePrimitive::Timestamptz,
                                                13 => DbColumnTypePrimitive::Date,
                                                14 => DbColumnTypePrimitive::Time,
                                                15 => DbColumnTypePrimitive::Timetz,
                                                16 => DbColumnTypePrimitive::Interval,
                                                17 => DbColumnTypePrimitive::Bytea,
                                                18 => DbColumnTypePrimitive::Uuid,
                                                19 => DbColumnTypePrimitive::Xml,
                                                20 => DbColumnTypePrimitive::Json,
                                                21 => DbColumnTypePrimitive::Jsonb,
                                                22 => DbColumnTypePrimitive::Inet,
                                                23 => DbColumnTypePrimitive::Cidr,
                                                24 => DbColumnTypePrimitive::Macaddr,
                                                25 => DbColumnTypePrimitive::Bit,
                                                26 => DbColumnTypePrimitive::Varbit,
                                                27 => DbColumnTypePrimitive::Int4range,
                                                28 => DbColumnTypePrimitive::Int8range,
                                                29 => DbColumnTypePrimitive::Numrange,
                                                30 => DbColumnTypePrimitive::Tsrange,
                                                31 => DbColumnTypePrimitive::Tstzrange,
                                                32 => DbColumnTypePrimitive::Daterange,
                                                33 => DbColumnTypePrimitive::Oid,
                                                n => {
                                                    debug_assert_eq!(
                                                        n, 34,
                                                        "invalid enum discriminant"
                                                    );
                                                    let e17 = {
                                                        let l14 = *base.add(24).cast::<*mut u8>();
                                                        let l15 = *base.add(28).cast::<usize>();
                                                        let len16 = l15;
                                                        let bytes16 = _rt::Vec::from_raw_parts(
                                                            l14.cast(),
                                                            len16,
                                                            len16,
                                                        );

                                                        _rt::string_lift(bytes16)
                                                    };
                                                    DbColumnTypePrimitive::CustomEnum(e17)
                                                }
                                            };

                                            v17
                                        };
                                        DbColumnType::Array(e18)
                                    }
                                };
                                let l19 = *base.add(32).cast::<*mut u8>();
                                let l20 = *base.add(36).cast::<usize>();
                                let len21 = l20;
                                let bytes21 = _rt::Vec::from_raw_parts(l19.cast(), len21, len21);

                                DbColumn {
                                    ordinal: l3 as u64,
                                    name: _rt::string_lift(bytes6),
                                    db_type: v18,
                                    db_type_name: _rt::string_lift(bytes21),
                                }
                            };
                            result22.push(e22);
                        }
                        _rt::cabi_dealloc(base22, len22 * 40, 8);
                        result22
                    }
                }
            }
            impl DbResultSet {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_next(&self) -> Option<_rt::Vec<DbRow>> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:rdbms/postgres@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]db-result-set.get-next"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<*mut u8>();
                                    let l3 = *ptr0.add(8).cast::<usize>();
                                    let base374 = l2;
                                    let len374 = l3;
                                    let mut result374 = _rt::Vec::with_capacity(len374);
                                    for i in 0..len374 {
                                        let base = base374.add(i * 8);
                                        let e374 = {
                                            let l4 = *base.add(0).cast::<*mut u8>();
                                            let l5 = *base.add(4).cast::<usize>();
                                            let base373 = l4;
                                            let len373 = l5;
                                            let mut result373 = _rt::Vec::with_capacity(len373);
                                            for i in 0..len373 {
                                                let base = base373.add(i * 72);
                                                let e373 = {
                                                    let l6 = i32::from(*base.add(0).cast::<u8>());
                                                    let v372 = match l6 {
                                                        0 => {
                                                            let e372 = {
                                                                let l7 = i32::from(
                                                                    *base.add(8).cast::<u8>(),
                                                                );
                                                                let v187 = match l7 {
                                                                    0 => {
                                                                        let e187 = {
                                                                            let l8 = i32::from(
                                                                                *base
                                                                                    .add(16)
                                                                                    .cast::<i8>(),
                                                                            );

                                                                            l8 as i8
                                                                        };
                                                                        DbValuePrimitive::Character(
                                                                            e187,
                                                                        )
                                                                    }
                                                                    1 => {
                                                                        let e187 = {
                                                                            let l9 = i32::from(
                                                                                *base
                                                                                    .add(16)
                                                                                    .cast::<i16>(),
                                                                            );

                                                                            l9 as i16
                                                                        };
                                                                        DbValuePrimitive::Int2(e187)
                                                                    }
                                                                    2 => {
                                                                        let e187 = {
                                                                            let l10 = *base
                                                                                .add(16)
                                                                                .cast::<i32>();

                                                                            l10
                                                                        };
                                                                        DbValuePrimitive::Int4(e187)
                                                                    }
                                                                    3 => {
                                                                        let e187 = {
                                                                            let l11 = *base
                                                                                .add(16)
                                                                                .cast::<i64>();

                                                                            l11
                                                                        };
                                                                        DbValuePrimitive::Int8(e187)
                                                                    }
                                                                    4 => {
                                                                        let e187 = {
                                                                            let l12 = *base
                                                                                .add(16)
                                                                                .cast::<f32>();

                                                                            l12
                                                                        };
                                                                        DbValuePrimitive::Float4(
                                                                            e187,
                                                                        )
                                                                    }
                                                                    5 => {
                                                                        let e187 = {
                                                                            let l13 = *base
                                                                                .add(16)
                                                                                .cast::<f64>();

                                                                            l13
                                                                        };
                                                                        DbValuePrimitive::Float8(
                                                                            e187,
                                                                        )
                                                                    }
                                                                    6 => {
                                                                        let e187 = {
                                                                            let l14 = *base
                                                                                .add(16)
                                                                                .cast::<*mut u8>();
                                                                            let l15 = *base
                                                                                .add(20)
                                                                                .cast::<usize>();
                                                                            let len16 = l15;
                                                                            let bytes16 = _rt::Vec::from_raw_parts(l14.cast(), len16, len16);

                                                                            _rt::string_lift(
                                                                                bytes16,
                                                                            )
                                                                        };
                                                                        DbValuePrimitive::Numeric(
                                                                            e187,
                                                                        )
                                                                    }
                                                                    7 => {
                                                                        let e187 = {
                                                                            let l17 = i32::from(
                                                                                *base
                                                                                    .add(16)
                                                                                    .cast::<u8>(),
                                                                            );

                                                                            _rt::bool_lift(
                                                                                l17 as u8,
                                                                            )
                                                                        };
                                                                        DbValuePrimitive::Boolean(
                                                                            e187,
                                                                        )
                                                                    }
                                                                    8 => {
                                                                        let e187 = {
                                                                            let l18 = *base
                                                                                .add(16)
                                                                                .cast::<*mut u8>();
                                                                            let l19 = *base
                                                                                .add(20)
                                                                                .cast::<usize>();
                                                                            let len20 = l19;
                                                                            let bytes20 = _rt::Vec::from_raw_parts(l18.cast(), len20, len20);

                                                                            _rt::string_lift(
                                                                                bytes20,
                                                                            )
                                                                        };
                                                                        DbValuePrimitive::Text(e187)
                                                                    }
                                                                    9 => {
                                                                        let e187 = {
                                                                            let l21 = *base
                                                                                .add(16)
                                                                                .cast::<*mut u8>();
                                                                            let l22 = *base
                                                                                .add(20)
                                                                                .cast::<usize>();
                                                                            let len23 = l22;
                                                                            let bytes23 = _rt::Vec::from_raw_parts(l21.cast(), len23, len23);

                                                                            _rt::string_lift(
                                                                                bytes23,
                                                                            )
                                                                        };
                                                                        DbValuePrimitive::Varchar(
                                                                            e187,
                                                                        )
                                                                    }
                                                                    10 => {
                                                                        let e187 = {
                                                                            let l24 = *base
                                                                                .add(16)
                                                                                .cast::<*mut u8>();
                                                                            let l25 = *base
                                                                                .add(20)
                                                                                .cast::<usize>();
                                                                            let len26 = l25;
                                                                            let bytes26 = _rt::Vec::from_raw_parts(l24.cast(), len26, len26);

                                                                            _rt::string_lift(
                                                                                bytes26,
                                                                            )
                                                                        };
                                                                        DbValuePrimitive::Bpchar(
                                                                            e187,
                                                                        )
                                                                    }
                                                                    11 => {
                                                                        let e187 = {
                                                                            let l27 = *base
                                                                                .add(16)
                                                                                .cast::<i32>();
                                                                            let l28 = i32::from(
                                                                                *base
                                                                                    .add(20)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let l29 = i32::from(
                                                                                *base
                                                                                    .add(21)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let l30 = i32::from(
                                                                                *base
                                                                                    .add(22)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let l31 = i32::from(
                                                                                *base
                                                                                    .add(23)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let l32 = i32::from(
                                                                                *base
                                                                                    .add(24)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let l33 = *base
                                                                                .add(28)
                                                                                .cast::<i32>();

                                                                            (
                                                                                l27, l28 as u8,
                                                                                l29 as u8,
                                                                                l30 as u8,
                                                                                l31 as u8,
                                                                                l32 as u8,
                                                                                l33 as u32,
                                                                            )
                                                                        };
                                                                        DbValuePrimitive::Timestamp(
                                                                            e187,
                                                                        )
                                                                    }
                                                                    12 => {
                                                                        let e187 = {
                                                                            let l34 = *base
                                                                                .add(16)
                                                                                .cast::<i32>();
                                                                            let l35 = i32::from(
                                                                                *base
                                                                                    .add(20)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let l36 = i32::from(
                                                                                *base
                                                                                    .add(21)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let l37 = i32::from(
                                                                                *base
                                                                                    .add(22)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let l38 = i32::from(
                                                                                *base
                                                                                    .add(23)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let l39 = i32::from(
                                                                                *base
                                                                                    .add(24)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let l40 = *base
                                                                                .add(28)
                                                                                .cast::<i32>();
                                                                            let l41 = *base
                                                                                .add(32)
                                                                                .cast::<i32>();

                                                                            (
                                                                                l34, l35 as u8,
                                                                                l36 as u8,
                                                                                l37 as u8,
                                                                                l38 as u8,
                                                                                l39 as u8,
                                                                                l40 as u32, l41,
                                                                            )
                                                                        };
                                                                        DbValuePrimitive::Timestamptz(e187)
                                                                    }
                                                                    13 => {
                                                                        let e187 = {
                                                                            let l42 = *base
                                                                                .add(16)
                                                                                .cast::<i32>();
                                                                            let l43 = i32::from(
                                                                                *base
                                                                                    .add(20)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let l44 = i32::from(
                                                                                *base
                                                                                    .add(21)
                                                                                    .cast::<u8>(),
                                                                            );

                                                                            (
                                                                                l42, l43 as u8,
                                                                                l44 as u8,
                                                                            )
                                                                        };
                                                                        DbValuePrimitive::Date(e187)
                                                                    }
                                                                    14 => {
                                                                        let e187 = {
                                                                            let l45 = i32::from(
                                                                                *base
                                                                                    .add(16)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let l46 = i32::from(
                                                                                *base
                                                                                    .add(17)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let l47 = i32::from(
                                                                                *base
                                                                                    .add(18)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let l48 = *base
                                                                                .add(20)
                                                                                .cast::<i32>();

                                                                            (
                                                                                l45 as u8,
                                                                                l46 as u8,
                                                                                l47 as u8,
                                                                                l48 as u32,
                                                                            )
                                                                        };
                                                                        DbValuePrimitive::Time(e187)
                                                                    }
                                                                    15 => {
                                                                        let e187 = {
                                                                            let l49 = i32::from(
                                                                                *base
                                                                                    .add(16)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let l50 = i32::from(
                                                                                *base
                                                                                    .add(17)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let l51 = i32::from(
                                                                                *base
                                                                                    .add(18)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let l52 = *base
                                                                                .add(20)
                                                                                .cast::<i32>();
                                                                            let l53 = *base
                                                                                .add(24)
                                                                                .cast::<i32>();

                                                                            (
                                                                                l49 as u8,
                                                                                l50 as u8,
                                                                                l51 as u8,
                                                                                l52 as u32, l53,
                                                                            )
                                                                        };
                                                                        DbValuePrimitive::Timetz(
                                                                            e187,
                                                                        )
                                                                    }
                                                                    16 => {
                                                                        let e187 = {
                                                                            let l54 = *base
                                                                                .add(16)
                                                                                .cast::<i32>();
                                                                            let l55 = *base
                                                                                .add(20)
                                                                                .cast::<i32>();
                                                                            let l56 = *base
                                                                                .add(24)
                                                                                .cast::<i64>();

                                                                            (l54, l55, l56)
                                                                        };
                                                                        DbValuePrimitive::Interval(
                                                                            e187,
                                                                        )
                                                                    }
                                                                    17 => {
                                                                        let e187 = {
                                                                            let l57 = *base
                                                                                .add(16)
                                                                                .cast::<*mut u8>();
                                                                            let l58 = *base
                                                                                .add(20)
                                                                                .cast::<usize>();
                                                                            let len59 = l58;

                                                                            _rt::Vec::from_raw_parts(
                                                                                l57.cast(),
                                                                                len59,
                                                                                len59,
                                                                            )
                                                                        };
                                                                        DbValuePrimitive::Bytea(
                                                                            e187,
                                                                        )
                                                                    }
                                                                    18 => {
                                                                        let e187 = {
                                                                            let l60 = *base
                                                                                .add(16)
                                                                                .cast::<*mut u8>();
                                                                            let l61 = *base
                                                                                .add(20)
                                                                                .cast::<usize>();
                                                                            let len62 = l61;
                                                                            let bytes62 = _rt::Vec::from_raw_parts(l60.cast(), len62, len62);

                                                                            _rt::string_lift(
                                                                                bytes62,
                                                                            )
                                                                        };
                                                                        DbValuePrimitive::Json(e187)
                                                                    }
                                                                    19 => {
                                                                        let e187 = {
                                                                            let l63 = *base
                                                                                .add(16)
                                                                                .cast::<*mut u8>();
                                                                            let l64 = *base
                                                                                .add(20)
                                                                                .cast::<usize>();
                                                                            let len65 = l64;
                                                                            let bytes65 = _rt::Vec::from_raw_parts(l63.cast(), len65, len65);

                                                                            _rt::string_lift(
                                                                                bytes65,
                                                                            )
                                                                        };
                                                                        DbValuePrimitive::Jsonb(
                                                                            e187,
                                                                        )
                                                                    }
                                                                    20 => {
                                                                        let e187 = {
                                                                            let l66 = *base
                                                                                .add(16)
                                                                                .cast::<*mut u8>();
                                                                            let l67 = *base
                                                                                .add(20)
                                                                                .cast::<usize>();
                                                                            let len68 = l67;
                                                                            let bytes68 = _rt::Vec::from_raw_parts(l66.cast(), len68, len68);

                                                                            _rt::string_lift(
                                                                                bytes68,
                                                                            )
                                                                        };
                                                                        DbValuePrimitive::Xml(e187)
                                                                    }
                                                                    21 => {
                                                                        let e187 = {
                                                                            let l69 = *base
                                                                                .add(16)
                                                                                .cast::<i64>();
                                                                            let l70 = *base
                                                                                .add(24)
                                                                                .cast::<i64>();

                                                                            (l69 as u64, l70 as u64)
                                                                        };
                                                                        DbValuePrimitive::Uuid(e187)
                                                                    }
                                                                    22 => {
                                                                        let e187 = {
                                                                            let l71 = i32::from(
                                                                                *base
                                                                                    .add(16)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let v84 = match l71 {
                                                                                0 => {
                                                                                    let e84 = {
                                                                                        let l72 = i32::from(*base.add(18).cast::<u8>());
                                                                                        let l73 = i32::from(*base.add(19).cast::<u8>());
                                                                                        let l74 = i32::from(*base.add(20).cast::<u8>());
                                                                                        let l75 = i32::from(*base.add(21).cast::<u8>());

                                                                                        (l72 as u8, l73 as u8, l74 as u8, l75 as u8)
                                                                                    };
                                                                                    IpAddress::Ipv4(
                                                                                        e84,
                                                                                    )
                                                                                }
                                                                                n => {
                                                                                    debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                                                    let e84 = {
                                                                                        let l76 = i32::from(*base.add(18).cast::<u16>());
                                                                                        let l77 = i32::from(*base.add(20).cast::<u16>());
                                                                                        let l78 = i32::from(*base.add(22).cast::<u16>());
                                                                                        let l79 = i32::from(*base.add(24).cast::<u16>());
                                                                                        let l80 = i32::from(*base.add(26).cast::<u16>());
                                                                                        let l81 = i32::from(*base.add(28).cast::<u16>());
                                                                                        let l82 = i32::from(*base.add(30).cast::<u16>());
                                                                                        let l83 = i32::from(*base.add(32).cast::<u16>());

                                                                                        (l76 as u16, l77 as u16, l78 as u16, l79 as u16, l80 as u16, l81 as u16, l82 as u16, l83 as u16)
                                                                                    };
                                                                                    IpAddress::Ipv6(
                                                                                        e84,
                                                                                    )
                                                                                }
                                                                            };

                                                                            v84
                                                                        };
                                                                        DbValuePrimitive::Inet(e187)
                                                                    }
                                                                    23 => {
                                                                        let e187 = {
                                                                            let l85 = i32::from(
                                                                                *base
                                                                                    .add(16)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let v98 = match l85 {
                                                                                0 => {
                                                                                    let e98 = {
                                                                                        let l86 = i32::from(*base.add(18).cast::<u8>());
                                                                                        let l87 = i32::from(*base.add(19).cast::<u8>());
                                                                                        let l88 = i32::from(*base.add(20).cast::<u8>());
                                                                                        let l89 = i32::from(*base.add(21).cast::<u8>());

                                                                                        (l86 as u8, l87 as u8, l88 as u8, l89 as u8)
                                                                                    };
                                                                                    IpAddress::Ipv4(
                                                                                        e98,
                                                                                    )
                                                                                }
                                                                                n => {
                                                                                    debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                                                    let e98 = {
                                                                                        let l90 = i32::from(*base.add(18).cast::<u16>());
                                                                                        let l91 = i32::from(*base.add(20).cast::<u16>());
                                                                                        let l92 = i32::from(*base.add(22).cast::<u16>());
                                                                                        let l93 = i32::from(*base.add(24).cast::<u16>());
                                                                                        let l94 = i32::from(*base.add(26).cast::<u16>());
                                                                                        let l95 = i32::from(*base.add(28).cast::<u16>());
                                                                                        let l96 = i32::from(*base.add(30).cast::<u16>());
                                                                                        let l97 = i32::from(*base.add(32).cast::<u16>());

                                                                                        (l90 as u16, l91 as u16, l92 as u16, l93 as u16, l94 as u16, l95 as u16, l96 as u16, l97 as u16)
                                                                                    };
                                                                                    IpAddress::Ipv6(
                                                                                        e98,
                                                                                    )
                                                                                }
                                                                            };

                                                                            v98
                                                                        };
                                                                        DbValuePrimitive::Cidr(e187)
                                                                    }
                                                                    24 => {
                                                                        let e187 = {
                                                                            let l99 = i32::from(
                                                                                *base
                                                                                    .add(16)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let l100 = i32::from(
                                                                                *base
                                                                                    .add(17)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let l101 = i32::from(
                                                                                *base
                                                                                    .add(18)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let l102 = i32::from(
                                                                                *base
                                                                                    .add(19)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let l103 = i32::from(
                                                                                *base
                                                                                    .add(20)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let l104 = i32::from(
                                                                                *base
                                                                                    .add(21)
                                                                                    .cast::<u8>(),
                                                                            );

                                                                            (
                                                                                l99 as u8,
                                                                                l100 as u8,
                                                                                l101 as u8,
                                                                                l102 as u8,
                                                                                l103 as u8,
                                                                                l104 as u8,
                                                                            )
                                                                        };
                                                                        DbValuePrimitive::Macaddr(
                                                                            e187,
                                                                        )
                                                                    }
                                                                    25 => {
                                                                        let e187 = {
                                                                            let l105 = *base
                                                                                .add(16)
                                                                                .cast::<*mut u8>();
                                                                            let l106 = *base
                                                                                .add(20)
                                                                                .cast::<usize>();
                                                                            let base108 = l105;
                                                                            let len108 = l106;
                                                                            let mut result108 = _rt::Vec::with_capacity(len108);
                                                                            for i in 0..len108 {
                                                                                let base = base108
                                                                                    .add(i * 1);
                                                                                let e108 = {
                                                                                    let l107 = i32::from(*base.add(0).cast::<u8>());

                                                                                    _rt::bool_lift(
                                                                                        l107 as u8,
                                                                                    )
                                                                                };
                                                                                result108
                                                                                    .push(e108);
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base108,
                                                                                len108 * 1,
                                                                                1,
                                                                            );

                                                                            result108
                                                                        };
                                                                        DbValuePrimitive::Bit(e187)
                                                                    }
                                                                    26 => {
                                                                        let e187 = {
                                                                            let l109 = *base
                                                                                .add(16)
                                                                                .cast::<*mut u8>();
                                                                            let l110 = *base
                                                                                .add(20)
                                                                                .cast::<usize>();
                                                                            let base112 = l109;
                                                                            let len112 = l110;
                                                                            let mut result112 = _rt::Vec::with_capacity(len112);
                                                                            for i in 0..len112 {
                                                                                let base = base112
                                                                                    .add(i * 1);
                                                                                let e112 = {
                                                                                    let l111 = i32::from(*base.add(0).cast::<u8>());

                                                                                    _rt::bool_lift(
                                                                                        l111 as u8,
                                                                                    )
                                                                                };
                                                                                result112
                                                                                    .push(e112);
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base112,
                                                                                len112 * 1,
                                                                                1,
                                                                            );

                                                                            result112
                                                                        };
                                                                        DbValuePrimitive::Varbit(
                                                                            e187,
                                                                        )
                                                                    }
                                                                    27 => {
                                                                        let e187 = {
                                                                            let l113 = i32::from(
                                                                                *base
                                                                                    .add(16)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let l116 = i32::from(
                                                                                *base
                                                                                    .add(28)
                                                                                    .cast::<u8>(),
                                                                            );

                                                                            (match l113 {
                                        0 => None,
                                        1 => {
                                          let e = {
                                            let l114 = *base.add(20).cast::<i32>();
                                            let l115 = i32::from(*base.add(24).cast::<u8>());

                                            (l114, _rt::bool_lift(l115 as u8))
                                          };
                                          Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                      }, match l116 {
                                        0 => None,
                                        1 => {
                                          let e = {
                                            let l117 = *base.add(32).cast::<i32>();
                                            let l118 = i32::from(*base.add(36).cast::<u8>());

                                            (l117, _rt::bool_lift(l118 as u8))
                                          };
                                          Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                      })
                                                                        };
                                                                        DbValuePrimitive::Int4range(
                                                                            e187,
                                                                        )
                                                                    }
                                                                    28 => {
                                                                        let e187 = {
                                                                            let l119 = i32::from(
                                                                                *base
                                                                                    .add(16)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let l122 = i32::from(
                                                                                *base
                                                                                    .add(40)
                                                                                    .cast::<u8>(),
                                                                            );

                                                                            (match l119 {
                                        0 => None,
                                        1 => {
                                          let e = {
                                            let l120 = *base.add(24).cast::<i64>();
                                            let l121 = i32::from(*base.add(32).cast::<u8>());

                                            (l120, _rt::bool_lift(l121 as u8))
                                          };
                                          Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                      }, match l122 {
                                        0 => None,
                                        1 => {
                                          let e = {
                                            let l123 = *base.add(48).cast::<i64>();
                                            let l124 = i32::from(*base.add(56).cast::<u8>());

                                            (l123, _rt::bool_lift(l124 as u8))
                                          };
                                          Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                      })
                                                                        };
                                                                        DbValuePrimitive::Int8range(
                                                                            e187,
                                                                        )
                                                                    }
                                                                    29 => {
                                                                        let e187 = {
                                                                            let l125 = i32::from(
                                                                                *base
                                                                                    .add(16)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let l130 = i32::from(
                                                                                *base
                                                                                    .add(32)
                                                                                    .cast::<u8>(),
                                                                            );

                                                                            (match l125 {
                                        0 => None,
                                        1 => {
                                          let e = {
                                            let l126 = *base.add(20).cast::<*mut u8>();
                                            let l127 = *base.add(24).cast::<usize>();
                                            let len128 = l127;
                                            let bytes128 = _rt::Vec::from_raw_parts(l126.cast(), len128, len128);
                                            let l129 = i32::from(*base.add(28).cast::<u8>());

                                            (_rt::string_lift(bytes128), _rt::bool_lift(l129 as u8))
                                          };
                                          Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                      }, match l130 {
                                        0 => None,
                                        1 => {
                                          let e = {
                                            let l131 = *base.add(36).cast::<*mut u8>();
                                            let l132 = *base.add(40).cast::<usize>();
                                            let len133 = l132;
                                            let bytes133 = _rt::Vec::from_raw_parts(l131.cast(), len133, len133);
                                            let l134 = i32::from(*base.add(44).cast::<u8>());

                                            (_rt::string_lift(bytes133), _rt::bool_lift(l134 as u8))
                                          };
                                          Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                      })
                                                                        };
                                                                        DbValuePrimitive::Numrange(
                                                                            e187,
                                                                        )
                                                                    }
                                                                    30 => {
                                                                        let e187 = {
                                                                            let l135 = i32::from(
                                                                                *base
                                                                                    .add(16)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let l144 = i32::from(
                                                                                *base
                                                                                    .add(40)
                                                                                    .cast::<u8>(),
                                                                            );

                                                                            (match l135 {
                                        0 => None,
                                        1 => {
                                          let e = {
                                            let l136 = *base.add(20).cast::<i32>();
                                            let l137 = i32::from(*base.add(24).cast::<u8>());
                                            let l138 = i32::from(*base.add(25).cast::<u8>());
                                            let l139 = i32::from(*base.add(26).cast::<u8>());
                                            let l140 = i32::from(*base.add(27).cast::<u8>());
                                            let l141 = i32::from(*base.add(28).cast::<u8>());
                                            let l142 = *base.add(32).cast::<i32>();
                                            let l143 = i32::from(*base.add(36).cast::<u8>());

                                            ((l136, l137 as u8, l138 as u8, l139 as u8, l140 as u8, l141 as u8, l142 as u32), _rt::bool_lift(l143 as u8))
                                          };
                                          Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                      }, match l144 {
                                        0 => None,
                                        1 => {
                                          let e = {
                                            let l145 = *base.add(44).cast::<i32>();
                                            let l146 = i32::from(*base.add(48).cast::<u8>());
                                            let l147 = i32::from(*base.add(49).cast::<u8>());
                                            let l148 = i32::from(*base.add(50).cast::<u8>());
                                            let l149 = i32::from(*base.add(51).cast::<u8>());
                                            let l150 = i32::from(*base.add(52).cast::<u8>());
                                            let l151 = *base.add(56).cast::<i32>();
                                            let l152 = i32::from(*base.add(60).cast::<u8>());

                                            ((l145, l146 as u8, l147 as u8, l148 as u8, l149 as u8, l150 as u8, l151 as u32), _rt::bool_lift(l152 as u8))
                                          };
                                          Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                      })
                                                                        };
                                                                        DbValuePrimitive::Tsrange(
                                                                            e187,
                                                                        )
                                                                    }
                                                                    31 => {
                                                                        let e187 = {
                                                                            let l153 = i32::from(
                                                                                *base
                                                                                    .add(16)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let l163 = i32::from(
                                                                                *base
                                                                                    .add(44)
                                                                                    .cast::<u8>(),
                                                                            );

                                                                            (match l153 {
                                        0 => None,
                                        1 => {
                                          let e = {
                                            let l154 = *base.add(20).cast::<i32>();
                                            let l155 = i32::from(*base.add(24).cast::<u8>());
                                            let l156 = i32::from(*base.add(25).cast::<u8>());
                                            let l157 = i32::from(*base.add(26).cast::<u8>());
                                            let l158 = i32::from(*base.add(27).cast::<u8>());
                                            let l159 = i32::from(*base.add(28).cast::<u8>());
                                            let l160 = *base.add(32).cast::<i32>();
                                            let l161 = *base.add(36).cast::<i32>();
                                            let l162 = i32::from(*base.add(40).cast::<u8>());

                                            ((l154, l155 as u8, l156 as u8, l157 as u8, l158 as u8, l159 as u8, l160 as u32, l161), _rt::bool_lift(l162 as u8))
                                          };
                                          Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                      }, match l163 {
                                        0 => None,
                                        1 => {
                                          let e = {
                                            let l164 = *base.add(48).cast::<i32>();
                                            let l165 = i32::from(*base.add(52).cast::<u8>());
                                            let l166 = i32::from(*base.add(53).cast::<u8>());
                                            let l167 = i32::from(*base.add(54).cast::<u8>());
                                            let l168 = i32::from(*base.add(55).cast::<u8>());
                                            let l169 = i32::from(*base.add(56).cast::<u8>());
                                            let l170 = *base.add(60).cast::<i32>();
                                            let l171 = *base.add(64).cast::<i32>();
                                            let l172 = i32::from(*base.add(68).cast::<u8>());

                                            ((l164, l165 as u8, l166 as u8, l167 as u8, l168 as u8, l169 as u8, l170 as u32, l171), _rt::bool_lift(l172 as u8))
                                          };
                                          Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                      })
                                                                        };
                                                                        DbValuePrimitive::Tstzrange(
                                                                            e187,
                                                                        )
                                                                    }
                                                                    32 => {
                                                                        let e187 = {
                                                                            let l173 = i32::from(
                                                                                *base
                                                                                    .add(16)
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            let l178 = i32::from(
                                                                                *base
                                                                                    .add(32)
                                                                                    .cast::<u8>(),
                                                                            );

                                                                            (match l173 {
                                        0 => None,
                                        1 => {
                                          let e = {
                                            let l174 = *base.add(20).cast::<i32>();
                                            let l175 = i32::from(*base.add(24).cast::<u8>());
                                            let l176 = i32::from(*base.add(25).cast::<u8>());
                                            let l177 = i32::from(*base.add(28).cast::<u8>());

                                            ((l174, l175 as u8, l176 as u8), _rt::bool_lift(l177 as u8))
                                          };
                                          Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                      }, match l178 {
                                        0 => None,
                                        1 => {
                                          let e = {
                                            let l179 = *base.add(36).cast::<i32>();
                                            let l180 = i32::from(*base.add(40).cast::<u8>());
                                            let l181 = i32::from(*base.add(41).cast::<u8>());
                                            let l182 = i32::from(*base.add(44).cast::<u8>());

                                            ((l179, l180 as u8, l181 as u8), _rt::bool_lift(l182 as u8))
                                          };
                                          Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                      })
                                                                        };
                                                                        DbValuePrimitive::Daterange(
                                                                            e187,
                                                                        )
                                                                    }
                                                                    33 => {
                                                                        let e187 = {
                                                                            let l183 = *base
                                                                                .add(16)
                                                                                .cast::<i32>();

                                                                            l183 as u32
                                                                        };
                                                                        DbValuePrimitive::Oid(e187)
                                                                    }
                                                                    34 => {
                                                                        let e187 = {
                                                                            let l184 = *base
                                                                                .add(16)
                                                                                .cast::<*mut u8>();
                                                                            let l185 = *base
                                                                                .add(20)
                                                                                .cast::<usize>();
                                                                            let len186 = l185;
                                                                            let bytes186 = _rt::Vec::from_raw_parts(l184.cast(), len186, len186);

                                                                            _rt::string_lift(
                                                                                bytes186,
                                                                            )
                                                                        };
                                                                        DbValuePrimitive::CustomEnum(
                                                                            e187,
                                                                        )
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 35, "invalid enum discriminant");
                                                                        DbValuePrimitive::Null
                                                                    }
                                                                };

                                                                v187
                                                            };
                                                            DbValue::Primitive(e372)
                                                        }
                                                        n => {
                                                            debug_assert_eq!(
                                                                n, 1,
                                                                "invalid enum discriminant"
                                                            );
                                                            let e372 = {
                                                                let l188 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l189 =
                                                                    *base.add(12).cast::<usize>();
                                                                let base371 = l188;
                                                                let len371 = l189;
                                                                let mut result371 =
                                                                    _rt::Vec::with_capacity(len371);
                                                                for i in 0..len371 {
                                                                    let base = base371.add(i * 64);
                                                                    let e371 = {
                                                                        let l190 = i32::from(
                                                                            *base
                                                                                .add(0)
                                                                                .cast::<u8>(),
                                                                        );
                                                                        let v370 = match l190 {
                                                                            0 => {
                                                                                let e370 = {
                                                                                    let l191 = i32::from(*base.add(8).cast::<i8>());

                                                                                    l191 as i8
                                                                                };
                                                                                DbValuePrimitive::Character(e370)
                                                                            }
                                                                            1 => {
                                                                                let e370 = {
                                                                                    let l192 = i32::from(*base.add(8).cast::<i16>());

                                                                                    l192 as i16
                                                                                };
                                                                                DbValuePrimitive::Int2(e370)
                                                                            }
                                                                            2 => {
                                                                                let e370 = {
                                                                                    let l193 = *base.add(8).cast::<i32>();

                                                                                    l193
                                                                                };
                                                                                DbValuePrimitive::Int4(e370)
                                                                            }
                                                                            3 => {
                                                                                let e370 = {
                                                                                    let l194 = *base.add(8).cast::<i64>();

                                                                                    l194
                                                                                };
                                                                                DbValuePrimitive::Int8(e370)
                                                                            }
                                                                            4 => {
                                                                                let e370 = {
                                                                                    let l195 = *base.add(8).cast::<f32>();

                                                                                    l195
                                                                                };
                                                                                DbValuePrimitive::Float4(e370)
                                                                            }
                                                                            5 => {
                                                                                let e370 = {
                                                                                    let l196 = *base.add(8).cast::<f64>();

                                                                                    l196
                                                                                };
                                                                                DbValuePrimitive::Float8(e370)
                                                                            }
                                                                            6 => {
                                                                                let e370 = {
                                                                                    let l197 = *base.add(8).cast::<*mut u8>();
                                                                                    let l198 = *base.add(12).cast::<usize>();
                                                                                    let len199 =
                                                                                        l198;
                                                                                    let bytes199 = _rt::Vec::from_raw_parts(l197.cast(), len199, len199);

                                                                                    _rt::string_lift(
                                                                                        bytes199,
                                                                                    )
                                                                                };
                                                                                DbValuePrimitive::Numeric(e370)
                                                                            }
                                                                            7 => {
                                                                                let e370 = {
                                                                                    let l200 = i32::from(*base.add(8).cast::<u8>());

                                                                                    _rt::bool_lift(
                                                                                        l200 as u8,
                                                                                    )
                                                                                };
                                                                                DbValuePrimitive::Boolean(e370)
                                                                            }
                                                                            8 => {
                                                                                let e370 = {
                                                                                    let l201 = *base.add(8).cast::<*mut u8>();
                                                                                    let l202 = *base.add(12).cast::<usize>();
                                                                                    let len203 =
                                                                                        l202;
                                                                                    let bytes203 = _rt::Vec::from_raw_parts(l201.cast(), len203, len203);

                                                                                    _rt::string_lift(
                                                                                        bytes203,
                                                                                    )
                                                                                };
                                                                                DbValuePrimitive::Text(e370)
                                                                            }
                                                                            9 => {
                                                                                let e370 = {
                                                                                    let l204 = *base.add(8).cast::<*mut u8>();
                                                                                    let l205 = *base.add(12).cast::<usize>();
                                                                                    let len206 =
                                                                                        l205;
                                                                                    let bytes206 = _rt::Vec::from_raw_parts(l204.cast(), len206, len206);

                                                                                    _rt::string_lift(
                                                                                        bytes206,
                                                                                    )
                                                                                };
                                                                                DbValuePrimitive::Varchar(e370)
                                                                            }
                                                                            10 => {
                                                                                let e370 = {
                                                                                    let l207 = *base.add(8).cast::<*mut u8>();
                                                                                    let l208 = *base.add(12).cast::<usize>();
                                                                                    let len209 =
                                                                                        l208;
                                                                                    let bytes209 = _rt::Vec::from_raw_parts(l207.cast(), len209, len209);

                                                                                    _rt::string_lift(
                                                                                        bytes209,
                                                                                    )
                                                                                };
                                                                                DbValuePrimitive::Bpchar(e370)
                                                                            }
                                                                            11 => {
                                                                                let e370 = {
                                                                                    let l210 = *base.add(8).cast::<i32>();
                                                                                    let l211 = i32::from(*base.add(12).cast::<u8>());
                                                                                    let l212 = i32::from(*base.add(13).cast::<u8>());
                                                                                    let l213 = i32::from(*base.add(14).cast::<u8>());
                                                                                    let l214 = i32::from(*base.add(15).cast::<u8>());
                                                                                    let l215 = i32::from(*base.add(16).cast::<u8>());
                                                                                    let l216 = *base.add(20).cast::<i32>();

                                                                                    (
                                                                                        l210,
                                                                                        l211 as u8,
                                                                                        l212 as u8,
                                                                                        l213 as u8,
                                                                                        l214 as u8,
                                                                                        l215 as u8,
                                                                                        l216 as u32,
                                                                                    )
                                                                                };
                                                                                DbValuePrimitive::Timestamp(e370)
                                                                            }
                                                                            12 => {
                                                                                let e370 = {
                                                                                    let l217 = *base.add(8).cast::<i32>();
                                                                                    let l218 = i32::from(*base.add(12).cast::<u8>());
                                                                                    let l219 = i32::from(*base.add(13).cast::<u8>());
                                                                                    let l220 = i32::from(*base.add(14).cast::<u8>());
                                                                                    let l221 = i32::from(*base.add(15).cast::<u8>());
                                                                                    let l222 = i32::from(*base.add(16).cast::<u8>());
                                                                                    let l223 = *base.add(20).cast::<i32>();
                                                                                    let l224 = *base.add(24).cast::<i32>();

                                                                                    (
                                                                                        l217,
                                                                                        l218 as u8,
                                                                                        l219 as u8,
                                                                                        l220 as u8,
                                                                                        l221 as u8,
                                                                                        l222 as u8,
                                                                                        l223 as u32,
                                                                                        l224,
                                                                                    )
                                                                                };
                                                                                DbValuePrimitive::Timestamptz(e370)
                                                                            }
                                                                            13 => {
                                                                                let e370 = {
                                                                                    let l225 = *base.add(8).cast::<i32>();
                                                                                    let l226 = i32::from(*base.add(12).cast::<u8>());
                                                                                    let l227 = i32::from(*base.add(13).cast::<u8>());

                                                                                    (
                                                                                        l225,
                                                                                        l226 as u8,
                                                                                        l227 as u8,
                                                                                    )
                                                                                };
                                                                                DbValuePrimitive::Date(e370)
                                                                            }
                                                                            14 => {
                                                                                let e370 = {
                                                                                    let l228 = i32::from(*base.add(8).cast::<u8>());
                                                                                    let l229 = i32::from(*base.add(9).cast::<u8>());
                                                                                    let l230 = i32::from(*base.add(10).cast::<u8>());
                                                                                    let l231 = *base.add(12).cast::<i32>();

                                                                                    (
                                                                                        l228 as u8,
                                                                                        l229 as u8,
                                                                                        l230 as u8,
                                                                                        l231 as u32,
                                                                                    )
                                                                                };
                                                                                DbValuePrimitive::Time(e370)
                                                                            }
                                                                            15 => {
                                                                                let e370 = {
                                                                                    let l232 = i32::from(*base.add(8).cast::<u8>());
                                                                                    let l233 = i32::from(*base.add(9).cast::<u8>());
                                                                                    let l234 = i32::from(*base.add(10).cast::<u8>());
                                                                                    let l235 = *base.add(12).cast::<i32>();
                                                                                    let l236 = *base.add(16).cast::<i32>();

                                                                                    (
                                                                                        l232 as u8,
                                                                                        l233 as u8,
                                                                                        l234 as u8,
                                                                                        l235 as u32,
                                                                                        l236,
                                                                                    )
                                                                                };
                                                                                DbValuePrimitive::Timetz(e370)
                                                                            }
                                                                            16 => {
                                                                                let e370 = {
                                                                                    let l237 = *base.add(8).cast::<i32>();
                                                                                    let l238 = *base.add(12).cast::<i32>();
                                                                                    let l239 = *base.add(16).cast::<i64>();

                                                                                    (
                                                                                        l237, l238,
                                                                                        l239,
                                                                                    )
                                                                                };
                                                                                DbValuePrimitive::Interval(e370)
                                                                            }
                                                                            17 => {
                                                                                let e370 = {
                                                                                    let l240 = *base.add(8).cast::<*mut u8>();
                                                                                    let l241 = *base.add(12).cast::<usize>();
                                                                                    let len242 =
                                                                                        l241;

                                                                                    _rt::Vec::from_raw_parts(l240.cast(), len242, len242)
                                                                                };
                                                                                DbValuePrimitive::Bytea(e370)
                                                                            }
                                                                            18 => {
                                                                                let e370 = {
                                                                                    let l243 = *base.add(8).cast::<*mut u8>();
                                                                                    let l244 = *base.add(12).cast::<usize>();
                                                                                    let len245 =
                                                                                        l244;
                                                                                    let bytes245 = _rt::Vec::from_raw_parts(l243.cast(), len245, len245);

                                                                                    _rt::string_lift(
                                                                                        bytes245,
                                                                                    )
                                                                                };
                                                                                DbValuePrimitive::Json(e370)
                                                                            }
                                                                            19 => {
                                                                                let e370 = {
                                                                                    let l246 = *base.add(8).cast::<*mut u8>();
                                                                                    let l247 = *base.add(12).cast::<usize>();
                                                                                    let len248 =
                                                                                        l247;
                                                                                    let bytes248 = _rt::Vec::from_raw_parts(l246.cast(), len248, len248);

                                                                                    _rt::string_lift(
                                                                                        bytes248,
                                                                                    )
                                                                                };
                                                                                DbValuePrimitive::Jsonb(e370)
                                                                            }
                                                                            20 => {
                                                                                let e370 = {
                                                                                    let l249 = *base.add(8).cast::<*mut u8>();
                                                                                    let l250 = *base.add(12).cast::<usize>();
                                                                                    let len251 =
                                                                                        l250;
                                                                                    let bytes251 = _rt::Vec::from_raw_parts(l249.cast(), len251, len251);

                                                                                    _rt::string_lift(
                                                                                        bytes251,
                                                                                    )
                                                                                };
                                                                                DbValuePrimitive::Xml(e370)
                                                                            }
                                                                            21 => {
                                                                                let e370 = {
                                                                                    let l252 = *base.add(8).cast::<i64>();
                                                                                    let l253 = *base.add(16).cast::<i64>();

                                                                                    (
                                                                                        l252 as u64,
                                                                                        l253 as u64,
                                                                                    )
                                                                                };
                                                                                DbValuePrimitive::Uuid(e370)
                                                                            }
                                                                            22 => {
                                                                                let e370 = {
                                                                                    let l254 = i32::from(*base.add(8).cast::<u8>());
                                                                                    let v267 =
                                                                                        match l254 {
                                                                                            0 => {
                                                                                                let e267 = {
                                                let l255 = i32::from(*base.add(10).cast::<u8>());
                                                let l256 = i32::from(*base.add(11).cast::<u8>());
                                                let l257 = i32::from(*base.add(12).cast::<u8>());
                                                let l258 = i32::from(*base.add(13).cast::<u8>());

                                                (l255 as u8, l256 as u8, l257 as u8, l258 as u8)
                                              };
                                                                                                IpAddress::Ipv4(e267)
                                                                                            }
                                                                                            n => {
                                                                                                debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                                                                let e267 = {
                                                let l259 = i32::from(*base.add(10).cast::<u16>());
                                                let l260 = i32::from(*base.add(12).cast::<u16>());
                                                let l261 = i32::from(*base.add(14).cast::<u16>());
                                                let l262 = i32::from(*base.add(16).cast::<u16>());
                                                let l263 = i32::from(*base.add(18).cast::<u16>());
                                                let l264 = i32::from(*base.add(20).cast::<u16>());
                                                let l265 = i32::from(*base.add(22).cast::<u16>());
                                                let l266 = i32::from(*base.add(24).cast::<u16>());

                                                (l259 as u16, l260 as u16, l261 as u16, l262 as u16, l263 as u16, l264 as u16, l265 as u16, l266 as u16)
                                              };
                                                                                                IpAddress::Ipv6(e267)
                                                                                            }
                                                                                        };

                                                                                    v267
                                                                                };
                                                                                DbValuePrimitive::Inet(e370)
                                                                            }
                                                                            23 => {
                                                                                let e370 = {
                                                                                    let l268 = i32::from(*base.add(8).cast::<u8>());
                                                                                    let v281 =
                                                                                        match l268 {
                                                                                            0 => {
                                                                                                let e281 = {
                                                let l269 = i32::from(*base.add(10).cast::<u8>());
                                                let l270 = i32::from(*base.add(11).cast::<u8>());
                                                let l271 = i32::from(*base.add(12).cast::<u8>());
                                                let l272 = i32::from(*base.add(13).cast::<u8>());

                                                (l269 as u8, l270 as u8, l271 as u8, l272 as u8)
                                              };
                                                                                                IpAddress::Ipv4(e281)
                                                                                            }
                                                                                            n => {
                                                                                                debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                                                                let e281 = {
                                                let l273 = i32::from(*base.add(10).cast::<u16>());
                                                let l274 = i32::from(*base.add(12).cast::<u16>());
                                                let l275 = i32::from(*base.add(14).cast::<u16>());
                                                let l276 = i32::from(*base.add(16).cast::<u16>());
                                                let l277 = i32::from(*base.add(18).cast::<u16>());
                                                let l278 = i32::from(*base.add(20).cast::<u16>());
                                                let l279 = i32::from(*base.add(22).cast::<u16>());
                                                let l280 = i32::from(*base.add(24).cast::<u16>());

                                                (l273 as u16, l274 as u16, l275 as u16, l276 as u16, l277 as u16, l278 as u16, l279 as u16, l280 as u16)
                                              };
                                                                                                IpAddress::Ipv6(e281)
                                                                                            }
                                                                                        };

                                                                                    v281
                                                                                };
                                                                                DbValuePrimitive::Cidr(e370)
                                                                            }
                                                                            24 => {
                                                                                let e370 = {
                                                                                    let l282 = i32::from(*base.add(8).cast::<u8>());
                                                                                    let l283 = i32::from(*base.add(9).cast::<u8>());
                                                                                    let l284 = i32::from(*base.add(10).cast::<u8>());
                                                                                    let l285 = i32::from(*base.add(11).cast::<u8>());
                                                                                    let l286 = i32::from(*base.add(12).cast::<u8>());
                                                                                    let l287 = i32::from(*base.add(13).cast::<u8>());

                                                                                    (
                                                                                        l282 as u8,
                                                                                        l283 as u8,
                                                                                        l284 as u8,
                                                                                        l285 as u8,
                                                                                        l286 as u8,
                                                                                        l287 as u8,
                                                                                    )
                                                                                };
                                                                                DbValuePrimitive::Macaddr(e370)
                                                                            }
                                                                            25 => {
                                                                                let e370 = {
                                                                                    let l288 = *base.add(8).cast::<*mut u8>();
                                                                                    let l289 = *base.add(12).cast::<usize>();
                                                                                    let base291 =
                                                                                        l288;
                                                                                    let len291 =
                                                                                        l289;
                                                                                    let mut result291 = _rt::Vec::with_capacity(len291);
                                                                                    for i in
                                                                                        0..len291
                                                                                    {
                                                                                        let base = base291.add(i * 1);
                                                                                        let e291 = {
                                                                                            let l290 = i32::from(*base.add(0).cast::<u8>());

                                                                                            _rt::bool_lift(l290 as u8)
                                                                                        };
                                                                                        result291
                                                                                            .push(
                                                                                            e291,
                                                                                        );
                                                                                    }
                                                                                    _rt::cabi_dealloc(base291, len291 * 1, 1);

                                                                                    result291
                                                                                };
                                                                                DbValuePrimitive::Bit(e370)
                                                                            }
                                                                            26 => {
                                                                                let e370 = {
                                                                                    let l292 = *base.add(8).cast::<*mut u8>();
                                                                                    let l293 = *base.add(12).cast::<usize>();
                                                                                    let base295 =
                                                                                        l292;
                                                                                    let len295 =
                                                                                        l293;
                                                                                    let mut result295 = _rt::Vec::with_capacity(len295);
                                                                                    for i in
                                                                                        0..len295
                                                                                    {
                                                                                        let base = base295.add(i * 1);
                                                                                        let e295 = {
                                                                                            let l294 = i32::from(*base.add(0).cast::<u8>());

                                                                                            _rt::bool_lift(l294 as u8)
                                                                                        };
                                                                                        result295
                                                                                            .push(
                                                                                            e295,
                                                                                        );
                                                                                    }
                                                                                    _rt::cabi_dealloc(base295, len295 * 1, 1);

                                                                                    result295
                                                                                };
                                                                                DbValuePrimitive::Varbit(e370)
                                                                            }
                                                                            27 => {
                                                                                let e370 = {
                                                                                    let l296 = i32::from(*base.add(8).cast::<u8>());
                                                                                    let l299 = i32::from(*base.add(20).cast::<u8>());

                                                                                    (match l296 {
                                            0 => None,
                                            1 => {
                                              let e = {
                                                let l297 = *base.add(12).cast::<i32>();
                                                let l298 = i32::from(*base.add(16).cast::<u8>());

                                                (l297, _rt::bool_lift(l298 as u8))
                                              };
                                              Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                          }, match l299 {
                                            0 => None,
                                            1 => {
                                              let e = {
                                                let l300 = *base.add(24).cast::<i32>();
                                                let l301 = i32::from(*base.add(28).cast::<u8>());

                                                (l300, _rt::bool_lift(l301 as u8))
                                              };
                                              Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                          })
                                                                                };
                                                                                DbValuePrimitive::Int4range(e370)
                                                                            }
                                                                            28 => {
                                                                                let e370 = {
                                                                                    let l302 = i32::from(*base.add(8).cast::<u8>());
                                                                                    let l305 = i32::from(*base.add(32).cast::<u8>());

                                                                                    (match l302 {
                                            0 => None,
                                            1 => {
                                              let e = {
                                                let l303 = *base.add(16).cast::<i64>();
                                                let l304 = i32::from(*base.add(24).cast::<u8>());

                                                (l303, _rt::bool_lift(l304 as u8))
                                              };
                                              Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                          }, match l305 {
                                            0 => None,
                                            1 => {
                                              let e = {
                                                let l306 = *base.add(40).cast::<i64>();
                                                let l307 = i32::from(*base.add(48).cast::<u8>());

                                                (l306, _rt::bool_lift(l307 as u8))
                                              };
                                              Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                          })
                                                                                };
                                                                                DbValuePrimitive::Int8range(e370)
                                                                            }
                                                                            29 => {
                                                                                let e370 = {
                                                                                    let l308 = i32::from(*base.add(8).cast::<u8>());
                                                                                    let l313 = i32::from(*base.add(24).cast::<u8>());

                                                                                    (match l308 {
                                            0 => None,
                                            1 => {
                                              let e = {
                                                let l309 = *base.add(12).cast::<*mut u8>();
                                                let l310 = *base.add(16).cast::<usize>();
                                                let len311 = l310;
                                                let bytes311 = _rt::Vec::from_raw_parts(l309.cast(), len311, len311);
                                                let l312 = i32::from(*base.add(20).cast::<u8>());

                                                (_rt::string_lift(bytes311), _rt::bool_lift(l312 as u8))
                                              };
                                              Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                          }, match l313 {
                                            0 => None,
                                            1 => {
                                              let e = {
                                                let l314 = *base.add(28).cast::<*mut u8>();
                                                let l315 = *base.add(32).cast::<usize>();
                                                let len316 = l315;
                                                let bytes316 = _rt::Vec::from_raw_parts(l314.cast(), len316, len316);
                                                let l317 = i32::from(*base.add(36).cast::<u8>());

                                                (_rt::string_lift(bytes316), _rt::bool_lift(l317 as u8))
                                              };
                                              Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                          })
                                                                                };
                                                                                DbValuePrimitive::Numrange(e370)
                                                                            }
                                                                            30 => {
                                                                                let e370 = {
                                                                                    let l318 = i32::from(*base.add(8).cast::<u8>());
                                                                                    let l327 = i32::from(*base.add(32).cast::<u8>());

                                                                                    (match l318 {
                                            0 => None,
                                            1 => {
                                              let e = {
                                                let l319 = *base.add(12).cast::<i32>();
                                                let l320 = i32::from(*base.add(16).cast::<u8>());
                                                let l321 = i32::from(*base.add(17).cast::<u8>());
                                                let l322 = i32::from(*base.add(18).cast::<u8>());
                                                let l323 = i32::from(*base.add(19).cast::<u8>());
                                                let l324 = i32::from(*base.add(20).cast::<u8>());
                                                let l325 = *base.add(24).cast::<i32>();
                                                let l326 = i32::from(*base.add(28).cast::<u8>());

                                                ((l319, l320 as u8, l321 as u8, l322 as u8, l323 as u8, l324 as u8, l325 as u32), _rt::bool_lift(l326 as u8))
                                              };
                                              Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                          }, match l327 {
                                            0 => None,
                                            1 => {
                                              let e = {
                                                let l328 = *base.add(36).cast::<i32>();
                                                let l329 = i32::from(*base.add(40).cast::<u8>());
                                                let l330 = i32::from(*base.add(41).cast::<u8>());
                                                let l331 = i32::from(*base.add(42).cast::<u8>());
                                                let l332 = i32::from(*base.add(43).cast::<u8>());
                                                let l333 = i32::from(*base.add(44).cast::<u8>());
                                                let l334 = *base.add(48).cast::<i32>();
                                                let l335 = i32::from(*base.add(52).cast::<u8>());

                                                ((l328, l329 as u8, l330 as u8, l331 as u8, l332 as u8, l333 as u8, l334 as u32), _rt::bool_lift(l335 as u8))
                                              };
                                              Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                          })
                                                                                };
                                                                                DbValuePrimitive::Tsrange(e370)
                                                                            }
                                                                            31 => {
                                                                                let e370 = {
                                                                                    let l336 = i32::from(*base.add(8).cast::<u8>());
                                                                                    let l346 = i32::from(*base.add(36).cast::<u8>());

                                                                                    (match l336 {
                                            0 => None,
                                            1 => {
                                              let e = {
                                                let l337 = *base.add(12).cast::<i32>();
                                                let l338 = i32::from(*base.add(16).cast::<u8>());
                                                let l339 = i32::from(*base.add(17).cast::<u8>());
                                                let l340 = i32::from(*base.add(18).cast::<u8>());
                                                let l341 = i32::from(*base.add(19).cast::<u8>());
                                                let l342 = i32::from(*base.add(20).cast::<u8>());
                                                let l343 = *base.add(24).cast::<i32>();
                                                let l344 = *base.add(28).cast::<i32>();
                                                let l345 = i32::from(*base.add(32).cast::<u8>());

                                                ((l337, l338 as u8, l339 as u8, l340 as u8, l341 as u8, l342 as u8, l343 as u32, l344), _rt::bool_lift(l345 as u8))
                                              };
                                              Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                          }, match l346 {
                                            0 => None,
                                            1 => {
                                              let e = {
                                                let l347 = *base.add(40).cast::<i32>();
                                                let l348 = i32::from(*base.add(44).cast::<u8>());
                                                let l349 = i32::from(*base.add(45).cast::<u8>());
                                                let l350 = i32::from(*base.add(46).cast::<u8>());
                                                let l351 = i32::from(*base.add(47).cast::<u8>());
                                                let l352 = i32::from(*base.add(48).cast::<u8>());
                                                let l353 = *base.add(52).cast::<i32>();
                                                let l354 = *base.add(56).cast::<i32>();
                                                let l355 = i32::from(*base.add(60).cast::<u8>());

                                                ((l347, l348 as u8, l349 as u8, l350 as u8, l351 as u8, l352 as u8, l353 as u32, l354), _rt::bool_lift(l355 as u8))
                                              };
                                              Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                          })
                                                                                };
                                                                                DbValuePrimitive::Tstzrange(e370)
                                                                            }
                                                                            32 => {
                                                                                let e370 = {
                                                                                    let l356 = i32::from(*base.add(8).cast::<u8>());
                                                                                    let l361 = i32::from(*base.add(24).cast::<u8>());

                                                                                    (match l356 {
                                            0 => None,
                                            1 => {
                                              let e = {
                                                let l357 = *base.add(12).cast::<i32>();
                                                let l358 = i32::from(*base.add(16).cast::<u8>());
                                                let l359 = i32::from(*base.add(17).cast::<u8>());
                                                let l360 = i32::from(*base.add(20).cast::<u8>());

                                                ((l357, l358 as u8, l359 as u8), _rt::bool_lift(l360 as u8))
                                              };
                                              Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                          }, match l361 {
                                            0 => None,
                                            1 => {
                                              let e = {
                                                let l362 = *base.add(28).cast::<i32>();
                                                let l363 = i32::from(*base.add(32).cast::<u8>());
                                                let l364 = i32::from(*base.add(33).cast::<u8>());
                                                let l365 = i32::from(*base.add(36).cast::<u8>());

                                                ((l362, l363 as u8, l364 as u8), _rt::bool_lift(l365 as u8))
                                              };
                                              Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                          })
                                                                                };
                                                                                DbValuePrimitive::Daterange(e370)
                                                                            }
                                                                            33 => {
                                                                                let e370 = {
                                                                                    let l366 = *base.add(8).cast::<i32>();

                                                                                    l366 as u32
                                                                                };
                                                                                DbValuePrimitive::Oid(e370)
                                                                            }
                                                                            34 => {
                                                                                let e370 = {
                                                                                    let l367 = *base.add(8).cast::<*mut u8>();
                                                                                    let l368 = *base.add(12).cast::<usize>();
                                                                                    let len369 =
                                                                                        l368;
                                                                                    let bytes369 = _rt::Vec::from_raw_parts(l367.cast(), len369, len369);

                                                                                    _rt::string_lift(
                                                                                        bytes369,
                                                                                    )
                                                                                };
                                                                                DbValuePrimitive::CustomEnum(e370)
                                                                            }
                                                                            n => {
                                                                                debug_assert_eq!(n, 35, "invalid enum discriminant");
                                                                                DbValuePrimitive::Null
                                                                            }
                                                                        };

                                                                        v370
                                                                    };
                                                                    result371.push(e371);
                                                                }
                                                                _rt::cabi_dealloc(
                                                                    base371,
                                                                    len371 * 64,
                                                                    8,
                                                                );

                                                                result371
                                                            };
                                                            DbValue::Array(e372)
                                                        }
                                                    };

                                                    v372
                                                };
                                                result373.push(e373);
                                            }
                                            _rt::cabi_dealloc(base373, len373 * 72, 8);

                                            DbRow { values: result373 }
                                        };
                                        result374.push(e374);
                                    }
                                    _rt::cabi_dealloc(base374, len374 * 8, 4);

                                    result374
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl DbConnection {
                #[allow(unused_unsafe, clippy::all)]
                pub fn open(address: &str) -> Result<DbConnection, Error> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let vec0 = address;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:rdbms/postgres@0.0.1")]
                        extern "C" {
                            #[link_name = "[static]db-connection.open"]
                            fn wit_import(_: *mut u8, _: usize, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import(ptr0.cast_mut(), len0, ptr1);
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => {
                                let e = {
                                    let l3 = *ptr1.add(4).cast::<i32>();

                                    DbConnection::from_handle(l3 as u32)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l4 = i32::from(*ptr1.add(4).cast::<u8>());
                                    let v20 = match l4 {
                                        0 => {
                                            let e20 = {
                                                let l5 = *ptr1.add(8).cast::<*mut u8>();
                                                let l6 = *ptr1.add(12).cast::<usize>();
                                                let len7 = l6;
                                                let bytes7 =
                                                    _rt::Vec::from_raw_parts(l5.cast(), len7, len7);

                                                _rt::string_lift(bytes7)
                                            };
                                            Error::ConnectionFailure(e20)
                                        }
                                        1 => {
                                            let e20 = {
                                                let l8 = *ptr1.add(8).cast::<*mut u8>();
                                                let l9 = *ptr1.add(12).cast::<usize>();
                                                let len10 = l9;
                                                let bytes10 = _rt::Vec::from_raw_parts(
                                                    l8.cast(),
                                                    len10,
                                                    len10,
                                                );

                                                _rt::string_lift(bytes10)
                                            };
                                            Error::QueryParameterFailure(e20)
                                        }
                                        2 => {
                                            let e20 = {
                                                let l11 = *ptr1.add(8).cast::<*mut u8>();
                                                let l12 = *ptr1.add(12).cast::<usize>();
                                                let len13 = l12;
                                                let bytes13 = _rt::Vec::from_raw_parts(
                                                    l11.cast(),
                                                    len13,
                                                    len13,
                                                );

                                                _rt::string_lift(bytes13)
                                            };
                                            Error::QueryExecutionFailure(e20)
                                        }
                                        3 => {
                                            let e20 = {
                                                let l14 = *ptr1.add(8).cast::<*mut u8>();
                                                let l15 = *ptr1.add(12).cast::<usize>();
                                                let len16 = l15;
                                                let bytes16 = _rt::Vec::from_raw_parts(
                                                    l14.cast(),
                                                    len16,
                                                    len16,
                                                );

                                                _rt::string_lift(bytes16)
                                            };
                                            Error::QueryResponseFailure(e20)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 4, "invalid enum discriminant");
                                            let e20 = {
                                                let l17 = *ptr1.add(8).cast::<*mut u8>();
                                                let l18 = *ptr1.add(12).cast::<usize>();
                                                let len19 = l18;
                                                let bytes19 = _rt::Vec::from_raw_parts(
                                                    l17.cast(),
                                                    len19,
                                                    len19,
                                                );

                                                _rt::string_lift(bytes19)
                                            };
                                            Error::Other(e20)
                                        }
                                    };

                                    v20
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl DbConnection {
                #[allow(unused_unsafe, clippy::all)]
                pub fn query(
                    &self,
                    statement: &str,
                    params: &[DbValue],
                ) -> Result<DbResultSet, Error> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let vec0 = statement;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec100 = params;
                        let len100 = vec100.len();
                        let layout100 =
                            _rt::alloc::Layout::from_size_align_unchecked(vec100.len() * 72, 8);
                        let result100 = if layout100.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout100).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout100);
                            }
                            ptr
                        } else {
                            {
                                ::core::ptr::null_mut()
                            }
                        };
                        for (i, e) in vec100.into_iter().enumerate() {
                            let base = result100.add(i * 72);
                            {
                                match e {
                                    DbValue::Primitive(e) => {
                                        *base.add(0).cast::<u8>() = (0i32) as u8;
                                        match e {
                                            DbValuePrimitive::Character(e) => {
                                                *base.add(8).cast::<u8>() = (0i32) as u8;
                                                *base.add(16).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            DbValuePrimitive::Int2(e) => {
                                                *base.add(8).cast::<u8>() = (1i32) as u8;
                                                *base.add(16).cast::<u16>() =
                                                    (_rt::as_i32(e)) as u16;
                                            }
                                            DbValuePrimitive::Int4(e) => {
                                                *base.add(8).cast::<u8>() = (2i32) as u8;
                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            DbValuePrimitive::Int8(e) => {
                                                *base.add(8).cast::<u8>() = (3i32) as u8;
                                                *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            DbValuePrimitive::Float4(e) => {
                                                *base.add(8).cast::<u8>() = (4i32) as u8;
                                                *base.add(16).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            DbValuePrimitive::Float8(e) => {
                                                *base.add(8).cast::<u8>() = (5i32) as u8;
                                                *base.add(16).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            DbValuePrimitive::Numeric(e) => {
                                                *base.add(8).cast::<u8>() = (6i32) as u8;
                                                let vec1 = e;
                                                let ptr1 = vec1.as_ptr().cast::<u8>();
                                                let len1 = vec1.len();
                                                *base.add(20).cast::<usize>() = len1;
                                                *base.add(16).cast::<*mut u8>() = ptr1.cast_mut();
                                            }
                                            DbValuePrimitive::Boolean(e) => {
                                                *base.add(8).cast::<u8>() = (7i32) as u8;
                                                *base.add(16).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                })
                                                    as u8;
                                            }
                                            DbValuePrimitive::Text(e) => {
                                                *base.add(8).cast::<u8>() = (8i32) as u8;
                                                let vec2 = e;
                                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                                let len2 = vec2.len();
                                                *base.add(20).cast::<usize>() = len2;
                                                *base.add(16).cast::<*mut u8>() = ptr2.cast_mut();
                                            }
                                            DbValuePrimitive::Varchar(e) => {
                                                *base.add(8).cast::<u8>() = (9i32) as u8;
                                                let vec3 = e;
                                                let ptr3 = vec3.as_ptr().cast::<u8>();
                                                let len3 = vec3.len();
                                                *base.add(20).cast::<usize>() = len3;
                                                *base.add(16).cast::<*mut u8>() = ptr3.cast_mut();
                                            }
                                            DbValuePrimitive::Bpchar(e) => {
                                                *base.add(8).cast::<u8>() = (10i32) as u8;
                                                let vec4 = e;
                                                let ptr4 = vec4.as_ptr().cast::<u8>();
                                                let len4 = vec4.len();
                                                *base.add(20).cast::<usize>() = len4;
                                                *base.add(16).cast::<*mut u8>() = ptr4.cast_mut();
                                            }
                                            DbValuePrimitive::Timestamp(e) => {
                                                *base.add(8).cast::<u8>() = (11i32) as u8;
                                                let (t5_0, t5_1, t5_2, t5_3, t5_4, t5_5, t5_6) = e;
                                                *base.add(16).cast::<i32>() = _rt::as_i32(t5_0);
                                                *base.add(20).cast::<u8>() =
                                                    (_rt::as_i32(t5_1)) as u8;
                                                *base.add(21).cast::<u8>() =
                                                    (_rt::as_i32(t5_2)) as u8;
                                                *base.add(22).cast::<u8>() =
                                                    (_rt::as_i32(t5_3)) as u8;
                                                *base.add(23).cast::<u8>() =
                                                    (_rt::as_i32(t5_4)) as u8;
                                                *base.add(24).cast::<u8>() =
                                                    (_rt::as_i32(t5_5)) as u8;
                                                *base.add(28).cast::<i32>() = _rt::as_i32(t5_6);
                                            }
                                            DbValuePrimitive::Timestamptz(e) => {
                                                *base.add(8).cast::<u8>() = (12i32) as u8;
                                                let (
                                                    t6_0,
                                                    t6_1,
                                                    t6_2,
                                                    t6_3,
                                                    t6_4,
                                                    t6_5,
                                                    t6_6,
                                                    t6_7,
                                                ) = e;
                                                *base.add(16).cast::<i32>() = _rt::as_i32(t6_0);
                                                *base.add(20).cast::<u8>() =
                                                    (_rt::as_i32(t6_1)) as u8;
                                                *base.add(21).cast::<u8>() =
                                                    (_rt::as_i32(t6_2)) as u8;
                                                *base.add(22).cast::<u8>() =
                                                    (_rt::as_i32(t6_3)) as u8;
                                                *base.add(23).cast::<u8>() =
                                                    (_rt::as_i32(t6_4)) as u8;
                                                *base.add(24).cast::<u8>() =
                                                    (_rt::as_i32(t6_5)) as u8;
                                                *base.add(28).cast::<i32>() = _rt::as_i32(t6_6);
                                                *base.add(32).cast::<i32>() = _rt::as_i32(t6_7);
                                            }
                                            DbValuePrimitive::Date(e) => {
                                                *base.add(8).cast::<u8>() = (13i32) as u8;
                                                let (t7_0, t7_1, t7_2) = e;
                                                *base.add(16).cast::<i32>() = _rt::as_i32(t7_0);
                                                *base.add(20).cast::<u8>() =
                                                    (_rt::as_i32(t7_1)) as u8;
                                                *base.add(21).cast::<u8>() =
                                                    (_rt::as_i32(t7_2)) as u8;
                                            }
                                            DbValuePrimitive::Time(e) => {
                                                *base.add(8).cast::<u8>() = (14i32) as u8;
                                                let (t8_0, t8_1, t8_2, t8_3) = e;
                                                *base.add(16).cast::<u8>() =
                                                    (_rt::as_i32(t8_0)) as u8;
                                                *base.add(17).cast::<u8>() =
                                                    (_rt::as_i32(t8_1)) as u8;
                                                *base.add(18).cast::<u8>() =
                                                    (_rt::as_i32(t8_2)) as u8;
                                                *base.add(20).cast::<i32>() = _rt::as_i32(t8_3);
                                            }
                                            DbValuePrimitive::Timetz(e) => {
                                                *base.add(8).cast::<u8>() = (15i32) as u8;
                                                let (t9_0, t9_1, t9_2, t9_3, t9_4) = e;
                                                *base.add(16).cast::<u8>() =
                                                    (_rt::as_i32(t9_0)) as u8;
                                                *base.add(17).cast::<u8>() =
                                                    (_rt::as_i32(t9_1)) as u8;
                                                *base.add(18).cast::<u8>() =
                                                    (_rt::as_i32(t9_2)) as u8;
                                                *base.add(20).cast::<i32>() = _rt::as_i32(t9_3);
                                                *base.add(24).cast::<i32>() = _rt::as_i32(t9_4);
                                            }
                                            DbValuePrimitive::Interval(e) => {
                                                *base.add(8).cast::<u8>() = (16i32) as u8;
                                                let (t10_0, t10_1, t10_2) = e;
                                                *base.add(16).cast::<i32>() = _rt::as_i32(t10_0);
                                                *base.add(20).cast::<i32>() = _rt::as_i32(t10_1);
                                                *base.add(24).cast::<i64>() = _rt::as_i64(t10_2);
                                            }
                                            DbValuePrimitive::Bytea(e) => {
                                                *base.add(8).cast::<u8>() = (17i32) as u8;
                                                let vec11 = e;
                                                let ptr11 = vec11.as_ptr().cast::<u8>();
                                                let len11 = vec11.len();
                                                *base.add(20).cast::<usize>() = len11;
                                                *base.add(16).cast::<*mut u8>() = ptr11.cast_mut();
                                            }
                                            DbValuePrimitive::Json(e) => {
                                                *base.add(8).cast::<u8>() = (18i32) as u8;
                                                let vec12 = e;
                                                let ptr12 = vec12.as_ptr().cast::<u8>();
                                                let len12 = vec12.len();
                                                *base.add(20).cast::<usize>() = len12;
                                                *base.add(16).cast::<*mut u8>() = ptr12.cast_mut();
                                            }
                                            DbValuePrimitive::Jsonb(e) => {
                                                *base.add(8).cast::<u8>() = (19i32) as u8;
                                                let vec13 = e;
                                                let ptr13 = vec13.as_ptr().cast::<u8>();
                                                let len13 = vec13.len();
                                                *base.add(20).cast::<usize>() = len13;
                                                *base.add(16).cast::<*mut u8>() = ptr13.cast_mut();
                                            }
                                            DbValuePrimitive::Xml(e) => {
                                                *base.add(8).cast::<u8>() = (20i32) as u8;
                                                let vec14 = e;
                                                let ptr14 = vec14.as_ptr().cast::<u8>();
                                                let len14 = vec14.len();
                                                *base.add(20).cast::<usize>() = len14;
                                                *base.add(16).cast::<*mut u8>() = ptr14.cast_mut();
                                            }
                                            DbValuePrimitive::Uuid(e) => {
                                                *base.add(8).cast::<u8>() = (21i32) as u8;
                                                let (t15_0, t15_1) = e;
                                                *base.add(16).cast::<i64>() = _rt::as_i64(t15_0);
                                                *base.add(24).cast::<i64>() = _rt::as_i64(t15_1);
                                            }
                                            DbValuePrimitive::Inet(e) => {
                                                *base.add(8).cast::<u8>() = (22i32) as u8;
                                                match e {
                                                    IpAddress::Ipv4(e) => {
                                                        *base.add(16).cast::<u8>() = (0i32) as u8;
                                                        let (t16_0, t16_1, t16_2, t16_3) = e;
                                                        *base.add(18).cast::<u8>() =
                                                            (_rt::as_i32(t16_0)) as u8;
                                                        *base.add(19).cast::<u8>() =
                                                            (_rt::as_i32(t16_1)) as u8;
                                                        *base.add(20).cast::<u8>() =
                                                            (_rt::as_i32(t16_2)) as u8;
                                                        *base.add(21).cast::<u8>() =
                                                            (_rt::as_i32(t16_3)) as u8;
                                                    }
                                                    IpAddress::Ipv6(e) => {
                                                        *base.add(16).cast::<u8>() = (1i32) as u8;
                                                        let (
                                                            t17_0,
                                                            t17_1,
                                                            t17_2,
                                                            t17_3,
                                                            t17_4,
                                                            t17_5,
                                                            t17_6,
                                                            t17_7,
                                                        ) = e;
                                                        *base.add(18).cast::<u16>() =
                                                            (_rt::as_i32(t17_0)) as u16;
                                                        *base.add(20).cast::<u16>() =
                                                            (_rt::as_i32(t17_1)) as u16;
                                                        *base.add(22).cast::<u16>() =
                                                            (_rt::as_i32(t17_2)) as u16;
                                                        *base.add(24).cast::<u16>() =
                                                            (_rt::as_i32(t17_3)) as u16;
                                                        *base.add(26).cast::<u16>() =
                                                            (_rt::as_i32(t17_4)) as u16;
                                                        *base.add(28).cast::<u16>() =
                                                            (_rt::as_i32(t17_5)) as u16;
                                                        *base.add(30).cast::<u16>() =
                                                            (_rt::as_i32(t17_6)) as u16;
                                                        *base.add(32).cast::<u16>() =
                                                            (_rt::as_i32(t17_7)) as u16;
                                                    }
                                                }
                                            }
                                            DbValuePrimitive::Cidr(e) => {
                                                *base.add(8).cast::<u8>() = (23i32) as u8;
                                                match e {
                                                    IpAddress::Ipv4(e) => {
                                                        *base.add(16).cast::<u8>() = (0i32) as u8;
                                                        let (t18_0, t18_1, t18_2, t18_3) = e;
                                                        *base.add(18).cast::<u8>() =
                                                            (_rt::as_i32(t18_0)) as u8;
                                                        *base.add(19).cast::<u8>() =
                                                            (_rt::as_i32(t18_1)) as u8;
                                                        *base.add(20).cast::<u8>() =
                                                            (_rt::as_i32(t18_2)) as u8;
                                                        *base.add(21).cast::<u8>() =
                                                            (_rt::as_i32(t18_3)) as u8;
                                                    }
                                                    IpAddress::Ipv6(e) => {
                                                        *base.add(16).cast::<u8>() = (1i32) as u8;
                                                        let (
                                                            t19_0,
                                                            t19_1,
                                                            t19_2,
                                                            t19_3,
                                                            t19_4,
                                                            t19_5,
                                                            t19_6,
                                                            t19_7,
                                                        ) = e;
                                                        *base.add(18).cast::<u16>() =
                                                            (_rt::as_i32(t19_0)) as u16;
                                                        *base.add(20).cast::<u16>() =
                                                            (_rt::as_i32(t19_1)) as u16;
                                                        *base.add(22).cast::<u16>() =
                                                            (_rt::as_i32(t19_2)) as u16;
                                                        *base.add(24).cast::<u16>() =
                                                            (_rt::as_i32(t19_3)) as u16;
                                                        *base.add(26).cast::<u16>() =
                                                            (_rt::as_i32(t19_4)) as u16;
                                                        *base.add(28).cast::<u16>() =
                                                            (_rt::as_i32(t19_5)) as u16;
                                                        *base.add(30).cast::<u16>() =
                                                            (_rt::as_i32(t19_6)) as u16;
                                                        *base.add(32).cast::<u16>() =
                                                            (_rt::as_i32(t19_7)) as u16;
                                                    }
                                                }
                                            }
                                            DbValuePrimitive::Macaddr(e) => {
                                                *base.add(8).cast::<u8>() = (24i32) as u8;
                                                let (t20_0, t20_1, t20_2, t20_3, t20_4, t20_5) = e;
                                                *base.add(16).cast::<u8>() =
                                                    (_rt::as_i32(t20_0)) as u8;
                                                *base.add(17).cast::<u8>() =
                                                    (_rt::as_i32(t20_1)) as u8;
                                                *base.add(18).cast::<u8>() =
                                                    (_rt::as_i32(t20_2)) as u8;
                                                *base.add(19).cast::<u8>() =
                                                    (_rt::as_i32(t20_3)) as u8;
                                                *base.add(20).cast::<u8>() =
                                                    (_rt::as_i32(t20_4)) as u8;
                                                *base.add(21).cast::<u8>() =
                                                    (_rt::as_i32(t20_5)) as u8;
                                            }
                                            DbValuePrimitive::Bit(e) => {
                                                *base.add(8).cast::<u8>() = (25i32) as u8;
                                                let vec21 = e;
                                                let len21 = vec21.len();
                                                let layout21 =
                                                    _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec21.len() * 1,
                                                        1,
                                                    );
                                                let result21 = if layout21.size() != 0 {
                                                    let ptr =
                                                        _rt::alloc::alloc(layout21).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout21);
                                                    }
                                                    ptr
                                                } else {
                                                    {
                                                        ::core::ptr::null_mut()
                                                    }
                                                };
                                                for (i, e) in vec21.into_iter().enumerate() {
                                                    let base = result21.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        })
                                                            as u8;
                                                    }
                                                }
                                                *base.add(20).cast::<usize>() = len21;
                                                *base.add(16).cast::<*mut u8>() = result21;
                                                cleanup_list
                                                    .extend_from_slice(&[(result21, layout21)]);
                                            }
                                            DbValuePrimitive::Varbit(e) => {
                                                *base.add(8).cast::<u8>() = (26i32) as u8;
                                                let vec22 = e;
                                                let len22 = vec22.len();
                                                let layout22 =
                                                    _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec22.len() * 1,
                                                        1,
                                                    );
                                                let result22 = if layout22.size() != 0 {
                                                    let ptr =
                                                        _rt::alloc::alloc(layout22).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout22);
                                                    }
                                                    ptr
                                                } else {
                                                    {
                                                        ::core::ptr::null_mut()
                                                    }
                                                };
                                                for (i, e) in vec22.into_iter().enumerate() {
                                                    let base = result22.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        })
                                                            as u8;
                                                    }
                                                }
                                                *base.add(20).cast::<usize>() = len22;
                                                *base.add(16).cast::<*mut u8>() = result22;
                                                cleanup_list
                                                    .extend_from_slice(&[(result22, layout22)]);
                                            }
                                            DbValuePrimitive::Int4range(e) => {
                                                *base.add(8).cast::<u8>() = (27i32) as u8;
                                                let (t23_0, t23_1) = e;
                                                match t23_0 {
                                                    Some(e) => {
                                                        *base.add(16).cast::<u8>() = (1i32) as u8;
                                                        let (t24_0, t24_1) = e;
                                                        *base.add(20).cast::<i32>() =
                                                            _rt::as_i32(t24_0);
                                                        *base.add(24).cast::<u8>() = (match t24_1 {
                                                            true => 1,
                                                            false => 0,
                                                        })
                                                            as u8;
                                                    }
                                                    None => {
                                                        *base.add(16).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                                match t23_1 {
                                                    Some(e) => {
                                                        *base.add(28).cast::<u8>() = (1i32) as u8;
                                                        let (t25_0, t25_1) = e;
                                                        *base.add(32).cast::<i32>() =
                                                            _rt::as_i32(t25_0);
                                                        *base.add(36).cast::<u8>() = (match t25_1 {
                                                            true => 1,
                                                            false => 0,
                                                        })
                                                            as u8;
                                                    }
                                                    None => {
                                                        *base.add(28).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            DbValuePrimitive::Int8range(e) => {
                                                *base.add(8).cast::<u8>() = (28i32) as u8;
                                                let (t26_0, t26_1) = e;
                                                match t26_0 {
                                                    Some(e) => {
                                                        *base.add(16).cast::<u8>() = (1i32) as u8;
                                                        let (t27_0, t27_1) = e;
                                                        *base.add(24).cast::<i64>() =
                                                            _rt::as_i64(t27_0);
                                                        *base.add(32).cast::<u8>() = (match t27_1 {
                                                            true => 1,
                                                            false => 0,
                                                        })
                                                            as u8;
                                                    }
                                                    None => {
                                                        *base.add(16).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                                match t26_1 {
                                                    Some(e) => {
                                                        *base.add(40).cast::<u8>() = (1i32) as u8;
                                                        let (t28_0, t28_1) = e;
                                                        *base.add(48).cast::<i64>() =
                                                            _rt::as_i64(t28_0);
                                                        *base.add(56).cast::<u8>() = (match t28_1 {
                                                            true => 1,
                                                            false => 0,
                                                        })
                                                            as u8;
                                                    }
                                                    None => {
                                                        *base.add(40).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            DbValuePrimitive::Numrange(e) => {
                                                *base.add(8).cast::<u8>() = (29i32) as u8;
                                                let (t29_0, t29_1) = e;
                                                match t29_0 {
                                                    Some(e) => {
                                                        *base.add(16).cast::<u8>() = (1i32) as u8;
                                                        let (t30_0, t30_1) = e;
                                                        let vec31 = t30_0;
                                                        let ptr31 = vec31.as_ptr().cast::<u8>();
                                                        let len31 = vec31.len();
                                                        *base.add(24).cast::<usize>() = len31;
                                                        *base.add(20).cast::<*mut u8>() =
                                                            ptr31.cast_mut();
                                                        *base.add(28).cast::<u8>() = (match t30_1 {
                                                            true => 1,
                                                            false => 0,
                                                        })
                                                            as u8;
                                                    }
                                                    None => {
                                                        *base.add(16).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                                match t29_1 {
                                                    Some(e) => {
                                                        *base.add(32).cast::<u8>() = (1i32) as u8;
                                                        let (t32_0, t32_1) = e;
                                                        let vec33 = t32_0;
                                                        let ptr33 = vec33.as_ptr().cast::<u8>();
                                                        let len33 = vec33.len();
                                                        *base.add(40).cast::<usize>() = len33;
                                                        *base.add(36).cast::<*mut u8>() =
                                                            ptr33.cast_mut();
                                                        *base.add(44).cast::<u8>() = (match t32_1 {
                                                            true => 1,
                                                            false => 0,
                                                        })
                                                            as u8;
                                                    }
                                                    None => {
                                                        *base.add(32).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            DbValuePrimitive::Tsrange(e) => {
                                                *base.add(8).cast::<u8>() = (30i32) as u8;
                                                let (t34_0, t34_1) = e;
                                                match t34_0 {
                                                    Some(e) => {
                                                        *base.add(16).cast::<u8>() = (1i32) as u8;
                                                        let (t35_0, t35_1) = e;
                                                        let (
                                                            t36_0,
                                                            t36_1,
                                                            t36_2,
                                                            t36_3,
                                                            t36_4,
                                                            t36_5,
                                                            t36_6,
                                                        ) = t35_0;
                                                        *base.add(20).cast::<i32>() =
                                                            _rt::as_i32(t36_0);
                                                        *base.add(24).cast::<u8>() =
                                                            (_rt::as_i32(t36_1)) as u8;
                                                        *base.add(25).cast::<u8>() =
                                                            (_rt::as_i32(t36_2)) as u8;
                                                        *base.add(26).cast::<u8>() =
                                                            (_rt::as_i32(t36_3)) as u8;
                                                        *base.add(27).cast::<u8>() =
                                                            (_rt::as_i32(t36_4)) as u8;
                                                        *base.add(28).cast::<u8>() =
                                                            (_rt::as_i32(t36_5)) as u8;
                                                        *base.add(32).cast::<i32>() =
                                                            _rt::as_i32(t36_6);
                                                        *base.add(36).cast::<u8>() = (match t35_1 {
                                                            true => 1,
                                                            false => 0,
                                                        })
                                                            as u8;
                                                    }
                                                    None => {
                                                        *base.add(16).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                                match t34_1 {
                                                    Some(e) => {
                                                        *base.add(40).cast::<u8>() = (1i32) as u8;
                                                        let (t37_0, t37_1) = e;
                                                        let (
                                                            t38_0,
                                                            t38_1,
                                                            t38_2,
                                                            t38_3,
                                                            t38_4,
                                                            t38_5,
                                                            t38_6,
                                                        ) = t37_0;
                                                        *base.add(44).cast::<i32>() =
                                                            _rt::as_i32(t38_0);
                                                        *base.add(48).cast::<u8>() =
                                                            (_rt::as_i32(t38_1)) as u8;
                                                        *base.add(49).cast::<u8>() =
                                                            (_rt::as_i32(t38_2)) as u8;
                                                        *base.add(50).cast::<u8>() =
                                                            (_rt::as_i32(t38_3)) as u8;
                                                        *base.add(51).cast::<u8>() =
                                                            (_rt::as_i32(t38_4)) as u8;
                                                        *base.add(52).cast::<u8>() =
                                                            (_rt::as_i32(t38_5)) as u8;
                                                        *base.add(56).cast::<i32>() =
                                                            _rt::as_i32(t38_6);
                                                        *base.add(60).cast::<u8>() = (match t37_1 {
                                                            true => 1,
                                                            false => 0,
                                                        })
                                                            as u8;
                                                    }
                                                    None => {
                                                        *base.add(40).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            DbValuePrimitive::Tstzrange(e) => {
                                                *base.add(8).cast::<u8>() = (31i32) as u8;
                                                let (t39_0, t39_1) = e;
                                                match t39_0 {
                                                    Some(e) => {
                                                        *base.add(16).cast::<u8>() = (1i32) as u8;
                                                        let (t40_0, t40_1) = e;
                                                        let (
                                                            t41_0,
                                                            t41_1,
                                                            t41_2,
                                                            t41_3,
                                                            t41_4,
                                                            t41_5,
                                                            t41_6,
                                                            t41_7,
                                                        ) = t40_0;
                                                        *base.add(20).cast::<i32>() =
                                                            _rt::as_i32(t41_0);
                                                        *base.add(24).cast::<u8>() =
                                                            (_rt::as_i32(t41_1)) as u8;
                                                        *base.add(25).cast::<u8>() =
                                                            (_rt::as_i32(t41_2)) as u8;
                                                        *base.add(26).cast::<u8>() =
                                                            (_rt::as_i32(t41_3)) as u8;
                                                        *base.add(27).cast::<u8>() =
                                                            (_rt::as_i32(t41_4)) as u8;
                                                        *base.add(28).cast::<u8>() =
                                                            (_rt::as_i32(t41_5)) as u8;
                                                        *base.add(32).cast::<i32>() =
                                                            _rt::as_i32(t41_6);
                                                        *base.add(36).cast::<i32>() =
                                                            _rt::as_i32(t41_7);
                                                        *base.add(40).cast::<u8>() = (match t40_1 {
                                                            true => 1,
                                                            false => 0,
                                                        })
                                                            as u8;
                                                    }
                                                    None => {
                                                        *base.add(16).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                                match t39_1 {
                                                    Some(e) => {
                                                        *base.add(44).cast::<u8>() = (1i32) as u8;
                                                        let (t42_0, t42_1) = e;
                                                        let (
                                                            t43_0,
                                                            t43_1,
                                                            t43_2,
                                                            t43_3,
                                                            t43_4,
                                                            t43_5,
                                                            t43_6,
                                                            t43_7,
                                                        ) = t42_0;
                                                        *base.add(48).cast::<i32>() =
                                                            _rt::as_i32(t43_0);
                                                        *base.add(52).cast::<u8>() =
                                                            (_rt::as_i32(t43_1)) as u8;
                                                        *base.add(53).cast::<u8>() =
                                                            (_rt::as_i32(t43_2)) as u8;
                                                        *base.add(54).cast::<u8>() =
                                                            (_rt::as_i32(t43_3)) as u8;
                                                        *base.add(55).cast::<u8>() =
                                                            (_rt::as_i32(t43_4)) as u8;
                                                        *base.add(56).cast::<u8>() =
                                                            (_rt::as_i32(t43_5)) as u8;
                                                        *base.add(60).cast::<i32>() =
                                                            _rt::as_i32(t43_6);
                                                        *base.add(64).cast::<i32>() =
                                                            _rt::as_i32(t43_7);
                                                        *base.add(68).cast::<u8>() = (match t42_1 {
                                                            true => 1,
                                                            false => 0,
                                                        })
                                                            as u8;
                                                    }
                                                    None => {
                                                        *base.add(44).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            DbValuePrimitive::Daterange(e) => {
                                                *base.add(8).cast::<u8>() = (32i32) as u8;
                                                let (t44_0, t44_1) = e;
                                                match t44_0 {
                                                    Some(e) => {
                                                        *base.add(16).cast::<u8>() = (1i32) as u8;
                                                        let (t45_0, t45_1) = e;
                                                        let (t46_0, t46_1, t46_2) = t45_0;
                                                        *base.add(20).cast::<i32>() =
                                                            _rt::as_i32(t46_0);
                                                        *base.add(24).cast::<u8>() =
                                                            (_rt::as_i32(t46_1)) as u8;
                                                        *base.add(25).cast::<u8>() =
                                                            (_rt::as_i32(t46_2)) as u8;
                                                        *base.add(28).cast::<u8>() = (match t45_1 {
                                                            true => 1,
                                                            false => 0,
                                                        })
                                                            as u8;
                                                    }
                                                    None => {
                                                        *base.add(16).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                                match t44_1 {
                                                    Some(e) => {
                                                        *base.add(32).cast::<u8>() = (1i32) as u8;
                                                        let (t47_0, t47_1) = e;
                                                        let (t48_0, t48_1, t48_2) = t47_0;
                                                        *base.add(36).cast::<i32>() =
                                                            _rt::as_i32(t48_0);
                                                        *base.add(40).cast::<u8>() =
                                                            (_rt::as_i32(t48_1)) as u8;
                                                        *base.add(41).cast::<u8>() =
                                                            (_rt::as_i32(t48_2)) as u8;
                                                        *base.add(44).cast::<u8>() = (match t47_1 {
                                                            true => 1,
                                                            false => 0,
                                                        })
                                                            as u8;
                                                    }
                                                    None => {
                                                        *base.add(32).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            DbValuePrimitive::Oid(e) => {
                                                *base.add(8).cast::<u8>() = (33i32) as u8;
                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            DbValuePrimitive::CustomEnum(e) => {
                                                *base.add(8).cast::<u8>() = (34i32) as u8;
                                                let vec49 = e;
                                                let ptr49 = vec49.as_ptr().cast::<u8>();
                                                let len49 = vec49.len();
                                                *base.add(20).cast::<usize>() = len49;
                                                *base.add(16).cast::<*mut u8>() = ptr49.cast_mut();
                                            }
                                            DbValuePrimitive::Null => {
                                                *base.add(8).cast::<u8>() = (35i32) as u8;
                                            }
                                        }
                                    }
                                    DbValue::Array(e) => {
                                        *base.add(0).cast::<u8>() = (1i32) as u8;
                                        let vec99 = e;
                                        let len99 = vec99.len();
                                        let layout99 =
                                            _rt::alloc::Layout::from_size_align_unchecked(
                                                vec99.len() * 64,
                                                8,
                                            );
                                        let result99 = if layout99.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout99).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout99);
                                            }
                                            ptr
                                        } else {
                                            {
                                                ::core::ptr::null_mut()
                                            }
                                        };
                                        for (i, e) in vec99.into_iter().enumerate() {
                                            let base = result99.add(i * 64);
                                            {
                                                match e {
                                                    DbValuePrimitive::Character(e) => {
                                                        *base.add(0).cast::<u8>() = (0i32) as u8;
                                                        *base.add(8).cast::<u8>() =
                                                            (_rt::as_i32(e)) as u8;
                                                    }
                                                    DbValuePrimitive::Int2(e) => {
                                                        *base.add(0).cast::<u8>() = (1i32) as u8;
                                                        *base.add(8).cast::<u16>() =
                                                            (_rt::as_i32(e)) as u16;
                                                    }
                                                    DbValuePrimitive::Int4(e) => {
                                                        *base.add(0).cast::<u8>() = (2i32) as u8;
                                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    DbValuePrimitive::Int8(e) => {
                                                        *base.add(0).cast::<u8>() = (3i32) as u8;
                                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                    }
                                                    DbValuePrimitive::Float4(e) => {
                                                        *base.add(0).cast::<u8>() = (4i32) as u8;
                                                        *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                                    }
                                                    DbValuePrimitive::Float8(e) => {
                                                        *base.add(0).cast::<u8>() = (5i32) as u8;
                                                        *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                                    }
                                                    DbValuePrimitive::Numeric(e) => {
                                                        *base.add(0).cast::<u8>() = (6i32) as u8;
                                                        let vec50 = e;
                                                        let ptr50 = vec50.as_ptr().cast::<u8>();
                                                        let len50 = vec50.len();
                                                        *base.add(12).cast::<usize>() = len50;
                                                        *base.add(8).cast::<*mut u8>() =
                                                            ptr50.cast_mut();
                                                    }
                                                    DbValuePrimitive::Boolean(e) => {
                                                        *base.add(0).cast::<u8>() = (7i32) as u8;
                                                        *base.add(8).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        })
                                                            as u8;
                                                    }
                                                    DbValuePrimitive::Text(e) => {
                                                        *base.add(0).cast::<u8>() = (8i32) as u8;
                                                        let vec51 = e;
                                                        let ptr51 = vec51.as_ptr().cast::<u8>();
                                                        let len51 = vec51.len();
                                                        *base.add(12).cast::<usize>() = len51;
                                                        *base.add(8).cast::<*mut u8>() =
                                                            ptr51.cast_mut();
                                                    }
                                                    DbValuePrimitive::Varchar(e) => {
                                                        *base.add(0).cast::<u8>() = (9i32) as u8;
                                                        let vec52 = e;
                                                        let ptr52 = vec52.as_ptr().cast::<u8>();
                                                        let len52 = vec52.len();
                                                        *base.add(12).cast::<usize>() = len52;
                                                        *base.add(8).cast::<*mut u8>() =
                                                            ptr52.cast_mut();
                                                    }
                                                    DbValuePrimitive::Bpchar(e) => {
                                                        *base.add(0).cast::<u8>() = (10i32) as u8;
                                                        let vec53 = e;
                                                        let ptr53 = vec53.as_ptr().cast::<u8>();
                                                        let len53 = vec53.len();
                                                        *base.add(12).cast::<usize>() = len53;
                                                        *base.add(8).cast::<*mut u8>() =
                                                            ptr53.cast_mut();
                                                    }
                                                    DbValuePrimitive::Timestamp(e) => {
                                                        *base.add(0).cast::<u8>() = (11i32) as u8;
                                                        let (
                                                            t54_0,
                                                            t54_1,
                                                            t54_2,
                                                            t54_3,
                                                            t54_4,
                                                            t54_5,
                                                            t54_6,
                                                        ) = e;
                                                        *base.add(8).cast::<i32>() =
                                                            _rt::as_i32(t54_0);
                                                        *base.add(12).cast::<u8>() =
                                                            (_rt::as_i32(t54_1)) as u8;
                                                        *base.add(13).cast::<u8>() =
                                                            (_rt::as_i32(t54_2)) as u8;
                                                        *base.add(14).cast::<u8>() =
                                                            (_rt::as_i32(t54_3)) as u8;
                                                        *base.add(15).cast::<u8>() =
                                                            (_rt::as_i32(t54_4)) as u8;
                                                        *base.add(16).cast::<u8>() =
                                                            (_rt::as_i32(t54_5)) as u8;
                                                        *base.add(20).cast::<i32>() =
                                                            _rt::as_i32(t54_6);
                                                    }
                                                    DbValuePrimitive::Timestamptz(e) => {
                                                        *base.add(0).cast::<u8>() = (12i32) as u8;
                                                        let (
                                                            t55_0,
                                                            t55_1,
                                                            t55_2,
                                                            t55_3,
                                                            t55_4,
                                                            t55_5,
                                                            t55_6,
                                                            t55_7,
                                                        ) = e;
                                                        *base.add(8).cast::<i32>() =
                                                            _rt::as_i32(t55_0);
                                                        *base.add(12).cast::<u8>() =
                                                            (_rt::as_i32(t55_1)) as u8;
                                                        *base.add(13).cast::<u8>() =
                                                            (_rt::as_i32(t55_2)) as u8;
                                                        *base.add(14).cast::<u8>() =
                                                            (_rt::as_i32(t55_3)) as u8;
                                                        *base.add(15).cast::<u8>() =
                                                            (_rt::as_i32(t55_4)) as u8;
                                                        *base.add(16).cast::<u8>() =
                                                            (_rt::as_i32(t55_5)) as u8;
                                                        *base.add(20).cast::<i32>() =
                                                            _rt::as_i32(t55_6);
                                                        *base.add(24).cast::<i32>() =
                                                            _rt::as_i32(t55_7);
                                                    }
                                                    DbValuePrimitive::Date(e) => {
                                                        *base.add(0).cast::<u8>() = (13i32) as u8;
                                                        let (t56_0, t56_1, t56_2) = e;
                                                        *base.add(8).cast::<i32>() =
                                                            _rt::as_i32(t56_0);
                                                        *base.add(12).cast::<u8>() =
                                                            (_rt::as_i32(t56_1)) as u8;
                                                        *base.add(13).cast::<u8>() =
                                                            (_rt::as_i32(t56_2)) as u8;
                                                    }
                                                    DbValuePrimitive::Time(e) => {
                                                        *base.add(0).cast::<u8>() = (14i32) as u8;
                                                        let (t57_0, t57_1, t57_2, t57_3) = e;
                                                        *base.add(8).cast::<u8>() =
                                                            (_rt::as_i32(t57_0)) as u8;
                                                        *base.add(9).cast::<u8>() =
                                                            (_rt::as_i32(t57_1)) as u8;
                                                        *base.add(10).cast::<u8>() =
                                                            (_rt::as_i32(t57_2)) as u8;
                                                        *base.add(12).cast::<i32>() =
                                                            _rt::as_i32(t57_3);
                                                    }
                                                    DbValuePrimitive::Timetz(e) => {
                                                        *base.add(0).cast::<u8>() = (15i32) as u8;
                                                        let (t58_0, t58_1, t58_2, t58_3, t58_4) = e;
                                                        *base.add(8).cast::<u8>() =
                                                            (_rt::as_i32(t58_0)) as u8;
                                                        *base.add(9).cast::<u8>() =
                                                            (_rt::as_i32(t58_1)) as u8;
                                                        *base.add(10).cast::<u8>() =
                                                            (_rt::as_i32(t58_2)) as u8;
                                                        *base.add(12).cast::<i32>() =
                                                            _rt::as_i32(t58_3);
                                                        *base.add(16).cast::<i32>() =
                                                            _rt::as_i32(t58_4);
                                                    }
                                                    DbValuePrimitive::Interval(e) => {
                                                        *base.add(0).cast::<u8>() = (16i32) as u8;
                                                        let (t59_0, t59_1, t59_2) = e;
                                                        *base.add(8).cast::<i32>() =
                                                            _rt::as_i32(t59_0);
                                                        *base.add(12).cast::<i32>() =
                                                            _rt::as_i32(t59_1);
                                                        *base.add(16).cast::<i64>() =
                                                            _rt::as_i64(t59_2);
                                                    }
                                                    DbValuePrimitive::Bytea(e) => {
                                                        *base.add(0).cast::<u8>() = (17i32) as u8;
                                                        let vec60 = e;
                                                        let ptr60 = vec60.as_ptr().cast::<u8>();
                                                        let len60 = vec60.len();
                                                        *base.add(12).cast::<usize>() = len60;
                                                        *base.add(8).cast::<*mut u8>() =
                                                            ptr60.cast_mut();
                                                    }
                                                    DbValuePrimitive::Json(e) => {
                                                        *base.add(0).cast::<u8>() = (18i32) as u8;
                                                        let vec61 = e;
                                                        let ptr61 = vec61.as_ptr().cast::<u8>();
                                                        let len61 = vec61.len();
                                                        *base.add(12).cast::<usize>() = len61;
                                                        *base.add(8).cast::<*mut u8>() =
                                                            ptr61.cast_mut();
                                                    }
                                                    DbValuePrimitive::Jsonb(e) => {
                                                        *base.add(0).cast::<u8>() = (19i32) as u8;
                                                        let vec62 = e;
                                                        let ptr62 = vec62.as_ptr().cast::<u8>();
                                                        let len62 = vec62.len();
                                                        *base.add(12).cast::<usize>() = len62;
                                                        *base.add(8).cast::<*mut u8>() =
                                                            ptr62.cast_mut();
                                                    }
                                                    DbValuePrimitive::Xml(e) => {
                                                        *base.add(0).cast::<u8>() = (20i32) as u8;
                                                        let vec63 = e;
                                                        let ptr63 = vec63.as_ptr().cast::<u8>();
                                                        let len63 = vec63.len();
                                                        *base.add(12).cast::<usize>() = len63;
                                                        *base.add(8).cast::<*mut u8>() =
                                                            ptr63.cast_mut();
                                                    }
                                                    DbValuePrimitive::Uuid(e) => {
                                                        *base.add(0).cast::<u8>() = (21i32) as u8;
                                                        let (t64_0, t64_1) = e;
                                                        *base.add(8).cast::<i64>() =
                                                            _rt::as_i64(t64_0);
                                                        *base.add(16).cast::<i64>() =
                                                            _rt::as_i64(t64_1);
                                                    }
                                                    DbValuePrimitive::Inet(e) => {
                                                        *base.add(0).cast::<u8>() = (22i32) as u8;
                                                        match e {
                                                            IpAddress::Ipv4(e) => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (0i32) as u8;
                                                                let (t65_0, t65_1, t65_2, t65_3) =
                                                                    e;
                                                                *base.add(10).cast::<u8>() =
                                                                    (_rt::as_i32(t65_0)) as u8;
                                                                *base.add(11).cast::<u8>() =
                                                                    (_rt::as_i32(t65_1)) as u8;
                                                                *base.add(12).cast::<u8>() =
                                                                    (_rt::as_i32(t65_2)) as u8;
                                                                *base.add(13).cast::<u8>() =
                                                                    (_rt::as_i32(t65_3)) as u8;
                                                            }
                                                            IpAddress::Ipv6(e) => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                let (
                                                                    t66_0,
                                                                    t66_1,
                                                                    t66_2,
                                                                    t66_3,
                                                                    t66_4,
                                                                    t66_5,
                                                                    t66_6,
                                                                    t66_7,
                                                                ) = e;
                                                                *base.add(10).cast::<u16>() =
                                                                    (_rt::as_i32(t66_0)) as u16;
                                                                *base.add(12).cast::<u16>() =
                                                                    (_rt::as_i32(t66_1)) as u16;
                                                                *base.add(14).cast::<u16>() =
                                                                    (_rt::as_i32(t66_2)) as u16;
                                                                *base.add(16).cast::<u16>() =
                                                                    (_rt::as_i32(t66_3)) as u16;
                                                                *base.add(18).cast::<u16>() =
                                                                    (_rt::as_i32(t66_4)) as u16;
                                                                *base.add(20).cast::<u16>() =
                                                                    (_rt::as_i32(t66_5)) as u16;
                                                                *base.add(22).cast::<u16>() =
                                                                    (_rt::as_i32(t66_6)) as u16;
                                                                *base.add(24).cast::<u16>() =
                                                                    (_rt::as_i32(t66_7)) as u16;
                                                            }
                                                        }
                                                    }
                                                    DbValuePrimitive::Cidr(e) => {
                                                        *base.add(0).cast::<u8>() = (23i32) as u8;
                                                        match e {
                                                            IpAddress::Ipv4(e) => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (0i32) as u8;
                                                                let (t67_0, t67_1, t67_2, t67_3) =
                                                                    e;
                                                                *base.add(10).cast::<u8>() =
                                                                    (_rt::as_i32(t67_0)) as u8;
                                                                *base.add(11).cast::<u8>() =
                                                                    (_rt::as_i32(t67_1)) as u8;
                                                                *base.add(12).cast::<u8>() =
                                                                    (_rt::as_i32(t67_2)) as u8;
                                                                *base.add(13).cast::<u8>() =
                                                                    (_rt::as_i32(t67_3)) as u8;
                                                            }
                                                            IpAddress::Ipv6(e) => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                let (
                                                                    t68_0,
                                                                    t68_1,
                                                                    t68_2,
                                                                    t68_3,
                                                                    t68_4,
                                                                    t68_5,
                                                                    t68_6,
                                                                    t68_7,
                                                                ) = e;
                                                                *base.add(10).cast::<u16>() =
                                                                    (_rt::as_i32(t68_0)) as u16;
                                                                *base.add(12).cast::<u16>() =
                                                                    (_rt::as_i32(t68_1)) as u16;
                                                                *base.add(14).cast::<u16>() =
                                                                    (_rt::as_i32(t68_2)) as u16;
                                                                *base.add(16).cast::<u16>() =
                                                                    (_rt::as_i32(t68_3)) as u16;
                                                                *base.add(18).cast::<u16>() =
                                                                    (_rt::as_i32(t68_4)) as u16;
                                                                *base.add(20).cast::<u16>() =
                                                                    (_rt::as_i32(t68_5)) as u16;
                                                                *base.add(22).cast::<u16>() =
                                                                    (_rt::as_i32(t68_6)) as u16;
                                                                *base.add(24).cast::<u16>() =
                                                                    (_rt::as_i32(t68_7)) as u16;
                                                            }
                                                        }
                                                    }
                                                    DbValuePrimitive::Macaddr(e) => {
                                                        *base.add(0).cast::<u8>() = (24i32) as u8;
                                                        let (
                                                            t69_0,
                                                            t69_1,
                                                            t69_2,
                                                            t69_3,
                                                            t69_4,
                                                            t69_5,
                                                        ) = e;
                                                        *base.add(8).cast::<u8>() =
                                                            (_rt::as_i32(t69_0)) as u8;
                                                        *base.add(9).cast::<u8>() =
                                                            (_rt::as_i32(t69_1)) as u8;
                                                        *base.add(10).cast::<u8>() =
                                                            (_rt::as_i32(t69_2)) as u8;
                                                        *base.add(11).cast::<u8>() =
                                                            (_rt::as_i32(t69_3)) as u8;
                                                        *base.add(12).cast::<u8>() =
                                                            (_rt::as_i32(t69_4)) as u8;
                                                        *base.add(13).cast::<u8>() =
                                                            (_rt::as_i32(t69_5)) as u8;
                                                    }
                                                    DbValuePrimitive::Bit(e) => {
                                                        *base.add(0).cast::<u8>() = (25i32) as u8;
                                                        let vec70 = e;
                                                        let len70 = vec70.len();
                                                        let layout70 = _rt::alloc::Layout::from_size_align_unchecked(vec70.len() * 1, 1);
                                                        let result70 = if layout70.size() != 0 {
                                                            let ptr = _rt::alloc::alloc(layout70)
                                                                .cast::<u8>();
                                                            if ptr.is_null() {
                                                                _rt::alloc::handle_alloc_error(
                                                                    layout70,
                                                                );
                                                            }
                                                            ptr
                                                        } else {
                                                            {
                                                                ::core::ptr::null_mut()
                                                            }
                                                        };
                                                        for (i, e) in vec70.into_iter().enumerate()
                                                        {
                                                            let base = result70.add(i * 1);
                                                            {
                                                                *base.add(0).cast::<u8>() = (match e
                                                                {
                                                                    true => 1,
                                                                    false => 0,
                                                                })
                                                                    as u8;
                                                            }
                                                        }
                                                        *base.add(12).cast::<usize>() = len70;
                                                        *base.add(8).cast::<*mut u8>() = result70;
                                                        cleanup_list.extend_from_slice(&[(
                                                            result70, layout70,
                                                        )]);
                                                    }
                                                    DbValuePrimitive::Varbit(e) => {
                                                        *base.add(0).cast::<u8>() = (26i32) as u8;
                                                        let vec71 = e;
                                                        let len71 = vec71.len();
                                                        let layout71 = _rt::alloc::Layout::from_size_align_unchecked(vec71.len() * 1, 1);
                                                        let result71 = if layout71.size() != 0 {
                                                            let ptr = _rt::alloc::alloc(layout71)
                                                                .cast::<u8>();
                                                            if ptr.is_null() {
                                                                _rt::alloc::handle_alloc_error(
                                                                    layout71,
                                                                );
                                                            }
                                                            ptr
                                                        } else {
                                                            {
                                                                ::core::ptr::null_mut()
                                                            }
                                                        };
                                                        for (i, e) in vec71.into_iter().enumerate()
                                                        {
                                                            let base = result71.add(i * 1);
                                                            {
                                                                *base.add(0).cast::<u8>() = (match e
                                                                {
                                                                    true => 1,
                                                                    false => 0,
                                                                })
                                                                    as u8;
                                                            }
                                                        }
                                                        *base.add(12).cast::<usize>() = len71;
                                                        *base.add(8).cast::<*mut u8>() = result71;
                                                        cleanup_list.extend_from_slice(&[(
                                                            result71, layout71,
                                                        )]);
                                                    }
                                                    DbValuePrimitive::Int4range(e) => {
                                                        *base.add(0).cast::<u8>() = (27i32) as u8;
                                                        let (t72_0, t72_1) = e;
                                                        match t72_0 {
                                                            Some(e) => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                let (t73_0, t73_1) = e;
                                                                *base.add(12).cast::<i32>() =
                                                                    _rt::as_i32(t73_0);
                                                                *base.add(16).cast::<u8>() =
                                                                    (match t73_1 {
                                                                        true => 1,
                                                                        false => 0,
                                                                    })
                                                                        as u8;
                                                            }
                                                            None => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (0i32) as u8;
                                                            }
                                                        };
                                                        match t72_1 {
                                                            Some(e) => {
                                                                *base.add(20).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                let (t74_0, t74_1) = e;
                                                                *base.add(24).cast::<i32>() =
                                                                    _rt::as_i32(t74_0);
                                                                *base.add(28).cast::<u8>() =
                                                                    (match t74_1 {
                                                                        true => 1,
                                                                        false => 0,
                                                                    })
                                                                        as u8;
                                                            }
                                                            None => {
                                                                *base.add(20).cast::<u8>() =
                                                                    (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    DbValuePrimitive::Int8range(e) => {
                                                        *base.add(0).cast::<u8>() = (28i32) as u8;
                                                        let (t75_0, t75_1) = e;
                                                        match t75_0 {
                                                            Some(e) => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                let (t76_0, t76_1) = e;
                                                                *base.add(16).cast::<i64>() =
                                                                    _rt::as_i64(t76_0);
                                                                *base.add(24).cast::<u8>() =
                                                                    (match t76_1 {
                                                                        true => 1,
                                                                        false => 0,
                                                                    })
                                                                        as u8;
                                                            }
                                                            None => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (0i32) as u8;
                                                            }
                                                        };
                                                        match t75_1 {
                                                            Some(e) => {
                                                                *base.add(32).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                let (t77_0, t77_1) = e;
                                                                *base.add(40).cast::<i64>() =
                                                                    _rt::as_i64(t77_0);
                                                                *base.add(48).cast::<u8>() =
                                                                    (match t77_1 {
                                                                        true => 1,
                                                                        false => 0,
                                                                    })
                                                                        as u8;
                                                            }
                                                            None => {
                                                                *base.add(32).cast::<u8>() =
                                                                    (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    DbValuePrimitive::Numrange(e) => {
                                                        *base.add(0).cast::<u8>() = (29i32) as u8;
                                                        let (t78_0, t78_1) = e;
                                                        match t78_0 {
                                                            Some(e) => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                let (t79_0, t79_1) = e;
                                                                let vec80 = t79_0;
                                                                let ptr80 =
                                                                    vec80.as_ptr().cast::<u8>();
                                                                let len80 = vec80.len();
                                                                *base.add(16).cast::<usize>() =
                                                                    len80;
                                                                *base.add(12).cast::<*mut u8>() =
                                                                    ptr80.cast_mut();
                                                                *base.add(20).cast::<u8>() =
                                                                    (match t79_1 {
                                                                        true => 1,
                                                                        false => 0,
                                                                    })
                                                                        as u8;
                                                            }
                                                            None => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (0i32) as u8;
                                                            }
                                                        };
                                                        match t78_1 {
                                                            Some(e) => {
                                                                *base.add(24).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                let (t81_0, t81_1) = e;
                                                                let vec82 = t81_0;
                                                                let ptr82 =
                                                                    vec82.as_ptr().cast::<u8>();
                                                                let len82 = vec82.len();
                                                                *base.add(32).cast::<usize>() =
                                                                    len82;
                                                                *base.add(28).cast::<*mut u8>() =
                                                                    ptr82.cast_mut();
                                                                *base.add(36).cast::<u8>() =
                                                                    (match t81_1 {
                                                                        true => 1,
                                                                        false => 0,
                                                                    })
                                                                        as u8;
                                                            }
                                                            None => {
                                                                *base.add(24).cast::<u8>() =
                                                                    (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    DbValuePrimitive::Tsrange(e) => {
                                                        *base.add(0).cast::<u8>() = (30i32) as u8;
                                                        let (t83_0, t83_1) = e;
                                                        match t83_0 {
                                                            Some(e) => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                let (t84_0, t84_1) = e;
                                                                let (
                                                                    t85_0,
                                                                    t85_1,
                                                                    t85_2,
                                                                    t85_3,
                                                                    t85_4,
                                                                    t85_5,
                                                                    t85_6,
                                                                ) = t84_0;
                                                                *base.add(12).cast::<i32>() =
                                                                    _rt::as_i32(t85_0);
                                                                *base.add(16).cast::<u8>() =
                                                                    (_rt::as_i32(t85_1)) as u8;
                                                                *base.add(17).cast::<u8>() =
                                                                    (_rt::as_i32(t85_2)) as u8;
                                                                *base.add(18).cast::<u8>() =
                                                                    (_rt::as_i32(t85_3)) as u8;
                                                                *base.add(19).cast::<u8>() =
                                                                    (_rt::as_i32(t85_4)) as u8;
                                                                *base.add(20).cast::<u8>() =
                                                                    (_rt::as_i32(t85_5)) as u8;
                                                                *base.add(24).cast::<i32>() =
                                                                    _rt::as_i32(t85_6);
                                                                *base.add(28).cast::<u8>() =
                                                                    (match t84_1 {
                                                                        true => 1,
                                                                        false => 0,
                                                                    })
                                                                        as u8;
                                                            }
                                                            None => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (0i32) as u8;
                                                            }
                                                        };
                                                        match t83_1 {
                                                            Some(e) => {
                                                                *base.add(32).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                let (t86_0, t86_1) = e;
                                                                let (
                                                                    t87_0,
                                                                    t87_1,
                                                                    t87_2,
                                                                    t87_3,
                                                                    t87_4,
                                                                    t87_5,
                                                                    t87_6,
                                                                ) = t86_0;
                                                                *base.add(36).cast::<i32>() =
                                                                    _rt::as_i32(t87_0);
                                                                *base.add(40).cast::<u8>() =
                                                                    (_rt::as_i32(t87_1)) as u8;
                                                                *base.add(41).cast::<u8>() =
                                                                    (_rt::as_i32(t87_2)) as u8;
                                                                *base.add(42).cast::<u8>() =
                                                                    (_rt::as_i32(t87_3)) as u8;
                                                                *base.add(43).cast::<u8>() =
                                                                    (_rt::as_i32(t87_4)) as u8;
                                                                *base.add(44).cast::<u8>() =
                                                                    (_rt::as_i32(t87_5)) as u8;
                                                                *base.add(48).cast::<i32>() =
                                                                    _rt::as_i32(t87_6);
                                                                *base.add(52).cast::<u8>() =
                                                                    (match t86_1 {
                                                                        true => 1,
                                                                        false => 0,
                                                                    })
                                                                        as u8;
                                                            }
                                                            None => {
                                                                *base.add(32).cast::<u8>() =
                                                                    (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    DbValuePrimitive::Tstzrange(e) => {
                                                        *base.add(0).cast::<u8>() = (31i32) as u8;
                                                        let (t88_0, t88_1) = e;
                                                        match t88_0 {
                                                            Some(e) => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                let (t89_0, t89_1) = e;
                                                                let (
                                                                    t90_0,
                                                                    t90_1,
                                                                    t90_2,
                                                                    t90_3,
                                                                    t90_4,
                                                                    t90_5,
                                                                    t90_6,
                                                                    t90_7,
                                                                ) = t89_0;
                                                                *base.add(12).cast::<i32>() =
                                                                    _rt::as_i32(t90_0);
                                                                *base.add(16).cast::<u8>() =
                                                                    (_rt::as_i32(t90_1)) as u8;
                                                                *base.add(17).cast::<u8>() =
                                                                    (_rt::as_i32(t90_2)) as u8;
                                                                *base.add(18).cast::<u8>() =
                                                                    (_rt::as_i32(t90_3)) as u8;
                                                                *base.add(19).cast::<u8>() =
                                                                    (_rt::as_i32(t90_4)) as u8;
                                                                *base.add(20).cast::<u8>() =
                                                                    (_rt::as_i32(t90_5)) as u8;
                                                                *base.add(24).cast::<i32>() =
                                                                    _rt::as_i32(t90_6);
                                                                *base.add(28).cast::<i32>() =
                                                                    _rt::as_i32(t90_7);
                                                                *base.add(32).cast::<u8>() =
                                                                    (match t89_1 {
                                                                        true => 1,
                                                                        false => 0,
                                                                    })
                                                                        as u8;
                                                            }
                                                            None => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (0i32) as u8;
                                                            }
                                                        };
                                                        match t88_1 {
                                                            Some(e) => {
                                                                *base.add(36).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                let (t91_0, t91_1) = e;
                                                                let (
                                                                    t92_0,
                                                                    t92_1,
                                                                    t92_2,
                                                                    t92_3,
                                                                    t92_4,
                                                                    t92_5,
                                                                    t92_6,
                                                                    t92_7,
                                                                ) = t91_0;
                                                                *base.add(40).cast::<i32>() =
                                                                    _rt::as_i32(t92_0);
                                                                *base.add(44).cast::<u8>() =
                                                                    (_rt::as_i32(t92_1)) as u8;
                                                                *base.add(45).cast::<u8>() =
                                                                    (_rt::as_i32(t92_2)) as u8;
                                                                *base.add(46).cast::<u8>() =
                                                                    (_rt::as_i32(t92_3)) as u8;
                                                                *base.add(47).cast::<u8>() =
                                                                    (_rt::as_i32(t92_4)) as u8;
                                                                *base.add(48).cast::<u8>() =
                                                                    (_rt::as_i32(t92_5)) as u8;
                                                                *base.add(52).cast::<i32>() =
                                                                    _rt::as_i32(t92_6);
                                                                *base.add(56).cast::<i32>() =
                                                                    _rt::as_i32(t92_7);
                                                                *base.add(60).cast::<u8>() =
                                                                    (match t91_1 {
                                                                        true => 1,
                                                                        false => 0,
                                                                    })
                                                                        as u8;
                                                            }
                                                            None => {
                                                                *base.add(36).cast::<u8>() =
                                                                    (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    DbValuePrimitive::Daterange(e) => {
                                                        *base.add(0).cast::<u8>() = (32i32) as u8;
                                                        let (t93_0, t93_1) = e;
                                                        match t93_0 {
                                                            Some(e) => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                let (t94_0, t94_1) = e;
                                                                let (t95_0, t95_1, t95_2) = t94_0;
                                                                *base.add(12).cast::<i32>() =
                                                                    _rt::as_i32(t95_0);
                                                                *base.add(16).cast::<u8>() =
                                                                    (_rt::as_i32(t95_1)) as u8;
                                                                *base.add(17).cast::<u8>() =
                                                                    (_rt::as_i32(t95_2)) as u8;
                                                                *base.add(20).cast::<u8>() =
                                                                    (match t94_1 {
                                                                        true => 1,
                                                                        false => 0,
                                                                    })
                                                                        as u8;
                                                            }
                                                            None => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (0i32) as u8;
                                                            }
                                                        };
                                                        match t93_1 {
                                                            Some(e) => {
                                                                *base.add(24).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                let (t96_0, t96_1) = e;
                                                                let (t97_0, t97_1, t97_2) = t96_0;
                                                                *base.add(28).cast::<i32>() =
                                                                    _rt::as_i32(t97_0);
                                                                *base.add(32).cast::<u8>() =
                                                                    (_rt::as_i32(t97_1)) as u8;
                                                                *base.add(33).cast::<u8>() =
                                                                    (_rt::as_i32(t97_2)) as u8;
                                                                *base.add(36).cast::<u8>() =
                                                                    (match t96_1 {
                                                                        true => 1,
                                                                        false => 0,
                                                                    })
                                                                        as u8;
                                                            }
                                                            None => {
                                                                *base.add(24).cast::<u8>() =
                                                                    (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    DbValuePrimitive::Oid(e) => {
                                                        *base.add(0).cast::<u8>() = (33i32) as u8;
                                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    DbValuePrimitive::CustomEnum(e) => {
                                                        *base.add(0).cast::<u8>() = (34i32) as u8;
                                                        let vec98 = e;
                                                        let ptr98 = vec98.as_ptr().cast::<u8>();
                                                        let len98 = vec98.len();
                                                        *base.add(12).cast::<usize>() = len98;
                                                        *base.add(8).cast::<*mut u8>() =
                                                            ptr98.cast_mut();
                                                    }
                                                    DbValuePrimitive::Null => {
                                                        *base.add(0).cast::<u8>() = (35i32) as u8;
                                                    }
                                                }
                                            }
                                        }
                                        *base.add(12).cast::<usize>() = len99;
                                        *base.add(8).cast::<*mut u8>() = result99;
                                        cleanup_list.extend_from_slice(&[(result99, layout99)]);
                                    }
                                }
                            }
                        }
                        let ptr101 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:rdbms/postgres@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]db-connection.query"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            result100,
                            len100,
                            ptr101,
                        );
                        let l102 = i32::from(*ptr101.add(0).cast::<u8>());
                        if layout100.size() != 0 {
                            _rt::alloc::dealloc(result100.cast(), layout100);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l102 {
                            0 => {
                                let e = {
                                    let l103 = *ptr101.add(4).cast::<i32>();

                                    DbResultSet::from_handle(l103 as u32)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l104 = i32::from(*ptr101.add(4).cast::<u8>());
                                    let v120 = match l104 {
                                        0 => {
                                            let e120 = {
                                                let l105 = *ptr101.add(8).cast::<*mut u8>();
                                                let l106 = *ptr101.add(12).cast::<usize>();
                                                let len107 = l106;
                                                let bytes107 = _rt::Vec::from_raw_parts(
                                                    l105.cast(),
                                                    len107,
                                                    len107,
                                                );

                                                _rt::string_lift(bytes107)
                                            };
                                            Error::ConnectionFailure(e120)
                                        }
                                        1 => {
                                            let e120 = {
                                                let l108 = *ptr101.add(8).cast::<*mut u8>();
                                                let l109 = *ptr101.add(12).cast::<usize>();
                                                let len110 = l109;
                                                let bytes110 = _rt::Vec::from_raw_parts(
                                                    l108.cast(),
                                                    len110,
                                                    len110,
                                                );

                                                _rt::string_lift(bytes110)
                                            };
                                            Error::QueryParameterFailure(e120)
                                        }
                                        2 => {
                                            let e120 = {
                                                let l111 = *ptr101.add(8).cast::<*mut u8>();
                                                let l112 = *ptr101.add(12).cast::<usize>();
                                                let len113 = l112;
                                                let bytes113 = _rt::Vec::from_raw_parts(
                                                    l111.cast(),
                                                    len113,
                                                    len113,
                                                );

                                                _rt::string_lift(bytes113)
                                            };
                                            Error::QueryExecutionFailure(e120)
                                        }
                                        3 => {
                                            let e120 = {
                                                let l114 = *ptr101.add(8).cast::<*mut u8>();
                                                let l115 = *ptr101.add(12).cast::<usize>();
                                                let len116 = l115;
                                                let bytes116 = _rt::Vec::from_raw_parts(
                                                    l114.cast(),
                                                    len116,
                                                    len116,
                                                );

                                                _rt::string_lift(bytes116)
                                            };
                                            Error::QueryResponseFailure(e120)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 4, "invalid enum discriminant");
                                            let e120 = {
                                                let l117 = *ptr101.add(8).cast::<*mut u8>();
                                                let l118 = *ptr101.add(12).cast::<usize>();
                                                let len119 = l118;
                                                let bytes119 = _rt::Vec::from_raw_parts(
                                                    l117.cast(),
                                                    len119,
                                                    len119,
                                                );

                                                _rt::string_lift(bytes119)
                                            };
                                            Error::Other(e120)
                                        }
                                    };

                                    v120
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl DbConnection {
                #[allow(unused_unsafe, clippy::all)]
                pub fn execute(&self, statement: &str, params: &[DbValue]) -> Result<u64, Error> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 24]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 24]);
                        let vec0 = statement;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec100 = params;
                        let len100 = vec100.len();
                        let layout100 =
                            _rt::alloc::Layout::from_size_align_unchecked(vec100.len() * 72, 8);
                        let result100 = if layout100.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout100).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout100);
                            }
                            ptr
                        } else {
                            {
                                ::core::ptr::null_mut()
                            }
                        };
                        for (i, e) in vec100.into_iter().enumerate() {
                            let base = result100.add(i * 72);
                            {
                                match e {
                                    DbValue::Primitive(e) => {
                                        *base.add(0).cast::<u8>() = (0i32) as u8;
                                        match e {
                                            DbValuePrimitive::Character(e) => {
                                                *base.add(8).cast::<u8>() = (0i32) as u8;
                                                *base.add(16).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            DbValuePrimitive::Int2(e) => {
                                                *base.add(8).cast::<u8>() = (1i32) as u8;
                                                *base.add(16).cast::<u16>() =
                                                    (_rt::as_i32(e)) as u16;
                                            }
                                            DbValuePrimitive::Int4(e) => {
                                                *base.add(8).cast::<u8>() = (2i32) as u8;
                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            DbValuePrimitive::Int8(e) => {
                                                *base.add(8).cast::<u8>() = (3i32) as u8;
                                                *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            DbValuePrimitive::Float4(e) => {
                                                *base.add(8).cast::<u8>() = (4i32) as u8;
                                                *base.add(16).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            DbValuePrimitive::Float8(e) => {
                                                *base.add(8).cast::<u8>() = (5i32) as u8;
                                                *base.add(16).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            DbValuePrimitive::Numeric(e) => {
                                                *base.add(8).cast::<u8>() = (6i32) as u8;
                                                let vec1 = e;
                                                let ptr1 = vec1.as_ptr().cast::<u8>();
                                                let len1 = vec1.len();
                                                *base.add(20).cast::<usize>() = len1;
                                                *base.add(16).cast::<*mut u8>() = ptr1.cast_mut();
                                            }
                                            DbValuePrimitive::Boolean(e) => {
                                                *base.add(8).cast::<u8>() = (7i32) as u8;
                                                *base.add(16).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                })
                                                    as u8;
                                            }
                                            DbValuePrimitive::Text(e) => {
                                                *base.add(8).cast::<u8>() = (8i32) as u8;
                                                let vec2 = e;
                                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                                let len2 = vec2.len();
                                                *base.add(20).cast::<usize>() = len2;
                                                *base.add(16).cast::<*mut u8>() = ptr2.cast_mut();
                                            }
                                            DbValuePrimitive::Varchar(e) => {
                                                *base.add(8).cast::<u8>() = (9i32) as u8;
                                                let vec3 = e;
                                                let ptr3 = vec3.as_ptr().cast::<u8>();
                                                let len3 = vec3.len();
                                                *base.add(20).cast::<usize>() = len3;
                                                *base.add(16).cast::<*mut u8>() = ptr3.cast_mut();
                                            }
                                            DbValuePrimitive::Bpchar(e) => {
                                                *base.add(8).cast::<u8>() = (10i32) as u8;
                                                let vec4 = e;
                                                let ptr4 = vec4.as_ptr().cast::<u8>();
                                                let len4 = vec4.len();
                                                *base.add(20).cast::<usize>() = len4;
                                                *base.add(16).cast::<*mut u8>() = ptr4.cast_mut();
                                            }
                                            DbValuePrimitive::Timestamp(e) => {
                                                *base.add(8).cast::<u8>() = (11i32) as u8;
                                                let (t5_0, t5_1, t5_2, t5_3, t5_4, t5_5, t5_6) = e;
                                                *base.add(16).cast::<i32>() = _rt::as_i32(t5_0);
                                                *base.add(20).cast::<u8>() =
                                                    (_rt::as_i32(t5_1)) as u8;
                                                *base.add(21).cast::<u8>() =
                                                    (_rt::as_i32(t5_2)) as u8;
                                                *base.add(22).cast::<u8>() =
                                                    (_rt::as_i32(t5_3)) as u8;
                                                *base.add(23).cast::<u8>() =
                                                    (_rt::as_i32(t5_4)) as u8;
                                                *base.add(24).cast::<u8>() =
                                                    (_rt::as_i32(t5_5)) as u8;
                                                *base.add(28).cast::<i32>() = _rt::as_i32(t5_6);
                                            }
                                            DbValuePrimitive::Timestamptz(e) => {
                                                *base.add(8).cast::<u8>() = (12i32) as u8;
                                                let (
                                                    t6_0,
                                                    t6_1,
                                                    t6_2,
                                                    t6_3,
                                                    t6_4,
                                                    t6_5,
                                                    t6_6,
                                                    t6_7,
                                                ) = e;
                                                *base.add(16).cast::<i32>() = _rt::as_i32(t6_0);
                                                *base.add(20).cast::<u8>() =
                                                    (_rt::as_i32(t6_1)) as u8;
                                                *base.add(21).cast::<u8>() =
                                                    (_rt::as_i32(t6_2)) as u8;
                                                *base.add(22).cast::<u8>() =
                                                    (_rt::as_i32(t6_3)) as u8;
                                                *base.add(23).cast::<u8>() =
                                                    (_rt::as_i32(t6_4)) as u8;
                                                *base.add(24).cast::<u8>() =
                                                    (_rt::as_i32(t6_5)) as u8;
                                                *base.add(28).cast::<i32>() = _rt::as_i32(t6_6);
                                                *base.add(32).cast::<i32>() = _rt::as_i32(t6_7);
                                            }
                                            DbValuePrimitive::Date(e) => {
                                                *base.add(8).cast::<u8>() = (13i32) as u8;
                                                let (t7_0, t7_1, t7_2) = e;
                                                *base.add(16).cast::<i32>() = _rt::as_i32(t7_0);
                                                *base.add(20).cast::<u8>() =
                                                    (_rt::as_i32(t7_1)) as u8;
                                                *base.add(21).cast::<u8>() =
                                                    (_rt::as_i32(t7_2)) as u8;
                                            }
                                            DbValuePrimitive::Time(e) => {
                                                *base.add(8).cast::<u8>() = (14i32) as u8;
                                                let (t8_0, t8_1, t8_2, t8_3) = e;
                                                *base.add(16).cast::<u8>() =
                                                    (_rt::as_i32(t8_0)) as u8;
                                                *base.add(17).cast::<u8>() =
                                                    (_rt::as_i32(t8_1)) as u8;
                                                *base.add(18).cast::<u8>() =
                                                    (_rt::as_i32(t8_2)) as u8;
                                                *base.add(20).cast::<i32>() = _rt::as_i32(t8_3);
                                            }
                                            DbValuePrimitive::Timetz(e) => {
                                                *base.add(8).cast::<u8>() = (15i32) as u8;
                                                let (t9_0, t9_1, t9_2, t9_3, t9_4) = e;
                                                *base.add(16).cast::<u8>() =
                                                    (_rt::as_i32(t9_0)) as u8;
                                                *base.add(17).cast::<u8>() =
                                                    (_rt::as_i32(t9_1)) as u8;
                                                *base.add(18).cast::<u8>() =
                                                    (_rt::as_i32(t9_2)) as u8;
                                                *base.add(20).cast::<i32>() = _rt::as_i32(t9_3);
                                                *base.add(24).cast::<i32>() = _rt::as_i32(t9_4);
                                            }
                                            DbValuePrimitive::Interval(e) => {
                                                *base.add(8).cast::<u8>() = (16i32) as u8;
                                                let (t10_0, t10_1, t10_2) = e;
                                                *base.add(16).cast::<i32>() = _rt::as_i32(t10_0);
                                                *base.add(20).cast::<i32>() = _rt::as_i32(t10_1);
                                                *base.add(24).cast::<i64>() = _rt::as_i64(t10_2);
                                            }
                                            DbValuePrimitive::Bytea(e) => {
                                                *base.add(8).cast::<u8>() = (17i32) as u8;
                                                let vec11 = e;
                                                let ptr11 = vec11.as_ptr().cast::<u8>();
                                                let len11 = vec11.len();
                                                *base.add(20).cast::<usize>() = len11;
                                                *base.add(16).cast::<*mut u8>() = ptr11.cast_mut();
                                            }
                                            DbValuePrimitive::Json(e) => {
                                                *base.add(8).cast::<u8>() = (18i32) as u8;
                                                let vec12 = e;
                                                let ptr12 = vec12.as_ptr().cast::<u8>();
                                                let len12 = vec12.len();
                                                *base.add(20).cast::<usize>() = len12;
                                                *base.add(16).cast::<*mut u8>() = ptr12.cast_mut();
                                            }
                                            DbValuePrimitive::Jsonb(e) => {
                                                *base.add(8).cast::<u8>() = (19i32) as u8;
                                                let vec13 = e;
                                                let ptr13 = vec13.as_ptr().cast::<u8>();
                                                let len13 = vec13.len();
                                                *base.add(20).cast::<usize>() = len13;
                                                *base.add(16).cast::<*mut u8>() = ptr13.cast_mut();
                                            }
                                            DbValuePrimitive::Xml(e) => {
                                                *base.add(8).cast::<u8>() = (20i32) as u8;
                                                let vec14 = e;
                                                let ptr14 = vec14.as_ptr().cast::<u8>();
                                                let len14 = vec14.len();
                                                *base.add(20).cast::<usize>() = len14;
                                                *base.add(16).cast::<*mut u8>() = ptr14.cast_mut();
                                            }
                                            DbValuePrimitive::Uuid(e) => {
                                                *base.add(8).cast::<u8>() = (21i32) as u8;
                                                let (t15_0, t15_1) = e;
                                                *base.add(16).cast::<i64>() = _rt::as_i64(t15_0);
                                                *base.add(24).cast::<i64>() = _rt::as_i64(t15_1);
                                            }
                                            DbValuePrimitive::Inet(e) => {
                                                *base.add(8).cast::<u8>() = (22i32) as u8;
                                                match e {
                                                    IpAddress::Ipv4(e) => {
                                                        *base.add(16).cast::<u8>() = (0i32) as u8;
                                                        let (t16_0, t16_1, t16_2, t16_3) = e;
                                                        *base.add(18).cast::<u8>() =
                                                            (_rt::as_i32(t16_0)) as u8;
                                                        *base.add(19).cast::<u8>() =
                                                            (_rt::as_i32(t16_1)) as u8;
                                                        *base.add(20).cast::<u8>() =
                                                            (_rt::as_i32(t16_2)) as u8;
                                                        *base.add(21).cast::<u8>() =
                                                            (_rt::as_i32(t16_3)) as u8;
                                                    }
                                                    IpAddress::Ipv6(e) => {
                                                        *base.add(16).cast::<u8>() = (1i32) as u8;
                                                        let (
                                                            t17_0,
                                                            t17_1,
                                                            t17_2,
                                                            t17_3,
                                                            t17_4,
                                                            t17_5,
                                                            t17_6,
                                                            t17_7,
                                                        ) = e;
                                                        *base.add(18).cast::<u16>() =
                                                            (_rt::as_i32(t17_0)) as u16;
                                                        *base.add(20).cast::<u16>() =
                                                            (_rt::as_i32(t17_1)) as u16;
                                                        *base.add(22).cast::<u16>() =
                                                            (_rt::as_i32(t17_2)) as u16;
                                                        *base.add(24).cast::<u16>() =
                                                            (_rt::as_i32(t17_3)) as u16;
                                                        *base.add(26).cast::<u16>() =
                                                            (_rt::as_i32(t17_4)) as u16;
                                                        *base.add(28).cast::<u16>() =
                                                            (_rt::as_i32(t17_5)) as u16;
                                                        *base.add(30).cast::<u16>() =
                                                            (_rt::as_i32(t17_6)) as u16;
                                                        *base.add(32).cast::<u16>() =
                                                            (_rt::as_i32(t17_7)) as u16;
                                                    }
                                                }
                                            }
                                            DbValuePrimitive::Cidr(e) => {
                                                *base.add(8).cast::<u8>() = (23i32) as u8;
                                                match e {
                                                    IpAddress::Ipv4(e) => {
                                                        *base.add(16).cast::<u8>() = (0i32) as u8;
                                                        let (t18_0, t18_1, t18_2, t18_3) = e;
                                                        *base.add(18).cast::<u8>() =
                                                            (_rt::as_i32(t18_0)) as u8;
                                                        *base.add(19).cast::<u8>() =
                                                            (_rt::as_i32(t18_1)) as u8;
                                                        *base.add(20).cast::<u8>() =
                                                            (_rt::as_i32(t18_2)) as u8;
                                                        *base.add(21).cast::<u8>() =
                                                            (_rt::as_i32(t18_3)) as u8;
                                                    }
                                                    IpAddress::Ipv6(e) => {
                                                        *base.add(16).cast::<u8>() = (1i32) as u8;
                                                        let (
                                                            t19_0,
                                                            t19_1,
                                                            t19_2,
                                                            t19_3,
                                                            t19_4,
                                                            t19_5,
                                                            t19_6,
                                                            t19_7,
                                                        ) = e;
                                                        *base.add(18).cast::<u16>() =
                                                            (_rt::as_i32(t19_0)) as u16;
                                                        *base.add(20).cast::<u16>() =
                                                            (_rt::as_i32(t19_1)) as u16;
                                                        *base.add(22).cast::<u16>() =
                                                            (_rt::as_i32(t19_2)) as u16;
                                                        *base.add(24).cast::<u16>() =
                                                            (_rt::as_i32(t19_3)) as u16;
                                                        *base.add(26).cast::<u16>() =
                                                            (_rt::as_i32(t19_4)) as u16;
                                                        *base.add(28).cast::<u16>() =
                                                            (_rt::as_i32(t19_5)) as u16;
                                                        *base.add(30).cast::<u16>() =
                                                            (_rt::as_i32(t19_6)) as u16;
                                                        *base.add(32).cast::<u16>() =
                                                            (_rt::as_i32(t19_7)) as u16;
                                                    }
                                                }
                                            }
                                            DbValuePrimitive::Macaddr(e) => {
                                                *base.add(8).cast::<u8>() = (24i32) as u8;
                                                let (t20_0, t20_1, t20_2, t20_3, t20_4, t20_5) = e;
                                                *base.add(16).cast::<u8>() =
                                                    (_rt::as_i32(t20_0)) as u8;
                                                *base.add(17).cast::<u8>() =
                                                    (_rt::as_i32(t20_1)) as u8;
                                                *base.add(18).cast::<u8>() =
                                                    (_rt::as_i32(t20_2)) as u8;
                                                *base.add(19).cast::<u8>() =
                                                    (_rt::as_i32(t20_3)) as u8;
                                                *base.add(20).cast::<u8>() =
                                                    (_rt::as_i32(t20_4)) as u8;
                                                *base.add(21).cast::<u8>() =
                                                    (_rt::as_i32(t20_5)) as u8;
                                            }
                                            DbValuePrimitive::Bit(e) => {
                                                *base.add(8).cast::<u8>() = (25i32) as u8;
                                                let vec21 = e;
                                                let len21 = vec21.len();
                                                let layout21 =
                                                    _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec21.len() * 1,
                                                        1,
                                                    );
                                                let result21 = if layout21.size() != 0 {
                                                    let ptr =
                                                        _rt::alloc::alloc(layout21).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout21);
                                                    }
                                                    ptr
                                                } else {
                                                    {
                                                        ::core::ptr::null_mut()
                                                    }
                                                };
                                                for (i, e) in vec21.into_iter().enumerate() {
                                                    let base = result21.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        })
                                                            as u8;
                                                    }
                                                }
                                                *base.add(20).cast::<usize>() = len21;
                                                *base.add(16).cast::<*mut u8>() = result21;
                                                cleanup_list
                                                    .extend_from_slice(&[(result21, layout21)]);
                                            }
                                            DbValuePrimitive::Varbit(e) => {
                                                *base.add(8).cast::<u8>() = (26i32) as u8;
                                                let vec22 = e;
                                                let len22 = vec22.len();
                                                let layout22 =
                                                    _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec22.len() * 1,
                                                        1,
                                                    );
                                                let result22 = if layout22.size() != 0 {
                                                    let ptr =
                                                        _rt::alloc::alloc(layout22).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout22);
                                                    }
                                                    ptr
                                                } else {
                                                    {
                                                        ::core::ptr::null_mut()
                                                    }
                                                };
                                                for (i, e) in vec22.into_iter().enumerate() {
                                                    let base = result22.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        })
                                                            as u8;
                                                    }
                                                }
                                                *base.add(20).cast::<usize>() = len22;
                                                *base.add(16).cast::<*mut u8>() = result22;
                                                cleanup_list
                                                    .extend_from_slice(&[(result22, layout22)]);
                                            }
                                            DbValuePrimitive::Int4range(e) => {
                                                *base.add(8).cast::<u8>() = (27i32) as u8;
                                                let (t23_0, t23_1) = e;
                                                match t23_0 {
                                                    Some(e) => {
                                                        *base.add(16).cast::<u8>() = (1i32) as u8;
                                                        let (t24_0, t24_1) = e;
                                                        *base.add(20).cast::<i32>() =
                                                            _rt::as_i32(t24_0);
                                                        *base.add(24).cast::<u8>() = (match t24_1 {
                                                            true => 1,
                                                            false => 0,
                                                        })
                                                            as u8;
                                                    }
                                                    None => {
                                                        *base.add(16).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                                match t23_1 {
                                                    Some(e) => {
                                                        *base.add(28).cast::<u8>() = (1i32) as u8;
                                                        let (t25_0, t25_1) = e;
                                                        *base.add(32).cast::<i32>() =
                                                            _rt::as_i32(t25_0);
                                                        *base.add(36).cast::<u8>() = (match t25_1 {
                                                            true => 1,
                                                            false => 0,
                                                        })
                                                            as u8;
                                                    }
                                                    None => {
                                                        *base.add(28).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            DbValuePrimitive::Int8range(e) => {
                                                *base.add(8).cast::<u8>() = (28i32) as u8;
                                                let (t26_0, t26_1) = e;
                                                match t26_0 {
                                                    Some(e) => {
                                                        *base.add(16).cast::<u8>() = (1i32) as u8;
                                                        let (t27_0, t27_1) = e;
                                                        *base.add(24).cast::<i64>() =
                                                            _rt::as_i64(t27_0);
                                                        *base.add(32).cast::<u8>() = (match t27_1 {
                                                            true => 1,
                                                            false => 0,
                                                        })
                                                            as u8;
                                                    }
                                                    None => {
                                                        *base.add(16).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                                match t26_1 {
                                                    Some(e) => {
                                                        *base.add(40).cast::<u8>() = (1i32) as u8;
                                                        let (t28_0, t28_1) = e;
                                                        *base.add(48).cast::<i64>() =
                                                            _rt::as_i64(t28_0);
                                                        *base.add(56).cast::<u8>() = (match t28_1 {
                                                            true => 1,
                                                            false => 0,
                                                        })
                                                            as u8;
                                                    }
                                                    None => {
                                                        *base.add(40).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            DbValuePrimitive::Numrange(e) => {
                                                *base.add(8).cast::<u8>() = (29i32) as u8;
                                                let (t29_0, t29_1) = e;
                                                match t29_0 {
                                                    Some(e) => {
                                                        *base.add(16).cast::<u8>() = (1i32) as u8;
                                                        let (t30_0, t30_1) = e;
                                                        let vec31 = t30_0;
                                                        let ptr31 = vec31.as_ptr().cast::<u8>();
                                                        let len31 = vec31.len();
                                                        *base.add(24).cast::<usize>() = len31;
                                                        *base.add(20).cast::<*mut u8>() =
                                                            ptr31.cast_mut();
                                                        *base.add(28).cast::<u8>() = (match t30_1 {
                                                            true => 1,
                                                            false => 0,
                                                        })
                                                            as u8;
                                                    }
                                                    None => {
                                                        *base.add(16).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                                match t29_1 {
                                                    Some(e) => {
                                                        *base.add(32).cast::<u8>() = (1i32) as u8;
                                                        let (t32_0, t32_1) = e;
                                                        let vec33 = t32_0;
                                                        let ptr33 = vec33.as_ptr().cast::<u8>();
                                                        let len33 = vec33.len();
                                                        *base.add(40).cast::<usize>() = len33;
                                                        *base.add(36).cast::<*mut u8>() =
                                                            ptr33.cast_mut();
                                                        *base.add(44).cast::<u8>() = (match t32_1 {
                                                            true => 1,
                                                            false => 0,
                                                        })
                                                            as u8;
                                                    }
                                                    None => {
                                                        *base.add(32).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            DbValuePrimitive::Tsrange(e) => {
                                                *base.add(8).cast::<u8>() = (30i32) as u8;
                                                let (t34_0, t34_1) = e;
                                                match t34_0 {
                                                    Some(e) => {
                                                        *base.add(16).cast::<u8>() = (1i32) as u8;
                                                        let (t35_0, t35_1) = e;
                                                        let (
                                                            t36_0,
                                                            t36_1,
                                                            t36_2,
                                                            t36_3,
                                                            t36_4,
                                                            t36_5,
                                                            t36_6,
                                                        ) = t35_0;
                                                        *base.add(20).cast::<i32>() =
                                                            _rt::as_i32(t36_0);
                                                        *base.add(24).cast::<u8>() =
                                                            (_rt::as_i32(t36_1)) as u8;
                                                        *base.add(25).cast::<u8>() =
                                                            (_rt::as_i32(t36_2)) as u8;
                                                        *base.add(26).cast::<u8>() =
                                                            (_rt::as_i32(t36_3)) as u8;
                                                        *base.add(27).cast::<u8>() =
                                                            (_rt::as_i32(t36_4)) as u8;
                                                        *base.add(28).cast::<u8>() =
                                                            (_rt::as_i32(t36_5)) as u8;
                                                        *base.add(32).cast::<i32>() =
                                                            _rt::as_i32(t36_6);
                                                        *base.add(36).cast::<u8>() = (match t35_1 {
                                                            true => 1,
                                                            false => 0,
                                                        })
                                                            as u8;
                                                    }
                                                    None => {
                                                        *base.add(16).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                                match t34_1 {
                                                    Some(e) => {
                                                        *base.add(40).cast::<u8>() = (1i32) as u8;
                                                        let (t37_0, t37_1) = e;
                                                        let (
                                                            t38_0,
                                                            t38_1,
                                                            t38_2,
                                                            t38_3,
                                                            t38_4,
                                                            t38_5,
                                                            t38_6,
                                                        ) = t37_0;
                                                        *base.add(44).cast::<i32>() =
                                                            _rt::as_i32(t38_0);
                                                        *base.add(48).cast::<u8>() =
                                                            (_rt::as_i32(t38_1)) as u8;
                                                        *base.add(49).cast::<u8>() =
                                                            (_rt::as_i32(t38_2)) as u8;
                                                        *base.add(50).cast::<u8>() =
                                                            (_rt::as_i32(t38_3)) as u8;
                                                        *base.add(51).cast::<u8>() =
                                                            (_rt::as_i32(t38_4)) as u8;
                                                        *base.add(52).cast::<u8>() =
                                                            (_rt::as_i32(t38_5)) as u8;
                                                        *base.add(56).cast::<i32>() =
                                                            _rt::as_i32(t38_6);
                                                        *base.add(60).cast::<u8>() = (match t37_1 {
                                                            true => 1,
                                                            false => 0,
                                                        })
                                                            as u8;
                                                    }
                                                    None => {
                                                        *base.add(40).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            DbValuePrimitive::Tstzrange(e) => {
                                                *base.add(8).cast::<u8>() = (31i32) as u8;
                                                let (t39_0, t39_1) = e;
                                                match t39_0 {
                                                    Some(e) => {
                                                        *base.add(16).cast::<u8>() = (1i32) as u8;
                                                        let (t40_0, t40_1) = e;
                                                        let (
                                                            t41_0,
                                                            t41_1,
                                                            t41_2,
                                                            t41_3,
                                                            t41_4,
                                                            t41_5,
                                                            t41_6,
                                                            t41_7,
                                                        ) = t40_0;
                                                        *base.add(20).cast::<i32>() =
                                                            _rt::as_i32(t41_0);
                                                        *base.add(24).cast::<u8>() =
                                                            (_rt::as_i32(t41_1)) as u8;
                                                        *base.add(25).cast::<u8>() =
                                                            (_rt::as_i32(t41_2)) as u8;
                                                        *base.add(26).cast::<u8>() =
                                                            (_rt::as_i32(t41_3)) as u8;
                                                        *base.add(27).cast::<u8>() =
                                                            (_rt::as_i32(t41_4)) as u8;
                                                        *base.add(28).cast::<u8>() =
                                                            (_rt::as_i32(t41_5)) as u8;
                                                        *base.add(32).cast::<i32>() =
                                                            _rt::as_i32(t41_6);
                                                        *base.add(36).cast::<i32>() =
                                                            _rt::as_i32(t41_7);
                                                        *base.add(40).cast::<u8>() = (match t40_1 {
                                                            true => 1,
                                                            false => 0,
                                                        })
                                                            as u8;
                                                    }
                                                    None => {
                                                        *base.add(16).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                                match t39_1 {
                                                    Some(e) => {
                                                        *base.add(44).cast::<u8>() = (1i32) as u8;
                                                        let (t42_0, t42_1) = e;
                                                        let (
                                                            t43_0,
                                                            t43_1,
                                                            t43_2,
                                                            t43_3,
                                                            t43_4,
                                                            t43_5,
                                                            t43_6,
                                                            t43_7,
                                                        ) = t42_0;
                                                        *base.add(48).cast::<i32>() =
                                                            _rt::as_i32(t43_0);
                                                        *base.add(52).cast::<u8>() =
                                                            (_rt::as_i32(t43_1)) as u8;
                                                        *base.add(53).cast::<u8>() =
                                                            (_rt::as_i32(t43_2)) as u8;
                                                        *base.add(54).cast::<u8>() =
                                                            (_rt::as_i32(t43_3)) as u8;
                                                        *base.add(55).cast::<u8>() =
                                                            (_rt::as_i32(t43_4)) as u8;
                                                        *base.add(56).cast::<u8>() =
                                                            (_rt::as_i32(t43_5)) as u8;
                                                        *base.add(60).cast::<i32>() =
                                                            _rt::as_i32(t43_6);
                                                        *base.add(64).cast::<i32>() =
                                                            _rt::as_i32(t43_7);
                                                        *base.add(68).cast::<u8>() = (match t42_1 {
                                                            true => 1,
                                                            false => 0,
                                                        })
                                                            as u8;
                                                    }
                                                    None => {
                                                        *base.add(44).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            DbValuePrimitive::Daterange(e) => {
                                                *base.add(8).cast::<u8>() = (32i32) as u8;
                                                let (t44_0, t44_1) = e;
                                                match t44_0 {
                                                    Some(e) => {
                                                        *base.add(16).cast::<u8>() = (1i32) as u8;
                                                        let (t45_0, t45_1) = e;
                                                        let (t46_0, t46_1, t46_2) = t45_0;
                                                        *base.add(20).cast::<i32>() =
                                                            _rt::as_i32(t46_0);
                                                        *base.add(24).cast::<u8>() =
                                                            (_rt::as_i32(t46_1)) as u8;
                                                        *base.add(25).cast::<u8>() =
                                                            (_rt::as_i32(t46_2)) as u8;
                                                        *base.add(28).cast::<u8>() = (match t45_1 {
                                                            true => 1,
                                                            false => 0,
                                                        })
                                                            as u8;
                                                    }
                                                    None => {
                                                        *base.add(16).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                                match t44_1 {
                                                    Some(e) => {
                                                        *base.add(32).cast::<u8>() = (1i32) as u8;
                                                        let (t47_0, t47_1) = e;
                                                        let (t48_0, t48_1, t48_2) = t47_0;
                                                        *base.add(36).cast::<i32>() =
                                                            _rt::as_i32(t48_0);
                                                        *base.add(40).cast::<u8>() =
                                                            (_rt::as_i32(t48_1)) as u8;
                                                        *base.add(41).cast::<u8>() =
                                                            (_rt::as_i32(t48_2)) as u8;
                                                        *base.add(44).cast::<u8>() = (match t47_1 {
                                                            true => 1,
                                                            false => 0,
                                                        })
                                                            as u8;
                                                    }
                                                    None => {
                                                        *base.add(32).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            DbValuePrimitive::Oid(e) => {
                                                *base.add(8).cast::<u8>() = (33i32) as u8;
                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            DbValuePrimitive::CustomEnum(e) => {
                                                *base.add(8).cast::<u8>() = (34i32) as u8;
                                                let vec49 = e;
                                                let ptr49 = vec49.as_ptr().cast::<u8>();
                                                let len49 = vec49.len();
                                                *base.add(20).cast::<usize>() = len49;
                                                *base.add(16).cast::<*mut u8>() = ptr49.cast_mut();
                                            }
                                            DbValuePrimitive::Null => {
                                                *base.add(8).cast::<u8>() = (35i32) as u8;
                                            }
                                        }
                                    }
                                    DbValue::Array(e) => {
                                        *base.add(0).cast::<u8>() = (1i32) as u8;
                                        let vec99 = e;
                                        let len99 = vec99.len();
                                        let layout99 =
                                            _rt::alloc::Layout::from_size_align_unchecked(
                                                vec99.len() * 64,
                                                8,
                                            );
                                        let result99 = if layout99.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout99).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout99);
                                            }
                                            ptr
                                        } else {
                                            {
                                                ::core::ptr::null_mut()
                                            }
                                        };
                                        for (i, e) in vec99.into_iter().enumerate() {
                                            let base = result99.add(i * 64);
                                            {
                                                match e {
                                                    DbValuePrimitive::Character(e) => {
                                                        *base.add(0).cast::<u8>() = (0i32) as u8;
                                                        *base.add(8).cast::<u8>() =
                                                            (_rt::as_i32(e)) as u8;
                                                    }
                                                    DbValuePrimitive::Int2(e) => {
                                                        *base.add(0).cast::<u8>() = (1i32) as u8;
                                                        *base.add(8).cast::<u16>() =
                                                            (_rt::as_i32(e)) as u16;
                                                    }
                                                    DbValuePrimitive::Int4(e) => {
                                                        *base.add(0).cast::<u8>() = (2i32) as u8;
                                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    DbValuePrimitive::Int8(e) => {
                                                        *base.add(0).cast::<u8>() = (3i32) as u8;
                                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                    }
                                                    DbValuePrimitive::Float4(e) => {
                                                        *base.add(0).cast::<u8>() = (4i32) as u8;
                                                        *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                                    }
                                                    DbValuePrimitive::Float8(e) => {
                                                        *base.add(0).cast::<u8>() = (5i32) as u8;
                                                        *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                                    }
                                                    DbValuePrimitive::Numeric(e) => {
                                                        *base.add(0).cast::<u8>() = (6i32) as u8;
                                                        let vec50 = e;
                                                        let ptr50 = vec50.as_ptr().cast::<u8>();
                                                        let len50 = vec50.len();
                                                        *base.add(12).cast::<usize>() = len50;
                                                        *base.add(8).cast::<*mut u8>() =
                                                            ptr50.cast_mut();
                                                    }
                                                    DbValuePrimitive::Boolean(e) => {
                                                        *base.add(0).cast::<u8>() = (7i32) as u8;
                                                        *base.add(8).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        })
                                                            as u8;
                                                    }
                                                    DbValuePrimitive::Text(e) => {
                                                        *base.add(0).cast::<u8>() = (8i32) as u8;
                                                        let vec51 = e;
                                                        let ptr51 = vec51.as_ptr().cast::<u8>();
                                                        let len51 = vec51.len();
                                                        *base.add(12).cast::<usize>() = len51;
                                                        *base.add(8).cast::<*mut u8>() =
                                                            ptr51.cast_mut();
                                                    }
                                                    DbValuePrimitive::Varchar(e) => {
                                                        *base.add(0).cast::<u8>() = (9i32) as u8;
                                                        let vec52 = e;
                                                        let ptr52 = vec52.as_ptr().cast::<u8>();
                                                        let len52 = vec52.len();
                                                        *base.add(12).cast::<usize>() = len52;
                                                        *base.add(8).cast::<*mut u8>() =
                                                            ptr52.cast_mut();
                                                    }
                                                    DbValuePrimitive::Bpchar(e) => {
                                                        *base.add(0).cast::<u8>() = (10i32) as u8;
                                                        let vec53 = e;
                                                        let ptr53 = vec53.as_ptr().cast::<u8>();
                                                        let len53 = vec53.len();
                                                        *base.add(12).cast::<usize>() = len53;
                                                        *base.add(8).cast::<*mut u8>() =
                                                            ptr53.cast_mut();
                                                    }
                                                    DbValuePrimitive::Timestamp(e) => {
                                                        *base.add(0).cast::<u8>() = (11i32) as u8;
                                                        let (
                                                            t54_0,
                                                            t54_1,
                                                            t54_2,
                                                            t54_3,
                                                            t54_4,
                                                            t54_5,
                                                            t54_6,
                                                        ) = e;
                                                        *base.add(8).cast::<i32>() =
                                                            _rt::as_i32(t54_0);
                                                        *base.add(12).cast::<u8>() =
                                                            (_rt::as_i32(t54_1)) as u8;
                                                        *base.add(13).cast::<u8>() =
                                                            (_rt::as_i32(t54_2)) as u8;
                                                        *base.add(14).cast::<u8>() =
                                                            (_rt::as_i32(t54_3)) as u8;
                                                        *base.add(15).cast::<u8>() =
                                                            (_rt::as_i32(t54_4)) as u8;
                                                        *base.add(16).cast::<u8>() =
                                                            (_rt::as_i32(t54_5)) as u8;
                                                        *base.add(20).cast::<i32>() =
                                                            _rt::as_i32(t54_6);
                                                    }
                                                    DbValuePrimitive::Timestamptz(e) => {
                                                        *base.add(0).cast::<u8>() = (12i32) as u8;
                                                        let (
                                                            t55_0,
                                                            t55_1,
                                                            t55_2,
                                                            t55_3,
                                                            t55_4,
                                                            t55_5,
                                                            t55_6,
                                                            t55_7,
                                                        ) = e;
                                                        *base.add(8).cast::<i32>() =
                                                            _rt::as_i32(t55_0);
                                                        *base.add(12).cast::<u8>() =
                                                            (_rt::as_i32(t55_1)) as u8;
                                                        *base.add(13).cast::<u8>() =
                                                            (_rt::as_i32(t55_2)) as u8;
                                                        *base.add(14).cast::<u8>() =
                                                            (_rt::as_i32(t55_3)) as u8;
                                                        *base.add(15).cast::<u8>() =
                                                            (_rt::as_i32(t55_4)) as u8;
                                                        *base.add(16).cast::<u8>() =
                                                            (_rt::as_i32(t55_5)) as u8;
                                                        *base.add(20).cast::<i32>() =
                                                            _rt::as_i32(t55_6);
                                                        *base.add(24).cast::<i32>() =
                                                            _rt::as_i32(t55_7);
                                                    }
                                                    DbValuePrimitive::Date(e) => {
                                                        *base.add(0).cast::<u8>() = (13i32) as u8;
                                                        let (t56_0, t56_1, t56_2) = e;
                                                        *base.add(8).cast::<i32>() =
                                                            _rt::as_i32(t56_0);
                                                        *base.add(12).cast::<u8>() =
                                                            (_rt::as_i32(t56_1)) as u8;
                                                        *base.add(13).cast::<u8>() =
                                                            (_rt::as_i32(t56_2)) as u8;
                                                    }
                                                    DbValuePrimitive::Time(e) => {
                                                        *base.add(0).cast::<u8>() = (14i32) as u8;
                                                        let (t57_0, t57_1, t57_2, t57_3) = e;
                                                        *base.add(8).cast::<u8>() =
                                                            (_rt::as_i32(t57_0)) as u8;
                                                        *base.add(9).cast::<u8>() =
                                                            (_rt::as_i32(t57_1)) as u8;
                                                        *base.add(10).cast::<u8>() =
                                                            (_rt::as_i32(t57_2)) as u8;
                                                        *base.add(12).cast::<i32>() =
                                                            _rt::as_i32(t57_3);
                                                    }
                                                    DbValuePrimitive::Timetz(e) => {
                                                        *base.add(0).cast::<u8>() = (15i32) as u8;
                                                        let (t58_0, t58_1, t58_2, t58_3, t58_4) = e;
                                                        *base.add(8).cast::<u8>() =
                                                            (_rt::as_i32(t58_0)) as u8;
                                                        *base.add(9).cast::<u8>() =
                                                            (_rt::as_i32(t58_1)) as u8;
                                                        *base.add(10).cast::<u8>() =
                                                            (_rt::as_i32(t58_2)) as u8;
                                                        *base.add(12).cast::<i32>() =
                                                            _rt::as_i32(t58_3);
                                                        *base.add(16).cast::<i32>() =
                                                            _rt::as_i32(t58_4);
                                                    }
                                                    DbValuePrimitive::Interval(e) => {
                                                        *base.add(0).cast::<u8>() = (16i32) as u8;
                                                        let (t59_0, t59_1, t59_2) = e;
                                                        *base.add(8).cast::<i32>() =
                                                            _rt::as_i32(t59_0);
                                                        *base.add(12).cast::<i32>() =
                                                            _rt::as_i32(t59_1);
                                                        *base.add(16).cast::<i64>() =
                                                            _rt::as_i64(t59_2);
                                                    }
                                                    DbValuePrimitive::Bytea(e) => {
                                                        *base.add(0).cast::<u8>() = (17i32) as u8;
                                                        let vec60 = e;
                                                        let ptr60 = vec60.as_ptr().cast::<u8>();
                                                        let len60 = vec60.len();
                                                        *base.add(12).cast::<usize>() = len60;
                                                        *base.add(8).cast::<*mut u8>() =
                                                            ptr60.cast_mut();
                                                    }
                                                    DbValuePrimitive::Json(e) => {
                                                        *base.add(0).cast::<u8>() = (18i32) as u8;
                                                        let vec61 = e;
                                                        let ptr61 = vec61.as_ptr().cast::<u8>();
                                                        let len61 = vec61.len();
                                                        *base.add(12).cast::<usize>() = len61;
                                                        *base.add(8).cast::<*mut u8>() =
                                                            ptr61.cast_mut();
                                                    }
                                                    DbValuePrimitive::Jsonb(e) => {
                                                        *base.add(0).cast::<u8>() = (19i32) as u8;
                                                        let vec62 = e;
                                                        let ptr62 = vec62.as_ptr().cast::<u8>();
                                                        let len62 = vec62.len();
                                                        *base.add(12).cast::<usize>() = len62;
                                                        *base.add(8).cast::<*mut u8>() =
                                                            ptr62.cast_mut();
                                                    }
                                                    DbValuePrimitive::Xml(e) => {
                                                        *base.add(0).cast::<u8>() = (20i32) as u8;
                                                        let vec63 = e;
                                                        let ptr63 = vec63.as_ptr().cast::<u8>();
                                                        let len63 = vec63.len();
                                                        *base.add(12).cast::<usize>() = len63;
                                                        *base.add(8).cast::<*mut u8>() =
                                                            ptr63.cast_mut();
                                                    }
                                                    DbValuePrimitive::Uuid(e) => {
                                                        *base.add(0).cast::<u8>() = (21i32) as u8;
                                                        let (t64_0, t64_1) = e;
                                                        *base.add(8).cast::<i64>() =
                                                            _rt::as_i64(t64_0);
                                                        *base.add(16).cast::<i64>() =
                                                            _rt::as_i64(t64_1);
                                                    }
                                                    DbValuePrimitive::Inet(e) => {
                                                        *base.add(0).cast::<u8>() = (22i32) as u8;
                                                        match e {
                                                            IpAddress::Ipv4(e) => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (0i32) as u8;
                                                                let (t65_0, t65_1, t65_2, t65_3) =
                                                                    e;
                                                                *base.add(10).cast::<u8>() =
                                                                    (_rt::as_i32(t65_0)) as u8;
                                                                *base.add(11).cast::<u8>() =
                                                                    (_rt::as_i32(t65_1)) as u8;
                                                                *base.add(12).cast::<u8>() =
                                                                    (_rt::as_i32(t65_2)) as u8;
                                                                *base.add(13).cast::<u8>() =
                                                                    (_rt::as_i32(t65_3)) as u8;
                                                            }
                                                            IpAddress::Ipv6(e) => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                let (
                                                                    t66_0,
                                                                    t66_1,
                                                                    t66_2,
                                                                    t66_3,
                                                                    t66_4,
                                                                    t66_5,
                                                                    t66_6,
                                                                    t66_7,
                                                                ) = e;
                                                                *base.add(10).cast::<u16>() =
                                                                    (_rt::as_i32(t66_0)) as u16;
                                                                *base.add(12).cast::<u16>() =
                                                                    (_rt::as_i32(t66_1)) as u16;
                                                                *base.add(14).cast::<u16>() =
                                                                    (_rt::as_i32(t66_2)) as u16;
                                                                *base.add(16).cast::<u16>() =
                                                                    (_rt::as_i32(t66_3)) as u16;
                                                                *base.add(18).cast::<u16>() =
                                                                    (_rt::as_i32(t66_4)) as u16;
                                                                *base.add(20).cast::<u16>() =
                                                                    (_rt::as_i32(t66_5)) as u16;
                                                                *base.add(22).cast::<u16>() =
                                                                    (_rt::as_i32(t66_6)) as u16;
                                                                *base.add(24).cast::<u16>() =
                                                                    (_rt::as_i32(t66_7)) as u16;
                                                            }
                                                        }
                                                    }
                                                    DbValuePrimitive::Cidr(e) => {
                                                        *base.add(0).cast::<u8>() = (23i32) as u8;
                                                        match e {
                                                            IpAddress::Ipv4(e) => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (0i32) as u8;
                                                                let (t67_0, t67_1, t67_2, t67_3) =
                                                                    e;
                                                                *base.add(10).cast::<u8>() =
                                                                    (_rt::as_i32(t67_0)) as u8;
                                                                *base.add(11).cast::<u8>() =
                                                                    (_rt::as_i32(t67_1)) as u8;
                                                                *base.add(12).cast::<u8>() =
                                                                    (_rt::as_i32(t67_2)) as u8;
                                                                *base.add(13).cast::<u8>() =
                                                                    (_rt::as_i32(t67_3)) as u8;
                                                            }
                                                            IpAddress::Ipv6(e) => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                let (
                                                                    t68_0,
                                                                    t68_1,
                                                                    t68_2,
                                                                    t68_3,
                                                                    t68_4,
                                                                    t68_5,
                                                                    t68_6,
                                                                    t68_7,
                                                                ) = e;
                                                                *base.add(10).cast::<u16>() =
                                                                    (_rt::as_i32(t68_0)) as u16;
                                                                *base.add(12).cast::<u16>() =
                                                                    (_rt::as_i32(t68_1)) as u16;
                                                                *base.add(14).cast::<u16>() =
                                                                    (_rt::as_i32(t68_2)) as u16;
                                                                *base.add(16).cast::<u16>() =
                                                                    (_rt::as_i32(t68_3)) as u16;
                                                                *base.add(18).cast::<u16>() =
                                                                    (_rt::as_i32(t68_4)) as u16;
                                                                *base.add(20).cast::<u16>() =
                                                                    (_rt::as_i32(t68_5)) as u16;
                                                                *base.add(22).cast::<u16>() =
                                                                    (_rt::as_i32(t68_6)) as u16;
                                                                *base.add(24).cast::<u16>() =
                                                                    (_rt::as_i32(t68_7)) as u16;
                                                            }
                                                        }
                                                    }
                                                    DbValuePrimitive::Macaddr(e) => {
                                                        *base.add(0).cast::<u8>() = (24i32) as u8;
                                                        let (
                                                            t69_0,
                                                            t69_1,
                                                            t69_2,
                                                            t69_3,
                                                            t69_4,
                                                            t69_5,
                                                        ) = e;
                                                        *base.add(8).cast::<u8>() =
                                                            (_rt::as_i32(t69_0)) as u8;
                                                        *base.add(9).cast::<u8>() =
                                                            (_rt::as_i32(t69_1)) as u8;
                                                        *base.add(10).cast::<u8>() =
                                                            (_rt::as_i32(t69_2)) as u8;
                                                        *base.add(11).cast::<u8>() =
                                                            (_rt::as_i32(t69_3)) as u8;
                                                        *base.add(12).cast::<u8>() =
                                                            (_rt::as_i32(t69_4)) as u8;
                                                        *base.add(13).cast::<u8>() =
                                                            (_rt::as_i32(t69_5)) as u8;
                                                    }
                                                    DbValuePrimitive::Bit(e) => {
                                                        *base.add(0).cast::<u8>() = (25i32) as u8;
                                                        let vec70 = e;
                                                        let len70 = vec70.len();
                                                        let layout70 = _rt::alloc::Layout::from_size_align_unchecked(vec70.len() * 1, 1);
                                                        let result70 = if layout70.size() != 0 {
                                                            let ptr = _rt::alloc::alloc(layout70)
                                                                .cast::<u8>();
                                                            if ptr.is_null() {
                                                                _rt::alloc::handle_alloc_error(
                                                                    layout70,
                                                                );
                                                            }
                                                            ptr
                                                        } else {
                                                            {
                                                                ::core::ptr::null_mut()
                                                            }
                                                        };
                                                        for (i, e) in vec70.into_iter().enumerate()
                                                        {
                                                            let base = result70.add(i * 1);
                                                            {
                                                                *base.add(0).cast::<u8>() = (match e
                                                                {
                                                                    true => 1,
                                                                    false => 0,
                                                                })
                                                                    as u8;
                                                            }
                                                        }
                                                        *base.add(12).cast::<usize>() = len70;
                                                        *base.add(8).cast::<*mut u8>() = result70;
                                                        cleanup_list.extend_from_slice(&[(
                                                            result70, layout70,
                                                        )]);
                                                    }
                                                    DbValuePrimitive::Varbit(e) => {
                                                        *base.add(0).cast::<u8>() = (26i32) as u8;
                                                        let vec71 = e;
                                                        let len71 = vec71.len();
                                                        let layout71 = _rt::alloc::Layout::from_size_align_unchecked(vec71.len() * 1, 1);
                                                        let result71 = if layout71.size() != 0 {
                                                            let ptr = _rt::alloc::alloc(layout71)
                                                                .cast::<u8>();
                                                            if ptr.is_null() {
                                                                _rt::alloc::handle_alloc_error(
                                                                    layout71,
                                                                );
                                                            }
                                                            ptr
                                                        } else {
                                                            {
                                                                ::core::ptr::null_mut()
                                                            }
                                                        };
                                                        for (i, e) in vec71.into_iter().enumerate()
                                                        {
                                                            let base = result71.add(i * 1);
                                                            {
                                                                *base.add(0).cast::<u8>() = (match e
                                                                {
                                                                    true => 1,
                                                                    false => 0,
                                                                })
                                                                    as u8;
                                                            }
                                                        }
                                                        *base.add(12).cast::<usize>() = len71;
                                                        *base.add(8).cast::<*mut u8>() = result71;
                                                        cleanup_list.extend_from_slice(&[(
                                                            result71, layout71,
                                                        )]);
                                                    }
                                                    DbValuePrimitive::Int4range(e) => {
                                                        *base.add(0).cast::<u8>() = (27i32) as u8;
                                                        let (t72_0, t72_1) = e;
                                                        match t72_0 {
                                                            Some(e) => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                let (t73_0, t73_1) = e;
                                                                *base.add(12).cast::<i32>() =
                                                                    _rt::as_i32(t73_0);
                                                                *base.add(16).cast::<u8>() =
                                                                    (match t73_1 {
                                                                        true => 1,
                                                                        false => 0,
                                                                    })
                                                                        as u8;
                                                            }
                                                            None => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (0i32) as u8;
                                                            }
                                                        };
                                                        match t72_1 {
                                                            Some(e) => {
                                                                *base.add(20).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                let (t74_0, t74_1) = e;
                                                                *base.add(24).cast::<i32>() =
                                                                    _rt::as_i32(t74_0);
                                                                *base.add(28).cast::<u8>() =
                                                                    (match t74_1 {
                                                                        true => 1,
                                                                        false => 0,
                                                                    })
                                                                        as u8;
                                                            }
                                                            None => {
                                                                *base.add(20).cast::<u8>() =
                                                                    (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    DbValuePrimitive::Int8range(e) => {
                                                        *base.add(0).cast::<u8>() = (28i32) as u8;
                                                        let (t75_0, t75_1) = e;
                                                        match t75_0 {
                                                            Some(e) => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                let (t76_0, t76_1) = e;
                                                                *base.add(16).cast::<i64>() =
                                                                    _rt::as_i64(t76_0);
                                                                *base.add(24).cast::<u8>() =
                                                                    (match t76_1 {
                                                                        true => 1,
                                                                        false => 0,
                                                                    })
                                                                        as u8;
                                                            }
                                                            None => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (0i32) as u8;
                                                            }
                                                        };
                                                        match t75_1 {
                                                            Some(e) => {
                                                                *base.add(32).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                let (t77_0, t77_1) = e;
                                                                *base.add(40).cast::<i64>() =
                                                                    _rt::as_i64(t77_0);
                                                                *base.add(48).cast::<u8>() =
                                                                    (match t77_1 {
                                                                        true => 1,
                                                                        false => 0,
                                                                    })
                                                                        as u8;
                                                            }
                                                            None => {
                                                                *base.add(32).cast::<u8>() =
                                                                    (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    DbValuePrimitive::Numrange(e) => {
                                                        *base.add(0).cast::<u8>() = (29i32) as u8;
                                                        let (t78_0, t78_1) = e;
                                                        match t78_0 {
                                                            Some(e) => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                let (t79_0, t79_1) = e;
                                                                let vec80 = t79_0;
                                                                let ptr80 =
                                                                    vec80.as_ptr().cast::<u8>();
                                                                let len80 = vec80.len();
                                                                *base.add(16).cast::<usize>() =
                                                                    len80;
                                                                *base.add(12).cast::<*mut u8>() =
                                                                    ptr80.cast_mut();
                                                                *base.add(20).cast::<u8>() =
                                                                    (match t79_1 {
                                                                        true => 1,
                                                                        false => 0,
                                                                    })
                                                                        as u8;
                                                            }
                                                            None => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (0i32) as u8;
                                                            }
                                                        };
                                                        match t78_1 {
                                                            Some(e) => {
                                                                *base.add(24).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                let (t81_0, t81_1) = e;
                                                                let vec82 = t81_0;
                                                                let ptr82 =
                                                                    vec82.as_ptr().cast::<u8>();
                                                                let len82 = vec82.len();
                                                                *base.add(32).cast::<usize>() =
                                                                    len82;
                                                                *base.add(28).cast::<*mut u8>() =
                                                                    ptr82.cast_mut();
                                                                *base.add(36).cast::<u8>() =
                                                                    (match t81_1 {
                                                                        true => 1,
                                                                        false => 0,
                                                                    })
                                                                        as u8;
                                                            }
                                                            None => {
                                                                *base.add(24).cast::<u8>() =
                                                                    (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    DbValuePrimitive::Tsrange(e) => {
                                                        *base.add(0).cast::<u8>() = (30i32) as u8;
                                                        let (t83_0, t83_1) = e;
                                                        match t83_0 {
                                                            Some(e) => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                let (t84_0, t84_1) = e;
                                                                let (
                                                                    t85_0,
                                                                    t85_1,
                                                                    t85_2,
                                                                    t85_3,
                                                                    t85_4,
                                                                    t85_5,
                                                                    t85_6,
                                                                ) = t84_0;
                                                                *base.add(12).cast::<i32>() =
                                                                    _rt::as_i32(t85_0);
                                                                *base.add(16).cast::<u8>() =
                                                                    (_rt::as_i32(t85_1)) as u8;
                                                                *base.add(17).cast::<u8>() =
                                                                    (_rt::as_i32(t85_2)) as u8;
                                                                *base.add(18).cast::<u8>() =
                                                                    (_rt::as_i32(t85_3)) as u8;
                                                                *base.add(19).cast::<u8>() =
                                                                    (_rt::as_i32(t85_4)) as u8;
                                                                *base.add(20).cast::<u8>() =
                                                                    (_rt::as_i32(t85_5)) as u8;
                                                                *base.add(24).cast::<i32>() =
                                                                    _rt::as_i32(t85_6);
                                                                *base.add(28).cast::<u8>() =
                                                                    (match t84_1 {
                                                                        true => 1,
                                                                        false => 0,
                                                                    })
                                                                        as u8;
                                                            }
                                                            None => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (0i32) as u8;
                                                            }
                                                        };
                                                        match t83_1 {
                                                            Some(e) => {
                                                                *base.add(32).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                let (t86_0, t86_1) = e;
                                                                let (
                                                                    t87_0,
                                                                    t87_1,
                                                                    t87_2,
                                                                    t87_3,
                                                                    t87_4,
                                                                    t87_5,
                                                                    t87_6,
                                                                ) = t86_0;
                                                                *base.add(36).cast::<i32>() =
                                                                    _rt::as_i32(t87_0);
                                                                *base.add(40).cast::<u8>() =
                                                                    (_rt::as_i32(t87_1)) as u8;
                                                                *base.add(41).cast::<u8>() =
                                                                    (_rt::as_i32(t87_2)) as u8;
                                                                *base.add(42).cast::<u8>() =
                                                                    (_rt::as_i32(t87_3)) as u8;
                                                                *base.add(43).cast::<u8>() =
                                                                    (_rt::as_i32(t87_4)) as u8;
                                                                *base.add(44).cast::<u8>() =
                                                                    (_rt::as_i32(t87_5)) as u8;
                                                                *base.add(48).cast::<i32>() =
                                                                    _rt::as_i32(t87_6);
                                                                *base.add(52).cast::<u8>() =
                                                                    (match t86_1 {
                                                                        true => 1,
                                                                        false => 0,
                                                                    })
                                                                        as u8;
                                                            }
                                                            None => {
                                                                *base.add(32).cast::<u8>() =
                                                                    (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    DbValuePrimitive::Tstzrange(e) => {
                                                        *base.add(0).cast::<u8>() = (31i32) as u8;
                                                        let (t88_0, t88_1) = e;
                                                        match t88_0 {
                                                            Some(e) => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                let (t89_0, t89_1) = e;
                                                                let (
                                                                    t90_0,
                                                                    t90_1,
                                                                    t90_2,
                                                                    t90_3,
                                                                    t90_4,
                                                                    t90_5,
                                                                    t90_6,
                                                                    t90_7,
                                                                ) = t89_0;
                                                                *base.add(12).cast::<i32>() =
                                                                    _rt::as_i32(t90_0);
                                                                *base.add(16).cast::<u8>() =
                                                                    (_rt::as_i32(t90_1)) as u8;
                                                                *base.add(17).cast::<u8>() =
                                                                    (_rt::as_i32(t90_2)) as u8;
                                                                *base.add(18).cast::<u8>() =
                                                                    (_rt::as_i32(t90_3)) as u8;
                                                                *base.add(19).cast::<u8>() =
                                                                    (_rt::as_i32(t90_4)) as u8;
                                                                *base.add(20).cast::<u8>() =
                                                                    (_rt::as_i32(t90_5)) as u8;
                                                                *base.add(24).cast::<i32>() =
                                                                    _rt::as_i32(t90_6);
                                                                *base.add(28).cast::<i32>() =
                                                                    _rt::as_i32(t90_7);
                                                                *base.add(32).cast::<u8>() =
                                                                    (match t89_1 {
                                                                        true => 1,
                                                                        false => 0,
                                                                    })
                                                                        as u8;
                                                            }
                                                            None => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (0i32) as u8;
                                                            }
                                                        };
                                                        match t88_1 {
                                                            Some(e) => {
                                                                *base.add(36).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                let (t91_0, t91_1) = e;
                                                                let (
                                                                    t92_0,
                                                                    t92_1,
                                                                    t92_2,
                                                                    t92_3,
                                                                    t92_4,
                                                                    t92_5,
                                                                    t92_6,
                                                                    t92_7,
                                                                ) = t91_0;
                                                                *base.add(40).cast::<i32>() =
                                                                    _rt::as_i32(t92_0);
                                                                *base.add(44).cast::<u8>() =
                                                                    (_rt::as_i32(t92_1)) as u8;
                                                                *base.add(45).cast::<u8>() =
                                                                    (_rt::as_i32(t92_2)) as u8;
                                                                *base.add(46).cast::<u8>() =
                                                                    (_rt::as_i32(t92_3)) as u8;
                                                                *base.add(47).cast::<u8>() =
                                                                    (_rt::as_i32(t92_4)) as u8;
                                                                *base.add(48).cast::<u8>() =
                                                                    (_rt::as_i32(t92_5)) as u8;
                                                                *base.add(52).cast::<i32>() =
                                                                    _rt::as_i32(t92_6);
                                                                *base.add(56).cast::<i32>() =
                                                                    _rt::as_i32(t92_7);
                                                                *base.add(60).cast::<u8>() =
                                                                    (match t91_1 {
                                                                        true => 1,
                                                                        false => 0,
                                                                    })
                                                                        as u8;
                                                            }
                                                            None => {
                                                                *base.add(36).cast::<u8>() =
                                                                    (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    DbValuePrimitive::Daterange(e) => {
                                                        *base.add(0).cast::<u8>() = (32i32) as u8;
                                                        let (t93_0, t93_1) = e;
                                                        match t93_0 {
                                                            Some(e) => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                let (t94_0, t94_1) = e;
                                                                let (t95_0, t95_1, t95_2) = t94_0;
                                                                *base.add(12).cast::<i32>() =
                                                                    _rt::as_i32(t95_0);
                                                                *base.add(16).cast::<u8>() =
                                                                    (_rt::as_i32(t95_1)) as u8;
                                                                *base.add(17).cast::<u8>() =
                                                                    (_rt::as_i32(t95_2)) as u8;
                                                                *base.add(20).cast::<u8>() =
                                                                    (match t94_1 {
                                                                        true => 1,
                                                                        false => 0,
                                                                    })
                                                                        as u8;
                                                            }
                                                            None => {
                                                                *base.add(8).cast::<u8>() =
                                                                    (0i32) as u8;
                                                            }
                                                        };
                                                        match t93_1 {
                                                            Some(e) => {
                                                                *base.add(24).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                let (t96_0, t96_1) = e;
                                                                let (t97_0, t97_1, t97_2) = t96_0;
                                                                *base.add(28).cast::<i32>() =
                                                                    _rt::as_i32(t97_0);
                                                                *base.add(32).cast::<u8>() =
                                                                    (_rt::as_i32(t97_1)) as u8;
                                                                *base.add(33).cast::<u8>() =
                                                                    (_rt::as_i32(t97_2)) as u8;
                                                                *base.add(36).cast::<u8>() =
                                                                    (match t96_1 {
                                                                        true => 1,
                                                                        false => 0,
                                                                    })
                                                                        as u8;
                                                            }
                                                            None => {
                                                                *base.add(24).cast::<u8>() =
                                                                    (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    DbValuePrimitive::Oid(e) => {
                                                        *base.add(0).cast::<u8>() = (33i32) as u8;
                                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    DbValuePrimitive::CustomEnum(e) => {
                                                        *base.add(0).cast::<u8>() = (34i32) as u8;
                                                        let vec98 = e;
                                                        let ptr98 = vec98.as_ptr().cast::<u8>();
                                                        let len98 = vec98.len();
                                                        *base.add(12).cast::<usize>() = len98;
                                                        *base.add(8).cast::<*mut u8>() =
                                                            ptr98.cast_mut();
                                                    }
                                                    DbValuePrimitive::Null => {
                                                        *base.add(0).cast::<u8>() = (35i32) as u8;
                                                    }
                                                }
                                            }
                                        }
                                        *base.add(12).cast::<usize>() = len99;
                                        *base.add(8).cast::<*mut u8>() = result99;
                                        cleanup_list.extend_from_slice(&[(result99, layout99)]);
                                    }
                                }
                            }
                        }
                        let ptr101 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:rdbms/postgres@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]db-connection.execute"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            result100,
                            len100,
                            ptr101,
                        );
                        let l102 = i32::from(*ptr101.add(0).cast::<u8>());
                        if layout100.size() != 0 {
                            _rt::alloc::dealloc(result100.cast(), layout100);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l102 {
                            0 => {
                                let e = {
                                    let l103 = *ptr101.add(8).cast::<i64>();

                                    l103 as u64
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l104 = i32::from(*ptr101.add(8).cast::<u8>());
                                    let v120 = match l104 {
                                        0 => {
                                            let e120 = {
                                                let l105 = *ptr101.add(12).cast::<*mut u8>();
                                                let l106 = *ptr101.add(16).cast::<usize>();
                                                let len107 = l106;
                                                let bytes107 = _rt::Vec::from_raw_parts(
                                                    l105.cast(),
                                                    len107,
                                                    len107,
                                                );

                                                _rt::string_lift(bytes107)
                                            };
                                            Error::ConnectionFailure(e120)
                                        }
                                        1 => {
                                            let e120 = {
                                                let l108 = *ptr101.add(12).cast::<*mut u8>();
                                                let l109 = *ptr101.add(16).cast::<usize>();
                                                let len110 = l109;
                                                let bytes110 = _rt::Vec::from_raw_parts(
                                                    l108.cast(),
                                                    len110,
                                                    len110,
                                                );

                                                _rt::string_lift(bytes110)
                                            };
                                            Error::QueryParameterFailure(e120)
                                        }
                                        2 => {
                                            let e120 = {
                                                let l111 = *ptr101.add(12).cast::<*mut u8>();
                                                let l112 = *ptr101.add(16).cast::<usize>();
                                                let len113 = l112;
                                                let bytes113 = _rt::Vec::from_raw_parts(
                                                    l111.cast(),
                                                    len113,
                                                    len113,
                                                );

                                                _rt::string_lift(bytes113)
                                            };
                                            Error::QueryExecutionFailure(e120)
                                        }
                                        3 => {
                                            let e120 = {
                                                let l114 = *ptr101.add(12).cast::<*mut u8>();
                                                let l115 = *ptr101.add(16).cast::<usize>();
                                                let len116 = l115;
                                                let bytes116 = _rt::Vec::from_raw_parts(
                                                    l114.cast(),
                                                    len116,
                                                    len116,
                                                );

                                                _rt::string_lift(bytes116)
                                            };
                                            Error::QueryResponseFailure(e120)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 4, "invalid enum discriminant");
                                            let e120 = {
                                                let l117 = *ptr101.add(12).cast::<*mut u8>();
                                                let l118 = *ptr101.add(16).cast::<usize>();
                                                let len119 = l118;
                                                let bytes119 = _rt::Vec::from_raw_parts(
                                                    l117.cast(),
                                                    len119,
                                                    len119,
                                                );

                                                _rt::string_lift(bytes119)
                                            };
                                            Error::Other(e120)
                                        }
                                    };

                                    v120
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
        }

        #[allow(dead_code, clippy::all)]
        pub mod mysql {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[derive(Clone)]
            pub enum Error {
                ConnectionFailure(_rt::String),
                QueryParameterFailure(_rt::String),
                QueryExecutionFailure(_rt::String),
                QueryResponseFailure(_rt::String),
                Other(_rt::String),
            }
            impl ::core::fmt::Debug for Error {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        Error::ConnectionFailure(e) => {
                            f.debug_tuple("Error::ConnectionFailure").field(e).finish()
                        }
                        Error::QueryParameterFailure(e) => f
                            .debug_tuple("Error::QueryParameterFailure")
                            .field(e)
                            .finish(),
                        Error::QueryExecutionFailure(e) => f
                            .debug_tuple("Error::QueryExecutionFailure")
                            .field(e)
                            .finish(),
                        Error::QueryResponseFailure(e) => f
                            .debug_tuple("Error::QueryResponseFailure")
                            .field(e)
                            .finish(),
                        Error::Other(e) => f.debug_tuple("Error::Other").field(e).finish(),
                    }
                }
            }
            impl ::core::fmt::Display for Error {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }

            impl std::error::Error for Error {}
            pub type Date = (i32, u8, u8);
            /// year, month, day
            pub type Time = (u8, u8, u8, u32);
            /// hour, minute, second, nanosecond
            pub type Timestamp = (i32, u8, u8, u8, u8, u8, u32);
            /// year, month, day, hour, minute, second, nanosecond
            pub type BitVec = _rt::Vec<bool>;
            #[derive(Clone, Copy)]
            pub enum DbColumnType {
                Boolean,
                Tinyint,
                Smallint,
                Mediumint,
                Int,
                Bigint,
                TinyintUnsigned,
                SmallintUnsigned,
                MediumintUnsigned,
                IntUnsigned,
                BigintUnsigned,
                Float,
                Double,
                Decimal,
                Date,
                Datetime,
                Timestamp,
                Time,
                Year,
                Fixchar,
                Varchar,
                Tinytext,
                Text,
                Mediumtext,
                Longtext,
                Binary,
                Varbinary,
                Tinyblob,
                Blob,
                Mediumblob,
                Longblob,
                Enumeration,
                Set,
                Bit,
                Json,
            }
            impl ::core::fmt::Debug for DbColumnType {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        DbColumnType::Boolean => f.debug_tuple("DbColumnType::Boolean").finish(),
                        DbColumnType::Tinyint => f.debug_tuple("DbColumnType::Tinyint").finish(),
                        DbColumnType::Smallint => f.debug_tuple("DbColumnType::Smallint").finish(),
                        DbColumnType::Mediumint => {
                            f.debug_tuple("DbColumnType::Mediumint").finish()
                        }
                        DbColumnType::Int => f.debug_tuple("DbColumnType::Int").finish(),
                        DbColumnType::Bigint => f.debug_tuple("DbColumnType::Bigint").finish(),
                        DbColumnType::TinyintUnsigned => {
                            f.debug_tuple("DbColumnType::TinyintUnsigned").finish()
                        }
                        DbColumnType::SmallintUnsigned => {
                            f.debug_tuple("DbColumnType::SmallintUnsigned").finish()
                        }
                        DbColumnType::MediumintUnsigned => {
                            f.debug_tuple("DbColumnType::MediumintUnsigned").finish()
                        }
                        DbColumnType::IntUnsigned => {
                            f.debug_tuple("DbColumnType::IntUnsigned").finish()
                        }
                        DbColumnType::BigintUnsigned => {
                            f.debug_tuple("DbColumnType::BigintUnsigned").finish()
                        }
                        DbColumnType::Float => f.debug_tuple("DbColumnType::Float").finish(),
                        DbColumnType::Double => f.debug_tuple("DbColumnType::Double").finish(),
                        DbColumnType::Decimal => f.debug_tuple("DbColumnType::Decimal").finish(),
                        DbColumnType::Date => f.debug_tuple("DbColumnType::Date").finish(),
                        DbColumnType::Datetime => f.debug_tuple("DbColumnType::Datetime").finish(),
                        DbColumnType::Timestamp => {
                            f.debug_tuple("DbColumnType::Timestamp").finish()
                        }
                        DbColumnType::Time => f.debug_tuple("DbColumnType::Time").finish(),
                        DbColumnType::Year => f.debug_tuple("DbColumnType::Year").finish(),
                        DbColumnType::Fixchar => f.debug_tuple("DbColumnType::Fixchar").finish(),
                        DbColumnType::Varchar => f.debug_tuple("DbColumnType::Varchar").finish(),
                        DbColumnType::Tinytext => f.debug_tuple("DbColumnType::Tinytext").finish(),
                        DbColumnType::Text => f.debug_tuple("DbColumnType::Text").finish(),
                        DbColumnType::Mediumtext => {
                            f.debug_tuple("DbColumnType::Mediumtext").finish()
                        }
                        DbColumnType::Longtext => f.debug_tuple("DbColumnType::Longtext").finish(),
                        DbColumnType::Binary => f.debug_tuple("DbColumnType::Binary").finish(),
                        DbColumnType::Varbinary => {
                            f.debug_tuple("DbColumnType::Varbinary").finish()
                        }
                        DbColumnType::Tinyblob => f.debug_tuple("DbColumnType::Tinyblob").finish(),
                        DbColumnType::Blob => f.debug_tuple("DbColumnType::Blob").finish(),
                        DbColumnType::Mediumblob => {
                            f.debug_tuple("DbColumnType::Mediumblob").finish()
                        }
                        DbColumnType::Longblob => f.debug_tuple("DbColumnType::Longblob").finish(),
                        DbColumnType::Enumeration => {
                            f.debug_tuple("DbColumnType::Enumeration").finish()
                        }
                        DbColumnType::Set => f.debug_tuple("DbColumnType::Set").finish(),
                        DbColumnType::Bit => f.debug_tuple("DbColumnType::Bit").finish(),
                        DbColumnType::Json => f.debug_tuple("DbColumnType::Json").finish(),
                    }
                }
            }
            #[derive(Clone)]
            pub struct DbColumn {
                pub ordinal: u64,
                pub name: _rt::String,
                pub db_type: DbColumnType,
                pub db_type_name: _rt::String,
            }
            impl ::core::fmt::Debug for DbColumn {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("DbColumn")
                        .field("ordinal", &self.ordinal)
                        .field("name", &self.name)
                        .field("db-type", &self.db_type)
                        .field("db-type-name", &self.db_type_name)
                        .finish()
                }
            }
            /// Value descriptor for a single database value
            #[derive(Clone)]
            pub enum DbValue {
                Boolean(bool),
                Tinyint(i8),
                Smallint(i16),
                /// s24
                Mediumint(i32),
                Int(i32),
                Bigint(i64),
                TinyintUnsigned(u8),
                SmallintUnsigned(u16),
                /// u24
                MediumintUnsigned(u32),
                IntUnsigned(u32),
                BigintUnsigned(u64),
                Float(f32),
                Double(f64),
                Decimal(_rt::String),
                Date(Date),
                Datetime(Timestamp),
                Timestamp(Timestamp),
                Time(Time),
                Year(u16),
                Fixchar(_rt::String),
                Varchar(_rt::String),
                Tinytext(_rt::String),
                Text(_rt::String),
                Mediumtext(_rt::String),
                Longtext(_rt::String),
                Binary(_rt::Vec<u8>),
                Varbinary(_rt::Vec<u8>),
                Tinyblob(_rt::Vec<u8>),
                Blob(_rt::Vec<u8>),
                Mediumblob(_rt::Vec<u8>),
                Longblob(_rt::Vec<u8>),
                Enumeration(_rt::String),
                Set(_rt::String),
                Bit(BitVec),
                Json(_rt::String),
                Null,
            }
            impl ::core::fmt::Debug for DbValue {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        DbValue::Boolean(e) => f.debug_tuple("DbValue::Boolean").field(e).finish(),
                        DbValue::Tinyint(e) => f.debug_tuple("DbValue::Tinyint").field(e).finish(),
                        DbValue::Smallint(e) => {
                            f.debug_tuple("DbValue::Smallint").field(e).finish()
                        }
                        DbValue::Mediumint(e) => {
                            f.debug_tuple("DbValue::Mediumint").field(e).finish()
                        }
                        DbValue::Int(e) => f.debug_tuple("DbValue::Int").field(e).finish(),
                        DbValue::Bigint(e) => f.debug_tuple("DbValue::Bigint").field(e).finish(),
                        DbValue::TinyintUnsigned(e) => {
                            f.debug_tuple("DbValue::TinyintUnsigned").field(e).finish()
                        }
                        DbValue::SmallintUnsigned(e) => {
                            f.debug_tuple("DbValue::SmallintUnsigned").field(e).finish()
                        }
                        DbValue::MediumintUnsigned(e) => f
                            .debug_tuple("DbValue::MediumintUnsigned")
                            .field(e)
                            .finish(),
                        DbValue::IntUnsigned(e) => {
                            f.debug_tuple("DbValue::IntUnsigned").field(e).finish()
                        }
                        DbValue::BigintUnsigned(e) => {
                            f.debug_tuple("DbValue::BigintUnsigned").field(e).finish()
                        }
                        DbValue::Float(e) => f.debug_tuple("DbValue::Float").field(e).finish(),
                        DbValue::Double(e) => f.debug_tuple("DbValue::Double").field(e).finish(),
                        DbValue::Decimal(e) => f.debug_tuple("DbValue::Decimal").field(e).finish(),
                        DbValue::Date(e) => f.debug_tuple("DbValue::Date").field(e).finish(),
                        DbValue::Datetime(e) => {
                            f.debug_tuple("DbValue::Datetime").field(e).finish()
                        }
                        DbValue::Timestamp(e) => {
                            f.debug_tuple("DbValue::Timestamp").field(e).finish()
                        }
                        DbValue::Time(e) => f.debug_tuple("DbValue::Time").field(e).finish(),
                        DbValue::Year(e) => f.debug_tuple("DbValue::Year").field(e).finish(),
                        DbValue::Fixchar(e) => f.debug_tuple("DbValue::Fixchar").field(e).finish(),
                        DbValue::Varchar(e) => f.debug_tuple("DbValue::Varchar").field(e).finish(),
                        DbValue::Tinytext(e) => {
                            f.debug_tuple("DbValue::Tinytext").field(e).finish()
                        }
                        DbValue::Text(e) => f.debug_tuple("DbValue::Text").field(e).finish(),
                        DbValue::Mediumtext(e) => {
                            f.debug_tuple("DbValue::Mediumtext").field(e).finish()
                        }
                        DbValue::Longtext(e) => {
                            f.debug_tuple("DbValue::Longtext").field(e).finish()
                        }
                        DbValue::Binary(e) => f.debug_tuple("DbValue::Binary").field(e).finish(),
                        DbValue::Varbinary(e) => {
                            f.debug_tuple("DbValue::Varbinary").field(e).finish()
                        }
                        DbValue::Tinyblob(e) => {
                            f.debug_tuple("DbValue::Tinyblob").field(e).finish()
                        }
                        DbValue::Blob(e) => f.debug_tuple("DbValue::Blob").field(e).finish(),
                        DbValue::Mediumblob(e) => {
                            f.debug_tuple("DbValue::Mediumblob").field(e).finish()
                        }
                        DbValue::Longblob(e) => {
                            f.debug_tuple("DbValue::Longblob").field(e).finish()
                        }
                        DbValue::Enumeration(e) => {
                            f.debug_tuple("DbValue::Enumeration").field(e).finish()
                        }
                        DbValue::Set(e) => f.debug_tuple("DbValue::Set").field(e).finish(),
                        DbValue::Bit(e) => f.debug_tuple("DbValue::Bit").field(e).finish(),
                        DbValue::Json(e) => f.debug_tuple("DbValue::Json").field(e).finish(),
                        DbValue::Null => f.debug_tuple("DbValue::Null").finish(),
                    }
                }
            }
            /// A single row of values
            #[derive(Clone)]
            pub struct DbRow {
                pub values: _rt::Vec<DbValue>,
            }
            impl ::core::fmt::Debug for DbRow {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("DbRow")
                        .field("values", &self.values)
                        .finish()
                }
            }
            /// A potentially very large and lazy stream of rows:

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct DbResultSet {
                handle: _rt::Resource<DbResultSet>,
            }

            impl DbResultSet {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for DbResultSet {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:rdbms/mysql@0.0.1")]
                        extern "C" {
                            #[link_name = "[resource-drop]db-result-set"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct DbConnection {
                handle: _rt::Resource<DbConnection>,
            }

            impl DbConnection {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for DbConnection {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:rdbms/mysql@0.0.1")]
                        extern "C" {
                            #[link_name = "[resource-drop]db-connection"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            impl DbResultSet {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_columns(&self) -> _rt::Vec<DbColumn> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:rdbms/mysql@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]db-result-set.get-columns"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let base12 = l1;
                        let len12 = l2;
                        let mut result12 = _rt::Vec::with_capacity(len12);
                        for i in 0..len12 {
                            let base = base12.add(i * 32);
                            let e12 = {
                                let l3 = *base.add(0).cast::<i64>();
                                let l4 = *base.add(8).cast::<*mut u8>();
                                let l5 = *base.add(12).cast::<usize>();
                                let len6 = l5;
                                let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);
                                let l7 = i32::from(*base.add(16).cast::<u8>());
                                let v8 = match l7 {
                                    0 => DbColumnType::Boolean,
                                    1 => DbColumnType::Tinyint,
                                    2 => DbColumnType::Smallint,
                                    3 => DbColumnType::Mediumint,
                                    4 => DbColumnType::Int,
                                    5 => DbColumnType::Bigint,
                                    6 => DbColumnType::TinyintUnsigned,
                                    7 => DbColumnType::SmallintUnsigned,
                                    8 => DbColumnType::MediumintUnsigned,
                                    9 => DbColumnType::IntUnsigned,
                                    10 => DbColumnType::BigintUnsigned,
                                    11 => DbColumnType::Float,
                                    12 => DbColumnType::Double,
                                    13 => DbColumnType::Decimal,
                                    14 => DbColumnType::Date,
                                    15 => DbColumnType::Datetime,
                                    16 => DbColumnType::Timestamp,
                                    17 => DbColumnType::Time,
                                    18 => DbColumnType::Year,
                                    19 => DbColumnType::Fixchar,
                                    20 => DbColumnType::Varchar,
                                    21 => DbColumnType::Tinytext,
                                    22 => DbColumnType::Text,
                                    23 => DbColumnType::Mediumtext,
                                    24 => DbColumnType::Longtext,
                                    25 => DbColumnType::Binary,
                                    26 => DbColumnType::Varbinary,
                                    27 => DbColumnType::Tinyblob,
                                    28 => DbColumnType::Blob,
                                    29 => DbColumnType::Mediumblob,
                                    30 => DbColumnType::Longblob,
                                    31 => DbColumnType::Enumeration,
                                    32 => DbColumnType::Set,
                                    33 => DbColumnType::Bit,
                                    n => {
                                        debug_assert_eq!(n, 34, "invalid enum discriminant");
                                        DbColumnType::Json
                                    }
                                };
                                let l9 = *base.add(20).cast::<*mut u8>();
                                let l10 = *base.add(24).cast::<usize>();
                                let len11 = l10;
                                let bytes11 = _rt::Vec::from_raw_parts(l9.cast(), len11, len11);

                                DbColumn {
                                    ordinal: l3 as u64,
                                    name: _rt::string_lift(bytes6),
                                    db_type: v8,
                                    db_type_name: _rt::string_lift(bytes11),
                                }
                            };
                            result12.push(e12);
                        }
                        _rt::cabi_dealloc(base12, len12 * 32, 8);
                        result12
                    }
                }
            }
            impl DbResultSet {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_next(&self) -> Option<_rt::Vec<DbRow>> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:rdbms/mysql@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]db-result-set.get-next"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<*mut u8>();
                                    let l3 = *ptr0.add(8).cast::<usize>();
                                    let base96 = l2;
                                    let len96 = l3;
                                    let mut result96 = _rt::Vec::with_capacity(len96);
                                    for i in 0..len96 {
                                        let base = base96.add(i * 8);
                                        let e96 = {
                                            let l4 = *base.add(0).cast::<*mut u8>();
                                            let l5 = *base.add(4).cast::<usize>();
                                            let base95 = l4;
                                            let len95 = l5;
                                            let mut result95 = _rt::Vec::with_capacity(len95);
                                            for i in 0..len95 {
                                                let base = base95.add(i * 24);
                                                let e95 = {
                                                    let l6 = i32::from(*base.add(0).cast::<u8>());
                                                    let v94 = match l6 {
                                                        0 => {
                                                            let e94 = {
                                                                let l7 = i32::from(
                                                                    *base.add(8).cast::<u8>(),
                                                                );

                                                                _rt::bool_lift(l7 as u8)
                                                            };
                                                            DbValue::Boolean(e94)
                                                        }
                                                        1 => {
                                                            let e94 = {
                                                                let l8 = i32::from(
                                                                    *base.add(8).cast::<i8>(),
                                                                );

                                                                l8 as i8
                                                            };
                                                            DbValue::Tinyint(e94)
                                                        }
                                                        2 => {
                                                            let e94 = {
                                                                let l9 = i32::from(
                                                                    *base.add(8).cast::<i16>(),
                                                                );

                                                                l9 as i16
                                                            };
                                                            DbValue::Smallint(e94)
                                                        }
                                                        3 => {
                                                            let e94 = {
                                                                let l10 =
                                                                    *base.add(8).cast::<i32>();

                                                                l10
                                                            };
                                                            DbValue::Mediumint(e94)
                                                        }
                                                        4 => {
                                                            let e94 = {
                                                                let l11 =
                                                                    *base.add(8).cast::<i32>();

                                                                l11
                                                            };
                                                            DbValue::Int(e94)
                                                        }
                                                        5 => {
                                                            let e94 = {
                                                                let l12 =
                                                                    *base.add(8).cast::<i64>();

                                                                l12
                                                            };
                                                            DbValue::Bigint(e94)
                                                        }
                                                        6 => {
                                                            let e94 = {
                                                                let l13 = i32::from(
                                                                    *base.add(8).cast::<u8>(),
                                                                );

                                                                l13 as u8
                                                            };
                                                            DbValue::TinyintUnsigned(e94)
                                                        }
                                                        7 => {
                                                            let e94 = {
                                                                let l14 = i32::from(
                                                                    *base.add(8).cast::<u16>(),
                                                                );

                                                                l14 as u16
                                                            };
                                                            DbValue::SmallintUnsigned(e94)
                                                        }
                                                        8 => {
                                                            let e94 = {
                                                                let l15 =
                                                                    *base.add(8).cast::<i32>();

                                                                l15 as u32
                                                            };
                                                            DbValue::MediumintUnsigned(e94)
                                                        }
                                                        9 => {
                                                            let e94 = {
                                                                let l16 =
                                                                    *base.add(8).cast::<i32>();

                                                                l16 as u32
                                                            };
                                                            DbValue::IntUnsigned(e94)
                                                        }
                                                        10 => {
                                                            let e94 = {
                                                                let l17 =
                                                                    *base.add(8).cast::<i64>();

                                                                l17 as u64
                                                            };
                                                            DbValue::BigintUnsigned(e94)
                                                        }
                                                        11 => {
                                                            let e94 = {
                                                                let l18 =
                                                                    *base.add(8).cast::<f32>();

                                                                l18
                                                            };
                                                            DbValue::Float(e94)
                                                        }
                                                        12 => {
                                                            let e94 = {
                                                                let l19 =
                                                                    *base.add(8).cast::<f64>();

                                                                l19
                                                            };
                                                            DbValue::Double(e94)
                                                        }
                                                        13 => {
                                                            let e94 = {
                                                                let l20 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l21 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len22 = l21;
                                                                let bytes22 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l20.cast(),
                                                                        len22,
                                                                        len22,
                                                                    );

                                                                _rt::string_lift(bytes22)
                                                            };
                                                            DbValue::Decimal(e94)
                                                        }
                                                        14 => {
                                                            let e94 = {
                                                                let l23 =
                                                                    *base.add(8).cast::<i32>();
                                                                let l24 = i32::from(
                                                                    *base.add(12).cast::<u8>(),
                                                                );
                                                                let l25 = i32::from(
                                                                    *base.add(13).cast::<u8>(),
                                                                );

                                                                (l23, l24 as u8, l25 as u8)
                                                            };
                                                            DbValue::Date(e94)
                                                        }
                                                        15 => {
                                                            let e94 = {
                                                                let l26 =
                                                                    *base.add(8).cast::<i32>();
                                                                let l27 = i32::from(
                                                                    *base.add(12).cast::<u8>(),
                                                                );
                                                                let l28 = i32::from(
                                                                    *base.add(13).cast::<u8>(),
                                                                );
                                                                let l29 = i32::from(
                                                                    *base.add(14).cast::<u8>(),
                                                                );
                                                                let l30 = i32::from(
                                                                    *base.add(15).cast::<u8>(),
                                                                );
                                                                let l31 = i32::from(
                                                                    *base.add(16).cast::<u8>(),
                                                                );
                                                                let l32 =
                                                                    *base.add(20).cast::<i32>();

                                                                (
                                                                    l26, l27 as u8, l28 as u8,
                                                                    l29 as u8, l30 as u8,
                                                                    l31 as u8, l32 as u32,
                                                                )
                                                            };
                                                            DbValue::Datetime(e94)
                                                        }
                                                        16 => {
                                                            let e94 = {
                                                                let l33 =
                                                                    *base.add(8).cast::<i32>();
                                                                let l34 = i32::from(
                                                                    *base.add(12).cast::<u8>(),
                                                                );
                                                                let l35 = i32::from(
                                                                    *base.add(13).cast::<u8>(),
                                                                );
                                                                let l36 = i32::from(
                                                                    *base.add(14).cast::<u8>(),
                                                                );
                                                                let l37 = i32::from(
                                                                    *base.add(15).cast::<u8>(),
                                                                );
                                                                let l38 = i32::from(
                                                                    *base.add(16).cast::<u8>(),
                                                                );
                                                                let l39 =
                                                                    *base.add(20).cast::<i32>();

                                                                (
                                                                    l33, l34 as u8, l35 as u8,
                                                                    l36 as u8, l37 as u8,
                                                                    l38 as u8, l39 as u32,
                                                                )
                                                            };
                                                            DbValue::Timestamp(e94)
                                                        }
                                                        17 => {
                                                            let e94 = {
                                                                let l40 = i32::from(
                                                                    *base.add(8).cast::<u8>(),
                                                                );
                                                                let l41 = i32::from(
                                                                    *base.add(9).cast::<u8>(),
                                                                );
                                                                let l42 = i32::from(
                                                                    *base.add(10).cast::<u8>(),
                                                                );
                                                                let l43 =
                                                                    *base.add(12).cast::<i32>();

                                                                (
                                                                    l40 as u8, l41 as u8,
                                                                    l42 as u8, l43 as u32,
                                                                )
                                                            };
                                                            DbValue::Time(e94)
                                                        }
                                                        18 => {
                                                            let e94 = {
                                                                let l44 = i32::from(
                                                                    *base.add(8).cast::<u16>(),
                                                                );

                                                                l44 as u16
                                                            };
                                                            DbValue::Year(e94)
                                                        }
                                                        19 => {
                                                            let e94 = {
                                                                let l45 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l46 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len47 = l46;
                                                                let bytes47 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l45.cast(),
                                                                        len47,
                                                                        len47,
                                                                    );

                                                                _rt::string_lift(bytes47)
                                                            };
                                                            DbValue::Fixchar(e94)
                                                        }
                                                        20 => {
                                                            let e94 = {
                                                                let l48 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l49 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len50 = l49;
                                                                let bytes50 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l48.cast(),
                                                                        len50,
                                                                        len50,
                                                                    );

                                                                _rt::string_lift(bytes50)
                                                            };
                                                            DbValue::Varchar(e94)
                                                        }
                                                        21 => {
                                                            let e94 = {
                                                                let l51 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l52 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len53 = l52;
                                                                let bytes53 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l51.cast(),
                                                                        len53,
                                                                        len53,
                                                                    );

                                                                _rt::string_lift(bytes53)
                                                            };
                                                            DbValue::Tinytext(e94)
                                                        }
                                                        22 => {
                                                            let e94 = {
                                                                let l54 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l55 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len56 = l55;
                                                                let bytes56 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l54.cast(),
                                                                        len56,
                                                                        len56,
                                                                    );

                                                                _rt::string_lift(bytes56)
                                                            };
                                                            DbValue::Text(e94)
                                                        }
                                                        23 => {
                                                            let e94 = {
                                                                let l57 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l58 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len59 = l58;
                                                                let bytes59 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l57.cast(),
                                                                        len59,
                                                                        len59,
                                                                    );

                                                                _rt::string_lift(bytes59)
                                                            };
                                                            DbValue::Mediumtext(e94)
                                                        }
                                                        24 => {
                                                            let e94 = {
                                                                let l60 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l61 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len62 = l61;
                                                                let bytes62 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l60.cast(),
                                                                        len62,
                                                                        len62,
                                                                    );

                                                                _rt::string_lift(bytes62)
                                                            };
                                                            DbValue::Longtext(e94)
                                                        }
                                                        25 => {
                                                            let e94 = {
                                                                let l63 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l64 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len65 = l64;

                                                                _rt::Vec::from_raw_parts(
                                                                    l63.cast(),
                                                                    len65,
                                                                    len65,
                                                                )
                                                            };
                                                            DbValue::Binary(e94)
                                                        }
                                                        26 => {
                                                            let e94 = {
                                                                let l66 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l67 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len68 = l67;

                                                                _rt::Vec::from_raw_parts(
                                                                    l66.cast(),
                                                                    len68,
                                                                    len68,
                                                                )
                                                            };
                                                            DbValue::Varbinary(e94)
                                                        }
                                                        27 => {
                                                            let e94 = {
                                                                let l69 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l70 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len71 = l70;

                                                                _rt::Vec::from_raw_parts(
                                                                    l69.cast(),
                                                                    len71,
                                                                    len71,
                                                                )
                                                            };
                                                            DbValue::Tinyblob(e94)
                                                        }
                                                        28 => {
                                                            let e94 = {
                                                                let l72 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l73 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len74 = l73;

                                                                _rt::Vec::from_raw_parts(
                                                                    l72.cast(),
                                                                    len74,
                                                                    len74,
                                                                )
                                                            };
                                                            DbValue::Blob(e94)
                                                        }
                                                        29 => {
                                                            let e94 = {
                                                                let l75 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l76 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len77 = l76;

                                                                _rt::Vec::from_raw_parts(
                                                                    l75.cast(),
                                                                    len77,
                                                                    len77,
                                                                )
                                                            };
                                                            DbValue::Mediumblob(e94)
                                                        }
                                                        30 => {
                                                            let e94 = {
                                                                let l78 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l79 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len80 = l79;

                                                                _rt::Vec::from_raw_parts(
                                                                    l78.cast(),
                                                                    len80,
                                                                    len80,
                                                                )
                                                            };
                                                            DbValue::Longblob(e94)
                                                        }
                                                        31 => {
                                                            let e94 = {
                                                                let l81 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l82 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len83 = l82;
                                                                let bytes83 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l81.cast(),
                                                                        len83,
                                                                        len83,
                                                                    );

                                                                _rt::string_lift(bytes83)
                                                            };
                                                            DbValue::Enumeration(e94)
                                                        }
                                                        32 => {
                                                            let e94 = {
                                                                let l84 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l85 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len86 = l85;
                                                                let bytes86 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l84.cast(),
                                                                        len86,
                                                                        len86,
                                                                    );

                                                                _rt::string_lift(bytes86)
                                                            };
                                                            DbValue::Set(e94)
                                                        }
                                                        33 => {
                                                            let e94 = {
                                                                let l87 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l88 =
                                                                    *base.add(12).cast::<usize>();
                                                                let base90 = l87;
                                                                let len90 = l88;
                                                                let mut result90 =
                                                                    _rt::Vec::with_capacity(len90);
                                                                for i in 0..len90 {
                                                                    let base = base90.add(i * 1);
                                                                    let e90 = {
                                                                        let l89 = i32::from(
                                                                            *base
                                                                                .add(0)
                                                                                .cast::<u8>(),
                                                                        );

                                                                        _rt::bool_lift(l89 as u8)
                                                                    };
                                                                    result90.push(e90);
                                                                }
                                                                _rt::cabi_dealloc(
                                                                    base90,
                                                                    len90 * 1,
                                                                    1,
                                                                );

                                                                result90
                                                            };
                                                            DbValue::Bit(e94)
                                                        }
                                                        34 => {
                                                            let e94 = {
                                                                let l91 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l92 =
                                                                    *base.add(12).cast::<usize>();
                                                                let len93 = l92;
                                                                let bytes93 =
                                                                    _rt::Vec::from_raw_parts(
                                                                        l91.cast(),
                                                                        len93,
                                                                        len93,
                                                                    );

                                                                _rt::string_lift(bytes93)
                                                            };
                                                            DbValue::Json(e94)
                                                        }
                                                        n => {
                                                            debug_assert_eq!(
                                                                n, 35,
                                                                "invalid enum discriminant"
                                                            );
                                                            DbValue::Null
                                                        }
                                                    };

                                                    v94
                                                };
                                                result95.push(e95);
                                            }
                                            _rt::cabi_dealloc(base95, len95 * 24, 8);

                                            DbRow { values: result95 }
                                        };
                                        result96.push(e96);
                                    }
                                    _rt::cabi_dealloc(base96, len96 * 8, 4);

                                    result96
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl DbConnection {
                #[allow(unused_unsafe, clippy::all)]
                pub fn open(address: &str) -> Result<DbConnection, Error> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let vec0 = address;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:rdbms/mysql@0.0.1")]
                        extern "C" {
                            #[link_name = "[static]db-connection.open"]
                            fn wit_import(_: *mut u8, _: usize, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import(ptr0.cast_mut(), len0, ptr1);
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => {
                                let e = {
                                    let l3 = *ptr1.add(4).cast::<i32>();

                                    DbConnection::from_handle(l3 as u32)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l4 = i32::from(*ptr1.add(4).cast::<u8>());
                                    let v20 = match l4 {
                                        0 => {
                                            let e20 = {
                                                let l5 = *ptr1.add(8).cast::<*mut u8>();
                                                let l6 = *ptr1.add(12).cast::<usize>();
                                                let len7 = l6;
                                                let bytes7 =
                                                    _rt::Vec::from_raw_parts(l5.cast(), len7, len7);

                                                _rt::string_lift(bytes7)
                                            };
                                            Error::ConnectionFailure(e20)
                                        }
                                        1 => {
                                            let e20 = {
                                                let l8 = *ptr1.add(8).cast::<*mut u8>();
                                                let l9 = *ptr1.add(12).cast::<usize>();
                                                let len10 = l9;
                                                let bytes10 = _rt::Vec::from_raw_parts(
                                                    l8.cast(),
                                                    len10,
                                                    len10,
                                                );

                                                _rt::string_lift(bytes10)
                                            };
                                            Error::QueryParameterFailure(e20)
                                        }
                                        2 => {
                                            let e20 = {
                                                let l11 = *ptr1.add(8).cast::<*mut u8>();
                                                let l12 = *ptr1.add(12).cast::<usize>();
                                                let len13 = l12;
                                                let bytes13 = _rt::Vec::from_raw_parts(
                                                    l11.cast(),
                                                    len13,
                                                    len13,
                                                );

                                                _rt::string_lift(bytes13)
                                            };
                                            Error::QueryExecutionFailure(e20)
                                        }
                                        3 => {
                                            let e20 = {
                                                let l14 = *ptr1.add(8).cast::<*mut u8>();
                                                let l15 = *ptr1.add(12).cast::<usize>();
                                                let len16 = l15;
                                                let bytes16 = _rt::Vec::from_raw_parts(
                                                    l14.cast(),
                                                    len16,
                                                    len16,
                                                );

                                                _rt::string_lift(bytes16)
                                            };
                                            Error::QueryResponseFailure(e20)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 4, "invalid enum discriminant");
                                            let e20 = {
                                                let l17 = *ptr1.add(8).cast::<*mut u8>();
                                                let l18 = *ptr1.add(12).cast::<usize>();
                                                let len19 = l18;
                                                let bytes19 = _rt::Vec::from_raw_parts(
                                                    l17.cast(),
                                                    len19,
                                                    len19,
                                                );

                                                _rt::string_lift(bytes19)
                                            };
                                            Error::Other(e20)
                                        }
                                    };

                                    v20
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl DbConnection {
                #[allow(unused_unsafe, clippy::all)]
                pub fn query(
                    &self,
                    statement: &str,
                    params: &[DbValue],
                ) -> Result<DbResultSet, Error> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let vec0 = statement;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec22 = params;
                        let len22 = vec22.len();
                        let layout22 =
                            _rt::alloc::Layout::from_size_align_unchecked(vec22.len() * 24, 8);
                        let result22 = if layout22.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout22).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout22);
                            }
                            ptr
                        } else {
                            {
                                ::core::ptr::null_mut()
                            }
                        };
                        for (i, e) in vec22.into_iter().enumerate() {
                            let base = result22.add(i * 24);
                            {
                                match e {
                                    DbValue::Boolean(e) => {
                                        *base.add(0).cast::<u8>() = (0i32) as u8;
                                        *base.add(8).cast::<u8>() = (match e {
                                            true => 1,
                                            false => 0,
                                        })
                                            as u8;
                                    }
                                    DbValue::Tinyint(e) => {
                                        *base.add(0).cast::<u8>() = (1i32) as u8;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                    }
                                    DbValue::Smallint(e) => {
                                        *base.add(0).cast::<u8>() = (2i32) as u8;
                                        *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                    }
                                    DbValue::Mediumint(e) => {
                                        *base.add(0).cast::<u8>() = (3i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::Int(e) => {
                                        *base.add(0).cast::<u8>() = (4i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::Bigint(e) => {
                                        *base.add(0).cast::<u8>() = (5i32) as u8;
                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    DbValue::TinyintUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (6i32) as u8;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                    }
                                    DbValue::SmallintUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (7i32) as u8;
                                        *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                    }
                                    DbValue::MediumintUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (8i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::IntUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (9i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::BigintUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (10i32) as u8;
                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    DbValue::Float(e) => {
                                        *base.add(0).cast::<u8>() = (11i32) as u8;
                                        *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                    }
                                    DbValue::Double(e) => {
                                        *base.add(0).cast::<u8>() = (12i32) as u8;
                                        *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                    }
                                    DbValue::Decimal(e) => {
                                        *base.add(0).cast::<u8>() = (13i32) as u8;
                                        let vec1 = e;
                                        let ptr1 = vec1.as_ptr().cast::<u8>();
                                        let len1 = vec1.len();
                                        *base.add(12).cast::<usize>() = len1;
                                        *base.add(8).cast::<*mut u8>() = ptr1.cast_mut();
                                    }
                                    DbValue::Date(e) => {
                                        *base.add(0).cast::<u8>() = (14i32) as u8;
                                        let (t2_0, t2_1, t2_2) = e;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(t2_0);
                                        *base.add(12).cast::<u8>() = (_rt::as_i32(t2_1)) as u8;
                                        *base.add(13).cast::<u8>() = (_rt::as_i32(t2_2)) as u8;
                                    }
                                    DbValue::Datetime(e) => {
                                        *base.add(0).cast::<u8>() = (15i32) as u8;
                                        let (t3_0, t3_1, t3_2, t3_3, t3_4, t3_5, t3_6) = e;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(t3_0);
                                        *base.add(12).cast::<u8>() = (_rt::as_i32(t3_1)) as u8;
                                        *base.add(13).cast::<u8>() = (_rt::as_i32(t3_2)) as u8;
                                        *base.add(14).cast::<u8>() = (_rt::as_i32(t3_3)) as u8;
                                        *base.add(15).cast::<u8>() = (_rt::as_i32(t3_4)) as u8;
                                        *base.add(16).cast::<u8>() = (_rt::as_i32(t3_5)) as u8;
                                        *base.add(20).cast::<i32>() = _rt::as_i32(t3_6);
                                    }
                                    DbValue::Timestamp(e) => {
                                        *base.add(0).cast::<u8>() = (16i32) as u8;
                                        let (t4_0, t4_1, t4_2, t4_3, t4_4, t4_5, t4_6) = e;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(t4_0);
                                        *base.add(12).cast::<u8>() = (_rt::as_i32(t4_1)) as u8;
                                        *base.add(13).cast::<u8>() = (_rt::as_i32(t4_2)) as u8;
                                        *base.add(14).cast::<u8>() = (_rt::as_i32(t4_3)) as u8;
                                        *base.add(15).cast::<u8>() = (_rt::as_i32(t4_4)) as u8;
                                        *base.add(16).cast::<u8>() = (_rt::as_i32(t4_5)) as u8;
                                        *base.add(20).cast::<i32>() = _rt::as_i32(t4_6);
                                    }
                                    DbValue::Time(e) => {
                                        *base.add(0).cast::<u8>() = (17i32) as u8;
                                        let (t5_0, t5_1, t5_2, t5_3) = e;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(t5_0)) as u8;
                                        *base.add(9).cast::<u8>() = (_rt::as_i32(t5_1)) as u8;
                                        *base.add(10).cast::<u8>() = (_rt::as_i32(t5_2)) as u8;
                                        *base.add(12).cast::<i32>() = _rt::as_i32(t5_3);
                                    }
                                    DbValue::Year(e) => {
                                        *base.add(0).cast::<u8>() = (18i32) as u8;
                                        *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                    }
                                    DbValue::Fixchar(e) => {
                                        *base.add(0).cast::<u8>() = (19i32) as u8;
                                        let vec6 = e;
                                        let ptr6 = vec6.as_ptr().cast::<u8>();
                                        let len6 = vec6.len();
                                        *base.add(12).cast::<usize>() = len6;
                                        *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                    }
                                    DbValue::Varchar(e) => {
                                        *base.add(0).cast::<u8>() = (20i32) as u8;
                                        let vec7 = e;
                                        let ptr7 = vec7.as_ptr().cast::<u8>();
                                        let len7 = vec7.len();
                                        *base.add(12).cast::<usize>() = len7;
                                        *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                    }
                                    DbValue::Tinytext(e) => {
                                        *base.add(0).cast::<u8>() = (21i32) as u8;
                                        let vec8 = e;
                                        let ptr8 = vec8.as_ptr().cast::<u8>();
                                        let len8 = vec8.len();
                                        *base.add(12).cast::<usize>() = len8;
                                        *base.add(8).cast::<*mut u8>() = ptr8.cast_mut();
                                    }
                                    DbValue::Text(e) => {
                                        *base.add(0).cast::<u8>() = (22i32) as u8;
                                        let vec9 = e;
                                        let ptr9 = vec9.as_ptr().cast::<u8>();
                                        let len9 = vec9.len();
                                        *base.add(12).cast::<usize>() = len9;
                                        *base.add(8).cast::<*mut u8>() = ptr9.cast_mut();
                                    }
                                    DbValue::Mediumtext(e) => {
                                        *base.add(0).cast::<u8>() = (23i32) as u8;
                                        let vec10 = e;
                                        let ptr10 = vec10.as_ptr().cast::<u8>();
                                        let len10 = vec10.len();
                                        *base.add(12).cast::<usize>() = len10;
                                        *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                    }
                                    DbValue::Longtext(e) => {
                                        *base.add(0).cast::<u8>() = (24i32) as u8;
                                        let vec11 = e;
                                        let ptr11 = vec11.as_ptr().cast::<u8>();
                                        let len11 = vec11.len();
                                        *base.add(12).cast::<usize>() = len11;
                                        *base.add(8).cast::<*mut u8>() = ptr11.cast_mut();
                                    }
                                    DbValue::Binary(e) => {
                                        *base.add(0).cast::<u8>() = (25i32) as u8;
                                        let vec12 = e;
                                        let ptr12 = vec12.as_ptr().cast::<u8>();
                                        let len12 = vec12.len();
                                        *base.add(12).cast::<usize>() = len12;
                                        *base.add(8).cast::<*mut u8>() = ptr12.cast_mut();
                                    }
                                    DbValue::Varbinary(e) => {
                                        *base.add(0).cast::<u8>() = (26i32) as u8;
                                        let vec13 = e;
                                        let ptr13 = vec13.as_ptr().cast::<u8>();
                                        let len13 = vec13.len();
                                        *base.add(12).cast::<usize>() = len13;
                                        *base.add(8).cast::<*mut u8>() = ptr13.cast_mut();
                                    }
                                    DbValue::Tinyblob(e) => {
                                        *base.add(0).cast::<u8>() = (27i32) as u8;
                                        let vec14 = e;
                                        let ptr14 = vec14.as_ptr().cast::<u8>();
                                        let len14 = vec14.len();
                                        *base.add(12).cast::<usize>() = len14;
                                        *base.add(8).cast::<*mut u8>() = ptr14.cast_mut();
                                    }
                                    DbValue::Blob(e) => {
                                        *base.add(0).cast::<u8>() = (28i32) as u8;
                                        let vec15 = e;
                                        let ptr15 = vec15.as_ptr().cast::<u8>();
                                        let len15 = vec15.len();
                                        *base.add(12).cast::<usize>() = len15;
                                        *base.add(8).cast::<*mut u8>() = ptr15.cast_mut();
                                    }
                                    DbValue::Mediumblob(e) => {
                                        *base.add(0).cast::<u8>() = (29i32) as u8;
                                        let vec16 = e;
                                        let ptr16 = vec16.as_ptr().cast::<u8>();
                                        let len16 = vec16.len();
                                        *base.add(12).cast::<usize>() = len16;
                                        *base.add(8).cast::<*mut u8>() = ptr16.cast_mut();
                                    }
                                    DbValue::Longblob(e) => {
                                        *base.add(0).cast::<u8>() = (30i32) as u8;
                                        let vec17 = e;
                                        let ptr17 = vec17.as_ptr().cast::<u8>();
                                        let len17 = vec17.len();
                                        *base.add(12).cast::<usize>() = len17;
                                        *base.add(8).cast::<*mut u8>() = ptr17.cast_mut();
                                    }
                                    DbValue::Enumeration(e) => {
                                        *base.add(0).cast::<u8>() = (31i32) as u8;
                                        let vec18 = e;
                                        let ptr18 = vec18.as_ptr().cast::<u8>();
                                        let len18 = vec18.len();
                                        *base.add(12).cast::<usize>() = len18;
                                        *base.add(8).cast::<*mut u8>() = ptr18.cast_mut();
                                    }
                                    DbValue::Set(e) => {
                                        *base.add(0).cast::<u8>() = (32i32) as u8;
                                        let vec19 = e;
                                        let ptr19 = vec19.as_ptr().cast::<u8>();
                                        let len19 = vec19.len();
                                        *base.add(12).cast::<usize>() = len19;
                                        *base.add(8).cast::<*mut u8>() = ptr19.cast_mut();
                                    }
                                    DbValue::Bit(e) => {
                                        *base.add(0).cast::<u8>() = (33i32) as u8;
                                        let vec20 = e;
                                        let len20 = vec20.len();
                                        let layout20 =
                                            _rt::alloc::Layout::from_size_align_unchecked(
                                                vec20.len() * 1,
                                                1,
                                            );
                                        let result20 = if layout20.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout20).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout20);
                                            }
                                            ptr
                                        } else {
                                            {
                                                ::core::ptr::null_mut()
                                            }
                                        };
                                        for (i, e) in vec20.into_iter().enumerate() {
                                            let base = result20.add(i * 1);
                                            {
                                                *base.add(0).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                })
                                                    as u8;
                                            }
                                        }
                                        *base.add(12).cast::<usize>() = len20;
                                        *base.add(8).cast::<*mut u8>() = result20;
                                        cleanup_list.extend_from_slice(&[(result20, layout20)]);
                                    }
                                    DbValue::Json(e) => {
                                        *base.add(0).cast::<u8>() = (34i32) as u8;
                                        let vec21 = e;
                                        let ptr21 = vec21.as_ptr().cast::<u8>();
                                        let len21 = vec21.len();
                                        *base.add(12).cast::<usize>() = len21;
                                        *base.add(8).cast::<*mut u8>() = ptr21.cast_mut();
                                    }
                                    DbValue::Null => {
                                        *base.add(0).cast::<u8>() = (35i32) as u8;
                                    }
                                }
                            }
                        }
                        let ptr23 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:rdbms/mysql@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]db-connection.query"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            result22,
                            len22,
                            ptr23,
                        );
                        let l24 = i32::from(*ptr23.add(0).cast::<u8>());
                        if layout22.size() != 0 {
                            _rt::alloc::dealloc(result22.cast(), layout22);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l24 {
                            0 => {
                                let e = {
                                    let l25 = *ptr23.add(4).cast::<i32>();

                                    DbResultSet::from_handle(l25 as u32)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l26 = i32::from(*ptr23.add(4).cast::<u8>());
                                    let v42 = match l26 {
                                        0 => {
                                            let e42 = {
                                                let l27 = *ptr23.add(8).cast::<*mut u8>();
                                                let l28 = *ptr23.add(12).cast::<usize>();
                                                let len29 = l28;
                                                let bytes29 = _rt::Vec::from_raw_parts(
                                                    l27.cast(),
                                                    len29,
                                                    len29,
                                                );

                                                _rt::string_lift(bytes29)
                                            };
                                            Error::ConnectionFailure(e42)
                                        }
                                        1 => {
                                            let e42 = {
                                                let l30 = *ptr23.add(8).cast::<*mut u8>();
                                                let l31 = *ptr23.add(12).cast::<usize>();
                                                let len32 = l31;
                                                let bytes32 = _rt::Vec::from_raw_parts(
                                                    l30.cast(),
                                                    len32,
                                                    len32,
                                                );

                                                _rt::string_lift(bytes32)
                                            };
                                            Error::QueryParameterFailure(e42)
                                        }
                                        2 => {
                                            let e42 = {
                                                let l33 = *ptr23.add(8).cast::<*mut u8>();
                                                let l34 = *ptr23.add(12).cast::<usize>();
                                                let len35 = l34;
                                                let bytes35 = _rt::Vec::from_raw_parts(
                                                    l33.cast(),
                                                    len35,
                                                    len35,
                                                );

                                                _rt::string_lift(bytes35)
                                            };
                                            Error::QueryExecutionFailure(e42)
                                        }
                                        3 => {
                                            let e42 = {
                                                let l36 = *ptr23.add(8).cast::<*mut u8>();
                                                let l37 = *ptr23.add(12).cast::<usize>();
                                                let len38 = l37;
                                                let bytes38 = _rt::Vec::from_raw_parts(
                                                    l36.cast(),
                                                    len38,
                                                    len38,
                                                );

                                                _rt::string_lift(bytes38)
                                            };
                                            Error::QueryResponseFailure(e42)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 4, "invalid enum discriminant");
                                            let e42 = {
                                                let l39 = *ptr23.add(8).cast::<*mut u8>();
                                                let l40 = *ptr23.add(12).cast::<usize>();
                                                let len41 = l40;
                                                let bytes41 = _rt::Vec::from_raw_parts(
                                                    l39.cast(),
                                                    len41,
                                                    len41,
                                                );

                                                _rt::string_lift(bytes41)
                                            };
                                            Error::Other(e42)
                                        }
                                    };

                                    v42
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl DbConnection {
                #[allow(unused_unsafe, clippy::all)]
                pub fn execute(&self, statement: &str, params: &[DbValue]) -> Result<u64, Error> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 24]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 24]);
                        let vec0 = statement;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec22 = params;
                        let len22 = vec22.len();
                        let layout22 =
                            _rt::alloc::Layout::from_size_align_unchecked(vec22.len() * 24, 8);
                        let result22 = if layout22.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout22).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout22);
                            }
                            ptr
                        } else {
                            {
                                ::core::ptr::null_mut()
                            }
                        };
                        for (i, e) in vec22.into_iter().enumerate() {
                            let base = result22.add(i * 24);
                            {
                                match e {
                                    DbValue::Boolean(e) => {
                                        *base.add(0).cast::<u8>() = (0i32) as u8;
                                        *base.add(8).cast::<u8>() = (match e {
                                            true => 1,
                                            false => 0,
                                        })
                                            as u8;
                                    }
                                    DbValue::Tinyint(e) => {
                                        *base.add(0).cast::<u8>() = (1i32) as u8;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                    }
                                    DbValue::Smallint(e) => {
                                        *base.add(0).cast::<u8>() = (2i32) as u8;
                                        *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                    }
                                    DbValue::Mediumint(e) => {
                                        *base.add(0).cast::<u8>() = (3i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::Int(e) => {
                                        *base.add(0).cast::<u8>() = (4i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::Bigint(e) => {
                                        *base.add(0).cast::<u8>() = (5i32) as u8;
                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    DbValue::TinyintUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (6i32) as u8;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                    }
                                    DbValue::SmallintUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (7i32) as u8;
                                        *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                    }
                                    DbValue::MediumintUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (8i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::IntUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (9i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::BigintUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (10i32) as u8;
                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    DbValue::Float(e) => {
                                        *base.add(0).cast::<u8>() = (11i32) as u8;
                                        *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                    }
                                    DbValue::Double(e) => {
                                        *base.add(0).cast::<u8>() = (12i32) as u8;
                                        *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                    }
                                    DbValue::Decimal(e) => {
                                        *base.add(0).cast::<u8>() = (13i32) as u8;
                                        let vec1 = e;
                                        let ptr1 = vec1.as_ptr().cast::<u8>();
                                        let len1 = vec1.len();
                                        *base.add(12).cast::<usize>() = len1;
                                        *base.add(8).cast::<*mut u8>() = ptr1.cast_mut();
                                    }
                                    DbValue::Date(e) => {
                                        *base.add(0).cast::<u8>() = (14i32) as u8;
                                        let (t2_0, t2_1, t2_2) = e;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(t2_0);
                                        *base.add(12).cast::<u8>() = (_rt::as_i32(t2_1)) as u8;
                                        *base.add(13).cast::<u8>() = (_rt::as_i32(t2_2)) as u8;
                                    }
                                    DbValue::Datetime(e) => {
                                        *base.add(0).cast::<u8>() = (15i32) as u8;
                                        let (t3_0, t3_1, t3_2, t3_3, t3_4, t3_5, t3_6) = e;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(t3_0);
                                        *base.add(12).cast::<u8>() = (_rt::as_i32(t3_1)) as u8;
                                        *base.add(13).cast::<u8>() = (_rt::as_i32(t3_2)) as u8;
                                        *base.add(14).cast::<u8>() = (_rt::as_i32(t3_3)) as u8;
                                        *base.add(15).cast::<u8>() = (_rt::as_i32(t3_4)) as u8;
                                        *base.add(16).cast::<u8>() = (_rt::as_i32(t3_5)) as u8;
                                        *base.add(20).cast::<i32>() = _rt::as_i32(t3_6);
                                    }
                                    DbValue::Timestamp(e) => {
                                        *base.add(0).cast::<u8>() = (16i32) as u8;
                                        let (t4_0, t4_1, t4_2, t4_3, t4_4, t4_5, t4_6) = e;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(t4_0);
                                        *base.add(12).cast::<u8>() = (_rt::as_i32(t4_1)) as u8;
                                        *base.add(13).cast::<u8>() = (_rt::as_i32(t4_2)) as u8;
                                        *base.add(14).cast::<u8>() = (_rt::as_i32(t4_3)) as u8;
                                        *base.add(15).cast::<u8>() = (_rt::as_i32(t4_4)) as u8;
                                        *base.add(16).cast::<u8>() = (_rt::as_i32(t4_5)) as u8;
                                        *base.add(20).cast::<i32>() = _rt::as_i32(t4_6);
                                    }
                                    DbValue::Time(e) => {
                                        *base.add(0).cast::<u8>() = (17i32) as u8;
                                        let (t5_0, t5_1, t5_2, t5_3) = e;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(t5_0)) as u8;
                                        *base.add(9).cast::<u8>() = (_rt::as_i32(t5_1)) as u8;
                                        *base.add(10).cast::<u8>() = (_rt::as_i32(t5_2)) as u8;
                                        *base.add(12).cast::<i32>() = _rt::as_i32(t5_3);
                                    }
                                    DbValue::Year(e) => {
                                        *base.add(0).cast::<u8>() = (18i32) as u8;
                                        *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                    }
                                    DbValue::Fixchar(e) => {
                                        *base.add(0).cast::<u8>() = (19i32) as u8;
                                        let vec6 = e;
                                        let ptr6 = vec6.as_ptr().cast::<u8>();
                                        let len6 = vec6.len();
                                        *base.add(12).cast::<usize>() = len6;
                                        *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                    }
                                    DbValue::Varchar(e) => {
                                        *base.add(0).cast::<u8>() = (20i32) as u8;
                                        let vec7 = e;
                                        let ptr7 = vec7.as_ptr().cast::<u8>();
                                        let len7 = vec7.len();
                                        *base.add(12).cast::<usize>() = len7;
                                        *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                    }
                                    DbValue::Tinytext(e) => {
                                        *base.add(0).cast::<u8>() = (21i32) as u8;
                                        let vec8 = e;
                                        let ptr8 = vec8.as_ptr().cast::<u8>();
                                        let len8 = vec8.len();
                                        *base.add(12).cast::<usize>() = len8;
                                        *base.add(8).cast::<*mut u8>() = ptr8.cast_mut();
                                    }
                                    DbValue::Text(e) => {
                                        *base.add(0).cast::<u8>() = (22i32) as u8;
                                        let vec9 = e;
                                        let ptr9 = vec9.as_ptr().cast::<u8>();
                                        let len9 = vec9.len();
                                        *base.add(12).cast::<usize>() = len9;
                                        *base.add(8).cast::<*mut u8>() = ptr9.cast_mut();
                                    }
                                    DbValue::Mediumtext(e) => {
                                        *base.add(0).cast::<u8>() = (23i32) as u8;
                                        let vec10 = e;
                                        let ptr10 = vec10.as_ptr().cast::<u8>();
                                        let len10 = vec10.len();
                                        *base.add(12).cast::<usize>() = len10;
                                        *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                    }
                                    DbValue::Longtext(e) => {
                                        *base.add(0).cast::<u8>() = (24i32) as u8;
                                        let vec11 = e;
                                        let ptr11 = vec11.as_ptr().cast::<u8>();
                                        let len11 = vec11.len();
                                        *base.add(12).cast::<usize>() = len11;
                                        *base.add(8).cast::<*mut u8>() = ptr11.cast_mut();
                                    }
                                    DbValue::Binary(e) => {
                                        *base.add(0).cast::<u8>() = (25i32) as u8;
                                        let vec12 = e;
                                        let ptr12 = vec12.as_ptr().cast::<u8>();
                                        let len12 = vec12.len();
                                        *base.add(12).cast::<usize>() = len12;
                                        *base.add(8).cast::<*mut u8>() = ptr12.cast_mut();
                                    }
                                    DbValue::Varbinary(e) => {
                                        *base.add(0).cast::<u8>() = (26i32) as u8;
                                        let vec13 = e;
                                        let ptr13 = vec13.as_ptr().cast::<u8>();
                                        let len13 = vec13.len();
                                        *base.add(12).cast::<usize>() = len13;
                                        *base.add(8).cast::<*mut u8>() = ptr13.cast_mut();
                                    }
                                    DbValue::Tinyblob(e) => {
                                        *base.add(0).cast::<u8>() = (27i32) as u8;
                                        let vec14 = e;
                                        let ptr14 = vec14.as_ptr().cast::<u8>();
                                        let len14 = vec14.len();
                                        *base.add(12).cast::<usize>() = len14;
                                        *base.add(8).cast::<*mut u8>() = ptr14.cast_mut();
                                    }
                                    DbValue::Blob(e) => {
                                        *base.add(0).cast::<u8>() = (28i32) as u8;
                                        let vec15 = e;
                                        let ptr15 = vec15.as_ptr().cast::<u8>();
                                        let len15 = vec15.len();
                                        *base.add(12).cast::<usize>() = len15;
                                        *base.add(8).cast::<*mut u8>() = ptr15.cast_mut();
                                    }
                                    DbValue::Mediumblob(e) => {
                                        *base.add(0).cast::<u8>() = (29i32) as u8;
                                        let vec16 = e;
                                        let ptr16 = vec16.as_ptr().cast::<u8>();
                                        let len16 = vec16.len();
                                        *base.add(12).cast::<usize>() = len16;
                                        *base.add(8).cast::<*mut u8>() = ptr16.cast_mut();
                                    }
                                    DbValue::Longblob(e) => {
                                        *base.add(0).cast::<u8>() = (30i32) as u8;
                                        let vec17 = e;
                                        let ptr17 = vec17.as_ptr().cast::<u8>();
                                        let len17 = vec17.len();
                                        *base.add(12).cast::<usize>() = len17;
                                        *base.add(8).cast::<*mut u8>() = ptr17.cast_mut();
                                    }
                                    DbValue::Enumeration(e) => {
                                        *base.add(0).cast::<u8>() = (31i32) as u8;
                                        let vec18 = e;
                                        let ptr18 = vec18.as_ptr().cast::<u8>();
                                        let len18 = vec18.len();
                                        *base.add(12).cast::<usize>() = len18;
                                        *base.add(8).cast::<*mut u8>() = ptr18.cast_mut();
                                    }
                                    DbValue::Set(e) => {
                                        *base.add(0).cast::<u8>() = (32i32) as u8;
                                        let vec19 = e;
                                        let ptr19 = vec19.as_ptr().cast::<u8>();
                                        let len19 = vec19.len();
                                        *base.add(12).cast::<usize>() = len19;
                                        *base.add(8).cast::<*mut u8>() = ptr19.cast_mut();
                                    }
                                    DbValue::Bit(e) => {
                                        *base.add(0).cast::<u8>() = (33i32) as u8;
                                        let vec20 = e;
                                        let len20 = vec20.len();
                                        let layout20 =
                                            _rt::alloc::Layout::from_size_align_unchecked(
                                                vec20.len() * 1,
                                                1,
                                            );
                                        let result20 = if layout20.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout20).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout20);
                                            }
                                            ptr
                                        } else {
                                            {
                                                ::core::ptr::null_mut()
                                            }
                                        };
                                        for (i, e) in vec20.into_iter().enumerate() {
                                            let base = result20.add(i * 1);
                                            {
                                                *base.add(0).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                })
                                                    as u8;
                                            }
                                        }
                                        *base.add(12).cast::<usize>() = len20;
                                        *base.add(8).cast::<*mut u8>() = result20;
                                        cleanup_list.extend_from_slice(&[(result20, layout20)]);
                                    }
                                    DbValue::Json(e) => {
                                        *base.add(0).cast::<u8>() = (34i32) as u8;
                                        let vec21 = e;
                                        let ptr21 = vec21.as_ptr().cast::<u8>();
                                        let len21 = vec21.len();
                                        *base.add(12).cast::<usize>() = len21;
                                        *base.add(8).cast::<*mut u8>() = ptr21.cast_mut();
                                    }
                                    DbValue::Null => {
                                        *base.add(0).cast::<u8>() = (35i32) as u8;
                                    }
                                }
                            }
                        }
                        let ptr23 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:rdbms/mysql@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]db-connection.execute"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            result22,
                            len22,
                            ptr23,
                        );
                        let l24 = i32::from(*ptr23.add(0).cast::<u8>());
                        if layout22.size() != 0 {
                            _rt::alloc::dealloc(result22.cast(), layout22);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l24 {
                            0 => {
                                let e = {
                                    let l25 = *ptr23.add(8).cast::<i64>();

                                    l25 as u64
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l26 = i32::from(*ptr23.add(8).cast::<u8>());
                                    let v42 = match l26 {
                                        0 => {
                                            let e42 = {
                                                let l27 = *ptr23.add(12).cast::<*mut u8>();
                                                let l28 = *ptr23.add(16).cast::<usize>();
                                                let len29 = l28;
                                                let bytes29 = _rt::Vec::from_raw_parts(
                                                    l27.cast(),
                                                    len29,
                                                    len29,
                                                );

                                                _rt::string_lift(bytes29)
                                            };
                                            Error::ConnectionFailure(e42)
                                        }
                                        1 => {
                                            let e42 = {
                                                let l30 = *ptr23.add(12).cast::<*mut u8>();
                                                let l31 = *ptr23.add(16).cast::<usize>();
                                                let len32 = l31;
                                                let bytes32 = _rt::Vec::from_raw_parts(
                                                    l30.cast(),
                                                    len32,
                                                    len32,
                                                );

                                                _rt::string_lift(bytes32)
                                            };
                                            Error::QueryParameterFailure(e42)
                                        }
                                        2 => {
                                            let e42 = {
                                                let l33 = *ptr23.add(12).cast::<*mut u8>();
                                                let l34 = *ptr23.add(16).cast::<usize>();
                                                let len35 = l34;
                                                let bytes35 = _rt::Vec::from_raw_parts(
                                                    l33.cast(),
                                                    len35,
                                                    len35,
                                                );

                                                _rt::string_lift(bytes35)
                                            };
                                            Error::QueryExecutionFailure(e42)
                                        }
                                        3 => {
                                            let e42 = {
                                                let l36 = *ptr23.add(12).cast::<*mut u8>();
                                                let l37 = *ptr23.add(16).cast::<usize>();
                                                let len38 = l37;
                                                let bytes38 = _rt::Vec::from_raw_parts(
                                                    l36.cast(),
                                                    len38,
                                                    len38,
                                                );

                                                _rt::string_lift(bytes38)
                                            };
                                            Error::QueryResponseFailure(e42)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 4, "invalid enum discriminant");
                                            let e42 = {
                                                let l39 = *ptr23.add(12).cast::<*mut u8>();
                                                let l40 = *ptr23.add(16).cast::<usize>();
                                                let len41 = l40;
                                                let bytes41 = _rt::Vec::from_raw_parts(
                                                    l39.cast(),
                                                    len41,
                                                    len41,
                                                );

                                                _rt::string_lift(bytes41)
                                            };
                                            Error::Other(e42)
                                        }
                                    };

                                    v42
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
        }
    }
}
#[allow(dead_code)]
pub mod exports {
    #[allow(dead_code)]
    pub mod golem {
        #[allow(dead_code)]
        pub mod it {
            #[allow(dead_code, clippy::all)]
            pub mod api {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type PostgresDbRow = super::super::super::super::wasi::rdbms::postgres::DbRow;
                pub type PostgresDbColumn =
                    super::super::super::super::wasi::rdbms::postgres::DbColumn;
                pub type MysqlDbRow = super::super::super::super::wasi::rdbms::mysql::DbRow;
                pub type MysqlDbColumn = super::super::super::super::wasi::rdbms::mysql::DbColumn;
                #[derive(Clone)]
                pub struct PostgresQueryResult {
                    pub columns: _rt::Vec<PostgresDbColumn>,
                    pub rows: _rt::Vec<PostgresDbRow>,
                }
                impl ::core::fmt::Debug for PostgresQueryResult {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("PostgresQueryResult")
                            .field("columns", &self.columns)
                            .field("rows", &self.rows)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub struct MysqlQueryResult {
                    pub columns: _rt::Vec<MysqlDbColumn>,
                    pub rows: _rt::Vec<MysqlDbRow>,
                }
                impl ::core::fmt::Debug for MysqlQueryResult {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("MysqlQueryResult")
                            .field("columns", &self.columns)
                            .field("rows", &self.rows)
                            .finish()
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_check_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::check();
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let vec2 = (result0.into_bytes()).into_boxed_slice();
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    ::core::mem::forget(vec2);
                    *ptr1.add(4).cast::<usize>() = len2;
                    *ptr1.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_check<T: Guest>(arg0: *mut u8) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0.add(4).cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_mysql_execute_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let base4 = arg2;
                    let len4 = arg3;
                    let mut result4 = _rt::Vec::with_capacity(len4);
                    for i in 0..len4 {
                        let base = base4.add(i * 8);
                        let e4 = {
                            let l1 = *base.add(0).cast::<*mut u8>();
                            let l2 = *base.add(4).cast::<usize>();
                            let len3 = l2;
                            let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);

                            _rt::string_lift(bytes3)
                        };
                        result4.push(e4);
                    }
                    _rt::cabi_dealloc(base4, len4 * 8, 4);
                    let result5 = T::mysql_execute(_rt::string_lift(bytes0), result4);
                    let ptr6 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result5 {
                        Ok(e) => {
                            *ptr6.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr6.add(8).cast::<i64>() = _rt::as_i64(e);
                        }
                        Err(e) => {
                            *ptr6.add(0).cast::<u8>() = (1i32) as u8;
                            let vec7 = (e.into_bytes()).into_boxed_slice();
                            let ptr7 = vec7.as_ptr().cast::<u8>();
                            let len7 = vec7.len();
                            ::core::mem::forget(vec7);
                            *ptr6.add(12).cast::<usize>() = len7;
                            *ptr6.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                        }
                    };
                    ptr6
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_mysql_execute<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = *arg0.add(8).cast::<*mut u8>();
                            let l2 = *arg0.add(12).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_mysql_query_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let base4 = arg2;
                    let len4 = arg3;
                    let mut result4 = _rt::Vec::with_capacity(len4);
                    for i in 0..len4 {
                        let base = base4.add(i * 8);
                        let e4 = {
                            let l1 = *base.add(0).cast::<*mut u8>();
                            let l2 = *base.add(4).cast::<usize>();
                            let len3 = l2;
                            let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);

                            _rt::string_lift(bytes3)
                        };
                        result4.push(e4);
                    }
                    _rt::cabi_dealloc(base4, len4 * 8, 4);
                    let result5 = T::mysql_query(_rt::string_lift(bytes0), result4);
                    let ptr6 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result5 {
                        Ok(e) => {
                            *ptr6.add(0).cast::<u8>() = (0i32) as u8;
                            let MysqlQueryResult {
                                columns: columns7,
                                rows: rows7,
                            } = e;
                            let vec12 = columns7;
                            let len12 = vec12.len();
                            let layout12 =
                                _rt::alloc::Layout::from_size_align_unchecked(vec12.len() * 32, 8);
                            let result12 = if layout12.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout12);
                                }
                                ptr
                            } else {
                                {
                                    ::core::ptr::null_mut()
                                }
                            };
                            for (i, e) in vec12.into_iter().enumerate() {
                                let base = result12.add(i * 32);
                                {
                                    let super::super::super::super::wasi::rdbms::mysql::DbColumn {
                                        ordinal: ordinal8,
                                        name: name8,
                                        db_type: db_type8,
                                        db_type_name: db_type_name8,
                                    } = e;
                                    *base.add(0).cast::<i64>() = _rt::as_i64(ordinal8);
                                    let vec9 = (name8.into_bytes()).into_boxed_slice();
                                    let ptr9 = vec9.as_ptr().cast::<u8>();
                                    let len9 = vec9.len();
                                    ::core::mem::forget(vec9);
                                    *base.add(12).cast::<usize>() = len9;
                                    *base.add(8).cast::<*mut u8>() = ptr9.cast_mut();
                                    use super::super::super::super::wasi::rdbms::mysql::DbColumnType as V10;
                                    match db_type8 {
                                        V10::Boolean => {
                                            *base.add(16).cast::<u8>() = (0i32) as u8;
                                        }
                                        V10::Tinyint => {
                                            *base.add(16).cast::<u8>() = (1i32) as u8;
                                        }
                                        V10::Smallint => {
                                            *base.add(16).cast::<u8>() = (2i32) as u8;
                                        }
                                        V10::Mediumint => {
                                            *base.add(16).cast::<u8>() = (3i32) as u8;
                                        }
                                        V10::Int => {
                                            *base.add(16).cast::<u8>() = (4i32) as u8;
                                        }
                                        V10::Bigint => {
                                            *base.add(16).cast::<u8>() = (5i32) as u8;
                                        }
                                        V10::TinyintUnsigned => {
                                            *base.add(16).cast::<u8>() = (6i32) as u8;
                                        }
                                        V10::SmallintUnsigned => {
                                            *base.add(16).cast::<u8>() = (7i32) as u8;
                                        }
                                        V10::MediumintUnsigned => {
                                            *base.add(16).cast::<u8>() = (8i32) as u8;
                                        }
                                        V10::IntUnsigned => {
                                            *base.add(16).cast::<u8>() = (9i32) as u8;
                                        }
                                        V10::BigintUnsigned => {
                                            *base.add(16).cast::<u8>() = (10i32) as u8;
                                        }
                                        V10::Float => {
                                            *base.add(16).cast::<u8>() = (11i32) as u8;
                                        }
                                        V10::Double => {
                                            *base.add(16).cast::<u8>() = (12i32) as u8;
                                        }
                                        V10::Decimal => {
                                            *base.add(16).cast::<u8>() = (13i32) as u8;
                                        }
                                        V10::Date => {
                                            *base.add(16).cast::<u8>() = (14i32) as u8;
                                        }
                                        V10::Datetime => {
                                            *base.add(16).cast::<u8>() = (15i32) as u8;
                                        }
                                        V10::Timestamp => {
                                            *base.add(16).cast::<u8>() = (16i32) as u8;
                                        }
                                        V10::Time => {
                                            *base.add(16).cast::<u8>() = (17i32) as u8;
                                        }
                                        V10::Year => {
                                            *base.add(16).cast::<u8>() = (18i32) as u8;
                                        }
                                        V10::Fixchar => {
                                            *base.add(16).cast::<u8>() = (19i32) as u8;
                                        }
                                        V10::Varchar => {
                                            *base.add(16).cast::<u8>() = (20i32) as u8;
                                        }
                                        V10::Tinytext => {
                                            *base.add(16).cast::<u8>() = (21i32) as u8;
                                        }
                                        V10::Text => {
                                            *base.add(16).cast::<u8>() = (22i32) as u8;
                                        }
                                        V10::Mediumtext => {
                                            *base.add(16).cast::<u8>() = (23i32) as u8;
                                        }
                                        V10::Longtext => {
                                            *base.add(16).cast::<u8>() = (24i32) as u8;
                                        }
                                        V10::Binary => {
                                            *base.add(16).cast::<u8>() = (25i32) as u8;
                                        }
                                        V10::Varbinary => {
                                            *base.add(16).cast::<u8>() = (26i32) as u8;
                                        }
                                        V10::Tinyblob => {
                                            *base.add(16).cast::<u8>() = (27i32) as u8;
                                        }
                                        V10::Blob => {
                                            *base.add(16).cast::<u8>() = (28i32) as u8;
                                        }
                                        V10::Mediumblob => {
                                            *base.add(16).cast::<u8>() = (29i32) as u8;
                                        }
                                        V10::Longblob => {
                                            *base.add(16).cast::<u8>() = (30i32) as u8;
                                        }
                                        V10::Enumeration => {
                                            *base.add(16).cast::<u8>() = (31i32) as u8;
                                        }
                                        V10::Set => {
                                            *base.add(16).cast::<u8>() = (32i32) as u8;
                                        }
                                        V10::Bit => {
                                            *base.add(16).cast::<u8>() = (33i32) as u8;
                                        }
                                        V10::Json => {
                                            *base.add(16).cast::<u8>() = (34i32) as u8;
                                        }
                                    }
                                    let vec11 = (db_type_name8.into_bytes()).into_boxed_slice();
                                    let ptr11 = vec11.as_ptr().cast::<u8>();
                                    let len11 = vec11.len();
                                    ::core::mem::forget(vec11);
                                    *base.add(24).cast::<usize>() = len11;
                                    *base.add(20).cast::<*mut u8>() = ptr11.cast_mut();
                                }
                            }
                            *ptr6.add(8).cast::<usize>() = len12;
                            *ptr6.add(4).cast::<*mut u8>() = result12;
                            let vec37 = rows7;
                            let len37 = vec37.len();
                            let layout37 =
                                _rt::alloc::Layout::from_size_align_unchecked(vec37.len() * 8, 4);
                            let result37 = if layout37.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout37).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout37);
                                }
                                ptr
                            } else {
                                {
                                    ::core::ptr::null_mut()
                                }
                            };
                            for (i, e) in vec37.into_iter().enumerate() {
                                let base = result37.add(i * 8);
                                {
                                    let super::super::super::super::wasi::rdbms::mysql::DbRow {
                                        values: values13,
                                    } = e;
                                    let vec36 = values13;
                                    let len36 = vec36.len();
                                    let layout36 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec36.len() * 24,
                                        8,
                                    );
                                    let result36 = if layout36.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout36).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout36);
                                        }
                                        ptr
                                    } else {
                                        {
                                            ::core::ptr::null_mut()
                                        }
                                    };
                                    for (i, e) in vec36.into_iter().enumerate() {
                                        let base = result36.add(i * 24);
                                        {
                                            use super::super::super::super::wasi::rdbms::mysql::DbValue as V35;
                                            match e {
                                                V35::Boolean(e) => {
                                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                                    *base.add(8).cast::<u8>() = (match e {
                                                        true => 1,
                                                        false => 0,
                                                    })
                                                        as u8;
                                                }
                                                V35::Tinyint(e) => {
                                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                                    *base.add(8).cast::<u8>() =
                                                        (_rt::as_i32(e)) as u8;
                                                }
                                                V35::Smallint(e) => {
                                                    *base.add(0).cast::<u8>() = (2i32) as u8;
                                                    *base.add(8).cast::<u16>() =
                                                        (_rt::as_i32(e)) as u16;
                                                }
                                                V35::Mediumint(e) => {
                                                    *base.add(0).cast::<u8>() = (3i32) as u8;
                                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                }
                                                V35::Int(e) => {
                                                    *base.add(0).cast::<u8>() = (4i32) as u8;
                                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                }
                                                V35::Bigint(e) => {
                                                    *base.add(0).cast::<u8>() = (5i32) as u8;
                                                    *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                }
                                                V35::TinyintUnsigned(e) => {
                                                    *base.add(0).cast::<u8>() = (6i32) as u8;
                                                    *base.add(8).cast::<u8>() =
                                                        (_rt::as_i32(e)) as u8;
                                                }
                                                V35::SmallintUnsigned(e) => {
                                                    *base.add(0).cast::<u8>() = (7i32) as u8;
                                                    *base.add(8).cast::<u16>() =
                                                        (_rt::as_i32(e)) as u16;
                                                }
                                                V35::MediumintUnsigned(e) => {
                                                    *base.add(0).cast::<u8>() = (8i32) as u8;
                                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                }
                                                V35::IntUnsigned(e) => {
                                                    *base.add(0).cast::<u8>() = (9i32) as u8;
                                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                }
                                                V35::BigintUnsigned(e) => {
                                                    *base.add(0).cast::<u8>() = (10i32) as u8;
                                                    *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                }
                                                V35::Float(e) => {
                                                    *base.add(0).cast::<u8>() = (11i32) as u8;
                                                    *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                                }
                                                V35::Double(e) => {
                                                    *base.add(0).cast::<u8>() = (12i32) as u8;
                                                    *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                                }
                                                V35::Decimal(e) => {
                                                    *base.add(0).cast::<u8>() = (13i32) as u8;
                                                    let vec14 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr14 = vec14.as_ptr().cast::<u8>();
                                                    let len14 = vec14.len();
                                                    ::core::mem::forget(vec14);
                                                    *base.add(12).cast::<usize>() = len14;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr14.cast_mut();
                                                }
                                                V35::Date(e) => {
                                                    *base.add(0).cast::<u8>() = (14i32) as u8;
                                                    let (t15_0, t15_1, t15_2) = e;
                                                    *base.add(8).cast::<i32>() = _rt::as_i32(t15_0);
                                                    *base.add(12).cast::<u8>() =
                                                        (_rt::as_i32(t15_1)) as u8;
                                                    *base.add(13).cast::<u8>() =
                                                        (_rt::as_i32(t15_2)) as u8;
                                                }
                                                V35::Datetime(e) => {
                                                    *base.add(0).cast::<u8>() = (15i32) as u8;
                                                    let (
                                                        t16_0,
                                                        t16_1,
                                                        t16_2,
                                                        t16_3,
                                                        t16_4,
                                                        t16_5,
                                                        t16_6,
                                                    ) = e;
                                                    *base.add(8).cast::<i32>() = _rt::as_i32(t16_0);
                                                    *base.add(12).cast::<u8>() =
                                                        (_rt::as_i32(t16_1)) as u8;
                                                    *base.add(13).cast::<u8>() =
                                                        (_rt::as_i32(t16_2)) as u8;
                                                    *base.add(14).cast::<u8>() =
                                                        (_rt::as_i32(t16_3)) as u8;
                                                    *base.add(15).cast::<u8>() =
                                                        (_rt::as_i32(t16_4)) as u8;
                                                    *base.add(16).cast::<u8>() =
                                                        (_rt::as_i32(t16_5)) as u8;
                                                    *base.add(20).cast::<i32>() =
                                                        _rt::as_i32(t16_6);
                                                }
                                                V35::Timestamp(e) => {
                                                    *base.add(0).cast::<u8>() = (16i32) as u8;
                                                    let (
                                                        t17_0,
                                                        t17_1,
                                                        t17_2,
                                                        t17_3,
                                                        t17_4,
                                                        t17_5,
                                                        t17_6,
                                                    ) = e;
                                                    *base.add(8).cast::<i32>() = _rt::as_i32(t17_0);
                                                    *base.add(12).cast::<u8>() =
                                                        (_rt::as_i32(t17_1)) as u8;
                                                    *base.add(13).cast::<u8>() =
                                                        (_rt::as_i32(t17_2)) as u8;
                                                    *base.add(14).cast::<u8>() =
                                                        (_rt::as_i32(t17_3)) as u8;
                                                    *base.add(15).cast::<u8>() =
                                                        (_rt::as_i32(t17_4)) as u8;
                                                    *base.add(16).cast::<u8>() =
                                                        (_rt::as_i32(t17_5)) as u8;
                                                    *base.add(20).cast::<i32>() =
                                                        _rt::as_i32(t17_6);
                                                }
                                                V35::Time(e) => {
                                                    *base.add(0).cast::<u8>() = (17i32) as u8;
                                                    let (t18_0, t18_1, t18_2, t18_3) = e;
                                                    *base.add(8).cast::<u8>() =
                                                        (_rt::as_i32(t18_0)) as u8;
                                                    *base.add(9).cast::<u8>() =
                                                        (_rt::as_i32(t18_1)) as u8;
                                                    *base.add(10).cast::<u8>() =
                                                        (_rt::as_i32(t18_2)) as u8;
                                                    *base.add(12).cast::<i32>() =
                                                        _rt::as_i32(t18_3);
                                                }
                                                V35::Year(e) => {
                                                    *base.add(0).cast::<u8>() = (18i32) as u8;
                                                    *base.add(8).cast::<u16>() =
                                                        (_rt::as_i32(e)) as u16;
                                                }
                                                V35::Fixchar(e) => {
                                                    *base.add(0).cast::<u8>() = (19i32) as u8;
                                                    let vec19 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr19 = vec19.as_ptr().cast::<u8>();
                                                    let len19 = vec19.len();
                                                    ::core::mem::forget(vec19);
                                                    *base.add(12).cast::<usize>() = len19;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr19.cast_mut();
                                                }
                                                V35::Varchar(e) => {
                                                    *base.add(0).cast::<u8>() = (20i32) as u8;
                                                    let vec20 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr20 = vec20.as_ptr().cast::<u8>();
                                                    let len20 = vec20.len();
                                                    ::core::mem::forget(vec20);
                                                    *base.add(12).cast::<usize>() = len20;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr20.cast_mut();
                                                }
                                                V35::Tinytext(e) => {
                                                    *base.add(0).cast::<u8>() = (21i32) as u8;
                                                    let vec21 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr21 = vec21.as_ptr().cast::<u8>();
                                                    let len21 = vec21.len();
                                                    ::core::mem::forget(vec21);
                                                    *base.add(12).cast::<usize>() = len21;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr21.cast_mut();
                                                }
                                                V35::Text(e) => {
                                                    *base.add(0).cast::<u8>() = (22i32) as u8;
                                                    let vec22 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr22 = vec22.as_ptr().cast::<u8>();
                                                    let len22 = vec22.len();
                                                    ::core::mem::forget(vec22);
                                                    *base.add(12).cast::<usize>() = len22;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr22.cast_mut();
                                                }
                                                V35::Mediumtext(e) => {
                                                    *base.add(0).cast::<u8>() = (23i32) as u8;
                                                    let vec23 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr23 = vec23.as_ptr().cast::<u8>();
                                                    let len23 = vec23.len();
                                                    ::core::mem::forget(vec23);
                                                    *base.add(12).cast::<usize>() = len23;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr23.cast_mut();
                                                }
                                                V35::Longtext(e) => {
                                                    *base.add(0).cast::<u8>() = (24i32) as u8;
                                                    let vec24 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr24 = vec24.as_ptr().cast::<u8>();
                                                    let len24 = vec24.len();
                                                    ::core::mem::forget(vec24);
                                                    *base.add(12).cast::<usize>() = len24;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr24.cast_mut();
                                                }
                                                V35::Binary(e) => {
                                                    *base.add(0).cast::<u8>() = (25i32) as u8;
                                                    let vec25 = (e).into_boxed_slice();
                                                    let ptr25 = vec25.as_ptr().cast::<u8>();
                                                    let len25 = vec25.len();
                                                    ::core::mem::forget(vec25);
                                                    *base.add(12).cast::<usize>() = len25;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr25.cast_mut();
                                                }
                                                V35::Varbinary(e) => {
                                                    *base.add(0).cast::<u8>() = (26i32) as u8;
                                                    let vec26 = (e).into_boxed_slice();
                                                    let ptr26 = vec26.as_ptr().cast::<u8>();
                                                    let len26 = vec26.len();
                                                    ::core::mem::forget(vec26);
                                                    *base.add(12).cast::<usize>() = len26;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr26.cast_mut();
                                                }
                                                V35::Tinyblob(e) => {
                                                    *base.add(0).cast::<u8>() = (27i32) as u8;
                                                    let vec27 = (e).into_boxed_slice();
                                                    let ptr27 = vec27.as_ptr().cast::<u8>();
                                                    let len27 = vec27.len();
                                                    ::core::mem::forget(vec27);
                                                    *base.add(12).cast::<usize>() = len27;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr27.cast_mut();
                                                }
                                                V35::Blob(e) => {
                                                    *base.add(0).cast::<u8>() = (28i32) as u8;
                                                    let vec28 = (e).into_boxed_slice();
                                                    let ptr28 = vec28.as_ptr().cast::<u8>();
                                                    let len28 = vec28.len();
                                                    ::core::mem::forget(vec28);
                                                    *base.add(12).cast::<usize>() = len28;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr28.cast_mut();
                                                }
                                                V35::Mediumblob(e) => {
                                                    *base.add(0).cast::<u8>() = (29i32) as u8;
                                                    let vec29 = (e).into_boxed_slice();
                                                    let ptr29 = vec29.as_ptr().cast::<u8>();
                                                    let len29 = vec29.len();
                                                    ::core::mem::forget(vec29);
                                                    *base.add(12).cast::<usize>() = len29;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr29.cast_mut();
                                                }
                                                V35::Longblob(e) => {
                                                    *base.add(0).cast::<u8>() = (30i32) as u8;
                                                    let vec30 = (e).into_boxed_slice();
                                                    let ptr30 = vec30.as_ptr().cast::<u8>();
                                                    let len30 = vec30.len();
                                                    ::core::mem::forget(vec30);
                                                    *base.add(12).cast::<usize>() = len30;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr30.cast_mut();
                                                }
                                                V35::Enumeration(e) => {
                                                    *base.add(0).cast::<u8>() = (31i32) as u8;
                                                    let vec31 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr31 = vec31.as_ptr().cast::<u8>();
                                                    let len31 = vec31.len();
                                                    ::core::mem::forget(vec31);
                                                    *base.add(12).cast::<usize>() = len31;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr31.cast_mut();
                                                }
                                                V35::Set(e) => {
                                                    *base.add(0).cast::<u8>() = (32i32) as u8;
                                                    let vec32 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr32 = vec32.as_ptr().cast::<u8>();
                                                    let len32 = vec32.len();
                                                    ::core::mem::forget(vec32);
                                                    *base.add(12).cast::<usize>() = len32;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr32.cast_mut();
                                                }
                                                V35::Bit(e) => {
                                                    *base.add(0).cast::<u8>() = (33i32) as u8;
                                                    let vec33 = e;
                                                    let len33 = vec33.len();
                                                    let layout33 = _rt::alloc::Layout::from_size_align_unchecked(vec33.len() * 1, 1);
                                                    let result33 = if layout33.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout33)
                                                            .cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(
                                                                layout33,
                                                            );
                                                        }
                                                        ptr
                                                    } else {
                                                        {
                                                            ::core::ptr::null_mut()
                                                        }
                                                    };
                                                    for (i, e) in vec33.into_iter().enumerate() {
                                                        let base = result33.add(i * 1);
                                                        {
                                                            *base.add(0).cast::<u8>() = (match e {
                                                                true => 1,
                                                                false => 0,
                                                            })
                                                                as u8;
                                                        }
                                                    }
                                                    *base.add(12).cast::<usize>() = len33;
                                                    *base.add(8).cast::<*mut u8>() = result33;
                                                }
                                                V35::Json(e) => {
                                                    *base.add(0).cast::<u8>() = (34i32) as u8;
                                                    let vec34 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr34 = vec34.as_ptr().cast::<u8>();
                                                    let len34 = vec34.len();
                                                    ::core::mem::forget(vec34);
                                                    *base.add(12).cast::<usize>() = len34;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr34.cast_mut();
                                                }
                                                V35::Null => {
                                                    *base.add(0).cast::<u8>() = (35i32) as u8;
                                                }
                                            }
                                        }
                                    }
                                    *base.add(4).cast::<usize>() = len36;
                                    *base.add(0).cast::<*mut u8>() = result36;
                                }
                            }
                            *ptr6.add(16).cast::<usize>() = len37;
                            *ptr6.add(12).cast::<*mut u8>() = result37;
                        }
                        Err(e) => {
                            *ptr6.add(0).cast::<u8>() = (1i32) as u8;
                            let vec38 = (e.into_bytes()).into_boxed_slice();
                            let ptr38 = vec38.as_ptr().cast::<u8>();
                            let len38 = vec38.len();
                            ::core::mem::forget(vec38);
                            *ptr6.add(8).cast::<usize>() = len38;
                            *ptr6.add(4).cast::<*mut u8>() = ptr38.cast_mut();
                        }
                    };
                    ptr6
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_mysql_query<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l5 = *arg0.add(4).cast::<*mut u8>();
                            let l6 = *arg0.add(8).cast::<usize>();
                            let base7 = l5;
                            let len7 = l6;
                            for i in 0..len7 {
                                let base = base7.add(i * 32);
                                {
                                    let l1 = *base.add(8).cast::<*mut u8>();
                                    let l2 = *base.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l1, l2, 1);
                                    let l3 = *base.add(20).cast::<*mut u8>();
                                    let l4 = *base.add(24).cast::<usize>();
                                    _rt::cabi_dealloc(l3, l4, 1);
                                }
                            }
                            _rt::cabi_dealloc(base7, len7 * 32, 8);
                            let l53 = *arg0.add(12).cast::<*mut u8>();
                            let l54 = *arg0.add(16).cast::<usize>();
                            let base55 = l53;
                            let len55 = l54;
                            for i in 0..len55 {
                                let base = base55.add(i * 8);
                                {
                                    let l50 = *base.add(0).cast::<*mut u8>();
                                    let l51 = *base.add(4).cast::<usize>();
                                    let base52 = l50;
                                    let len52 = l51;
                                    for i in 0..len52 {
                                        let base = base52.add(i * 24);
                                        {
                                            let l8 = i32::from(*base.add(0).cast::<u8>());
                                            match l8 {
                                                0 => (),
                                                1 => (),
                                                2 => (),
                                                3 => (),
                                                4 => (),
                                                5 => (),
                                                6 => (),
                                                7 => (),
                                                8 => (),
                                                9 => (),
                                                10 => (),
                                                11 => (),
                                                12 => (),
                                                13 => {
                                                    let l9 = *base.add(8).cast::<*mut u8>();
                                                    let l10 = *base.add(12).cast::<usize>();
                                                    _rt::cabi_dealloc(l9, l10, 1);
                                                }
                                                14 => (),
                                                15 => (),
                                                16 => (),
                                                17 => (),
                                                18 => (),
                                                19 => {
                                                    let l11 = *base.add(8).cast::<*mut u8>();
                                                    let l12 = *base.add(12).cast::<usize>();
                                                    _rt::cabi_dealloc(l11, l12, 1);
                                                }
                                                20 => {
                                                    let l13 = *base.add(8).cast::<*mut u8>();
                                                    let l14 = *base.add(12).cast::<usize>();
                                                    _rt::cabi_dealloc(l13, l14, 1);
                                                }
                                                21 => {
                                                    let l15 = *base.add(8).cast::<*mut u8>();
                                                    let l16 = *base.add(12).cast::<usize>();
                                                    _rt::cabi_dealloc(l15, l16, 1);
                                                }
                                                22 => {
                                                    let l17 = *base.add(8).cast::<*mut u8>();
                                                    let l18 = *base.add(12).cast::<usize>();
                                                    _rt::cabi_dealloc(l17, l18, 1);
                                                }
                                                23 => {
                                                    let l19 = *base.add(8).cast::<*mut u8>();
                                                    let l20 = *base.add(12).cast::<usize>();
                                                    _rt::cabi_dealloc(l19, l20, 1);
                                                }
                                                24 => {
                                                    let l21 = *base.add(8).cast::<*mut u8>();
                                                    let l22 = *base.add(12).cast::<usize>();
                                                    _rt::cabi_dealloc(l21, l22, 1);
                                                }
                                                25 => {
                                                    let l23 = *base.add(8).cast::<*mut u8>();
                                                    let l24 = *base.add(12).cast::<usize>();
                                                    let base25 = l23;
                                                    let len25 = l24;
                                                    _rt::cabi_dealloc(base25, len25 * 1, 1);
                                                }
                                                26 => {
                                                    let l26 = *base.add(8).cast::<*mut u8>();
                                                    let l27 = *base.add(12).cast::<usize>();
                                                    let base28 = l26;
                                                    let len28 = l27;
                                                    _rt::cabi_dealloc(base28, len28 * 1, 1);
                                                }
                                                27 => {
                                                    let l29 = *base.add(8).cast::<*mut u8>();
                                                    let l30 = *base.add(12).cast::<usize>();
                                                    let base31 = l29;
                                                    let len31 = l30;
                                                    _rt::cabi_dealloc(base31, len31 * 1, 1);
                                                }
                                                28 => {
                                                    let l32 = *base.add(8).cast::<*mut u8>();
                                                    let l33 = *base.add(12).cast::<usize>();
                                                    let base34 = l32;
                                                    let len34 = l33;
                                                    _rt::cabi_dealloc(base34, len34 * 1, 1);
                                                }
                                                29 => {
                                                    let l35 = *base.add(8).cast::<*mut u8>();
                                                    let l36 = *base.add(12).cast::<usize>();
                                                    let base37 = l35;
                                                    let len37 = l36;
                                                    _rt::cabi_dealloc(base37, len37 * 1, 1);
                                                }
                                                30 => {
                                                    let l38 = *base.add(8).cast::<*mut u8>();
                                                    let l39 = *base.add(12).cast::<usize>();
                                                    let base40 = l38;
                                                    let len40 = l39;
                                                    _rt::cabi_dealloc(base40, len40 * 1, 1);
                                                }
                                                31 => {
                                                    let l41 = *base.add(8).cast::<*mut u8>();
                                                    let l42 = *base.add(12).cast::<usize>();
                                                    _rt::cabi_dealloc(l41, l42, 1);
                                                }
                                                32 => {
                                                    let l43 = *base.add(8).cast::<*mut u8>();
                                                    let l44 = *base.add(12).cast::<usize>();
                                                    _rt::cabi_dealloc(l43, l44, 1);
                                                }
                                                33 => {
                                                    let l45 = *base.add(8).cast::<*mut u8>();
                                                    let l46 = *base.add(12).cast::<usize>();
                                                    let base47 = l45;
                                                    let len47 = l46;
                                                    _rt::cabi_dealloc(base47, len47 * 1, 1);
                                                }
                                                34 => {
                                                    let l48 = *base.add(8).cast::<*mut u8>();
                                                    let l49 = *base.add(12).cast::<usize>();
                                                    _rt::cabi_dealloc(l48, l49, 1);
                                                }
                                                _ => (),
                                            }
                                        }
                                    }
                                    _rt::cabi_dealloc(base52, len52 * 24, 8);
                                }
                            }
                            _rt::cabi_dealloc(base55, len55 * 8, 4);
                        }
                        _ => {
                            let l56 = *arg0.add(4).cast::<*mut u8>();
                            let l57 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l56, l57, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_postgres_execute_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let base4 = arg2;
                    let len4 = arg3;
                    let mut result4 = _rt::Vec::with_capacity(len4);
                    for i in 0..len4 {
                        let base = base4.add(i * 8);
                        let e4 = {
                            let l1 = *base.add(0).cast::<*mut u8>();
                            let l2 = *base.add(4).cast::<usize>();
                            let len3 = l2;
                            let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);

                            _rt::string_lift(bytes3)
                        };
                        result4.push(e4);
                    }
                    _rt::cabi_dealloc(base4, len4 * 8, 4);
                    let result5 = T::postgres_execute(_rt::string_lift(bytes0), result4);
                    let ptr6 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result5 {
                        Ok(e) => {
                            *ptr6.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr6.add(8).cast::<i64>() = _rt::as_i64(e);
                        }
                        Err(e) => {
                            *ptr6.add(0).cast::<u8>() = (1i32) as u8;
                            let vec7 = (e.into_bytes()).into_boxed_slice();
                            let ptr7 = vec7.as_ptr().cast::<u8>();
                            let len7 = vec7.len();
                            ::core::mem::forget(vec7);
                            *ptr6.add(12).cast::<usize>() = len7;
                            *ptr6.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                        }
                    };
                    ptr6
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_postgres_execute<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = *arg0.add(8).cast::<*mut u8>();
                            let l2 = *arg0.add(12).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_postgres_query_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let base4 = arg2;
                    let len4 = arg3;
                    let mut result4 = _rt::Vec::with_capacity(len4);
                    for i in 0..len4 {
                        let base = base4.add(i * 8);
                        let e4 = {
                            let l1 = *base.add(0).cast::<*mut u8>();
                            let l2 = *base.add(4).cast::<usize>();
                            let len3 = l2;
                            let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);

                            _rt::string_lift(bytes3)
                        };
                        result4.push(e4);
                    }
                    _rt::cabi_dealloc(base4, len4 * 8, 4);
                    let result5 = T::postgres_query(_rt::string_lift(bytes0), result4);
                    let ptr6 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result5 {
                        Ok(e) => {
                            *ptr6.add(0).cast::<u8>() = (0i32) as u8;
                            let PostgresQueryResult {
                                columns: columns7,
                                rows: rows7,
                            } = e;
                            let vec16 = columns7;
                            let len16 = vec16.len();
                            let layout16 =
                                _rt::alloc::Layout::from_size_align_unchecked(vec16.len() * 40, 8);
                            let result16 = if layout16.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout16).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout16);
                                }
                                ptr
                            } else {
                                {
                                    ::core::ptr::null_mut()
                                }
                            };
                            for (i, e) in vec16.into_iter().enumerate() {
                                let base = result16.add(i * 40);
                                {
                                    let super::super::super::super::wasi::rdbms::postgres::DbColumn{ ordinal:ordinal8, name:name8, db_type:db_type8, db_type_name:db_type_name8, } = e;
                                    *base.add(0).cast::<i64>() = _rt::as_i64(ordinal8);
                                    let vec9 = (name8.into_bytes()).into_boxed_slice();
                                    let ptr9 = vec9.as_ptr().cast::<u8>();
                                    let len9 = vec9.len();
                                    ::core::mem::forget(vec9);
                                    *base.add(12).cast::<usize>() = len9;
                                    *base.add(8).cast::<*mut u8>() = ptr9.cast_mut();
                                    use super::super::super::super::wasi::rdbms::postgres::DbColumnType as V14;
                                    match db_type8 {
                                        V14::Primitive(e) => {
                                            *base.add(16).cast::<u8>() = (0i32) as u8;
                                            use super::super::super::super::wasi::rdbms::postgres::DbColumnTypePrimitive as V11;
                                            match e {
                                                V11::Character => {
                                                    *base.add(20).cast::<u8>() = (0i32) as u8;
                                                }
                                                V11::Int2 => {
                                                    *base.add(20).cast::<u8>() = (1i32) as u8;
                                                }
                                                V11::Int4 => {
                                                    *base.add(20).cast::<u8>() = (2i32) as u8;
                                                }
                                                V11::Int8 => {
                                                    *base.add(20).cast::<u8>() = (3i32) as u8;
                                                }
                                                V11::Float4 => {
                                                    *base.add(20).cast::<u8>() = (4i32) as u8;
                                                }
                                                V11::Float8 => {
                                                    *base.add(20).cast::<u8>() = (5i32) as u8;
                                                }
                                                V11::Numeric => {
                                                    *base.add(20).cast::<u8>() = (6i32) as u8;
                                                }
                                                V11::Boolean => {
                                                    *base.add(20).cast::<u8>() = (7i32) as u8;
                                                }
                                                V11::Text => {
                                                    *base.add(20).cast::<u8>() = (8i32) as u8;
                                                }
                                                V11::Varchar => {
                                                    *base.add(20).cast::<u8>() = (9i32) as u8;
                                                }
                                                V11::Bpchar => {
                                                    *base.add(20).cast::<u8>() = (10i32) as u8;
                                                }
                                                V11::Timestamp => {
                                                    *base.add(20).cast::<u8>() = (11i32) as u8;
                                                }
                                                V11::Timestamptz => {
                                                    *base.add(20).cast::<u8>() = (12i32) as u8;
                                                }
                                                V11::Date => {
                                                    *base.add(20).cast::<u8>() = (13i32) as u8;
                                                }
                                                V11::Time => {
                                                    *base.add(20).cast::<u8>() = (14i32) as u8;
                                                }
                                                V11::Timetz => {
                                                    *base.add(20).cast::<u8>() = (15i32) as u8;
                                                }
                                                V11::Interval => {
                                                    *base.add(20).cast::<u8>() = (16i32) as u8;
                                                }
                                                V11::Bytea => {
                                                    *base.add(20).cast::<u8>() = (17i32) as u8;
                                                }
                                                V11::Uuid => {
                                                    *base.add(20).cast::<u8>() = (18i32) as u8;
                                                }
                                                V11::Xml => {
                                                    *base.add(20).cast::<u8>() = (19i32) as u8;
                                                }
                                                V11::Json => {
                                                    *base.add(20).cast::<u8>() = (20i32) as u8;
                                                }
                                                V11::Jsonb => {
                                                    *base.add(20).cast::<u8>() = (21i32) as u8;
                                                }
                                                V11::Inet => {
                                                    *base.add(20).cast::<u8>() = (22i32) as u8;
                                                }
                                                V11::Cidr => {
                                                    *base.add(20).cast::<u8>() = (23i32) as u8;
                                                }
                                                V11::Macaddr => {
                                                    *base.add(20).cast::<u8>() = (24i32) as u8;
                                                }
                                                V11::Bit => {
                                                    *base.add(20).cast::<u8>() = (25i32) as u8;
                                                }
                                                V11::Varbit => {
                                                    *base.add(20).cast::<u8>() = (26i32) as u8;
                                                }
                                                V11::Int4range => {
                                                    *base.add(20).cast::<u8>() = (27i32) as u8;
                                                }
                                                V11::Int8range => {
                                                    *base.add(20).cast::<u8>() = (28i32) as u8;
                                                }
                                                V11::Numrange => {
                                                    *base.add(20).cast::<u8>() = (29i32) as u8;
                                                }
                                                V11::Tsrange => {
                                                    *base.add(20).cast::<u8>() = (30i32) as u8;
                                                }
                                                V11::Tstzrange => {
                                                    *base.add(20).cast::<u8>() = (31i32) as u8;
                                                }
                                                V11::Daterange => {
                                                    *base.add(20).cast::<u8>() = (32i32) as u8;
                                                }
                                                V11::Oid => {
                                                    *base.add(20).cast::<u8>() = (33i32) as u8;
                                                }
                                                V11::CustomEnum(e) => {
                                                    *base.add(20).cast::<u8>() = (34i32) as u8;
                                                    let vec10 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr10 = vec10.as_ptr().cast::<u8>();
                                                    let len10 = vec10.len();
                                                    ::core::mem::forget(vec10);
                                                    *base.add(28).cast::<usize>() = len10;
                                                    *base.add(24).cast::<*mut u8>() =
                                                        ptr10.cast_mut();
                                                }
                                            }
                                        }
                                        V14::Array(e) => {
                                            *base.add(16).cast::<u8>() = (1i32) as u8;
                                            use super::super::super::super::wasi::rdbms::postgres::DbColumnTypePrimitive as V13;
                                            match e {
                                                V13::Character => {
                                                    *base.add(20).cast::<u8>() = (0i32) as u8;
                                                }
                                                V13::Int2 => {
                                                    *base.add(20).cast::<u8>() = (1i32) as u8;
                                                }
                                                V13::Int4 => {
                                                    *base.add(20).cast::<u8>() = (2i32) as u8;
                                                }
                                                V13::Int8 => {
                                                    *base.add(20).cast::<u8>() = (3i32) as u8;
                                                }
                                                V13::Float4 => {
                                                    *base.add(20).cast::<u8>() = (4i32) as u8;
                                                }
                                                V13::Float8 => {
                                                    *base.add(20).cast::<u8>() = (5i32) as u8;
                                                }
                                                V13::Numeric => {
                                                    *base.add(20).cast::<u8>() = (6i32) as u8;
                                                }
                                                V13::Boolean => {
                                                    *base.add(20).cast::<u8>() = (7i32) as u8;
                                                }
                                                V13::Text => {
                                                    *base.add(20).cast::<u8>() = (8i32) as u8;
                                                }
                                                V13::Varchar => {
                                                    *base.add(20).cast::<u8>() = (9i32) as u8;
                                                }
                                                V13::Bpchar => {
                                                    *base.add(20).cast::<u8>() = (10i32) as u8;
                                                }
                                                V13::Timestamp => {
                                                    *base.add(20).cast::<u8>() = (11i32) as u8;
                                                }
                                                V13::Timestamptz => {
                                                    *base.add(20).cast::<u8>() = (12i32) as u8;
                                                }
                                                V13::Date => {
                                                    *base.add(20).cast::<u8>() = (13i32) as u8;
                                                }
                                                V13::Time => {
                                                    *base.add(20).cast::<u8>() = (14i32) as u8;
                                                }
                                                V13::Timetz => {
                                                    *base.add(20).cast::<u8>() = (15i32) as u8;
                                                }
                                                V13::Interval => {
                                                    *base.add(20).cast::<u8>() = (16i32) as u8;
                                                }
                                                V13::Bytea => {
                                                    *base.add(20).cast::<u8>() = (17i32) as u8;
                                                }
                                                V13::Uuid => {
                                                    *base.add(20).cast::<u8>() = (18i32) as u8;
                                                }
                                                V13::Xml => {
                                                    *base.add(20).cast::<u8>() = (19i32) as u8;
                                                }
                                                V13::Json => {
                                                    *base.add(20).cast::<u8>() = (20i32) as u8;
                                                }
                                                V13::Jsonb => {
                                                    *base.add(20).cast::<u8>() = (21i32) as u8;
                                                }
                                                V13::Inet => {
                                                    *base.add(20).cast::<u8>() = (22i32) as u8;
                                                }
                                                V13::Cidr => {
                                                    *base.add(20).cast::<u8>() = (23i32) as u8;
                                                }
                                                V13::Macaddr => {
                                                    *base.add(20).cast::<u8>() = (24i32) as u8;
                                                }
                                                V13::Bit => {
                                                    *base.add(20).cast::<u8>() = (25i32) as u8;
                                                }
                                                V13::Varbit => {
                                                    *base.add(20).cast::<u8>() = (26i32) as u8;
                                                }
                                                V13::Int4range => {
                                                    *base.add(20).cast::<u8>() = (27i32) as u8;
                                                }
                                                V13::Int8range => {
                                                    *base.add(20).cast::<u8>() = (28i32) as u8;
                                                }
                                                V13::Numrange => {
                                                    *base.add(20).cast::<u8>() = (29i32) as u8;
                                                }
                                                V13::Tsrange => {
                                                    *base.add(20).cast::<u8>() = (30i32) as u8;
                                                }
                                                V13::Tstzrange => {
                                                    *base.add(20).cast::<u8>() = (31i32) as u8;
                                                }
                                                V13::Daterange => {
                                                    *base.add(20).cast::<u8>() = (32i32) as u8;
                                                }
                                                V13::Oid => {
                                                    *base.add(20).cast::<u8>() = (33i32) as u8;
                                                }
                                                V13::CustomEnum(e) => {
                                                    *base.add(20).cast::<u8>() = (34i32) as u8;
                                                    let vec12 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr12 = vec12.as_ptr().cast::<u8>();
                                                    let len12 = vec12.len();
                                                    ::core::mem::forget(vec12);
                                                    *base.add(28).cast::<usize>() = len12;
                                                    *base.add(24).cast::<*mut u8>() =
                                                        ptr12.cast_mut();
                                                }
                                            }
                                        }
                                    }
                                    let vec15 = (db_type_name8.into_bytes()).into_boxed_slice();
                                    let ptr15 = vec15.as_ptr().cast::<u8>();
                                    let len15 = vec15.len();
                                    ::core::mem::forget(vec15);
                                    *base.add(36).cast::<usize>() = len15;
                                    *base.add(32).cast::<*mut u8>() = ptr15.cast_mut();
                                }
                            }
                            *ptr6.add(8).cast::<usize>() = len16;
                            *ptr6.add(4).cast::<*mut u8>() = result16;
                            let vec125 = rows7;
                            let len125 = vec125.len();
                            let layout125 =
                                _rt::alloc::Layout::from_size_align_unchecked(vec125.len() * 8, 4);
                            let result125 = if layout125.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout125).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout125);
                                }
                                ptr
                            } else {
                                {
                                    ::core::ptr::null_mut()
                                }
                            };
                            for (i, e) in vec125.into_iter().enumerate() {
                                let base = result125.add(i * 8);
                                {
                                    let super::super::super::super::wasi::rdbms::postgres::DbRow {
                                        values: values17,
                                    } = e;
                                    let vec124 = values17;
                                    let len124 = vec124.len();
                                    let layout124 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec124.len() * 72,
                                        8,
                                    );
                                    let result124 = if layout124.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout124).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout124);
                                        }
                                        ptr
                                    } else {
                                        {
                                            ::core::ptr::null_mut()
                                        }
                                    };
                                    for (i, e) in vec124.into_iter().enumerate() {
                                        let base = result124.add(i * 72);
                                        {
                                            use super::super::super::super::wasi::rdbms::postgres::DbValue as V123;
                                            match e {
                                                V123::Primitive(e) => {
                                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                                    use super::super::super::super::wasi::rdbms::postgres::DbValuePrimitive as V69;
                                                    match e {
                                                        V69::Character(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (0i32) as u8;
                                                            *base.add(16).cast::<u8>() =
                                                                (_rt::as_i32(e)) as u8;
                                                        }
                                                        V69::Int2(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (1i32) as u8;
                                                            *base.add(16).cast::<u16>() =
                                                                (_rt::as_i32(e)) as u16;
                                                        }
                                                        V69::Int4(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (2i32) as u8;
                                                            *base.add(16).cast::<i32>() =
                                                                _rt::as_i32(e);
                                                        }
                                                        V69::Int8(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (3i32) as u8;
                                                            *base.add(16).cast::<i64>() =
                                                                _rt::as_i64(e);
                                                        }
                                                        V69::Float4(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (4i32) as u8;
                                                            *base.add(16).cast::<f32>() =
                                                                _rt::as_f32(e);
                                                        }
                                                        V69::Float8(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (5i32) as u8;
                                                            *base.add(16).cast::<f64>() =
                                                                _rt::as_f64(e);
                                                        }
                                                        V69::Numeric(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (6i32) as u8;
                                                            let vec18 =
                                                                (e.into_bytes()).into_boxed_slice();
                                                            let ptr18 = vec18.as_ptr().cast::<u8>();
                                                            let len18 = vec18.len();
                                                            ::core::mem::forget(vec18);
                                                            *base.add(20).cast::<usize>() = len18;
                                                            *base.add(16).cast::<*mut u8>() =
                                                                ptr18.cast_mut();
                                                        }
                                                        V69::Boolean(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (7i32) as u8;
                                                            *base.add(16).cast::<u8>() = (match e {
                                                                true => 1,
                                                                false => 0,
                                                            })
                                                                as u8;
                                                        }
                                                        V69::Text(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (8i32) as u8;
                                                            let vec19 =
                                                                (e.into_bytes()).into_boxed_slice();
                                                            let ptr19 = vec19.as_ptr().cast::<u8>();
                                                            let len19 = vec19.len();
                                                            ::core::mem::forget(vec19);
                                                            *base.add(20).cast::<usize>() = len19;
                                                            *base.add(16).cast::<*mut u8>() =
                                                                ptr19.cast_mut();
                                                        }
                                                        V69::Varchar(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (9i32) as u8;
                                                            let vec20 =
                                                                (e.into_bytes()).into_boxed_slice();
                                                            let ptr20 = vec20.as_ptr().cast::<u8>();
                                                            let len20 = vec20.len();
                                                            ::core::mem::forget(vec20);
                                                            *base.add(20).cast::<usize>() = len20;
                                                            *base.add(16).cast::<*mut u8>() =
                                                                ptr20.cast_mut();
                                                        }
                                                        V69::Bpchar(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (10i32) as u8;
                                                            let vec21 =
                                                                (e.into_bytes()).into_boxed_slice();
                                                            let ptr21 = vec21.as_ptr().cast::<u8>();
                                                            let len21 = vec21.len();
                                                            ::core::mem::forget(vec21);
                                                            *base.add(20).cast::<usize>() = len21;
                                                            *base.add(16).cast::<*mut u8>() =
                                                                ptr21.cast_mut();
                                                        }
                                                        V69::Timestamp(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (11i32) as u8;
                                                            let (
                                                                t22_0,
                                                                t22_1,
                                                                t22_2,
                                                                t22_3,
                                                                t22_4,
                                                                t22_5,
                                                                t22_6,
                                                            ) = e;
                                                            *base.add(16).cast::<i32>() =
                                                                _rt::as_i32(t22_0);
                                                            *base.add(20).cast::<u8>() =
                                                                (_rt::as_i32(t22_1)) as u8;
                                                            *base.add(21).cast::<u8>() =
                                                                (_rt::as_i32(t22_2)) as u8;
                                                            *base.add(22).cast::<u8>() =
                                                                (_rt::as_i32(t22_3)) as u8;
                                                            *base.add(23).cast::<u8>() =
                                                                (_rt::as_i32(t22_4)) as u8;
                                                            *base.add(24).cast::<u8>() =
                                                                (_rt::as_i32(t22_5)) as u8;
                                                            *base.add(28).cast::<i32>() =
                                                                _rt::as_i32(t22_6);
                                                        }
                                                        V69::Timestamptz(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (12i32) as u8;
                                                            let (
                                                                t23_0,
                                                                t23_1,
                                                                t23_2,
                                                                t23_3,
                                                                t23_4,
                                                                t23_5,
                                                                t23_6,
                                                                t23_7,
                                                            ) = e;
                                                            *base.add(16).cast::<i32>() =
                                                                _rt::as_i32(t23_0);
                                                            *base.add(20).cast::<u8>() =
                                                                (_rt::as_i32(t23_1)) as u8;
                                                            *base.add(21).cast::<u8>() =
                                                                (_rt::as_i32(t23_2)) as u8;
                                                            *base.add(22).cast::<u8>() =
                                                                (_rt::as_i32(t23_3)) as u8;
                                                            *base.add(23).cast::<u8>() =
                                                                (_rt::as_i32(t23_4)) as u8;
                                                            *base.add(24).cast::<u8>() =
                                                                (_rt::as_i32(t23_5)) as u8;
                                                            *base.add(28).cast::<i32>() =
                                                                _rt::as_i32(t23_6);
                                                            *base.add(32).cast::<i32>() =
                                                                _rt::as_i32(t23_7);
                                                        }
                                                        V69::Date(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (13i32) as u8;
                                                            let (t24_0, t24_1, t24_2) = e;
                                                            *base.add(16).cast::<i32>() =
                                                                _rt::as_i32(t24_0);
                                                            *base.add(20).cast::<u8>() =
                                                                (_rt::as_i32(t24_1)) as u8;
                                                            *base.add(21).cast::<u8>() =
                                                                (_rt::as_i32(t24_2)) as u8;
                                                        }
                                                        V69::Time(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (14i32) as u8;
                                                            let (t25_0, t25_1, t25_2, t25_3) = e;
                                                            *base.add(16).cast::<u8>() =
                                                                (_rt::as_i32(t25_0)) as u8;
                                                            *base.add(17).cast::<u8>() =
                                                                (_rt::as_i32(t25_1)) as u8;
                                                            *base.add(18).cast::<u8>() =
                                                                (_rt::as_i32(t25_2)) as u8;
                                                            *base.add(20).cast::<i32>() =
                                                                _rt::as_i32(t25_3);
                                                        }
                                                        V69::Timetz(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (15i32) as u8;
                                                            let (t26_0, t26_1, t26_2, t26_3, t26_4) =
                                                                e;
                                                            *base.add(16).cast::<u8>() =
                                                                (_rt::as_i32(t26_0)) as u8;
                                                            *base.add(17).cast::<u8>() =
                                                                (_rt::as_i32(t26_1)) as u8;
                                                            *base.add(18).cast::<u8>() =
                                                                (_rt::as_i32(t26_2)) as u8;
                                                            *base.add(20).cast::<i32>() =
                                                                _rt::as_i32(t26_3);
                                                            *base.add(24).cast::<i32>() =
                                                                _rt::as_i32(t26_4);
                                                        }
                                                        V69::Interval(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (16i32) as u8;
                                                            let (t27_0, t27_1, t27_2) = e;
                                                            *base.add(16).cast::<i32>() =
                                                                _rt::as_i32(t27_0);
                                                            *base.add(20).cast::<i32>() =
                                                                _rt::as_i32(t27_1);
                                                            *base.add(24).cast::<i64>() =
                                                                _rt::as_i64(t27_2);
                                                        }
                                                        V69::Bytea(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (17i32) as u8;
                                                            let vec28 = (e).into_boxed_slice();
                                                            let ptr28 = vec28.as_ptr().cast::<u8>();
                                                            let len28 = vec28.len();
                                                            ::core::mem::forget(vec28);
                                                            *base.add(20).cast::<usize>() = len28;
                                                            *base.add(16).cast::<*mut u8>() =
                                                                ptr28.cast_mut();
                                                        }
                                                        V69::Json(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (18i32) as u8;
                                                            let vec29 =
                                                                (e.into_bytes()).into_boxed_slice();
                                                            let ptr29 = vec29.as_ptr().cast::<u8>();
                                                            let len29 = vec29.len();
                                                            ::core::mem::forget(vec29);
                                                            *base.add(20).cast::<usize>() = len29;
                                                            *base.add(16).cast::<*mut u8>() =
                                                                ptr29.cast_mut();
                                                        }
                                                        V69::Jsonb(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (19i32) as u8;
                                                            let vec30 =
                                                                (e.into_bytes()).into_boxed_slice();
                                                            let ptr30 = vec30.as_ptr().cast::<u8>();
                                                            let len30 = vec30.len();
                                                            ::core::mem::forget(vec30);
                                                            *base.add(20).cast::<usize>() = len30;
                                                            *base.add(16).cast::<*mut u8>() =
                                                                ptr30.cast_mut();
                                                        }
                                                        V69::Xml(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (20i32) as u8;
                                                            let vec31 =
                                                                (e.into_bytes()).into_boxed_slice();
                                                            let ptr31 = vec31.as_ptr().cast::<u8>();
                                                            let len31 = vec31.len();
                                                            ::core::mem::forget(vec31);
                                                            *base.add(20).cast::<usize>() = len31;
                                                            *base.add(16).cast::<*mut u8>() =
                                                                ptr31.cast_mut();
                                                        }
                                                        V69::Uuid(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (21i32) as u8;
                                                            let (t32_0, t32_1) = e;
                                                            *base.add(16).cast::<i64>() =
                                                                _rt::as_i64(t32_0);
                                                            *base.add(24).cast::<i64>() =
                                                                _rt::as_i64(t32_1);
                                                        }
                                                        V69::Inet(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (22i32) as u8;
                                                            use super::super::super::super::wasi::rdbms::postgres::IpAddress as V35;
                                                            match e {
                                                                V35::Ipv4(e) => {
                                                                    *base.add(16).cast::<u8>() =
                                                                        (0i32) as u8;
                                                                    let (
                                                                        t33_0,
                                                                        t33_1,
                                                                        t33_2,
                                                                        t33_3,
                                                                    ) = e;
                                                                    *base.add(18).cast::<u8>() =
                                                                        (_rt::as_i32(t33_0)) as u8;
                                                                    *base.add(19).cast::<u8>() =
                                                                        (_rt::as_i32(t33_1)) as u8;
                                                                    *base.add(20).cast::<u8>() =
                                                                        (_rt::as_i32(t33_2)) as u8;
                                                                    *base.add(21).cast::<u8>() =
                                                                        (_rt::as_i32(t33_3)) as u8;
                                                                }
                                                                V35::Ipv6(e) => {
                                                                    *base.add(16).cast::<u8>() =
                                                                        (1i32) as u8;
                                                                    let (
                                                                        t34_0,
                                                                        t34_1,
                                                                        t34_2,
                                                                        t34_3,
                                                                        t34_4,
                                                                        t34_5,
                                                                        t34_6,
                                                                        t34_7,
                                                                    ) = e;
                                                                    *base.add(18).cast::<u16>() =
                                                                        (_rt::as_i32(t34_0)) as u16;
                                                                    *base.add(20).cast::<u16>() =
                                                                        (_rt::as_i32(t34_1)) as u16;
                                                                    *base.add(22).cast::<u16>() =
                                                                        (_rt::as_i32(t34_2)) as u16;
                                                                    *base.add(24).cast::<u16>() =
                                                                        (_rt::as_i32(t34_3)) as u16;
                                                                    *base.add(26).cast::<u16>() =
                                                                        (_rt::as_i32(t34_4)) as u16;
                                                                    *base.add(28).cast::<u16>() =
                                                                        (_rt::as_i32(t34_5)) as u16;
                                                                    *base.add(30).cast::<u16>() =
                                                                        (_rt::as_i32(t34_6)) as u16;
                                                                    *base.add(32).cast::<u16>() =
                                                                        (_rt::as_i32(t34_7)) as u16;
                                                                }
                                                            }
                                                        }
                                                        V69::Cidr(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (23i32) as u8;
                                                            use super::super::super::super::wasi::rdbms::postgres::IpAddress as V38;
                                                            match e {
                                                                V38::Ipv4(e) => {
                                                                    *base.add(16).cast::<u8>() =
                                                                        (0i32) as u8;
                                                                    let (
                                                                        t36_0,
                                                                        t36_1,
                                                                        t36_2,
                                                                        t36_3,
                                                                    ) = e;
                                                                    *base.add(18).cast::<u8>() =
                                                                        (_rt::as_i32(t36_0)) as u8;
                                                                    *base.add(19).cast::<u8>() =
                                                                        (_rt::as_i32(t36_1)) as u8;
                                                                    *base.add(20).cast::<u8>() =
                                                                        (_rt::as_i32(t36_2)) as u8;
                                                                    *base.add(21).cast::<u8>() =
                                                                        (_rt::as_i32(t36_3)) as u8;
                                                                }
                                                                V38::Ipv6(e) => {
                                                                    *base.add(16).cast::<u8>() =
                                                                        (1i32) as u8;
                                                                    let (
                                                                        t37_0,
                                                                        t37_1,
                                                                        t37_2,
                                                                        t37_3,
                                                                        t37_4,
                                                                        t37_5,
                                                                        t37_6,
                                                                        t37_7,
                                                                    ) = e;
                                                                    *base.add(18).cast::<u16>() =
                                                                        (_rt::as_i32(t37_0)) as u16;
                                                                    *base.add(20).cast::<u16>() =
                                                                        (_rt::as_i32(t37_1)) as u16;
                                                                    *base.add(22).cast::<u16>() =
                                                                        (_rt::as_i32(t37_2)) as u16;
                                                                    *base.add(24).cast::<u16>() =
                                                                        (_rt::as_i32(t37_3)) as u16;
                                                                    *base.add(26).cast::<u16>() =
                                                                        (_rt::as_i32(t37_4)) as u16;
                                                                    *base.add(28).cast::<u16>() =
                                                                        (_rt::as_i32(t37_5)) as u16;
                                                                    *base.add(30).cast::<u16>() =
                                                                        (_rt::as_i32(t37_6)) as u16;
                                                                    *base.add(32).cast::<u16>() =
                                                                        (_rt::as_i32(t37_7)) as u16;
                                                                }
                                                            }
                                                        }
                                                        V69::Macaddr(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (24i32) as u8;
                                                            let (
                                                                t39_0,
                                                                t39_1,
                                                                t39_2,
                                                                t39_3,
                                                                t39_4,
                                                                t39_5,
                                                            ) = e;
                                                            *base.add(16).cast::<u8>() =
                                                                (_rt::as_i32(t39_0)) as u8;
                                                            *base.add(17).cast::<u8>() =
                                                                (_rt::as_i32(t39_1)) as u8;
                                                            *base.add(18).cast::<u8>() =
                                                                (_rt::as_i32(t39_2)) as u8;
                                                            *base.add(19).cast::<u8>() =
                                                                (_rt::as_i32(t39_3)) as u8;
                                                            *base.add(20).cast::<u8>() =
                                                                (_rt::as_i32(t39_4)) as u8;
                                                            *base.add(21).cast::<u8>() =
                                                                (_rt::as_i32(t39_5)) as u8;
                                                        }
                                                        V69::Bit(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (25i32) as u8;
                                                            let vec40 = e;
                                                            let len40 = vec40.len();
                                                            let layout40 = _rt::alloc::Layout::from_size_align_unchecked(vec40.len() * 1, 1);
                                                            let result40 = if layout40.size() != 0 {
                                                                let ptr =
                                                                    _rt::alloc::alloc(layout40)
                                                                        .cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(
                                                                        layout40,
                                                                    );
                                                                }
                                                                ptr
                                                            } else {
                                                                {
                                                                    ::core::ptr::null_mut()
                                                                }
                                                            };
                                                            for (i, e) in
                                                                vec40.into_iter().enumerate()
                                                            {
                                                                let base = result40.add(i * 1);
                                                                {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (match e {
                                                                            true => 1,
                                                                            false => 0,
                                                                        })
                                                                            as u8;
                                                                }
                                                            }
                                                            *base.add(20).cast::<usize>() = len40;
                                                            *base.add(16).cast::<*mut u8>() =
                                                                result40;
                                                        }
                                                        V69::Varbit(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (26i32) as u8;
                                                            let vec41 = e;
                                                            let len41 = vec41.len();
                                                            let layout41 = _rt::alloc::Layout::from_size_align_unchecked(vec41.len() * 1, 1);
                                                            let result41 = if layout41.size() != 0 {
                                                                let ptr =
                                                                    _rt::alloc::alloc(layout41)
                                                                        .cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(
                                                                        layout41,
                                                                    );
                                                                }
                                                                ptr
                                                            } else {
                                                                {
                                                                    ::core::ptr::null_mut()
                                                                }
                                                            };
                                                            for (i, e) in
                                                                vec41.into_iter().enumerate()
                                                            {
                                                                let base = result41.add(i * 1);
                                                                {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (match e {
                                                                            true => 1,
                                                                            false => 0,
                                                                        })
                                                                            as u8;
                                                                }
                                                            }
                                                            *base.add(20).cast::<usize>() = len41;
                                                            *base.add(16).cast::<*mut u8>() =
                                                                result41;
                                                        }
                                                        V69::Int4range(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (27i32) as u8;
                                                            let (t42_0, t42_1) = e;
                                                            match t42_0 {
                                                                Some(e) => {
                                                                    *base.add(16).cast::<u8>() =
                                                                        (1i32) as u8;
                                                                    let (t43_0, t43_1) = e;
                                                                    *base.add(20).cast::<i32>() =
                                                                        _rt::as_i32(t43_0);
                                                                    *base.add(24).cast::<u8>() =
                                                                        (match t43_1 {
                                                                            true => 1,
                                                                            false => 0,
                                                                        })
                                                                            as u8;
                                                                }
                                                                None => {
                                                                    *base.add(16).cast::<u8>() =
                                                                        (0i32) as u8;
                                                                }
                                                            };
                                                            match t42_1 {
                                                                Some(e) => {
                                                                    *base.add(28).cast::<u8>() =
                                                                        (1i32) as u8;
                                                                    let (t44_0, t44_1) = e;
                                                                    *base.add(32).cast::<i32>() =
                                                                        _rt::as_i32(t44_0);
                                                                    *base.add(36).cast::<u8>() =
                                                                        (match t44_1 {
                                                                            true => 1,
                                                                            false => 0,
                                                                        })
                                                                            as u8;
                                                                }
                                                                None => {
                                                                    *base.add(28).cast::<u8>() =
                                                                        (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                        V69::Int8range(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (28i32) as u8;
                                                            let (t45_0, t45_1) = e;
                                                            match t45_0 {
                                                                Some(e) => {
                                                                    *base.add(16).cast::<u8>() =
                                                                        (1i32) as u8;
                                                                    let (t46_0, t46_1) = e;
                                                                    *base.add(24).cast::<i64>() =
                                                                        _rt::as_i64(t46_0);
                                                                    *base.add(32).cast::<u8>() =
                                                                        (match t46_1 {
                                                                            true => 1,
                                                                            false => 0,
                                                                        })
                                                                            as u8;
                                                                }
                                                                None => {
                                                                    *base.add(16).cast::<u8>() =
                                                                        (0i32) as u8;
                                                                }
                                                            };
                                                            match t45_1 {
                                                                Some(e) => {
                                                                    *base.add(40).cast::<u8>() =
                                                                        (1i32) as u8;
                                                                    let (t47_0, t47_1) = e;
                                                                    *base.add(48).cast::<i64>() =
                                                                        _rt::as_i64(t47_0);
                                                                    *base.add(56).cast::<u8>() =
                                                                        (match t47_1 {
                                                                            true => 1,
                                                                            false => 0,
                                                                        })
                                                                            as u8;
                                                                }
                                                                None => {
                                                                    *base.add(40).cast::<u8>() =
                                                                        (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                        V69::Numrange(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (29i32) as u8;
                                                            let (t48_0, t48_1) = e;
                                                            match t48_0 {
                                                                Some(e) => {
                                                                    *base.add(16).cast::<u8>() =
                                                                        (1i32) as u8;
                                                                    let (t49_0, t49_1) = e;
                                                                    let vec50 = (t49_0
                                                                        .into_bytes())
                                                                    .into_boxed_slice();
                                                                    let ptr50 =
                                                                        vec50.as_ptr().cast::<u8>();
                                                                    let len50 = vec50.len();
                                                                    ::core::mem::forget(vec50);
                                                                    *base.add(24).cast::<usize>() =
                                                                        len50;
                                                                    *base
                                                                        .add(20)
                                                                        .cast::<*mut u8>() =
                                                                        ptr50.cast_mut();
                                                                    *base.add(28).cast::<u8>() =
                                                                        (match t49_1 {
                                                                            true => 1,
                                                                            false => 0,
                                                                        })
                                                                            as u8;
                                                                }
                                                                None => {
                                                                    *base.add(16).cast::<u8>() =
                                                                        (0i32) as u8;
                                                                }
                                                            };
                                                            match t48_1 {
                                                                Some(e) => {
                                                                    *base.add(32).cast::<u8>() =
                                                                        (1i32) as u8;
                                                                    let (t51_0, t51_1) = e;
                                                                    let vec52 = (t51_0
                                                                        .into_bytes())
                                                                    .into_boxed_slice();
                                                                    let ptr52 =
                                                                        vec52.as_ptr().cast::<u8>();
                                                                    let len52 = vec52.len();
                                                                    ::core::mem::forget(vec52);
                                                                    *base.add(40).cast::<usize>() =
                                                                        len52;
                                                                    *base
                                                                        .add(36)
                                                                        .cast::<*mut u8>() =
                                                                        ptr52.cast_mut();
                                                                    *base.add(44).cast::<u8>() =
                                                                        (match t51_1 {
                                                                            true => 1,
                                                                            false => 0,
                                                                        })
                                                                            as u8;
                                                                }
                                                                None => {
                                                                    *base.add(32).cast::<u8>() =
                                                                        (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                        V69::Tsrange(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (30i32) as u8;
                                                            let (t53_0, t53_1) = e;
                                                            match t53_0 {
                                                                Some(e) => {
                                                                    *base.add(16).cast::<u8>() =
                                                                        (1i32) as u8;
                                                                    let (t54_0, t54_1) = e;
                                                                    let (
                                                                        t55_0,
                                                                        t55_1,
                                                                        t55_2,
                                                                        t55_3,
                                                                        t55_4,
                                                                        t55_5,
                                                                        t55_6,
                                                                    ) = t54_0;
                                                                    *base.add(20).cast::<i32>() =
                                                                        _rt::as_i32(t55_0);
                                                                    *base.add(24).cast::<u8>() =
                                                                        (_rt::as_i32(t55_1)) as u8;
                                                                    *base.add(25).cast::<u8>() =
                                                                        (_rt::as_i32(t55_2)) as u8;
                                                                    *base.add(26).cast::<u8>() =
                                                                        (_rt::as_i32(t55_3)) as u8;
                                                                    *base.add(27).cast::<u8>() =
                                                                        (_rt::as_i32(t55_4)) as u8;
                                                                    *base.add(28).cast::<u8>() =
                                                                        (_rt::as_i32(t55_5)) as u8;
                                                                    *base.add(32).cast::<i32>() =
                                                                        _rt::as_i32(t55_6);
                                                                    *base.add(36).cast::<u8>() =
                                                                        (match t54_1 {
                                                                            true => 1,
                                                                            false => 0,
                                                                        })
                                                                            as u8;
                                                                }
                                                                None => {
                                                                    *base.add(16).cast::<u8>() =
                                                                        (0i32) as u8;
                                                                }
                                                            };
                                                            match t53_1 {
                                                                Some(e) => {
                                                                    *base.add(40).cast::<u8>() =
                                                                        (1i32) as u8;
                                                                    let (t56_0, t56_1) = e;
                                                                    let (
                                                                        t57_0,
                                                                        t57_1,
                                                                        t57_2,
                                                                        t57_3,
                                                                        t57_4,
                                                                        t57_5,
                                                                        t57_6,
                                                                    ) = t56_0;
                                                                    *base.add(44).cast::<i32>() =
                                                                        _rt::as_i32(t57_0);
                                                                    *base.add(48).cast::<u8>() =
                                                                        (_rt::as_i32(t57_1)) as u8;
                                                                    *base.add(49).cast::<u8>() =
                                                                        (_rt::as_i32(t57_2)) as u8;
                                                                    *base.add(50).cast::<u8>() =
                                                                        (_rt::as_i32(t57_3)) as u8;
                                                                    *base.add(51).cast::<u8>() =
                                                                        (_rt::as_i32(t57_4)) as u8;
                                                                    *base.add(52).cast::<u8>() =
                                                                        (_rt::as_i32(t57_5)) as u8;
                                                                    *base.add(56).cast::<i32>() =
                                                                        _rt::as_i32(t57_6);
                                                                    *base.add(60).cast::<u8>() =
                                                                        (match t56_1 {
                                                                            true => 1,
                                                                            false => 0,
                                                                        })
                                                                            as u8;
                                                                }
                                                                None => {
                                                                    *base.add(40).cast::<u8>() =
                                                                        (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                        V69::Tstzrange(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (31i32) as u8;
                                                            let (t58_0, t58_1) = e;
                                                            match t58_0 {
                                                                Some(e) => {
                                                                    *base.add(16).cast::<u8>() =
                                                                        (1i32) as u8;
                                                                    let (t59_0, t59_1) = e;
                                                                    let (
                                                                        t60_0,
                                                                        t60_1,
                                                                        t60_2,
                                                                        t60_3,
                                                                        t60_4,
                                                                        t60_5,
                                                                        t60_6,
                                                                        t60_7,
                                                                    ) = t59_0;
                                                                    *base.add(20).cast::<i32>() =
                                                                        _rt::as_i32(t60_0);
                                                                    *base.add(24).cast::<u8>() =
                                                                        (_rt::as_i32(t60_1)) as u8;
                                                                    *base.add(25).cast::<u8>() =
                                                                        (_rt::as_i32(t60_2)) as u8;
                                                                    *base.add(26).cast::<u8>() =
                                                                        (_rt::as_i32(t60_3)) as u8;
                                                                    *base.add(27).cast::<u8>() =
                                                                        (_rt::as_i32(t60_4)) as u8;
                                                                    *base.add(28).cast::<u8>() =
                                                                        (_rt::as_i32(t60_5)) as u8;
                                                                    *base.add(32).cast::<i32>() =
                                                                        _rt::as_i32(t60_6);
                                                                    *base.add(36).cast::<i32>() =
                                                                        _rt::as_i32(t60_7);
                                                                    *base.add(40).cast::<u8>() =
                                                                        (match t59_1 {
                                                                            true => 1,
                                                                            false => 0,
                                                                        })
                                                                            as u8;
                                                                }
                                                                None => {
                                                                    *base.add(16).cast::<u8>() =
                                                                        (0i32) as u8;
                                                                }
                                                            };
                                                            match t58_1 {
                                                                Some(e) => {
                                                                    *base.add(44).cast::<u8>() =
                                                                        (1i32) as u8;
                                                                    let (t61_0, t61_1) = e;
                                                                    let (
                                                                        t62_0,
                                                                        t62_1,
                                                                        t62_2,
                                                                        t62_3,
                                                                        t62_4,
                                                                        t62_5,
                                                                        t62_6,
                                                                        t62_7,
                                                                    ) = t61_0;
                                                                    *base.add(48).cast::<i32>() =
                                                                        _rt::as_i32(t62_0);
                                                                    *base.add(52).cast::<u8>() =
                                                                        (_rt::as_i32(t62_1)) as u8;
                                                                    *base.add(53).cast::<u8>() =
                                                                        (_rt::as_i32(t62_2)) as u8;
                                                                    *base.add(54).cast::<u8>() =
                                                                        (_rt::as_i32(t62_3)) as u8;
                                                                    *base.add(55).cast::<u8>() =
                                                                        (_rt::as_i32(t62_4)) as u8;
                                                                    *base.add(56).cast::<u8>() =
                                                                        (_rt::as_i32(t62_5)) as u8;
                                                                    *base.add(60).cast::<i32>() =
                                                                        _rt::as_i32(t62_6);
                                                                    *base.add(64).cast::<i32>() =
                                                                        _rt::as_i32(t62_7);
                                                                    *base.add(68).cast::<u8>() =
                                                                        (match t61_1 {
                                                                            true => 1,
                                                                            false => 0,
                                                                        })
                                                                            as u8;
                                                                }
                                                                None => {
                                                                    *base.add(44).cast::<u8>() =
                                                                        (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                        V69::Daterange(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (32i32) as u8;
                                                            let (t63_0, t63_1) = e;
                                                            match t63_0 {
                                                                Some(e) => {
                                                                    *base.add(16).cast::<u8>() =
                                                                        (1i32) as u8;
                                                                    let (t64_0, t64_1) = e;
                                                                    let (t65_0, t65_1, t65_2) =
                                                                        t64_0;
                                                                    *base.add(20).cast::<i32>() =
                                                                        _rt::as_i32(t65_0);
                                                                    *base.add(24).cast::<u8>() =
                                                                        (_rt::as_i32(t65_1)) as u8;
                                                                    *base.add(25).cast::<u8>() =
                                                                        (_rt::as_i32(t65_2)) as u8;
                                                                    *base.add(28).cast::<u8>() =
                                                                        (match t64_1 {
                                                                            true => 1,
                                                                            false => 0,
                                                                        })
                                                                            as u8;
                                                                }
                                                                None => {
                                                                    *base.add(16).cast::<u8>() =
                                                                        (0i32) as u8;
                                                                }
                                                            };
                                                            match t63_1 {
                                                                Some(e) => {
                                                                    *base.add(32).cast::<u8>() =
                                                                        (1i32) as u8;
                                                                    let (t66_0, t66_1) = e;
                                                                    let (t67_0, t67_1, t67_2) =
                                                                        t66_0;
                                                                    *base.add(36).cast::<i32>() =
                                                                        _rt::as_i32(t67_0);
                                                                    *base.add(40).cast::<u8>() =
                                                                        (_rt::as_i32(t67_1)) as u8;
                                                                    *base.add(41).cast::<u8>() =
                                                                        (_rt::as_i32(t67_2)) as u8;
                                                                    *base.add(44).cast::<u8>() =
                                                                        (match t66_1 {
                                                                            true => 1,
                                                                            false => 0,
                                                                        })
                                                                            as u8;
                                                                }
                                                                None => {
                                                                    *base.add(32).cast::<u8>() =
                                                                        (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                        V69::Oid(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (33i32) as u8;
                                                            *base.add(16).cast::<i32>() =
                                                                _rt::as_i32(e);
                                                        }
                                                        V69::CustomEnum(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (34i32) as u8;
                                                            let vec68 =
                                                                (e.into_bytes()).into_boxed_slice();
                                                            let ptr68 = vec68.as_ptr().cast::<u8>();
                                                            let len68 = vec68.len();
                                                            ::core::mem::forget(vec68);
                                                            *base.add(20).cast::<usize>() = len68;
                                                            *base.add(16).cast::<*mut u8>() =
                                                                ptr68.cast_mut();
                                                        }
                                                        V69::Null => {
                                                            *base.add(8).cast::<u8>() =
                                                                (35i32) as u8;
                                                        }
                                                    }
                                                }
                                                V123::Array(e) => {
                                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                                    let vec122 = e;
                                                    let len122 = vec122.len();
                                                    let layout122 = _rt::alloc::Layout::from_size_align_unchecked(vec122.len() * 64, 8);
                                                    let result122 = if layout122.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout122)
                                                            .cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(
                                                                layout122,
                                                            );
                                                        }
                                                        ptr
                                                    } else {
                                                        {
                                                            ::core::ptr::null_mut()
                                                        }
                                                    };
                                                    for (i, e) in vec122.into_iter().enumerate() {
                                                        let base = result122.add(i * 64);
                                                        {
                                                            use super::super::super::super::wasi::rdbms::postgres::DbValuePrimitive as V121;
                                                            match e {
                                                                V121::Character(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (0i32) as u8;
                                                                    *base.add(8).cast::<u8>() =
                                                                        (_rt::as_i32(e)) as u8;
                                                                }
                                                                V121::Int2(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (1i32) as u8;
                                                                    *base.add(8).cast::<u16>() =
                                                                        (_rt::as_i32(e)) as u16;
                                                                }
                                                                V121::Int4(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (2i32) as u8;
                                                                    *base.add(8).cast::<i32>() =
                                                                        _rt::as_i32(e);
                                                                }
                                                                V121::Int8(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (3i32) as u8;
                                                                    *base.add(8).cast::<i64>() =
                                                                        _rt::as_i64(e);
                                                                }
                                                                V121::Float4(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (4i32) as u8;
                                                                    *base.add(8).cast::<f32>() =
                                                                        _rt::as_f32(e);
                                                                }
                                                                V121::Float8(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (5i32) as u8;
                                                                    *base.add(8).cast::<f64>() =
                                                                        _rt::as_f64(e);
                                                                }
                                                                V121::Numeric(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (6i32) as u8;
                                                                    let vec70 = (e.into_bytes())
                                                                        .into_boxed_slice();
                                                                    let ptr70 =
                                                                        vec70.as_ptr().cast::<u8>();
                                                                    let len70 = vec70.len();
                                                                    ::core::mem::forget(vec70);
                                                                    *base.add(12).cast::<usize>() =
                                                                        len70;
                                                                    *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>() =
                                                                        ptr70.cast_mut();
                                                                }
                                                                V121::Boolean(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (7i32) as u8;
                                                                    *base.add(8).cast::<u8>() =
                                                                        (match e {
                                                                            true => 1,
                                                                            false => 0,
                                                                        })
                                                                            as u8;
                                                                }
                                                                V121::Text(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (8i32) as u8;
                                                                    let vec71 = (e.into_bytes())
                                                                        .into_boxed_slice();
                                                                    let ptr71 =
                                                                        vec71.as_ptr().cast::<u8>();
                                                                    let len71 = vec71.len();
                                                                    ::core::mem::forget(vec71);
                                                                    *base.add(12).cast::<usize>() =
                                                                        len71;
                                                                    *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>() =
                                                                        ptr71.cast_mut();
                                                                }
                                                                V121::Varchar(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (9i32) as u8;
                                                                    let vec72 = (e.into_bytes())
                                                                        .into_boxed_slice();
                                                                    let ptr72 =
                                                                        vec72.as_ptr().cast::<u8>();
                                                                    let len72 = vec72.len();
                                                                    ::core::mem::forget(vec72);
                                                                    *base.add(12).cast::<usize>() =
                                                                        len72;
                                                                    *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>() =
                                                                        ptr72.cast_mut();
                                                                }
                                                                V121::Bpchar(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (10i32) as u8;
                                                                    let vec73 = (e.into_bytes())
                                                                        .into_boxed_slice();
                                                                    let ptr73 =
                                                                        vec73.as_ptr().cast::<u8>();
                                                                    let len73 = vec73.len();
                                                                    ::core::mem::forget(vec73);
                                                                    *base.add(12).cast::<usize>() =
                                                                        len73;
                                                                    *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>() =
                                                                        ptr73.cast_mut();
                                                                }
                                                                V121::Timestamp(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (11i32) as u8;
                                                                    let (
                                                                        t74_0,
                                                                        t74_1,
                                                                        t74_2,
                                                                        t74_3,
                                                                        t74_4,
                                                                        t74_5,
                                                                        t74_6,
                                                                    ) = e;
                                                                    *base.add(8).cast::<i32>() =
                                                                        _rt::as_i32(t74_0);
                                                                    *base.add(12).cast::<u8>() =
                                                                        (_rt::as_i32(t74_1)) as u8;
                                                                    *base.add(13).cast::<u8>() =
                                                                        (_rt::as_i32(t74_2)) as u8;
                                                                    *base.add(14).cast::<u8>() =
                                                                        (_rt::as_i32(t74_3)) as u8;
                                                                    *base.add(15).cast::<u8>() =
                                                                        (_rt::as_i32(t74_4)) as u8;
                                                                    *base.add(16).cast::<u8>() =
                                                                        (_rt::as_i32(t74_5)) as u8;
                                                                    *base.add(20).cast::<i32>() =
                                                                        _rt::as_i32(t74_6);
                                                                }
                                                                V121::Timestamptz(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (12i32) as u8;
                                                                    let (
                                                                        t75_0,
                                                                        t75_1,
                                                                        t75_2,
                                                                        t75_3,
                                                                        t75_4,
                                                                        t75_5,
                                                                        t75_6,
                                                                        t75_7,
                                                                    ) = e;
                                                                    *base.add(8).cast::<i32>() =
                                                                        _rt::as_i32(t75_0);
                                                                    *base.add(12).cast::<u8>() =
                                                                        (_rt::as_i32(t75_1)) as u8;
                                                                    *base.add(13).cast::<u8>() =
                                                                        (_rt::as_i32(t75_2)) as u8;
                                                                    *base.add(14).cast::<u8>() =
                                                                        (_rt::as_i32(t75_3)) as u8;
                                                                    *base.add(15).cast::<u8>() =
                                                                        (_rt::as_i32(t75_4)) as u8;
                                                                    *base.add(16).cast::<u8>() =
                                                                        (_rt::as_i32(t75_5)) as u8;
                                                                    *base.add(20).cast::<i32>() =
                                                                        _rt::as_i32(t75_6);
                                                                    *base.add(24).cast::<i32>() =
                                                                        _rt::as_i32(t75_7);
                                                                }
                                                                V121::Date(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (13i32) as u8;
                                                                    let (t76_0, t76_1, t76_2) = e;
                                                                    *base.add(8).cast::<i32>() =
                                                                        _rt::as_i32(t76_0);
                                                                    *base.add(12).cast::<u8>() =
                                                                        (_rt::as_i32(t76_1)) as u8;
                                                                    *base.add(13).cast::<u8>() =
                                                                        (_rt::as_i32(t76_2)) as u8;
                                                                }
                                                                V121::Time(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (14i32) as u8;
                                                                    let (
                                                                        t77_0,
                                                                        t77_1,
                                                                        t77_2,
                                                                        t77_3,
                                                                    ) = e;
                                                                    *base.add(8).cast::<u8>() =
                                                                        (_rt::as_i32(t77_0)) as u8;
                                                                    *base.add(9).cast::<u8>() =
                                                                        (_rt::as_i32(t77_1)) as u8;
                                                                    *base.add(10).cast::<u8>() =
                                                                        (_rt::as_i32(t77_2)) as u8;
                                                                    *base.add(12).cast::<i32>() =
                                                                        _rt::as_i32(t77_3);
                                                                }
                                                                V121::Timetz(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (15i32) as u8;
                                                                    let (
                                                                        t78_0,
                                                                        t78_1,
                                                                        t78_2,
                                                                        t78_3,
                                                                        t78_4,
                                                                    ) = e;
                                                                    *base.add(8).cast::<u8>() =
                                                                        (_rt::as_i32(t78_0)) as u8;
                                                                    *base.add(9).cast::<u8>() =
                                                                        (_rt::as_i32(t78_1)) as u8;
                                                                    *base.add(10).cast::<u8>() =
                                                                        (_rt::as_i32(t78_2)) as u8;
                                                                    *base.add(12).cast::<i32>() =
                                                                        _rt::as_i32(t78_3);
                                                                    *base.add(16).cast::<i32>() =
                                                                        _rt::as_i32(t78_4);
                                                                }
                                                                V121::Interval(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (16i32) as u8;
                                                                    let (t79_0, t79_1, t79_2) = e;
                                                                    *base.add(8).cast::<i32>() =
                                                                        _rt::as_i32(t79_0);
                                                                    *base.add(12).cast::<i32>() =
                                                                        _rt::as_i32(t79_1);
                                                                    *base.add(16).cast::<i64>() =
                                                                        _rt::as_i64(t79_2);
                                                                }
                                                                V121::Bytea(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (17i32) as u8;
                                                                    let vec80 =
                                                                        (e).into_boxed_slice();
                                                                    let ptr80 =
                                                                        vec80.as_ptr().cast::<u8>();
                                                                    let len80 = vec80.len();
                                                                    ::core::mem::forget(vec80);
                                                                    *base.add(12).cast::<usize>() =
                                                                        len80;
                                                                    *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>() =
                                                                        ptr80.cast_mut();
                                                                }
                                                                V121::Json(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (18i32) as u8;
                                                                    let vec81 = (e.into_bytes())
                                                                        .into_boxed_slice();
                                                                    let ptr81 =
                                                                        vec81.as_ptr().cast::<u8>();
                                                                    let len81 = vec81.len();
                                                                    ::core::mem::forget(vec81);
                                                                    *base.add(12).cast::<usize>() =
                                                                        len81;
                                                                    *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>() =
                                                                        ptr81.cast_mut();
                                                                }
                                                                V121::Jsonb(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (19i32) as u8;
                                                                    let vec82 = (e.into_bytes())
                                                                        .into_boxed_slice();
                                                                    let ptr82 =
                                                                        vec82.as_ptr().cast::<u8>();
                                                                    let len82 = vec82.len();
                                                                    ::core::mem::forget(vec82);
                                                                    *base.add(12).cast::<usize>() =
                                                                        len82;
                                                                    *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>() =
                                                                        ptr82.cast_mut();
                                                                }
                                                                V121::Xml(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (20i32) as u8;
                                                                    let vec83 = (e.into_bytes())
                                                                        .into_boxed_slice();
                                                                    let ptr83 =
                                                                        vec83.as_ptr().cast::<u8>();
                                                                    let len83 = vec83.len();
                                                                    ::core::mem::forget(vec83);
                                                                    *base.add(12).cast::<usize>() =
                                                                        len83;
                                                                    *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>() =
                                                                        ptr83.cast_mut();
                                                                }
                                                                V121::Uuid(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (21i32) as u8;
                                                                    let (t84_0, t84_1) = e;
                                                                    *base.add(8).cast::<i64>() =
                                                                        _rt::as_i64(t84_0);
                                                                    *base.add(16).cast::<i64>() =
                                                                        _rt::as_i64(t84_1);
                                                                }
                                                                V121::Inet(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (22i32) as u8;
                                                                    use super::super::super::super::wasi::rdbms::postgres::IpAddress as V87;
                                                                    match e {
                                                                        V87::Ipv4(e) => {
                                                                            *base
                                                                                .add(8)
                                                                                .cast::<u8>() =
                                                                                (0i32) as u8;
                                                                            let (
                                                                                t85_0,
                                                                                t85_1,
                                                                                t85_2,
                                                                                t85_3,
                                                                            ) = e;
                                                                            *base
                                                                                .add(10)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(t85_0))
                                                                                    as u8;
                                                                            *base
                                                                                .add(11)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(t85_1))
                                                                                    as u8;
                                                                            *base
                                                                                .add(12)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(t85_2))
                                                                                    as u8;
                                                                            *base
                                                                                .add(13)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(t85_3))
                                                                                    as u8;
                                                                        }
                                                                        V87::Ipv6(e) => {
                                                                            *base
                                                                                .add(8)
                                                                                .cast::<u8>() =
                                                                                (1i32) as u8;
                                                                            let (
                                                                                t86_0,
                                                                                t86_1,
                                                                                t86_2,
                                                                                t86_3,
                                                                                t86_4,
                                                                                t86_5,
                                                                                t86_6,
                                                                                t86_7,
                                                                            ) = e;
                                                                            *base
                                                                                .add(10)
                                                                                .cast::<u16>() =
                                                                                (_rt::as_i32(t86_0))
                                                                                    as u16;
                                                                            *base
                                                                                .add(12)
                                                                                .cast::<u16>() =
                                                                                (_rt::as_i32(t86_1))
                                                                                    as u16;
                                                                            *base
                                                                                .add(14)
                                                                                .cast::<u16>() =
                                                                                (_rt::as_i32(t86_2))
                                                                                    as u16;
                                                                            *base
                                                                                .add(16)
                                                                                .cast::<u16>() =
                                                                                (_rt::as_i32(t86_3))
                                                                                    as u16;
                                                                            *base
                                                                                .add(18)
                                                                                .cast::<u16>() =
                                                                                (_rt::as_i32(t86_4))
                                                                                    as u16;
                                                                            *base
                                                                                .add(20)
                                                                                .cast::<u16>() =
                                                                                (_rt::as_i32(t86_5))
                                                                                    as u16;
                                                                            *base
                                                                                .add(22)
                                                                                .cast::<u16>() =
                                                                                (_rt::as_i32(t86_6))
                                                                                    as u16;
                                                                            *base
                                                                                .add(24)
                                                                                .cast::<u16>() =
                                                                                (_rt::as_i32(t86_7))
                                                                                    as u16;
                                                                        }
                                                                    }
                                                                }
                                                                V121::Cidr(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (23i32) as u8;
                                                                    use super::super::super::super::wasi::rdbms::postgres::IpAddress as V90;
                                                                    match e {
                                                                        V90::Ipv4(e) => {
                                                                            *base
                                                                                .add(8)
                                                                                .cast::<u8>() =
                                                                                (0i32) as u8;
                                                                            let (
                                                                                t88_0,
                                                                                t88_1,
                                                                                t88_2,
                                                                                t88_3,
                                                                            ) = e;
                                                                            *base
                                                                                .add(10)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(t88_0))
                                                                                    as u8;
                                                                            *base
                                                                                .add(11)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(t88_1))
                                                                                    as u8;
                                                                            *base
                                                                                .add(12)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(t88_2))
                                                                                    as u8;
                                                                            *base
                                                                                .add(13)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(t88_3))
                                                                                    as u8;
                                                                        }
                                                                        V90::Ipv6(e) => {
                                                                            *base
                                                                                .add(8)
                                                                                .cast::<u8>() =
                                                                                (1i32) as u8;
                                                                            let (
                                                                                t89_0,
                                                                                t89_1,
                                                                                t89_2,
                                                                                t89_3,
                                                                                t89_4,
                                                                                t89_5,
                                                                                t89_6,
                                                                                t89_7,
                                                                            ) = e;
                                                                            *base
                                                                                .add(10)
                                                                                .cast::<u16>() =
                                                                                (_rt::as_i32(t89_0))
                                                                                    as u16;
                                                                            *base
                                                                                .add(12)
                                                                                .cast::<u16>() =
                                                                                (_rt::as_i32(t89_1))
                                                                                    as u16;
                                                                            *base
                                                                                .add(14)
                                                                                .cast::<u16>() =
                                                                                (_rt::as_i32(t89_2))
                                                                                    as u16;
                                                                            *base
                                                                                .add(16)
                                                                                .cast::<u16>() =
                                                                                (_rt::as_i32(t89_3))
                                                                                    as u16;
                                                                            *base
                                                                                .add(18)
                                                                                .cast::<u16>() =
                                                                                (_rt::as_i32(t89_4))
                                                                                    as u16;
                                                                            *base
                                                                                .add(20)
                                                                                .cast::<u16>() =
                                                                                (_rt::as_i32(t89_5))
                                                                                    as u16;
                                                                            *base
                                                                                .add(22)
                                                                                .cast::<u16>() =
                                                                                (_rt::as_i32(t89_6))
                                                                                    as u16;
                                                                            *base
                                                                                .add(24)
                                                                                .cast::<u16>() =
                                                                                (_rt::as_i32(t89_7))
                                                                                    as u16;
                                                                        }
                                                                    }
                                                                }
                                                                V121::Macaddr(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (24i32) as u8;
                                                                    let (
                                                                        t91_0,
                                                                        t91_1,
                                                                        t91_2,
                                                                        t91_3,
                                                                        t91_4,
                                                                        t91_5,
                                                                    ) = e;
                                                                    *base.add(8).cast::<u8>() =
                                                                        (_rt::as_i32(t91_0)) as u8;
                                                                    *base.add(9).cast::<u8>() =
                                                                        (_rt::as_i32(t91_1)) as u8;
                                                                    *base.add(10).cast::<u8>() =
                                                                        (_rt::as_i32(t91_2)) as u8;
                                                                    *base.add(11).cast::<u8>() =
                                                                        (_rt::as_i32(t91_3)) as u8;
                                                                    *base.add(12).cast::<u8>() =
                                                                        (_rt::as_i32(t91_4)) as u8;
                                                                    *base.add(13).cast::<u8>() =
                                                                        (_rt::as_i32(t91_5)) as u8;
                                                                }
                                                                V121::Bit(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (25i32) as u8;
                                                                    let vec92 = e;
                                                                    let len92 = vec92.len();
                                                                    let layout92 = _rt::alloc::Layout::from_size_align_unchecked(vec92.len() * 1, 1);
                                                                    let result92 = if layout92
                                                                        .size()
                                                                        != 0
                                                                    {
                                                                        let ptr =
                                                                            _rt::alloc::alloc(
                                                                                layout92,
                                                                            )
                                                                            .cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout92);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        {
                                                                            ::core::ptr::null_mut()
                                                                        }
                                                                    };
                                                                    for (i, e) in vec92
                                                                        .into_iter()
                                                                        .enumerate()
                                                                    {
                                                                        let base =
                                                                            result92.add(i * 1);
                                                                        {
                                                                            *base
                                                                                .add(0)
                                                                                .cast::<u8>() =
                                                                                (match e {
                                                                                    true => 1,
                                                                                    false => 0,
                                                                                })
                                                                                    as u8;
                                                                        }
                                                                    }
                                                                    *base.add(12).cast::<usize>() =
                                                                        len92;
                                                                    *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>() =
                                                                        result92;
                                                                }
                                                                V121::Varbit(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (26i32) as u8;
                                                                    let vec93 = e;
                                                                    let len93 = vec93.len();
                                                                    let layout93 = _rt::alloc::Layout::from_size_align_unchecked(vec93.len() * 1, 1);
                                                                    let result93 = if layout93
                                                                        .size()
                                                                        != 0
                                                                    {
                                                                        let ptr =
                                                                            _rt::alloc::alloc(
                                                                                layout93,
                                                                            )
                                                                            .cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout93);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        {
                                                                            ::core::ptr::null_mut()
                                                                        }
                                                                    };
                                                                    for (i, e) in vec93
                                                                        .into_iter()
                                                                        .enumerate()
                                                                    {
                                                                        let base =
                                                                            result93.add(i * 1);
                                                                        {
                                                                            *base
                                                                                .add(0)
                                                                                .cast::<u8>() =
                                                                                (match e {
                                                                                    true => 1,
                                                                                    false => 0,
                                                                                })
                                                                                    as u8;
                                                                        }
                                                                    }
                                                                    *base.add(12).cast::<usize>() =
                                                                        len93;
                                                                    *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>() =
                                                                        result93;
                                                                }
                                                                V121::Int4range(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (27i32) as u8;
                                                                    let (t94_0, t94_1) = e;
                                                                    match t94_0 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(8)
                                                                                .cast::<u8>() =
                                                                                (1i32) as u8;
                                                                            let (t95_0, t95_1) = e;
                                                                            *base
                                                                                .add(12)
                                                                                .cast::<i32>() =
                                                                                _rt::as_i32(t95_0);
                                                                            *base
                                                                                .add(16)
                                                                                .cast::<u8>() =
                                                                                (match t95_1 {
                                                                                    true => 1,
                                                                                    false => 0,
                                                                                })
                                                                                    as u8;
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(8)
                                                                                .cast::<u8>() =
                                                                                (0i32) as u8;
                                                                        }
                                                                    };
                                                                    match t94_1 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(20)
                                                                                .cast::<u8>() =
                                                                                (1i32) as u8;
                                                                            let (t96_0, t96_1) = e;
                                                                            *base
                                                                                .add(24)
                                                                                .cast::<i32>() =
                                                                                _rt::as_i32(t96_0);
                                                                            *base
                                                                                .add(28)
                                                                                .cast::<u8>() =
                                                                                (match t96_1 {
                                                                                    true => 1,
                                                                                    false => 0,
                                                                                })
                                                                                    as u8;
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(20)
                                                                                .cast::<u8>() =
                                                                                (0i32) as u8;
                                                                        }
                                                                    };
                                                                }
                                                                V121::Int8range(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (28i32) as u8;
                                                                    let (t97_0, t97_1) = e;
                                                                    match t97_0 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(8)
                                                                                .cast::<u8>() =
                                                                                (1i32) as u8;
                                                                            let (t98_0, t98_1) = e;
                                                                            *base
                                                                                .add(16)
                                                                                .cast::<i64>() =
                                                                                _rt::as_i64(t98_0);
                                                                            *base
                                                                                .add(24)
                                                                                .cast::<u8>() =
                                                                                (match t98_1 {
                                                                                    true => 1,
                                                                                    false => 0,
                                                                                })
                                                                                    as u8;
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(8)
                                                                                .cast::<u8>() =
                                                                                (0i32) as u8;
                                                                        }
                                                                    };
                                                                    match t97_1 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(32)
                                                                                .cast::<u8>() =
                                                                                (1i32) as u8;
                                                                            let (t99_0, t99_1) = e;
                                                                            *base
                                                                                .add(40)
                                                                                .cast::<i64>() =
                                                                                _rt::as_i64(t99_0);
                                                                            *base
                                                                                .add(48)
                                                                                .cast::<u8>() =
                                                                                (match t99_1 {
                                                                                    true => 1,
                                                                                    false => 0,
                                                                                })
                                                                                    as u8;
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(32)
                                                                                .cast::<u8>() =
                                                                                (0i32) as u8;
                                                                        }
                                                                    };
                                                                }
                                                                V121::Numrange(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (29i32) as u8;
                                                                    let (t100_0, t100_1) = e;
                                                                    match t100_0 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(8)
                                                                                .cast::<u8>() =
                                                                                (1i32) as u8;
                                                                            let (t101_0, t101_1) =
                                                                                e;
                                                                            let vec102 = (t101_0
                                                                                .into_bytes())
                                                                            .into_boxed_slice();
                                                                            let ptr102 = vec102
                                                                                .as_ptr()
                                                                                .cast::<u8>();
                                                                            let len102 =
                                                                                vec102.len();
                                                                            ::core::mem::forget(
                                                                                vec102,
                                                                            );
                                                                            *base
                                                                                .add(16)
                                                                                .cast::<usize>() =
                                                                                len102;
                                                                            *base
                                                                                .add(12)
                                                                                .cast::<*mut u8>(
                                                                                ) =
                                                                                ptr102.cast_mut();
                                                                            *base
                                                                                .add(20)
                                                                                .cast::<u8>() =
                                                                                (match t101_1 {
                                                                                    true => 1,
                                                                                    false => 0,
                                                                                })
                                                                                    as u8;
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(8)
                                                                                .cast::<u8>() =
                                                                                (0i32) as u8;
                                                                        }
                                                                    };
                                                                    match t100_1 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(24)
                                                                                .cast::<u8>() =
                                                                                (1i32) as u8;
                                                                            let (t103_0, t103_1) =
                                                                                e;
                                                                            let vec104 = (t103_0
                                                                                .into_bytes())
                                                                            .into_boxed_slice();
                                                                            let ptr104 = vec104
                                                                                .as_ptr()
                                                                                .cast::<u8>();
                                                                            let len104 =
                                                                                vec104.len();
                                                                            ::core::mem::forget(
                                                                                vec104,
                                                                            );
                                                                            *base
                                                                                .add(32)
                                                                                .cast::<usize>() =
                                                                                len104;
                                                                            *base
                                                                                .add(28)
                                                                                .cast::<*mut u8>(
                                                                                ) =
                                                                                ptr104.cast_mut();
                                                                            *base
                                                                                .add(36)
                                                                                .cast::<u8>() =
                                                                                (match t103_1 {
                                                                                    true => 1,
                                                                                    false => 0,
                                                                                })
                                                                                    as u8;
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(24)
                                                                                .cast::<u8>() =
                                                                                (0i32) as u8;
                                                                        }
                                                                    };
                                                                }
                                                                V121::Tsrange(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (30i32) as u8;
                                                                    let (t105_0, t105_1) = e;
                                                                    match t105_0 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(8)
                                                                                .cast::<u8>() =
                                                                                (1i32) as u8;
                                                                            let (t106_0, t106_1) =
                                                                                e;
                                                                            let (
                                                                                t107_0,
                                                                                t107_1,
                                                                                t107_2,
                                                                                t107_3,
                                                                                t107_4,
                                                                                t107_5,
                                                                                t107_6,
                                                                            ) = t106_0;
                                                                            *base
                                                                                .add(12)
                                                                                .cast::<i32>() =
                                                                                _rt::as_i32(t107_0);
                                                                            *base
                                                                                .add(16)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    t107_1,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(17)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    t107_2,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(18)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    t107_3,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(19)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    t107_4,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(20)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    t107_5,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(24)
                                                                                .cast::<i32>() =
                                                                                _rt::as_i32(t107_6);
                                                                            *base
                                                                                .add(28)
                                                                                .cast::<u8>() =
                                                                                (match t106_1 {
                                                                                    true => 1,
                                                                                    false => 0,
                                                                                })
                                                                                    as u8;
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(8)
                                                                                .cast::<u8>() =
                                                                                (0i32) as u8;
                                                                        }
                                                                    };
                                                                    match t105_1 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(32)
                                                                                .cast::<u8>() =
                                                                                (1i32) as u8;
                                                                            let (t108_0, t108_1) =
                                                                                e;
                                                                            let (
                                                                                t109_0,
                                                                                t109_1,
                                                                                t109_2,
                                                                                t109_3,
                                                                                t109_4,
                                                                                t109_5,
                                                                                t109_6,
                                                                            ) = t108_0;
                                                                            *base
                                                                                .add(36)
                                                                                .cast::<i32>() =
                                                                                _rt::as_i32(t109_0);
                                                                            *base
                                                                                .add(40)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    t109_1,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(41)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    t109_2,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(42)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    t109_3,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(43)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    t109_4,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(44)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    t109_5,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(48)
                                                                                .cast::<i32>() =
                                                                                _rt::as_i32(t109_6);
                                                                            *base
                                                                                .add(52)
                                                                                .cast::<u8>() =
                                                                                (match t108_1 {
                                                                                    true => 1,
                                                                                    false => 0,
                                                                                })
                                                                                    as u8;
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(32)
                                                                                .cast::<u8>() =
                                                                                (0i32) as u8;
                                                                        }
                                                                    };
                                                                }
                                                                V121::Tstzrange(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (31i32) as u8;
                                                                    let (t110_0, t110_1) = e;
                                                                    match t110_0 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(8)
                                                                                .cast::<u8>() =
                                                                                (1i32) as u8;
                                                                            let (t111_0, t111_1) =
                                                                                e;
                                                                            let (
                                                                                t112_0,
                                                                                t112_1,
                                                                                t112_2,
                                                                                t112_3,
                                                                                t112_4,
                                                                                t112_5,
                                                                                t112_6,
                                                                                t112_7,
                                                                            ) = t111_0;
                                                                            *base
                                                                                .add(12)
                                                                                .cast::<i32>() =
                                                                                _rt::as_i32(t112_0);
                                                                            *base
                                                                                .add(16)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    t112_1,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(17)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    t112_2,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(18)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    t112_3,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(19)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    t112_4,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(20)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    t112_5,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(24)
                                                                                .cast::<i32>() =
                                                                                _rt::as_i32(t112_6);
                                                                            *base
                                                                                .add(28)
                                                                                .cast::<i32>() =
                                                                                _rt::as_i32(t112_7);
                                                                            *base
                                                                                .add(32)
                                                                                .cast::<u8>() =
                                                                                (match t111_1 {
                                                                                    true => 1,
                                                                                    false => 0,
                                                                                })
                                                                                    as u8;
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(8)
                                                                                .cast::<u8>() =
                                                                                (0i32) as u8;
                                                                        }
                                                                    };
                                                                    match t110_1 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(36)
                                                                                .cast::<u8>() =
                                                                                (1i32) as u8;
                                                                            let (t113_0, t113_1) =
                                                                                e;
                                                                            let (
                                                                                t114_0,
                                                                                t114_1,
                                                                                t114_2,
                                                                                t114_3,
                                                                                t114_4,
                                                                                t114_5,
                                                                                t114_6,
                                                                                t114_7,
                                                                            ) = t113_0;
                                                                            *base
                                                                                .add(40)
                                                                                .cast::<i32>() =
                                                                                _rt::as_i32(t114_0);
                                                                            *base
                                                                                .add(44)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    t114_1,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(45)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    t114_2,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(46)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    t114_3,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(47)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    t114_4,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(48)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    t114_5,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(52)
                                                                                .cast::<i32>() =
                                                                                _rt::as_i32(t114_6);
                                                                            *base
                                                                                .add(56)
                                                                                .cast::<i32>() =
                                                                                _rt::as_i32(t114_7);
                                                                            *base
                                                                                .add(60)
                                                                                .cast::<u8>() =
                                                                                (match t113_1 {
                                                                                    true => 1,
                                                                                    false => 0,
                                                                                })
                                                                                    as u8;
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(36)
                                                                                .cast::<u8>() =
                                                                                (0i32) as u8;
                                                                        }
                                                                    };
                                                                }
                                                                V121::Daterange(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (32i32) as u8;
                                                                    let (t115_0, t115_1) = e;
                                                                    match t115_0 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(8)
                                                                                .cast::<u8>() =
                                                                                (1i32) as u8;
                                                                            let (t116_0, t116_1) =
                                                                                e;
                                                                            let (
                                                                                t117_0,
                                                                                t117_1,
                                                                                t117_2,
                                                                            ) = t116_0;
                                                                            *base
                                                                                .add(12)
                                                                                .cast::<i32>() =
                                                                                _rt::as_i32(t117_0);
                                                                            *base
                                                                                .add(16)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    t117_1,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(17)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    t117_2,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(20)
                                                                                .cast::<u8>() =
                                                                                (match t116_1 {
                                                                                    true => 1,
                                                                                    false => 0,
                                                                                })
                                                                                    as u8;
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(8)
                                                                                .cast::<u8>() =
                                                                                (0i32) as u8;
                                                                        }
                                                                    };
                                                                    match t115_1 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(24)
                                                                                .cast::<u8>() =
                                                                                (1i32) as u8;
                                                                            let (t118_0, t118_1) =
                                                                                e;
                                                                            let (
                                                                                t119_0,
                                                                                t119_1,
                                                                                t119_2,
                                                                            ) = t118_0;
                                                                            *base
                                                                                .add(28)
                                                                                .cast::<i32>() =
                                                                                _rt::as_i32(t119_0);
                                                                            *base
                                                                                .add(32)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    t119_1,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(33)
                                                                                .cast::<u8>() =
                                                                                (_rt::as_i32(
                                                                                    t119_2,
                                                                                ))
                                                                                    as u8;
                                                                            *base
                                                                                .add(36)
                                                                                .cast::<u8>() =
                                                                                (match t118_1 {
                                                                                    true => 1,
                                                                                    false => 0,
                                                                                })
                                                                                    as u8;
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(24)
                                                                                .cast::<u8>() =
                                                                                (0i32) as u8;
                                                                        }
                                                                    };
                                                                }
                                                                V121::Oid(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (33i32) as u8;
                                                                    *base.add(8).cast::<i32>() =
                                                                        _rt::as_i32(e);
                                                                }
                                                                V121::CustomEnum(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (34i32) as u8;
                                                                    let vec120 = (e.into_bytes())
                                                                        .into_boxed_slice();
                                                                    let ptr120 = vec120
                                                                        .as_ptr()
                                                                        .cast::<u8>();
                                                                    let len120 = vec120.len();
                                                                    ::core::mem::forget(vec120);
                                                                    *base.add(12).cast::<usize>() =
                                                                        len120;
                                                                    *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>() =
                                                                        ptr120.cast_mut();
                                                                }
                                                                V121::Null => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (35i32) as u8;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    *base.add(12).cast::<usize>() = len122;
                                                    *base.add(8).cast::<*mut u8>() = result122;
                                                }
                                            }
                                        }
                                    }
                                    *base.add(4).cast::<usize>() = len124;
                                    *base.add(0).cast::<*mut u8>() = result124;
                                }
                            }
                            *ptr6.add(16).cast::<usize>() = len125;
                            *ptr6.add(12).cast::<*mut u8>() = result125;
                        }
                        Err(e) => {
                            *ptr6.add(0).cast::<u8>() = (1i32) as u8;
                            let vec126 = (e.into_bytes()).into_boxed_slice();
                            let ptr126 = vec126.as_ptr().cast::<u8>();
                            let len126 = vec126.len();
                            ::core::mem::forget(vec126);
                            *ptr6.add(8).cast::<usize>() = len126;
                            *ptr6.add(4).cast::<*mut u8>() = ptr126.cast_mut();
                        }
                    };
                    ptr6
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_postgres_query<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l12 = *arg0.add(4).cast::<*mut u8>();
                            let l13 = *arg0.add(8).cast::<usize>();
                            let base14 = l12;
                            let len14 = l13;
                            for i in 0..len14 {
                                let base = base14.add(i * 40);
                                {
                                    let l1 = *base.add(8).cast::<*mut u8>();
                                    let l2 = *base.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l1, l2, 1);
                                    let l3 = i32::from(*base.add(16).cast::<u8>());
                                    match l3 {
                                        0 => {
                                            let l4 = i32::from(*base.add(20).cast::<u8>());
                                            match l4 {
                                                0 => (),
                                                1 => (),
                                                2 => (),
                                                3 => (),
                                                4 => (),
                                                5 => (),
                                                6 => (),
                                                7 => (),
                                                8 => (),
                                                9 => (),
                                                10 => (),
                                                11 => (),
                                                12 => (),
                                                13 => (),
                                                14 => (),
                                                15 => (),
                                                16 => (),
                                                17 => (),
                                                18 => (),
                                                19 => (),
                                                20 => (),
                                                21 => (),
                                                22 => (),
                                                23 => (),
                                                24 => (),
                                                25 => (),
                                                26 => (),
                                                27 => (),
                                                28 => (),
                                                29 => (),
                                                30 => (),
                                                31 => (),
                                                32 => (),
                                                33 => (),
                                                _ => {
                                                    let l5 = *base.add(24).cast::<*mut u8>();
                                                    let l6 = *base.add(28).cast::<usize>();
                                                    _rt::cabi_dealloc(l5, l6, 1);
                                                }
                                            }
                                        }
                                        _ => {
                                            let l7 = i32::from(*base.add(20).cast::<u8>());
                                            match l7 {
                                                0 => (),
                                                1 => (),
                                                2 => (),
                                                3 => (),
                                                4 => (),
                                                5 => (),
                                                6 => (),
                                                7 => (),
                                                8 => (),
                                                9 => (),
                                                10 => (),
                                                11 => (),
                                                12 => (),
                                                13 => (),
                                                14 => (),
                                                15 => (),
                                                16 => (),
                                                17 => (),
                                                18 => (),
                                                19 => (),
                                                20 => (),
                                                21 => (),
                                                22 => (),
                                                23 => (),
                                                24 => (),
                                                25 => (),
                                                26 => (),
                                                27 => (),
                                                28 => (),
                                                29 => (),
                                                30 => (),
                                                31 => (),
                                                32 => (),
                                                33 => (),
                                                _ => {
                                                    let l8 = *base.add(24).cast::<*mut u8>();
                                                    let l9 = *base.add(28).cast::<usize>();
                                                    _rt::cabi_dealloc(l8, l9, 1);
                                                }
                                            }
                                        }
                                    }
                                    let l10 = *base.add(32).cast::<*mut u8>();
                                    let l11 = *base.add(36).cast::<usize>();
                                    _rt::cabi_dealloc(l10, l11, 1);
                                }
                            }
                            _rt::cabi_dealloc(base14, len14 * 40, 8);
                            let l86 = *arg0.add(12).cast::<*mut u8>();
                            let l87 = *arg0.add(16).cast::<usize>();
                            let base88 = l86;
                            let len88 = l87;
                            for i in 0..len88 {
                                let base = base88.add(i * 8);
                                {
                                    let l83 = *base.add(0).cast::<*mut u8>();
                                    let l84 = *base.add(4).cast::<usize>();
                                    let base85 = l83;
                                    let len85 = l84;
                                    for i in 0..len85 {
                                        let base = base85.add(i * 72);
                                        {
                                            let l15 = i32::from(*base.add(0).cast::<u8>());
                                            match l15 {
                                                0 => {
                                                    let l16 = i32::from(*base.add(8).cast::<u8>());
                                                    match l16 {
                                                        0 => (),
                                                        1 => (),
                                                        2 => (),
                                                        3 => (),
                                                        4 => (),
                                                        5 => (),
                                                        6 => {
                                                            let l17 =
                                                                *base.add(16).cast::<*mut u8>();
                                                            let l18 = *base.add(20).cast::<usize>();
                                                            _rt::cabi_dealloc(l17, l18, 1);
                                                        }
                                                        7 => (),
                                                        8 => {
                                                            let l19 =
                                                                *base.add(16).cast::<*mut u8>();
                                                            let l20 = *base.add(20).cast::<usize>();
                                                            _rt::cabi_dealloc(l19, l20, 1);
                                                        }
                                                        9 => {
                                                            let l21 =
                                                                *base.add(16).cast::<*mut u8>();
                                                            let l22 = *base.add(20).cast::<usize>();
                                                            _rt::cabi_dealloc(l21, l22, 1);
                                                        }
                                                        10 => {
                                                            let l23 =
                                                                *base.add(16).cast::<*mut u8>();
                                                            let l24 = *base.add(20).cast::<usize>();
                                                            _rt::cabi_dealloc(l23, l24, 1);
                                                        }
                                                        11 => (),
                                                        12 => (),
                                                        13 => (),
                                                        14 => (),
                                                        15 => (),
                                                        16 => (),
                                                        17 => {
                                                            let l25 =
                                                                *base.add(16).cast::<*mut u8>();
                                                            let l26 = *base.add(20).cast::<usize>();
                                                            let base27 = l25;
                                                            let len27 = l26;
                                                            _rt::cabi_dealloc(base27, len27 * 1, 1);
                                                        }
                                                        18 => {
                                                            let l28 =
                                                                *base.add(16).cast::<*mut u8>();
                                                            let l29 = *base.add(20).cast::<usize>();
                                                            _rt::cabi_dealloc(l28, l29, 1);
                                                        }
                                                        19 => {
                                                            let l30 =
                                                                *base.add(16).cast::<*mut u8>();
                                                            let l31 = *base.add(20).cast::<usize>();
                                                            _rt::cabi_dealloc(l30, l31, 1);
                                                        }
                                                        20 => {
                                                            let l32 =
                                                                *base.add(16).cast::<*mut u8>();
                                                            let l33 = *base.add(20).cast::<usize>();
                                                            _rt::cabi_dealloc(l32, l33, 1);
                                                        }
                                                        21 => (),
                                                        22 => (),
                                                        23 => (),
                                                        24 => (),
                                                        25 => {
                                                            let l34 =
                                                                *base.add(16).cast::<*mut u8>();
                                                            let l35 = *base.add(20).cast::<usize>();
                                                            let base36 = l34;
                                                            let len36 = l35;
                                                            _rt::cabi_dealloc(base36, len36 * 1, 1);
                                                        }
                                                        26 => {
                                                            let l37 =
                                                                *base.add(16).cast::<*mut u8>();
                                                            let l38 = *base.add(20).cast::<usize>();
                                                            let base39 = l37;
                                                            let len39 = l38;
                                                            _rt::cabi_dealloc(base39, len39 * 1, 1);
                                                        }
                                                        27 => (),
                                                        28 => (),
                                                        29 => {
                                                            let l40 = i32::from(
                                                                *base.add(16).cast::<u8>(),
                                                            );
                                                            match l40 {
                                                                0 => (),
                                                                _ => {
                                                                    let l41 = *base
                                                                        .add(20)
                                                                        .cast::<*mut u8>();
                                                                    let l42 = *base
                                                                        .add(24)
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l41, l42, 1);
                                                                }
                                                            }
                                                            let l43 = i32::from(
                                                                *base.add(32).cast::<u8>(),
                                                            );
                                                            match l43 {
                                                                0 => (),
                                                                _ => {
                                                                    let l44 = *base
                                                                        .add(36)
                                                                        .cast::<*mut u8>();
                                                                    let l45 = *base
                                                                        .add(40)
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l44, l45, 1);
                                                                }
                                                            }
                                                        }
                                                        30 => (),
                                                        31 => (),
                                                        32 => (),
                                                        33 => (),
                                                        34 => {
                                                            let l46 =
                                                                *base.add(16).cast::<*mut u8>();
                                                            let l47 = *base.add(20).cast::<usize>();
                                                            _rt::cabi_dealloc(l46, l47, 1);
                                                        }
                                                        _ => (),
                                                    }
                                                }
                                                _ => {
                                                    let l80 = *base.add(8).cast::<*mut u8>();
                                                    let l81 = *base.add(12).cast::<usize>();
                                                    let base82 = l80;
                                                    let len82 = l81;
                                                    for i in 0..len82 {
                                                        let base = base82.add(i * 64);
                                                        {
                                                            let l48 = i32::from(
                                                                *base.add(0).cast::<u8>(),
                                                            );
                                                            match l48 {
                                                                0 => (),
                                                                1 => (),
                                                                2 => (),
                                                                3 => (),
                                                                4 => (),
                                                                5 => (),
                                                                6 => {
                                                                    let l49 = *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>();
                                                                    let l50 = *base
                                                                        .add(12)
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l49, l50, 1);
                                                                }
                                                                7 => (),
                                                                8 => {
                                                                    let l51 = *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>();
                                                                    let l52 = *base
                                                                        .add(12)
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l51, l52, 1);
                                                                }
                                                                9 => {
                                                                    let l53 = *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>();
                                                                    let l54 = *base
                                                                        .add(12)
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l53, l54, 1);
                                                                }
                                                                10 => {
                                                                    let l55 = *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>();
                                                                    let l56 = *base
                                                                        .add(12)
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l55, l56, 1);
                                                                }
                                                                11 => (),
                                                                12 => (),
                                                                13 => (),
                                                                14 => (),
                                                                15 => (),
                                                                16 => (),
                                                                17 => {
                                                                    let l57 = *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>();
                                                                    let l58 = *base
                                                                        .add(12)
                                                                        .cast::<usize>();
                                                                    let base59 = l57;
                                                                    let len59 = l58;
                                                                    _rt::cabi_dealloc(
                                                                        base59,
                                                                        len59 * 1,
                                                                        1,
                                                                    );
                                                                }
                                                                18 => {
                                                                    let l60 = *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>();
                                                                    let l61 = *base
                                                                        .add(12)
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l60, l61, 1);
                                                                }
                                                                19 => {
                                                                    let l62 = *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>();
                                                                    let l63 = *base
                                                                        .add(12)
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l62, l63, 1);
                                                                }
                                                                20 => {
                                                                    let l64 = *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>();
                                                                    let l65 = *base
                                                                        .add(12)
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l64, l65, 1);
                                                                }
                                                                21 => (),
                                                                22 => (),
                                                                23 => (),
                                                                24 => (),
                                                                25 => {
                                                                    let l66 = *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>();
                                                                    let l67 = *base
                                                                        .add(12)
                                                                        .cast::<usize>();
                                                                    let base68 = l66;
                                                                    let len68 = l67;
                                                                    _rt::cabi_dealloc(
                                                                        base68,
                                                                        len68 * 1,
                                                                        1,
                                                                    );
                                                                }
                                                                26 => {
                                                                    let l69 = *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>();
                                                                    let l70 = *base
                                                                        .add(12)
                                                                        .cast::<usize>();
                                                                    let base71 = l69;
                                                                    let len71 = l70;
                                                                    _rt::cabi_dealloc(
                                                                        base71,
                                                                        len71 * 1,
                                                                        1,
                                                                    );
                                                                }
                                                                27 => (),
                                                                28 => (),
                                                                29 => {
                                                                    let l72 = i32::from(
                                                                        *base.add(8).cast::<u8>(),
                                                                    );
                                                                    match l72 {
                                                                        0 => (),
                                                                        _ => {
                                                                            let l73 = *base
                                                                                .add(12)
                                                                                .cast::<*mut u8>();
                                                                            let l74 = *base
                                                                                .add(16)
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(
                                                                                l73, l74, 1,
                                                                            );
                                                                        }
                                                                    }
                                                                    let l75 = i32::from(
                                                                        *base.add(24).cast::<u8>(),
                                                                    );
                                                                    match l75 {
                                                                        0 => (),
                                                                        _ => {
                                                                            let l76 = *base
                                                                                .add(28)
                                                                                .cast::<*mut u8>();
                                                                            let l77 = *base
                                                                                .add(32)
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(
                                                                                l76, l77, 1,
                                                                            );
                                                                        }
                                                                    }
                                                                }
                                                                30 => (),
                                                                31 => (),
                                                                32 => (),
                                                                33 => (),
                                                                34 => {
                                                                    let l78 = *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>();
                                                                    let l79 = *base
                                                                        .add(12)
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l78, l79, 1);
                                                                }
                                                                _ => (),
                                                            }
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(base82, len82 * 64, 8);
                                                }
                                            }
                                        }
                                    }
                                    _rt::cabi_dealloc(base85, len85 * 72, 8);
                                }
                            }
                            _rt::cabi_dealloc(base88, len88 * 8, 4);
                        }
                        _ => {
                            let l89 = *arg0.add(4).cast::<*mut u8>();
                            let l90 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l89, l90, 1);
                        }
                    }
                }
                pub trait Guest {
                    fn check() -> _rt::String;
                    fn mysql_execute(
                        statement: _rt::String,
                        params: _rt::Vec<_rt::String>,
                    ) -> Result<u64, _rt::String>;
                    fn mysql_query(
                        statement: _rt::String,
                        params: _rt::Vec<_rt::String>,
                    ) -> Result<MysqlQueryResult, _rt::String>;
                    fn postgres_execute(
                        statement: _rt::String,
                        params: _rt::Vec<_rt::String>,
                    ) -> Result<u64, _rt::String>;
                    fn postgres_query(
                        statement: _rt::String,
                        params: _rt::Vec<_rt::String>,
                    ) -> Result<PostgresQueryResult, _rt::String>;
                }
                #[doc(hidden)]

                macro_rules! __export_golem_it_api_cabi{
                                                                        ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

                                                                          #[export_name = "golem:it/api#check"]
                                                                          unsafe extern "C" fn export_check() -> *mut u8 {
                                                                            $($path_to_types)*::_export_check_cabi::<$ty>()
                                                                          }
                                                                          #[export_name = "cabi_post_golem:it/api#check"]
                                                                          unsafe extern "C" fn _post_return_check(arg0: *mut u8,) {
                                                                            $($path_to_types)*::__post_return_check::<$ty>(arg0)
                                                                          }
                                                                          #[export_name = "golem:it/api#mysql-execute"]
                                                                          unsafe extern "C" fn export_mysql_execute(arg0: *mut u8,arg1: usize,arg2: *mut u8,arg3: usize,) -> *mut u8 {
                                                                            $($path_to_types)*::_export_mysql_execute_cabi::<$ty>(arg0, arg1, arg2, arg3)
                                                                          }
                                                                          #[export_name = "cabi_post_golem:it/api#mysql-execute"]
                                                                          unsafe extern "C" fn _post_return_mysql_execute(arg0: *mut u8,) {
                                                                            $($path_to_types)*::__post_return_mysql_execute::<$ty>(arg0)
                                                                          }
                                                                          #[export_name = "golem:it/api#mysql-query"]
                                                                          unsafe extern "C" fn export_mysql_query(arg0: *mut u8,arg1: usize,arg2: *mut u8,arg3: usize,) -> *mut u8 {
                                                                            $($path_to_types)*::_export_mysql_query_cabi::<$ty>(arg0, arg1, arg2, arg3)
                                                                          }
                                                                          #[export_name = "cabi_post_golem:it/api#mysql-query"]
                                                                          unsafe extern "C" fn _post_return_mysql_query(arg0: *mut u8,) {
                                                                            $($path_to_types)*::__post_return_mysql_query::<$ty>(arg0)
                                                                          }
                                                                          #[export_name = "golem:it/api#postgres-execute"]
                                                                          unsafe extern "C" fn export_postgres_execute(arg0: *mut u8,arg1: usize,arg2: *mut u8,arg3: usize,) -> *mut u8 {
                                                                            $($path_to_types)*::_export_postgres_execute_cabi::<$ty>(arg0, arg1, arg2, arg3)
                                                                          }
                                                                          #[export_name = "cabi_post_golem:it/api#postgres-execute"]
                                                                          unsafe extern "C" fn _post_return_postgres_execute(arg0: *mut u8,) {
                                                                            $($path_to_types)*::__post_return_postgres_execute::<$ty>(arg0)
                                                                          }
                                                                          #[export_name = "golem:it/api#postgres-query"]
                                                                          unsafe extern "C" fn export_postgres_query(arg0: *mut u8,arg1: usize,arg2: *mut u8,arg3: usize,) -> *mut u8 {
                                                                            $($path_to_types)*::_export_postgres_query_cabi::<$ty>(arg0, arg1, arg2, arg3)
                                                                          }
                                                                          #[export_name = "cabi_post_golem:it/api#postgres-query"]
                                                                          unsafe extern "C" fn _post_return_postgres_query(arg0: *mut u8,) {
                                                                            $($path_to_types)*::__post_return_postgres_query::<$ty>(arg0)
                                                                          }
                                                                        };);
                                                                      }
                #[doc(hidden)]
                pub(crate) use __export_golem_it_api_cabi;
                #[repr(align(8))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 20]);
                static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 20]);
            }
        }
    }
}
mod _rt {
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;

    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};

    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        // NB: This would ideally be `u32` but it is not. The fact that this has
        // interior mutability is not exposed in the API of this type except for the
        // `take_handle` method which is supposed to in theory be private.
        //
        // This represents, almost all the time, a valid handle value. When it's
        // invalid it's stored as `u32::MAX`.
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }

    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }

    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }

        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }

        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }

    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource")
                .field("handle", &self.handle)
                .finish()
        }
    }

    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    // If this handle was "taken" then don't do anything in the
                    // destructor.
                    u32::MAX => {}

                    // ... but otherwise do actually destroy it with the imported
                    // component model intrinsic as defined through `T`.
                    other => T::drop(other),
                }
            }
        }
    }
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr as *mut u8, layout);
    }
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            core::hint::unreachable_unchecked()
        }
    }

    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }

    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }

    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }

    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }

    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }

    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }

    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }

    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }

    pub fn as_f32<T: AsF32>(t: T) -> f32 {
        t.as_f32()
    }

    pub trait AsF32 {
        fn as_f32(self) -> f32;
    }

    impl<'a, T: Copy + AsF32> AsF32 for &'a T {
        fn as_f32(self) -> f32 {
            (*self).as_f32()
        }
    }

    impl AsF32 for f32 {
        #[inline]
        fn as_f32(self) -> f32 {
            self as f32
        }
    }

    pub fn as_f64<T: AsF64>(t: T) -> f64 {
        t.as_f64()
    }

    pub trait AsF64 {
        fn as_f64(self) -> f64;
    }

    impl<'a, T: Copy + AsF64> AsF64 for &'a T {
        fn as_f64(self) -> f64 {
            (*self).as_f64()
        }
    }

    impl AsF64 for f64 {
        #[inline]
        fn as_f64(self) -> f64 {
            self as f64
        }
    }
    pub use alloc_crate::alloc;

    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    extern crate alloc as alloc_crate;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_rdbms_service_impl {
                                                                ($ty:ident) => (self::export!($ty with_types_in self););
                                                                ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
                                                                $($path_to_types_root)*::exports::golem::it::api::__export_golem_it_api_cabi!($ty with_types_in $($path_to_types_root)*::exports::golem::it::api);
                                                                )
                                                              }
#[doc(inline)]
pub(crate) use __export_rdbms_service_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.25.0:rdbms-service:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 3983] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\x8b\x1e\x01A\x02\x01\
A\x0a\x01BW\x01q\x05\x12connection-failure\x01s\0\x17query-parameter-failure\x01\
s\0\x17query-execution-failure\x01s\0\x16query-response-failure\x01s\0\x05other\x01\
s\0\x04\0\x05error\x03\0\0\x01o\x02ww\x04\0\x04uuid\x03\0\x02\x01o\x04}}}}\x04\0\
\x0cipv4-address\x03\0\x04\x01o\x08{{{{{{{{\x04\0\x0cipv6-address\x03\0\x06\x01q\
\x02\x04ipv4\x01\x05\0\x04ipv6\x01\x07\0\x04\0\x0aip-address\x03\0\x08\x01o\x06}\
}}}}}\x04\0\x0bmac-address\x03\0\x0a\x01o\x03z}}\x04\0\x04date\x03\0\x0c\x01o\x04\
}}}y\x04\0\x04time\x03\0\x0e\x01o\x05}}}yz\x04\0\x06timetz\x03\0\x10\x01o\x07z}}\
}}}y\x04\0\x09timestamp\x03\0\x12\x01o\x08z}}}}}yz\x04\0\x0btimestamptz\x03\0\x14\
\x01o\x03zzx\x04\0\x08interval\x03\0\x16\x01o\x02z\x7f\x01k\x18\x01o\x02\x19\x19\
\x04\0\x09int4range\x03\0\x1a\x01o\x02x\x7f\x01k\x1c\x01o\x02\x1d\x1d\x04\0\x09i\
nt8range\x03\0\x1e\x01o\x02s\x7f\x01k\x20\x01o\x02!!\x04\0\x08numrange\x03\0\"\x01\
o\x02\x13\x7f\x01k$\x01o\x02%%\x04\0\x07tsrange\x03\0&\x01o\x02\x15\x7f\x01k(\x01\
o\x02))\x04\0\x09tstzrange\x03\0*\x01o\x02\x0d\x7f\x01k,\x01o\x02--\x04\0\x09dat\
erange\x03\0.\x01p\x7f\x04\0\x07bit-vec\x03\00\x01q#\x09character\0\0\x04int2\0\0\
\x04int4\0\0\x04int8\0\0\x06float4\0\0\x06float8\0\0\x07numeric\0\0\x07boolean\0\
\0\x04text\0\0\x07varchar\0\0\x06bpchar\0\0\x09timestamp\0\0\x0btimestamptz\0\0\x04\
date\0\0\x04time\0\0\x06timetz\0\0\x08interval\0\0\x05bytea\0\0\x04uuid\0\0\x03x\
ml\0\0\x04json\0\0\x05jsonb\0\0\x04inet\0\0\x04cidr\0\0\x07macaddr\0\0\x03bit\0\0\
\x06varbit\0\0\x09int4range\0\0\x09int8range\0\0\x08numrange\0\0\x07tsrange\0\0\x09\
tstzrange\0\0\x09daterange\0\0\x03oid\0\0\x0bcustom-enum\x01s\0\x04\0\x18db-colu\
mn-type-primitive\x03\02\x01p}\x01q$\x09character\x01~\0\x04int2\x01|\0\x04int4\x01\
z\0\x04int8\x01x\0\x06float4\x01v\0\x06float8\x01u\0\x07numeric\x01s\0\x07boolea\
n\x01\x7f\0\x04text\x01s\0\x07varchar\x01s\0\x06bpchar\x01s\0\x09timestamp\x01\x13\
\0\x0btimestamptz\x01\x15\0\x04date\x01\x0d\0\x04time\x01\x0f\0\x06timetz\x01\x11\
\0\x08interval\x01\x17\0\x05bytea\x014\0\x04json\x01s\0\x05jsonb\x01s\0\x03xml\x01\
s\0\x04uuid\x01\x03\0\x04inet\x01\x09\0\x04cidr\x01\x09\0\x07macaddr\x01\x0b\0\x03\
bit\x011\0\x06varbit\x011\0\x09int4range\x01\x1b\0\x09int8range\x01\x1f\0\x08num\
range\x01#\0\x07tsrange\x01'\0\x09tstzrange\x01+\0\x09daterange\x01/\0\x03oid\x01\
y\0\x0bcustom-enum\x01s\0\x04null\0\0\x04\0\x12db-value-primitive\x03\05\x01q\x02\
\x09primitive\x013\0\x05array\x013\0\x04\0\x0edb-column-type\x03\07\x01r\x04\x07\
ordinalw\x04names\x07db-type8\x0cdb-type-names\x04\0\x09db-column\x03\09\x01p6\x01\
q\x02\x09primitive\x016\0\x05array\x01;\0\x04\0\x08db-value\x03\0<\x01p=\x01r\x01\
\x06values>\x04\0\x06db-row\x03\0?\x04\0\x0ddb-result-set\x03\x01\x04\0\x0ddb-co\
nnection\x03\x01\x01hA\x01p:\x01@\x01\x04self\xc3\0\0\xc4\0\x04\0![method]db-res\
ult-set.get-columns\x01E\x01p\xc0\0\x01k\xc6\0\x01@\x01\x04self\xc3\0\0\xc7\0\x04\
\0\x1e[method]db-result-set.get-next\x01H\x01iB\x01j\x01\xc9\0\x01\x01\x01@\x01\x07\
addresss\0\xca\0\x04\0\x1a[static]db-connection.open\x01K\x01hB\x01iA\x01j\x01\xcd\
\0\x01\x01\x01@\x03\x04self\xcc\0\x09statements\x06params>\0\xce\0\x04\0\x1b[met\
hod]db-connection.query\x01O\x01j\x01w\x01\x01\x01@\x03\x04self\xcc\0\x09stateme\
nts\x06params>\0\xd0\0\x04\0\x1d[method]db-connection.execute\x01Q\x03\x01\x19wa\
si:rdbms/postgres@0.0.1\x05\0\x01B*\x01q\x05\x12connection-failure\x01s\0\x17que\
ry-parameter-failure\x01s\0\x17query-execution-failure\x01s\0\x16query-response-\
failure\x01s\0\x05other\x01s\0\x04\0\x05error\x03\0\0\x01o\x03z}}\x04\0\x04date\x03\
\0\x02\x01o\x04}}}y\x04\0\x04time\x03\0\x04\x01o\x07z}}}}}y\x04\0\x09timestamp\x03\
\0\x06\x01p\x7f\x04\0\x07bit-vec\x03\0\x08\x01q#\x07boolean\0\0\x07tinyint\0\0\x08\
smallint\0\0\x09mediumint\0\0\x03int\0\0\x06bigint\0\0\x10tinyint-unsigned\0\0\x11\
smallint-unsigned\0\0\x12mediumint-unsigned\0\0\x0cint-unsigned\0\0\x0fbigint-un\
signed\0\0\x05float\0\0\x06double\0\0\x07decimal\0\0\x04date\0\0\x08datetime\0\0\
\x09timestamp\0\0\x04time\0\0\x04year\0\0\x07fixchar\0\0\x07varchar\0\0\x08tinyt\
ext\0\0\x04text\0\0\x0amediumtext\0\0\x08longtext\0\0\x06binary\0\0\x09varbinary\
\0\0\x08tinyblob\0\0\x04blob\0\0\x0amediumblob\0\0\x08longblob\0\0\x0benumeratio\
n\0\0\x03set\0\0\x03bit\0\0\x04json\0\0\x04\0\x0edb-column-type\x03\0\x0a\x01r\x04\
\x07ordinalw\x04names\x07db-type\x0b\x0cdb-type-names\x04\0\x09db-column\x03\0\x0c\
\x01p}\x01q$\x07boolean\x01\x7f\0\x07tinyint\x01~\0\x08smallint\x01|\0\x09medium\
int\x01z\0\x03int\x01z\0\x06bigint\x01x\0\x10tinyint-unsigned\x01}\0\x11smallint\
-unsigned\x01{\0\x12mediumint-unsigned\x01y\0\x0cint-unsigned\x01y\0\x0fbigint-u\
nsigned\x01w\0\x05float\x01v\0\x06double\x01u\0\x07decimal\x01s\0\x04date\x01\x03\
\0\x08datetime\x01\x07\0\x09timestamp\x01\x07\0\x04time\x01\x05\0\x04year\x01{\0\
\x07fixchar\x01s\0\x07varchar\x01s\0\x08tinytext\x01s\0\x04text\x01s\0\x0amedium\
text\x01s\0\x08longtext\x01s\0\x06binary\x01\x0e\0\x09varbinary\x01\x0e\0\x08tin\
yblob\x01\x0e\0\x04blob\x01\x0e\0\x0amediumblob\x01\x0e\0\x08longblob\x01\x0e\0\x0b\
enumeration\x01s\0\x03set\x01s\0\x03bit\x01\x09\0\x04json\x01s\0\x04null\0\0\x04\
\0\x08db-value\x03\0\x0f\x01p\x10\x01r\x01\x06values\x11\x04\0\x06db-row\x03\0\x12\
\x04\0\x0ddb-result-set\x03\x01\x04\0\x0ddb-connection\x03\x01\x01h\x14\x01p\x0d\
\x01@\x01\x04self\x16\0\x17\x04\0![method]db-result-set.get-columns\x01\x18\x01p\
\x13\x01k\x19\x01@\x01\x04self\x16\0\x1a\x04\0\x1e[method]db-result-set.get-next\
\x01\x1b\x01i\x15\x01j\x01\x1c\x01\x01\x01@\x01\x07addresss\0\x1d\x04\0\x1a[stat\
ic]db-connection.open\x01\x1e\x01h\x15\x01i\x14\x01j\x01\x20\x01\x01\x01@\x03\x04\
self\x1f\x09statements\x06params\x11\0!\x04\0\x1b[method]db-connection.query\x01\
\"\x01j\x01w\x01\x01\x01@\x03\x04self\x1f\x09statements\x06params\x11\0#\x04\0\x1d\
[method]db-connection.execute\x01$\x03\x01\x16wasi:rdbms/mysql@0.0.1\x05\x01\x02\
\x03\0\0\x06db-row\x02\x03\0\0\x09db-column\x02\x03\0\x01\x06db-row\x02\x03\0\x01\
\x09db-column\x01B\x1d\x02\x03\x02\x01\x02\x04\0\x0fpostgres-db-row\x03\0\0\x02\x03\
\x02\x01\x03\x04\0\x12postgres-db-column\x03\0\x02\x02\x03\x02\x01\x04\x04\0\x0c\
mysql-db-row\x03\0\x04\x02\x03\x02\x01\x05\x04\0\x0fmysql-db-column\x03\0\x06\x01\
p\x03\x01p\x01\x01r\x02\x07columns\x08\x04rows\x09\x04\0\x15postgres-query-resul\
t\x03\0\x0a\x01p\x07\x01p\x05\x01r\x02\x07columns\x0c\x04rows\x0d\x04\0\x12mysql\
-query-result\x03\0\x0e\x01@\0\0s\x04\0\x05check\x01\x10\x01ps\x01j\x01w\x01s\x01\
@\x02\x09statements\x06params\x11\0\x12\x04\0\x0dmysql-execute\x01\x13\x01j\x01\x0f\
\x01s\x01@\x02\x09statements\x06params\x11\0\x14\x04\0\x0bmysql-query\x01\x15\x04\
\0\x10postgres-execute\x01\x13\x01j\x01\x0b\x01s\x01@\x02\x09statements\x06param\
s\x11\0\x16\x04\0\x0epostgres-query\x01\x17\x04\x01\x0cgolem:it/api\x05\x06\x04\x01\
\x16golem:it/rdbms-service\x04\0\x0b\x13\x01\0\x0drdbms-service\x03\0\0\0G\x09pr\
oducers\x01\x0cprocessed-by\x02\x0dwit-component\x070.208.1\x10wit-bindgen-rust\x06\
0.25.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
