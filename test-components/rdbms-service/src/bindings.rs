// Generated by `wit-bindgen` 0.36.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod golem {
    pub mod rdbms {
        #[allow(dead_code, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Uuid {
                pub high_bits: u64,
                pub low_bits: u64,
            }
            impl ::core::fmt::Debug for Uuid {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Uuid")
                        .field("high-bits", &self.high_bits)
                        .field("low-bits", &self.low_bits)
                        .finish()
                }
            }
            #[derive(Clone, Copy)]
            pub enum IpAddress {
                Ipv4((u8, u8, u8, u8)),
                Ipv6((u16, u16, u16, u16, u16, u16, u16, u16)),
            }
            impl ::core::fmt::Debug for IpAddress {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        IpAddress::Ipv4(e) => {
                            f.debug_tuple("IpAddress::Ipv4").field(e).finish()
                        }
                        IpAddress::Ipv6(e) => {
                            f.debug_tuple("IpAddress::Ipv6").field(e).finish()
                        }
                    }
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct MacAddress {
                pub octets: (u8, u8, u8, u8, u8, u8),
            }
            impl ::core::fmt::Debug for MacAddress {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("MacAddress").field("octets", &self.octets).finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Date {
                pub year: i32,
                pub month: u8,
                pub day: u8,
            }
            impl ::core::fmt::Debug for Date {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Date")
                        .field("year", &self.year)
                        .field("month", &self.month)
                        .field("day", &self.day)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Time {
                pub hour: u8,
                pub minute: u8,
                pub second: u8,
                pub nanosecond: u32,
            }
            impl ::core::fmt::Debug for Time {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Time")
                        .field("hour", &self.hour)
                        .field("minute", &self.minute)
                        .field("second", &self.second)
                        .field("nanosecond", &self.nanosecond)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Timestamp {
                pub date: Date,
                pub time: Time,
            }
            impl ::core::fmt::Debug for Timestamp {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Timestamp")
                        .field("date", &self.date)
                        .field("time", &self.time)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Timestamptz {
                pub timestamp: Timestamp,
                pub offset: i32,
            }
            impl ::core::fmt::Debug for Timestamptz {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Timestamptz")
                        .field("timestamp", &self.timestamp)
                        .field("offset", &self.offset)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Timetz {
                pub time: Time,
                pub offset: i32,
            }
            impl ::core::fmt::Debug for Timetz {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Timetz")
                        .field("time", &self.time)
                        .field("offset", &self.offset)
                        .finish()
                }
            }
        }
        #[allow(dead_code, clippy::all)]
        pub mod postgres {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Date = super::super::super::golem::rdbms::types::Date;
            pub type Time = super::super::super::golem::rdbms::types::Time;
            pub type Timetz = super::super::super::golem::rdbms::types::Timetz;
            pub type Timestamp = super::super::super::golem::rdbms::types::Timestamp;
            pub type Timestamptz = super::super::super::golem::rdbms::types::Timestamptz;
            pub type Uuid = super::super::super::golem::rdbms::types::Uuid;
            pub type IpAddress = super::super::super::golem::rdbms::types::IpAddress;
            pub type MacAddress = super::super::super::golem::rdbms::types::MacAddress;
            #[derive(Clone)]
            pub enum Error {
                ConnectionFailure(_rt::String),
                QueryParameterFailure(_rt::String),
                QueryExecutionFailure(_rt::String),
                QueryResponseFailure(_rt::String),
                Other(_rt::String),
            }
            impl ::core::fmt::Debug for Error {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        Error::ConnectionFailure(e) => {
                            f.debug_tuple("Error::ConnectionFailure").field(e).finish()
                        }
                        Error::QueryParameterFailure(e) => {
                            f.debug_tuple("Error::QueryParameterFailure")
                                .field(e)
                                .finish()
                        }
                        Error::QueryExecutionFailure(e) => {
                            f.debug_tuple("Error::QueryExecutionFailure")
                                .field(e)
                                .finish()
                        }
                        Error::QueryResponseFailure(e) => {
                            f.debug_tuple("Error::QueryResponseFailure")
                                .field(e)
                                .finish()
                        }
                        Error::Other(e) => {
                            f.debug_tuple("Error::Other").field(e).finish()
                        }
                    }
                }
            }
            impl ::core::fmt::Display for Error {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }
            impl std::error::Error for Error {}
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Interval {
                pub months: i32,
                pub days: i32,
                pub microseconds: i64,
            }
            impl ::core::fmt::Debug for Interval {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Interval")
                        .field("months", &self.months)
                        .field("days", &self.days)
                        .field("microseconds", &self.microseconds)
                        .finish()
                }
            }
            #[derive(Clone, Copy)]
            pub enum Int4bound {
                Included(i32),
                Excluded(i32),
                Unbounded,
            }
            impl ::core::fmt::Debug for Int4bound {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        Int4bound::Included(e) => {
                            f.debug_tuple("Int4bound::Included").field(e).finish()
                        }
                        Int4bound::Excluded(e) => {
                            f.debug_tuple("Int4bound::Excluded").field(e).finish()
                        }
                        Int4bound::Unbounded => {
                            f.debug_tuple("Int4bound::Unbounded").finish()
                        }
                    }
                }
            }
            #[derive(Clone, Copy)]
            pub enum Int8bound {
                Included(i64),
                Excluded(i64),
                Unbounded,
            }
            impl ::core::fmt::Debug for Int8bound {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        Int8bound::Included(e) => {
                            f.debug_tuple("Int8bound::Included").field(e).finish()
                        }
                        Int8bound::Excluded(e) => {
                            f.debug_tuple("Int8bound::Excluded").field(e).finish()
                        }
                        Int8bound::Unbounded => {
                            f.debug_tuple("Int8bound::Unbounded").finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub enum Numbound {
                Included(_rt::String),
                Excluded(_rt::String),
                Unbounded,
            }
            impl ::core::fmt::Debug for Numbound {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        Numbound::Included(e) => {
                            f.debug_tuple("Numbound::Included").field(e).finish()
                        }
                        Numbound::Excluded(e) => {
                            f.debug_tuple("Numbound::Excluded").field(e).finish()
                        }
                        Numbound::Unbounded => {
                            f.debug_tuple("Numbound::Unbounded").finish()
                        }
                    }
                }
            }
            #[derive(Clone, Copy)]
            pub enum Tsbound {
                Included(Timestamp),
                Excluded(Timestamp),
                Unbounded,
            }
            impl ::core::fmt::Debug for Tsbound {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        Tsbound::Included(e) => {
                            f.debug_tuple("Tsbound::Included").field(e).finish()
                        }
                        Tsbound::Excluded(e) => {
                            f.debug_tuple("Tsbound::Excluded").field(e).finish()
                        }
                        Tsbound::Unbounded => {
                            f.debug_tuple("Tsbound::Unbounded").finish()
                        }
                    }
                }
            }
            #[derive(Clone, Copy)]
            pub enum Tstzbound {
                Included(Timestamptz),
                Excluded(Timestamptz),
                Unbounded,
            }
            impl ::core::fmt::Debug for Tstzbound {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        Tstzbound::Included(e) => {
                            f.debug_tuple("Tstzbound::Included").field(e).finish()
                        }
                        Tstzbound::Excluded(e) => {
                            f.debug_tuple("Tstzbound::Excluded").field(e).finish()
                        }
                        Tstzbound::Unbounded => {
                            f.debug_tuple("Tstzbound::Unbounded").finish()
                        }
                    }
                }
            }
            #[derive(Clone, Copy)]
            pub enum Datebound {
                Included(Date),
                Excluded(Date),
                Unbounded,
            }
            impl ::core::fmt::Debug for Datebound {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        Datebound::Included(e) => {
                            f.debug_tuple("Datebound::Included").field(e).finish()
                        }
                        Datebound::Excluded(e) => {
                            f.debug_tuple("Datebound::Excluded").field(e).finish()
                        }
                        Datebound::Unbounded => {
                            f.debug_tuple("Datebound::Unbounded").finish()
                        }
                    }
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Int4range {
                pub start: Int4bound,
                pub end: Int4bound,
            }
            impl ::core::fmt::Debug for Int4range {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Int4range")
                        .field("start", &self.start)
                        .field("end", &self.end)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Int8range {
                pub start: Int8bound,
                pub end: Int8bound,
            }
            impl ::core::fmt::Debug for Int8range {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Int8range")
                        .field("start", &self.start)
                        .field("end", &self.end)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct Numrange {
                pub start: Numbound,
                pub end: Numbound,
            }
            impl ::core::fmt::Debug for Numrange {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Numrange")
                        .field("start", &self.start)
                        .field("end", &self.end)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Tsrange {
                pub start: Tsbound,
                pub end: Tsbound,
            }
            impl ::core::fmt::Debug for Tsrange {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Tsrange")
                        .field("start", &self.start)
                        .field("end", &self.end)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Tstzrange {
                pub start: Tstzbound,
                pub end: Tstzbound,
            }
            impl ::core::fmt::Debug for Tstzrange {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Tstzrange")
                        .field("start", &self.start)
                        .field("end", &self.end)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Daterange {
                pub start: Datebound,
                pub end: Datebound,
            }
            impl ::core::fmt::Debug for Daterange {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Daterange")
                        .field("start", &self.start)
                        .field("end", &self.end)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct EnumerationType {
                pub name: _rt::String,
            }
            impl ::core::fmt::Debug for EnumerationType {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("EnumerationType").field("name", &self.name).finish()
                }
            }
            #[derive(Clone)]
            pub struct Enumeration {
                pub name: _rt::String,
                pub value: _rt::String,
            }
            impl ::core::fmt::Debug for Enumeration {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Enumeration")
                        .field("name", &self.name)
                        .field("value", &self.value)
                        .finish()
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct LazyDbValue {
                handle: _rt::Resource<LazyDbValue>,
            }
            impl LazyDbValue {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for LazyDbValue {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:rdbms/postgres@0.0.1")]
                        extern "C" {
                            #[link_name = "[resource-drop]lazy-db-value"]
                            fn drop(_: u32);
                        }
                        drop(_handle);
                    }
                }
            }
            pub struct Composite {
                pub name: _rt::String,
                pub values: _rt::Vec<LazyDbValue>,
            }
            impl ::core::fmt::Debug for Composite {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Composite")
                        .field("name", &self.name)
                        .field("values", &self.values)
                        .finish()
                }
            }
            pub struct Domain {
                pub name: _rt::String,
                pub value: LazyDbValue,
            }
            impl ::core::fmt::Debug for Domain {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Domain")
                        .field("name", &self.name)
                        .field("value", &self.value)
                        .finish()
                }
            }
            pub enum ValueBound {
                Included(LazyDbValue),
                Excluded(LazyDbValue),
                Unbounded,
            }
            impl ::core::fmt::Debug for ValueBound {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ValueBound::Included(e) => {
                            f.debug_tuple("ValueBound::Included").field(e).finish()
                        }
                        ValueBound::Excluded(e) => {
                            f.debug_tuple("ValueBound::Excluded").field(e).finish()
                        }
                        ValueBound::Unbounded => {
                            f.debug_tuple("ValueBound::Unbounded").finish()
                        }
                    }
                }
            }
            pub struct ValuesRange {
                pub start: ValueBound,
                pub end: ValueBound,
            }
            impl ::core::fmt::Debug for ValuesRange {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ValuesRange")
                        .field("start", &self.start)
                        .field("end", &self.end)
                        .finish()
                }
            }
            pub struct Range {
                pub name: _rt::String,
                pub value: ValuesRange,
            }
            impl ::core::fmt::Debug for Range {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Range")
                        .field("name", &self.name)
                        .field("value", &self.value)
                        .finish()
                }
            }
            pub enum DbValue {
                Character(i8),
                Int2(i16),
                Int4(i32),
                Int8(i64),
                Float4(f32),
                Float8(f64),
                Numeric(_rt::String),
                Boolean(bool),
                Text(_rt::String),
                Varchar(_rt::String),
                Bpchar(_rt::String),
                Timestamp(Timestamp),
                Timestamptz(Timestamptz),
                Date(Date),
                Time(Time),
                Timetz(Timetz),
                Interval(Interval),
                Bytea(_rt::Vec<u8>),
                Json(_rt::String),
                Jsonb(_rt::String),
                Jsonpath(_rt::String),
                Xml(_rt::String),
                Uuid(Uuid),
                Inet(IpAddress),
                Cidr(IpAddress),
                Macaddr(MacAddress),
                Bit(_rt::Vec<bool>),
                Varbit(_rt::Vec<bool>),
                Int4range(Int4range),
                Int8range(Int8range),
                Numrange(Numrange),
                Tsrange(Tsrange),
                Tstzrange(Tstzrange),
                Daterange(Daterange),
                Money(i64),
                Oid(u32),
                Enumeration(Enumeration),
                Composite(Composite),
                Domain(Domain),
                Array(_rt::Vec<LazyDbValue>),
                Range(Range),
                Null,
            }
            impl ::core::fmt::Debug for DbValue {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        DbValue::Character(e) => {
                            f.debug_tuple("DbValue::Character").field(e).finish()
                        }
                        DbValue::Int2(e) => {
                            f.debug_tuple("DbValue::Int2").field(e).finish()
                        }
                        DbValue::Int4(e) => {
                            f.debug_tuple("DbValue::Int4").field(e).finish()
                        }
                        DbValue::Int8(e) => {
                            f.debug_tuple("DbValue::Int8").field(e).finish()
                        }
                        DbValue::Float4(e) => {
                            f.debug_tuple("DbValue::Float4").field(e).finish()
                        }
                        DbValue::Float8(e) => {
                            f.debug_tuple("DbValue::Float8").field(e).finish()
                        }
                        DbValue::Numeric(e) => {
                            f.debug_tuple("DbValue::Numeric").field(e).finish()
                        }
                        DbValue::Boolean(e) => {
                            f.debug_tuple("DbValue::Boolean").field(e).finish()
                        }
                        DbValue::Text(e) => {
                            f.debug_tuple("DbValue::Text").field(e).finish()
                        }
                        DbValue::Varchar(e) => {
                            f.debug_tuple("DbValue::Varchar").field(e).finish()
                        }
                        DbValue::Bpchar(e) => {
                            f.debug_tuple("DbValue::Bpchar").field(e).finish()
                        }
                        DbValue::Timestamp(e) => {
                            f.debug_tuple("DbValue::Timestamp").field(e).finish()
                        }
                        DbValue::Timestamptz(e) => {
                            f.debug_tuple("DbValue::Timestamptz").field(e).finish()
                        }
                        DbValue::Date(e) => {
                            f.debug_tuple("DbValue::Date").field(e).finish()
                        }
                        DbValue::Time(e) => {
                            f.debug_tuple("DbValue::Time").field(e).finish()
                        }
                        DbValue::Timetz(e) => {
                            f.debug_tuple("DbValue::Timetz").field(e).finish()
                        }
                        DbValue::Interval(e) => {
                            f.debug_tuple("DbValue::Interval").field(e).finish()
                        }
                        DbValue::Bytea(e) => {
                            f.debug_tuple("DbValue::Bytea").field(e).finish()
                        }
                        DbValue::Json(e) => {
                            f.debug_tuple("DbValue::Json").field(e).finish()
                        }
                        DbValue::Jsonb(e) => {
                            f.debug_tuple("DbValue::Jsonb").field(e).finish()
                        }
                        DbValue::Jsonpath(e) => {
                            f.debug_tuple("DbValue::Jsonpath").field(e).finish()
                        }
                        DbValue::Xml(e) => {
                            f.debug_tuple("DbValue::Xml").field(e).finish()
                        }
                        DbValue::Uuid(e) => {
                            f.debug_tuple("DbValue::Uuid").field(e).finish()
                        }
                        DbValue::Inet(e) => {
                            f.debug_tuple("DbValue::Inet").field(e).finish()
                        }
                        DbValue::Cidr(e) => {
                            f.debug_tuple("DbValue::Cidr").field(e).finish()
                        }
                        DbValue::Macaddr(e) => {
                            f.debug_tuple("DbValue::Macaddr").field(e).finish()
                        }
                        DbValue::Bit(e) => {
                            f.debug_tuple("DbValue::Bit").field(e).finish()
                        }
                        DbValue::Varbit(e) => {
                            f.debug_tuple("DbValue::Varbit").field(e).finish()
                        }
                        DbValue::Int4range(e) => {
                            f.debug_tuple("DbValue::Int4range").field(e).finish()
                        }
                        DbValue::Int8range(e) => {
                            f.debug_tuple("DbValue::Int8range").field(e).finish()
                        }
                        DbValue::Numrange(e) => {
                            f.debug_tuple("DbValue::Numrange").field(e).finish()
                        }
                        DbValue::Tsrange(e) => {
                            f.debug_tuple("DbValue::Tsrange").field(e).finish()
                        }
                        DbValue::Tstzrange(e) => {
                            f.debug_tuple("DbValue::Tstzrange").field(e).finish()
                        }
                        DbValue::Daterange(e) => {
                            f.debug_tuple("DbValue::Daterange").field(e).finish()
                        }
                        DbValue::Money(e) => {
                            f.debug_tuple("DbValue::Money").field(e).finish()
                        }
                        DbValue::Oid(e) => {
                            f.debug_tuple("DbValue::Oid").field(e).finish()
                        }
                        DbValue::Enumeration(e) => {
                            f.debug_tuple("DbValue::Enumeration").field(e).finish()
                        }
                        DbValue::Composite(e) => {
                            f.debug_tuple("DbValue::Composite").field(e).finish()
                        }
                        DbValue::Domain(e) => {
                            f.debug_tuple("DbValue::Domain").field(e).finish()
                        }
                        DbValue::Array(e) => {
                            f.debug_tuple("DbValue::Array").field(e).finish()
                        }
                        DbValue::Range(e) => {
                            f.debug_tuple("DbValue::Range").field(e).finish()
                        }
                        DbValue::Null => f.debug_tuple("DbValue::Null").finish(),
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct LazyDbColumnType {
                handle: _rt::Resource<LazyDbColumnType>,
            }
            impl LazyDbColumnType {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for LazyDbColumnType {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:rdbms/postgres@0.0.1")]
                        extern "C" {
                            #[link_name = "[resource-drop]lazy-db-column-type"]
                            fn drop(_: u32);
                        }
                        drop(_handle);
                    }
                }
            }
            pub struct CompositeType {
                pub name: _rt::String,
                pub attributes: _rt::Vec<(_rt::String, LazyDbColumnType)>,
            }
            impl ::core::fmt::Debug for CompositeType {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("CompositeType")
                        .field("name", &self.name)
                        .field("attributes", &self.attributes)
                        .finish()
                }
            }
            pub struct DomainType {
                pub name: _rt::String,
                pub base_type: LazyDbColumnType,
            }
            impl ::core::fmt::Debug for DomainType {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("DomainType")
                        .field("name", &self.name)
                        .field("base-type", &self.base_type)
                        .finish()
                }
            }
            pub struct RangeType {
                pub name: _rt::String,
                pub base_type: LazyDbColumnType,
            }
            impl ::core::fmt::Debug for RangeType {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("RangeType")
                        .field("name", &self.name)
                        .field("base-type", &self.base_type)
                        .finish()
                }
            }
            pub enum DbColumnType {
                Character,
                Int2,
                Int4,
                Int8,
                Float4,
                Float8,
                Numeric,
                Boolean,
                Text,
                Varchar,
                Bpchar,
                Timestamp,
                Timestamptz,
                Date,
                Time,
                Timetz,
                Interval,
                Bytea,
                Uuid,
                Xml,
                Json,
                Jsonb,
                Jsonpath,
                Inet,
                Cidr,
                Macaddr,
                Bit,
                Varbit,
                Int4range,
                Int8range,
                Numrange,
                Tsrange,
                Tstzrange,
                Daterange,
                Money,
                Oid,
                Enumeration(EnumerationType),
                Composite(CompositeType),
                Domain(DomainType),
                Array(LazyDbColumnType),
                Range(RangeType),
            }
            impl ::core::fmt::Debug for DbColumnType {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        DbColumnType::Character => {
                            f.debug_tuple("DbColumnType::Character").finish()
                        }
                        DbColumnType::Int2 => {
                            f.debug_tuple("DbColumnType::Int2").finish()
                        }
                        DbColumnType::Int4 => {
                            f.debug_tuple("DbColumnType::Int4").finish()
                        }
                        DbColumnType::Int8 => {
                            f.debug_tuple("DbColumnType::Int8").finish()
                        }
                        DbColumnType::Float4 => {
                            f.debug_tuple("DbColumnType::Float4").finish()
                        }
                        DbColumnType::Float8 => {
                            f.debug_tuple("DbColumnType::Float8").finish()
                        }
                        DbColumnType::Numeric => {
                            f.debug_tuple("DbColumnType::Numeric").finish()
                        }
                        DbColumnType::Boolean => {
                            f.debug_tuple("DbColumnType::Boolean").finish()
                        }
                        DbColumnType::Text => {
                            f.debug_tuple("DbColumnType::Text").finish()
                        }
                        DbColumnType::Varchar => {
                            f.debug_tuple("DbColumnType::Varchar").finish()
                        }
                        DbColumnType::Bpchar => {
                            f.debug_tuple("DbColumnType::Bpchar").finish()
                        }
                        DbColumnType::Timestamp => {
                            f.debug_tuple("DbColumnType::Timestamp").finish()
                        }
                        DbColumnType::Timestamptz => {
                            f.debug_tuple("DbColumnType::Timestamptz").finish()
                        }
                        DbColumnType::Date => {
                            f.debug_tuple("DbColumnType::Date").finish()
                        }
                        DbColumnType::Time => {
                            f.debug_tuple("DbColumnType::Time").finish()
                        }
                        DbColumnType::Timetz => {
                            f.debug_tuple("DbColumnType::Timetz").finish()
                        }
                        DbColumnType::Interval => {
                            f.debug_tuple("DbColumnType::Interval").finish()
                        }
                        DbColumnType::Bytea => {
                            f.debug_tuple("DbColumnType::Bytea").finish()
                        }
                        DbColumnType::Uuid => {
                            f.debug_tuple("DbColumnType::Uuid").finish()
                        }
                        DbColumnType::Xml => f.debug_tuple("DbColumnType::Xml").finish(),
                        DbColumnType::Json => {
                            f.debug_tuple("DbColumnType::Json").finish()
                        }
                        DbColumnType::Jsonb => {
                            f.debug_tuple("DbColumnType::Jsonb").finish()
                        }
                        DbColumnType::Jsonpath => {
                            f.debug_tuple("DbColumnType::Jsonpath").finish()
                        }
                        DbColumnType::Inet => {
                            f.debug_tuple("DbColumnType::Inet").finish()
                        }
                        DbColumnType::Cidr => {
                            f.debug_tuple("DbColumnType::Cidr").finish()
                        }
                        DbColumnType::Macaddr => {
                            f.debug_tuple("DbColumnType::Macaddr").finish()
                        }
                        DbColumnType::Bit => f.debug_tuple("DbColumnType::Bit").finish(),
                        DbColumnType::Varbit => {
                            f.debug_tuple("DbColumnType::Varbit").finish()
                        }
                        DbColumnType::Int4range => {
                            f.debug_tuple("DbColumnType::Int4range").finish()
                        }
                        DbColumnType::Int8range => {
                            f.debug_tuple("DbColumnType::Int8range").finish()
                        }
                        DbColumnType::Numrange => {
                            f.debug_tuple("DbColumnType::Numrange").finish()
                        }
                        DbColumnType::Tsrange => {
                            f.debug_tuple("DbColumnType::Tsrange").finish()
                        }
                        DbColumnType::Tstzrange => {
                            f.debug_tuple("DbColumnType::Tstzrange").finish()
                        }
                        DbColumnType::Daterange => {
                            f.debug_tuple("DbColumnType::Daterange").finish()
                        }
                        DbColumnType::Money => {
                            f.debug_tuple("DbColumnType::Money").finish()
                        }
                        DbColumnType::Oid => f.debug_tuple("DbColumnType::Oid").finish(),
                        DbColumnType::Enumeration(e) => {
                            f.debug_tuple("DbColumnType::Enumeration").field(e).finish()
                        }
                        DbColumnType::Composite(e) => {
                            f.debug_tuple("DbColumnType::Composite").field(e).finish()
                        }
                        DbColumnType::Domain(e) => {
                            f.debug_tuple("DbColumnType::Domain").field(e).finish()
                        }
                        DbColumnType::Array(e) => {
                            f.debug_tuple("DbColumnType::Array").field(e).finish()
                        }
                        DbColumnType::Range(e) => {
                            f.debug_tuple("DbColumnType::Range").field(e).finish()
                        }
                    }
                }
            }
            pub struct DbColumn {
                pub ordinal: u64,
                pub name: _rt::String,
                pub db_type: DbColumnType,
                pub db_type_name: _rt::String,
            }
            impl ::core::fmt::Debug for DbColumn {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("DbColumn")
                        .field("ordinal", &self.ordinal)
                        .field("name", &self.name)
                        .field("db-type", &self.db_type)
                        .field("db-type-name", &self.db_type_name)
                        .finish()
                }
            }
            /// A single row of values
            pub struct DbRow {
                pub values: _rt::Vec<DbValue>,
            }
            impl ::core::fmt::Debug for DbRow {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("DbRow").field("values", &self.values).finish()
                }
            }
            pub struct DbResult {
                pub columns: _rt::Vec<DbColumn>,
                pub rows: _rt::Vec<DbRow>,
            }
            impl ::core::fmt::Debug for DbResult {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("DbResult")
                        .field("columns", &self.columns)
                        .field("rows", &self.rows)
                        .finish()
                }
            }
            /// A potentially very large and lazy stream of rows:
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct DbResultStream {
                handle: _rt::Resource<DbResultStream>,
            }
            impl DbResultStream {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for DbResultStream {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:rdbms/postgres@0.0.1")]
                        extern "C" {
                            #[link_name = "[resource-drop]db-result-stream"]
                            fn drop(_: u32);
                        }
                        drop(_handle);
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct DbConnection {
                handle: _rt::Resource<DbConnection>,
            }
            impl DbConnection {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for DbConnection {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:rdbms/postgres@0.0.1")]
                        extern "C" {
                            #[link_name = "[resource-drop]db-connection"]
                            fn drop(_: u32);
                        }
                        drop(_handle);
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct DbTransaction {
                handle: _rt::Resource<DbTransaction>,
            }
            impl DbTransaction {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for DbTransaction {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:rdbms/postgres@0.0.1")]
                        extern "C" {
                            #[link_name = "[resource-drop]db-transaction"]
                            fn drop(_: u32);
                        }
                        drop(_handle);
                    }
                }
            }
            impl LazyDbValue {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(value: DbValue) -> Self {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 56]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 56],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        match &value {
                            DbValue::Character(e) => {
                                *ptr0.add(0).cast::<u8>() = (0i32) as u8;
                                *ptr0.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                            }
                            DbValue::Int2(e) => {
                                *ptr0.add(0).cast::<u8>() = (1i32) as u8;
                                *ptr0.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                            }
                            DbValue::Int4(e) => {
                                *ptr0.add(0).cast::<u8>() = (2i32) as u8;
                                *ptr0.add(8).cast::<i32>() = _rt::as_i32(e);
                            }
                            DbValue::Int8(e) => {
                                *ptr0.add(0).cast::<u8>() = (3i32) as u8;
                                *ptr0.add(8).cast::<i64>() = _rt::as_i64(e);
                            }
                            DbValue::Float4(e) => {
                                *ptr0.add(0).cast::<u8>() = (4i32) as u8;
                                *ptr0.add(8).cast::<f32>() = _rt::as_f32(e);
                            }
                            DbValue::Float8(e) => {
                                *ptr0.add(0).cast::<u8>() = (5i32) as u8;
                                *ptr0.add(8).cast::<f64>() = _rt::as_f64(e);
                            }
                            DbValue::Numeric(e) => {
                                *ptr0.add(0).cast::<u8>() = (6i32) as u8;
                                let vec1 = e;
                                let ptr1 = vec1.as_ptr().cast::<u8>();
                                let len1 = vec1.len();
                                *ptr0.add(12).cast::<usize>() = len1;
                                *ptr0.add(8).cast::<*mut u8>() = ptr1.cast_mut();
                            }
                            DbValue::Boolean(e) => {
                                *ptr0.add(0).cast::<u8>() = (7i32) as u8;
                                *ptr0.add(8).cast::<u8>() = (match e {
                                    true => 1,
                                    false => 0,
                                }) as u8;
                            }
                            DbValue::Text(e) => {
                                *ptr0.add(0).cast::<u8>() = (8i32) as u8;
                                let vec2 = e;
                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                let len2 = vec2.len();
                                *ptr0.add(12).cast::<usize>() = len2;
                                *ptr0.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                            }
                            DbValue::Varchar(e) => {
                                *ptr0.add(0).cast::<u8>() = (9i32) as u8;
                                let vec3 = e;
                                let ptr3 = vec3.as_ptr().cast::<u8>();
                                let len3 = vec3.len();
                                *ptr0.add(12).cast::<usize>() = len3;
                                *ptr0.add(8).cast::<*mut u8>() = ptr3.cast_mut();
                            }
                            DbValue::Bpchar(e) => {
                                *ptr0.add(0).cast::<u8>() = (10i32) as u8;
                                let vec4 = e;
                                let ptr4 = vec4.as_ptr().cast::<u8>();
                                let len4 = vec4.len();
                                *ptr0.add(12).cast::<usize>() = len4;
                                *ptr0.add(8).cast::<*mut u8>() = ptr4.cast_mut();
                            }
                            DbValue::Timestamp(e) => {
                                *ptr0.add(0).cast::<u8>() = (11i32) as u8;
                                let super::super::super::golem::rdbms::types::Timestamp {
                                    date: date5,
                                    time: time5,
                                } = e;
                                let super::super::super::golem::rdbms::types::Date {
                                    year: year6,
                                    month: month6,
                                    day: day6,
                                } = date5;
                                *ptr0.add(8).cast::<i32>() = _rt::as_i32(year6);
                                *ptr0.add(12).cast::<u8>() = (_rt::as_i32(month6)) as u8;
                                *ptr0.add(13).cast::<u8>() = (_rt::as_i32(day6)) as u8;
                                let super::super::super::golem::rdbms::types::Time {
                                    hour: hour7,
                                    minute: minute7,
                                    second: second7,
                                    nanosecond: nanosecond7,
                                } = time5;
                                *ptr0.add(16).cast::<u8>() = (_rt::as_i32(hour7)) as u8;
                                *ptr0.add(17).cast::<u8>() = (_rt::as_i32(minute7)) as u8;
                                *ptr0.add(18).cast::<u8>() = (_rt::as_i32(second7)) as u8;
                                *ptr0.add(20).cast::<i32>() = _rt::as_i32(nanosecond7);
                            }
                            DbValue::Timestamptz(e) => {
                                *ptr0.add(0).cast::<u8>() = (12i32) as u8;
                                let super::super::super::golem::rdbms::types::Timestamptz {
                                    timestamp: timestamp8,
                                    offset: offset8,
                                } = e;
                                let super::super::super::golem::rdbms::types::Timestamp {
                                    date: date9,
                                    time: time9,
                                } = timestamp8;
                                let super::super::super::golem::rdbms::types::Date {
                                    year: year10,
                                    month: month10,
                                    day: day10,
                                } = date9;
                                *ptr0.add(8).cast::<i32>() = _rt::as_i32(year10);
                                *ptr0.add(12).cast::<u8>() = (_rt::as_i32(month10)) as u8;
                                *ptr0.add(13).cast::<u8>() = (_rt::as_i32(day10)) as u8;
                                let super::super::super::golem::rdbms::types::Time {
                                    hour: hour11,
                                    minute: minute11,
                                    second: second11,
                                    nanosecond: nanosecond11,
                                } = time9;
                                *ptr0.add(16).cast::<u8>() = (_rt::as_i32(hour11)) as u8;
                                *ptr0.add(17).cast::<u8>() = (_rt::as_i32(minute11)) as u8;
                                *ptr0.add(18).cast::<u8>() = (_rt::as_i32(second11)) as u8;
                                *ptr0.add(20).cast::<i32>() = _rt::as_i32(nanosecond11);
                                *ptr0.add(24).cast::<i32>() = _rt::as_i32(offset8);
                            }
                            DbValue::Date(e) => {
                                *ptr0.add(0).cast::<u8>() = (13i32) as u8;
                                let super::super::super::golem::rdbms::types::Date {
                                    year: year12,
                                    month: month12,
                                    day: day12,
                                } = e;
                                *ptr0.add(8).cast::<i32>() = _rt::as_i32(year12);
                                *ptr0.add(12).cast::<u8>() = (_rt::as_i32(month12)) as u8;
                                *ptr0.add(13).cast::<u8>() = (_rt::as_i32(day12)) as u8;
                            }
                            DbValue::Time(e) => {
                                *ptr0.add(0).cast::<u8>() = (14i32) as u8;
                                let super::super::super::golem::rdbms::types::Time {
                                    hour: hour13,
                                    minute: minute13,
                                    second: second13,
                                    nanosecond: nanosecond13,
                                } = e;
                                *ptr0.add(8).cast::<u8>() = (_rt::as_i32(hour13)) as u8;
                                *ptr0.add(9).cast::<u8>() = (_rt::as_i32(minute13)) as u8;
                                *ptr0.add(10).cast::<u8>() = (_rt::as_i32(second13)) as u8;
                                *ptr0.add(12).cast::<i32>() = _rt::as_i32(nanosecond13);
                            }
                            DbValue::Timetz(e) => {
                                *ptr0.add(0).cast::<u8>() = (15i32) as u8;
                                let super::super::super::golem::rdbms::types::Timetz {
                                    time: time14,
                                    offset: offset14,
                                } = e;
                                let super::super::super::golem::rdbms::types::Time {
                                    hour: hour15,
                                    minute: minute15,
                                    second: second15,
                                    nanosecond: nanosecond15,
                                } = time14;
                                *ptr0.add(8).cast::<u8>() = (_rt::as_i32(hour15)) as u8;
                                *ptr0.add(9).cast::<u8>() = (_rt::as_i32(minute15)) as u8;
                                *ptr0.add(10).cast::<u8>() = (_rt::as_i32(second15)) as u8;
                                *ptr0.add(12).cast::<i32>() = _rt::as_i32(nanosecond15);
                                *ptr0.add(16).cast::<i32>() = _rt::as_i32(offset14);
                            }
                            DbValue::Interval(e) => {
                                *ptr0.add(0).cast::<u8>() = (16i32) as u8;
                                let Interval {
                                    months: months16,
                                    days: days16,
                                    microseconds: microseconds16,
                                } = e;
                                *ptr0.add(8).cast::<i32>() = _rt::as_i32(months16);
                                *ptr0.add(12).cast::<i32>() = _rt::as_i32(days16);
                                *ptr0.add(16).cast::<i64>() = _rt::as_i64(microseconds16);
                            }
                            DbValue::Bytea(e) => {
                                *ptr0.add(0).cast::<u8>() = (17i32) as u8;
                                let vec17 = e;
                                let ptr17 = vec17.as_ptr().cast::<u8>();
                                let len17 = vec17.len();
                                *ptr0.add(12).cast::<usize>() = len17;
                                *ptr0.add(8).cast::<*mut u8>() = ptr17.cast_mut();
                            }
                            DbValue::Json(e) => {
                                *ptr0.add(0).cast::<u8>() = (18i32) as u8;
                                let vec18 = e;
                                let ptr18 = vec18.as_ptr().cast::<u8>();
                                let len18 = vec18.len();
                                *ptr0.add(12).cast::<usize>() = len18;
                                *ptr0.add(8).cast::<*mut u8>() = ptr18.cast_mut();
                            }
                            DbValue::Jsonb(e) => {
                                *ptr0.add(0).cast::<u8>() = (19i32) as u8;
                                let vec19 = e;
                                let ptr19 = vec19.as_ptr().cast::<u8>();
                                let len19 = vec19.len();
                                *ptr0.add(12).cast::<usize>() = len19;
                                *ptr0.add(8).cast::<*mut u8>() = ptr19.cast_mut();
                            }
                            DbValue::Jsonpath(e) => {
                                *ptr0.add(0).cast::<u8>() = (20i32) as u8;
                                let vec20 = e;
                                let ptr20 = vec20.as_ptr().cast::<u8>();
                                let len20 = vec20.len();
                                *ptr0.add(12).cast::<usize>() = len20;
                                *ptr0.add(8).cast::<*mut u8>() = ptr20.cast_mut();
                            }
                            DbValue::Xml(e) => {
                                *ptr0.add(0).cast::<u8>() = (21i32) as u8;
                                let vec21 = e;
                                let ptr21 = vec21.as_ptr().cast::<u8>();
                                let len21 = vec21.len();
                                *ptr0.add(12).cast::<usize>() = len21;
                                *ptr0.add(8).cast::<*mut u8>() = ptr21.cast_mut();
                            }
                            DbValue::Uuid(e) => {
                                *ptr0.add(0).cast::<u8>() = (22i32) as u8;
                                let super::super::super::golem::rdbms::types::Uuid {
                                    high_bits: high_bits22,
                                    low_bits: low_bits22,
                                } = e;
                                *ptr0.add(8).cast::<i64>() = _rt::as_i64(high_bits22);
                                *ptr0.add(16).cast::<i64>() = _rt::as_i64(low_bits22);
                            }
                            DbValue::Inet(e) => {
                                *ptr0.add(0).cast::<u8>() = (23i32) as u8;
                                use super::super::super::golem::rdbms::types::IpAddress as V25;
                                match e {
                                    V25::Ipv4(e) => {
                                        *ptr0.add(8).cast::<u8>() = (0i32) as u8;
                                        let (t23_0, t23_1, t23_2, t23_3) = e;
                                        *ptr0.add(10).cast::<u8>() = (_rt::as_i32(t23_0)) as u8;
                                        *ptr0.add(11).cast::<u8>() = (_rt::as_i32(t23_1)) as u8;
                                        *ptr0.add(12).cast::<u8>() = (_rt::as_i32(t23_2)) as u8;
                                        *ptr0.add(13).cast::<u8>() = (_rt::as_i32(t23_3)) as u8;
                                    }
                                    V25::Ipv6(e) => {
                                        *ptr0.add(8).cast::<u8>() = (1i32) as u8;
                                        let (
                                            t24_0,
                                            t24_1,
                                            t24_2,
                                            t24_3,
                                            t24_4,
                                            t24_5,
                                            t24_6,
                                            t24_7,
                                        ) = e;
                                        *ptr0.add(10).cast::<u16>() = (_rt::as_i32(t24_0)) as u16;
                                        *ptr0.add(12).cast::<u16>() = (_rt::as_i32(t24_1)) as u16;
                                        *ptr0.add(14).cast::<u16>() = (_rt::as_i32(t24_2)) as u16;
                                        *ptr0.add(16).cast::<u16>() = (_rt::as_i32(t24_3)) as u16;
                                        *ptr0.add(18).cast::<u16>() = (_rt::as_i32(t24_4)) as u16;
                                        *ptr0.add(20).cast::<u16>() = (_rt::as_i32(t24_5)) as u16;
                                        *ptr0.add(22).cast::<u16>() = (_rt::as_i32(t24_6)) as u16;
                                        *ptr0.add(24).cast::<u16>() = (_rt::as_i32(t24_7)) as u16;
                                    }
                                }
                            }
                            DbValue::Cidr(e) => {
                                *ptr0.add(0).cast::<u8>() = (24i32) as u8;
                                use super::super::super::golem::rdbms::types::IpAddress as V28;
                                match e {
                                    V28::Ipv4(e) => {
                                        *ptr0.add(8).cast::<u8>() = (0i32) as u8;
                                        let (t26_0, t26_1, t26_2, t26_3) = e;
                                        *ptr0.add(10).cast::<u8>() = (_rt::as_i32(t26_0)) as u8;
                                        *ptr0.add(11).cast::<u8>() = (_rt::as_i32(t26_1)) as u8;
                                        *ptr0.add(12).cast::<u8>() = (_rt::as_i32(t26_2)) as u8;
                                        *ptr0.add(13).cast::<u8>() = (_rt::as_i32(t26_3)) as u8;
                                    }
                                    V28::Ipv6(e) => {
                                        *ptr0.add(8).cast::<u8>() = (1i32) as u8;
                                        let (
                                            t27_0,
                                            t27_1,
                                            t27_2,
                                            t27_3,
                                            t27_4,
                                            t27_5,
                                            t27_6,
                                            t27_7,
                                        ) = e;
                                        *ptr0.add(10).cast::<u16>() = (_rt::as_i32(t27_0)) as u16;
                                        *ptr0.add(12).cast::<u16>() = (_rt::as_i32(t27_1)) as u16;
                                        *ptr0.add(14).cast::<u16>() = (_rt::as_i32(t27_2)) as u16;
                                        *ptr0.add(16).cast::<u16>() = (_rt::as_i32(t27_3)) as u16;
                                        *ptr0.add(18).cast::<u16>() = (_rt::as_i32(t27_4)) as u16;
                                        *ptr0.add(20).cast::<u16>() = (_rt::as_i32(t27_5)) as u16;
                                        *ptr0.add(22).cast::<u16>() = (_rt::as_i32(t27_6)) as u16;
                                        *ptr0.add(24).cast::<u16>() = (_rt::as_i32(t27_7)) as u16;
                                    }
                                }
                            }
                            DbValue::Macaddr(e) => {
                                *ptr0.add(0).cast::<u8>() = (25i32) as u8;
                                let super::super::super::golem::rdbms::types::MacAddress {
                                    octets: octets29,
                                } = e;
                                let (t30_0, t30_1, t30_2, t30_3, t30_4, t30_5) = octets29;
                                *ptr0.add(8).cast::<u8>() = (_rt::as_i32(t30_0)) as u8;
                                *ptr0.add(9).cast::<u8>() = (_rt::as_i32(t30_1)) as u8;
                                *ptr0.add(10).cast::<u8>() = (_rt::as_i32(t30_2)) as u8;
                                *ptr0.add(11).cast::<u8>() = (_rt::as_i32(t30_3)) as u8;
                                *ptr0.add(12).cast::<u8>() = (_rt::as_i32(t30_4)) as u8;
                                *ptr0.add(13).cast::<u8>() = (_rt::as_i32(t30_5)) as u8;
                            }
                            DbValue::Bit(e) => {
                                *ptr0.add(0).cast::<u8>() = (26i32) as u8;
                                let vec31 = e;
                                let len31 = vec31.len();
                                let layout31 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec31.len() * 1,
                                    1,
                                );
                                let result31 = if layout31.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout31).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout31);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec31.into_iter().enumerate() {
                                    let base = result31.add(i * 1);
                                    {
                                        *base.add(0).cast::<u8>() = (match e {
                                            true => 1,
                                            false => 0,
                                        }) as u8;
                                    }
                                }
                                *ptr0.add(12).cast::<usize>() = len31;
                                *ptr0.add(8).cast::<*mut u8>() = result31;
                                cleanup_list.extend_from_slice(&[(result31, layout31)]);
                            }
                            DbValue::Varbit(e) => {
                                *ptr0.add(0).cast::<u8>() = (27i32) as u8;
                                let vec32 = e;
                                let len32 = vec32.len();
                                let layout32 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec32.len() * 1,
                                    1,
                                );
                                let result32 = if layout32.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout32).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout32);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec32.into_iter().enumerate() {
                                    let base = result32.add(i * 1);
                                    {
                                        *base.add(0).cast::<u8>() = (match e {
                                            true => 1,
                                            false => 0,
                                        }) as u8;
                                    }
                                }
                                *ptr0.add(12).cast::<usize>() = len32;
                                *ptr0.add(8).cast::<*mut u8>() = result32;
                                cleanup_list.extend_from_slice(&[(result32, layout32)]);
                            }
                            DbValue::Int4range(e) => {
                                *ptr0.add(0).cast::<u8>() = (28i32) as u8;
                                let Int4range { start: start33, end: end33 } = e;
                                match start33 {
                                    Int4bound::Included(e) => {
                                        *ptr0.add(8).cast::<u8>() = (0i32) as u8;
                                        *ptr0.add(12).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    Int4bound::Excluded(e) => {
                                        *ptr0.add(8).cast::<u8>() = (1i32) as u8;
                                        *ptr0.add(12).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    Int4bound::Unbounded => {
                                        *ptr0.add(8).cast::<u8>() = (2i32) as u8;
                                    }
                                }
                                match end33 {
                                    Int4bound::Included(e) => {
                                        *ptr0.add(16).cast::<u8>() = (0i32) as u8;
                                        *ptr0.add(20).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    Int4bound::Excluded(e) => {
                                        *ptr0.add(16).cast::<u8>() = (1i32) as u8;
                                        *ptr0.add(20).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    Int4bound::Unbounded => {
                                        *ptr0.add(16).cast::<u8>() = (2i32) as u8;
                                    }
                                }
                            }
                            DbValue::Int8range(e) => {
                                *ptr0.add(0).cast::<u8>() = (29i32) as u8;
                                let Int8range { start: start34, end: end34 } = e;
                                match start34 {
                                    Int8bound::Included(e) => {
                                        *ptr0.add(8).cast::<u8>() = (0i32) as u8;
                                        *ptr0.add(16).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    Int8bound::Excluded(e) => {
                                        *ptr0.add(8).cast::<u8>() = (1i32) as u8;
                                        *ptr0.add(16).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    Int8bound::Unbounded => {
                                        *ptr0.add(8).cast::<u8>() = (2i32) as u8;
                                    }
                                }
                                match end34 {
                                    Int8bound::Included(e) => {
                                        *ptr0.add(24).cast::<u8>() = (0i32) as u8;
                                        *ptr0.add(32).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    Int8bound::Excluded(e) => {
                                        *ptr0.add(24).cast::<u8>() = (1i32) as u8;
                                        *ptr0.add(32).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    Int8bound::Unbounded => {
                                        *ptr0.add(24).cast::<u8>() = (2i32) as u8;
                                    }
                                }
                            }
                            DbValue::Numrange(e) => {
                                *ptr0.add(0).cast::<u8>() = (30i32) as u8;
                                let Numrange { start: start35, end: end35 } = e;
                                match start35 {
                                    Numbound::Included(e) => {
                                        *ptr0.add(8).cast::<u8>() = (0i32) as u8;
                                        let vec36 = e;
                                        let ptr36 = vec36.as_ptr().cast::<u8>();
                                        let len36 = vec36.len();
                                        *ptr0.add(16).cast::<usize>() = len36;
                                        *ptr0.add(12).cast::<*mut u8>() = ptr36.cast_mut();
                                    }
                                    Numbound::Excluded(e) => {
                                        *ptr0.add(8).cast::<u8>() = (1i32) as u8;
                                        let vec37 = e;
                                        let ptr37 = vec37.as_ptr().cast::<u8>();
                                        let len37 = vec37.len();
                                        *ptr0.add(16).cast::<usize>() = len37;
                                        *ptr0.add(12).cast::<*mut u8>() = ptr37.cast_mut();
                                    }
                                    Numbound::Unbounded => {
                                        *ptr0.add(8).cast::<u8>() = (2i32) as u8;
                                    }
                                }
                                match end35 {
                                    Numbound::Included(e) => {
                                        *ptr0.add(20).cast::<u8>() = (0i32) as u8;
                                        let vec38 = e;
                                        let ptr38 = vec38.as_ptr().cast::<u8>();
                                        let len38 = vec38.len();
                                        *ptr0.add(28).cast::<usize>() = len38;
                                        *ptr0.add(24).cast::<*mut u8>() = ptr38.cast_mut();
                                    }
                                    Numbound::Excluded(e) => {
                                        *ptr0.add(20).cast::<u8>() = (1i32) as u8;
                                        let vec39 = e;
                                        let ptr39 = vec39.as_ptr().cast::<u8>();
                                        let len39 = vec39.len();
                                        *ptr0.add(28).cast::<usize>() = len39;
                                        *ptr0.add(24).cast::<*mut u8>() = ptr39.cast_mut();
                                    }
                                    Numbound::Unbounded => {
                                        *ptr0.add(20).cast::<u8>() = (2i32) as u8;
                                    }
                                }
                            }
                            DbValue::Tsrange(e) => {
                                *ptr0.add(0).cast::<u8>() = (31i32) as u8;
                                let Tsrange { start: start40, end: end40 } = e;
                                match start40 {
                                    Tsbound::Included(e) => {
                                        *ptr0.add(8).cast::<u8>() = (0i32) as u8;
                                        let super::super::super::golem::rdbms::types::Timestamp {
                                            date: date41,
                                            time: time41,
                                        } = e;
                                        let super::super::super::golem::rdbms::types::Date {
                                            year: year42,
                                            month: month42,
                                            day: day42,
                                        } = date41;
                                        *ptr0.add(12).cast::<i32>() = _rt::as_i32(year42);
                                        *ptr0.add(16).cast::<u8>() = (_rt::as_i32(month42)) as u8;
                                        *ptr0.add(17).cast::<u8>() = (_rt::as_i32(day42)) as u8;
                                        let super::super::super::golem::rdbms::types::Time {
                                            hour: hour43,
                                            minute: minute43,
                                            second: second43,
                                            nanosecond: nanosecond43,
                                        } = time41;
                                        *ptr0.add(20).cast::<u8>() = (_rt::as_i32(hour43)) as u8;
                                        *ptr0.add(21).cast::<u8>() = (_rt::as_i32(minute43)) as u8;
                                        *ptr0.add(22).cast::<u8>() = (_rt::as_i32(second43)) as u8;
                                        *ptr0.add(24).cast::<i32>() = _rt::as_i32(nanosecond43);
                                    }
                                    Tsbound::Excluded(e) => {
                                        *ptr0.add(8).cast::<u8>() = (1i32) as u8;
                                        let super::super::super::golem::rdbms::types::Timestamp {
                                            date: date44,
                                            time: time44,
                                        } = e;
                                        let super::super::super::golem::rdbms::types::Date {
                                            year: year45,
                                            month: month45,
                                            day: day45,
                                        } = date44;
                                        *ptr0.add(12).cast::<i32>() = _rt::as_i32(year45);
                                        *ptr0.add(16).cast::<u8>() = (_rt::as_i32(month45)) as u8;
                                        *ptr0.add(17).cast::<u8>() = (_rt::as_i32(day45)) as u8;
                                        let super::super::super::golem::rdbms::types::Time {
                                            hour: hour46,
                                            minute: minute46,
                                            second: second46,
                                            nanosecond: nanosecond46,
                                        } = time44;
                                        *ptr0.add(20).cast::<u8>() = (_rt::as_i32(hour46)) as u8;
                                        *ptr0.add(21).cast::<u8>() = (_rt::as_i32(minute46)) as u8;
                                        *ptr0.add(22).cast::<u8>() = (_rt::as_i32(second46)) as u8;
                                        *ptr0.add(24).cast::<i32>() = _rt::as_i32(nanosecond46);
                                    }
                                    Tsbound::Unbounded => {
                                        *ptr0.add(8).cast::<u8>() = (2i32) as u8;
                                    }
                                }
                                match end40 {
                                    Tsbound::Included(e) => {
                                        *ptr0.add(28).cast::<u8>() = (0i32) as u8;
                                        let super::super::super::golem::rdbms::types::Timestamp {
                                            date: date47,
                                            time: time47,
                                        } = e;
                                        let super::super::super::golem::rdbms::types::Date {
                                            year: year48,
                                            month: month48,
                                            day: day48,
                                        } = date47;
                                        *ptr0.add(32).cast::<i32>() = _rt::as_i32(year48);
                                        *ptr0.add(36).cast::<u8>() = (_rt::as_i32(month48)) as u8;
                                        *ptr0.add(37).cast::<u8>() = (_rt::as_i32(day48)) as u8;
                                        let super::super::super::golem::rdbms::types::Time {
                                            hour: hour49,
                                            minute: minute49,
                                            second: second49,
                                            nanosecond: nanosecond49,
                                        } = time47;
                                        *ptr0.add(40).cast::<u8>() = (_rt::as_i32(hour49)) as u8;
                                        *ptr0.add(41).cast::<u8>() = (_rt::as_i32(minute49)) as u8;
                                        *ptr0.add(42).cast::<u8>() = (_rt::as_i32(second49)) as u8;
                                        *ptr0.add(44).cast::<i32>() = _rt::as_i32(nanosecond49);
                                    }
                                    Tsbound::Excluded(e) => {
                                        *ptr0.add(28).cast::<u8>() = (1i32) as u8;
                                        let super::super::super::golem::rdbms::types::Timestamp {
                                            date: date50,
                                            time: time50,
                                        } = e;
                                        let super::super::super::golem::rdbms::types::Date {
                                            year: year51,
                                            month: month51,
                                            day: day51,
                                        } = date50;
                                        *ptr0.add(32).cast::<i32>() = _rt::as_i32(year51);
                                        *ptr0.add(36).cast::<u8>() = (_rt::as_i32(month51)) as u8;
                                        *ptr0.add(37).cast::<u8>() = (_rt::as_i32(day51)) as u8;
                                        let super::super::super::golem::rdbms::types::Time {
                                            hour: hour52,
                                            minute: minute52,
                                            second: second52,
                                            nanosecond: nanosecond52,
                                        } = time50;
                                        *ptr0.add(40).cast::<u8>() = (_rt::as_i32(hour52)) as u8;
                                        *ptr0.add(41).cast::<u8>() = (_rt::as_i32(minute52)) as u8;
                                        *ptr0.add(42).cast::<u8>() = (_rt::as_i32(second52)) as u8;
                                        *ptr0.add(44).cast::<i32>() = _rt::as_i32(nanosecond52);
                                    }
                                    Tsbound::Unbounded => {
                                        *ptr0.add(28).cast::<u8>() = (2i32) as u8;
                                    }
                                }
                            }
                            DbValue::Tstzrange(e) => {
                                *ptr0.add(0).cast::<u8>() = (32i32) as u8;
                                let Tstzrange { start: start53, end: end53 } = e;
                                match start53 {
                                    Tstzbound::Included(e) => {
                                        *ptr0.add(8).cast::<u8>() = (0i32) as u8;
                                        let super::super::super::golem::rdbms::types::Timestamptz {
                                            timestamp: timestamp54,
                                            offset: offset54,
                                        } = e;
                                        let super::super::super::golem::rdbms::types::Timestamp {
                                            date: date55,
                                            time: time55,
                                        } = timestamp54;
                                        let super::super::super::golem::rdbms::types::Date {
                                            year: year56,
                                            month: month56,
                                            day: day56,
                                        } = date55;
                                        *ptr0.add(12).cast::<i32>() = _rt::as_i32(year56);
                                        *ptr0.add(16).cast::<u8>() = (_rt::as_i32(month56)) as u8;
                                        *ptr0.add(17).cast::<u8>() = (_rt::as_i32(day56)) as u8;
                                        let super::super::super::golem::rdbms::types::Time {
                                            hour: hour57,
                                            minute: minute57,
                                            second: second57,
                                            nanosecond: nanosecond57,
                                        } = time55;
                                        *ptr0.add(20).cast::<u8>() = (_rt::as_i32(hour57)) as u8;
                                        *ptr0.add(21).cast::<u8>() = (_rt::as_i32(minute57)) as u8;
                                        *ptr0.add(22).cast::<u8>() = (_rt::as_i32(second57)) as u8;
                                        *ptr0.add(24).cast::<i32>() = _rt::as_i32(nanosecond57);
                                        *ptr0.add(28).cast::<i32>() = _rt::as_i32(offset54);
                                    }
                                    Tstzbound::Excluded(e) => {
                                        *ptr0.add(8).cast::<u8>() = (1i32) as u8;
                                        let super::super::super::golem::rdbms::types::Timestamptz {
                                            timestamp: timestamp58,
                                            offset: offset58,
                                        } = e;
                                        let super::super::super::golem::rdbms::types::Timestamp {
                                            date: date59,
                                            time: time59,
                                        } = timestamp58;
                                        let super::super::super::golem::rdbms::types::Date {
                                            year: year60,
                                            month: month60,
                                            day: day60,
                                        } = date59;
                                        *ptr0.add(12).cast::<i32>() = _rt::as_i32(year60);
                                        *ptr0.add(16).cast::<u8>() = (_rt::as_i32(month60)) as u8;
                                        *ptr0.add(17).cast::<u8>() = (_rt::as_i32(day60)) as u8;
                                        let super::super::super::golem::rdbms::types::Time {
                                            hour: hour61,
                                            minute: minute61,
                                            second: second61,
                                            nanosecond: nanosecond61,
                                        } = time59;
                                        *ptr0.add(20).cast::<u8>() = (_rt::as_i32(hour61)) as u8;
                                        *ptr0.add(21).cast::<u8>() = (_rt::as_i32(minute61)) as u8;
                                        *ptr0.add(22).cast::<u8>() = (_rt::as_i32(second61)) as u8;
                                        *ptr0.add(24).cast::<i32>() = _rt::as_i32(nanosecond61);
                                        *ptr0.add(28).cast::<i32>() = _rt::as_i32(offset58);
                                    }
                                    Tstzbound::Unbounded => {
                                        *ptr0.add(8).cast::<u8>() = (2i32) as u8;
                                    }
                                }
                                match end53 {
                                    Tstzbound::Included(e) => {
                                        *ptr0.add(32).cast::<u8>() = (0i32) as u8;
                                        let super::super::super::golem::rdbms::types::Timestamptz {
                                            timestamp: timestamp62,
                                            offset: offset62,
                                        } = e;
                                        let super::super::super::golem::rdbms::types::Timestamp {
                                            date: date63,
                                            time: time63,
                                        } = timestamp62;
                                        let super::super::super::golem::rdbms::types::Date {
                                            year: year64,
                                            month: month64,
                                            day: day64,
                                        } = date63;
                                        *ptr0.add(36).cast::<i32>() = _rt::as_i32(year64);
                                        *ptr0.add(40).cast::<u8>() = (_rt::as_i32(month64)) as u8;
                                        *ptr0.add(41).cast::<u8>() = (_rt::as_i32(day64)) as u8;
                                        let super::super::super::golem::rdbms::types::Time {
                                            hour: hour65,
                                            minute: minute65,
                                            second: second65,
                                            nanosecond: nanosecond65,
                                        } = time63;
                                        *ptr0.add(44).cast::<u8>() = (_rt::as_i32(hour65)) as u8;
                                        *ptr0.add(45).cast::<u8>() = (_rt::as_i32(minute65)) as u8;
                                        *ptr0.add(46).cast::<u8>() = (_rt::as_i32(second65)) as u8;
                                        *ptr0.add(48).cast::<i32>() = _rt::as_i32(nanosecond65);
                                        *ptr0.add(52).cast::<i32>() = _rt::as_i32(offset62);
                                    }
                                    Tstzbound::Excluded(e) => {
                                        *ptr0.add(32).cast::<u8>() = (1i32) as u8;
                                        let super::super::super::golem::rdbms::types::Timestamptz {
                                            timestamp: timestamp66,
                                            offset: offset66,
                                        } = e;
                                        let super::super::super::golem::rdbms::types::Timestamp {
                                            date: date67,
                                            time: time67,
                                        } = timestamp66;
                                        let super::super::super::golem::rdbms::types::Date {
                                            year: year68,
                                            month: month68,
                                            day: day68,
                                        } = date67;
                                        *ptr0.add(36).cast::<i32>() = _rt::as_i32(year68);
                                        *ptr0.add(40).cast::<u8>() = (_rt::as_i32(month68)) as u8;
                                        *ptr0.add(41).cast::<u8>() = (_rt::as_i32(day68)) as u8;
                                        let super::super::super::golem::rdbms::types::Time {
                                            hour: hour69,
                                            minute: minute69,
                                            second: second69,
                                            nanosecond: nanosecond69,
                                        } = time67;
                                        *ptr0.add(44).cast::<u8>() = (_rt::as_i32(hour69)) as u8;
                                        *ptr0.add(45).cast::<u8>() = (_rt::as_i32(minute69)) as u8;
                                        *ptr0.add(46).cast::<u8>() = (_rt::as_i32(second69)) as u8;
                                        *ptr0.add(48).cast::<i32>() = _rt::as_i32(nanosecond69);
                                        *ptr0.add(52).cast::<i32>() = _rt::as_i32(offset66);
                                    }
                                    Tstzbound::Unbounded => {
                                        *ptr0.add(32).cast::<u8>() = (2i32) as u8;
                                    }
                                }
                            }
                            DbValue::Daterange(e) => {
                                *ptr0.add(0).cast::<u8>() = (33i32) as u8;
                                let Daterange { start: start70, end: end70 } = e;
                                match start70 {
                                    Datebound::Included(e) => {
                                        *ptr0.add(8).cast::<u8>() = (0i32) as u8;
                                        let super::super::super::golem::rdbms::types::Date {
                                            year: year71,
                                            month: month71,
                                            day: day71,
                                        } = e;
                                        *ptr0.add(12).cast::<i32>() = _rt::as_i32(year71);
                                        *ptr0.add(16).cast::<u8>() = (_rt::as_i32(month71)) as u8;
                                        *ptr0.add(17).cast::<u8>() = (_rt::as_i32(day71)) as u8;
                                    }
                                    Datebound::Excluded(e) => {
                                        *ptr0.add(8).cast::<u8>() = (1i32) as u8;
                                        let super::super::super::golem::rdbms::types::Date {
                                            year: year72,
                                            month: month72,
                                            day: day72,
                                        } = e;
                                        *ptr0.add(12).cast::<i32>() = _rt::as_i32(year72);
                                        *ptr0.add(16).cast::<u8>() = (_rt::as_i32(month72)) as u8;
                                        *ptr0.add(17).cast::<u8>() = (_rt::as_i32(day72)) as u8;
                                    }
                                    Datebound::Unbounded => {
                                        *ptr0.add(8).cast::<u8>() = (2i32) as u8;
                                    }
                                }
                                match end70 {
                                    Datebound::Included(e) => {
                                        *ptr0.add(20).cast::<u8>() = (0i32) as u8;
                                        let super::super::super::golem::rdbms::types::Date {
                                            year: year73,
                                            month: month73,
                                            day: day73,
                                        } = e;
                                        *ptr0.add(24).cast::<i32>() = _rt::as_i32(year73);
                                        *ptr0.add(28).cast::<u8>() = (_rt::as_i32(month73)) as u8;
                                        *ptr0.add(29).cast::<u8>() = (_rt::as_i32(day73)) as u8;
                                    }
                                    Datebound::Excluded(e) => {
                                        *ptr0.add(20).cast::<u8>() = (1i32) as u8;
                                        let super::super::super::golem::rdbms::types::Date {
                                            year: year74,
                                            month: month74,
                                            day: day74,
                                        } = e;
                                        *ptr0.add(24).cast::<i32>() = _rt::as_i32(year74);
                                        *ptr0.add(28).cast::<u8>() = (_rt::as_i32(month74)) as u8;
                                        *ptr0.add(29).cast::<u8>() = (_rt::as_i32(day74)) as u8;
                                    }
                                    Datebound::Unbounded => {
                                        *ptr0.add(20).cast::<u8>() = (2i32) as u8;
                                    }
                                }
                            }
                            DbValue::Money(e) => {
                                *ptr0.add(0).cast::<u8>() = (34i32) as u8;
                                *ptr0.add(8).cast::<i64>() = _rt::as_i64(e);
                            }
                            DbValue::Oid(e) => {
                                *ptr0.add(0).cast::<u8>() = (35i32) as u8;
                                *ptr0.add(8).cast::<i32>() = _rt::as_i32(e);
                            }
                            DbValue::Enumeration(e) => {
                                *ptr0.add(0).cast::<u8>() = (36i32) as u8;
                                let Enumeration { name: name75, value: value75 } = e;
                                let vec76 = name75;
                                let ptr76 = vec76.as_ptr().cast::<u8>();
                                let len76 = vec76.len();
                                *ptr0.add(12).cast::<usize>() = len76;
                                *ptr0.add(8).cast::<*mut u8>() = ptr76.cast_mut();
                                let vec77 = value75;
                                let ptr77 = vec77.as_ptr().cast::<u8>();
                                let len77 = vec77.len();
                                *ptr0.add(20).cast::<usize>() = len77;
                                *ptr0.add(16).cast::<*mut u8>() = ptr77.cast_mut();
                            }
                            DbValue::Composite(e) => {
                                *ptr0.add(0).cast::<u8>() = (37i32) as u8;
                                let Composite { name: name78, values: values78 } = e;
                                let vec79 = name78;
                                let ptr79 = vec79.as_ptr().cast::<u8>();
                                let len79 = vec79.len();
                                *ptr0.add(12).cast::<usize>() = len79;
                                *ptr0.add(8).cast::<*mut u8>() = ptr79.cast_mut();
                                let vec80 = values78;
                                let len80 = vec80.len();
                                let layout80 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec80.len() * 4,
                                    4,
                                );
                                let result80 = if layout80.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout80).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout80);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec80.into_iter().enumerate() {
                                    let base = result80.add(i * 4);
                                    {
                                        *base.add(0).cast::<i32>() = (e).take_handle() as i32;
                                    }
                                }
                                *ptr0.add(20).cast::<usize>() = len80;
                                *ptr0.add(16).cast::<*mut u8>() = result80;
                                cleanup_list.extend_from_slice(&[(result80, layout80)]);
                            }
                            DbValue::Domain(e) => {
                                *ptr0.add(0).cast::<u8>() = (38i32) as u8;
                                let Domain { name: name81, value: value81 } = e;
                                let vec82 = name81;
                                let ptr82 = vec82.as_ptr().cast::<u8>();
                                let len82 = vec82.len();
                                *ptr0.add(12).cast::<usize>() = len82;
                                *ptr0.add(8).cast::<*mut u8>() = ptr82.cast_mut();
                                *ptr0.add(16).cast::<i32>() = (value81).take_handle()
                                    as i32;
                            }
                            DbValue::Array(e) => {
                                *ptr0.add(0).cast::<u8>() = (39i32) as u8;
                                let vec83 = e;
                                let len83 = vec83.len();
                                let layout83 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec83.len() * 4,
                                    4,
                                );
                                let result83 = if layout83.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout83).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout83);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec83.into_iter().enumerate() {
                                    let base = result83.add(i * 4);
                                    {
                                        *base.add(0).cast::<i32>() = (e).take_handle() as i32;
                                    }
                                }
                                *ptr0.add(12).cast::<usize>() = len83;
                                *ptr0.add(8).cast::<*mut u8>() = result83;
                                cleanup_list.extend_from_slice(&[(result83, layout83)]);
                            }
                            DbValue::Range(e) => {
                                *ptr0.add(0).cast::<u8>() = (40i32) as u8;
                                let Range { name: name84, value: value84 } = e;
                                let vec85 = name84;
                                let ptr85 = vec85.as_ptr().cast::<u8>();
                                let len85 = vec85.len();
                                *ptr0.add(12).cast::<usize>() = len85;
                                *ptr0.add(8).cast::<*mut u8>() = ptr85.cast_mut();
                                let ValuesRange { start: start86, end: end86 } = value84;
                                match start86 {
                                    ValueBound::Included(e) => {
                                        *ptr0.add(16).cast::<u8>() = (0i32) as u8;
                                        *ptr0.add(20).cast::<i32>() = (e).take_handle() as i32;
                                    }
                                    ValueBound::Excluded(e) => {
                                        *ptr0.add(16).cast::<u8>() = (1i32) as u8;
                                        *ptr0.add(20).cast::<i32>() = (e).take_handle() as i32;
                                    }
                                    ValueBound::Unbounded => {
                                        *ptr0.add(16).cast::<u8>() = (2i32) as u8;
                                    }
                                }
                                match end86 {
                                    ValueBound::Included(e) => {
                                        *ptr0.add(24).cast::<u8>() = (0i32) as u8;
                                        *ptr0.add(28).cast::<i32>() = (e).take_handle() as i32;
                                    }
                                    ValueBound::Excluded(e) => {
                                        *ptr0.add(24).cast::<u8>() = (1i32) as u8;
                                        *ptr0.add(28).cast::<i32>() = (e).take_handle() as i32;
                                    }
                                    ValueBound::Unbounded => {
                                        *ptr0.add(24).cast::<u8>() = (2i32) as u8;
                                    }
                                }
                            }
                            DbValue::Null => {
                                *ptr0.add(0).cast::<u8>() = (41i32) as u8;
                            }
                        }
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rdbms/postgres@0.0.1")]
                        extern "C" {
                            #[link_name = "[constructor]lazy-db-value"]
                            fn wit_import(_: *mut u8) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: *mut u8) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(ptr0);
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        LazyDbValue::from_handle(ret as u32)
                    }
                }
            }
            impl LazyDbValue {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get(&self) -> DbValue {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 56]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 56],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rdbms/postgres@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]lazy-db-value.get"]
                            fn wit_import(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        let v260 = match l1 {
                            0 => {
                                let e260 = {
                                    let l2 = i32::from(*ptr0.add(8).cast::<i8>());
                                    l2 as i8
                                };
                                DbValue::Character(e260)
                            }
                            1 => {
                                let e260 = {
                                    let l3 = i32::from(*ptr0.add(8).cast::<i16>());
                                    l3 as i16
                                };
                                DbValue::Int2(e260)
                            }
                            2 => {
                                let e260 = {
                                    let l4 = *ptr0.add(8).cast::<i32>();
                                    l4
                                };
                                DbValue::Int4(e260)
                            }
                            3 => {
                                let e260 = {
                                    let l5 = *ptr0.add(8).cast::<i64>();
                                    l5
                                };
                                DbValue::Int8(e260)
                            }
                            4 => {
                                let e260 = {
                                    let l6 = *ptr0.add(8).cast::<f32>();
                                    l6
                                };
                                DbValue::Float4(e260)
                            }
                            5 => {
                                let e260 = {
                                    let l7 = *ptr0.add(8).cast::<f64>();
                                    l7
                                };
                                DbValue::Float8(e260)
                            }
                            6 => {
                                let e260 = {
                                    let l8 = *ptr0.add(8).cast::<*mut u8>();
                                    let l9 = *ptr0.add(12).cast::<usize>();
                                    let len10 = l9;
                                    let bytes10 = _rt::Vec::from_raw_parts(
                                        l8.cast(),
                                        len10,
                                        len10,
                                    );
                                    _rt::string_lift(bytes10)
                                };
                                DbValue::Numeric(e260)
                            }
                            7 => {
                                let e260 = {
                                    let l11 = i32::from(*ptr0.add(8).cast::<u8>());
                                    _rt::bool_lift(l11 as u8)
                                };
                                DbValue::Boolean(e260)
                            }
                            8 => {
                                let e260 = {
                                    let l12 = *ptr0.add(8).cast::<*mut u8>();
                                    let l13 = *ptr0.add(12).cast::<usize>();
                                    let len14 = l13;
                                    let bytes14 = _rt::Vec::from_raw_parts(
                                        l12.cast(),
                                        len14,
                                        len14,
                                    );
                                    _rt::string_lift(bytes14)
                                };
                                DbValue::Text(e260)
                            }
                            9 => {
                                let e260 = {
                                    let l15 = *ptr0.add(8).cast::<*mut u8>();
                                    let l16 = *ptr0.add(12).cast::<usize>();
                                    let len17 = l16;
                                    let bytes17 = _rt::Vec::from_raw_parts(
                                        l15.cast(),
                                        len17,
                                        len17,
                                    );
                                    _rt::string_lift(bytes17)
                                };
                                DbValue::Varchar(e260)
                            }
                            10 => {
                                let e260 = {
                                    let l18 = *ptr0.add(8).cast::<*mut u8>();
                                    let l19 = *ptr0.add(12).cast::<usize>();
                                    let len20 = l19;
                                    let bytes20 = _rt::Vec::from_raw_parts(
                                        l18.cast(),
                                        len20,
                                        len20,
                                    );
                                    _rt::string_lift(bytes20)
                                };
                                DbValue::Bpchar(e260)
                            }
                            11 => {
                                let e260 = {
                                    let l21 = *ptr0.add(8).cast::<i32>();
                                    let l22 = i32::from(*ptr0.add(12).cast::<u8>());
                                    let l23 = i32::from(*ptr0.add(13).cast::<u8>());
                                    let l24 = i32::from(*ptr0.add(16).cast::<u8>());
                                    let l25 = i32::from(*ptr0.add(17).cast::<u8>());
                                    let l26 = i32::from(*ptr0.add(18).cast::<u8>());
                                    let l27 = *ptr0.add(20).cast::<i32>();
                                    super::super::super::golem::rdbms::types::Timestamp {
                                        date: super::super::super::golem::rdbms::types::Date {
                                            year: l21,
                                            month: l22 as u8,
                                            day: l23 as u8,
                                        },
                                        time: super::super::super::golem::rdbms::types::Time {
                                            hour: l24 as u8,
                                            minute: l25 as u8,
                                            second: l26 as u8,
                                            nanosecond: l27 as u32,
                                        },
                                    }
                                };
                                DbValue::Timestamp(e260)
                            }
                            12 => {
                                let e260 = {
                                    let l28 = *ptr0.add(8).cast::<i32>();
                                    let l29 = i32::from(*ptr0.add(12).cast::<u8>());
                                    let l30 = i32::from(*ptr0.add(13).cast::<u8>());
                                    let l31 = i32::from(*ptr0.add(16).cast::<u8>());
                                    let l32 = i32::from(*ptr0.add(17).cast::<u8>());
                                    let l33 = i32::from(*ptr0.add(18).cast::<u8>());
                                    let l34 = *ptr0.add(20).cast::<i32>();
                                    let l35 = *ptr0.add(24).cast::<i32>();
                                    super::super::super::golem::rdbms::types::Timestamptz {
                                        timestamp: super::super::super::golem::rdbms::types::Timestamp {
                                            date: super::super::super::golem::rdbms::types::Date {
                                                year: l28,
                                                month: l29 as u8,
                                                day: l30 as u8,
                                            },
                                            time: super::super::super::golem::rdbms::types::Time {
                                                hour: l31 as u8,
                                                minute: l32 as u8,
                                                second: l33 as u8,
                                                nanosecond: l34 as u32,
                                            },
                                        },
                                        offset: l35,
                                    }
                                };
                                DbValue::Timestamptz(e260)
                            }
                            13 => {
                                let e260 = {
                                    let l36 = *ptr0.add(8).cast::<i32>();
                                    let l37 = i32::from(*ptr0.add(12).cast::<u8>());
                                    let l38 = i32::from(*ptr0.add(13).cast::<u8>());
                                    super::super::super::golem::rdbms::types::Date {
                                        year: l36,
                                        month: l37 as u8,
                                        day: l38 as u8,
                                    }
                                };
                                DbValue::Date(e260)
                            }
                            14 => {
                                let e260 = {
                                    let l39 = i32::from(*ptr0.add(8).cast::<u8>());
                                    let l40 = i32::from(*ptr0.add(9).cast::<u8>());
                                    let l41 = i32::from(*ptr0.add(10).cast::<u8>());
                                    let l42 = *ptr0.add(12).cast::<i32>();
                                    super::super::super::golem::rdbms::types::Time {
                                        hour: l39 as u8,
                                        minute: l40 as u8,
                                        second: l41 as u8,
                                        nanosecond: l42 as u32,
                                    }
                                };
                                DbValue::Time(e260)
                            }
                            15 => {
                                let e260 = {
                                    let l43 = i32::from(*ptr0.add(8).cast::<u8>());
                                    let l44 = i32::from(*ptr0.add(9).cast::<u8>());
                                    let l45 = i32::from(*ptr0.add(10).cast::<u8>());
                                    let l46 = *ptr0.add(12).cast::<i32>();
                                    let l47 = *ptr0.add(16).cast::<i32>();
                                    super::super::super::golem::rdbms::types::Timetz {
                                        time: super::super::super::golem::rdbms::types::Time {
                                            hour: l43 as u8,
                                            minute: l44 as u8,
                                            second: l45 as u8,
                                            nanosecond: l46 as u32,
                                        },
                                        offset: l47,
                                    }
                                };
                                DbValue::Timetz(e260)
                            }
                            16 => {
                                let e260 = {
                                    let l48 = *ptr0.add(8).cast::<i32>();
                                    let l49 = *ptr0.add(12).cast::<i32>();
                                    let l50 = *ptr0.add(16).cast::<i64>();
                                    Interval {
                                        months: l48,
                                        days: l49,
                                        microseconds: l50,
                                    }
                                };
                                DbValue::Interval(e260)
                            }
                            17 => {
                                let e260 = {
                                    let l51 = *ptr0.add(8).cast::<*mut u8>();
                                    let l52 = *ptr0.add(12).cast::<usize>();
                                    let len53 = l52;
                                    _rt::Vec::from_raw_parts(l51.cast(), len53, len53)
                                };
                                DbValue::Bytea(e260)
                            }
                            18 => {
                                let e260 = {
                                    let l54 = *ptr0.add(8).cast::<*mut u8>();
                                    let l55 = *ptr0.add(12).cast::<usize>();
                                    let len56 = l55;
                                    let bytes56 = _rt::Vec::from_raw_parts(
                                        l54.cast(),
                                        len56,
                                        len56,
                                    );
                                    _rt::string_lift(bytes56)
                                };
                                DbValue::Json(e260)
                            }
                            19 => {
                                let e260 = {
                                    let l57 = *ptr0.add(8).cast::<*mut u8>();
                                    let l58 = *ptr0.add(12).cast::<usize>();
                                    let len59 = l58;
                                    let bytes59 = _rt::Vec::from_raw_parts(
                                        l57.cast(),
                                        len59,
                                        len59,
                                    );
                                    _rt::string_lift(bytes59)
                                };
                                DbValue::Jsonb(e260)
                            }
                            20 => {
                                let e260 = {
                                    let l60 = *ptr0.add(8).cast::<*mut u8>();
                                    let l61 = *ptr0.add(12).cast::<usize>();
                                    let len62 = l61;
                                    let bytes62 = _rt::Vec::from_raw_parts(
                                        l60.cast(),
                                        len62,
                                        len62,
                                    );
                                    _rt::string_lift(bytes62)
                                };
                                DbValue::Jsonpath(e260)
                            }
                            21 => {
                                let e260 = {
                                    let l63 = *ptr0.add(8).cast::<*mut u8>();
                                    let l64 = *ptr0.add(12).cast::<usize>();
                                    let len65 = l64;
                                    let bytes65 = _rt::Vec::from_raw_parts(
                                        l63.cast(),
                                        len65,
                                        len65,
                                    );
                                    _rt::string_lift(bytes65)
                                };
                                DbValue::Xml(e260)
                            }
                            22 => {
                                let e260 = {
                                    let l66 = *ptr0.add(8).cast::<i64>();
                                    let l67 = *ptr0.add(16).cast::<i64>();
                                    super::super::super::golem::rdbms::types::Uuid {
                                        high_bits: l66 as u64,
                                        low_bits: l67 as u64,
                                    }
                                };
                                DbValue::Uuid(e260)
                            }
                            23 => {
                                let e260 = {
                                    let l68 = i32::from(*ptr0.add(8).cast::<u8>());
                                    use super::super::super::golem::rdbms::types::IpAddress as V81;
                                    let v81 = match l68 {
                                        0 => {
                                            let e81 = {
                                                let l69 = i32::from(*ptr0.add(10).cast::<u8>());
                                                let l70 = i32::from(*ptr0.add(11).cast::<u8>());
                                                let l71 = i32::from(*ptr0.add(12).cast::<u8>());
                                                let l72 = i32::from(*ptr0.add(13).cast::<u8>());
                                                (l69 as u8, l70 as u8, l71 as u8, l72 as u8)
                                            };
                                            V81::Ipv4(e81)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            let e81 = {
                                                let l73 = i32::from(*ptr0.add(10).cast::<u16>());
                                                let l74 = i32::from(*ptr0.add(12).cast::<u16>());
                                                let l75 = i32::from(*ptr0.add(14).cast::<u16>());
                                                let l76 = i32::from(*ptr0.add(16).cast::<u16>());
                                                let l77 = i32::from(*ptr0.add(18).cast::<u16>());
                                                let l78 = i32::from(*ptr0.add(20).cast::<u16>());
                                                let l79 = i32::from(*ptr0.add(22).cast::<u16>());
                                                let l80 = i32::from(*ptr0.add(24).cast::<u16>());
                                                (
                                                    l73 as u16,
                                                    l74 as u16,
                                                    l75 as u16,
                                                    l76 as u16,
                                                    l77 as u16,
                                                    l78 as u16,
                                                    l79 as u16,
                                                    l80 as u16,
                                                )
                                            };
                                            V81::Ipv6(e81)
                                        }
                                    };
                                    v81
                                };
                                DbValue::Inet(e260)
                            }
                            24 => {
                                let e260 = {
                                    let l82 = i32::from(*ptr0.add(8).cast::<u8>());
                                    use super::super::super::golem::rdbms::types::IpAddress as V95;
                                    let v95 = match l82 {
                                        0 => {
                                            let e95 = {
                                                let l83 = i32::from(*ptr0.add(10).cast::<u8>());
                                                let l84 = i32::from(*ptr0.add(11).cast::<u8>());
                                                let l85 = i32::from(*ptr0.add(12).cast::<u8>());
                                                let l86 = i32::from(*ptr0.add(13).cast::<u8>());
                                                (l83 as u8, l84 as u8, l85 as u8, l86 as u8)
                                            };
                                            V95::Ipv4(e95)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            let e95 = {
                                                let l87 = i32::from(*ptr0.add(10).cast::<u16>());
                                                let l88 = i32::from(*ptr0.add(12).cast::<u16>());
                                                let l89 = i32::from(*ptr0.add(14).cast::<u16>());
                                                let l90 = i32::from(*ptr0.add(16).cast::<u16>());
                                                let l91 = i32::from(*ptr0.add(18).cast::<u16>());
                                                let l92 = i32::from(*ptr0.add(20).cast::<u16>());
                                                let l93 = i32::from(*ptr0.add(22).cast::<u16>());
                                                let l94 = i32::from(*ptr0.add(24).cast::<u16>());
                                                (
                                                    l87 as u16,
                                                    l88 as u16,
                                                    l89 as u16,
                                                    l90 as u16,
                                                    l91 as u16,
                                                    l92 as u16,
                                                    l93 as u16,
                                                    l94 as u16,
                                                )
                                            };
                                            V95::Ipv6(e95)
                                        }
                                    };
                                    v95
                                };
                                DbValue::Cidr(e260)
                            }
                            25 => {
                                let e260 = {
                                    let l96 = i32::from(*ptr0.add(8).cast::<u8>());
                                    let l97 = i32::from(*ptr0.add(9).cast::<u8>());
                                    let l98 = i32::from(*ptr0.add(10).cast::<u8>());
                                    let l99 = i32::from(*ptr0.add(11).cast::<u8>());
                                    let l100 = i32::from(*ptr0.add(12).cast::<u8>());
                                    let l101 = i32::from(*ptr0.add(13).cast::<u8>());
                                    super::super::super::golem::rdbms::types::MacAddress {
                                        octets: (
                                            l96 as u8,
                                            l97 as u8,
                                            l98 as u8,
                                            l99 as u8,
                                            l100 as u8,
                                            l101 as u8,
                                        ),
                                    }
                                };
                                DbValue::Macaddr(e260)
                            }
                            26 => {
                                let e260 = {
                                    let l102 = *ptr0.add(8).cast::<*mut u8>();
                                    let l103 = *ptr0.add(12).cast::<usize>();
                                    let base105 = l102;
                                    let len105 = l103;
                                    let mut result105 = _rt::Vec::with_capacity(len105);
                                    for i in 0..len105 {
                                        let base = base105.add(i * 1);
                                        let e105 = {
                                            let l104 = i32::from(*base.add(0).cast::<u8>());
                                            _rt::bool_lift(l104 as u8)
                                        };
                                        result105.push(e105);
                                    }
                                    _rt::cabi_dealloc(base105, len105 * 1, 1);
                                    result105
                                };
                                DbValue::Bit(e260)
                            }
                            27 => {
                                let e260 = {
                                    let l106 = *ptr0.add(8).cast::<*mut u8>();
                                    let l107 = *ptr0.add(12).cast::<usize>();
                                    let base109 = l106;
                                    let len109 = l107;
                                    let mut result109 = _rt::Vec::with_capacity(len109);
                                    for i in 0..len109 {
                                        let base = base109.add(i * 1);
                                        let e109 = {
                                            let l108 = i32::from(*base.add(0).cast::<u8>());
                                            _rt::bool_lift(l108 as u8)
                                        };
                                        result109.push(e109);
                                    }
                                    _rt::cabi_dealloc(base109, len109 * 1, 1);
                                    result109
                                };
                                DbValue::Varbit(e260)
                            }
                            28 => {
                                let e260 = {
                                    let l110 = i32::from(*ptr0.add(8).cast::<u8>());
                                    let v113 = match l110 {
                                        0 => {
                                            let e113 = {
                                                let l111 = *ptr0.add(12).cast::<i32>();
                                                l111
                                            };
                                            Int4bound::Included(e113)
                                        }
                                        1 => {
                                            let e113 = {
                                                let l112 = *ptr0.add(12).cast::<i32>();
                                                l112
                                            };
                                            Int4bound::Excluded(e113)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 2, "invalid enum discriminant");
                                            Int4bound::Unbounded
                                        }
                                    };
                                    let l114 = i32::from(*ptr0.add(16).cast::<u8>());
                                    let v117 = match l114 {
                                        0 => {
                                            let e117 = {
                                                let l115 = *ptr0.add(20).cast::<i32>();
                                                l115
                                            };
                                            Int4bound::Included(e117)
                                        }
                                        1 => {
                                            let e117 = {
                                                let l116 = *ptr0.add(20).cast::<i32>();
                                                l116
                                            };
                                            Int4bound::Excluded(e117)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 2, "invalid enum discriminant");
                                            Int4bound::Unbounded
                                        }
                                    };
                                    Int4range {
                                        start: v113,
                                        end: v117,
                                    }
                                };
                                DbValue::Int4range(e260)
                            }
                            29 => {
                                let e260 = {
                                    let l118 = i32::from(*ptr0.add(8).cast::<u8>());
                                    let v121 = match l118 {
                                        0 => {
                                            let e121 = {
                                                let l119 = *ptr0.add(16).cast::<i64>();
                                                l119
                                            };
                                            Int8bound::Included(e121)
                                        }
                                        1 => {
                                            let e121 = {
                                                let l120 = *ptr0.add(16).cast::<i64>();
                                                l120
                                            };
                                            Int8bound::Excluded(e121)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 2, "invalid enum discriminant");
                                            Int8bound::Unbounded
                                        }
                                    };
                                    let l122 = i32::from(*ptr0.add(24).cast::<u8>());
                                    let v125 = match l122 {
                                        0 => {
                                            let e125 = {
                                                let l123 = *ptr0.add(32).cast::<i64>();
                                                l123
                                            };
                                            Int8bound::Included(e125)
                                        }
                                        1 => {
                                            let e125 = {
                                                let l124 = *ptr0.add(32).cast::<i64>();
                                                l124
                                            };
                                            Int8bound::Excluded(e125)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 2, "invalid enum discriminant");
                                            Int8bound::Unbounded
                                        }
                                    };
                                    Int8range {
                                        start: v121,
                                        end: v125,
                                    }
                                };
                                DbValue::Int8range(e260)
                            }
                            30 => {
                                let e260 = {
                                    let l126 = i32::from(*ptr0.add(8).cast::<u8>());
                                    let v133 = match l126 {
                                        0 => {
                                            let e133 = {
                                                let l127 = *ptr0.add(12).cast::<*mut u8>();
                                                let l128 = *ptr0.add(16).cast::<usize>();
                                                let len129 = l128;
                                                let bytes129 = _rt::Vec::from_raw_parts(
                                                    l127.cast(),
                                                    len129,
                                                    len129,
                                                );
                                                _rt::string_lift(bytes129)
                                            };
                                            Numbound::Included(e133)
                                        }
                                        1 => {
                                            let e133 = {
                                                let l130 = *ptr0.add(12).cast::<*mut u8>();
                                                let l131 = *ptr0.add(16).cast::<usize>();
                                                let len132 = l131;
                                                let bytes132 = _rt::Vec::from_raw_parts(
                                                    l130.cast(),
                                                    len132,
                                                    len132,
                                                );
                                                _rt::string_lift(bytes132)
                                            };
                                            Numbound::Excluded(e133)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 2, "invalid enum discriminant");
                                            Numbound::Unbounded
                                        }
                                    };
                                    let l134 = i32::from(*ptr0.add(20).cast::<u8>());
                                    let v141 = match l134 {
                                        0 => {
                                            let e141 = {
                                                let l135 = *ptr0.add(24).cast::<*mut u8>();
                                                let l136 = *ptr0.add(28).cast::<usize>();
                                                let len137 = l136;
                                                let bytes137 = _rt::Vec::from_raw_parts(
                                                    l135.cast(),
                                                    len137,
                                                    len137,
                                                );
                                                _rt::string_lift(bytes137)
                                            };
                                            Numbound::Included(e141)
                                        }
                                        1 => {
                                            let e141 = {
                                                let l138 = *ptr0.add(24).cast::<*mut u8>();
                                                let l139 = *ptr0.add(28).cast::<usize>();
                                                let len140 = l139;
                                                let bytes140 = _rt::Vec::from_raw_parts(
                                                    l138.cast(),
                                                    len140,
                                                    len140,
                                                );
                                                _rt::string_lift(bytes140)
                                            };
                                            Numbound::Excluded(e141)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 2, "invalid enum discriminant");
                                            Numbound::Unbounded
                                        }
                                    };
                                    Numrange { start: v133, end: v141 }
                                };
                                DbValue::Numrange(e260)
                            }
                            31 => {
                                let e260 = {
                                    let l142 = i32::from(*ptr0.add(8).cast::<u8>());
                                    let v157 = match l142 {
                                        0 => {
                                            let e157 = {
                                                let l143 = *ptr0.add(12).cast::<i32>();
                                                let l144 = i32::from(*ptr0.add(16).cast::<u8>());
                                                let l145 = i32::from(*ptr0.add(17).cast::<u8>());
                                                let l146 = i32::from(*ptr0.add(20).cast::<u8>());
                                                let l147 = i32::from(*ptr0.add(21).cast::<u8>());
                                                let l148 = i32::from(*ptr0.add(22).cast::<u8>());
                                                let l149 = *ptr0.add(24).cast::<i32>();
                                                super::super::super::golem::rdbms::types::Timestamp {
                                                    date: super::super::super::golem::rdbms::types::Date {
                                                        year: l143,
                                                        month: l144 as u8,
                                                        day: l145 as u8,
                                                    },
                                                    time: super::super::super::golem::rdbms::types::Time {
                                                        hour: l146 as u8,
                                                        minute: l147 as u8,
                                                        second: l148 as u8,
                                                        nanosecond: l149 as u32,
                                                    },
                                                }
                                            };
                                            Tsbound::Included(e157)
                                        }
                                        1 => {
                                            let e157 = {
                                                let l150 = *ptr0.add(12).cast::<i32>();
                                                let l151 = i32::from(*ptr0.add(16).cast::<u8>());
                                                let l152 = i32::from(*ptr0.add(17).cast::<u8>());
                                                let l153 = i32::from(*ptr0.add(20).cast::<u8>());
                                                let l154 = i32::from(*ptr0.add(21).cast::<u8>());
                                                let l155 = i32::from(*ptr0.add(22).cast::<u8>());
                                                let l156 = *ptr0.add(24).cast::<i32>();
                                                super::super::super::golem::rdbms::types::Timestamp {
                                                    date: super::super::super::golem::rdbms::types::Date {
                                                        year: l150,
                                                        month: l151 as u8,
                                                        day: l152 as u8,
                                                    },
                                                    time: super::super::super::golem::rdbms::types::Time {
                                                        hour: l153 as u8,
                                                        minute: l154 as u8,
                                                        second: l155 as u8,
                                                        nanosecond: l156 as u32,
                                                    },
                                                }
                                            };
                                            Tsbound::Excluded(e157)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 2, "invalid enum discriminant");
                                            Tsbound::Unbounded
                                        }
                                    };
                                    let l158 = i32::from(*ptr0.add(28).cast::<u8>());
                                    let v173 = match l158 {
                                        0 => {
                                            let e173 = {
                                                let l159 = *ptr0.add(32).cast::<i32>();
                                                let l160 = i32::from(*ptr0.add(36).cast::<u8>());
                                                let l161 = i32::from(*ptr0.add(37).cast::<u8>());
                                                let l162 = i32::from(*ptr0.add(40).cast::<u8>());
                                                let l163 = i32::from(*ptr0.add(41).cast::<u8>());
                                                let l164 = i32::from(*ptr0.add(42).cast::<u8>());
                                                let l165 = *ptr0.add(44).cast::<i32>();
                                                super::super::super::golem::rdbms::types::Timestamp {
                                                    date: super::super::super::golem::rdbms::types::Date {
                                                        year: l159,
                                                        month: l160 as u8,
                                                        day: l161 as u8,
                                                    },
                                                    time: super::super::super::golem::rdbms::types::Time {
                                                        hour: l162 as u8,
                                                        minute: l163 as u8,
                                                        second: l164 as u8,
                                                        nanosecond: l165 as u32,
                                                    },
                                                }
                                            };
                                            Tsbound::Included(e173)
                                        }
                                        1 => {
                                            let e173 = {
                                                let l166 = *ptr0.add(32).cast::<i32>();
                                                let l167 = i32::from(*ptr0.add(36).cast::<u8>());
                                                let l168 = i32::from(*ptr0.add(37).cast::<u8>());
                                                let l169 = i32::from(*ptr0.add(40).cast::<u8>());
                                                let l170 = i32::from(*ptr0.add(41).cast::<u8>());
                                                let l171 = i32::from(*ptr0.add(42).cast::<u8>());
                                                let l172 = *ptr0.add(44).cast::<i32>();
                                                super::super::super::golem::rdbms::types::Timestamp {
                                                    date: super::super::super::golem::rdbms::types::Date {
                                                        year: l166,
                                                        month: l167 as u8,
                                                        day: l168 as u8,
                                                    },
                                                    time: super::super::super::golem::rdbms::types::Time {
                                                        hour: l169 as u8,
                                                        minute: l170 as u8,
                                                        second: l171 as u8,
                                                        nanosecond: l172 as u32,
                                                    },
                                                }
                                            };
                                            Tsbound::Excluded(e173)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 2, "invalid enum discriminant");
                                            Tsbound::Unbounded
                                        }
                                    };
                                    Tsrange { start: v157, end: v173 }
                                };
                                DbValue::Tsrange(e260)
                            }
                            32 => {
                                let e260 = {
                                    let l174 = i32::from(*ptr0.add(8).cast::<u8>());
                                    let v191 = match l174 {
                                        0 => {
                                            let e191 = {
                                                let l175 = *ptr0.add(12).cast::<i32>();
                                                let l176 = i32::from(*ptr0.add(16).cast::<u8>());
                                                let l177 = i32::from(*ptr0.add(17).cast::<u8>());
                                                let l178 = i32::from(*ptr0.add(20).cast::<u8>());
                                                let l179 = i32::from(*ptr0.add(21).cast::<u8>());
                                                let l180 = i32::from(*ptr0.add(22).cast::<u8>());
                                                let l181 = *ptr0.add(24).cast::<i32>();
                                                let l182 = *ptr0.add(28).cast::<i32>();
                                                super::super::super::golem::rdbms::types::Timestamptz {
                                                    timestamp: super::super::super::golem::rdbms::types::Timestamp {
                                                        date: super::super::super::golem::rdbms::types::Date {
                                                            year: l175,
                                                            month: l176 as u8,
                                                            day: l177 as u8,
                                                        },
                                                        time: super::super::super::golem::rdbms::types::Time {
                                                            hour: l178 as u8,
                                                            minute: l179 as u8,
                                                            second: l180 as u8,
                                                            nanosecond: l181 as u32,
                                                        },
                                                    },
                                                    offset: l182,
                                                }
                                            };
                                            Tstzbound::Included(e191)
                                        }
                                        1 => {
                                            let e191 = {
                                                let l183 = *ptr0.add(12).cast::<i32>();
                                                let l184 = i32::from(*ptr0.add(16).cast::<u8>());
                                                let l185 = i32::from(*ptr0.add(17).cast::<u8>());
                                                let l186 = i32::from(*ptr0.add(20).cast::<u8>());
                                                let l187 = i32::from(*ptr0.add(21).cast::<u8>());
                                                let l188 = i32::from(*ptr0.add(22).cast::<u8>());
                                                let l189 = *ptr0.add(24).cast::<i32>();
                                                let l190 = *ptr0.add(28).cast::<i32>();
                                                super::super::super::golem::rdbms::types::Timestamptz {
                                                    timestamp: super::super::super::golem::rdbms::types::Timestamp {
                                                        date: super::super::super::golem::rdbms::types::Date {
                                                            year: l183,
                                                            month: l184 as u8,
                                                            day: l185 as u8,
                                                        },
                                                        time: super::super::super::golem::rdbms::types::Time {
                                                            hour: l186 as u8,
                                                            minute: l187 as u8,
                                                            second: l188 as u8,
                                                            nanosecond: l189 as u32,
                                                        },
                                                    },
                                                    offset: l190,
                                                }
                                            };
                                            Tstzbound::Excluded(e191)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 2, "invalid enum discriminant");
                                            Tstzbound::Unbounded
                                        }
                                    };
                                    let l192 = i32::from(*ptr0.add(32).cast::<u8>());
                                    let v209 = match l192 {
                                        0 => {
                                            let e209 = {
                                                let l193 = *ptr0.add(36).cast::<i32>();
                                                let l194 = i32::from(*ptr0.add(40).cast::<u8>());
                                                let l195 = i32::from(*ptr0.add(41).cast::<u8>());
                                                let l196 = i32::from(*ptr0.add(44).cast::<u8>());
                                                let l197 = i32::from(*ptr0.add(45).cast::<u8>());
                                                let l198 = i32::from(*ptr0.add(46).cast::<u8>());
                                                let l199 = *ptr0.add(48).cast::<i32>();
                                                let l200 = *ptr0.add(52).cast::<i32>();
                                                super::super::super::golem::rdbms::types::Timestamptz {
                                                    timestamp: super::super::super::golem::rdbms::types::Timestamp {
                                                        date: super::super::super::golem::rdbms::types::Date {
                                                            year: l193,
                                                            month: l194 as u8,
                                                            day: l195 as u8,
                                                        },
                                                        time: super::super::super::golem::rdbms::types::Time {
                                                            hour: l196 as u8,
                                                            minute: l197 as u8,
                                                            second: l198 as u8,
                                                            nanosecond: l199 as u32,
                                                        },
                                                    },
                                                    offset: l200,
                                                }
                                            };
                                            Tstzbound::Included(e209)
                                        }
                                        1 => {
                                            let e209 = {
                                                let l201 = *ptr0.add(36).cast::<i32>();
                                                let l202 = i32::from(*ptr0.add(40).cast::<u8>());
                                                let l203 = i32::from(*ptr0.add(41).cast::<u8>());
                                                let l204 = i32::from(*ptr0.add(44).cast::<u8>());
                                                let l205 = i32::from(*ptr0.add(45).cast::<u8>());
                                                let l206 = i32::from(*ptr0.add(46).cast::<u8>());
                                                let l207 = *ptr0.add(48).cast::<i32>();
                                                let l208 = *ptr0.add(52).cast::<i32>();
                                                super::super::super::golem::rdbms::types::Timestamptz {
                                                    timestamp: super::super::super::golem::rdbms::types::Timestamp {
                                                        date: super::super::super::golem::rdbms::types::Date {
                                                            year: l201,
                                                            month: l202 as u8,
                                                            day: l203 as u8,
                                                        },
                                                        time: super::super::super::golem::rdbms::types::Time {
                                                            hour: l204 as u8,
                                                            minute: l205 as u8,
                                                            second: l206 as u8,
                                                            nanosecond: l207 as u32,
                                                        },
                                                    },
                                                    offset: l208,
                                                }
                                            };
                                            Tstzbound::Excluded(e209)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 2, "invalid enum discriminant");
                                            Tstzbound::Unbounded
                                        }
                                    };
                                    Tstzrange {
                                        start: v191,
                                        end: v209,
                                    }
                                };
                                DbValue::Tstzrange(e260)
                            }
                            33 => {
                                let e260 = {
                                    let l210 = i32::from(*ptr0.add(8).cast::<u8>());
                                    let v217 = match l210 {
                                        0 => {
                                            let e217 = {
                                                let l211 = *ptr0.add(12).cast::<i32>();
                                                let l212 = i32::from(*ptr0.add(16).cast::<u8>());
                                                let l213 = i32::from(*ptr0.add(17).cast::<u8>());
                                                super::super::super::golem::rdbms::types::Date {
                                                    year: l211,
                                                    month: l212 as u8,
                                                    day: l213 as u8,
                                                }
                                            };
                                            Datebound::Included(e217)
                                        }
                                        1 => {
                                            let e217 = {
                                                let l214 = *ptr0.add(12).cast::<i32>();
                                                let l215 = i32::from(*ptr0.add(16).cast::<u8>());
                                                let l216 = i32::from(*ptr0.add(17).cast::<u8>());
                                                super::super::super::golem::rdbms::types::Date {
                                                    year: l214,
                                                    month: l215 as u8,
                                                    day: l216 as u8,
                                                }
                                            };
                                            Datebound::Excluded(e217)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 2, "invalid enum discriminant");
                                            Datebound::Unbounded
                                        }
                                    };
                                    let l218 = i32::from(*ptr0.add(20).cast::<u8>());
                                    let v225 = match l218 {
                                        0 => {
                                            let e225 = {
                                                let l219 = *ptr0.add(24).cast::<i32>();
                                                let l220 = i32::from(*ptr0.add(28).cast::<u8>());
                                                let l221 = i32::from(*ptr0.add(29).cast::<u8>());
                                                super::super::super::golem::rdbms::types::Date {
                                                    year: l219,
                                                    month: l220 as u8,
                                                    day: l221 as u8,
                                                }
                                            };
                                            Datebound::Included(e225)
                                        }
                                        1 => {
                                            let e225 = {
                                                let l222 = *ptr0.add(24).cast::<i32>();
                                                let l223 = i32::from(*ptr0.add(28).cast::<u8>());
                                                let l224 = i32::from(*ptr0.add(29).cast::<u8>());
                                                super::super::super::golem::rdbms::types::Date {
                                                    year: l222,
                                                    month: l223 as u8,
                                                    day: l224 as u8,
                                                }
                                            };
                                            Datebound::Excluded(e225)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 2, "invalid enum discriminant");
                                            Datebound::Unbounded
                                        }
                                    };
                                    Daterange {
                                        start: v217,
                                        end: v225,
                                    }
                                };
                                DbValue::Daterange(e260)
                            }
                            34 => {
                                let e260 = {
                                    let l226 = *ptr0.add(8).cast::<i64>();
                                    l226
                                };
                                DbValue::Money(e260)
                            }
                            35 => {
                                let e260 = {
                                    let l227 = *ptr0.add(8).cast::<i32>();
                                    l227 as u32
                                };
                                DbValue::Oid(e260)
                            }
                            36 => {
                                let e260 = {
                                    let l228 = *ptr0.add(8).cast::<*mut u8>();
                                    let l229 = *ptr0.add(12).cast::<usize>();
                                    let len230 = l229;
                                    let bytes230 = _rt::Vec::from_raw_parts(
                                        l228.cast(),
                                        len230,
                                        len230,
                                    );
                                    let l231 = *ptr0.add(16).cast::<*mut u8>();
                                    let l232 = *ptr0.add(20).cast::<usize>();
                                    let len233 = l232;
                                    let bytes233 = _rt::Vec::from_raw_parts(
                                        l231.cast(),
                                        len233,
                                        len233,
                                    );
                                    Enumeration {
                                        name: _rt::string_lift(bytes230),
                                        value: _rt::string_lift(bytes233),
                                    }
                                };
                                DbValue::Enumeration(e260)
                            }
                            37 => {
                                let e260 = {
                                    let l234 = *ptr0.add(8).cast::<*mut u8>();
                                    let l235 = *ptr0.add(12).cast::<usize>();
                                    let len236 = l235;
                                    let bytes236 = _rt::Vec::from_raw_parts(
                                        l234.cast(),
                                        len236,
                                        len236,
                                    );
                                    let l237 = *ptr0.add(16).cast::<*mut u8>();
                                    let l238 = *ptr0.add(20).cast::<usize>();
                                    let base240 = l237;
                                    let len240 = l238;
                                    let mut result240 = _rt::Vec::with_capacity(len240);
                                    for i in 0..len240 {
                                        let base = base240.add(i * 4);
                                        let e240 = {
                                            let l239 = *base.add(0).cast::<i32>();
                                            LazyDbValue::from_handle(l239 as u32)
                                        };
                                        result240.push(e240);
                                    }
                                    _rt::cabi_dealloc(base240, len240 * 4, 4);
                                    Composite {
                                        name: _rt::string_lift(bytes236),
                                        values: result240,
                                    }
                                };
                                DbValue::Composite(e260)
                            }
                            38 => {
                                let e260 = {
                                    let l241 = *ptr0.add(8).cast::<*mut u8>();
                                    let l242 = *ptr0.add(12).cast::<usize>();
                                    let len243 = l242;
                                    let bytes243 = _rt::Vec::from_raw_parts(
                                        l241.cast(),
                                        len243,
                                        len243,
                                    );
                                    let l244 = *ptr0.add(16).cast::<i32>();
                                    Domain {
                                        name: _rt::string_lift(bytes243),
                                        value: LazyDbValue::from_handle(l244 as u32),
                                    }
                                };
                                DbValue::Domain(e260)
                            }
                            39 => {
                                let e260 = {
                                    let l245 = *ptr0.add(8).cast::<*mut u8>();
                                    let l246 = *ptr0.add(12).cast::<usize>();
                                    let base248 = l245;
                                    let len248 = l246;
                                    let mut result248 = _rt::Vec::with_capacity(len248);
                                    for i in 0..len248 {
                                        let base = base248.add(i * 4);
                                        let e248 = {
                                            let l247 = *base.add(0).cast::<i32>();
                                            LazyDbValue::from_handle(l247 as u32)
                                        };
                                        result248.push(e248);
                                    }
                                    _rt::cabi_dealloc(base248, len248 * 4, 4);
                                    result248
                                };
                                DbValue::Array(e260)
                            }
                            40 => {
                                let e260 = {
                                    let l249 = *ptr0.add(8).cast::<*mut u8>();
                                    let l250 = *ptr0.add(12).cast::<usize>();
                                    let len251 = l250;
                                    let bytes251 = _rt::Vec::from_raw_parts(
                                        l249.cast(),
                                        len251,
                                        len251,
                                    );
                                    let l252 = i32::from(*ptr0.add(16).cast::<u8>());
                                    let v255 = match l252 {
                                        0 => {
                                            let e255 = {
                                                let l253 = *ptr0.add(20).cast::<i32>();
                                                LazyDbValue::from_handle(l253 as u32)
                                            };
                                            ValueBound::Included(e255)
                                        }
                                        1 => {
                                            let e255 = {
                                                let l254 = *ptr0.add(20).cast::<i32>();
                                                LazyDbValue::from_handle(l254 as u32)
                                            };
                                            ValueBound::Excluded(e255)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 2, "invalid enum discriminant");
                                            ValueBound::Unbounded
                                        }
                                    };
                                    let l256 = i32::from(*ptr0.add(24).cast::<u8>());
                                    let v259 = match l256 {
                                        0 => {
                                            let e259 = {
                                                let l257 = *ptr0.add(28).cast::<i32>();
                                                LazyDbValue::from_handle(l257 as u32)
                                            };
                                            ValueBound::Included(e259)
                                        }
                                        1 => {
                                            let e259 = {
                                                let l258 = *ptr0.add(28).cast::<i32>();
                                                LazyDbValue::from_handle(l258 as u32)
                                            };
                                            ValueBound::Excluded(e259)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 2, "invalid enum discriminant");
                                            ValueBound::Unbounded
                                        }
                                    };
                                    Range {
                                        name: _rt::string_lift(bytes251),
                                        value: ValuesRange {
                                            start: v255,
                                            end: v259,
                                        },
                                    }
                                };
                                DbValue::Range(e260)
                            }
                            n => {
                                debug_assert_eq!(n, 41, "invalid enum discriminant");
                                DbValue::Null
                            }
                        };
                        v260
                    }
                }
            }
            impl LazyDbColumnType {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(value: DbColumnType) -> Self {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        let (
                            result11_0,
                            result11_1,
                            result11_2,
                            result11_3,
                            result11_4,
                        ) = match &value {
                            DbColumnType::Character => {
                                (
                                    0i32,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                )
                            }
                            DbColumnType::Int2 => {
                                (
                                    1i32,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                )
                            }
                            DbColumnType::Int4 => {
                                (
                                    2i32,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                )
                            }
                            DbColumnType::Int8 => {
                                (
                                    3i32,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                )
                            }
                            DbColumnType::Float4 => {
                                (
                                    4i32,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                )
                            }
                            DbColumnType::Float8 => {
                                (
                                    5i32,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                )
                            }
                            DbColumnType::Numeric => {
                                (
                                    6i32,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                )
                            }
                            DbColumnType::Boolean => {
                                (
                                    7i32,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                )
                            }
                            DbColumnType::Text => {
                                (
                                    8i32,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                )
                            }
                            DbColumnType::Varchar => {
                                (
                                    9i32,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                )
                            }
                            DbColumnType::Bpchar => {
                                (
                                    10i32,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                )
                            }
                            DbColumnType::Timestamp => {
                                (
                                    11i32,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                )
                            }
                            DbColumnType::Timestamptz => {
                                (
                                    12i32,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                )
                            }
                            DbColumnType::Date => {
                                (
                                    13i32,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                )
                            }
                            DbColumnType::Time => {
                                (
                                    14i32,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                )
                            }
                            DbColumnType::Timetz => {
                                (
                                    15i32,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                )
                            }
                            DbColumnType::Interval => {
                                (
                                    16i32,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                )
                            }
                            DbColumnType::Bytea => {
                                (
                                    17i32,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                )
                            }
                            DbColumnType::Uuid => {
                                (
                                    18i32,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                )
                            }
                            DbColumnType::Xml => {
                                (
                                    19i32,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                )
                            }
                            DbColumnType::Json => {
                                (
                                    20i32,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                )
                            }
                            DbColumnType::Jsonb => {
                                (
                                    21i32,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                )
                            }
                            DbColumnType::Jsonpath => {
                                (
                                    22i32,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                )
                            }
                            DbColumnType::Inet => {
                                (
                                    23i32,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                )
                            }
                            DbColumnType::Cidr => {
                                (
                                    24i32,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                )
                            }
                            DbColumnType::Macaddr => {
                                (
                                    25i32,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                )
                            }
                            DbColumnType::Bit => {
                                (
                                    26i32,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                )
                            }
                            DbColumnType::Varbit => {
                                (
                                    27i32,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                )
                            }
                            DbColumnType::Int4range => {
                                (
                                    28i32,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                )
                            }
                            DbColumnType::Int8range => {
                                (
                                    29i32,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                )
                            }
                            DbColumnType::Numrange => {
                                (
                                    30i32,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                )
                            }
                            DbColumnType::Tsrange => {
                                (
                                    31i32,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                )
                            }
                            DbColumnType::Tstzrange => {
                                (
                                    32i32,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                )
                            }
                            DbColumnType::Daterange => {
                                (
                                    33i32,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                )
                            }
                            DbColumnType::Money => {
                                (
                                    34i32,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                )
                            }
                            DbColumnType::Oid => {
                                (
                                    35i32,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                )
                            }
                            DbColumnType::Enumeration(e) => {
                                let EnumerationType { name: name0 } = e;
                                let vec1 = name0;
                                let ptr1 = vec1.as_ptr().cast::<u8>();
                                let len1 = vec1.len();
                                (
                                    36i32,
                                    ptr1.cast_mut(),
                                    len1,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                )
                            }
                            DbColumnType::Composite(e) => {
                                let CompositeType {
                                    name: name2,
                                    attributes: attributes2,
                                } = e;
                                let vec3 = name2;
                                let ptr3 = vec3.as_ptr().cast::<u8>();
                                let len3 = vec3.len();
                                let vec6 = attributes2;
                                let len6 = vec6.len();
                                let layout6 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec6.len() * 12,
                                    4,
                                );
                                let result6 = if layout6.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout6).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout6);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec6.into_iter().enumerate() {
                                    let base = result6.add(i * 12);
                                    {
                                        let (t4_0, t4_1) = e;
                                        let vec5 = t4_0;
                                        let ptr5 = vec5.as_ptr().cast::<u8>();
                                        let len5 = vec5.len();
                                        *base.add(4).cast::<usize>() = len5;
                                        *base.add(0).cast::<*mut u8>() = ptr5.cast_mut();
                                        *base.add(8).cast::<i32>() = (t4_1).take_handle() as i32;
                                    }
                                }
                                cleanup_list.extend_from_slice(&[(result6, layout6)]);
                                (37i32, ptr3.cast_mut(), len3, result6, len6)
                            }
                            DbColumnType::Domain(e) => {
                                let DomainType { name: name7, base_type: base_type7 } = e;
                                let vec8 = name7;
                                let ptr8 = vec8.as_ptr().cast::<u8>();
                                let len8 = vec8.len();
                                (
                                    38i32,
                                    ptr8.cast_mut(),
                                    len8,
                                    (base_type7).take_handle() as i32 as *mut u8,
                                    0usize,
                                )
                            }
                            DbColumnType::Array(e) => {
                                (
                                    39i32,
                                    (e).take_handle() as i32 as *mut u8,
                                    0usize,
                                    ::core::ptr::null_mut(),
                                    0usize,
                                )
                            }
                            DbColumnType::Range(e) => {
                                let RangeType { name: name9, base_type: base_type9 } = e;
                                let vec10 = name9;
                                let ptr10 = vec10.as_ptr().cast::<u8>();
                                let len10 = vec10.len();
                                (
                                    40i32,
                                    ptr10.cast_mut(),
                                    len10,
                                    (base_type9).take_handle() as i32 as *mut u8,
                                    0usize,
                                )
                            }
                        };
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rdbms/postgres@0.0.1")]
                        extern "C" {
                            #[link_name = "[constructor]lazy-db-column-type"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                            ) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            result11_0,
                            result11_1,
                            result11_2,
                            result11_3,
                            result11_4,
                        );
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        LazyDbColumnType::from_handle(ret as u32)
                    }
                }
            }
            impl LazyDbColumnType {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get(&self) -> DbColumnType {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 20]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 20],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rdbms/postgres@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]lazy-db-column-type.get"]
                            fn wit_import(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        let v24 = match l1 {
                            0 => DbColumnType::Character,
                            1 => DbColumnType::Int2,
                            2 => DbColumnType::Int4,
                            3 => DbColumnType::Int8,
                            4 => DbColumnType::Float4,
                            5 => DbColumnType::Float8,
                            6 => DbColumnType::Numeric,
                            7 => DbColumnType::Boolean,
                            8 => DbColumnType::Text,
                            9 => DbColumnType::Varchar,
                            10 => DbColumnType::Bpchar,
                            11 => DbColumnType::Timestamp,
                            12 => DbColumnType::Timestamptz,
                            13 => DbColumnType::Date,
                            14 => DbColumnType::Time,
                            15 => DbColumnType::Timetz,
                            16 => DbColumnType::Interval,
                            17 => DbColumnType::Bytea,
                            18 => DbColumnType::Uuid,
                            19 => DbColumnType::Xml,
                            20 => DbColumnType::Json,
                            21 => DbColumnType::Jsonb,
                            22 => DbColumnType::Jsonpath,
                            23 => DbColumnType::Inet,
                            24 => DbColumnType::Cidr,
                            25 => DbColumnType::Macaddr,
                            26 => DbColumnType::Bit,
                            27 => DbColumnType::Varbit,
                            28 => DbColumnType::Int4range,
                            29 => DbColumnType::Int8range,
                            30 => DbColumnType::Numrange,
                            31 => DbColumnType::Tsrange,
                            32 => DbColumnType::Tstzrange,
                            33 => DbColumnType::Daterange,
                            34 => DbColumnType::Money,
                            35 => DbColumnType::Oid,
                            36 => {
                                let e24 = {
                                    let l2 = *ptr0.add(4).cast::<*mut u8>();
                                    let l3 = *ptr0.add(8).cast::<usize>();
                                    let len4 = l3;
                                    let bytes4 = _rt::Vec::from_raw_parts(
                                        l2.cast(),
                                        len4,
                                        len4,
                                    );
                                    EnumerationType {
                                        name: _rt::string_lift(bytes4),
                                    }
                                };
                                DbColumnType::Enumeration(e24)
                            }
                            37 => {
                                let e24 = {
                                    let l5 = *ptr0.add(4).cast::<*mut u8>();
                                    let l6 = *ptr0.add(8).cast::<usize>();
                                    let len7 = l6;
                                    let bytes7 = _rt::Vec::from_raw_parts(
                                        l5.cast(),
                                        len7,
                                        len7,
                                    );
                                    let l8 = *ptr0.add(12).cast::<*mut u8>();
                                    let l9 = *ptr0.add(16).cast::<usize>();
                                    let base14 = l8;
                                    let len14 = l9;
                                    let mut result14 = _rt::Vec::with_capacity(len14);
                                    for i in 0..len14 {
                                        let base = base14.add(i * 12);
                                        let e14 = {
                                            let l10 = *base.add(0).cast::<*mut u8>();
                                            let l11 = *base.add(4).cast::<usize>();
                                            let len12 = l11;
                                            let bytes12 = _rt::Vec::from_raw_parts(
                                                l10.cast(),
                                                len12,
                                                len12,
                                            );
                                            let l13 = *base.add(8).cast::<i32>();
                                            (
                                                _rt::string_lift(bytes12),
                                                LazyDbColumnType::from_handle(l13 as u32),
                                            )
                                        };
                                        result14.push(e14);
                                    }
                                    _rt::cabi_dealloc(base14, len14 * 12, 4);
                                    CompositeType {
                                        name: _rt::string_lift(bytes7),
                                        attributes: result14,
                                    }
                                };
                                DbColumnType::Composite(e24)
                            }
                            38 => {
                                let e24 = {
                                    let l15 = *ptr0.add(4).cast::<*mut u8>();
                                    let l16 = *ptr0.add(8).cast::<usize>();
                                    let len17 = l16;
                                    let bytes17 = _rt::Vec::from_raw_parts(
                                        l15.cast(),
                                        len17,
                                        len17,
                                    );
                                    let l18 = *ptr0.add(12).cast::<i32>();
                                    DomainType {
                                        name: _rt::string_lift(bytes17),
                                        base_type: LazyDbColumnType::from_handle(l18 as u32),
                                    }
                                };
                                DbColumnType::Domain(e24)
                            }
                            39 => {
                                let e24 = {
                                    let l19 = *ptr0.add(4).cast::<i32>();
                                    LazyDbColumnType::from_handle(l19 as u32)
                                };
                                DbColumnType::Array(e24)
                            }
                            n => {
                                debug_assert_eq!(n, 40, "invalid enum discriminant");
                                let e24 = {
                                    let l20 = *ptr0.add(4).cast::<*mut u8>();
                                    let l21 = *ptr0.add(8).cast::<usize>();
                                    let len22 = l21;
                                    let bytes22 = _rt::Vec::from_raw_parts(
                                        l20.cast(),
                                        len22,
                                        len22,
                                    );
                                    let l23 = *ptr0.add(12).cast::<i32>();
                                    RangeType {
                                        name: _rt::string_lift(bytes22),
                                        base_type: LazyDbColumnType::from_handle(l23 as u32),
                                    }
                                };
                                DbColumnType::Range(e24)
                            }
                        };
                        v24
                    }
                }
            }
            impl DbResultStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_columns(&self) -> _rt::Vec<DbColumn> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 8],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rdbms/postgres@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]db-result-stream.get-columns"]
                            fn wit_import(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let base34 = l1;
                        let len34 = l2;
                        let mut result34 = _rt::Vec::with_capacity(len34);
                        for i in 0..len34 {
                            let base = base34.add(i * 48);
                            let e34 = {
                                let l3 = *base.add(0).cast::<i64>();
                                let l4 = *base.add(8).cast::<*mut u8>();
                                let l5 = *base.add(12).cast::<usize>();
                                let len6 = l5;
                                let bytes6 = _rt::Vec::from_raw_parts(
                                    l4.cast(),
                                    len6,
                                    len6,
                                );
                                let l7 = i32::from(*base.add(16).cast::<u8>());
                                let v30 = match l7 {
                                    0 => DbColumnType::Character,
                                    1 => DbColumnType::Int2,
                                    2 => DbColumnType::Int4,
                                    3 => DbColumnType::Int8,
                                    4 => DbColumnType::Float4,
                                    5 => DbColumnType::Float8,
                                    6 => DbColumnType::Numeric,
                                    7 => DbColumnType::Boolean,
                                    8 => DbColumnType::Text,
                                    9 => DbColumnType::Varchar,
                                    10 => DbColumnType::Bpchar,
                                    11 => DbColumnType::Timestamp,
                                    12 => DbColumnType::Timestamptz,
                                    13 => DbColumnType::Date,
                                    14 => DbColumnType::Time,
                                    15 => DbColumnType::Timetz,
                                    16 => DbColumnType::Interval,
                                    17 => DbColumnType::Bytea,
                                    18 => DbColumnType::Uuid,
                                    19 => DbColumnType::Xml,
                                    20 => DbColumnType::Json,
                                    21 => DbColumnType::Jsonb,
                                    22 => DbColumnType::Jsonpath,
                                    23 => DbColumnType::Inet,
                                    24 => DbColumnType::Cidr,
                                    25 => DbColumnType::Macaddr,
                                    26 => DbColumnType::Bit,
                                    27 => DbColumnType::Varbit,
                                    28 => DbColumnType::Int4range,
                                    29 => DbColumnType::Int8range,
                                    30 => DbColumnType::Numrange,
                                    31 => DbColumnType::Tsrange,
                                    32 => DbColumnType::Tstzrange,
                                    33 => DbColumnType::Daterange,
                                    34 => DbColumnType::Money,
                                    35 => DbColumnType::Oid,
                                    36 => {
                                        let e30 = {
                                            let l8 = *base.add(20).cast::<*mut u8>();
                                            let l9 = *base.add(24).cast::<usize>();
                                            let len10 = l9;
                                            let bytes10 = _rt::Vec::from_raw_parts(
                                                l8.cast(),
                                                len10,
                                                len10,
                                            );
                                            EnumerationType {
                                                name: _rt::string_lift(bytes10),
                                            }
                                        };
                                        DbColumnType::Enumeration(e30)
                                    }
                                    37 => {
                                        let e30 = {
                                            let l11 = *base.add(20).cast::<*mut u8>();
                                            let l12 = *base.add(24).cast::<usize>();
                                            let len13 = l12;
                                            let bytes13 = _rt::Vec::from_raw_parts(
                                                l11.cast(),
                                                len13,
                                                len13,
                                            );
                                            let l14 = *base.add(28).cast::<*mut u8>();
                                            let l15 = *base.add(32).cast::<usize>();
                                            let base20 = l14;
                                            let len20 = l15;
                                            let mut result20 = _rt::Vec::with_capacity(len20);
                                            for i in 0..len20 {
                                                let base = base20.add(i * 12);
                                                let e20 = {
                                                    let l16 = *base.add(0).cast::<*mut u8>();
                                                    let l17 = *base.add(4).cast::<usize>();
                                                    let len18 = l17;
                                                    let bytes18 = _rt::Vec::from_raw_parts(
                                                        l16.cast(),
                                                        len18,
                                                        len18,
                                                    );
                                                    let l19 = *base.add(8).cast::<i32>();
                                                    (
                                                        _rt::string_lift(bytes18),
                                                        LazyDbColumnType::from_handle(l19 as u32),
                                                    )
                                                };
                                                result20.push(e20);
                                            }
                                            _rt::cabi_dealloc(base20, len20 * 12, 4);
                                            CompositeType {
                                                name: _rt::string_lift(bytes13),
                                                attributes: result20,
                                            }
                                        };
                                        DbColumnType::Composite(e30)
                                    }
                                    38 => {
                                        let e30 = {
                                            let l21 = *base.add(20).cast::<*mut u8>();
                                            let l22 = *base.add(24).cast::<usize>();
                                            let len23 = l22;
                                            let bytes23 = _rt::Vec::from_raw_parts(
                                                l21.cast(),
                                                len23,
                                                len23,
                                            );
                                            let l24 = *base.add(28).cast::<i32>();
                                            DomainType {
                                                name: _rt::string_lift(bytes23),
                                                base_type: LazyDbColumnType::from_handle(l24 as u32),
                                            }
                                        };
                                        DbColumnType::Domain(e30)
                                    }
                                    39 => {
                                        let e30 = {
                                            let l25 = *base.add(20).cast::<i32>();
                                            LazyDbColumnType::from_handle(l25 as u32)
                                        };
                                        DbColumnType::Array(e30)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 40, "invalid enum discriminant");
                                        let e30 = {
                                            let l26 = *base.add(20).cast::<*mut u8>();
                                            let l27 = *base.add(24).cast::<usize>();
                                            let len28 = l27;
                                            let bytes28 = _rt::Vec::from_raw_parts(
                                                l26.cast(),
                                                len28,
                                                len28,
                                            );
                                            let l29 = *base.add(28).cast::<i32>();
                                            RangeType {
                                                name: _rt::string_lift(bytes28),
                                                base_type: LazyDbColumnType::from_handle(l29 as u32),
                                            }
                                        };
                                        DbColumnType::Range(e30)
                                    }
                                };
                                let l31 = *base.add(36).cast::<*mut u8>();
                                let l32 = *base.add(40).cast::<usize>();
                                let len33 = l32;
                                let bytes33 = _rt::Vec::from_raw_parts(
                                    l31.cast(),
                                    len33,
                                    len33,
                                );
                                DbColumn {
                                    ordinal: l3 as u64,
                                    name: _rt::string_lift(bytes6),
                                    db_type: v30,
                                    db_type_name: _rt::string_lift(bytes33),
                                }
                            };
                            result34.push(e34);
                        }
                        _rt::cabi_dealloc(base34, len34 * 48, 8);
                        result34
                    }
                }
            }
            impl DbResultStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_next(&self) -> Option<_rt::Vec<DbRow>> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 12],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rdbms/postgres@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]db-result-stream.get-next"]
                            fn wit_import(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<*mut u8>();
                                    let l3 = *ptr0.add(8).cast::<usize>();
                                    let base267 = l2;
                                    let len267 = l3;
                                    let mut result267 = _rt::Vec::with_capacity(len267);
                                    for i in 0..len267 {
                                        let base = base267.add(i * 8);
                                        let e267 = {
                                            let l4 = *base.add(0).cast::<*mut u8>();
                                            let l5 = *base.add(4).cast::<usize>();
                                            let base266 = l4;
                                            let len266 = l5;
                                            let mut result266 = _rt::Vec::with_capacity(len266);
                                            for i in 0..len266 {
                                                let base = base266.add(i * 56);
                                                let e266 = {
                                                    let l6 = i32::from(*base.add(0).cast::<u8>());
                                                    let v265 = match l6 {
                                                        0 => {
                                                            let e265 = {
                                                                let l7 = i32::from(*base.add(8).cast::<i8>());
                                                                l7 as i8
                                                            };
                                                            DbValue::Character(e265)
                                                        }
                                                        1 => {
                                                            let e265 = {
                                                                let l8 = i32::from(*base.add(8).cast::<i16>());
                                                                l8 as i16
                                                            };
                                                            DbValue::Int2(e265)
                                                        }
                                                        2 => {
                                                            let e265 = {
                                                                let l9 = *base.add(8).cast::<i32>();
                                                                l9
                                                            };
                                                            DbValue::Int4(e265)
                                                        }
                                                        3 => {
                                                            let e265 = {
                                                                let l10 = *base.add(8).cast::<i64>();
                                                                l10
                                                            };
                                                            DbValue::Int8(e265)
                                                        }
                                                        4 => {
                                                            let e265 = {
                                                                let l11 = *base.add(8).cast::<f32>();
                                                                l11
                                                            };
                                                            DbValue::Float4(e265)
                                                        }
                                                        5 => {
                                                            let e265 = {
                                                                let l12 = *base.add(8).cast::<f64>();
                                                                l12
                                                            };
                                                            DbValue::Float8(e265)
                                                        }
                                                        6 => {
                                                            let e265 = {
                                                                let l13 = *base.add(8).cast::<*mut u8>();
                                                                let l14 = *base.add(12).cast::<usize>();
                                                                let len15 = l14;
                                                                let bytes15 = _rt::Vec::from_raw_parts(
                                                                    l13.cast(),
                                                                    len15,
                                                                    len15,
                                                                );
                                                                _rt::string_lift(bytes15)
                                                            };
                                                            DbValue::Numeric(e265)
                                                        }
                                                        7 => {
                                                            let e265 = {
                                                                let l16 = i32::from(*base.add(8).cast::<u8>());
                                                                _rt::bool_lift(l16 as u8)
                                                            };
                                                            DbValue::Boolean(e265)
                                                        }
                                                        8 => {
                                                            let e265 = {
                                                                let l17 = *base.add(8).cast::<*mut u8>();
                                                                let l18 = *base.add(12).cast::<usize>();
                                                                let len19 = l18;
                                                                let bytes19 = _rt::Vec::from_raw_parts(
                                                                    l17.cast(),
                                                                    len19,
                                                                    len19,
                                                                );
                                                                _rt::string_lift(bytes19)
                                                            };
                                                            DbValue::Text(e265)
                                                        }
                                                        9 => {
                                                            let e265 = {
                                                                let l20 = *base.add(8).cast::<*mut u8>();
                                                                let l21 = *base.add(12).cast::<usize>();
                                                                let len22 = l21;
                                                                let bytes22 = _rt::Vec::from_raw_parts(
                                                                    l20.cast(),
                                                                    len22,
                                                                    len22,
                                                                );
                                                                _rt::string_lift(bytes22)
                                                            };
                                                            DbValue::Varchar(e265)
                                                        }
                                                        10 => {
                                                            let e265 = {
                                                                let l23 = *base.add(8).cast::<*mut u8>();
                                                                let l24 = *base.add(12).cast::<usize>();
                                                                let len25 = l24;
                                                                let bytes25 = _rt::Vec::from_raw_parts(
                                                                    l23.cast(),
                                                                    len25,
                                                                    len25,
                                                                );
                                                                _rt::string_lift(bytes25)
                                                            };
                                                            DbValue::Bpchar(e265)
                                                        }
                                                        11 => {
                                                            let e265 = {
                                                                let l26 = *base.add(8).cast::<i32>();
                                                                let l27 = i32::from(*base.add(12).cast::<u8>());
                                                                let l28 = i32::from(*base.add(13).cast::<u8>());
                                                                let l29 = i32::from(*base.add(16).cast::<u8>());
                                                                let l30 = i32::from(*base.add(17).cast::<u8>());
                                                                let l31 = i32::from(*base.add(18).cast::<u8>());
                                                                let l32 = *base.add(20).cast::<i32>();
                                                                super::super::super::golem::rdbms::types::Timestamp {
                                                                    date: super::super::super::golem::rdbms::types::Date {
                                                                        year: l26,
                                                                        month: l27 as u8,
                                                                        day: l28 as u8,
                                                                    },
                                                                    time: super::super::super::golem::rdbms::types::Time {
                                                                        hour: l29 as u8,
                                                                        minute: l30 as u8,
                                                                        second: l31 as u8,
                                                                        nanosecond: l32 as u32,
                                                                    },
                                                                }
                                                            };
                                                            DbValue::Timestamp(e265)
                                                        }
                                                        12 => {
                                                            let e265 = {
                                                                let l33 = *base.add(8).cast::<i32>();
                                                                let l34 = i32::from(*base.add(12).cast::<u8>());
                                                                let l35 = i32::from(*base.add(13).cast::<u8>());
                                                                let l36 = i32::from(*base.add(16).cast::<u8>());
                                                                let l37 = i32::from(*base.add(17).cast::<u8>());
                                                                let l38 = i32::from(*base.add(18).cast::<u8>());
                                                                let l39 = *base.add(20).cast::<i32>();
                                                                let l40 = *base.add(24).cast::<i32>();
                                                                super::super::super::golem::rdbms::types::Timestamptz {
                                                                    timestamp: super::super::super::golem::rdbms::types::Timestamp {
                                                                        date: super::super::super::golem::rdbms::types::Date {
                                                                            year: l33,
                                                                            month: l34 as u8,
                                                                            day: l35 as u8,
                                                                        },
                                                                        time: super::super::super::golem::rdbms::types::Time {
                                                                            hour: l36 as u8,
                                                                            minute: l37 as u8,
                                                                            second: l38 as u8,
                                                                            nanosecond: l39 as u32,
                                                                        },
                                                                    },
                                                                    offset: l40,
                                                                }
                                                            };
                                                            DbValue::Timestamptz(e265)
                                                        }
                                                        13 => {
                                                            let e265 = {
                                                                let l41 = *base.add(8).cast::<i32>();
                                                                let l42 = i32::from(*base.add(12).cast::<u8>());
                                                                let l43 = i32::from(*base.add(13).cast::<u8>());
                                                                super::super::super::golem::rdbms::types::Date {
                                                                    year: l41,
                                                                    month: l42 as u8,
                                                                    day: l43 as u8,
                                                                }
                                                            };
                                                            DbValue::Date(e265)
                                                        }
                                                        14 => {
                                                            let e265 = {
                                                                let l44 = i32::from(*base.add(8).cast::<u8>());
                                                                let l45 = i32::from(*base.add(9).cast::<u8>());
                                                                let l46 = i32::from(*base.add(10).cast::<u8>());
                                                                let l47 = *base.add(12).cast::<i32>();
                                                                super::super::super::golem::rdbms::types::Time {
                                                                    hour: l44 as u8,
                                                                    minute: l45 as u8,
                                                                    second: l46 as u8,
                                                                    nanosecond: l47 as u32,
                                                                }
                                                            };
                                                            DbValue::Time(e265)
                                                        }
                                                        15 => {
                                                            let e265 = {
                                                                let l48 = i32::from(*base.add(8).cast::<u8>());
                                                                let l49 = i32::from(*base.add(9).cast::<u8>());
                                                                let l50 = i32::from(*base.add(10).cast::<u8>());
                                                                let l51 = *base.add(12).cast::<i32>();
                                                                let l52 = *base.add(16).cast::<i32>();
                                                                super::super::super::golem::rdbms::types::Timetz {
                                                                    time: super::super::super::golem::rdbms::types::Time {
                                                                        hour: l48 as u8,
                                                                        minute: l49 as u8,
                                                                        second: l50 as u8,
                                                                        nanosecond: l51 as u32,
                                                                    },
                                                                    offset: l52,
                                                                }
                                                            };
                                                            DbValue::Timetz(e265)
                                                        }
                                                        16 => {
                                                            let e265 = {
                                                                let l53 = *base.add(8).cast::<i32>();
                                                                let l54 = *base.add(12).cast::<i32>();
                                                                let l55 = *base.add(16).cast::<i64>();
                                                                Interval {
                                                                    months: l53,
                                                                    days: l54,
                                                                    microseconds: l55,
                                                                }
                                                            };
                                                            DbValue::Interval(e265)
                                                        }
                                                        17 => {
                                                            let e265 = {
                                                                let l56 = *base.add(8).cast::<*mut u8>();
                                                                let l57 = *base.add(12).cast::<usize>();
                                                                let len58 = l57;
                                                                _rt::Vec::from_raw_parts(l56.cast(), len58, len58)
                                                            };
                                                            DbValue::Bytea(e265)
                                                        }
                                                        18 => {
                                                            let e265 = {
                                                                let l59 = *base.add(8).cast::<*mut u8>();
                                                                let l60 = *base.add(12).cast::<usize>();
                                                                let len61 = l60;
                                                                let bytes61 = _rt::Vec::from_raw_parts(
                                                                    l59.cast(),
                                                                    len61,
                                                                    len61,
                                                                );
                                                                _rt::string_lift(bytes61)
                                                            };
                                                            DbValue::Json(e265)
                                                        }
                                                        19 => {
                                                            let e265 = {
                                                                let l62 = *base.add(8).cast::<*mut u8>();
                                                                let l63 = *base.add(12).cast::<usize>();
                                                                let len64 = l63;
                                                                let bytes64 = _rt::Vec::from_raw_parts(
                                                                    l62.cast(),
                                                                    len64,
                                                                    len64,
                                                                );
                                                                _rt::string_lift(bytes64)
                                                            };
                                                            DbValue::Jsonb(e265)
                                                        }
                                                        20 => {
                                                            let e265 = {
                                                                let l65 = *base.add(8).cast::<*mut u8>();
                                                                let l66 = *base.add(12).cast::<usize>();
                                                                let len67 = l66;
                                                                let bytes67 = _rt::Vec::from_raw_parts(
                                                                    l65.cast(),
                                                                    len67,
                                                                    len67,
                                                                );
                                                                _rt::string_lift(bytes67)
                                                            };
                                                            DbValue::Jsonpath(e265)
                                                        }
                                                        21 => {
                                                            let e265 = {
                                                                let l68 = *base.add(8).cast::<*mut u8>();
                                                                let l69 = *base.add(12).cast::<usize>();
                                                                let len70 = l69;
                                                                let bytes70 = _rt::Vec::from_raw_parts(
                                                                    l68.cast(),
                                                                    len70,
                                                                    len70,
                                                                );
                                                                _rt::string_lift(bytes70)
                                                            };
                                                            DbValue::Xml(e265)
                                                        }
                                                        22 => {
                                                            let e265 = {
                                                                let l71 = *base.add(8).cast::<i64>();
                                                                let l72 = *base.add(16).cast::<i64>();
                                                                super::super::super::golem::rdbms::types::Uuid {
                                                                    high_bits: l71 as u64,
                                                                    low_bits: l72 as u64,
                                                                }
                                                            };
                                                            DbValue::Uuid(e265)
                                                        }
                                                        23 => {
                                                            let e265 = {
                                                                let l73 = i32::from(*base.add(8).cast::<u8>());
                                                                use super::super::super::golem::rdbms::types::IpAddress as V86;
                                                                let v86 = match l73 {
                                                                    0 => {
                                                                        let e86 = {
                                                                            let l74 = i32::from(*base.add(10).cast::<u8>());
                                                                            let l75 = i32::from(*base.add(11).cast::<u8>());
                                                                            let l76 = i32::from(*base.add(12).cast::<u8>());
                                                                            let l77 = i32::from(*base.add(13).cast::<u8>());
                                                                            (l74 as u8, l75 as u8, l76 as u8, l77 as u8)
                                                                        };
                                                                        V86::Ipv4(e86)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                                        let e86 = {
                                                                            let l78 = i32::from(*base.add(10).cast::<u16>());
                                                                            let l79 = i32::from(*base.add(12).cast::<u16>());
                                                                            let l80 = i32::from(*base.add(14).cast::<u16>());
                                                                            let l81 = i32::from(*base.add(16).cast::<u16>());
                                                                            let l82 = i32::from(*base.add(18).cast::<u16>());
                                                                            let l83 = i32::from(*base.add(20).cast::<u16>());
                                                                            let l84 = i32::from(*base.add(22).cast::<u16>());
                                                                            let l85 = i32::from(*base.add(24).cast::<u16>());
                                                                            (
                                                                                l78 as u16,
                                                                                l79 as u16,
                                                                                l80 as u16,
                                                                                l81 as u16,
                                                                                l82 as u16,
                                                                                l83 as u16,
                                                                                l84 as u16,
                                                                                l85 as u16,
                                                                            )
                                                                        };
                                                                        V86::Ipv6(e86)
                                                                    }
                                                                };
                                                                v86
                                                            };
                                                            DbValue::Inet(e265)
                                                        }
                                                        24 => {
                                                            let e265 = {
                                                                let l87 = i32::from(*base.add(8).cast::<u8>());
                                                                use super::super::super::golem::rdbms::types::IpAddress as V100;
                                                                let v100 = match l87 {
                                                                    0 => {
                                                                        let e100 = {
                                                                            let l88 = i32::from(*base.add(10).cast::<u8>());
                                                                            let l89 = i32::from(*base.add(11).cast::<u8>());
                                                                            let l90 = i32::from(*base.add(12).cast::<u8>());
                                                                            let l91 = i32::from(*base.add(13).cast::<u8>());
                                                                            (l88 as u8, l89 as u8, l90 as u8, l91 as u8)
                                                                        };
                                                                        V100::Ipv4(e100)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                                        let e100 = {
                                                                            let l92 = i32::from(*base.add(10).cast::<u16>());
                                                                            let l93 = i32::from(*base.add(12).cast::<u16>());
                                                                            let l94 = i32::from(*base.add(14).cast::<u16>());
                                                                            let l95 = i32::from(*base.add(16).cast::<u16>());
                                                                            let l96 = i32::from(*base.add(18).cast::<u16>());
                                                                            let l97 = i32::from(*base.add(20).cast::<u16>());
                                                                            let l98 = i32::from(*base.add(22).cast::<u16>());
                                                                            let l99 = i32::from(*base.add(24).cast::<u16>());
                                                                            (
                                                                                l92 as u16,
                                                                                l93 as u16,
                                                                                l94 as u16,
                                                                                l95 as u16,
                                                                                l96 as u16,
                                                                                l97 as u16,
                                                                                l98 as u16,
                                                                                l99 as u16,
                                                                            )
                                                                        };
                                                                        V100::Ipv6(e100)
                                                                    }
                                                                };
                                                                v100
                                                            };
                                                            DbValue::Cidr(e265)
                                                        }
                                                        25 => {
                                                            let e265 = {
                                                                let l101 = i32::from(*base.add(8).cast::<u8>());
                                                                let l102 = i32::from(*base.add(9).cast::<u8>());
                                                                let l103 = i32::from(*base.add(10).cast::<u8>());
                                                                let l104 = i32::from(*base.add(11).cast::<u8>());
                                                                let l105 = i32::from(*base.add(12).cast::<u8>());
                                                                let l106 = i32::from(*base.add(13).cast::<u8>());
                                                                super::super::super::golem::rdbms::types::MacAddress {
                                                                    octets: (
                                                                        l101 as u8,
                                                                        l102 as u8,
                                                                        l103 as u8,
                                                                        l104 as u8,
                                                                        l105 as u8,
                                                                        l106 as u8,
                                                                    ),
                                                                }
                                                            };
                                                            DbValue::Macaddr(e265)
                                                        }
                                                        26 => {
                                                            let e265 = {
                                                                let l107 = *base.add(8).cast::<*mut u8>();
                                                                let l108 = *base.add(12).cast::<usize>();
                                                                let base110 = l107;
                                                                let len110 = l108;
                                                                let mut result110 = _rt::Vec::with_capacity(len110);
                                                                for i in 0..len110 {
                                                                    let base = base110.add(i * 1);
                                                                    let e110 = {
                                                                        let l109 = i32::from(*base.add(0).cast::<u8>());
                                                                        _rt::bool_lift(l109 as u8)
                                                                    };
                                                                    result110.push(e110);
                                                                }
                                                                _rt::cabi_dealloc(base110, len110 * 1, 1);
                                                                result110
                                                            };
                                                            DbValue::Bit(e265)
                                                        }
                                                        27 => {
                                                            let e265 = {
                                                                let l111 = *base.add(8).cast::<*mut u8>();
                                                                let l112 = *base.add(12).cast::<usize>();
                                                                let base114 = l111;
                                                                let len114 = l112;
                                                                let mut result114 = _rt::Vec::with_capacity(len114);
                                                                for i in 0..len114 {
                                                                    let base = base114.add(i * 1);
                                                                    let e114 = {
                                                                        let l113 = i32::from(*base.add(0).cast::<u8>());
                                                                        _rt::bool_lift(l113 as u8)
                                                                    };
                                                                    result114.push(e114);
                                                                }
                                                                _rt::cabi_dealloc(base114, len114 * 1, 1);
                                                                result114
                                                            };
                                                            DbValue::Varbit(e265)
                                                        }
                                                        28 => {
                                                            let e265 = {
                                                                let l115 = i32::from(*base.add(8).cast::<u8>());
                                                                let v118 = match l115 {
                                                                    0 => {
                                                                        let e118 = {
                                                                            let l116 = *base.add(12).cast::<i32>();
                                                                            l116
                                                                        };
                                                                        Int4bound::Included(e118)
                                                                    }
                                                                    1 => {
                                                                        let e118 = {
                                                                            let l117 = *base.add(12).cast::<i32>();
                                                                            l117
                                                                        };
                                                                        Int4bound::Excluded(e118)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                        Int4bound::Unbounded
                                                                    }
                                                                };
                                                                let l119 = i32::from(*base.add(16).cast::<u8>());
                                                                let v122 = match l119 {
                                                                    0 => {
                                                                        let e122 = {
                                                                            let l120 = *base.add(20).cast::<i32>();
                                                                            l120
                                                                        };
                                                                        Int4bound::Included(e122)
                                                                    }
                                                                    1 => {
                                                                        let e122 = {
                                                                            let l121 = *base.add(20).cast::<i32>();
                                                                            l121
                                                                        };
                                                                        Int4bound::Excluded(e122)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                        Int4bound::Unbounded
                                                                    }
                                                                };
                                                                Int4range {
                                                                    start: v118,
                                                                    end: v122,
                                                                }
                                                            };
                                                            DbValue::Int4range(e265)
                                                        }
                                                        29 => {
                                                            let e265 = {
                                                                let l123 = i32::from(*base.add(8).cast::<u8>());
                                                                let v126 = match l123 {
                                                                    0 => {
                                                                        let e126 = {
                                                                            let l124 = *base.add(16).cast::<i64>();
                                                                            l124
                                                                        };
                                                                        Int8bound::Included(e126)
                                                                    }
                                                                    1 => {
                                                                        let e126 = {
                                                                            let l125 = *base.add(16).cast::<i64>();
                                                                            l125
                                                                        };
                                                                        Int8bound::Excluded(e126)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                        Int8bound::Unbounded
                                                                    }
                                                                };
                                                                let l127 = i32::from(*base.add(24).cast::<u8>());
                                                                let v130 = match l127 {
                                                                    0 => {
                                                                        let e130 = {
                                                                            let l128 = *base.add(32).cast::<i64>();
                                                                            l128
                                                                        };
                                                                        Int8bound::Included(e130)
                                                                    }
                                                                    1 => {
                                                                        let e130 = {
                                                                            let l129 = *base.add(32).cast::<i64>();
                                                                            l129
                                                                        };
                                                                        Int8bound::Excluded(e130)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                        Int8bound::Unbounded
                                                                    }
                                                                };
                                                                Int8range {
                                                                    start: v126,
                                                                    end: v130,
                                                                }
                                                            };
                                                            DbValue::Int8range(e265)
                                                        }
                                                        30 => {
                                                            let e265 = {
                                                                let l131 = i32::from(*base.add(8).cast::<u8>());
                                                                let v138 = match l131 {
                                                                    0 => {
                                                                        let e138 = {
                                                                            let l132 = *base.add(12).cast::<*mut u8>();
                                                                            let l133 = *base.add(16).cast::<usize>();
                                                                            let len134 = l133;
                                                                            let bytes134 = _rt::Vec::from_raw_parts(
                                                                                l132.cast(),
                                                                                len134,
                                                                                len134,
                                                                            );
                                                                            _rt::string_lift(bytes134)
                                                                        };
                                                                        Numbound::Included(e138)
                                                                    }
                                                                    1 => {
                                                                        let e138 = {
                                                                            let l135 = *base.add(12).cast::<*mut u8>();
                                                                            let l136 = *base.add(16).cast::<usize>();
                                                                            let len137 = l136;
                                                                            let bytes137 = _rt::Vec::from_raw_parts(
                                                                                l135.cast(),
                                                                                len137,
                                                                                len137,
                                                                            );
                                                                            _rt::string_lift(bytes137)
                                                                        };
                                                                        Numbound::Excluded(e138)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                        Numbound::Unbounded
                                                                    }
                                                                };
                                                                let l139 = i32::from(*base.add(20).cast::<u8>());
                                                                let v146 = match l139 {
                                                                    0 => {
                                                                        let e146 = {
                                                                            let l140 = *base.add(24).cast::<*mut u8>();
                                                                            let l141 = *base.add(28).cast::<usize>();
                                                                            let len142 = l141;
                                                                            let bytes142 = _rt::Vec::from_raw_parts(
                                                                                l140.cast(),
                                                                                len142,
                                                                                len142,
                                                                            );
                                                                            _rt::string_lift(bytes142)
                                                                        };
                                                                        Numbound::Included(e146)
                                                                    }
                                                                    1 => {
                                                                        let e146 = {
                                                                            let l143 = *base.add(24).cast::<*mut u8>();
                                                                            let l144 = *base.add(28).cast::<usize>();
                                                                            let len145 = l144;
                                                                            let bytes145 = _rt::Vec::from_raw_parts(
                                                                                l143.cast(),
                                                                                len145,
                                                                                len145,
                                                                            );
                                                                            _rt::string_lift(bytes145)
                                                                        };
                                                                        Numbound::Excluded(e146)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                        Numbound::Unbounded
                                                                    }
                                                                };
                                                                Numrange { start: v138, end: v146 }
                                                            };
                                                            DbValue::Numrange(e265)
                                                        }
                                                        31 => {
                                                            let e265 = {
                                                                let l147 = i32::from(*base.add(8).cast::<u8>());
                                                                let v162 = match l147 {
                                                                    0 => {
                                                                        let e162 = {
                                                                            let l148 = *base.add(12).cast::<i32>();
                                                                            let l149 = i32::from(*base.add(16).cast::<u8>());
                                                                            let l150 = i32::from(*base.add(17).cast::<u8>());
                                                                            let l151 = i32::from(*base.add(20).cast::<u8>());
                                                                            let l152 = i32::from(*base.add(21).cast::<u8>());
                                                                            let l153 = i32::from(*base.add(22).cast::<u8>());
                                                                            let l154 = *base.add(24).cast::<i32>();
                                                                            super::super::super::golem::rdbms::types::Timestamp {
                                                                                date: super::super::super::golem::rdbms::types::Date {
                                                                                    year: l148,
                                                                                    month: l149 as u8,
                                                                                    day: l150 as u8,
                                                                                },
                                                                                time: super::super::super::golem::rdbms::types::Time {
                                                                                    hour: l151 as u8,
                                                                                    minute: l152 as u8,
                                                                                    second: l153 as u8,
                                                                                    nanosecond: l154 as u32,
                                                                                },
                                                                            }
                                                                        };
                                                                        Tsbound::Included(e162)
                                                                    }
                                                                    1 => {
                                                                        let e162 = {
                                                                            let l155 = *base.add(12).cast::<i32>();
                                                                            let l156 = i32::from(*base.add(16).cast::<u8>());
                                                                            let l157 = i32::from(*base.add(17).cast::<u8>());
                                                                            let l158 = i32::from(*base.add(20).cast::<u8>());
                                                                            let l159 = i32::from(*base.add(21).cast::<u8>());
                                                                            let l160 = i32::from(*base.add(22).cast::<u8>());
                                                                            let l161 = *base.add(24).cast::<i32>();
                                                                            super::super::super::golem::rdbms::types::Timestamp {
                                                                                date: super::super::super::golem::rdbms::types::Date {
                                                                                    year: l155,
                                                                                    month: l156 as u8,
                                                                                    day: l157 as u8,
                                                                                },
                                                                                time: super::super::super::golem::rdbms::types::Time {
                                                                                    hour: l158 as u8,
                                                                                    minute: l159 as u8,
                                                                                    second: l160 as u8,
                                                                                    nanosecond: l161 as u32,
                                                                                },
                                                                            }
                                                                        };
                                                                        Tsbound::Excluded(e162)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                        Tsbound::Unbounded
                                                                    }
                                                                };
                                                                let l163 = i32::from(*base.add(28).cast::<u8>());
                                                                let v178 = match l163 {
                                                                    0 => {
                                                                        let e178 = {
                                                                            let l164 = *base.add(32).cast::<i32>();
                                                                            let l165 = i32::from(*base.add(36).cast::<u8>());
                                                                            let l166 = i32::from(*base.add(37).cast::<u8>());
                                                                            let l167 = i32::from(*base.add(40).cast::<u8>());
                                                                            let l168 = i32::from(*base.add(41).cast::<u8>());
                                                                            let l169 = i32::from(*base.add(42).cast::<u8>());
                                                                            let l170 = *base.add(44).cast::<i32>();
                                                                            super::super::super::golem::rdbms::types::Timestamp {
                                                                                date: super::super::super::golem::rdbms::types::Date {
                                                                                    year: l164,
                                                                                    month: l165 as u8,
                                                                                    day: l166 as u8,
                                                                                },
                                                                                time: super::super::super::golem::rdbms::types::Time {
                                                                                    hour: l167 as u8,
                                                                                    minute: l168 as u8,
                                                                                    second: l169 as u8,
                                                                                    nanosecond: l170 as u32,
                                                                                },
                                                                            }
                                                                        };
                                                                        Tsbound::Included(e178)
                                                                    }
                                                                    1 => {
                                                                        let e178 = {
                                                                            let l171 = *base.add(32).cast::<i32>();
                                                                            let l172 = i32::from(*base.add(36).cast::<u8>());
                                                                            let l173 = i32::from(*base.add(37).cast::<u8>());
                                                                            let l174 = i32::from(*base.add(40).cast::<u8>());
                                                                            let l175 = i32::from(*base.add(41).cast::<u8>());
                                                                            let l176 = i32::from(*base.add(42).cast::<u8>());
                                                                            let l177 = *base.add(44).cast::<i32>();
                                                                            super::super::super::golem::rdbms::types::Timestamp {
                                                                                date: super::super::super::golem::rdbms::types::Date {
                                                                                    year: l171,
                                                                                    month: l172 as u8,
                                                                                    day: l173 as u8,
                                                                                },
                                                                                time: super::super::super::golem::rdbms::types::Time {
                                                                                    hour: l174 as u8,
                                                                                    minute: l175 as u8,
                                                                                    second: l176 as u8,
                                                                                    nanosecond: l177 as u32,
                                                                                },
                                                                            }
                                                                        };
                                                                        Tsbound::Excluded(e178)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                        Tsbound::Unbounded
                                                                    }
                                                                };
                                                                Tsrange { start: v162, end: v178 }
                                                            };
                                                            DbValue::Tsrange(e265)
                                                        }
                                                        32 => {
                                                            let e265 = {
                                                                let l179 = i32::from(*base.add(8).cast::<u8>());
                                                                let v196 = match l179 {
                                                                    0 => {
                                                                        let e196 = {
                                                                            let l180 = *base.add(12).cast::<i32>();
                                                                            let l181 = i32::from(*base.add(16).cast::<u8>());
                                                                            let l182 = i32::from(*base.add(17).cast::<u8>());
                                                                            let l183 = i32::from(*base.add(20).cast::<u8>());
                                                                            let l184 = i32::from(*base.add(21).cast::<u8>());
                                                                            let l185 = i32::from(*base.add(22).cast::<u8>());
                                                                            let l186 = *base.add(24).cast::<i32>();
                                                                            let l187 = *base.add(28).cast::<i32>();
                                                                            super::super::super::golem::rdbms::types::Timestamptz {
                                                                                timestamp: super::super::super::golem::rdbms::types::Timestamp {
                                                                                    date: super::super::super::golem::rdbms::types::Date {
                                                                                        year: l180,
                                                                                        month: l181 as u8,
                                                                                        day: l182 as u8,
                                                                                    },
                                                                                    time: super::super::super::golem::rdbms::types::Time {
                                                                                        hour: l183 as u8,
                                                                                        minute: l184 as u8,
                                                                                        second: l185 as u8,
                                                                                        nanosecond: l186 as u32,
                                                                                    },
                                                                                },
                                                                                offset: l187,
                                                                            }
                                                                        };
                                                                        Tstzbound::Included(e196)
                                                                    }
                                                                    1 => {
                                                                        let e196 = {
                                                                            let l188 = *base.add(12).cast::<i32>();
                                                                            let l189 = i32::from(*base.add(16).cast::<u8>());
                                                                            let l190 = i32::from(*base.add(17).cast::<u8>());
                                                                            let l191 = i32::from(*base.add(20).cast::<u8>());
                                                                            let l192 = i32::from(*base.add(21).cast::<u8>());
                                                                            let l193 = i32::from(*base.add(22).cast::<u8>());
                                                                            let l194 = *base.add(24).cast::<i32>();
                                                                            let l195 = *base.add(28).cast::<i32>();
                                                                            super::super::super::golem::rdbms::types::Timestamptz {
                                                                                timestamp: super::super::super::golem::rdbms::types::Timestamp {
                                                                                    date: super::super::super::golem::rdbms::types::Date {
                                                                                        year: l188,
                                                                                        month: l189 as u8,
                                                                                        day: l190 as u8,
                                                                                    },
                                                                                    time: super::super::super::golem::rdbms::types::Time {
                                                                                        hour: l191 as u8,
                                                                                        minute: l192 as u8,
                                                                                        second: l193 as u8,
                                                                                        nanosecond: l194 as u32,
                                                                                    },
                                                                                },
                                                                                offset: l195,
                                                                            }
                                                                        };
                                                                        Tstzbound::Excluded(e196)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                        Tstzbound::Unbounded
                                                                    }
                                                                };
                                                                let l197 = i32::from(*base.add(32).cast::<u8>());
                                                                let v214 = match l197 {
                                                                    0 => {
                                                                        let e214 = {
                                                                            let l198 = *base.add(36).cast::<i32>();
                                                                            let l199 = i32::from(*base.add(40).cast::<u8>());
                                                                            let l200 = i32::from(*base.add(41).cast::<u8>());
                                                                            let l201 = i32::from(*base.add(44).cast::<u8>());
                                                                            let l202 = i32::from(*base.add(45).cast::<u8>());
                                                                            let l203 = i32::from(*base.add(46).cast::<u8>());
                                                                            let l204 = *base.add(48).cast::<i32>();
                                                                            let l205 = *base.add(52).cast::<i32>();
                                                                            super::super::super::golem::rdbms::types::Timestamptz {
                                                                                timestamp: super::super::super::golem::rdbms::types::Timestamp {
                                                                                    date: super::super::super::golem::rdbms::types::Date {
                                                                                        year: l198,
                                                                                        month: l199 as u8,
                                                                                        day: l200 as u8,
                                                                                    },
                                                                                    time: super::super::super::golem::rdbms::types::Time {
                                                                                        hour: l201 as u8,
                                                                                        minute: l202 as u8,
                                                                                        second: l203 as u8,
                                                                                        nanosecond: l204 as u32,
                                                                                    },
                                                                                },
                                                                                offset: l205,
                                                                            }
                                                                        };
                                                                        Tstzbound::Included(e214)
                                                                    }
                                                                    1 => {
                                                                        let e214 = {
                                                                            let l206 = *base.add(36).cast::<i32>();
                                                                            let l207 = i32::from(*base.add(40).cast::<u8>());
                                                                            let l208 = i32::from(*base.add(41).cast::<u8>());
                                                                            let l209 = i32::from(*base.add(44).cast::<u8>());
                                                                            let l210 = i32::from(*base.add(45).cast::<u8>());
                                                                            let l211 = i32::from(*base.add(46).cast::<u8>());
                                                                            let l212 = *base.add(48).cast::<i32>();
                                                                            let l213 = *base.add(52).cast::<i32>();
                                                                            super::super::super::golem::rdbms::types::Timestamptz {
                                                                                timestamp: super::super::super::golem::rdbms::types::Timestamp {
                                                                                    date: super::super::super::golem::rdbms::types::Date {
                                                                                        year: l206,
                                                                                        month: l207 as u8,
                                                                                        day: l208 as u8,
                                                                                    },
                                                                                    time: super::super::super::golem::rdbms::types::Time {
                                                                                        hour: l209 as u8,
                                                                                        minute: l210 as u8,
                                                                                        second: l211 as u8,
                                                                                        nanosecond: l212 as u32,
                                                                                    },
                                                                                },
                                                                                offset: l213,
                                                                            }
                                                                        };
                                                                        Tstzbound::Excluded(e214)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                        Tstzbound::Unbounded
                                                                    }
                                                                };
                                                                Tstzrange {
                                                                    start: v196,
                                                                    end: v214,
                                                                }
                                                            };
                                                            DbValue::Tstzrange(e265)
                                                        }
                                                        33 => {
                                                            let e265 = {
                                                                let l215 = i32::from(*base.add(8).cast::<u8>());
                                                                let v222 = match l215 {
                                                                    0 => {
                                                                        let e222 = {
                                                                            let l216 = *base.add(12).cast::<i32>();
                                                                            let l217 = i32::from(*base.add(16).cast::<u8>());
                                                                            let l218 = i32::from(*base.add(17).cast::<u8>());
                                                                            super::super::super::golem::rdbms::types::Date {
                                                                                year: l216,
                                                                                month: l217 as u8,
                                                                                day: l218 as u8,
                                                                            }
                                                                        };
                                                                        Datebound::Included(e222)
                                                                    }
                                                                    1 => {
                                                                        let e222 = {
                                                                            let l219 = *base.add(12).cast::<i32>();
                                                                            let l220 = i32::from(*base.add(16).cast::<u8>());
                                                                            let l221 = i32::from(*base.add(17).cast::<u8>());
                                                                            super::super::super::golem::rdbms::types::Date {
                                                                                year: l219,
                                                                                month: l220 as u8,
                                                                                day: l221 as u8,
                                                                            }
                                                                        };
                                                                        Datebound::Excluded(e222)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                        Datebound::Unbounded
                                                                    }
                                                                };
                                                                let l223 = i32::from(*base.add(20).cast::<u8>());
                                                                let v230 = match l223 {
                                                                    0 => {
                                                                        let e230 = {
                                                                            let l224 = *base.add(24).cast::<i32>();
                                                                            let l225 = i32::from(*base.add(28).cast::<u8>());
                                                                            let l226 = i32::from(*base.add(29).cast::<u8>());
                                                                            super::super::super::golem::rdbms::types::Date {
                                                                                year: l224,
                                                                                month: l225 as u8,
                                                                                day: l226 as u8,
                                                                            }
                                                                        };
                                                                        Datebound::Included(e230)
                                                                    }
                                                                    1 => {
                                                                        let e230 = {
                                                                            let l227 = *base.add(24).cast::<i32>();
                                                                            let l228 = i32::from(*base.add(28).cast::<u8>());
                                                                            let l229 = i32::from(*base.add(29).cast::<u8>());
                                                                            super::super::super::golem::rdbms::types::Date {
                                                                                year: l227,
                                                                                month: l228 as u8,
                                                                                day: l229 as u8,
                                                                            }
                                                                        };
                                                                        Datebound::Excluded(e230)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                        Datebound::Unbounded
                                                                    }
                                                                };
                                                                Daterange {
                                                                    start: v222,
                                                                    end: v230,
                                                                }
                                                            };
                                                            DbValue::Daterange(e265)
                                                        }
                                                        34 => {
                                                            let e265 = {
                                                                let l231 = *base.add(8).cast::<i64>();
                                                                l231
                                                            };
                                                            DbValue::Money(e265)
                                                        }
                                                        35 => {
                                                            let e265 = {
                                                                let l232 = *base.add(8).cast::<i32>();
                                                                l232 as u32
                                                            };
                                                            DbValue::Oid(e265)
                                                        }
                                                        36 => {
                                                            let e265 = {
                                                                let l233 = *base.add(8).cast::<*mut u8>();
                                                                let l234 = *base.add(12).cast::<usize>();
                                                                let len235 = l234;
                                                                let bytes235 = _rt::Vec::from_raw_parts(
                                                                    l233.cast(),
                                                                    len235,
                                                                    len235,
                                                                );
                                                                let l236 = *base.add(16).cast::<*mut u8>();
                                                                let l237 = *base.add(20).cast::<usize>();
                                                                let len238 = l237;
                                                                let bytes238 = _rt::Vec::from_raw_parts(
                                                                    l236.cast(),
                                                                    len238,
                                                                    len238,
                                                                );
                                                                Enumeration {
                                                                    name: _rt::string_lift(bytes235),
                                                                    value: _rt::string_lift(bytes238),
                                                                }
                                                            };
                                                            DbValue::Enumeration(e265)
                                                        }
                                                        37 => {
                                                            let e265 = {
                                                                let l239 = *base.add(8).cast::<*mut u8>();
                                                                let l240 = *base.add(12).cast::<usize>();
                                                                let len241 = l240;
                                                                let bytes241 = _rt::Vec::from_raw_parts(
                                                                    l239.cast(),
                                                                    len241,
                                                                    len241,
                                                                );
                                                                let l242 = *base.add(16).cast::<*mut u8>();
                                                                let l243 = *base.add(20).cast::<usize>();
                                                                let base245 = l242;
                                                                let len245 = l243;
                                                                let mut result245 = _rt::Vec::with_capacity(len245);
                                                                for i in 0..len245 {
                                                                    let base = base245.add(i * 4);
                                                                    let e245 = {
                                                                        let l244 = *base.add(0).cast::<i32>();
                                                                        LazyDbValue::from_handle(l244 as u32)
                                                                    };
                                                                    result245.push(e245);
                                                                }
                                                                _rt::cabi_dealloc(base245, len245 * 4, 4);
                                                                Composite {
                                                                    name: _rt::string_lift(bytes241),
                                                                    values: result245,
                                                                }
                                                            };
                                                            DbValue::Composite(e265)
                                                        }
                                                        38 => {
                                                            let e265 = {
                                                                let l246 = *base.add(8).cast::<*mut u8>();
                                                                let l247 = *base.add(12).cast::<usize>();
                                                                let len248 = l247;
                                                                let bytes248 = _rt::Vec::from_raw_parts(
                                                                    l246.cast(),
                                                                    len248,
                                                                    len248,
                                                                );
                                                                let l249 = *base.add(16).cast::<i32>();
                                                                Domain {
                                                                    name: _rt::string_lift(bytes248),
                                                                    value: LazyDbValue::from_handle(l249 as u32),
                                                                }
                                                            };
                                                            DbValue::Domain(e265)
                                                        }
                                                        39 => {
                                                            let e265 = {
                                                                let l250 = *base.add(8).cast::<*mut u8>();
                                                                let l251 = *base.add(12).cast::<usize>();
                                                                let base253 = l250;
                                                                let len253 = l251;
                                                                let mut result253 = _rt::Vec::with_capacity(len253);
                                                                for i in 0..len253 {
                                                                    let base = base253.add(i * 4);
                                                                    let e253 = {
                                                                        let l252 = *base.add(0).cast::<i32>();
                                                                        LazyDbValue::from_handle(l252 as u32)
                                                                    };
                                                                    result253.push(e253);
                                                                }
                                                                _rt::cabi_dealloc(base253, len253 * 4, 4);
                                                                result253
                                                            };
                                                            DbValue::Array(e265)
                                                        }
                                                        40 => {
                                                            let e265 = {
                                                                let l254 = *base.add(8).cast::<*mut u8>();
                                                                let l255 = *base.add(12).cast::<usize>();
                                                                let len256 = l255;
                                                                let bytes256 = _rt::Vec::from_raw_parts(
                                                                    l254.cast(),
                                                                    len256,
                                                                    len256,
                                                                );
                                                                let l257 = i32::from(*base.add(16).cast::<u8>());
                                                                let v260 = match l257 {
                                                                    0 => {
                                                                        let e260 = {
                                                                            let l258 = *base.add(20).cast::<i32>();
                                                                            LazyDbValue::from_handle(l258 as u32)
                                                                        };
                                                                        ValueBound::Included(e260)
                                                                    }
                                                                    1 => {
                                                                        let e260 = {
                                                                            let l259 = *base.add(20).cast::<i32>();
                                                                            LazyDbValue::from_handle(l259 as u32)
                                                                        };
                                                                        ValueBound::Excluded(e260)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                        ValueBound::Unbounded
                                                                    }
                                                                };
                                                                let l261 = i32::from(*base.add(24).cast::<u8>());
                                                                let v264 = match l261 {
                                                                    0 => {
                                                                        let e264 = {
                                                                            let l262 = *base.add(28).cast::<i32>();
                                                                            LazyDbValue::from_handle(l262 as u32)
                                                                        };
                                                                        ValueBound::Included(e264)
                                                                    }
                                                                    1 => {
                                                                        let e264 = {
                                                                            let l263 = *base.add(28).cast::<i32>();
                                                                            LazyDbValue::from_handle(l263 as u32)
                                                                        };
                                                                        ValueBound::Excluded(e264)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                        ValueBound::Unbounded
                                                                    }
                                                                };
                                                                Range {
                                                                    name: _rt::string_lift(bytes256),
                                                                    value: ValuesRange {
                                                                        start: v260,
                                                                        end: v264,
                                                                    },
                                                                }
                                                            };
                                                            DbValue::Range(e265)
                                                        }
                                                        n => {
                                                            debug_assert_eq!(n, 41, "invalid enum discriminant");
                                                            DbValue::Null
                                                        }
                                                    };
                                                    v265
                                                };
                                                result266.push(e266);
                                            }
                                            _rt::cabi_dealloc(base266, len266 * 56, 8);
                                            DbRow { values: result266 }
                                        };
                                        result267.push(e267);
                                    }
                                    _rt::cabi_dealloc(base267, len267 * 8, 4);
                                    result267
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl DbConnection {
                #[allow(unused_unsafe, clippy::all)]
                pub fn open(address: &str) -> Result<DbConnection, Error> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 16],
                        );
                        let vec0 = address;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rdbms/postgres@0.0.1")]
                        extern "C" {
                            #[link_name = "[static]db-connection.open"]
                            fn wit_import(_: *mut u8, _: usize, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import(ptr0.cast_mut(), len0, ptr1);
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => {
                                let e = {
                                    let l3 = *ptr1.add(4).cast::<i32>();
                                    DbConnection::from_handle(l3 as u32)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l4 = i32::from(*ptr1.add(4).cast::<u8>());
                                    let v20 = match l4 {
                                        0 => {
                                            let e20 = {
                                                let l5 = *ptr1.add(8).cast::<*mut u8>();
                                                let l6 = *ptr1.add(12).cast::<usize>();
                                                let len7 = l6;
                                                let bytes7 = _rt::Vec::from_raw_parts(
                                                    l5.cast(),
                                                    len7,
                                                    len7,
                                                );
                                                _rt::string_lift(bytes7)
                                            };
                                            Error::ConnectionFailure(e20)
                                        }
                                        1 => {
                                            let e20 = {
                                                let l8 = *ptr1.add(8).cast::<*mut u8>();
                                                let l9 = *ptr1.add(12).cast::<usize>();
                                                let len10 = l9;
                                                let bytes10 = _rt::Vec::from_raw_parts(
                                                    l8.cast(),
                                                    len10,
                                                    len10,
                                                );
                                                _rt::string_lift(bytes10)
                                            };
                                            Error::QueryParameterFailure(e20)
                                        }
                                        2 => {
                                            let e20 = {
                                                let l11 = *ptr1.add(8).cast::<*mut u8>();
                                                let l12 = *ptr1.add(12).cast::<usize>();
                                                let len13 = l12;
                                                let bytes13 = _rt::Vec::from_raw_parts(
                                                    l11.cast(),
                                                    len13,
                                                    len13,
                                                );
                                                _rt::string_lift(bytes13)
                                            };
                                            Error::QueryExecutionFailure(e20)
                                        }
                                        3 => {
                                            let e20 = {
                                                let l14 = *ptr1.add(8).cast::<*mut u8>();
                                                let l15 = *ptr1.add(12).cast::<usize>();
                                                let len16 = l15;
                                                let bytes16 = _rt::Vec::from_raw_parts(
                                                    l14.cast(),
                                                    len16,
                                                    len16,
                                                );
                                                _rt::string_lift(bytes16)
                                            };
                                            Error::QueryResponseFailure(e20)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 4, "invalid enum discriminant");
                                            let e20 = {
                                                let l17 = *ptr1.add(8).cast::<*mut u8>();
                                                let l18 = *ptr1.add(12).cast::<usize>();
                                                let len19 = l18;
                                                let bytes19 = _rt::Vec::from_raw_parts(
                                                    l17.cast(),
                                                    len19,
                                                    len19,
                                                );
                                                _rt::string_lift(bytes19)
                                            };
                                            Error::Other(e20)
                                        }
                                    };
                                    v20
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl DbConnection {
                #[allow(unused_unsafe, clippy::all)]
                pub fn query(
                    &self,
                    statement: &str,
                    params: _rt::Vec<DbValue>,
                ) -> Result<DbResult, Error> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 20]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 20],
                        );
                        let vec0 = statement;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec87 = &params;
                        let len87 = vec87.len();
                        let layout87 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec87.len() * 56,
                            8,
                        );
                        let result87 = if layout87.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout87).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout87);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec87.into_iter().enumerate() {
                            let base = result87.add(i * 56);
                            {
                                match e {
                                    DbValue::Character(e) => {
                                        *base.add(0).cast::<u8>() = (0i32) as u8;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                    }
                                    DbValue::Int2(e) => {
                                        *base.add(0).cast::<u8>() = (1i32) as u8;
                                        *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                    }
                                    DbValue::Int4(e) => {
                                        *base.add(0).cast::<u8>() = (2i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::Int8(e) => {
                                        *base.add(0).cast::<u8>() = (3i32) as u8;
                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    DbValue::Float4(e) => {
                                        *base.add(0).cast::<u8>() = (4i32) as u8;
                                        *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                    }
                                    DbValue::Float8(e) => {
                                        *base.add(0).cast::<u8>() = (5i32) as u8;
                                        *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                    }
                                    DbValue::Numeric(e) => {
                                        *base.add(0).cast::<u8>() = (6i32) as u8;
                                        let vec1 = e;
                                        let ptr1 = vec1.as_ptr().cast::<u8>();
                                        let len1 = vec1.len();
                                        *base.add(12).cast::<usize>() = len1;
                                        *base.add(8).cast::<*mut u8>() = ptr1.cast_mut();
                                    }
                                    DbValue::Boolean(e) => {
                                        *base.add(0).cast::<u8>() = (7i32) as u8;
                                        *base.add(8).cast::<u8>() = (match e {
                                            true => 1,
                                            false => 0,
                                        }) as u8;
                                    }
                                    DbValue::Text(e) => {
                                        *base.add(0).cast::<u8>() = (8i32) as u8;
                                        let vec2 = e;
                                        let ptr2 = vec2.as_ptr().cast::<u8>();
                                        let len2 = vec2.len();
                                        *base.add(12).cast::<usize>() = len2;
                                        *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                    }
                                    DbValue::Varchar(e) => {
                                        *base.add(0).cast::<u8>() = (9i32) as u8;
                                        let vec3 = e;
                                        let ptr3 = vec3.as_ptr().cast::<u8>();
                                        let len3 = vec3.len();
                                        *base.add(12).cast::<usize>() = len3;
                                        *base.add(8).cast::<*mut u8>() = ptr3.cast_mut();
                                    }
                                    DbValue::Bpchar(e) => {
                                        *base.add(0).cast::<u8>() = (10i32) as u8;
                                        let vec4 = e;
                                        let ptr4 = vec4.as_ptr().cast::<u8>();
                                        let len4 = vec4.len();
                                        *base.add(12).cast::<usize>() = len4;
                                        *base.add(8).cast::<*mut u8>() = ptr4.cast_mut();
                                    }
                                    DbValue::Timestamp(e) => {
                                        *base.add(0).cast::<u8>() = (11i32) as u8;
                                        let super::super::super::golem::rdbms::types::Timestamp {
                                            date: date5,
                                            time: time5,
                                        } = e;
                                        let super::super::super::golem::rdbms::types::Date {
                                            year: year6,
                                            month: month6,
                                            day: day6,
                                        } = date5;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(year6);
                                        *base.add(12).cast::<u8>() = (_rt::as_i32(month6)) as u8;
                                        *base.add(13).cast::<u8>() = (_rt::as_i32(day6)) as u8;
                                        let super::super::super::golem::rdbms::types::Time {
                                            hour: hour7,
                                            minute: minute7,
                                            second: second7,
                                            nanosecond: nanosecond7,
                                        } = time5;
                                        *base.add(16).cast::<u8>() = (_rt::as_i32(hour7)) as u8;
                                        *base.add(17).cast::<u8>() = (_rt::as_i32(minute7)) as u8;
                                        *base.add(18).cast::<u8>() = (_rt::as_i32(second7)) as u8;
                                        *base.add(20).cast::<i32>() = _rt::as_i32(nanosecond7);
                                    }
                                    DbValue::Timestamptz(e) => {
                                        *base.add(0).cast::<u8>() = (12i32) as u8;
                                        let super::super::super::golem::rdbms::types::Timestamptz {
                                            timestamp: timestamp8,
                                            offset: offset8,
                                        } = e;
                                        let super::super::super::golem::rdbms::types::Timestamp {
                                            date: date9,
                                            time: time9,
                                        } = timestamp8;
                                        let super::super::super::golem::rdbms::types::Date {
                                            year: year10,
                                            month: month10,
                                            day: day10,
                                        } = date9;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(year10);
                                        *base.add(12).cast::<u8>() = (_rt::as_i32(month10)) as u8;
                                        *base.add(13).cast::<u8>() = (_rt::as_i32(day10)) as u8;
                                        let super::super::super::golem::rdbms::types::Time {
                                            hour: hour11,
                                            minute: minute11,
                                            second: second11,
                                            nanosecond: nanosecond11,
                                        } = time9;
                                        *base.add(16).cast::<u8>() = (_rt::as_i32(hour11)) as u8;
                                        *base.add(17).cast::<u8>() = (_rt::as_i32(minute11)) as u8;
                                        *base.add(18).cast::<u8>() = (_rt::as_i32(second11)) as u8;
                                        *base.add(20).cast::<i32>() = _rt::as_i32(nanosecond11);
                                        *base.add(24).cast::<i32>() = _rt::as_i32(offset8);
                                    }
                                    DbValue::Date(e) => {
                                        *base.add(0).cast::<u8>() = (13i32) as u8;
                                        let super::super::super::golem::rdbms::types::Date {
                                            year: year12,
                                            month: month12,
                                            day: day12,
                                        } = e;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(year12);
                                        *base.add(12).cast::<u8>() = (_rt::as_i32(month12)) as u8;
                                        *base.add(13).cast::<u8>() = (_rt::as_i32(day12)) as u8;
                                    }
                                    DbValue::Time(e) => {
                                        *base.add(0).cast::<u8>() = (14i32) as u8;
                                        let super::super::super::golem::rdbms::types::Time {
                                            hour: hour13,
                                            minute: minute13,
                                            second: second13,
                                            nanosecond: nanosecond13,
                                        } = e;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(hour13)) as u8;
                                        *base.add(9).cast::<u8>() = (_rt::as_i32(minute13)) as u8;
                                        *base.add(10).cast::<u8>() = (_rt::as_i32(second13)) as u8;
                                        *base.add(12).cast::<i32>() = _rt::as_i32(nanosecond13);
                                    }
                                    DbValue::Timetz(e) => {
                                        *base.add(0).cast::<u8>() = (15i32) as u8;
                                        let super::super::super::golem::rdbms::types::Timetz {
                                            time: time14,
                                            offset: offset14,
                                        } = e;
                                        let super::super::super::golem::rdbms::types::Time {
                                            hour: hour15,
                                            minute: minute15,
                                            second: second15,
                                            nanosecond: nanosecond15,
                                        } = time14;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(hour15)) as u8;
                                        *base.add(9).cast::<u8>() = (_rt::as_i32(minute15)) as u8;
                                        *base.add(10).cast::<u8>() = (_rt::as_i32(second15)) as u8;
                                        *base.add(12).cast::<i32>() = _rt::as_i32(nanosecond15);
                                        *base.add(16).cast::<i32>() = _rt::as_i32(offset14);
                                    }
                                    DbValue::Interval(e) => {
                                        *base.add(0).cast::<u8>() = (16i32) as u8;
                                        let Interval {
                                            months: months16,
                                            days: days16,
                                            microseconds: microseconds16,
                                        } = e;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(months16);
                                        *base.add(12).cast::<i32>() = _rt::as_i32(days16);
                                        *base.add(16).cast::<i64>() = _rt::as_i64(microseconds16);
                                    }
                                    DbValue::Bytea(e) => {
                                        *base.add(0).cast::<u8>() = (17i32) as u8;
                                        let vec17 = e;
                                        let ptr17 = vec17.as_ptr().cast::<u8>();
                                        let len17 = vec17.len();
                                        *base.add(12).cast::<usize>() = len17;
                                        *base.add(8).cast::<*mut u8>() = ptr17.cast_mut();
                                    }
                                    DbValue::Json(e) => {
                                        *base.add(0).cast::<u8>() = (18i32) as u8;
                                        let vec18 = e;
                                        let ptr18 = vec18.as_ptr().cast::<u8>();
                                        let len18 = vec18.len();
                                        *base.add(12).cast::<usize>() = len18;
                                        *base.add(8).cast::<*mut u8>() = ptr18.cast_mut();
                                    }
                                    DbValue::Jsonb(e) => {
                                        *base.add(0).cast::<u8>() = (19i32) as u8;
                                        let vec19 = e;
                                        let ptr19 = vec19.as_ptr().cast::<u8>();
                                        let len19 = vec19.len();
                                        *base.add(12).cast::<usize>() = len19;
                                        *base.add(8).cast::<*mut u8>() = ptr19.cast_mut();
                                    }
                                    DbValue::Jsonpath(e) => {
                                        *base.add(0).cast::<u8>() = (20i32) as u8;
                                        let vec20 = e;
                                        let ptr20 = vec20.as_ptr().cast::<u8>();
                                        let len20 = vec20.len();
                                        *base.add(12).cast::<usize>() = len20;
                                        *base.add(8).cast::<*mut u8>() = ptr20.cast_mut();
                                    }
                                    DbValue::Xml(e) => {
                                        *base.add(0).cast::<u8>() = (21i32) as u8;
                                        let vec21 = e;
                                        let ptr21 = vec21.as_ptr().cast::<u8>();
                                        let len21 = vec21.len();
                                        *base.add(12).cast::<usize>() = len21;
                                        *base.add(8).cast::<*mut u8>() = ptr21.cast_mut();
                                    }
                                    DbValue::Uuid(e) => {
                                        *base.add(0).cast::<u8>() = (22i32) as u8;
                                        let super::super::super::golem::rdbms::types::Uuid {
                                            high_bits: high_bits22,
                                            low_bits: low_bits22,
                                        } = e;
                                        *base.add(8).cast::<i64>() = _rt::as_i64(high_bits22);
                                        *base.add(16).cast::<i64>() = _rt::as_i64(low_bits22);
                                    }
                                    DbValue::Inet(e) => {
                                        *base.add(0).cast::<u8>() = (23i32) as u8;
                                        use super::super::super::golem::rdbms::types::IpAddress as V25;
                                        match e {
                                            V25::Ipv4(e) => {
                                                *base.add(8).cast::<u8>() = (0i32) as u8;
                                                let (t23_0, t23_1, t23_2, t23_3) = e;
                                                *base.add(10).cast::<u8>() = (_rt::as_i32(t23_0)) as u8;
                                                *base.add(11).cast::<u8>() = (_rt::as_i32(t23_1)) as u8;
                                                *base.add(12).cast::<u8>() = (_rt::as_i32(t23_2)) as u8;
                                                *base.add(13).cast::<u8>() = (_rt::as_i32(t23_3)) as u8;
                                            }
                                            V25::Ipv6(e) => {
                                                *base.add(8).cast::<u8>() = (1i32) as u8;
                                                let (
                                                    t24_0,
                                                    t24_1,
                                                    t24_2,
                                                    t24_3,
                                                    t24_4,
                                                    t24_5,
                                                    t24_6,
                                                    t24_7,
                                                ) = e;
                                                *base.add(10).cast::<u16>() = (_rt::as_i32(t24_0)) as u16;
                                                *base.add(12).cast::<u16>() = (_rt::as_i32(t24_1)) as u16;
                                                *base.add(14).cast::<u16>() = (_rt::as_i32(t24_2)) as u16;
                                                *base.add(16).cast::<u16>() = (_rt::as_i32(t24_3)) as u16;
                                                *base.add(18).cast::<u16>() = (_rt::as_i32(t24_4)) as u16;
                                                *base.add(20).cast::<u16>() = (_rt::as_i32(t24_5)) as u16;
                                                *base.add(22).cast::<u16>() = (_rt::as_i32(t24_6)) as u16;
                                                *base.add(24).cast::<u16>() = (_rt::as_i32(t24_7)) as u16;
                                            }
                                        }
                                    }
                                    DbValue::Cidr(e) => {
                                        *base.add(0).cast::<u8>() = (24i32) as u8;
                                        use super::super::super::golem::rdbms::types::IpAddress as V28;
                                        match e {
                                            V28::Ipv4(e) => {
                                                *base.add(8).cast::<u8>() = (0i32) as u8;
                                                let (t26_0, t26_1, t26_2, t26_3) = e;
                                                *base.add(10).cast::<u8>() = (_rt::as_i32(t26_0)) as u8;
                                                *base.add(11).cast::<u8>() = (_rt::as_i32(t26_1)) as u8;
                                                *base.add(12).cast::<u8>() = (_rt::as_i32(t26_2)) as u8;
                                                *base.add(13).cast::<u8>() = (_rt::as_i32(t26_3)) as u8;
                                            }
                                            V28::Ipv6(e) => {
                                                *base.add(8).cast::<u8>() = (1i32) as u8;
                                                let (
                                                    t27_0,
                                                    t27_1,
                                                    t27_2,
                                                    t27_3,
                                                    t27_4,
                                                    t27_5,
                                                    t27_6,
                                                    t27_7,
                                                ) = e;
                                                *base.add(10).cast::<u16>() = (_rt::as_i32(t27_0)) as u16;
                                                *base.add(12).cast::<u16>() = (_rt::as_i32(t27_1)) as u16;
                                                *base.add(14).cast::<u16>() = (_rt::as_i32(t27_2)) as u16;
                                                *base.add(16).cast::<u16>() = (_rt::as_i32(t27_3)) as u16;
                                                *base.add(18).cast::<u16>() = (_rt::as_i32(t27_4)) as u16;
                                                *base.add(20).cast::<u16>() = (_rt::as_i32(t27_5)) as u16;
                                                *base.add(22).cast::<u16>() = (_rt::as_i32(t27_6)) as u16;
                                                *base.add(24).cast::<u16>() = (_rt::as_i32(t27_7)) as u16;
                                            }
                                        }
                                    }
                                    DbValue::Macaddr(e) => {
                                        *base.add(0).cast::<u8>() = (25i32) as u8;
                                        let super::super::super::golem::rdbms::types::MacAddress {
                                            octets: octets29,
                                        } = e;
                                        let (t30_0, t30_1, t30_2, t30_3, t30_4, t30_5) = octets29;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(t30_0)) as u8;
                                        *base.add(9).cast::<u8>() = (_rt::as_i32(t30_1)) as u8;
                                        *base.add(10).cast::<u8>() = (_rt::as_i32(t30_2)) as u8;
                                        *base.add(11).cast::<u8>() = (_rt::as_i32(t30_3)) as u8;
                                        *base.add(12).cast::<u8>() = (_rt::as_i32(t30_4)) as u8;
                                        *base.add(13).cast::<u8>() = (_rt::as_i32(t30_5)) as u8;
                                    }
                                    DbValue::Bit(e) => {
                                        *base.add(0).cast::<u8>() = (26i32) as u8;
                                        let vec31 = e;
                                        let len31 = vec31.len();
                                        let layout31 = _rt::alloc::Layout::from_size_align_unchecked(
                                            vec31.len() * 1,
                                            1,
                                        );
                                        let result31 = if layout31.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout31).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout31);
                                            }
                                            ptr
                                        } else {
                                            ::core::ptr::null_mut()
                                        };
                                        for (i, e) in vec31.into_iter().enumerate() {
                                            let base = result31.add(i * 1);
                                            {
                                                *base.add(0).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                        }
                                        *base.add(12).cast::<usize>() = len31;
                                        *base.add(8).cast::<*mut u8>() = result31;
                                        cleanup_list.extend_from_slice(&[(result31, layout31)]);
                                    }
                                    DbValue::Varbit(e) => {
                                        *base.add(0).cast::<u8>() = (27i32) as u8;
                                        let vec32 = e;
                                        let len32 = vec32.len();
                                        let layout32 = _rt::alloc::Layout::from_size_align_unchecked(
                                            vec32.len() * 1,
                                            1,
                                        );
                                        let result32 = if layout32.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout32).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout32);
                                            }
                                            ptr
                                        } else {
                                            ::core::ptr::null_mut()
                                        };
                                        for (i, e) in vec32.into_iter().enumerate() {
                                            let base = result32.add(i * 1);
                                            {
                                                *base.add(0).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                        }
                                        *base.add(12).cast::<usize>() = len32;
                                        *base.add(8).cast::<*mut u8>() = result32;
                                        cleanup_list.extend_from_slice(&[(result32, layout32)]);
                                    }
                                    DbValue::Int4range(e) => {
                                        *base.add(0).cast::<u8>() = (28i32) as u8;
                                        let Int4range { start: start33, end: end33 } = e;
                                        match start33 {
                                            Int4bound::Included(e) => {
                                                *base.add(8).cast::<u8>() = (0i32) as u8;
                                                *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            Int4bound::Excluded(e) => {
                                                *base.add(8).cast::<u8>() = (1i32) as u8;
                                                *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            Int4bound::Unbounded => {
                                                *base.add(8).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                        match end33 {
                                            Int4bound::Included(e) => {
                                                *base.add(16).cast::<u8>() = (0i32) as u8;
                                                *base.add(20).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            Int4bound::Excluded(e) => {
                                                *base.add(16).cast::<u8>() = (1i32) as u8;
                                                *base.add(20).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            Int4bound::Unbounded => {
                                                *base.add(16).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                    }
                                    DbValue::Int8range(e) => {
                                        *base.add(0).cast::<u8>() = (29i32) as u8;
                                        let Int8range { start: start34, end: end34 } = e;
                                        match start34 {
                                            Int8bound::Included(e) => {
                                                *base.add(8).cast::<u8>() = (0i32) as u8;
                                                *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            Int8bound::Excluded(e) => {
                                                *base.add(8).cast::<u8>() = (1i32) as u8;
                                                *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            Int8bound::Unbounded => {
                                                *base.add(8).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                        match end34 {
                                            Int8bound::Included(e) => {
                                                *base.add(24).cast::<u8>() = (0i32) as u8;
                                                *base.add(32).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            Int8bound::Excluded(e) => {
                                                *base.add(24).cast::<u8>() = (1i32) as u8;
                                                *base.add(32).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            Int8bound::Unbounded => {
                                                *base.add(24).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                    }
                                    DbValue::Numrange(e) => {
                                        *base.add(0).cast::<u8>() = (30i32) as u8;
                                        let Numrange { start: start35, end: end35 } = e;
                                        match start35 {
                                            Numbound::Included(e) => {
                                                *base.add(8).cast::<u8>() = (0i32) as u8;
                                                let vec36 = e;
                                                let ptr36 = vec36.as_ptr().cast::<u8>();
                                                let len36 = vec36.len();
                                                *base.add(16).cast::<usize>() = len36;
                                                *base.add(12).cast::<*mut u8>() = ptr36.cast_mut();
                                            }
                                            Numbound::Excluded(e) => {
                                                *base.add(8).cast::<u8>() = (1i32) as u8;
                                                let vec37 = e;
                                                let ptr37 = vec37.as_ptr().cast::<u8>();
                                                let len37 = vec37.len();
                                                *base.add(16).cast::<usize>() = len37;
                                                *base.add(12).cast::<*mut u8>() = ptr37.cast_mut();
                                            }
                                            Numbound::Unbounded => {
                                                *base.add(8).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                        match end35 {
                                            Numbound::Included(e) => {
                                                *base.add(20).cast::<u8>() = (0i32) as u8;
                                                let vec38 = e;
                                                let ptr38 = vec38.as_ptr().cast::<u8>();
                                                let len38 = vec38.len();
                                                *base.add(28).cast::<usize>() = len38;
                                                *base.add(24).cast::<*mut u8>() = ptr38.cast_mut();
                                            }
                                            Numbound::Excluded(e) => {
                                                *base.add(20).cast::<u8>() = (1i32) as u8;
                                                let vec39 = e;
                                                let ptr39 = vec39.as_ptr().cast::<u8>();
                                                let len39 = vec39.len();
                                                *base.add(28).cast::<usize>() = len39;
                                                *base.add(24).cast::<*mut u8>() = ptr39.cast_mut();
                                            }
                                            Numbound::Unbounded => {
                                                *base.add(20).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                    }
                                    DbValue::Tsrange(e) => {
                                        *base.add(0).cast::<u8>() = (31i32) as u8;
                                        let Tsrange { start: start40, end: end40 } = e;
                                        match start40 {
                                            Tsbound::Included(e) => {
                                                *base.add(8).cast::<u8>() = (0i32) as u8;
                                                let super::super::super::golem::rdbms::types::Timestamp {
                                                    date: date41,
                                                    time: time41,
                                                } = e;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year42,
                                                    month: month42,
                                                    day: day42,
                                                } = date41;
                                                *base.add(12).cast::<i32>() = _rt::as_i32(year42);
                                                *base.add(16).cast::<u8>() = (_rt::as_i32(month42)) as u8;
                                                *base.add(17).cast::<u8>() = (_rt::as_i32(day42)) as u8;
                                                let super::super::super::golem::rdbms::types::Time {
                                                    hour: hour43,
                                                    minute: minute43,
                                                    second: second43,
                                                    nanosecond: nanosecond43,
                                                } = time41;
                                                *base.add(20).cast::<u8>() = (_rt::as_i32(hour43)) as u8;
                                                *base.add(21).cast::<u8>() = (_rt::as_i32(minute43)) as u8;
                                                *base.add(22).cast::<u8>() = (_rt::as_i32(second43)) as u8;
                                                *base.add(24).cast::<i32>() = _rt::as_i32(nanosecond43);
                                            }
                                            Tsbound::Excluded(e) => {
                                                *base.add(8).cast::<u8>() = (1i32) as u8;
                                                let super::super::super::golem::rdbms::types::Timestamp {
                                                    date: date44,
                                                    time: time44,
                                                } = e;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year45,
                                                    month: month45,
                                                    day: day45,
                                                } = date44;
                                                *base.add(12).cast::<i32>() = _rt::as_i32(year45);
                                                *base.add(16).cast::<u8>() = (_rt::as_i32(month45)) as u8;
                                                *base.add(17).cast::<u8>() = (_rt::as_i32(day45)) as u8;
                                                let super::super::super::golem::rdbms::types::Time {
                                                    hour: hour46,
                                                    minute: minute46,
                                                    second: second46,
                                                    nanosecond: nanosecond46,
                                                } = time44;
                                                *base.add(20).cast::<u8>() = (_rt::as_i32(hour46)) as u8;
                                                *base.add(21).cast::<u8>() = (_rt::as_i32(minute46)) as u8;
                                                *base.add(22).cast::<u8>() = (_rt::as_i32(second46)) as u8;
                                                *base.add(24).cast::<i32>() = _rt::as_i32(nanosecond46);
                                            }
                                            Tsbound::Unbounded => {
                                                *base.add(8).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                        match end40 {
                                            Tsbound::Included(e) => {
                                                *base.add(28).cast::<u8>() = (0i32) as u8;
                                                let super::super::super::golem::rdbms::types::Timestamp {
                                                    date: date47,
                                                    time: time47,
                                                } = e;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year48,
                                                    month: month48,
                                                    day: day48,
                                                } = date47;
                                                *base.add(32).cast::<i32>() = _rt::as_i32(year48);
                                                *base.add(36).cast::<u8>() = (_rt::as_i32(month48)) as u8;
                                                *base.add(37).cast::<u8>() = (_rt::as_i32(day48)) as u8;
                                                let super::super::super::golem::rdbms::types::Time {
                                                    hour: hour49,
                                                    minute: minute49,
                                                    second: second49,
                                                    nanosecond: nanosecond49,
                                                } = time47;
                                                *base.add(40).cast::<u8>() = (_rt::as_i32(hour49)) as u8;
                                                *base.add(41).cast::<u8>() = (_rt::as_i32(minute49)) as u8;
                                                *base.add(42).cast::<u8>() = (_rt::as_i32(second49)) as u8;
                                                *base.add(44).cast::<i32>() = _rt::as_i32(nanosecond49);
                                            }
                                            Tsbound::Excluded(e) => {
                                                *base.add(28).cast::<u8>() = (1i32) as u8;
                                                let super::super::super::golem::rdbms::types::Timestamp {
                                                    date: date50,
                                                    time: time50,
                                                } = e;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year51,
                                                    month: month51,
                                                    day: day51,
                                                } = date50;
                                                *base.add(32).cast::<i32>() = _rt::as_i32(year51);
                                                *base.add(36).cast::<u8>() = (_rt::as_i32(month51)) as u8;
                                                *base.add(37).cast::<u8>() = (_rt::as_i32(day51)) as u8;
                                                let super::super::super::golem::rdbms::types::Time {
                                                    hour: hour52,
                                                    minute: minute52,
                                                    second: second52,
                                                    nanosecond: nanosecond52,
                                                } = time50;
                                                *base.add(40).cast::<u8>() = (_rt::as_i32(hour52)) as u8;
                                                *base.add(41).cast::<u8>() = (_rt::as_i32(minute52)) as u8;
                                                *base.add(42).cast::<u8>() = (_rt::as_i32(second52)) as u8;
                                                *base.add(44).cast::<i32>() = _rt::as_i32(nanosecond52);
                                            }
                                            Tsbound::Unbounded => {
                                                *base.add(28).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                    }
                                    DbValue::Tstzrange(e) => {
                                        *base.add(0).cast::<u8>() = (32i32) as u8;
                                        let Tstzrange { start: start53, end: end53 } = e;
                                        match start53 {
                                            Tstzbound::Included(e) => {
                                                *base.add(8).cast::<u8>() = (0i32) as u8;
                                                let super::super::super::golem::rdbms::types::Timestamptz {
                                                    timestamp: timestamp54,
                                                    offset: offset54,
                                                } = e;
                                                let super::super::super::golem::rdbms::types::Timestamp {
                                                    date: date55,
                                                    time: time55,
                                                } = timestamp54;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year56,
                                                    month: month56,
                                                    day: day56,
                                                } = date55;
                                                *base.add(12).cast::<i32>() = _rt::as_i32(year56);
                                                *base.add(16).cast::<u8>() = (_rt::as_i32(month56)) as u8;
                                                *base.add(17).cast::<u8>() = (_rt::as_i32(day56)) as u8;
                                                let super::super::super::golem::rdbms::types::Time {
                                                    hour: hour57,
                                                    minute: minute57,
                                                    second: second57,
                                                    nanosecond: nanosecond57,
                                                } = time55;
                                                *base.add(20).cast::<u8>() = (_rt::as_i32(hour57)) as u8;
                                                *base.add(21).cast::<u8>() = (_rt::as_i32(minute57)) as u8;
                                                *base.add(22).cast::<u8>() = (_rt::as_i32(second57)) as u8;
                                                *base.add(24).cast::<i32>() = _rt::as_i32(nanosecond57);
                                                *base.add(28).cast::<i32>() = _rt::as_i32(offset54);
                                            }
                                            Tstzbound::Excluded(e) => {
                                                *base.add(8).cast::<u8>() = (1i32) as u8;
                                                let super::super::super::golem::rdbms::types::Timestamptz {
                                                    timestamp: timestamp58,
                                                    offset: offset58,
                                                } = e;
                                                let super::super::super::golem::rdbms::types::Timestamp {
                                                    date: date59,
                                                    time: time59,
                                                } = timestamp58;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year60,
                                                    month: month60,
                                                    day: day60,
                                                } = date59;
                                                *base.add(12).cast::<i32>() = _rt::as_i32(year60);
                                                *base.add(16).cast::<u8>() = (_rt::as_i32(month60)) as u8;
                                                *base.add(17).cast::<u8>() = (_rt::as_i32(day60)) as u8;
                                                let super::super::super::golem::rdbms::types::Time {
                                                    hour: hour61,
                                                    minute: minute61,
                                                    second: second61,
                                                    nanosecond: nanosecond61,
                                                } = time59;
                                                *base.add(20).cast::<u8>() = (_rt::as_i32(hour61)) as u8;
                                                *base.add(21).cast::<u8>() = (_rt::as_i32(minute61)) as u8;
                                                *base.add(22).cast::<u8>() = (_rt::as_i32(second61)) as u8;
                                                *base.add(24).cast::<i32>() = _rt::as_i32(nanosecond61);
                                                *base.add(28).cast::<i32>() = _rt::as_i32(offset58);
                                            }
                                            Tstzbound::Unbounded => {
                                                *base.add(8).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                        match end53 {
                                            Tstzbound::Included(e) => {
                                                *base.add(32).cast::<u8>() = (0i32) as u8;
                                                let super::super::super::golem::rdbms::types::Timestamptz {
                                                    timestamp: timestamp62,
                                                    offset: offset62,
                                                } = e;
                                                let super::super::super::golem::rdbms::types::Timestamp {
                                                    date: date63,
                                                    time: time63,
                                                } = timestamp62;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year64,
                                                    month: month64,
                                                    day: day64,
                                                } = date63;
                                                *base.add(36).cast::<i32>() = _rt::as_i32(year64);
                                                *base.add(40).cast::<u8>() = (_rt::as_i32(month64)) as u8;
                                                *base.add(41).cast::<u8>() = (_rt::as_i32(day64)) as u8;
                                                let super::super::super::golem::rdbms::types::Time {
                                                    hour: hour65,
                                                    minute: minute65,
                                                    second: second65,
                                                    nanosecond: nanosecond65,
                                                } = time63;
                                                *base.add(44).cast::<u8>() = (_rt::as_i32(hour65)) as u8;
                                                *base.add(45).cast::<u8>() = (_rt::as_i32(minute65)) as u8;
                                                *base.add(46).cast::<u8>() = (_rt::as_i32(second65)) as u8;
                                                *base.add(48).cast::<i32>() = _rt::as_i32(nanosecond65);
                                                *base.add(52).cast::<i32>() = _rt::as_i32(offset62);
                                            }
                                            Tstzbound::Excluded(e) => {
                                                *base.add(32).cast::<u8>() = (1i32) as u8;
                                                let super::super::super::golem::rdbms::types::Timestamptz {
                                                    timestamp: timestamp66,
                                                    offset: offset66,
                                                } = e;
                                                let super::super::super::golem::rdbms::types::Timestamp {
                                                    date: date67,
                                                    time: time67,
                                                } = timestamp66;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year68,
                                                    month: month68,
                                                    day: day68,
                                                } = date67;
                                                *base.add(36).cast::<i32>() = _rt::as_i32(year68);
                                                *base.add(40).cast::<u8>() = (_rt::as_i32(month68)) as u8;
                                                *base.add(41).cast::<u8>() = (_rt::as_i32(day68)) as u8;
                                                let super::super::super::golem::rdbms::types::Time {
                                                    hour: hour69,
                                                    minute: minute69,
                                                    second: second69,
                                                    nanosecond: nanosecond69,
                                                } = time67;
                                                *base.add(44).cast::<u8>() = (_rt::as_i32(hour69)) as u8;
                                                *base.add(45).cast::<u8>() = (_rt::as_i32(minute69)) as u8;
                                                *base.add(46).cast::<u8>() = (_rt::as_i32(second69)) as u8;
                                                *base.add(48).cast::<i32>() = _rt::as_i32(nanosecond69);
                                                *base.add(52).cast::<i32>() = _rt::as_i32(offset66);
                                            }
                                            Tstzbound::Unbounded => {
                                                *base.add(32).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                    }
                                    DbValue::Daterange(e) => {
                                        *base.add(0).cast::<u8>() = (33i32) as u8;
                                        let Daterange { start: start70, end: end70 } = e;
                                        match start70 {
                                            Datebound::Included(e) => {
                                                *base.add(8).cast::<u8>() = (0i32) as u8;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year71,
                                                    month: month71,
                                                    day: day71,
                                                } = e;
                                                *base.add(12).cast::<i32>() = _rt::as_i32(year71);
                                                *base.add(16).cast::<u8>() = (_rt::as_i32(month71)) as u8;
                                                *base.add(17).cast::<u8>() = (_rt::as_i32(day71)) as u8;
                                            }
                                            Datebound::Excluded(e) => {
                                                *base.add(8).cast::<u8>() = (1i32) as u8;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year72,
                                                    month: month72,
                                                    day: day72,
                                                } = e;
                                                *base.add(12).cast::<i32>() = _rt::as_i32(year72);
                                                *base.add(16).cast::<u8>() = (_rt::as_i32(month72)) as u8;
                                                *base.add(17).cast::<u8>() = (_rt::as_i32(day72)) as u8;
                                            }
                                            Datebound::Unbounded => {
                                                *base.add(8).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                        match end70 {
                                            Datebound::Included(e) => {
                                                *base.add(20).cast::<u8>() = (0i32) as u8;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year73,
                                                    month: month73,
                                                    day: day73,
                                                } = e;
                                                *base.add(24).cast::<i32>() = _rt::as_i32(year73);
                                                *base.add(28).cast::<u8>() = (_rt::as_i32(month73)) as u8;
                                                *base.add(29).cast::<u8>() = (_rt::as_i32(day73)) as u8;
                                            }
                                            Datebound::Excluded(e) => {
                                                *base.add(20).cast::<u8>() = (1i32) as u8;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year74,
                                                    month: month74,
                                                    day: day74,
                                                } = e;
                                                *base.add(24).cast::<i32>() = _rt::as_i32(year74);
                                                *base.add(28).cast::<u8>() = (_rt::as_i32(month74)) as u8;
                                                *base.add(29).cast::<u8>() = (_rt::as_i32(day74)) as u8;
                                            }
                                            Datebound::Unbounded => {
                                                *base.add(20).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                    }
                                    DbValue::Money(e) => {
                                        *base.add(0).cast::<u8>() = (34i32) as u8;
                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    DbValue::Oid(e) => {
                                        *base.add(0).cast::<u8>() = (35i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::Enumeration(e) => {
                                        *base.add(0).cast::<u8>() = (36i32) as u8;
                                        let Enumeration { name: name75, value: value75 } = e;
                                        let vec76 = name75;
                                        let ptr76 = vec76.as_ptr().cast::<u8>();
                                        let len76 = vec76.len();
                                        *base.add(12).cast::<usize>() = len76;
                                        *base.add(8).cast::<*mut u8>() = ptr76.cast_mut();
                                        let vec77 = value75;
                                        let ptr77 = vec77.as_ptr().cast::<u8>();
                                        let len77 = vec77.len();
                                        *base.add(20).cast::<usize>() = len77;
                                        *base.add(16).cast::<*mut u8>() = ptr77.cast_mut();
                                    }
                                    DbValue::Composite(e) => {
                                        *base.add(0).cast::<u8>() = (37i32) as u8;
                                        let Composite { name: name78, values: values78 } = e;
                                        let vec79 = name78;
                                        let ptr79 = vec79.as_ptr().cast::<u8>();
                                        let len79 = vec79.len();
                                        *base.add(12).cast::<usize>() = len79;
                                        *base.add(8).cast::<*mut u8>() = ptr79.cast_mut();
                                        let vec80 = values78;
                                        let len80 = vec80.len();
                                        let layout80 = _rt::alloc::Layout::from_size_align_unchecked(
                                            vec80.len() * 4,
                                            4,
                                        );
                                        let result80 = if layout80.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout80).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout80);
                                            }
                                            ptr
                                        } else {
                                            ::core::ptr::null_mut()
                                        };
                                        for (i, e) in vec80.into_iter().enumerate() {
                                            let base = result80.add(i * 4);
                                            {
                                                *base.add(0).cast::<i32>() = (e).take_handle() as i32;
                                            }
                                        }
                                        *base.add(20).cast::<usize>() = len80;
                                        *base.add(16).cast::<*mut u8>() = result80;
                                        cleanup_list.extend_from_slice(&[(result80, layout80)]);
                                    }
                                    DbValue::Domain(e) => {
                                        *base.add(0).cast::<u8>() = (38i32) as u8;
                                        let Domain { name: name81, value: value81 } = e;
                                        let vec82 = name81;
                                        let ptr82 = vec82.as_ptr().cast::<u8>();
                                        let len82 = vec82.len();
                                        *base.add(12).cast::<usize>() = len82;
                                        *base.add(8).cast::<*mut u8>() = ptr82.cast_mut();
                                        *base.add(16).cast::<i32>() = (value81).take_handle()
                                            as i32;
                                    }
                                    DbValue::Array(e) => {
                                        *base.add(0).cast::<u8>() = (39i32) as u8;
                                        let vec83 = e;
                                        let len83 = vec83.len();
                                        let layout83 = _rt::alloc::Layout::from_size_align_unchecked(
                                            vec83.len() * 4,
                                            4,
                                        );
                                        let result83 = if layout83.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout83).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout83);
                                            }
                                            ptr
                                        } else {
                                            ::core::ptr::null_mut()
                                        };
                                        for (i, e) in vec83.into_iter().enumerate() {
                                            let base = result83.add(i * 4);
                                            {
                                                *base.add(0).cast::<i32>() = (e).take_handle() as i32;
                                            }
                                        }
                                        *base.add(12).cast::<usize>() = len83;
                                        *base.add(8).cast::<*mut u8>() = result83;
                                        cleanup_list.extend_from_slice(&[(result83, layout83)]);
                                    }
                                    DbValue::Range(e) => {
                                        *base.add(0).cast::<u8>() = (40i32) as u8;
                                        let Range { name: name84, value: value84 } = e;
                                        let vec85 = name84;
                                        let ptr85 = vec85.as_ptr().cast::<u8>();
                                        let len85 = vec85.len();
                                        *base.add(12).cast::<usize>() = len85;
                                        *base.add(8).cast::<*mut u8>() = ptr85.cast_mut();
                                        let ValuesRange { start: start86, end: end86 } = value84;
                                        match start86 {
                                            ValueBound::Included(e) => {
                                                *base.add(16).cast::<u8>() = (0i32) as u8;
                                                *base.add(20).cast::<i32>() = (e).take_handle() as i32;
                                            }
                                            ValueBound::Excluded(e) => {
                                                *base.add(16).cast::<u8>() = (1i32) as u8;
                                                *base.add(20).cast::<i32>() = (e).take_handle() as i32;
                                            }
                                            ValueBound::Unbounded => {
                                                *base.add(16).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                        match end86 {
                                            ValueBound::Included(e) => {
                                                *base.add(24).cast::<u8>() = (0i32) as u8;
                                                *base.add(28).cast::<i32>() = (e).take_handle() as i32;
                                            }
                                            ValueBound::Excluded(e) => {
                                                *base.add(24).cast::<u8>() = (1i32) as u8;
                                                *base.add(28).cast::<i32>() = (e).take_handle() as i32;
                                            }
                                            ValueBound::Unbounded => {
                                                *base.add(24).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                    }
                                    DbValue::Null => {
                                        *base.add(0).cast::<u8>() = (41i32) as u8;
                                    }
                                }
                            }
                        }
                        let ptr88 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rdbms/postgres@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]db-connection.query"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            result87,
                            len87,
                            ptr88,
                        );
                        let l89 = i32::from(*ptr88.add(0).cast::<u8>());
                        if layout87.size() != 0 {
                            _rt::alloc::dealloc(result87.cast(), layout87);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l89 {
                            0 => {
                                let e = {
                                    let l90 = *ptr88.add(4).cast::<*mut u8>();
                                    let l91 = *ptr88.add(8).cast::<usize>();
                                    let base123 = l90;
                                    let len123 = l91;
                                    let mut result123 = _rt::Vec::with_capacity(len123);
                                    for i in 0..len123 {
                                        let base = base123.add(i * 48);
                                        let e123 = {
                                            let l92 = *base.add(0).cast::<i64>();
                                            let l93 = *base.add(8).cast::<*mut u8>();
                                            let l94 = *base.add(12).cast::<usize>();
                                            let len95 = l94;
                                            let bytes95 = _rt::Vec::from_raw_parts(
                                                l93.cast(),
                                                len95,
                                                len95,
                                            );
                                            let l96 = i32::from(*base.add(16).cast::<u8>());
                                            let v119 = match l96 {
                                                0 => DbColumnType::Character,
                                                1 => DbColumnType::Int2,
                                                2 => DbColumnType::Int4,
                                                3 => DbColumnType::Int8,
                                                4 => DbColumnType::Float4,
                                                5 => DbColumnType::Float8,
                                                6 => DbColumnType::Numeric,
                                                7 => DbColumnType::Boolean,
                                                8 => DbColumnType::Text,
                                                9 => DbColumnType::Varchar,
                                                10 => DbColumnType::Bpchar,
                                                11 => DbColumnType::Timestamp,
                                                12 => DbColumnType::Timestamptz,
                                                13 => DbColumnType::Date,
                                                14 => DbColumnType::Time,
                                                15 => DbColumnType::Timetz,
                                                16 => DbColumnType::Interval,
                                                17 => DbColumnType::Bytea,
                                                18 => DbColumnType::Uuid,
                                                19 => DbColumnType::Xml,
                                                20 => DbColumnType::Json,
                                                21 => DbColumnType::Jsonb,
                                                22 => DbColumnType::Jsonpath,
                                                23 => DbColumnType::Inet,
                                                24 => DbColumnType::Cidr,
                                                25 => DbColumnType::Macaddr,
                                                26 => DbColumnType::Bit,
                                                27 => DbColumnType::Varbit,
                                                28 => DbColumnType::Int4range,
                                                29 => DbColumnType::Int8range,
                                                30 => DbColumnType::Numrange,
                                                31 => DbColumnType::Tsrange,
                                                32 => DbColumnType::Tstzrange,
                                                33 => DbColumnType::Daterange,
                                                34 => DbColumnType::Money,
                                                35 => DbColumnType::Oid,
                                                36 => {
                                                    let e119 = {
                                                        let l97 = *base.add(20).cast::<*mut u8>();
                                                        let l98 = *base.add(24).cast::<usize>();
                                                        let len99 = l98;
                                                        let bytes99 = _rt::Vec::from_raw_parts(
                                                            l97.cast(),
                                                            len99,
                                                            len99,
                                                        );
                                                        EnumerationType {
                                                            name: _rt::string_lift(bytes99),
                                                        }
                                                    };
                                                    DbColumnType::Enumeration(e119)
                                                }
                                                37 => {
                                                    let e119 = {
                                                        let l100 = *base.add(20).cast::<*mut u8>();
                                                        let l101 = *base.add(24).cast::<usize>();
                                                        let len102 = l101;
                                                        let bytes102 = _rt::Vec::from_raw_parts(
                                                            l100.cast(),
                                                            len102,
                                                            len102,
                                                        );
                                                        let l103 = *base.add(28).cast::<*mut u8>();
                                                        let l104 = *base.add(32).cast::<usize>();
                                                        let base109 = l103;
                                                        let len109 = l104;
                                                        let mut result109 = _rt::Vec::with_capacity(len109);
                                                        for i in 0..len109 {
                                                            let base = base109.add(i * 12);
                                                            let e109 = {
                                                                let l105 = *base.add(0).cast::<*mut u8>();
                                                                let l106 = *base.add(4).cast::<usize>();
                                                                let len107 = l106;
                                                                let bytes107 = _rt::Vec::from_raw_parts(
                                                                    l105.cast(),
                                                                    len107,
                                                                    len107,
                                                                );
                                                                let l108 = *base.add(8).cast::<i32>();
                                                                (
                                                                    _rt::string_lift(bytes107),
                                                                    LazyDbColumnType::from_handle(l108 as u32),
                                                                )
                                                            };
                                                            result109.push(e109);
                                                        }
                                                        _rt::cabi_dealloc(base109, len109 * 12, 4);
                                                        CompositeType {
                                                            name: _rt::string_lift(bytes102),
                                                            attributes: result109,
                                                        }
                                                    };
                                                    DbColumnType::Composite(e119)
                                                }
                                                38 => {
                                                    let e119 = {
                                                        let l110 = *base.add(20).cast::<*mut u8>();
                                                        let l111 = *base.add(24).cast::<usize>();
                                                        let len112 = l111;
                                                        let bytes112 = _rt::Vec::from_raw_parts(
                                                            l110.cast(),
                                                            len112,
                                                            len112,
                                                        );
                                                        let l113 = *base.add(28).cast::<i32>();
                                                        DomainType {
                                                            name: _rt::string_lift(bytes112),
                                                            base_type: LazyDbColumnType::from_handle(l113 as u32),
                                                        }
                                                    };
                                                    DbColumnType::Domain(e119)
                                                }
                                                39 => {
                                                    let e119 = {
                                                        let l114 = *base.add(20).cast::<i32>();
                                                        LazyDbColumnType::from_handle(l114 as u32)
                                                    };
                                                    DbColumnType::Array(e119)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 40, "invalid enum discriminant");
                                                    let e119 = {
                                                        let l115 = *base.add(20).cast::<*mut u8>();
                                                        let l116 = *base.add(24).cast::<usize>();
                                                        let len117 = l116;
                                                        let bytes117 = _rt::Vec::from_raw_parts(
                                                            l115.cast(),
                                                            len117,
                                                            len117,
                                                        );
                                                        let l118 = *base.add(28).cast::<i32>();
                                                        RangeType {
                                                            name: _rt::string_lift(bytes117),
                                                            base_type: LazyDbColumnType::from_handle(l118 as u32),
                                                        }
                                                    };
                                                    DbColumnType::Range(e119)
                                                }
                                            };
                                            let l120 = *base.add(36).cast::<*mut u8>();
                                            let l121 = *base.add(40).cast::<usize>();
                                            let len122 = l121;
                                            let bytes122 = _rt::Vec::from_raw_parts(
                                                l120.cast(),
                                                len122,
                                                len122,
                                            );
                                            DbColumn {
                                                ordinal: l92 as u64,
                                                name: _rt::string_lift(bytes95),
                                                db_type: v119,
                                                db_type_name: _rt::string_lift(bytes122),
                                            }
                                        };
                                        result123.push(e123);
                                    }
                                    _rt::cabi_dealloc(base123, len123 * 48, 8);
                                    let l124 = *ptr88.add(12).cast::<*mut u8>();
                                    let l125 = *ptr88.add(16).cast::<usize>();
                                    let base389 = l124;
                                    let len389 = l125;
                                    let mut result389 = _rt::Vec::with_capacity(len389);
                                    for i in 0..len389 {
                                        let base = base389.add(i * 8);
                                        let e389 = {
                                            let l126 = *base.add(0).cast::<*mut u8>();
                                            let l127 = *base.add(4).cast::<usize>();
                                            let base388 = l126;
                                            let len388 = l127;
                                            let mut result388 = _rt::Vec::with_capacity(len388);
                                            for i in 0..len388 {
                                                let base = base388.add(i * 56);
                                                let e388 = {
                                                    let l128 = i32::from(*base.add(0).cast::<u8>());
                                                    let v387 = match l128 {
                                                        0 => {
                                                            let e387 = {
                                                                let l129 = i32::from(*base.add(8).cast::<i8>());
                                                                l129 as i8
                                                            };
                                                            DbValue::Character(e387)
                                                        }
                                                        1 => {
                                                            let e387 = {
                                                                let l130 = i32::from(*base.add(8).cast::<i16>());
                                                                l130 as i16
                                                            };
                                                            DbValue::Int2(e387)
                                                        }
                                                        2 => {
                                                            let e387 = {
                                                                let l131 = *base.add(8).cast::<i32>();
                                                                l131
                                                            };
                                                            DbValue::Int4(e387)
                                                        }
                                                        3 => {
                                                            let e387 = {
                                                                let l132 = *base.add(8).cast::<i64>();
                                                                l132
                                                            };
                                                            DbValue::Int8(e387)
                                                        }
                                                        4 => {
                                                            let e387 = {
                                                                let l133 = *base.add(8).cast::<f32>();
                                                                l133
                                                            };
                                                            DbValue::Float4(e387)
                                                        }
                                                        5 => {
                                                            let e387 = {
                                                                let l134 = *base.add(8).cast::<f64>();
                                                                l134
                                                            };
                                                            DbValue::Float8(e387)
                                                        }
                                                        6 => {
                                                            let e387 = {
                                                                let l135 = *base.add(8).cast::<*mut u8>();
                                                                let l136 = *base.add(12).cast::<usize>();
                                                                let len137 = l136;
                                                                let bytes137 = _rt::Vec::from_raw_parts(
                                                                    l135.cast(),
                                                                    len137,
                                                                    len137,
                                                                );
                                                                _rt::string_lift(bytes137)
                                                            };
                                                            DbValue::Numeric(e387)
                                                        }
                                                        7 => {
                                                            let e387 = {
                                                                let l138 = i32::from(*base.add(8).cast::<u8>());
                                                                _rt::bool_lift(l138 as u8)
                                                            };
                                                            DbValue::Boolean(e387)
                                                        }
                                                        8 => {
                                                            let e387 = {
                                                                let l139 = *base.add(8).cast::<*mut u8>();
                                                                let l140 = *base.add(12).cast::<usize>();
                                                                let len141 = l140;
                                                                let bytes141 = _rt::Vec::from_raw_parts(
                                                                    l139.cast(),
                                                                    len141,
                                                                    len141,
                                                                );
                                                                _rt::string_lift(bytes141)
                                                            };
                                                            DbValue::Text(e387)
                                                        }
                                                        9 => {
                                                            let e387 = {
                                                                let l142 = *base.add(8).cast::<*mut u8>();
                                                                let l143 = *base.add(12).cast::<usize>();
                                                                let len144 = l143;
                                                                let bytes144 = _rt::Vec::from_raw_parts(
                                                                    l142.cast(),
                                                                    len144,
                                                                    len144,
                                                                );
                                                                _rt::string_lift(bytes144)
                                                            };
                                                            DbValue::Varchar(e387)
                                                        }
                                                        10 => {
                                                            let e387 = {
                                                                let l145 = *base.add(8).cast::<*mut u8>();
                                                                let l146 = *base.add(12).cast::<usize>();
                                                                let len147 = l146;
                                                                let bytes147 = _rt::Vec::from_raw_parts(
                                                                    l145.cast(),
                                                                    len147,
                                                                    len147,
                                                                );
                                                                _rt::string_lift(bytes147)
                                                            };
                                                            DbValue::Bpchar(e387)
                                                        }
                                                        11 => {
                                                            let e387 = {
                                                                let l148 = *base.add(8).cast::<i32>();
                                                                let l149 = i32::from(*base.add(12).cast::<u8>());
                                                                let l150 = i32::from(*base.add(13).cast::<u8>());
                                                                let l151 = i32::from(*base.add(16).cast::<u8>());
                                                                let l152 = i32::from(*base.add(17).cast::<u8>());
                                                                let l153 = i32::from(*base.add(18).cast::<u8>());
                                                                let l154 = *base.add(20).cast::<i32>();
                                                                super::super::super::golem::rdbms::types::Timestamp {
                                                                    date: super::super::super::golem::rdbms::types::Date {
                                                                        year: l148,
                                                                        month: l149 as u8,
                                                                        day: l150 as u8,
                                                                    },
                                                                    time: super::super::super::golem::rdbms::types::Time {
                                                                        hour: l151 as u8,
                                                                        minute: l152 as u8,
                                                                        second: l153 as u8,
                                                                        nanosecond: l154 as u32,
                                                                    },
                                                                }
                                                            };
                                                            DbValue::Timestamp(e387)
                                                        }
                                                        12 => {
                                                            let e387 = {
                                                                let l155 = *base.add(8).cast::<i32>();
                                                                let l156 = i32::from(*base.add(12).cast::<u8>());
                                                                let l157 = i32::from(*base.add(13).cast::<u8>());
                                                                let l158 = i32::from(*base.add(16).cast::<u8>());
                                                                let l159 = i32::from(*base.add(17).cast::<u8>());
                                                                let l160 = i32::from(*base.add(18).cast::<u8>());
                                                                let l161 = *base.add(20).cast::<i32>();
                                                                let l162 = *base.add(24).cast::<i32>();
                                                                super::super::super::golem::rdbms::types::Timestamptz {
                                                                    timestamp: super::super::super::golem::rdbms::types::Timestamp {
                                                                        date: super::super::super::golem::rdbms::types::Date {
                                                                            year: l155,
                                                                            month: l156 as u8,
                                                                            day: l157 as u8,
                                                                        },
                                                                        time: super::super::super::golem::rdbms::types::Time {
                                                                            hour: l158 as u8,
                                                                            minute: l159 as u8,
                                                                            second: l160 as u8,
                                                                            nanosecond: l161 as u32,
                                                                        },
                                                                    },
                                                                    offset: l162,
                                                                }
                                                            };
                                                            DbValue::Timestamptz(e387)
                                                        }
                                                        13 => {
                                                            let e387 = {
                                                                let l163 = *base.add(8).cast::<i32>();
                                                                let l164 = i32::from(*base.add(12).cast::<u8>());
                                                                let l165 = i32::from(*base.add(13).cast::<u8>());
                                                                super::super::super::golem::rdbms::types::Date {
                                                                    year: l163,
                                                                    month: l164 as u8,
                                                                    day: l165 as u8,
                                                                }
                                                            };
                                                            DbValue::Date(e387)
                                                        }
                                                        14 => {
                                                            let e387 = {
                                                                let l166 = i32::from(*base.add(8).cast::<u8>());
                                                                let l167 = i32::from(*base.add(9).cast::<u8>());
                                                                let l168 = i32::from(*base.add(10).cast::<u8>());
                                                                let l169 = *base.add(12).cast::<i32>();
                                                                super::super::super::golem::rdbms::types::Time {
                                                                    hour: l166 as u8,
                                                                    minute: l167 as u8,
                                                                    second: l168 as u8,
                                                                    nanosecond: l169 as u32,
                                                                }
                                                            };
                                                            DbValue::Time(e387)
                                                        }
                                                        15 => {
                                                            let e387 = {
                                                                let l170 = i32::from(*base.add(8).cast::<u8>());
                                                                let l171 = i32::from(*base.add(9).cast::<u8>());
                                                                let l172 = i32::from(*base.add(10).cast::<u8>());
                                                                let l173 = *base.add(12).cast::<i32>();
                                                                let l174 = *base.add(16).cast::<i32>();
                                                                super::super::super::golem::rdbms::types::Timetz {
                                                                    time: super::super::super::golem::rdbms::types::Time {
                                                                        hour: l170 as u8,
                                                                        minute: l171 as u8,
                                                                        second: l172 as u8,
                                                                        nanosecond: l173 as u32,
                                                                    },
                                                                    offset: l174,
                                                                }
                                                            };
                                                            DbValue::Timetz(e387)
                                                        }
                                                        16 => {
                                                            let e387 = {
                                                                let l175 = *base.add(8).cast::<i32>();
                                                                let l176 = *base.add(12).cast::<i32>();
                                                                let l177 = *base.add(16).cast::<i64>();
                                                                Interval {
                                                                    months: l175,
                                                                    days: l176,
                                                                    microseconds: l177,
                                                                }
                                                            };
                                                            DbValue::Interval(e387)
                                                        }
                                                        17 => {
                                                            let e387 = {
                                                                let l178 = *base.add(8).cast::<*mut u8>();
                                                                let l179 = *base.add(12).cast::<usize>();
                                                                let len180 = l179;
                                                                _rt::Vec::from_raw_parts(l178.cast(), len180, len180)
                                                            };
                                                            DbValue::Bytea(e387)
                                                        }
                                                        18 => {
                                                            let e387 = {
                                                                let l181 = *base.add(8).cast::<*mut u8>();
                                                                let l182 = *base.add(12).cast::<usize>();
                                                                let len183 = l182;
                                                                let bytes183 = _rt::Vec::from_raw_parts(
                                                                    l181.cast(),
                                                                    len183,
                                                                    len183,
                                                                );
                                                                _rt::string_lift(bytes183)
                                                            };
                                                            DbValue::Json(e387)
                                                        }
                                                        19 => {
                                                            let e387 = {
                                                                let l184 = *base.add(8).cast::<*mut u8>();
                                                                let l185 = *base.add(12).cast::<usize>();
                                                                let len186 = l185;
                                                                let bytes186 = _rt::Vec::from_raw_parts(
                                                                    l184.cast(),
                                                                    len186,
                                                                    len186,
                                                                );
                                                                _rt::string_lift(bytes186)
                                                            };
                                                            DbValue::Jsonb(e387)
                                                        }
                                                        20 => {
                                                            let e387 = {
                                                                let l187 = *base.add(8).cast::<*mut u8>();
                                                                let l188 = *base.add(12).cast::<usize>();
                                                                let len189 = l188;
                                                                let bytes189 = _rt::Vec::from_raw_parts(
                                                                    l187.cast(),
                                                                    len189,
                                                                    len189,
                                                                );
                                                                _rt::string_lift(bytes189)
                                                            };
                                                            DbValue::Jsonpath(e387)
                                                        }
                                                        21 => {
                                                            let e387 = {
                                                                let l190 = *base.add(8).cast::<*mut u8>();
                                                                let l191 = *base.add(12).cast::<usize>();
                                                                let len192 = l191;
                                                                let bytes192 = _rt::Vec::from_raw_parts(
                                                                    l190.cast(),
                                                                    len192,
                                                                    len192,
                                                                );
                                                                _rt::string_lift(bytes192)
                                                            };
                                                            DbValue::Xml(e387)
                                                        }
                                                        22 => {
                                                            let e387 = {
                                                                let l193 = *base.add(8).cast::<i64>();
                                                                let l194 = *base.add(16).cast::<i64>();
                                                                super::super::super::golem::rdbms::types::Uuid {
                                                                    high_bits: l193 as u64,
                                                                    low_bits: l194 as u64,
                                                                }
                                                            };
                                                            DbValue::Uuid(e387)
                                                        }
                                                        23 => {
                                                            let e387 = {
                                                                let l195 = i32::from(*base.add(8).cast::<u8>());
                                                                use super::super::super::golem::rdbms::types::IpAddress as V208;
                                                                let v208 = match l195 {
                                                                    0 => {
                                                                        let e208 = {
                                                                            let l196 = i32::from(*base.add(10).cast::<u8>());
                                                                            let l197 = i32::from(*base.add(11).cast::<u8>());
                                                                            let l198 = i32::from(*base.add(12).cast::<u8>());
                                                                            let l199 = i32::from(*base.add(13).cast::<u8>());
                                                                            (l196 as u8, l197 as u8, l198 as u8, l199 as u8)
                                                                        };
                                                                        V208::Ipv4(e208)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                                        let e208 = {
                                                                            let l200 = i32::from(*base.add(10).cast::<u16>());
                                                                            let l201 = i32::from(*base.add(12).cast::<u16>());
                                                                            let l202 = i32::from(*base.add(14).cast::<u16>());
                                                                            let l203 = i32::from(*base.add(16).cast::<u16>());
                                                                            let l204 = i32::from(*base.add(18).cast::<u16>());
                                                                            let l205 = i32::from(*base.add(20).cast::<u16>());
                                                                            let l206 = i32::from(*base.add(22).cast::<u16>());
                                                                            let l207 = i32::from(*base.add(24).cast::<u16>());
                                                                            (
                                                                                l200 as u16,
                                                                                l201 as u16,
                                                                                l202 as u16,
                                                                                l203 as u16,
                                                                                l204 as u16,
                                                                                l205 as u16,
                                                                                l206 as u16,
                                                                                l207 as u16,
                                                                            )
                                                                        };
                                                                        V208::Ipv6(e208)
                                                                    }
                                                                };
                                                                v208
                                                            };
                                                            DbValue::Inet(e387)
                                                        }
                                                        24 => {
                                                            let e387 = {
                                                                let l209 = i32::from(*base.add(8).cast::<u8>());
                                                                use super::super::super::golem::rdbms::types::IpAddress as V222;
                                                                let v222 = match l209 {
                                                                    0 => {
                                                                        let e222 = {
                                                                            let l210 = i32::from(*base.add(10).cast::<u8>());
                                                                            let l211 = i32::from(*base.add(11).cast::<u8>());
                                                                            let l212 = i32::from(*base.add(12).cast::<u8>());
                                                                            let l213 = i32::from(*base.add(13).cast::<u8>());
                                                                            (l210 as u8, l211 as u8, l212 as u8, l213 as u8)
                                                                        };
                                                                        V222::Ipv4(e222)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                                        let e222 = {
                                                                            let l214 = i32::from(*base.add(10).cast::<u16>());
                                                                            let l215 = i32::from(*base.add(12).cast::<u16>());
                                                                            let l216 = i32::from(*base.add(14).cast::<u16>());
                                                                            let l217 = i32::from(*base.add(16).cast::<u16>());
                                                                            let l218 = i32::from(*base.add(18).cast::<u16>());
                                                                            let l219 = i32::from(*base.add(20).cast::<u16>());
                                                                            let l220 = i32::from(*base.add(22).cast::<u16>());
                                                                            let l221 = i32::from(*base.add(24).cast::<u16>());
                                                                            (
                                                                                l214 as u16,
                                                                                l215 as u16,
                                                                                l216 as u16,
                                                                                l217 as u16,
                                                                                l218 as u16,
                                                                                l219 as u16,
                                                                                l220 as u16,
                                                                                l221 as u16,
                                                                            )
                                                                        };
                                                                        V222::Ipv6(e222)
                                                                    }
                                                                };
                                                                v222
                                                            };
                                                            DbValue::Cidr(e387)
                                                        }
                                                        25 => {
                                                            let e387 = {
                                                                let l223 = i32::from(*base.add(8).cast::<u8>());
                                                                let l224 = i32::from(*base.add(9).cast::<u8>());
                                                                let l225 = i32::from(*base.add(10).cast::<u8>());
                                                                let l226 = i32::from(*base.add(11).cast::<u8>());
                                                                let l227 = i32::from(*base.add(12).cast::<u8>());
                                                                let l228 = i32::from(*base.add(13).cast::<u8>());
                                                                super::super::super::golem::rdbms::types::MacAddress {
                                                                    octets: (
                                                                        l223 as u8,
                                                                        l224 as u8,
                                                                        l225 as u8,
                                                                        l226 as u8,
                                                                        l227 as u8,
                                                                        l228 as u8,
                                                                    ),
                                                                }
                                                            };
                                                            DbValue::Macaddr(e387)
                                                        }
                                                        26 => {
                                                            let e387 = {
                                                                let l229 = *base.add(8).cast::<*mut u8>();
                                                                let l230 = *base.add(12).cast::<usize>();
                                                                let base232 = l229;
                                                                let len232 = l230;
                                                                let mut result232 = _rt::Vec::with_capacity(len232);
                                                                for i in 0..len232 {
                                                                    let base = base232.add(i * 1);
                                                                    let e232 = {
                                                                        let l231 = i32::from(*base.add(0).cast::<u8>());
                                                                        _rt::bool_lift(l231 as u8)
                                                                    };
                                                                    result232.push(e232);
                                                                }
                                                                _rt::cabi_dealloc(base232, len232 * 1, 1);
                                                                result232
                                                            };
                                                            DbValue::Bit(e387)
                                                        }
                                                        27 => {
                                                            let e387 = {
                                                                let l233 = *base.add(8).cast::<*mut u8>();
                                                                let l234 = *base.add(12).cast::<usize>();
                                                                let base236 = l233;
                                                                let len236 = l234;
                                                                let mut result236 = _rt::Vec::with_capacity(len236);
                                                                for i in 0..len236 {
                                                                    let base = base236.add(i * 1);
                                                                    let e236 = {
                                                                        let l235 = i32::from(*base.add(0).cast::<u8>());
                                                                        _rt::bool_lift(l235 as u8)
                                                                    };
                                                                    result236.push(e236);
                                                                }
                                                                _rt::cabi_dealloc(base236, len236 * 1, 1);
                                                                result236
                                                            };
                                                            DbValue::Varbit(e387)
                                                        }
                                                        28 => {
                                                            let e387 = {
                                                                let l237 = i32::from(*base.add(8).cast::<u8>());
                                                                let v240 = match l237 {
                                                                    0 => {
                                                                        let e240 = {
                                                                            let l238 = *base.add(12).cast::<i32>();
                                                                            l238
                                                                        };
                                                                        Int4bound::Included(e240)
                                                                    }
                                                                    1 => {
                                                                        let e240 = {
                                                                            let l239 = *base.add(12).cast::<i32>();
                                                                            l239
                                                                        };
                                                                        Int4bound::Excluded(e240)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                        Int4bound::Unbounded
                                                                    }
                                                                };
                                                                let l241 = i32::from(*base.add(16).cast::<u8>());
                                                                let v244 = match l241 {
                                                                    0 => {
                                                                        let e244 = {
                                                                            let l242 = *base.add(20).cast::<i32>();
                                                                            l242
                                                                        };
                                                                        Int4bound::Included(e244)
                                                                    }
                                                                    1 => {
                                                                        let e244 = {
                                                                            let l243 = *base.add(20).cast::<i32>();
                                                                            l243
                                                                        };
                                                                        Int4bound::Excluded(e244)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                        Int4bound::Unbounded
                                                                    }
                                                                };
                                                                Int4range {
                                                                    start: v240,
                                                                    end: v244,
                                                                }
                                                            };
                                                            DbValue::Int4range(e387)
                                                        }
                                                        29 => {
                                                            let e387 = {
                                                                let l245 = i32::from(*base.add(8).cast::<u8>());
                                                                let v248 = match l245 {
                                                                    0 => {
                                                                        let e248 = {
                                                                            let l246 = *base.add(16).cast::<i64>();
                                                                            l246
                                                                        };
                                                                        Int8bound::Included(e248)
                                                                    }
                                                                    1 => {
                                                                        let e248 = {
                                                                            let l247 = *base.add(16).cast::<i64>();
                                                                            l247
                                                                        };
                                                                        Int8bound::Excluded(e248)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                        Int8bound::Unbounded
                                                                    }
                                                                };
                                                                let l249 = i32::from(*base.add(24).cast::<u8>());
                                                                let v252 = match l249 {
                                                                    0 => {
                                                                        let e252 = {
                                                                            let l250 = *base.add(32).cast::<i64>();
                                                                            l250
                                                                        };
                                                                        Int8bound::Included(e252)
                                                                    }
                                                                    1 => {
                                                                        let e252 = {
                                                                            let l251 = *base.add(32).cast::<i64>();
                                                                            l251
                                                                        };
                                                                        Int8bound::Excluded(e252)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                        Int8bound::Unbounded
                                                                    }
                                                                };
                                                                Int8range {
                                                                    start: v248,
                                                                    end: v252,
                                                                }
                                                            };
                                                            DbValue::Int8range(e387)
                                                        }
                                                        30 => {
                                                            let e387 = {
                                                                let l253 = i32::from(*base.add(8).cast::<u8>());
                                                                let v260 = match l253 {
                                                                    0 => {
                                                                        let e260 = {
                                                                            let l254 = *base.add(12).cast::<*mut u8>();
                                                                            let l255 = *base.add(16).cast::<usize>();
                                                                            let len256 = l255;
                                                                            let bytes256 = _rt::Vec::from_raw_parts(
                                                                                l254.cast(),
                                                                                len256,
                                                                                len256,
                                                                            );
                                                                            _rt::string_lift(bytes256)
                                                                        };
                                                                        Numbound::Included(e260)
                                                                    }
                                                                    1 => {
                                                                        let e260 = {
                                                                            let l257 = *base.add(12).cast::<*mut u8>();
                                                                            let l258 = *base.add(16).cast::<usize>();
                                                                            let len259 = l258;
                                                                            let bytes259 = _rt::Vec::from_raw_parts(
                                                                                l257.cast(),
                                                                                len259,
                                                                                len259,
                                                                            );
                                                                            _rt::string_lift(bytes259)
                                                                        };
                                                                        Numbound::Excluded(e260)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                        Numbound::Unbounded
                                                                    }
                                                                };
                                                                let l261 = i32::from(*base.add(20).cast::<u8>());
                                                                let v268 = match l261 {
                                                                    0 => {
                                                                        let e268 = {
                                                                            let l262 = *base.add(24).cast::<*mut u8>();
                                                                            let l263 = *base.add(28).cast::<usize>();
                                                                            let len264 = l263;
                                                                            let bytes264 = _rt::Vec::from_raw_parts(
                                                                                l262.cast(),
                                                                                len264,
                                                                                len264,
                                                                            );
                                                                            _rt::string_lift(bytes264)
                                                                        };
                                                                        Numbound::Included(e268)
                                                                    }
                                                                    1 => {
                                                                        let e268 = {
                                                                            let l265 = *base.add(24).cast::<*mut u8>();
                                                                            let l266 = *base.add(28).cast::<usize>();
                                                                            let len267 = l266;
                                                                            let bytes267 = _rt::Vec::from_raw_parts(
                                                                                l265.cast(),
                                                                                len267,
                                                                                len267,
                                                                            );
                                                                            _rt::string_lift(bytes267)
                                                                        };
                                                                        Numbound::Excluded(e268)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                        Numbound::Unbounded
                                                                    }
                                                                };
                                                                Numrange { start: v260, end: v268 }
                                                            };
                                                            DbValue::Numrange(e387)
                                                        }
                                                        31 => {
                                                            let e387 = {
                                                                let l269 = i32::from(*base.add(8).cast::<u8>());
                                                                let v284 = match l269 {
                                                                    0 => {
                                                                        let e284 = {
                                                                            let l270 = *base.add(12).cast::<i32>();
                                                                            let l271 = i32::from(*base.add(16).cast::<u8>());
                                                                            let l272 = i32::from(*base.add(17).cast::<u8>());
                                                                            let l273 = i32::from(*base.add(20).cast::<u8>());
                                                                            let l274 = i32::from(*base.add(21).cast::<u8>());
                                                                            let l275 = i32::from(*base.add(22).cast::<u8>());
                                                                            let l276 = *base.add(24).cast::<i32>();
                                                                            super::super::super::golem::rdbms::types::Timestamp {
                                                                                date: super::super::super::golem::rdbms::types::Date {
                                                                                    year: l270,
                                                                                    month: l271 as u8,
                                                                                    day: l272 as u8,
                                                                                },
                                                                                time: super::super::super::golem::rdbms::types::Time {
                                                                                    hour: l273 as u8,
                                                                                    minute: l274 as u8,
                                                                                    second: l275 as u8,
                                                                                    nanosecond: l276 as u32,
                                                                                },
                                                                            }
                                                                        };
                                                                        Tsbound::Included(e284)
                                                                    }
                                                                    1 => {
                                                                        let e284 = {
                                                                            let l277 = *base.add(12).cast::<i32>();
                                                                            let l278 = i32::from(*base.add(16).cast::<u8>());
                                                                            let l279 = i32::from(*base.add(17).cast::<u8>());
                                                                            let l280 = i32::from(*base.add(20).cast::<u8>());
                                                                            let l281 = i32::from(*base.add(21).cast::<u8>());
                                                                            let l282 = i32::from(*base.add(22).cast::<u8>());
                                                                            let l283 = *base.add(24).cast::<i32>();
                                                                            super::super::super::golem::rdbms::types::Timestamp {
                                                                                date: super::super::super::golem::rdbms::types::Date {
                                                                                    year: l277,
                                                                                    month: l278 as u8,
                                                                                    day: l279 as u8,
                                                                                },
                                                                                time: super::super::super::golem::rdbms::types::Time {
                                                                                    hour: l280 as u8,
                                                                                    minute: l281 as u8,
                                                                                    second: l282 as u8,
                                                                                    nanosecond: l283 as u32,
                                                                                },
                                                                            }
                                                                        };
                                                                        Tsbound::Excluded(e284)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                        Tsbound::Unbounded
                                                                    }
                                                                };
                                                                let l285 = i32::from(*base.add(28).cast::<u8>());
                                                                let v300 = match l285 {
                                                                    0 => {
                                                                        let e300 = {
                                                                            let l286 = *base.add(32).cast::<i32>();
                                                                            let l287 = i32::from(*base.add(36).cast::<u8>());
                                                                            let l288 = i32::from(*base.add(37).cast::<u8>());
                                                                            let l289 = i32::from(*base.add(40).cast::<u8>());
                                                                            let l290 = i32::from(*base.add(41).cast::<u8>());
                                                                            let l291 = i32::from(*base.add(42).cast::<u8>());
                                                                            let l292 = *base.add(44).cast::<i32>();
                                                                            super::super::super::golem::rdbms::types::Timestamp {
                                                                                date: super::super::super::golem::rdbms::types::Date {
                                                                                    year: l286,
                                                                                    month: l287 as u8,
                                                                                    day: l288 as u8,
                                                                                },
                                                                                time: super::super::super::golem::rdbms::types::Time {
                                                                                    hour: l289 as u8,
                                                                                    minute: l290 as u8,
                                                                                    second: l291 as u8,
                                                                                    nanosecond: l292 as u32,
                                                                                },
                                                                            }
                                                                        };
                                                                        Tsbound::Included(e300)
                                                                    }
                                                                    1 => {
                                                                        let e300 = {
                                                                            let l293 = *base.add(32).cast::<i32>();
                                                                            let l294 = i32::from(*base.add(36).cast::<u8>());
                                                                            let l295 = i32::from(*base.add(37).cast::<u8>());
                                                                            let l296 = i32::from(*base.add(40).cast::<u8>());
                                                                            let l297 = i32::from(*base.add(41).cast::<u8>());
                                                                            let l298 = i32::from(*base.add(42).cast::<u8>());
                                                                            let l299 = *base.add(44).cast::<i32>();
                                                                            super::super::super::golem::rdbms::types::Timestamp {
                                                                                date: super::super::super::golem::rdbms::types::Date {
                                                                                    year: l293,
                                                                                    month: l294 as u8,
                                                                                    day: l295 as u8,
                                                                                },
                                                                                time: super::super::super::golem::rdbms::types::Time {
                                                                                    hour: l296 as u8,
                                                                                    minute: l297 as u8,
                                                                                    second: l298 as u8,
                                                                                    nanosecond: l299 as u32,
                                                                                },
                                                                            }
                                                                        };
                                                                        Tsbound::Excluded(e300)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                        Tsbound::Unbounded
                                                                    }
                                                                };
                                                                Tsrange { start: v284, end: v300 }
                                                            };
                                                            DbValue::Tsrange(e387)
                                                        }
                                                        32 => {
                                                            let e387 = {
                                                                let l301 = i32::from(*base.add(8).cast::<u8>());
                                                                let v318 = match l301 {
                                                                    0 => {
                                                                        let e318 = {
                                                                            let l302 = *base.add(12).cast::<i32>();
                                                                            let l303 = i32::from(*base.add(16).cast::<u8>());
                                                                            let l304 = i32::from(*base.add(17).cast::<u8>());
                                                                            let l305 = i32::from(*base.add(20).cast::<u8>());
                                                                            let l306 = i32::from(*base.add(21).cast::<u8>());
                                                                            let l307 = i32::from(*base.add(22).cast::<u8>());
                                                                            let l308 = *base.add(24).cast::<i32>();
                                                                            let l309 = *base.add(28).cast::<i32>();
                                                                            super::super::super::golem::rdbms::types::Timestamptz {
                                                                                timestamp: super::super::super::golem::rdbms::types::Timestamp {
                                                                                    date: super::super::super::golem::rdbms::types::Date {
                                                                                        year: l302,
                                                                                        month: l303 as u8,
                                                                                        day: l304 as u8,
                                                                                    },
                                                                                    time: super::super::super::golem::rdbms::types::Time {
                                                                                        hour: l305 as u8,
                                                                                        minute: l306 as u8,
                                                                                        second: l307 as u8,
                                                                                        nanosecond: l308 as u32,
                                                                                    },
                                                                                },
                                                                                offset: l309,
                                                                            }
                                                                        };
                                                                        Tstzbound::Included(e318)
                                                                    }
                                                                    1 => {
                                                                        let e318 = {
                                                                            let l310 = *base.add(12).cast::<i32>();
                                                                            let l311 = i32::from(*base.add(16).cast::<u8>());
                                                                            let l312 = i32::from(*base.add(17).cast::<u8>());
                                                                            let l313 = i32::from(*base.add(20).cast::<u8>());
                                                                            let l314 = i32::from(*base.add(21).cast::<u8>());
                                                                            let l315 = i32::from(*base.add(22).cast::<u8>());
                                                                            let l316 = *base.add(24).cast::<i32>();
                                                                            let l317 = *base.add(28).cast::<i32>();
                                                                            super::super::super::golem::rdbms::types::Timestamptz {
                                                                                timestamp: super::super::super::golem::rdbms::types::Timestamp {
                                                                                    date: super::super::super::golem::rdbms::types::Date {
                                                                                        year: l310,
                                                                                        month: l311 as u8,
                                                                                        day: l312 as u8,
                                                                                    },
                                                                                    time: super::super::super::golem::rdbms::types::Time {
                                                                                        hour: l313 as u8,
                                                                                        minute: l314 as u8,
                                                                                        second: l315 as u8,
                                                                                        nanosecond: l316 as u32,
                                                                                    },
                                                                                },
                                                                                offset: l317,
                                                                            }
                                                                        };
                                                                        Tstzbound::Excluded(e318)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                        Tstzbound::Unbounded
                                                                    }
                                                                };
                                                                let l319 = i32::from(*base.add(32).cast::<u8>());
                                                                let v336 = match l319 {
                                                                    0 => {
                                                                        let e336 = {
                                                                            let l320 = *base.add(36).cast::<i32>();
                                                                            let l321 = i32::from(*base.add(40).cast::<u8>());
                                                                            let l322 = i32::from(*base.add(41).cast::<u8>());
                                                                            let l323 = i32::from(*base.add(44).cast::<u8>());
                                                                            let l324 = i32::from(*base.add(45).cast::<u8>());
                                                                            let l325 = i32::from(*base.add(46).cast::<u8>());
                                                                            let l326 = *base.add(48).cast::<i32>();
                                                                            let l327 = *base.add(52).cast::<i32>();
                                                                            super::super::super::golem::rdbms::types::Timestamptz {
                                                                                timestamp: super::super::super::golem::rdbms::types::Timestamp {
                                                                                    date: super::super::super::golem::rdbms::types::Date {
                                                                                        year: l320,
                                                                                        month: l321 as u8,
                                                                                        day: l322 as u8,
                                                                                    },
                                                                                    time: super::super::super::golem::rdbms::types::Time {
                                                                                        hour: l323 as u8,
                                                                                        minute: l324 as u8,
                                                                                        second: l325 as u8,
                                                                                        nanosecond: l326 as u32,
                                                                                    },
                                                                                },
                                                                                offset: l327,
                                                                            }
                                                                        };
                                                                        Tstzbound::Included(e336)
                                                                    }
                                                                    1 => {
                                                                        let e336 = {
                                                                            let l328 = *base.add(36).cast::<i32>();
                                                                            let l329 = i32::from(*base.add(40).cast::<u8>());
                                                                            let l330 = i32::from(*base.add(41).cast::<u8>());
                                                                            let l331 = i32::from(*base.add(44).cast::<u8>());
                                                                            let l332 = i32::from(*base.add(45).cast::<u8>());
                                                                            let l333 = i32::from(*base.add(46).cast::<u8>());
                                                                            let l334 = *base.add(48).cast::<i32>();
                                                                            let l335 = *base.add(52).cast::<i32>();
                                                                            super::super::super::golem::rdbms::types::Timestamptz {
                                                                                timestamp: super::super::super::golem::rdbms::types::Timestamp {
                                                                                    date: super::super::super::golem::rdbms::types::Date {
                                                                                        year: l328,
                                                                                        month: l329 as u8,
                                                                                        day: l330 as u8,
                                                                                    },
                                                                                    time: super::super::super::golem::rdbms::types::Time {
                                                                                        hour: l331 as u8,
                                                                                        minute: l332 as u8,
                                                                                        second: l333 as u8,
                                                                                        nanosecond: l334 as u32,
                                                                                    },
                                                                                },
                                                                                offset: l335,
                                                                            }
                                                                        };
                                                                        Tstzbound::Excluded(e336)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                        Tstzbound::Unbounded
                                                                    }
                                                                };
                                                                Tstzrange {
                                                                    start: v318,
                                                                    end: v336,
                                                                }
                                                            };
                                                            DbValue::Tstzrange(e387)
                                                        }
                                                        33 => {
                                                            let e387 = {
                                                                let l337 = i32::from(*base.add(8).cast::<u8>());
                                                                let v344 = match l337 {
                                                                    0 => {
                                                                        let e344 = {
                                                                            let l338 = *base.add(12).cast::<i32>();
                                                                            let l339 = i32::from(*base.add(16).cast::<u8>());
                                                                            let l340 = i32::from(*base.add(17).cast::<u8>());
                                                                            super::super::super::golem::rdbms::types::Date {
                                                                                year: l338,
                                                                                month: l339 as u8,
                                                                                day: l340 as u8,
                                                                            }
                                                                        };
                                                                        Datebound::Included(e344)
                                                                    }
                                                                    1 => {
                                                                        let e344 = {
                                                                            let l341 = *base.add(12).cast::<i32>();
                                                                            let l342 = i32::from(*base.add(16).cast::<u8>());
                                                                            let l343 = i32::from(*base.add(17).cast::<u8>());
                                                                            super::super::super::golem::rdbms::types::Date {
                                                                                year: l341,
                                                                                month: l342 as u8,
                                                                                day: l343 as u8,
                                                                            }
                                                                        };
                                                                        Datebound::Excluded(e344)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                        Datebound::Unbounded
                                                                    }
                                                                };
                                                                let l345 = i32::from(*base.add(20).cast::<u8>());
                                                                let v352 = match l345 {
                                                                    0 => {
                                                                        let e352 = {
                                                                            let l346 = *base.add(24).cast::<i32>();
                                                                            let l347 = i32::from(*base.add(28).cast::<u8>());
                                                                            let l348 = i32::from(*base.add(29).cast::<u8>());
                                                                            super::super::super::golem::rdbms::types::Date {
                                                                                year: l346,
                                                                                month: l347 as u8,
                                                                                day: l348 as u8,
                                                                            }
                                                                        };
                                                                        Datebound::Included(e352)
                                                                    }
                                                                    1 => {
                                                                        let e352 = {
                                                                            let l349 = *base.add(24).cast::<i32>();
                                                                            let l350 = i32::from(*base.add(28).cast::<u8>());
                                                                            let l351 = i32::from(*base.add(29).cast::<u8>());
                                                                            super::super::super::golem::rdbms::types::Date {
                                                                                year: l349,
                                                                                month: l350 as u8,
                                                                                day: l351 as u8,
                                                                            }
                                                                        };
                                                                        Datebound::Excluded(e352)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                        Datebound::Unbounded
                                                                    }
                                                                };
                                                                Daterange {
                                                                    start: v344,
                                                                    end: v352,
                                                                }
                                                            };
                                                            DbValue::Daterange(e387)
                                                        }
                                                        34 => {
                                                            let e387 = {
                                                                let l353 = *base.add(8).cast::<i64>();
                                                                l353
                                                            };
                                                            DbValue::Money(e387)
                                                        }
                                                        35 => {
                                                            let e387 = {
                                                                let l354 = *base.add(8).cast::<i32>();
                                                                l354 as u32
                                                            };
                                                            DbValue::Oid(e387)
                                                        }
                                                        36 => {
                                                            let e387 = {
                                                                let l355 = *base.add(8).cast::<*mut u8>();
                                                                let l356 = *base.add(12).cast::<usize>();
                                                                let len357 = l356;
                                                                let bytes357 = _rt::Vec::from_raw_parts(
                                                                    l355.cast(),
                                                                    len357,
                                                                    len357,
                                                                );
                                                                let l358 = *base.add(16).cast::<*mut u8>();
                                                                let l359 = *base.add(20).cast::<usize>();
                                                                let len360 = l359;
                                                                let bytes360 = _rt::Vec::from_raw_parts(
                                                                    l358.cast(),
                                                                    len360,
                                                                    len360,
                                                                );
                                                                Enumeration {
                                                                    name: _rt::string_lift(bytes357),
                                                                    value: _rt::string_lift(bytes360),
                                                                }
                                                            };
                                                            DbValue::Enumeration(e387)
                                                        }
                                                        37 => {
                                                            let e387 = {
                                                                let l361 = *base.add(8).cast::<*mut u8>();
                                                                let l362 = *base.add(12).cast::<usize>();
                                                                let len363 = l362;
                                                                let bytes363 = _rt::Vec::from_raw_parts(
                                                                    l361.cast(),
                                                                    len363,
                                                                    len363,
                                                                );
                                                                let l364 = *base.add(16).cast::<*mut u8>();
                                                                let l365 = *base.add(20).cast::<usize>();
                                                                let base367 = l364;
                                                                let len367 = l365;
                                                                let mut result367 = _rt::Vec::with_capacity(len367);
                                                                for i in 0..len367 {
                                                                    let base = base367.add(i * 4);
                                                                    let e367 = {
                                                                        let l366 = *base.add(0).cast::<i32>();
                                                                        LazyDbValue::from_handle(l366 as u32)
                                                                    };
                                                                    result367.push(e367);
                                                                }
                                                                _rt::cabi_dealloc(base367, len367 * 4, 4);
                                                                Composite {
                                                                    name: _rt::string_lift(bytes363),
                                                                    values: result367,
                                                                }
                                                            };
                                                            DbValue::Composite(e387)
                                                        }
                                                        38 => {
                                                            let e387 = {
                                                                let l368 = *base.add(8).cast::<*mut u8>();
                                                                let l369 = *base.add(12).cast::<usize>();
                                                                let len370 = l369;
                                                                let bytes370 = _rt::Vec::from_raw_parts(
                                                                    l368.cast(),
                                                                    len370,
                                                                    len370,
                                                                );
                                                                let l371 = *base.add(16).cast::<i32>();
                                                                Domain {
                                                                    name: _rt::string_lift(bytes370),
                                                                    value: LazyDbValue::from_handle(l371 as u32),
                                                                }
                                                            };
                                                            DbValue::Domain(e387)
                                                        }
                                                        39 => {
                                                            let e387 = {
                                                                let l372 = *base.add(8).cast::<*mut u8>();
                                                                let l373 = *base.add(12).cast::<usize>();
                                                                let base375 = l372;
                                                                let len375 = l373;
                                                                let mut result375 = _rt::Vec::with_capacity(len375);
                                                                for i in 0..len375 {
                                                                    let base = base375.add(i * 4);
                                                                    let e375 = {
                                                                        let l374 = *base.add(0).cast::<i32>();
                                                                        LazyDbValue::from_handle(l374 as u32)
                                                                    };
                                                                    result375.push(e375);
                                                                }
                                                                _rt::cabi_dealloc(base375, len375 * 4, 4);
                                                                result375
                                                            };
                                                            DbValue::Array(e387)
                                                        }
                                                        40 => {
                                                            let e387 = {
                                                                let l376 = *base.add(8).cast::<*mut u8>();
                                                                let l377 = *base.add(12).cast::<usize>();
                                                                let len378 = l377;
                                                                let bytes378 = _rt::Vec::from_raw_parts(
                                                                    l376.cast(),
                                                                    len378,
                                                                    len378,
                                                                );
                                                                let l379 = i32::from(*base.add(16).cast::<u8>());
                                                                let v382 = match l379 {
                                                                    0 => {
                                                                        let e382 = {
                                                                            let l380 = *base.add(20).cast::<i32>();
                                                                            LazyDbValue::from_handle(l380 as u32)
                                                                        };
                                                                        ValueBound::Included(e382)
                                                                    }
                                                                    1 => {
                                                                        let e382 = {
                                                                            let l381 = *base.add(20).cast::<i32>();
                                                                            LazyDbValue::from_handle(l381 as u32)
                                                                        };
                                                                        ValueBound::Excluded(e382)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                        ValueBound::Unbounded
                                                                    }
                                                                };
                                                                let l383 = i32::from(*base.add(24).cast::<u8>());
                                                                let v386 = match l383 {
                                                                    0 => {
                                                                        let e386 = {
                                                                            let l384 = *base.add(28).cast::<i32>();
                                                                            LazyDbValue::from_handle(l384 as u32)
                                                                        };
                                                                        ValueBound::Included(e386)
                                                                    }
                                                                    1 => {
                                                                        let e386 = {
                                                                            let l385 = *base.add(28).cast::<i32>();
                                                                            LazyDbValue::from_handle(l385 as u32)
                                                                        };
                                                                        ValueBound::Excluded(e386)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                        ValueBound::Unbounded
                                                                    }
                                                                };
                                                                Range {
                                                                    name: _rt::string_lift(bytes378),
                                                                    value: ValuesRange {
                                                                        start: v382,
                                                                        end: v386,
                                                                    },
                                                                }
                                                            };
                                                            DbValue::Range(e387)
                                                        }
                                                        n => {
                                                            debug_assert_eq!(n, 41, "invalid enum discriminant");
                                                            DbValue::Null
                                                        }
                                                    };
                                                    v387
                                                };
                                                result388.push(e388);
                                            }
                                            _rt::cabi_dealloc(base388, len388 * 56, 8);
                                            DbRow { values: result388 }
                                        };
                                        result389.push(e389);
                                    }
                                    _rt::cabi_dealloc(base389, len389 * 8, 4);
                                    DbResult {
                                        columns: result123,
                                        rows: result389,
                                    }
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l390 = i32::from(*ptr88.add(4).cast::<u8>());
                                    let v406 = match l390 {
                                        0 => {
                                            let e406 = {
                                                let l391 = *ptr88.add(8).cast::<*mut u8>();
                                                let l392 = *ptr88.add(12).cast::<usize>();
                                                let len393 = l392;
                                                let bytes393 = _rt::Vec::from_raw_parts(
                                                    l391.cast(),
                                                    len393,
                                                    len393,
                                                );
                                                _rt::string_lift(bytes393)
                                            };
                                            Error::ConnectionFailure(e406)
                                        }
                                        1 => {
                                            let e406 = {
                                                let l394 = *ptr88.add(8).cast::<*mut u8>();
                                                let l395 = *ptr88.add(12).cast::<usize>();
                                                let len396 = l395;
                                                let bytes396 = _rt::Vec::from_raw_parts(
                                                    l394.cast(),
                                                    len396,
                                                    len396,
                                                );
                                                _rt::string_lift(bytes396)
                                            };
                                            Error::QueryParameterFailure(e406)
                                        }
                                        2 => {
                                            let e406 = {
                                                let l397 = *ptr88.add(8).cast::<*mut u8>();
                                                let l398 = *ptr88.add(12).cast::<usize>();
                                                let len399 = l398;
                                                let bytes399 = _rt::Vec::from_raw_parts(
                                                    l397.cast(),
                                                    len399,
                                                    len399,
                                                );
                                                _rt::string_lift(bytes399)
                                            };
                                            Error::QueryExecutionFailure(e406)
                                        }
                                        3 => {
                                            let e406 = {
                                                let l400 = *ptr88.add(8).cast::<*mut u8>();
                                                let l401 = *ptr88.add(12).cast::<usize>();
                                                let len402 = l401;
                                                let bytes402 = _rt::Vec::from_raw_parts(
                                                    l400.cast(),
                                                    len402,
                                                    len402,
                                                );
                                                _rt::string_lift(bytes402)
                                            };
                                            Error::QueryResponseFailure(e406)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 4, "invalid enum discriminant");
                                            let e406 = {
                                                let l403 = *ptr88.add(8).cast::<*mut u8>();
                                                let l404 = *ptr88.add(12).cast::<usize>();
                                                let len405 = l404;
                                                let bytes405 = _rt::Vec::from_raw_parts(
                                                    l403.cast(),
                                                    len405,
                                                    len405,
                                                );
                                                _rt::string_lift(bytes405)
                                            };
                                            Error::Other(e406)
                                        }
                                    };
                                    v406
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl DbConnection {
                #[allow(unused_unsafe, clippy::all)]
                pub fn query_stream(
                    &self,
                    statement: &str,
                    params: _rt::Vec<DbValue>,
                ) -> Result<DbResultStream, Error> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 16],
                        );
                        let vec0 = statement;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec87 = &params;
                        let len87 = vec87.len();
                        let layout87 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec87.len() * 56,
                            8,
                        );
                        let result87 = if layout87.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout87).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout87);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec87.into_iter().enumerate() {
                            let base = result87.add(i * 56);
                            {
                                match e {
                                    DbValue::Character(e) => {
                                        *base.add(0).cast::<u8>() = (0i32) as u8;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                    }
                                    DbValue::Int2(e) => {
                                        *base.add(0).cast::<u8>() = (1i32) as u8;
                                        *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                    }
                                    DbValue::Int4(e) => {
                                        *base.add(0).cast::<u8>() = (2i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::Int8(e) => {
                                        *base.add(0).cast::<u8>() = (3i32) as u8;
                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    DbValue::Float4(e) => {
                                        *base.add(0).cast::<u8>() = (4i32) as u8;
                                        *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                    }
                                    DbValue::Float8(e) => {
                                        *base.add(0).cast::<u8>() = (5i32) as u8;
                                        *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                    }
                                    DbValue::Numeric(e) => {
                                        *base.add(0).cast::<u8>() = (6i32) as u8;
                                        let vec1 = e;
                                        let ptr1 = vec1.as_ptr().cast::<u8>();
                                        let len1 = vec1.len();
                                        *base.add(12).cast::<usize>() = len1;
                                        *base.add(8).cast::<*mut u8>() = ptr1.cast_mut();
                                    }
                                    DbValue::Boolean(e) => {
                                        *base.add(0).cast::<u8>() = (7i32) as u8;
                                        *base.add(8).cast::<u8>() = (match e {
                                            true => 1,
                                            false => 0,
                                        }) as u8;
                                    }
                                    DbValue::Text(e) => {
                                        *base.add(0).cast::<u8>() = (8i32) as u8;
                                        let vec2 = e;
                                        let ptr2 = vec2.as_ptr().cast::<u8>();
                                        let len2 = vec2.len();
                                        *base.add(12).cast::<usize>() = len2;
                                        *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                    }
                                    DbValue::Varchar(e) => {
                                        *base.add(0).cast::<u8>() = (9i32) as u8;
                                        let vec3 = e;
                                        let ptr3 = vec3.as_ptr().cast::<u8>();
                                        let len3 = vec3.len();
                                        *base.add(12).cast::<usize>() = len3;
                                        *base.add(8).cast::<*mut u8>() = ptr3.cast_mut();
                                    }
                                    DbValue::Bpchar(e) => {
                                        *base.add(0).cast::<u8>() = (10i32) as u8;
                                        let vec4 = e;
                                        let ptr4 = vec4.as_ptr().cast::<u8>();
                                        let len4 = vec4.len();
                                        *base.add(12).cast::<usize>() = len4;
                                        *base.add(8).cast::<*mut u8>() = ptr4.cast_mut();
                                    }
                                    DbValue::Timestamp(e) => {
                                        *base.add(0).cast::<u8>() = (11i32) as u8;
                                        let super::super::super::golem::rdbms::types::Timestamp {
                                            date: date5,
                                            time: time5,
                                        } = e;
                                        let super::super::super::golem::rdbms::types::Date {
                                            year: year6,
                                            month: month6,
                                            day: day6,
                                        } = date5;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(year6);
                                        *base.add(12).cast::<u8>() = (_rt::as_i32(month6)) as u8;
                                        *base.add(13).cast::<u8>() = (_rt::as_i32(day6)) as u8;
                                        let super::super::super::golem::rdbms::types::Time {
                                            hour: hour7,
                                            minute: minute7,
                                            second: second7,
                                            nanosecond: nanosecond7,
                                        } = time5;
                                        *base.add(16).cast::<u8>() = (_rt::as_i32(hour7)) as u8;
                                        *base.add(17).cast::<u8>() = (_rt::as_i32(minute7)) as u8;
                                        *base.add(18).cast::<u8>() = (_rt::as_i32(second7)) as u8;
                                        *base.add(20).cast::<i32>() = _rt::as_i32(nanosecond7);
                                    }
                                    DbValue::Timestamptz(e) => {
                                        *base.add(0).cast::<u8>() = (12i32) as u8;
                                        let super::super::super::golem::rdbms::types::Timestamptz {
                                            timestamp: timestamp8,
                                            offset: offset8,
                                        } = e;
                                        let super::super::super::golem::rdbms::types::Timestamp {
                                            date: date9,
                                            time: time9,
                                        } = timestamp8;
                                        let super::super::super::golem::rdbms::types::Date {
                                            year: year10,
                                            month: month10,
                                            day: day10,
                                        } = date9;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(year10);
                                        *base.add(12).cast::<u8>() = (_rt::as_i32(month10)) as u8;
                                        *base.add(13).cast::<u8>() = (_rt::as_i32(day10)) as u8;
                                        let super::super::super::golem::rdbms::types::Time {
                                            hour: hour11,
                                            minute: minute11,
                                            second: second11,
                                            nanosecond: nanosecond11,
                                        } = time9;
                                        *base.add(16).cast::<u8>() = (_rt::as_i32(hour11)) as u8;
                                        *base.add(17).cast::<u8>() = (_rt::as_i32(minute11)) as u8;
                                        *base.add(18).cast::<u8>() = (_rt::as_i32(second11)) as u8;
                                        *base.add(20).cast::<i32>() = _rt::as_i32(nanosecond11);
                                        *base.add(24).cast::<i32>() = _rt::as_i32(offset8);
                                    }
                                    DbValue::Date(e) => {
                                        *base.add(0).cast::<u8>() = (13i32) as u8;
                                        let super::super::super::golem::rdbms::types::Date {
                                            year: year12,
                                            month: month12,
                                            day: day12,
                                        } = e;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(year12);
                                        *base.add(12).cast::<u8>() = (_rt::as_i32(month12)) as u8;
                                        *base.add(13).cast::<u8>() = (_rt::as_i32(day12)) as u8;
                                    }
                                    DbValue::Time(e) => {
                                        *base.add(0).cast::<u8>() = (14i32) as u8;
                                        let super::super::super::golem::rdbms::types::Time {
                                            hour: hour13,
                                            minute: minute13,
                                            second: second13,
                                            nanosecond: nanosecond13,
                                        } = e;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(hour13)) as u8;
                                        *base.add(9).cast::<u8>() = (_rt::as_i32(minute13)) as u8;
                                        *base.add(10).cast::<u8>() = (_rt::as_i32(second13)) as u8;
                                        *base.add(12).cast::<i32>() = _rt::as_i32(nanosecond13);
                                    }
                                    DbValue::Timetz(e) => {
                                        *base.add(0).cast::<u8>() = (15i32) as u8;
                                        let super::super::super::golem::rdbms::types::Timetz {
                                            time: time14,
                                            offset: offset14,
                                        } = e;
                                        let super::super::super::golem::rdbms::types::Time {
                                            hour: hour15,
                                            minute: minute15,
                                            second: second15,
                                            nanosecond: nanosecond15,
                                        } = time14;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(hour15)) as u8;
                                        *base.add(9).cast::<u8>() = (_rt::as_i32(minute15)) as u8;
                                        *base.add(10).cast::<u8>() = (_rt::as_i32(second15)) as u8;
                                        *base.add(12).cast::<i32>() = _rt::as_i32(nanosecond15);
                                        *base.add(16).cast::<i32>() = _rt::as_i32(offset14);
                                    }
                                    DbValue::Interval(e) => {
                                        *base.add(0).cast::<u8>() = (16i32) as u8;
                                        let Interval {
                                            months: months16,
                                            days: days16,
                                            microseconds: microseconds16,
                                        } = e;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(months16);
                                        *base.add(12).cast::<i32>() = _rt::as_i32(days16);
                                        *base.add(16).cast::<i64>() = _rt::as_i64(microseconds16);
                                    }
                                    DbValue::Bytea(e) => {
                                        *base.add(0).cast::<u8>() = (17i32) as u8;
                                        let vec17 = e;
                                        let ptr17 = vec17.as_ptr().cast::<u8>();
                                        let len17 = vec17.len();
                                        *base.add(12).cast::<usize>() = len17;
                                        *base.add(8).cast::<*mut u8>() = ptr17.cast_mut();
                                    }
                                    DbValue::Json(e) => {
                                        *base.add(0).cast::<u8>() = (18i32) as u8;
                                        let vec18 = e;
                                        let ptr18 = vec18.as_ptr().cast::<u8>();
                                        let len18 = vec18.len();
                                        *base.add(12).cast::<usize>() = len18;
                                        *base.add(8).cast::<*mut u8>() = ptr18.cast_mut();
                                    }
                                    DbValue::Jsonb(e) => {
                                        *base.add(0).cast::<u8>() = (19i32) as u8;
                                        let vec19 = e;
                                        let ptr19 = vec19.as_ptr().cast::<u8>();
                                        let len19 = vec19.len();
                                        *base.add(12).cast::<usize>() = len19;
                                        *base.add(8).cast::<*mut u8>() = ptr19.cast_mut();
                                    }
                                    DbValue::Jsonpath(e) => {
                                        *base.add(0).cast::<u8>() = (20i32) as u8;
                                        let vec20 = e;
                                        let ptr20 = vec20.as_ptr().cast::<u8>();
                                        let len20 = vec20.len();
                                        *base.add(12).cast::<usize>() = len20;
                                        *base.add(8).cast::<*mut u8>() = ptr20.cast_mut();
                                    }
                                    DbValue::Xml(e) => {
                                        *base.add(0).cast::<u8>() = (21i32) as u8;
                                        let vec21 = e;
                                        let ptr21 = vec21.as_ptr().cast::<u8>();
                                        let len21 = vec21.len();
                                        *base.add(12).cast::<usize>() = len21;
                                        *base.add(8).cast::<*mut u8>() = ptr21.cast_mut();
                                    }
                                    DbValue::Uuid(e) => {
                                        *base.add(0).cast::<u8>() = (22i32) as u8;
                                        let super::super::super::golem::rdbms::types::Uuid {
                                            high_bits: high_bits22,
                                            low_bits: low_bits22,
                                        } = e;
                                        *base.add(8).cast::<i64>() = _rt::as_i64(high_bits22);
                                        *base.add(16).cast::<i64>() = _rt::as_i64(low_bits22);
                                    }
                                    DbValue::Inet(e) => {
                                        *base.add(0).cast::<u8>() = (23i32) as u8;
                                        use super::super::super::golem::rdbms::types::IpAddress as V25;
                                        match e {
                                            V25::Ipv4(e) => {
                                                *base.add(8).cast::<u8>() = (0i32) as u8;
                                                let (t23_0, t23_1, t23_2, t23_3) = e;
                                                *base.add(10).cast::<u8>() = (_rt::as_i32(t23_0)) as u8;
                                                *base.add(11).cast::<u8>() = (_rt::as_i32(t23_1)) as u8;
                                                *base.add(12).cast::<u8>() = (_rt::as_i32(t23_2)) as u8;
                                                *base.add(13).cast::<u8>() = (_rt::as_i32(t23_3)) as u8;
                                            }
                                            V25::Ipv6(e) => {
                                                *base.add(8).cast::<u8>() = (1i32) as u8;
                                                let (
                                                    t24_0,
                                                    t24_1,
                                                    t24_2,
                                                    t24_3,
                                                    t24_4,
                                                    t24_5,
                                                    t24_6,
                                                    t24_7,
                                                ) = e;
                                                *base.add(10).cast::<u16>() = (_rt::as_i32(t24_0)) as u16;
                                                *base.add(12).cast::<u16>() = (_rt::as_i32(t24_1)) as u16;
                                                *base.add(14).cast::<u16>() = (_rt::as_i32(t24_2)) as u16;
                                                *base.add(16).cast::<u16>() = (_rt::as_i32(t24_3)) as u16;
                                                *base.add(18).cast::<u16>() = (_rt::as_i32(t24_4)) as u16;
                                                *base.add(20).cast::<u16>() = (_rt::as_i32(t24_5)) as u16;
                                                *base.add(22).cast::<u16>() = (_rt::as_i32(t24_6)) as u16;
                                                *base.add(24).cast::<u16>() = (_rt::as_i32(t24_7)) as u16;
                                            }
                                        }
                                    }
                                    DbValue::Cidr(e) => {
                                        *base.add(0).cast::<u8>() = (24i32) as u8;
                                        use super::super::super::golem::rdbms::types::IpAddress as V28;
                                        match e {
                                            V28::Ipv4(e) => {
                                                *base.add(8).cast::<u8>() = (0i32) as u8;
                                                let (t26_0, t26_1, t26_2, t26_3) = e;
                                                *base.add(10).cast::<u8>() = (_rt::as_i32(t26_0)) as u8;
                                                *base.add(11).cast::<u8>() = (_rt::as_i32(t26_1)) as u8;
                                                *base.add(12).cast::<u8>() = (_rt::as_i32(t26_2)) as u8;
                                                *base.add(13).cast::<u8>() = (_rt::as_i32(t26_3)) as u8;
                                            }
                                            V28::Ipv6(e) => {
                                                *base.add(8).cast::<u8>() = (1i32) as u8;
                                                let (
                                                    t27_0,
                                                    t27_1,
                                                    t27_2,
                                                    t27_3,
                                                    t27_4,
                                                    t27_5,
                                                    t27_6,
                                                    t27_7,
                                                ) = e;
                                                *base.add(10).cast::<u16>() = (_rt::as_i32(t27_0)) as u16;
                                                *base.add(12).cast::<u16>() = (_rt::as_i32(t27_1)) as u16;
                                                *base.add(14).cast::<u16>() = (_rt::as_i32(t27_2)) as u16;
                                                *base.add(16).cast::<u16>() = (_rt::as_i32(t27_3)) as u16;
                                                *base.add(18).cast::<u16>() = (_rt::as_i32(t27_4)) as u16;
                                                *base.add(20).cast::<u16>() = (_rt::as_i32(t27_5)) as u16;
                                                *base.add(22).cast::<u16>() = (_rt::as_i32(t27_6)) as u16;
                                                *base.add(24).cast::<u16>() = (_rt::as_i32(t27_7)) as u16;
                                            }
                                        }
                                    }
                                    DbValue::Macaddr(e) => {
                                        *base.add(0).cast::<u8>() = (25i32) as u8;
                                        let super::super::super::golem::rdbms::types::MacAddress {
                                            octets: octets29,
                                        } = e;
                                        let (t30_0, t30_1, t30_2, t30_3, t30_4, t30_5) = octets29;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(t30_0)) as u8;
                                        *base.add(9).cast::<u8>() = (_rt::as_i32(t30_1)) as u8;
                                        *base.add(10).cast::<u8>() = (_rt::as_i32(t30_2)) as u8;
                                        *base.add(11).cast::<u8>() = (_rt::as_i32(t30_3)) as u8;
                                        *base.add(12).cast::<u8>() = (_rt::as_i32(t30_4)) as u8;
                                        *base.add(13).cast::<u8>() = (_rt::as_i32(t30_5)) as u8;
                                    }
                                    DbValue::Bit(e) => {
                                        *base.add(0).cast::<u8>() = (26i32) as u8;
                                        let vec31 = e;
                                        let len31 = vec31.len();
                                        let layout31 = _rt::alloc::Layout::from_size_align_unchecked(
                                            vec31.len() * 1,
                                            1,
                                        );
                                        let result31 = if layout31.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout31).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout31);
                                            }
                                            ptr
                                        } else {
                                            ::core::ptr::null_mut()
                                        };
                                        for (i, e) in vec31.into_iter().enumerate() {
                                            let base = result31.add(i * 1);
                                            {
                                                *base.add(0).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                        }
                                        *base.add(12).cast::<usize>() = len31;
                                        *base.add(8).cast::<*mut u8>() = result31;
                                        cleanup_list.extend_from_slice(&[(result31, layout31)]);
                                    }
                                    DbValue::Varbit(e) => {
                                        *base.add(0).cast::<u8>() = (27i32) as u8;
                                        let vec32 = e;
                                        let len32 = vec32.len();
                                        let layout32 = _rt::alloc::Layout::from_size_align_unchecked(
                                            vec32.len() * 1,
                                            1,
                                        );
                                        let result32 = if layout32.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout32).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout32);
                                            }
                                            ptr
                                        } else {
                                            ::core::ptr::null_mut()
                                        };
                                        for (i, e) in vec32.into_iter().enumerate() {
                                            let base = result32.add(i * 1);
                                            {
                                                *base.add(0).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                        }
                                        *base.add(12).cast::<usize>() = len32;
                                        *base.add(8).cast::<*mut u8>() = result32;
                                        cleanup_list.extend_from_slice(&[(result32, layout32)]);
                                    }
                                    DbValue::Int4range(e) => {
                                        *base.add(0).cast::<u8>() = (28i32) as u8;
                                        let Int4range { start: start33, end: end33 } = e;
                                        match start33 {
                                            Int4bound::Included(e) => {
                                                *base.add(8).cast::<u8>() = (0i32) as u8;
                                                *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            Int4bound::Excluded(e) => {
                                                *base.add(8).cast::<u8>() = (1i32) as u8;
                                                *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            Int4bound::Unbounded => {
                                                *base.add(8).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                        match end33 {
                                            Int4bound::Included(e) => {
                                                *base.add(16).cast::<u8>() = (0i32) as u8;
                                                *base.add(20).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            Int4bound::Excluded(e) => {
                                                *base.add(16).cast::<u8>() = (1i32) as u8;
                                                *base.add(20).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            Int4bound::Unbounded => {
                                                *base.add(16).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                    }
                                    DbValue::Int8range(e) => {
                                        *base.add(0).cast::<u8>() = (29i32) as u8;
                                        let Int8range { start: start34, end: end34 } = e;
                                        match start34 {
                                            Int8bound::Included(e) => {
                                                *base.add(8).cast::<u8>() = (0i32) as u8;
                                                *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            Int8bound::Excluded(e) => {
                                                *base.add(8).cast::<u8>() = (1i32) as u8;
                                                *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            Int8bound::Unbounded => {
                                                *base.add(8).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                        match end34 {
                                            Int8bound::Included(e) => {
                                                *base.add(24).cast::<u8>() = (0i32) as u8;
                                                *base.add(32).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            Int8bound::Excluded(e) => {
                                                *base.add(24).cast::<u8>() = (1i32) as u8;
                                                *base.add(32).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            Int8bound::Unbounded => {
                                                *base.add(24).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                    }
                                    DbValue::Numrange(e) => {
                                        *base.add(0).cast::<u8>() = (30i32) as u8;
                                        let Numrange { start: start35, end: end35 } = e;
                                        match start35 {
                                            Numbound::Included(e) => {
                                                *base.add(8).cast::<u8>() = (0i32) as u8;
                                                let vec36 = e;
                                                let ptr36 = vec36.as_ptr().cast::<u8>();
                                                let len36 = vec36.len();
                                                *base.add(16).cast::<usize>() = len36;
                                                *base.add(12).cast::<*mut u8>() = ptr36.cast_mut();
                                            }
                                            Numbound::Excluded(e) => {
                                                *base.add(8).cast::<u8>() = (1i32) as u8;
                                                let vec37 = e;
                                                let ptr37 = vec37.as_ptr().cast::<u8>();
                                                let len37 = vec37.len();
                                                *base.add(16).cast::<usize>() = len37;
                                                *base.add(12).cast::<*mut u8>() = ptr37.cast_mut();
                                            }
                                            Numbound::Unbounded => {
                                                *base.add(8).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                        match end35 {
                                            Numbound::Included(e) => {
                                                *base.add(20).cast::<u8>() = (0i32) as u8;
                                                let vec38 = e;
                                                let ptr38 = vec38.as_ptr().cast::<u8>();
                                                let len38 = vec38.len();
                                                *base.add(28).cast::<usize>() = len38;
                                                *base.add(24).cast::<*mut u8>() = ptr38.cast_mut();
                                            }
                                            Numbound::Excluded(e) => {
                                                *base.add(20).cast::<u8>() = (1i32) as u8;
                                                let vec39 = e;
                                                let ptr39 = vec39.as_ptr().cast::<u8>();
                                                let len39 = vec39.len();
                                                *base.add(28).cast::<usize>() = len39;
                                                *base.add(24).cast::<*mut u8>() = ptr39.cast_mut();
                                            }
                                            Numbound::Unbounded => {
                                                *base.add(20).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                    }
                                    DbValue::Tsrange(e) => {
                                        *base.add(0).cast::<u8>() = (31i32) as u8;
                                        let Tsrange { start: start40, end: end40 } = e;
                                        match start40 {
                                            Tsbound::Included(e) => {
                                                *base.add(8).cast::<u8>() = (0i32) as u8;
                                                let super::super::super::golem::rdbms::types::Timestamp {
                                                    date: date41,
                                                    time: time41,
                                                } = e;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year42,
                                                    month: month42,
                                                    day: day42,
                                                } = date41;
                                                *base.add(12).cast::<i32>() = _rt::as_i32(year42);
                                                *base.add(16).cast::<u8>() = (_rt::as_i32(month42)) as u8;
                                                *base.add(17).cast::<u8>() = (_rt::as_i32(day42)) as u8;
                                                let super::super::super::golem::rdbms::types::Time {
                                                    hour: hour43,
                                                    minute: minute43,
                                                    second: second43,
                                                    nanosecond: nanosecond43,
                                                } = time41;
                                                *base.add(20).cast::<u8>() = (_rt::as_i32(hour43)) as u8;
                                                *base.add(21).cast::<u8>() = (_rt::as_i32(minute43)) as u8;
                                                *base.add(22).cast::<u8>() = (_rt::as_i32(second43)) as u8;
                                                *base.add(24).cast::<i32>() = _rt::as_i32(nanosecond43);
                                            }
                                            Tsbound::Excluded(e) => {
                                                *base.add(8).cast::<u8>() = (1i32) as u8;
                                                let super::super::super::golem::rdbms::types::Timestamp {
                                                    date: date44,
                                                    time: time44,
                                                } = e;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year45,
                                                    month: month45,
                                                    day: day45,
                                                } = date44;
                                                *base.add(12).cast::<i32>() = _rt::as_i32(year45);
                                                *base.add(16).cast::<u8>() = (_rt::as_i32(month45)) as u8;
                                                *base.add(17).cast::<u8>() = (_rt::as_i32(day45)) as u8;
                                                let super::super::super::golem::rdbms::types::Time {
                                                    hour: hour46,
                                                    minute: minute46,
                                                    second: second46,
                                                    nanosecond: nanosecond46,
                                                } = time44;
                                                *base.add(20).cast::<u8>() = (_rt::as_i32(hour46)) as u8;
                                                *base.add(21).cast::<u8>() = (_rt::as_i32(minute46)) as u8;
                                                *base.add(22).cast::<u8>() = (_rt::as_i32(second46)) as u8;
                                                *base.add(24).cast::<i32>() = _rt::as_i32(nanosecond46);
                                            }
                                            Tsbound::Unbounded => {
                                                *base.add(8).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                        match end40 {
                                            Tsbound::Included(e) => {
                                                *base.add(28).cast::<u8>() = (0i32) as u8;
                                                let super::super::super::golem::rdbms::types::Timestamp {
                                                    date: date47,
                                                    time: time47,
                                                } = e;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year48,
                                                    month: month48,
                                                    day: day48,
                                                } = date47;
                                                *base.add(32).cast::<i32>() = _rt::as_i32(year48);
                                                *base.add(36).cast::<u8>() = (_rt::as_i32(month48)) as u8;
                                                *base.add(37).cast::<u8>() = (_rt::as_i32(day48)) as u8;
                                                let super::super::super::golem::rdbms::types::Time {
                                                    hour: hour49,
                                                    minute: minute49,
                                                    second: second49,
                                                    nanosecond: nanosecond49,
                                                } = time47;
                                                *base.add(40).cast::<u8>() = (_rt::as_i32(hour49)) as u8;
                                                *base.add(41).cast::<u8>() = (_rt::as_i32(minute49)) as u8;
                                                *base.add(42).cast::<u8>() = (_rt::as_i32(second49)) as u8;
                                                *base.add(44).cast::<i32>() = _rt::as_i32(nanosecond49);
                                            }
                                            Tsbound::Excluded(e) => {
                                                *base.add(28).cast::<u8>() = (1i32) as u8;
                                                let super::super::super::golem::rdbms::types::Timestamp {
                                                    date: date50,
                                                    time: time50,
                                                } = e;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year51,
                                                    month: month51,
                                                    day: day51,
                                                } = date50;
                                                *base.add(32).cast::<i32>() = _rt::as_i32(year51);
                                                *base.add(36).cast::<u8>() = (_rt::as_i32(month51)) as u8;
                                                *base.add(37).cast::<u8>() = (_rt::as_i32(day51)) as u8;
                                                let super::super::super::golem::rdbms::types::Time {
                                                    hour: hour52,
                                                    minute: minute52,
                                                    second: second52,
                                                    nanosecond: nanosecond52,
                                                } = time50;
                                                *base.add(40).cast::<u8>() = (_rt::as_i32(hour52)) as u8;
                                                *base.add(41).cast::<u8>() = (_rt::as_i32(minute52)) as u8;
                                                *base.add(42).cast::<u8>() = (_rt::as_i32(second52)) as u8;
                                                *base.add(44).cast::<i32>() = _rt::as_i32(nanosecond52);
                                            }
                                            Tsbound::Unbounded => {
                                                *base.add(28).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                    }
                                    DbValue::Tstzrange(e) => {
                                        *base.add(0).cast::<u8>() = (32i32) as u8;
                                        let Tstzrange { start: start53, end: end53 } = e;
                                        match start53 {
                                            Tstzbound::Included(e) => {
                                                *base.add(8).cast::<u8>() = (0i32) as u8;
                                                let super::super::super::golem::rdbms::types::Timestamptz {
                                                    timestamp: timestamp54,
                                                    offset: offset54,
                                                } = e;
                                                let super::super::super::golem::rdbms::types::Timestamp {
                                                    date: date55,
                                                    time: time55,
                                                } = timestamp54;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year56,
                                                    month: month56,
                                                    day: day56,
                                                } = date55;
                                                *base.add(12).cast::<i32>() = _rt::as_i32(year56);
                                                *base.add(16).cast::<u8>() = (_rt::as_i32(month56)) as u8;
                                                *base.add(17).cast::<u8>() = (_rt::as_i32(day56)) as u8;
                                                let super::super::super::golem::rdbms::types::Time {
                                                    hour: hour57,
                                                    minute: minute57,
                                                    second: second57,
                                                    nanosecond: nanosecond57,
                                                } = time55;
                                                *base.add(20).cast::<u8>() = (_rt::as_i32(hour57)) as u8;
                                                *base.add(21).cast::<u8>() = (_rt::as_i32(minute57)) as u8;
                                                *base.add(22).cast::<u8>() = (_rt::as_i32(second57)) as u8;
                                                *base.add(24).cast::<i32>() = _rt::as_i32(nanosecond57);
                                                *base.add(28).cast::<i32>() = _rt::as_i32(offset54);
                                            }
                                            Tstzbound::Excluded(e) => {
                                                *base.add(8).cast::<u8>() = (1i32) as u8;
                                                let super::super::super::golem::rdbms::types::Timestamptz {
                                                    timestamp: timestamp58,
                                                    offset: offset58,
                                                } = e;
                                                let super::super::super::golem::rdbms::types::Timestamp {
                                                    date: date59,
                                                    time: time59,
                                                } = timestamp58;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year60,
                                                    month: month60,
                                                    day: day60,
                                                } = date59;
                                                *base.add(12).cast::<i32>() = _rt::as_i32(year60);
                                                *base.add(16).cast::<u8>() = (_rt::as_i32(month60)) as u8;
                                                *base.add(17).cast::<u8>() = (_rt::as_i32(day60)) as u8;
                                                let super::super::super::golem::rdbms::types::Time {
                                                    hour: hour61,
                                                    minute: minute61,
                                                    second: second61,
                                                    nanosecond: nanosecond61,
                                                } = time59;
                                                *base.add(20).cast::<u8>() = (_rt::as_i32(hour61)) as u8;
                                                *base.add(21).cast::<u8>() = (_rt::as_i32(minute61)) as u8;
                                                *base.add(22).cast::<u8>() = (_rt::as_i32(second61)) as u8;
                                                *base.add(24).cast::<i32>() = _rt::as_i32(nanosecond61);
                                                *base.add(28).cast::<i32>() = _rt::as_i32(offset58);
                                            }
                                            Tstzbound::Unbounded => {
                                                *base.add(8).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                        match end53 {
                                            Tstzbound::Included(e) => {
                                                *base.add(32).cast::<u8>() = (0i32) as u8;
                                                let super::super::super::golem::rdbms::types::Timestamptz {
                                                    timestamp: timestamp62,
                                                    offset: offset62,
                                                } = e;
                                                let super::super::super::golem::rdbms::types::Timestamp {
                                                    date: date63,
                                                    time: time63,
                                                } = timestamp62;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year64,
                                                    month: month64,
                                                    day: day64,
                                                } = date63;
                                                *base.add(36).cast::<i32>() = _rt::as_i32(year64);
                                                *base.add(40).cast::<u8>() = (_rt::as_i32(month64)) as u8;
                                                *base.add(41).cast::<u8>() = (_rt::as_i32(day64)) as u8;
                                                let super::super::super::golem::rdbms::types::Time {
                                                    hour: hour65,
                                                    minute: minute65,
                                                    second: second65,
                                                    nanosecond: nanosecond65,
                                                } = time63;
                                                *base.add(44).cast::<u8>() = (_rt::as_i32(hour65)) as u8;
                                                *base.add(45).cast::<u8>() = (_rt::as_i32(minute65)) as u8;
                                                *base.add(46).cast::<u8>() = (_rt::as_i32(second65)) as u8;
                                                *base.add(48).cast::<i32>() = _rt::as_i32(nanosecond65);
                                                *base.add(52).cast::<i32>() = _rt::as_i32(offset62);
                                            }
                                            Tstzbound::Excluded(e) => {
                                                *base.add(32).cast::<u8>() = (1i32) as u8;
                                                let super::super::super::golem::rdbms::types::Timestamptz {
                                                    timestamp: timestamp66,
                                                    offset: offset66,
                                                } = e;
                                                let super::super::super::golem::rdbms::types::Timestamp {
                                                    date: date67,
                                                    time: time67,
                                                } = timestamp66;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year68,
                                                    month: month68,
                                                    day: day68,
                                                } = date67;
                                                *base.add(36).cast::<i32>() = _rt::as_i32(year68);
                                                *base.add(40).cast::<u8>() = (_rt::as_i32(month68)) as u8;
                                                *base.add(41).cast::<u8>() = (_rt::as_i32(day68)) as u8;
                                                let super::super::super::golem::rdbms::types::Time {
                                                    hour: hour69,
                                                    minute: minute69,
                                                    second: second69,
                                                    nanosecond: nanosecond69,
                                                } = time67;
                                                *base.add(44).cast::<u8>() = (_rt::as_i32(hour69)) as u8;
                                                *base.add(45).cast::<u8>() = (_rt::as_i32(minute69)) as u8;
                                                *base.add(46).cast::<u8>() = (_rt::as_i32(second69)) as u8;
                                                *base.add(48).cast::<i32>() = _rt::as_i32(nanosecond69);
                                                *base.add(52).cast::<i32>() = _rt::as_i32(offset66);
                                            }
                                            Tstzbound::Unbounded => {
                                                *base.add(32).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                    }
                                    DbValue::Daterange(e) => {
                                        *base.add(0).cast::<u8>() = (33i32) as u8;
                                        let Daterange { start: start70, end: end70 } = e;
                                        match start70 {
                                            Datebound::Included(e) => {
                                                *base.add(8).cast::<u8>() = (0i32) as u8;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year71,
                                                    month: month71,
                                                    day: day71,
                                                } = e;
                                                *base.add(12).cast::<i32>() = _rt::as_i32(year71);
                                                *base.add(16).cast::<u8>() = (_rt::as_i32(month71)) as u8;
                                                *base.add(17).cast::<u8>() = (_rt::as_i32(day71)) as u8;
                                            }
                                            Datebound::Excluded(e) => {
                                                *base.add(8).cast::<u8>() = (1i32) as u8;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year72,
                                                    month: month72,
                                                    day: day72,
                                                } = e;
                                                *base.add(12).cast::<i32>() = _rt::as_i32(year72);
                                                *base.add(16).cast::<u8>() = (_rt::as_i32(month72)) as u8;
                                                *base.add(17).cast::<u8>() = (_rt::as_i32(day72)) as u8;
                                            }
                                            Datebound::Unbounded => {
                                                *base.add(8).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                        match end70 {
                                            Datebound::Included(e) => {
                                                *base.add(20).cast::<u8>() = (0i32) as u8;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year73,
                                                    month: month73,
                                                    day: day73,
                                                } = e;
                                                *base.add(24).cast::<i32>() = _rt::as_i32(year73);
                                                *base.add(28).cast::<u8>() = (_rt::as_i32(month73)) as u8;
                                                *base.add(29).cast::<u8>() = (_rt::as_i32(day73)) as u8;
                                            }
                                            Datebound::Excluded(e) => {
                                                *base.add(20).cast::<u8>() = (1i32) as u8;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year74,
                                                    month: month74,
                                                    day: day74,
                                                } = e;
                                                *base.add(24).cast::<i32>() = _rt::as_i32(year74);
                                                *base.add(28).cast::<u8>() = (_rt::as_i32(month74)) as u8;
                                                *base.add(29).cast::<u8>() = (_rt::as_i32(day74)) as u8;
                                            }
                                            Datebound::Unbounded => {
                                                *base.add(20).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                    }
                                    DbValue::Money(e) => {
                                        *base.add(0).cast::<u8>() = (34i32) as u8;
                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    DbValue::Oid(e) => {
                                        *base.add(0).cast::<u8>() = (35i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::Enumeration(e) => {
                                        *base.add(0).cast::<u8>() = (36i32) as u8;
                                        let Enumeration { name: name75, value: value75 } = e;
                                        let vec76 = name75;
                                        let ptr76 = vec76.as_ptr().cast::<u8>();
                                        let len76 = vec76.len();
                                        *base.add(12).cast::<usize>() = len76;
                                        *base.add(8).cast::<*mut u8>() = ptr76.cast_mut();
                                        let vec77 = value75;
                                        let ptr77 = vec77.as_ptr().cast::<u8>();
                                        let len77 = vec77.len();
                                        *base.add(20).cast::<usize>() = len77;
                                        *base.add(16).cast::<*mut u8>() = ptr77.cast_mut();
                                    }
                                    DbValue::Composite(e) => {
                                        *base.add(0).cast::<u8>() = (37i32) as u8;
                                        let Composite { name: name78, values: values78 } = e;
                                        let vec79 = name78;
                                        let ptr79 = vec79.as_ptr().cast::<u8>();
                                        let len79 = vec79.len();
                                        *base.add(12).cast::<usize>() = len79;
                                        *base.add(8).cast::<*mut u8>() = ptr79.cast_mut();
                                        let vec80 = values78;
                                        let len80 = vec80.len();
                                        let layout80 = _rt::alloc::Layout::from_size_align_unchecked(
                                            vec80.len() * 4,
                                            4,
                                        );
                                        let result80 = if layout80.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout80).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout80);
                                            }
                                            ptr
                                        } else {
                                            ::core::ptr::null_mut()
                                        };
                                        for (i, e) in vec80.into_iter().enumerate() {
                                            let base = result80.add(i * 4);
                                            {
                                                *base.add(0).cast::<i32>() = (e).take_handle() as i32;
                                            }
                                        }
                                        *base.add(20).cast::<usize>() = len80;
                                        *base.add(16).cast::<*mut u8>() = result80;
                                        cleanup_list.extend_from_slice(&[(result80, layout80)]);
                                    }
                                    DbValue::Domain(e) => {
                                        *base.add(0).cast::<u8>() = (38i32) as u8;
                                        let Domain { name: name81, value: value81 } = e;
                                        let vec82 = name81;
                                        let ptr82 = vec82.as_ptr().cast::<u8>();
                                        let len82 = vec82.len();
                                        *base.add(12).cast::<usize>() = len82;
                                        *base.add(8).cast::<*mut u8>() = ptr82.cast_mut();
                                        *base.add(16).cast::<i32>() = (value81).take_handle()
                                            as i32;
                                    }
                                    DbValue::Array(e) => {
                                        *base.add(0).cast::<u8>() = (39i32) as u8;
                                        let vec83 = e;
                                        let len83 = vec83.len();
                                        let layout83 = _rt::alloc::Layout::from_size_align_unchecked(
                                            vec83.len() * 4,
                                            4,
                                        );
                                        let result83 = if layout83.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout83).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout83);
                                            }
                                            ptr
                                        } else {
                                            ::core::ptr::null_mut()
                                        };
                                        for (i, e) in vec83.into_iter().enumerate() {
                                            let base = result83.add(i * 4);
                                            {
                                                *base.add(0).cast::<i32>() = (e).take_handle() as i32;
                                            }
                                        }
                                        *base.add(12).cast::<usize>() = len83;
                                        *base.add(8).cast::<*mut u8>() = result83;
                                        cleanup_list.extend_from_slice(&[(result83, layout83)]);
                                    }
                                    DbValue::Range(e) => {
                                        *base.add(0).cast::<u8>() = (40i32) as u8;
                                        let Range { name: name84, value: value84 } = e;
                                        let vec85 = name84;
                                        let ptr85 = vec85.as_ptr().cast::<u8>();
                                        let len85 = vec85.len();
                                        *base.add(12).cast::<usize>() = len85;
                                        *base.add(8).cast::<*mut u8>() = ptr85.cast_mut();
                                        let ValuesRange { start: start86, end: end86 } = value84;
                                        match start86 {
                                            ValueBound::Included(e) => {
                                                *base.add(16).cast::<u8>() = (0i32) as u8;
                                                *base.add(20).cast::<i32>() = (e).take_handle() as i32;
                                            }
                                            ValueBound::Excluded(e) => {
                                                *base.add(16).cast::<u8>() = (1i32) as u8;
                                                *base.add(20).cast::<i32>() = (e).take_handle() as i32;
                                            }
                                            ValueBound::Unbounded => {
                                                *base.add(16).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                        match end86 {
                                            ValueBound::Included(e) => {
                                                *base.add(24).cast::<u8>() = (0i32) as u8;
                                                *base.add(28).cast::<i32>() = (e).take_handle() as i32;
                                            }
                                            ValueBound::Excluded(e) => {
                                                *base.add(24).cast::<u8>() = (1i32) as u8;
                                                *base.add(28).cast::<i32>() = (e).take_handle() as i32;
                                            }
                                            ValueBound::Unbounded => {
                                                *base.add(24).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                    }
                                    DbValue::Null => {
                                        *base.add(0).cast::<u8>() = (41i32) as u8;
                                    }
                                }
                            }
                        }
                        let ptr88 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rdbms/postgres@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]db-connection.query-stream"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            result87,
                            len87,
                            ptr88,
                        );
                        let l89 = i32::from(*ptr88.add(0).cast::<u8>());
                        if layout87.size() != 0 {
                            _rt::alloc::dealloc(result87.cast(), layout87);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l89 {
                            0 => {
                                let e = {
                                    let l90 = *ptr88.add(4).cast::<i32>();
                                    DbResultStream::from_handle(l90 as u32)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l91 = i32::from(*ptr88.add(4).cast::<u8>());
                                    let v107 = match l91 {
                                        0 => {
                                            let e107 = {
                                                let l92 = *ptr88.add(8).cast::<*mut u8>();
                                                let l93 = *ptr88.add(12).cast::<usize>();
                                                let len94 = l93;
                                                let bytes94 = _rt::Vec::from_raw_parts(
                                                    l92.cast(),
                                                    len94,
                                                    len94,
                                                );
                                                _rt::string_lift(bytes94)
                                            };
                                            Error::ConnectionFailure(e107)
                                        }
                                        1 => {
                                            let e107 = {
                                                let l95 = *ptr88.add(8).cast::<*mut u8>();
                                                let l96 = *ptr88.add(12).cast::<usize>();
                                                let len97 = l96;
                                                let bytes97 = _rt::Vec::from_raw_parts(
                                                    l95.cast(),
                                                    len97,
                                                    len97,
                                                );
                                                _rt::string_lift(bytes97)
                                            };
                                            Error::QueryParameterFailure(e107)
                                        }
                                        2 => {
                                            let e107 = {
                                                let l98 = *ptr88.add(8).cast::<*mut u8>();
                                                let l99 = *ptr88.add(12).cast::<usize>();
                                                let len100 = l99;
                                                let bytes100 = _rt::Vec::from_raw_parts(
                                                    l98.cast(),
                                                    len100,
                                                    len100,
                                                );
                                                _rt::string_lift(bytes100)
                                            };
                                            Error::QueryExecutionFailure(e107)
                                        }
                                        3 => {
                                            let e107 = {
                                                let l101 = *ptr88.add(8).cast::<*mut u8>();
                                                let l102 = *ptr88.add(12).cast::<usize>();
                                                let len103 = l102;
                                                let bytes103 = _rt::Vec::from_raw_parts(
                                                    l101.cast(),
                                                    len103,
                                                    len103,
                                                );
                                                _rt::string_lift(bytes103)
                                            };
                                            Error::QueryResponseFailure(e107)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 4, "invalid enum discriminant");
                                            let e107 = {
                                                let l104 = *ptr88.add(8).cast::<*mut u8>();
                                                let l105 = *ptr88.add(12).cast::<usize>();
                                                let len106 = l105;
                                                let bytes106 = _rt::Vec::from_raw_parts(
                                                    l104.cast(),
                                                    len106,
                                                    len106,
                                                );
                                                _rt::string_lift(bytes106)
                                            };
                                            Error::Other(e107)
                                        }
                                    };
                                    v107
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl DbConnection {
                #[allow(unused_unsafe, clippy::all)]
                pub fn execute(
                    &self,
                    statement: &str,
                    params: _rt::Vec<DbValue>,
                ) -> Result<u64, Error> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 24]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 24],
                        );
                        let vec0 = statement;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec87 = &params;
                        let len87 = vec87.len();
                        let layout87 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec87.len() * 56,
                            8,
                        );
                        let result87 = if layout87.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout87).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout87);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec87.into_iter().enumerate() {
                            let base = result87.add(i * 56);
                            {
                                match e {
                                    DbValue::Character(e) => {
                                        *base.add(0).cast::<u8>() = (0i32) as u8;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                    }
                                    DbValue::Int2(e) => {
                                        *base.add(0).cast::<u8>() = (1i32) as u8;
                                        *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                    }
                                    DbValue::Int4(e) => {
                                        *base.add(0).cast::<u8>() = (2i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::Int8(e) => {
                                        *base.add(0).cast::<u8>() = (3i32) as u8;
                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    DbValue::Float4(e) => {
                                        *base.add(0).cast::<u8>() = (4i32) as u8;
                                        *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                    }
                                    DbValue::Float8(e) => {
                                        *base.add(0).cast::<u8>() = (5i32) as u8;
                                        *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                    }
                                    DbValue::Numeric(e) => {
                                        *base.add(0).cast::<u8>() = (6i32) as u8;
                                        let vec1 = e;
                                        let ptr1 = vec1.as_ptr().cast::<u8>();
                                        let len1 = vec1.len();
                                        *base.add(12).cast::<usize>() = len1;
                                        *base.add(8).cast::<*mut u8>() = ptr1.cast_mut();
                                    }
                                    DbValue::Boolean(e) => {
                                        *base.add(0).cast::<u8>() = (7i32) as u8;
                                        *base.add(8).cast::<u8>() = (match e {
                                            true => 1,
                                            false => 0,
                                        }) as u8;
                                    }
                                    DbValue::Text(e) => {
                                        *base.add(0).cast::<u8>() = (8i32) as u8;
                                        let vec2 = e;
                                        let ptr2 = vec2.as_ptr().cast::<u8>();
                                        let len2 = vec2.len();
                                        *base.add(12).cast::<usize>() = len2;
                                        *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                    }
                                    DbValue::Varchar(e) => {
                                        *base.add(0).cast::<u8>() = (9i32) as u8;
                                        let vec3 = e;
                                        let ptr3 = vec3.as_ptr().cast::<u8>();
                                        let len3 = vec3.len();
                                        *base.add(12).cast::<usize>() = len3;
                                        *base.add(8).cast::<*mut u8>() = ptr3.cast_mut();
                                    }
                                    DbValue::Bpchar(e) => {
                                        *base.add(0).cast::<u8>() = (10i32) as u8;
                                        let vec4 = e;
                                        let ptr4 = vec4.as_ptr().cast::<u8>();
                                        let len4 = vec4.len();
                                        *base.add(12).cast::<usize>() = len4;
                                        *base.add(8).cast::<*mut u8>() = ptr4.cast_mut();
                                    }
                                    DbValue::Timestamp(e) => {
                                        *base.add(0).cast::<u8>() = (11i32) as u8;
                                        let super::super::super::golem::rdbms::types::Timestamp {
                                            date: date5,
                                            time: time5,
                                        } = e;
                                        let super::super::super::golem::rdbms::types::Date {
                                            year: year6,
                                            month: month6,
                                            day: day6,
                                        } = date5;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(year6);
                                        *base.add(12).cast::<u8>() = (_rt::as_i32(month6)) as u8;
                                        *base.add(13).cast::<u8>() = (_rt::as_i32(day6)) as u8;
                                        let super::super::super::golem::rdbms::types::Time {
                                            hour: hour7,
                                            minute: minute7,
                                            second: second7,
                                            nanosecond: nanosecond7,
                                        } = time5;
                                        *base.add(16).cast::<u8>() = (_rt::as_i32(hour7)) as u8;
                                        *base.add(17).cast::<u8>() = (_rt::as_i32(minute7)) as u8;
                                        *base.add(18).cast::<u8>() = (_rt::as_i32(second7)) as u8;
                                        *base.add(20).cast::<i32>() = _rt::as_i32(nanosecond7);
                                    }
                                    DbValue::Timestamptz(e) => {
                                        *base.add(0).cast::<u8>() = (12i32) as u8;
                                        let super::super::super::golem::rdbms::types::Timestamptz {
                                            timestamp: timestamp8,
                                            offset: offset8,
                                        } = e;
                                        let super::super::super::golem::rdbms::types::Timestamp {
                                            date: date9,
                                            time: time9,
                                        } = timestamp8;
                                        let super::super::super::golem::rdbms::types::Date {
                                            year: year10,
                                            month: month10,
                                            day: day10,
                                        } = date9;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(year10);
                                        *base.add(12).cast::<u8>() = (_rt::as_i32(month10)) as u8;
                                        *base.add(13).cast::<u8>() = (_rt::as_i32(day10)) as u8;
                                        let super::super::super::golem::rdbms::types::Time {
                                            hour: hour11,
                                            minute: minute11,
                                            second: second11,
                                            nanosecond: nanosecond11,
                                        } = time9;
                                        *base.add(16).cast::<u8>() = (_rt::as_i32(hour11)) as u8;
                                        *base.add(17).cast::<u8>() = (_rt::as_i32(minute11)) as u8;
                                        *base.add(18).cast::<u8>() = (_rt::as_i32(second11)) as u8;
                                        *base.add(20).cast::<i32>() = _rt::as_i32(nanosecond11);
                                        *base.add(24).cast::<i32>() = _rt::as_i32(offset8);
                                    }
                                    DbValue::Date(e) => {
                                        *base.add(0).cast::<u8>() = (13i32) as u8;
                                        let super::super::super::golem::rdbms::types::Date {
                                            year: year12,
                                            month: month12,
                                            day: day12,
                                        } = e;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(year12);
                                        *base.add(12).cast::<u8>() = (_rt::as_i32(month12)) as u8;
                                        *base.add(13).cast::<u8>() = (_rt::as_i32(day12)) as u8;
                                    }
                                    DbValue::Time(e) => {
                                        *base.add(0).cast::<u8>() = (14i32) as u8;
                                        let super::super::super::golem::rdbms::types::Time {
                                            hour: hour13,
                                            minute: minute13,
                                            second: second13,
                                            nanosecond: nanosecond13,
                                        } = e;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(hour13)) as u8;
                                        *base.add(9).cast::<u8>() = (_rt::as_i32(minute13)) as u8;
                                        *base.add(10).cast::<u8>() = (_rt::as_i32(second13)) as u8;
                                        *base.add(12).cast::<i32>() = _rt::as_i32(nanosecond13);
                                    }
                                    DbValue::Timetz(e) => {
                                        *base.add(0).cast::<u8>() = (15i32) as u8;
                                        let super::super::super::golem::rdbms::types::Timetz {
                                            time: time14,
                                            offset: offset14,
                                        } = e;
                                        let super::super::super::golem::rdbms::types::Time {
                                            hour: hour15,
                                            minute: minute15,
                                            second: second15,
                                            nanosecond: nanosecond15,
                                        } = time14;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(hour15)) as u8;
                                        *base.add(9).cast::<u8>() = (_rt::as_i32(minute15)) as u8;
                                        *base.add(10).cast::<u8>() = (_rt::as_i32(second15)) as u8;
                                        *base.add(12).cast::<i32>() = _rt::as_i32(nanosecond15);
                                        *base.add(16).cast::<i32>() = _rt::as_i32(offset14);
                                    }
                                    DbValue::Interval(e) => {
                                        *base.add(0).cast::<u8>() = (16i32) as u8;
                                        let Interval {
                                            months: months16,
                                            days: days16,
                                            microseconds: microseconds16,
                                        } = e;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(months16);
                                        *base.add(12).cast::<i32>() = _rt::as_i32(days16);
                                        *base.add(16).cast::<i64>() = _rt::as_i64(microseconds16);
                                    }
                                    DbValue::Bytea(e) => {
                                        *base.add(0).cast::<u8>() = (17i32) as u8;
                                        let vec17 = e;
                                        let ptr17 = vec17.as_ptr().cast::<u8>();
                                        let len17 = vec17.len();
                                        *base.add(12).cast::<usize>() = len17;
                                        *base.add(8).cast::<*mut u8>() = ptr17.cast_mut();
                                    }
                                    DbValue::Json(e) => {
                                        *base.add(0).cast::<u8>() = (18i32) as u8;
                                        let vec18 = e;
                                        let ptr18 = vec18.as_ptr().cast::<u8>();
                                        let len18 = vec18.len();
                                        *base.add(12).cast::<usize>() = len18;
                                        *base.add(8).cast::<*mut u8>() = ptr18.cast_mut();
                                    }
                                    DbValue::Jsonb(e) => {
                                        *base.add(0).cast::<u8>() = (19i32) as u8;
                                        let vec19 = e;
                                        let ptr19 = vec19.as_ptr().cast::<u8>();
                                        let len19 = vec19.len();
                                        *base.add(12).cast::<usize>() = len19;
                                        *base.add(8).cast::<*mut u8>() = ptr19.cast_mut();
                                    }
                                    DbValue::Jsonpath(e) => {
                                        *base.add(0).cast::<u8>() = (20i32) as u8;
                                        let vec20 = e;
                                        let ptr20 = vec20.as_ptr().cast::<u8>();
                                        let len20 = vec20.len();
                                        *base.add(12).cast::<usize>() = len20;
                                        *base.add(8).cast::<*mut u8>() = ptr20.cast_mut();
                                    }
                                    DbValue::Xml(e) => {
                                        *base.add(0).cast::<u8>() = (21i32) as u8;
                                        let vec21 = e;
                                        let ptr21 = vec21.as_ptr().cast::<u8>();
                                        let len21 = vec21.len();
                                        *base.add(12).cast::<usize>() = len21;
                                        *base.add(8).cast::<*mut u8>() = ptr21.cast_mut();
                                    }
                                    DbValue::Uuid(e) => {
                                        *base.add(0).cast::<u8>() = (22i32) as u8;
                                        let super::super::super::golem::rdbms::types::Uuid {
                                            high_bits: high_bits22,
                                            low_bits: low_bits22,
                                        } = e;
                                        *base.add(8).cast::<i64>() = _rt::as_i64(high_bits22);
                                        *base.add(16).cast::<i64>() = _rt::as_i64(low_bits22);
                                    }
                                    DbValue::Inet(e) => {
                                        *base.add(0).cast::<u8>() = (23i32) as u8;
                                        use super::super::super::golem::rdbms::types::IpAddress as V25;
                                        match e {
                                            V25::Ipv4(e) => {
                                                *base.add(8).cast::<u8>() = (0i32) as u8;
                                                let (t23_0, t23_1, t23_2, t23_3) = e;
                                                *base.add(10).cast::<u8>() = (_rt::as_i32(t23_0)) as u8;
                                                *base.add(11).cast::<u8>() = (_rt::as_i32(t23_1)) as u8;
                                                *base.add(12).cast::<u8>() = (_rt::as_i32(t23_2)) as u8;
                                                *base.add(13).cast::<u8>() = (_rt::as_i32(t23_3)) as u8;
                                            }
                                            V25::Ipv6(e) => {
                                                *base.add(8).cast::<u8>() = (1i32) as u8;
                                                let (
                                                    t24_0,
                                                    t24_1,
                                                    t24_2,
                                                    t24_3,
                                                    t24_4,
                                                    t24_5,
                                                    t24_6,
                                                    t24_7,
                                                ) = e;
                                                *base.add(10).cast::<u16>() = (_rt::as_i32(t24_0)) as u16;
                                                *base.add(12).cast::<u16>() = (_rt::as_i32(t24_1)) as u16;
                                                *base.add(14).cast::<u16>() = (_rt::as_i32(t24_2)) as u16;
                                                *base.add(16).cast::<u16>() = (_rt::as_i32(t24_3)) as u16;
                                                *base.add(18).cast::<u16>() = (_rt::as_i32(t24_4)) as u16;
                                                *base.add(20).cast::<u16>() = (_rt::as_i32(t24_5)) as u16;
                                                *base.add(22).cast::<u16>() = (_rt::as_i32(t24_6)) as u16;
                                                *base.add(24).cast::<u16>() = (_rt::as_i32(t24_7)) as u16;
                                            }
                                        }
                                    }
                                    DbValue::Cidr(e) => {
                                        *base.add(0).cast::<u8>() = (24i32) as u8;
                                        use super::super::super::golem::rdbms::types::IpAddress as V28;
                                        match e {
                                            V28::Ipv4(e) => {
                                                *base.add(8).cast::<u8>() = (0i32) as u8;
                                                let (t26_0, t26_1, t26_2, t26_3) = e;
                                                *base.add(10).cast::<u8>() = (_rt::as_i32(t26_0)) as u8;
                                                *base.add(11).cast::<u8>() = (_rt::as_i32(t26_1)) as u8;
                                                *base.add(12).cast::<u8>() = (_rt::as_i32(t26_2)) as u8;
                                                *base.add(13).cast::<u8>() = (_rt::as_i32(t26_3)) as u8;
                                            }
                                            V28::Ipv6(e) => {
                                                *base.add(8).cast::<u8>() = (1i32) as u8;
                                                let (
                                                    t27_0,
                                                    t27_1,
                                                    t27_2,
                                                    t27_3,
                                                    t27_4,
                                                    t27_5,
                                                    t27_6,
                                                    t27_7,
                                                ) = e;
                                                *base.add(10).cast::<u16>() = (_rt::as_i32(t27_0)) as u16;
                                                *base.add(12).cast::<u16>() = (_rt::as_i32(t27_1)) as u16;
                                                *base.add(14).cast::<u16>() = (_rt::as_i32(t27_2)) as u16;
                                                *base.add(16).cast::<u16>() = (_rt::as_i32(t27_3)) as u16;
                                                *base.add(18).cast::<u16>() = (_rt::as_i32(t27_4)) as u16;
                                                *base.add(20).cast::<u16>() = (_rt::as_i32(t27_5)) as u16;
                                                *base.add(22).cast::<u16>() = (_rt::as_i32(t27_6)) as u16;
                                                *base.add(24).cast::<u16>() = (_rt::as_i32(t27_7)) as u16;
                                            }
                                        }
                                    }
                                    DbValue::Macaddr(e) => {
                                        *base.add(0).cast::<u8>() = (25i32) as u8;
                                        let super::super::super::golem::rdbms::types::MacAddress {
                                            octets: octets29,
                                        } = e;
                                        let (t30_0, t30_1, t30_2, t30_3, t30_4, t30_5) = octets29;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(t30_0)) as u8;
                                        *base.add(9).cast::<u8>() = (_rt::as_i32(t30_1)) as u8;
                                        *base.add(10).cast::<u8>() = (_rt::as_i32(t30_2)) as u8;
                                        *base.add(11).cast::<u8>() = (_rt::as_i32(t30_3)) as u8;
                                        *base.add(12).cast::<u8>() = (_rt::as_i32(t30_4)) as u8;
                                        *base.add(13).cast::<u8>() = (_rt::as_i32(t30_5)) as u8;
                                    }
                                    DbValue::Bit(e) => {
                                        *base.add(0).cast::<u8>() = (26i32) as u8;
                                        let vec31 = e;
                                        let len31 = vec31.len();
                                        let layout31 = _rt::alloc::Layout::from_size_align_unchecked(
                                            vec31.len() * 1,
                                            1,
                                        );
                                        let result31 = if layout31.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout31).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout31);
                                            }
                                            ptr
                                        } else {
                                            ::core::ptr::null_mut()
                                        };
                                        for (i, e) in vec31.into_iter().enumerate() {
                                            let base = result31.add(i * 1);
                                            {
                                                *base.add(0).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                        }
                                        *base.add(12).cast::<usize>() = len31;
                                        *base.add(8).cast::<*mut u8>() = result31;
                                        cleanup_list.extend_from_slice(&[(result31, layout31)]);
                                    }
                                    DbValue::Varbit(e) => {
                                        *base.add(0).cast::<u8>() = (27i32) as u8;
                                        let vec32 = e;
                                        let len32 = vec32.len();
                                        let layout32 = _rt::alloc::Layout::from_size_align_unchecked(
                                            vec32.len() * 1,
                                            1,
                                        );
                                        let result32 = if layout32.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout32).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout32);
                                            }
                                            ptr
                                        } else {
                                            ::core::ptr::null_mut()
                                        };
                                        for (i, e) in vec32.into_iter().enumerate() {
                                            let base = result32.add(i * 1);
                                            {
                                                *base.add(0).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                        }
                                        *base.add(12).cast::<usize>() = len32;
                                        *base.add(8).cast::<*mut u8>() = result32;
                                        cleanup_list.extend_from_slice(&[(result32, layout32)]);
                                    }
                                    DbValue::Int4range(e) => {
                                        *base.add(0).cast::<u8>() = (28i32) as u8;
                                        let Int4range { start: start33, end: end33 } = e;
                                        match start33 {
                                            Int4bound::Included(e) => {
                                                *base.add(8).cast::<u8>() = (0i32) as u8;
                                                *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            Int4bound::Excluded(e) => {
                                                *base.add(8).cast::<u8>() = (1i32) as u8;
                                                *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            Int4bound::Unbounded => {
                                                *base.add(8).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                        match end33 {
                                            Int4bound::Included(e) => {
                                                *base.add(16).cast::<u8>() = (0i32) as u8;
                                                *base.add(20).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            Int4bound::Excluded(e) => {
                                                *base.add(16).cast::<u8>() = (1i32) as u8;
                                                *base.add(20).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            Int4bound::Unbounded => {
                                                *base.add(16).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                    }
                                    DbValue::Int8range(e) => {
                                        *base.add(0).cast::<u8>() = (29i32) as u8;
                                        let Int8range { start: start34, end: end34 } = e;
                                        match start34 {
                                            Int8bound::Included(e) => {
                                                *base.add(8).cast::<u8>() = (0i32) as u8;
                                                *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            Int8bound::Excluded(e) => {
                                                *base.add(8).cast::<u8>() = (1i32) as u8;
                                                *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            Int8bound::Unbounded => {
                                                *base.add(8).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                        match end34 {
                                            Int8bound::Included(e) => {
                                                *base.add(24).cast::<u8>() = (0i32) as u8;
                                                *base.add(32).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            Int8bound::Excluded(e) => {
                                                *base.add(24).cast::<u8>() = (1i32) as u8;
                                                *base.add(32).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            Int8bound::Unbounded => {
                                                *base.add(24).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                    }
                                    DbValue::Numrange(e) => {
                                        *base.add(0).cast::<u8>() = (30i32) as u8;
                                        let Numrange { start: start35, end: end35 } = e;
                                        match start35 {
                                            Numbound::Included(e) => {
                                                *base.add(8).cast::<u8>() = (0i32) as u8;
                                                let vec36 = e;
                                                let ptr36 = vec36.as_ptr().cast::<u8>();
                                                let len36 = vec36.len();
                                                *base.add(16).cast::<usize>() = len36;
                                                *base.add(12).cast::<*mut u8>() = ptr36.cast_mut();
                                            }
                                            Numbound::Excluded(e) => {
                                                *base.add(8).cast::<u8>() = (1i32) as u8;
                                                let vec37 = e;
                                                let ptr37 = vec37.as_ptr().cast::<u8>();
                                                let len37 = vec37.len();
                                                *base.add(16).cast::<usize>() = len37;
                                                *base.add(12).cast::<*mut u8>() = ptr37.cast_mut();
                                            }
                                            Numbound::Unbounded => {
                                                *base.add(8).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                        match end35 {
                                            Numbound::Included(e) => {
                                                *base.add(20).cast::<u8>() = (0i32) as u8;
                                                let vec38 = e;
                                                let ptr38 = vec38.as_ptr().cast::<u8>();
                                                let len38 = vec38.len();
                                                *base.add(28).cast::<usize>() = len38;
                                                *base.add(24).cast::<*mut u8>() = ptr38.cast_mut();
                                            }
                                            Numbound::Excluded(e) => {
                                                *base.add(20).cast::<u8>() = (1i32) as u8;
                                                let vec39 = e;
                                                let ptr39 = vec39.as_ptr().cast::<u8>();
                                                let len39 = vec39.len();
                                                *base.add(28).cast::<usize>() = len39;
                                                *base.add(24).cast::<*mut u8>() = ptr39.cast_mut();
                                            }
                                            Numbound::Unbounded => {
                                                *base.add(20).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                    }
                                    DbValue::Tsrange(e) => {
                                        *base.add(0).cast::<u8>() = (31i32) as u8;
                                        let Tsrange { start: start40, end: end40 } = e;
                                        match start40 {
                                            Tsbound::Included(e) => {
                                                *base.add(8).cast::<u8>() = (0i32) as u8;
                                                let super::super::super::golem::rdbms::types::Timestamp {
                                                    date: date41,
                                                    time: time41,
                                                } = e;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year42,
                                                    month: month42,
                                                    day: day42,
                                                } = date41;
                                                *base.add(12).cast::<i32>() = _rt::as_i32(year42);
                                                *base.add(16).cast::<u8>() = (_rt::as_i32(month42)) as u8;
                                                *base.add(17).cast::<u8>() = (_rt::as_i32(day42)) as u8;
                                                let super::super::super::golem::rdbms::types::Time {
                                                    hour: hour43,
                                                    minute: minute43,
                                                    second: second43,
                                                    nanosecond: nanosecond43,
                                                } = time41;
                                                *base.add(20).cast::<u8>() = (_rt::as_i32(hour43)) as u8;
                                                *base.add(21).cast::<u8>() = (_rt::as_i32(minute43)) as u8;
                                                *base.add(22).cast::<u8>() = (_rt::as_i32(second43)) as u8;
                                                *base.add(24).cast::<i32>() = _rt::as_i32(nanosecond43);
                                            }
                                            Tsbound::Excluded(e) => {
                                                *base.add(8).cast::<u8>() = (1i32) as u8;
                                                let super::super::super::golem::rdbms::types::Timestamp {
                                                    date: date44,
                                                    time: time44,
                                                } = e;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year45,
                                                    month: month45,
                                                    day: day45,
                                                } = date44;
                                                *base.add(12).cast::<i32>() = _rt::as_i32(year45);
                                                *base.add(16).cast::<u8>() = (_rt::as_i32(month45)) as u8;
                                                *base.add(17).cast::<u8>() = (_rt::as_i32(day45)) as u8;
                                                let super::super::super::golem::rdbms::types::Time {
                                                    hour: hour46,
                                                    minute: minute46,
                                                    second: second46,
                                                    nanosecond: nanosecond46,
                                                } = time44;
                                                *base.add(20).cast::<u8>() = (_rt::as_i32(hour46)) as u8;
                                                *base.add(21).cast::<u8>() = (_rt::as_i32(minute46)) as u8;
                                                *base.add(22).cast::<u8>() = (_rt::as_i32(second46)) as u8;
                                                *base.add(24).cast::<i32>() = _rt::as_i32(nanosecond46);
                                            }
                                            Tsbound::Unbounded => {
                                                *base.add(8).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                        match end40 {
                                            Tsbound::Included(e) => {
                                                *base.add(28).cast::<u8>() = (0i32) as u8;
                                                let super::super::super::golem::rdbms::types::Timestamp {
                                                    date: date47,
                                                    time: time47,
                                                } = e;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year48,
                                                    month: month48,
                                                    day: day48,
                                                } = date47;
                                                *base.add(32).cast::<i32>() = _rt::as_i32(year48);
                                                *base.add(36).cast::<u8>() = (_rt::as_i32(month48)) as u8;
                                                *base.add(37).cast::<u8>() = (_rt::as_i32(day48)) as u8;
                                                let super::super::super::golem::rdbms::types::Time {
                                                    hour: hour49,
                                                    minute: minute49,
                                                    second: second49,
                                                    nanosecond: nanosecond49,
                                                } = time47;
                                                *base.add(40).cast::<u8>() = (_rt::as_i32(hour49)) as u8;
                                                *base.add(41).cast::<u8>() = (_rt::as_i32(minute49)) as u8;
                                                *base.add(42).cast::<u8>() = (_rt::as_i32(second49)) as u8;
                                                *base.add(44).cast::<i32>() = _rt::as_i32(nanosecond49);
                                            }
                                            Tsbound::Excluded(e) => {
                                                *base.add(28).cast::<u8>() = (1i32) as u8;
                                                let super::super::super::golem::rdbms::types::Timestamp {
                                                    date: date50,
                                                    time: time50,
                                                } = e;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year51,
                                                    month: month51,
                                                    day: day51,
                                                } = date50;
                                                *base.add(32).cast::<i32>() = _rt::as_i32(year51);
                                                *base.add(36).cast::<u8>() = (_rt::as_i32(month51)) as u8;
                                                *base.add(37).cast::<u8>() = (_rt::as_i32(day51)) as u8;
                                                let super::super::super::golem::rdbms::types::Time {
                                                    hour: hour52,
                                                    minute: minute52,
                                                    second: second52,
                                                    nanosecond: nanosecond52,
                                                } = time50;
                                                *base.add(40).cast::<u8>() = (_rt::as_i32(hour52)) as u8;
                                                *base.add(41).cast::<u8>() = (_rt::as_i32(minute52)) as u8;
                                                *base.add(42).cast::<u8>() = (_rt::as_i32(second52)) as u8;
                                                *base.add(44).cast::<i32>() = _rt::as_i32(nanosecond52);
                                            }
                                            Tsbound::Unbounded => {
                                                *base.add(28).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                    }
                                    DbValue::Tstzrange(e) => {
                                        *base.add(0).cast::<u8>() = (32i32) as u8;
                                        let Tstzrange { start: start53, end: end53 } = e;
                                        match start53 {
                                            Tstzbound::Included(e) => {
                                                *base.add(8).cast::<u8>() = (0i32) as u8;
                                                let super::super::super::golem::rdbms::types::Timestamptz {
                                                    timestamp: timestamp54,
                                                    offset: offset54,
                                                } = e;
                                                let super::super::super::golem::rdbms::types::Timestamp {
                                                    date: date55,
                                                    time: time55,
                                                } = timestamp54;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year56,
                                                    month: month56,
                                                    day: day56,
                                                } = date55;
                                                *base.add(12).cast::<i32>() = _rt::as_i32(year56);
                                                *base.add(16).cast::<u8>() = (_rt::as_i32(month56)) as u8;
                                                *base.add(17).cast::<u8>() = (_rt::as_i32(day56)) as u8;
                                                let super::super::super::golem::rdbms::types::Time {
                                                    hour: hour57,
                                                    minute: minute57,
                                                    second: second57,
                                                    nanosecond: nanosecond57,
                                                } = time55;
                                                *base.add(20).cast::<u8>() = (_rt::as_i32(hour57)) as u8;
                                                *base.add(21).cast::<u8>() = (_rt::as_i32(minute57)) as u8;
                                                *base.add(22).cast::<u8>() = (_rt::as_i32(second57)) as u8;
                                                *base.add(24).cast::<i32>() = _rt::as_i32(nanosecond57);
                                                *base.add(28).cast::<i32>() = _rt::as_i32(offset54);
                                            }
                                            Tstzbound::Excluded(e) => {
                                                *base.add(8).cast::<u8>() = (1i32) as u8;
                                                let super::super::super::golem::rdbms::types::Timestamptz {
                                                    timestamp: timestamp58,
                                                    offset: offset58,
                                                } = e;
                                                let super::super::super::golem::rdbms::types::Timestamp {
                                                    date: date59,
                                                    time: time59,
                                                } = timestamp58;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year60,
                                                    month: month60,
                                                    day: day60,
                                                } = date59;
                                                *base.add(12).cast::<i32>() = _rt::as_i32(year60);
                                                *base.add(16).cast::<u8>() = (_rt::as_i32(month60)) as u8;
                                                *base.add(17).cast::<u8>() = (_rt::as_i32(day60)) as u8;
                                                let super::super::super::golem::rdbms::types::Time {
                                                    hour: hour61,
                                                    minute: minute61,
                                                    second: second61,
                                                    nanosecond: nanosecond61,
                                                } = time59;
                                                *base.add(20).cast::<u8>() = (_rt::as_i32(hour61)) as u8;
                                                *base.add(21).cast::<u8>() = (_rt::as_i32(minute61)) as u8;
                                                *base.add(22).cast::<u8>() = (_rt::as_i32(second61)) as u8;
                                                *base.add(24).cast::<i32>() = _rt::as_i32(nanosecond61);
                                                *base.add(28).cast::<i32>() = _rt::as_i32(offset58);
                                            }
                                            Tstzbound::Unbounded => {
                                                *base.add(8).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                        match end53 {
                                            Tstzbound::Included(e) => {
                                                *base.add(32).cast::<u8>() = (0i32) as u8;
                                                let super::super::super::golem::rdbms::types::Timestamptz {
                                                    timestamp: timestamp62,
                                                    offset: offset62,
                                                } = e;
                                                let super::super::super::golem::rdbms::types::Timestamp {
                                                    date: date63,
                                                    time: time63,
                                                } = timestamp62;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year64,
                                                    month: month64,
                                                    day: day64,
                                                } = date63;
                                                *base.add(36).cast::<i32>() = _rt::as_i32(year64);
                                                *base.add(40).cast::<u8>() = (_rt::as_i32(month64)) as u8;
                                                *base.add(41).cast::<u8>() = (_rt::as_i32(day64)) as u8;
                                                let super::super::super::golem::rdbms::types::Time {
                                                    hour: hour65,
                                                    minute: minute65,
                                                    second: second65,
                                                    nanosecond: nanosecond65,
                                                } = time63;
                                                *base.add(44).cast::<u8>() = (_rt::as_i32(hour65)) as u8;
                                                *base.add(45).cast::<u8>() = (_rt::as_i32(minute65)) as u8;
                                                *base.add(46).cast::<u8>() = (_rt::as_i32(second65)) as u8;
                                                *base.add(48).cast::<i32>() = _rt::as_i32(nanosecond65);
                                                *base.add(52).cast::<i32>() = _rt::as_i32(offset62);
                                            }
                                            Tstzbound::Excluded(e) => {
                                                *base.add(32).cast::<u8>() = (1i32) as u8;
                                                let super::super::super::golem::rdbms::types::Timestamptz {
                                                    timestamp: timestamp66,
                                                    offset: offset66,
                                                } = e;
                                                let super::super::super::golem::rdbms::types::Timestamp {
                                                    date: date67,
                                                    time: time67,
                                                } = timestamp66;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year68,
                                                    month: month68,
                                                    day: day68,
                                                } = date67;
                                                *base.add(36).cast::<i32>() = _rt::as_i32(year68);
                                                *base.add(40).cast::<u8>() = (_rt::as_i32(month68)) as u8;
                                                *base.add(41).cast::<u8>() = (_rt::as_i32(day68)) as u8;
                                                let super::super::super::golem::rdbms::types::Time {
                                                    hour: hour69,
                                                    minute: minute69,
                                                    second: second69,
                                                    nanosecond: nanosecond69,
                                                } = time67;
                                                *base.add(44).cast::<u8>() = (_rt::as_i32(hour69)) as u8;
                                                *base.add(45).cast::<u8>() = (_rt::as_i32(minute69)) as u8;
                                                *base.add(46).cast::<u8>() = (_rt::as_i32(second69)) as u8;
                                                *base.add(48).cast::<i32>() = _rt::as_i32(nanosecond69);
                                                *base.add(52).cast::<i32>() = _rt::as_i32(offset66);
                                            }
                                            Tstzbound::Unbounded => {
                                                *base.add(32).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                    }
                                    DbValue::Daterange(e) => {
                                        *base.add(0).cast::<u8>() = (33i32) as u8;
                                        let Daterange { start: start70, end: end70 } = e;
                                        match start70 {
                                            Datebound::Included(e) => {
                                                *base.add(8).cast::<u8>() = (0i32) as u8;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year71,
                                                    month: month71,
                                                    day: day71,
                                                } = e;
                                                *base.add(12).cast::<i32>() = _rt::as_i32(year71);
                                                *base.add(16).cast::<u8>() = (_rt::as_i32(month71)) as u8;
                                                *base.add(17).cast::<u8>() = (_rt::as_i32(day71)) as u8;
                                            }
                                            Datebound::Excluded(e) => {
                                                *base.add(8).cast::<u8>() = (1i32) as u8;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year72,
                                                    month: month72,
                                                    day: day72,
                                                } = e;
                                                *base.add(12).cast::<i32>() = _rt::as_i32(year72);
                                                *base.add(16).cast::<u8>() = (_rt::as_i32(month72)) as u8;
                                                *base.add(17).cast::<u8>() = (_rt::as_i32(day72)) as u8;
                                            }
                                            Datebound::Unbounded => {
                                                *base.add(8).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                        match end70 {
                                            Datebound::Included(e) => {
                                                *base.add(20).cast::<u8>() = (0i32) as u8;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year73,
                                                    month: month73,
                                                    day: day73,
                                                } = e;
                                                *base.add(24).cast::<i32>() = _rt::as_i32(year73);
                                                *base.add(28).cast::<u8>() = (_rt::as_i32(month73)) as u8;
                                                *base.add(29).cast::<u8>() = (_rt::as_i32(day73)) as u8;
                                            }
                                            Datebound::Excluded(e) => {
                                                *base.add(20).cast::<u8>() = (1i32) as u8;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year74,
                                                    month: month74,
                                                    day: day74,
                                                } = e;
                                                *base.add(24).cast::<i32>() = _rt::as_i32(year74);
                                                *base.add(28).cast::<u8>() = (_rt::as_i32(month74)) as u8;
                                                *base.add(29).cast::<u8>() = (_rt::as_i32(day74)) as u8;
                                            }
                                            Datebound::Unbounded => {
                                                *base.add(20).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                    }
                                    DbValue::Money(e) => {
                                        *base.add(0).cast::<u8>() = (34i32) as u8;
                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    DbValue::Oid(e) => {
                                        *base.add(0).cast::<u8>() = (35i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::Enumeration(e) => {
                                        *base.add(0).cast::<u8>() = (36i32) as u8;
                                        let Enumeration { name: name75, value: value75 } = e;
                                        let vec76 = name75;
                                        let ptr76 = vec76.as_ptr().cast::<u8>();
                                        let len76 = vec76.len();
                                        *base.add(12).cast::<usize>() = len76;
                                        *base.add(8).cast::<*mut u8>() = ptr76.cast_mut();
                                        let vec77 = value75;
                                        let ptr77 = vec77.as_ptr().cast::<u8>();
                                        let len77 = vec77.len();
                                        *base.add(20).cast::<usize>() = len77;
                                        *base.add(16).cast::<*mut u8>() = ptr77.cast_mut();
                                    }
                                    DbValue::Composite(e) => {
                                        *base.add(0).cast::<u8>() = (37i32) as u8;
                                        let Composite { name: name78, values: values78 } = e;
                                        let vec79 = name78;
                                        let ptr79 = vec79.as_ptr().cast::<u8>();
                                        let len79 = vec79.len();
                                        *base.add(12).cast::<usize>() = len79;
                                        *base.add(8).cast::<*mut u8>() = ptr79.cast_mut();
                                        let vec80 = values78;
                                        let len80 = vec80.len();
                                        let layout80 = _rt::alloc::Layout::from_size_align_unchecked(
                                            vec80.len() * 4,
                                            4,
                                        );
                                        let result80 = if layout80.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout80).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout80);
                                            }
                                            ptr
                                        } else {
                                            ::core::ptr::null_mut()
                                        };
                                        for (i, e) in vec80.into_iter().enumerate() {
                                            let base = result80.add(i * 4);
                                            {
                                                *base.add(0).cast::<i32>() = (e).take_handle() as i32;
                                            }
                                        }
                                        *base.add(20).cast::<usize>() = len80;
                                        *base.add(16).cast::<*mut u8>() = result80;
                                        cleanup_list.extend_from_slice(&[(result80, layout80)]);
                                    }
                                    DbValue::Domain(e) => {
                                        *base.add(0).cast::<u8>() = (38i32) as u8;
                                        let Domain { name: name81, value: value81 } = e;
                                        let vec82 = name81;
                                        let ptr82 = vec82.as_ptr().cast::<u8>();
                                        let len82 = vec82.len();
                                        *base.add(12).cast::<usize>() = len82;
                                        *base.add(8).cast::<*mut u8>() = ptr82.cast_mut();
                                        *base.add(16).cast::<i32>() = (value81).take_handle()
                                            as i32;
                                    }
                                    DbValue::Array(e) => {
                                        *base.add(0).cast::<u8>() = (39i32) as u8;
                                        let vec83 = e;
                                        let len83 = vec83.len();
                                        let layout83 = _rt::alloc::Layout::from_size_align_unchecked(
                                            vec83.len() * 4,
                                            4,
                                        );
                                        let result83 = if layout83.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout83).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout83);
                                            }
                                            ptr
                                        } else {
                                            ::core::ptr::null_mut()
                                        };
                                        for (i, e) in vec83.into_iter().enumerate() {
                                            let base = result83.add(i * 4);
                                            {
                                                *base.add(0).cast::<i32>() = (e).take_handle() as i32;
                                            }
                                        }
                                        *base.add(12).cast::<usize>() = len83;
                                        *base.add(8).cast::<*mut u8>() = result83;
                                        cleanup_list.extend_from_slice(&[(result83, layout83)]);
                                    }
                                    DbValue::Range(e) => {
                                        *base.add(0).cast::<u8>() = (40i32) as u8;
                                        let Range { name: name84, value: value84 } = e;
                                        let vec85 = name84;
                                        let ptr85 = vec85.as_ptr().cast::<u8>();
                                        let len85 = vec85.len();
                                        *base.add(12).cast::<usize>() = len85;
                                        *base.add(8).cast::<*mut u8>() = ptr85.cast_mut();
                                        let ValuesRange { start: start86, end: end86 } = value84;
                                        match start86 {
                                            ValueBound::Included(e) => {
                                                *base.add(16).cast::<u8>() = (0i32) as u8;
                                                *base.add(20).cast::<i32>() = (e).take_handle() as i32;
                                            }
                                            ValueBound::Excluded(e) => {
                                                *base.add(16).cast::<u8>() = (1i32) as u8;
                                                *base.add(20).cast::<i32>() = (e).take_handle() as i32;
                                            }
                                            ValueBound::Unbounded => {
                                                *base.add(16).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                        match end86 {
                                            ValueBound::Included(e) => {
                                                *base.add(24).cast::<u8>() = (0i32) as u8;
                                                *base.add(28).cast::<i32>() = (e).take_handle() as i32;
                                            }
                                            ValueBound::Excluded(e) => {
                                                *base.add(24).cast::<u8>() = (1i32) as u8;
                                                *base.add(28).cast::<i32>() = (e).take_handle() as i32;
                                            }
                                            ValueBound::Unbounded => {
                                                *base.add(24).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                    }
                                    DbValue::Null => {
                                        *base.add(0).cast::<u8>() = (41i32) as u8;
                                    }
                                }
                            }
                        }
                        let ptr88 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rdbms/postgres@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]db-connection.execute"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            result87,
                            len87,
                            ptr88,
                        );
                        let l89 = i32::from(*ptr88.add(0).cast::<u8>());
                        if layout87.size() != 0 {
                            _rt::alloc::dealloc(result87.cast(), layout87);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l89 {
                            0 => {
                                let e = {
                                    let l90 = *ptr88.add(8).cast::<i64>();
                                    l90 as u64
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l91 = i32::from(*ptr88.add(8).cast::<u8>());
                                    let v107 = match l91 {
                                        0 => {
                                            let e107 = {
                                                let l92 = *ptr88.add(12).cast::<*mut u8>();
                                                let l93 = *ptr88.add(16).cast::<usize>();
                                                let len94 = l93;
                                                let bytes94 = _rt::Vec::from_raw_parts(
                                                    l92.cast(),
                                                    len94,
                                                    len94,
                                                );
                                                _rt::string_lift(bytes94)
                                            };
                                            Error::ConnectionFailure(e107)
                                        }
                                        1 => {
                                            let e107 = {
                                                let l95 = *ptr88.add(12).cast::<*mut u8>();
                                                let l96 = *ptr88.add(16).cast::<usize>();
                                                let len97 = l96;
                                                let bytes97 = _rt::Vec::from_raw_parts(
                                                    l95.cast(),
                                                    len97,
                                                    len97,
                                                );
                                                _rt::string_lift(bytes97)
                                            };
                                            Error::QueryParameterFailure(e107)
                                        }
                                        2 => {
                                            let e107 = {
                                                let l98 = *ptr88.add(12).cast::<*mut u8>();
                                                let l99 = *ptr88.add(16).cast::<usize>();
                                                let len100 = l99;
                                                let bytes100 = _rt::Vec::from_raw_parts(
                                                    l98.cast(),
                                                    len100,
                                                    len100,
                                                );
                                                _rt::string_lift(bytes100)
                                            };
                                            Error::QueryExecutionFailure(e107)
                                        }
                                        3 => {
                                            let e107 = {
                                                let l101 = *ptr88.add(12).cast::<*mut u8>();
                                                let l102 = *ptr88.add(16).cast::<usize>();
                                                let len103 = l102;
                                                let bytes103 = _rt::Vec::from_raw_parts(
                                                    l101.cast(),
                                                    len103,
                                                    len103,
                                                );
                                                _rt::string_lift(bytes103)
                                            };
                                            Error::QueryResponseFailure(e107)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 4, "invalid enum discriminant");
                                            let e107 = {
                                                let l104 = *ptr88.add(12).cast::<*mut u8>();
                                                let l105 = *ptr88.add(16).cast::<usize>();
                                                let len106 = l105;
                                                let bytes106 = _rt::Vec::from_raw_parts(
                                                    l104.cast(),
                                                    len106,
                                                    len106,
                                                );
                                                _rt::string_lift(bytes106)
                                            };
                                            Error::Other(e107)
                                        }
                                    };
                                    v107
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl DbConnection {
                #[allow(unused_unsafe, clippy::all)]
                pub fn begin_transaction(&self) -> Result<DbTransaction, Error> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 16],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rdbms/postgres@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]db-connection.begin-transaction"]
                            fn wit_import(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<i32>();
                                    DbTransaction::from_handle(l2 as u32)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = i32::from(*ptr0.add(4).cast::<u8>());
                                    let v19 = match l3 {
                                        0 => {
                                            let e19 = {
                                                let l4 = *ptr0.add(8).cast::<*mut u8>();
                                                let l5 = *ptr0.add(12).cast::<usize>();
                                                let len6 = l5;
                                                let bytes6 = _rt::Vec::from_raw_parts(
                                                    l4.cast(),
                                                    len6,
                                                    len6,
                                                );
                                                _rt::string_lift(bytes6)
                                            };
                                            Error::ConnectionFailure(e19)
                                        }
                                        1 => {
                                            let e19 = {
                                                let l7 = *ptr0.add(8).cast::<*mut u8>();
                                                let l8 = *ptr0.add(12).cast::<usize>();
                                                let len9 = l8;
                                                let bytes9 = _rt::Vec::from_raw_parts(
                                                    l7.cast(),
                                                    len9,
                                                    len9,
                                                );
                                                _rt::string_lift(bytes9)
                                            };
                                            Error::QueryParameterFailure(e19)
                                        }
                                        2 => {
                                            let e19 = {
                                                let l10 = *ptr0.add(8).cast::<*mut u8>();
                                                let l11 = *ptr0.add(12).cast::<usize>();
                                                let len12 = l11;
                                                let bytes12 = _rt::Vec::from_raw_parts(
                                                    l10.cast(),
                                                    len12,
                                                    len12,
                                                );
                                                _rt::string_lift(bytes12)
                                            };
                                            Error::QueryExecutionFailure(e19)
                                        }
                                        3 => {
                                            let e19 = {
                                                let l13 = *ptr0.add(8).cast::<*mut u8>();
                                                let l14 = *ptr0.add(12).cast::<usize>();
                                                let len15 = l14;
                                                let bytes15 = _rt::Vec::from_raw_parts(
                                                    l13.cast(),
                                                    len15,
                                                    len15,
                                                );
                                                _rt::string_lift(bytes15)
                                            };
                                            Error::QueryResponseFailure(e19)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 4, "invalid enum discriminant");
                                            let e19 = {
                                                let l16 = *ptr0.add(8).cast::<*mut u8>();
                                                let l17 = *ptr0.add(12).cast::<usize>();
                                                let len18 = l17;
                                                let bytes18 = _rt::Vec::from_raw_parts(
                                                    l16.cast(),
                                                    len18,
                                                    len18,
                                                );
                                                _rt::string_lift(bytes18)
                                            };
                                            Error::Other(e19)
                                        }
                                    };
                                    v19
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl DbTransaction {
                #[allow(unused_unsafe, clippy::all)]
                pub fn query(
                    &self,
                    statement: &str,
                    params: _rt::Vec<DbValue>,
                ) -> Result<DbResult, Error> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 20]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 20],
                        );
                        let vec0 = statement;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec87 = &params;
                        let len87 = vec87.len();
                        let layout87 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec87.len() * 56,
                            8,
                        );
                        let result87 = if layout87.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout87).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout87);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec87.into_iter().enumerate() {
                            let base = result87.add(i * 56);
                            {
                                match e {
                                    DbValue::Character(e) => {
                                        *base.add(0).cast::<u8>() = (0i32) as u8;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                    }
                                    DbValue::Int2(e) => {
                                        *base.add(0).cast::<u8>() = (1i32) as u8;
                                        *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                    }
                                    DbValue::Int4(e) => {
                                        *base.add(0).cast::<u8>() = (2i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::Int8(e) => {
                                        *base.add(0).cast::<u8>() = (3i32) as u8;
                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    DbValue::Float4(e) => {
                                        *base.add(0).cast::<u8>() = (4i32) as u8;
                                        *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                    }
                                    DbValue::Float8(e) => {
                                        *base.add(0).cast::<u8>() = (5i32) as u8;
                                        *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                    }
                                    DbValue::Numeric(e) => {
                                        *base.add(0).cast::<u8>() = (6i32) as u8;
                                        let vec1 = e;
                                        let ptr1 = vec1.as_ptr().cast::<u8>();
                                        let len1 = vec1.len();
                                        *base.add(12).cast::<usize>() = len1;
                                        *base.add(8).cast::<*mut u8>() = ptr1.cast_mut();
                                    }
                                    DbValue::Boolean(e) => {
                                        *base.add(0).cast::<u8>() = (7i32) as u8;
                                        *base.add(8).cast::<u8>() = (match e {
                                            true => 1,
                                            false => 0,
                                        }) as u8;
                                    }
                                    DbValue::Text(e) => {
                                        *base.add(0).cast::<u8>() = (8i32) as u8;
                                        let vec2 = e;
                                        let ptr2 = vec2.as_ptr().cast::<u8>();
                                        let len2 = vec2.len();
                                        *base.add(12).cast::<usize>() = len2;
                                        *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                    }
                                    DbValue::Varchar(e) => {
                                        *base.add(0).cast::<u8>() = (9i32) as u8;
                                        let vec3 = e;
                                        let ptr3 = vec3.as_ptr().cast::<u8>();
                                        let len3 = vec3.len();
                                        *base.add(12).cast::<usize>() = len3;
                                        *base.add(8).cast::<*mut u8>() = ptr3.cast_mut();
                                    }
                                    DbValue::Bpchar(e) => {
                                        *base.add(0).cast::<u8>() = (10i32) as u8;
                                        let vec4 = e;
                                        let ptr4 = vec4.as_ptr().cast::<u8>();
                                        let len4 = vec4.len();
                                        *base.add(12).cast::<usize>() = len4;
                                        *base.add(8).cast::<*mut u8>() = ptr4.cast_mut();
                                    }
                                    DbValue::Timestamp(e) => {
                                        *base.add(0).cast::<u8>() = (11i32) as u8;
                                        let super::super::super::golem::rdbms::types::Timestamp {
                                            date: date5,
                                            time: time5,
                                        } = e;
                                        let super::super::super::golem::rdbms::types::Date {
                                            year: year6,
                                            month: month6,
                                            day: day6,
                                        } = date5;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(year6);
                                        *base.add(12).cast::<u8>() = (_rt::as_i32(month6)) as u8;
                                        *base.add(13).cast::<u8>() = (_rt::as_i32(day6)) as u8;
                                        let super::super::super::golem::rdbms::types::Time {
                                            hour: hour7,
                                            minute: minute7,
                                            second: second7,
                                            nanosecond: nanosecond7,
                                        } = time5;
                                        *base.add(16).cast::<u8>() = (_rt::as_i32(hour7)) as u8;
                                        *base.add(17).cast::<u8>() = (_rt::as_i32(minute7)) as u8;
                                        *base.add(18).cast::<u8>() = (_rt::as_i32(second7)) as u8;
                                        *base.add(20).cast::<i32>() = _rt::as_i32(nanosecond7);
                                    }
                                    DbValue::Timestamptz(e) => {
                                        *base.add(0).cast::<u8>() = (12i32) as u8;
                                        let super::super::super::golem::rdbms::types::Timestamptz {
                                            timestamp: timestamp8,
                                            offset: offset8,
                                        } = e;
                                        let super::super::super::golem::rdbms::types::Timestamp {
                                            date: date9,
                                            time: time9,
                                        } = timestamp8;
                                        let super::super::super::golem::rdbms::types::Date {
                                            year: year10,
                                            month: month10,
                                            day: day10,
                                        } = date9;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(year10);
                                        *base.add(12).cast::<u8>() = (_rt::as_i32(month10)) as u8;
                                        *base.add(13).cast::<u8>() = (_rt::as_i32(day10)) as u8;
                                        let super::super::super::golem::rdbms::types::Time {
                                            hour: hour11,
                                            minute: minute11,
                                            second: second11,
                                            nanosecond: nanosecond11,
                                        } = time9;
                                        *base.add(16).cast::<u8>() = (_rt::as_i32(hour11)) as u8;
                                        *base.add(17).cast::<u8>() = (_rt::as_i32(minute11)) as u8;
                                        *base.add(18).cast::<u8>() = (_rt::as_i32(second11)) as u8;
                                        *base.add(20).cast::<i32>() = _rt::as_i32(nanosecond11);
                                        *base.add(24).cast::<i32>() = _rt::as_i32(offset8);
                                    }
                                    DbValue::Date(e) => {
                                        *base.add(0).cast::<u8>() = (13i32) as u8;
                                        let super::super::super::golem::rdbms::types::Date {
                                            year: year12,
                                            month: month12,
                                            day: day12,
                                        } = e;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(year12);
                                        *base.add(12).cast::<u8>() = (_rt::as_i32(month12)) as u8;
                                        *base.add(13).cast::<u8>() = (_rt::as_i32(day12)) as u8;
                                    }
                                    DbValue::Time(e) => {
                                        *base.add(0).cast::<u8>() = (14i32) as u8;
                                        let super::super::super::golem::rdbms::types::Time {
                                            hour: hour13,
                                            minute: minute13,
                                            second: second13,
                                            nanosecond: nanosecond13,
                                        } = e;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(hour13)) as u8;
                                        *base.add(9).cast::<u8>() = (_rt::as_i32(minute13)) as u8;
                                        *base.add(10).cast::<u8>() = (_rt::as_i32(second13)) as u8;
                                        *base.add(12).cast::<i32>() = _rt::as_i32(nanosecond13);
                                    }
                                    DbValue::Timetz(e) => {
                                        *base.add(0).cast::<u8>() = (15i32) as u8;
                                        let super::super::super::golem::rdbms::types::Timetz {
                                            time: time14,
                                            offset: offset14,
                                        } = e;
                                        let super::super::super::golem::rdbms::types::Time {
                                            hour: hour15,
                                            minute: minute15,
                                            second: second15,
                                            nanosecond: nanosecond15,
                                        } = time14;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(hour15)) as u8;
                                        *base.add(9).cast::<u8>() = (_rt::as_i32(minute15)) as u8;
                                        *base.add(10).cast::<u8>() = (_rt::as_i32(second15)) as u8;
                                        *base.add(12).cast::<i32>() = _rt::as_i32(nanosecond15);
                                        *base.add(16).cast::<i32>() = _rt::as_i32(offset14);
                                    }
                                    DbValue::Interval(e) => {
                                        *base.add(0).cast::<u8>() = (16i32) as u8;
                                        let Interval {
                                            months: months16,
                                            days: days16,
                                            microseconds: microseconds16,
                                        } = e;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(months16);
                                        *base.add(12).cast::<i32>() = _rt::as_i32(days16);
                                        *base.add(16).cast::<i64>() = _rt::as_i64(microseconds16);
                                    }
                                    DbValue::Bytea(e) => {
                                        *base.add(0).cast::<u8>() = (17i32) as u8;
                                        let vec17 = e;
                                        let ptr17 = vec17.as_ptr().cast::<u8>();
                                        let len17 = vec17.len();
                                        *base.add(12).cast::<usize>() = len17;
                                        *base.add(8).cast::<*mut u8>() = ptr17.cast_mut();
                                    }
                                    DbValue::Json(e) => {
                                        *base.add(0).cast::<u8>() = (18i32) as u8;
                                        let vec18 = e;
                                        let ptr18 = vec18.as_ptr().cast::<u8>();
                                        let len18 = vec18.len();
                                        *base.add(12).cast::<usize>() = len18;
                                        *base.add(8).cast::<*mut u8>() = ptr18.cast_mut();
                                    }
                                    DbValue::Jsonb(e) => {
                                        *base.add(0).cast::<u8>() = (19i32) as u8;
                                        let vec19 = e;
                                        let ptr19 = vec19.as_ptr().cast::<u8>();
                                        let len19 = vec19.len();
                                        *base.add(12).cast::<usize>() = len19;
                                        *base.add(8).cast::<*mut u8>() = ptr19.cast_mut();
                                    }
                                    DbValue::Jsonpath(e) => {
                                        *base.add(0).cast::<u8>() = (20i32) as u8;
                                        let vec20 = e;
                                        let ptr20 = vec20.as_ptr().cast::<u8>();
                                        let len20 = vec20.len();
                                        *base.add(12).cast::<usize>() = len20;
                                        *base.add(8).cast::<*mut u8>() = ptr20.cast_mut();
                                    }
                                    DbValue::Xml(e) => {
                                        *base.add(0).cast::<u8>() = (21i32) as u8;
                                        let vec21 = e;
                                        let ptr21 = vec21.as_ptr().cast::<u8>();
                                        let len21 = vec21.len();
                                        *base.add(12).cast::<usize>() = len21;
                                        *base.add(8).cast::<*mut u8>() = ptr21.cast_mut();
                                    }
                                    DbValue::Uuid(e) => {
                                        *base.add(0).cast::<u8>() = (22i32) as u8;
                                        let super::super::super::golem::rdbms::types::Uuid {
                                            high_bits: high_bits22,
                                            low_bits: low_bits22,
                                        } = e;
                                        *base.add(8).cast::<i64>() = _rt::as_i64(high_bits22);
                                        *base.add(16).cast::<i64>() = _rt::as_i64(low_bits22);
                                    }
                                    DbValue::Inet(e) => {
                                        *base.add(0).cast::<u8>() = (23i32) as u8;
                                        use super::super::super::golem::rdbms::types::IpAddress as V25;
                                        match e {
                                            V25::Ipv4(e) => {
                                                *base.add(8).cast::<u8>() = (0i32) as u8;
                                                let (t23_0, t23_1, t23_2, t23_3) = e;
                                                *base.add(10).cast::<u8>() = (_rt::as_i32(t23_0)) as u8;
                                                *base.add(11).cast::<u8>() = (_rt::as_i32(t23_1)) as u8;
                                                *base.add(12).cast::<u8>() = (_rt::as_i32(t23_2)) as u8;
                                                *base.add(13).cast::<u8>() = (_rt::as_i32(t23_3)) as u8;
                                            }
                                            V25::Ipv6(e) => {
                                                *base.add(8).cast::<u8>() = (1i32) as u8;
                                                let (
                                                    t24_0,
                                                    t24_1,
                                                    t24_2,
                                                    t24_3,
                                                    t24_4,
                                                    t24_5,
                                                    t24_6,
                                                    t24_7,
                                                ) = e;
                                                *base.add(10).cast::<u16>() = (_rt::as_i32(t24_0)) as u16;
                                                *base.add(12).cast::<u16>() = (_rt::as_i32(t24_1)) as u16;
                                                *base.add(14).cast::<u16>() = (_rt::as_i32(t24_2)) as u16;
                                                *base.add(16).cast::<u16>() = (_rt::as_i32(t24_3)) as u16;
                                                *base.add(18).cast::<u16>() = (_rt::as_i32(t24_4)) as u16;
                                                *base.add(20).cast::<u16>() = (_rt::as_i32(t24_5)) as u16;
                                                *base.add(22).cast::<u16>() = (_rt::as_i32(t24_6)) as u16;
                                                *base.add(24).cast::<u16>() = (_rt::as_i32(t24_7)) as u16;
                                            }
                                        }
                                    }
                                    DbValue::Cidr(e) => {
                                        *base.add(0).cast::<u8>() = (24i32) as u8;
                                        use super::super::super::golem::rdbms::types::IpAddress as V28;
                                        match e {
                                            V28::Ipv4(e) => {
                                                *base.add(8).cast::<u8>() = (0i32) as u8;
                                                let (t26_0, t26_1, t26_2, t26_3) = e;
                                                *base.add(10).cast::<u8>() = (_rt::as_i32(t26_0)) as u8;
                                                *base.add(11).cast::<u8>() = (_rt::as_i32(t26_1)) as u8;
                                                *base.add(12).cast::<u8>() = (_rt::as_i32(t26_2)) as u8;
                                                *base.add(13).cast::<u8>() = (_rt::as_i32(t26_3)) as u8;
                                            }
                                            V28::Ipv6(e) => {
                                                *base.add(8).cast::<u8>() = (1i32) as u8;
                                                let (
                                                    t27_0,
                                                    t27_1,
                                                    t27_2,
                                                    t27_3,
                                                    t27_4,
                                                    t27_5,
                                                    t27_6,
                                                    t27_7,
                                                ) = e;
                                                *base.add(10).cast::<u16>() = (_rt::as_i32(t27_0)) as u16;
                                                *base.add(12).cast::<u16>() = (_rt::as_i32(t27_1)) as u16;
                                                *base.add(14).cast::<u16>() = (_rt::as_i32(t27_2)) as u16;
                                                *base.add(16).cast::<u16>() = (_rt::as_i32(t27_3)) as u16;
                                                *base.add(18).cast::<u16>() = (_rt::as_i32(t27_4)) as u16;
                                                *base.add(20).cast::<u16>() = (_rt::as_i32(t27_5)) as u16;
                                                *base.add(22).cast::<u16>() = (_rt::as_i32(t27_6)) as u16;
                                                *base.add(24).cast::<u16>() = (_rt::as_i32(t27_7)) as u16;
                                            }
                                        }
                                    }
                                    DbValue::Macaddr(e) => {
                                        *base.add(0).cast::<u8>() = (25i32) as u8;
                                        let super::super::super::golem::rdbms::types::MacAddress {
                                            octets: octets29,
                                        } = e;
                                        let (t30_0, t30_1, t30_2, t30_3, t30_4, t30_5) = octets29;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(t30_0)) as u8;
                                        *base.add(9).cast::<u8>() = (_rt::as_i32(t30_1)) as u8;
                                        *base.add(10).cast::<u8>() = (_rt::as_i32(t30_2)) as u8;
                                        *base.add(11).cast::<u8>() = (_rt::as_i32(t30_3)) as u8;
                                        *base.add(12).cast::<u8>() = (_rt::as_i32(t30_4)) as u8;
                                        *base.add(13).cast::<u8>() = (_rt::as_i32(t30_5)) as u8;
                                    }
                                    DbValue::Bit(e) => {
                                        *base.add(0).cast::<u8>() = (26i32) as u8;
                                        let vec31 = e;
                                        let len31 = vec31.len();
                                        let layout31 = _rt::alloc::Layout::from_size_align_unchecked(
                                            vec31.len() * 1,
                                            1,
                                        );
                                        let result31 = if layout31.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout31).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout31);
                                            }
                                            ptr
                                        } else {
                                            ::core::ptr::null_mut()
                                        };
                                        for (i, e) in vec31.into_iter().enumerate() {
                                            let base = result31.add(i * 1);
                                            {
                                                *base.add(0).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                        }
                                        *base.add(12).cast::<usize>() = len31;
                                        *base.add(8).cast::<*mut u8>() = result31;
                                        cleanup_list.extend_from_slice(&[(result31, layout31)]);
                                    }
                                    DbValue::Varbit(e) => {
                                        *base.add(0).cast::<u8>() = (27i32) as u8;
                                        let vec32 = e;
                                        let len32 = vec32.len();
                                        let layout32 = _rt::alloc::Layout::from_size_align_unchecked(
                                            vec32.len() * 1,
                                            1,
                                        );
                                        let result32 = if layout32.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout32).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout32);
                                            }
                                            ptr
                                        } else {
                                            ::core::ptr::null_mut()
                                        };
                                        for (i, e) in vec32.into_iter().enumerate() {
                                            let base = result32.add(i * 1);
                                            {
                                                *base.add(0).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                        }
                                        *base.add(12).cast::<usize>() = len32;
                                        *base.add(8).cast::<*mut u8>() = result32;
                                        cleanup_list.extend_from_slice(&[(result32, layout32)]);
                                    }
                                    DbValue::Int4range(e) => {
                                        *base.add(0).cast::<u8>() = (28i32) as u8;
                                        let Int4range { start: start33, end: end33 } = e;
                                        match start33 {
                                            Int4bound::Included(e) => {
                                                *base.add(8).cast::<u8>() = (0i32) as u8;
                                                *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            Int4bound::Excluded(e) => {
                                                *base.add(8).cast::<u8>() = (1i32) as u8;
                                                *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            Int4bound::Unbounded => {
                                                *base.add(8).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                        match end33 {
                                            Int4bound::Included(e) => {
                                                *base.add(16).cast::<u8>() = (0i32) as u8;
                                                *base.add(20).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            Int4bound::Excluded(e) => {
                                                *base.add(16).cast::<u8>() = (1i32) as u8;
                                                *base.add(20).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            Int4bound::Unbounded => {
                                                *base.add(16).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                    }
                                    DbValue::Int8range(e) => {
                                        *base.add(0).cast::<u8>() = (29i32) as u8;
                                        let Int8range { start: start34, end: end34 } = e;
                                        match start34 {
                                            Int8bound::Included(e) => {
                                                *base.add(8).cast::<u8>() = (0i32) as u8;
                                                *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            Int8bound::Excluded(e) => {
                                                *base.add(8).cast::<u8>() = (1i32) as u8;
                                                *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            Int8bound::Unbounded => {
                                                *base.add(8).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                        match end34 {
                                            Int8bound::Included(e) => {
                                                *base.add(24).cast::<u8>() = (0i32) as u8;
                                                *base.add(32).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            Int8bound::Excluded(e) => {
                                                *base.add(24).cast::<u8>() = (1i32) as u8;
                                                *base.add(32).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            Int8bound::Unbounded => {
                                                *base.add(24).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                    }
                                    DbValue::Numrange(e) => {
                                        *base.add(0).cast::<u8>() = (30i32) as u8;
                                        let Numrange { start: start35, end: end35 } = e;
                                        match start35 {
                                            Numbound::Included(e) => {
                                                *base.add(8).cast::<u8>() = (0i32) as u8;
                                                let vec36 = e;
                                                let ptr36 = vec36.as_ptr().cast::<u8>();
                                                let len36 = vec36.len();
                                                *base.add(16).cast::<usize>() = len36;
                                                *base.add(12).cast::<*mut u8>() = ptr36.cast_mut();
                                            }
                                            Numbound::Excluded(e) => {
                                                *base.add(8).cast::<u8>() = (1i32) as u8;
                                                let vec37 = e;
                                                let ptr37 = vec37.as_ptr().cast::<u8>();
                                                let len37 = vec37.len();
                                                *base.add(16).cast::<usize>() = len37;
                                                *base.add(12).cast::<*mut u8>() = ptr37.cast_mut();
                                            }
                                            Numbound::Unbounded => {
                                                *base.add(8).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                        match end35 {
                                            Numbound::Included(e) => {
                                                *base.add(20).cast::<u8>() = (0i32) as u8;
                                                let vec38 = e;
                                                let ptr38 = vec38.as_ptr().cast::<u8>();
                                                let len38 = vec38.len();
                                                *base.add(28).cast::<usize>() = len38;
                                                *base.add(24).cast::<*mut u8>() = ptr38.cast_mut();
                                            }
                                            Numbound::Excluded(e) => {
                                                *base.add(20).cast::<u8>() = (1i32) as u8;
                                                let vec39 = e;
                                                let ptr39 = vec39.as_ptr().cast::<u8>();
                                                let len39 = vec39.len();
                                                *base.add(28).cast::<usize>() = len39;
                                                *base.add(24).cast::<*mut u8>() = ptr39.cast_mut();
                                            }
                                            Numbound::Unbounded => {
                                                *base.add(20).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                    }
                                    DbValue::Tsrange(e) => {
                                        *base.add(0).cast::<u8>() = (31i32) as u8;
                                        let Tsrange { start: start40, end: end40 } = e;
                                        match start40 {
                                            Tsbound::Included(e) => {
                                                *base.add(8).cast::<u8>() = (0i32) as u8;
                                                let super::super::super::golem::rdbms::types::Timestamp {
                                                    date: date41,
                                                    time: time41,
                                                } = e;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year42,
                                                    month: month42,
                                                    day: day42,
                                                } = date41;
                                                *base.add(12).cast::<i32>() = _rt::as_i32(year42);
                                                *base.add(16).cast::<u8>() = (_rt::as_i32(month42)) as u8;
                                                *base.add(17).cast::<u8>() = (_rt::as_i32(day42)) as u8;
                                                let super::super::super::golem::rdbms::types::Time {
                                                    hour: hour43,
                                                    minute: minute43,
                                                    second: second43,
                                                    nanosecond: nanosecond43,
                                                } = time41;
                                                *base.add(20).cast::<u8>() = (_rt::as_i32(hour43)) as u8;
                                                *base.add(21).cast::<u8>() = (_rt::as_i32(minute43)) as u8;
                                                *base.add(22).cast::<u8>() = (_rt::as_i32(second43)) as u8;
                                                *base.add(24).cast::<i32>() = _rt::as_i32(nanosecond43);
                                            }
                                            Tsbound::Excluded(e) => {
                                                *base.add(8).cast::<u8>() = (1i32) as u8;
                                                let super::super::super::golem::rdbms::types::Timestamp {
                                                    date: date44,
                                                    time: time44,
                                                } = e;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year45,
                                                    month: month45,
                                                    day: day45,
                                                } = date44;
                                                *base.add(12).cast::<i32>() = _rt::as_i32(year45);
                                                *base.add(16).cast::<u8>() = (_rt::as_i32(month45)) as u8;
                                                *base.add(17).cast::<u8>() = (_rt::as_i32(day45)) as u8;
                                                let super::super::super::golem::rdbms::types::Time {
                                                    hour: hour46,
                                                    minute: minute46,
                                                    second: second46,
                                                    nanosecond: nanosecond46,
                                                } = time44;
                                                *base.add(20).cast::<u8>() = (_rt::as_i32(hour46)) as u8;
                                                *base.add(21).cast::<u8>() = (_rt::as_i32(minute46)) as u8;
                                                *base.add(22).cast::<u8>() = (_rt::as_i32(second46)) as u8;
                                                *base.add(24).cast::<i32>() = _rt::as_i32(nanosecond46);
                                            }
                                            Tsbound::Unbounded => {
                                                *base.add(8).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                        match end40 {
                                            Tsbound::Included(e) => {
                                                *base.add(28).cast::<u8>() = (0i32) as u8;
                                                let super::super::super::golem::rdbms::types::Timestamp {
                                                    date: date47,
                                                    time: time47,
                                                } = e;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year48,
                                                    month: month48,
                                                    day: day48,
                                                } = date47;
                                                *base.add(32).cast::<i32>() = _rt::as_i32(year48);
                                                *base.add(36).cast::<u8>() = (_rt::as_i32(month48)) as u8;
                                                *base.add(37).cast::<u8>() = (_rt::as_i32(day48)) as u8;
                                                let super::super::super::golem::rdbms::types::Time {
                                                    hour: hour49,
                                                    minute: minute49,
                                                    second: second49,
                                                    nanosecond: nanosecond49,
                                                } = time47;
                                                *base.add(40).cast::<u8>() = (_rt::as_i32(hour49)) as u8;
                                                *base.add(41).cast::<u8>() = (_rt::as_i32(minute49)) as u8;
                                                *base.add(42).cast::<u8>() = (_rt::as_i32(second49)) as u8;
                                                *base.add(44).cast::<i32>() = _rt::as_i32(nanosecond49);
                                            }
                                            Tsbound::Excluded(e) => {
                                                *base.add(28).cast::<u8>() = (1i32) as u8;
                                                let super::super::super::golem::rdbms::types::Timestamp {
                                                    date: date50,
                                                    time: time50,
                                                } = e;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year51,
                                                    month: month51,
                                                    day: day51,
                                                } = date50;
                                                *base.add(32).cast::<i32>() = _rt::as_i32(year51);
                                                *base.add(36).cast::<u8>() = (_rt::as_i32(month51)) as u8;
                                                *base.add(37).cast::<u8>() = (_rt::as_i32(day51)) as u8;
                                                let super::super::super::golem::rdbms::types::Time {
                                                    hour: hour52,
                                                    minute: minute52,
                                                    second: second52,
                                                    nanosecond: nanosecond52,
                                                } = time50;
                                                *base.add(40).cast::<u8>() = (_rt::as_i32(hour52)) as u8;
                                                *base.add(41).cast::<u8>() = (_rt::as_i32(minute52)) as u8;
                                                *base.add(42).cast::<u8>() = (_rt::as_i32(second52)) as u8;
                                                *base.add(44).cast::<i32>() = _rt::as_i32(nanosecond52);
                                            }
                                            Tsbound::Unbounded => {
                                                *base.add(28).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                    }
                                    DbValue::Tstzrange(e) => {
                                        *base.add(0).cast::<u8>() = (32i32) as u8;
                                        let Tstzrange { start: start53, end: end53 } = e;
                                        match start53 {
                                            Tstzbound::Included(e) => {
                                                *base.add(8).cast::<u8>() = (0i32) as u8;
                                                let super::super::super::golem::rdbms::types::Timestamptz {
                                                    timestamp: timestamp54,
                                                    offset: offset54,
                                                } = e;
                                                let super::super::super::golem::rdbms::types::Timestamp {
                                                    date: date55,
                                                    time: time55,
                                                } = timestamp54;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year56,
                                                    month: month56,
                                                    day: day56,
                                                } = date55;
                                                *base.add(12).cast::<i32>() = _rt::as_i32(year56);
                                                *base.add(16).cast::<u8>() = (_rt::as_i32(month56)) as u8;
                                                *base.add(17).cast::<u8>() = (_rt::as_i32(day56)) as u8;
                                                let super::super::super::golem::rdbms::types::Time {
                                                    hour: hour57,
                                                    minute: minute57,
                                                    second: second57,
                                                    nanosecond: nanosecond57,
                                                } = time55;
                                                *base.add(20).cast::<u8>() = (_rt::as_i32(hour57)) as u8;
                                                *base.add(21).cast::<u8>() = (_rt::as_i32(minute57)) as u8;
                                                *base.add(22).cast::<u8>() = (_rt::as_i32(second57)) as u8;
                                                *base.add(24).cast::<i32>() = _rt::as_i32(nanosecond57);
                                                *base.add(28).cast::<i32>() = _rt::as_i32(offset54);
                                            }
                                            Tstzbound::Excluded(e) => {
                                                *base.add(8).cast::<u8>() = (1i32) as u8;
                                                let super::super::super::golem::rdbms::types::Timestamptz {
                                                    timestamp: timestamp58,
                                                    offset: offset58,
                                                } = e;
                                                let super::super::super::golem::rdbms::types::Timestamp {
                                                    date: date59,
                                                    time: time59,
                                                } = timestamp58;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year60,
                                                    month: month60,
                                                    day: day60,
                                                } = date59;
                                                *base.add(12).cast::<i32>() = _rt::as_i32(year60);
                                                *base.add(16).cast::<u8>() = (_rt::as_i32(month60)) as u8;
                                                *base.add(17).cast::<u8>() = (_rt::as_i32(day60)) as u8;
                                                let super::super::super::golem::rdbms::types::Time {
                                                    hour: hour61,
                                                    minute: minute61,
                                                    second: second61,
                                                    nanosecond: nanosecond61,
                                                } = time59;
                                                *base.add(20).cast::<u8>() = (_rt::as_i32(hour61)) as u8;
                                                *base.add(21).cast::<u8>() = (_rt::as_i32(minute61)) as u8;
                                                *base.add(22).cast::<u8>() = (_rt::as_i32(second61)) as u8;
                                                *base.add(24).cast::<i32>() = _rt::as_i32(nanosecond61);
                                                *base.add(28).cast::<i32>() = _rt::as_i32(offset58);
                                            }
                                            Tstzbound::Unbounded => {
                                                *base.add(8).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                        match end53 {
                                            Tstzbound::Included(e) => {
                                                *base.add(32).cast::<u8>() = (0i32) as u8;
                                                let super::super::super::golem::rdbms::types::Timestamptz {
                                                    timestamp: timestamp62,
                                                    offset: offset62,
                                                } = e;
                                                let super::super::super::golem::rdbms::types::Timestamp {
                                                    date: date63,
                                                    time: time63,
                                                } = timestamp62;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year64,
                                                    month: month64,
                                                    day: day64,
                                                } = date63;
                                                *base.add(36).cast::<i32>() = _rt::as_i32(year64);
                                                *base.add(40).cast::<u8>() = (_rt::as_i32(month64)) as u8;
                                                *base.add(41).cast::<u8>() = (_rt::as_i32(day64)) as u8;
                                                let super::super::super::golem::rdbms::types::Time {
                                                    hour: hour65,
                                                    minute: minute65,
                                                    second: second65,
                                                    nanosecond: nanosecond65,
                                                } = time63;
                                                *base.add(44).cast::<u8>() = (_rt::as_i32(hour65)) as u8;
                                                *base.add(45).cast::<u8>() = (_rt::as_i32(minute65)) as u8;
                                                *base.add(46).cast::<u8>() = (_rt::as_i32(second65)) as u8;
                                                *base.add(48).cast::<i32>() = _rt::as_i32(nanosecond65);
                                                *base.add(52).cast::<i32>() = _rt::as_i32(offset62);
                                            }
                                            Tstzbound::Excluded(e) => {
                                                *base.add(32).cast::<u8>() = (1i32) as u8;
                                                let super::super::super::golem::rdbms::types::Timestamptz {
                                                    timestamp: timestamp66,
                                                    offset: offset66,
                                                } = e;
                                                let super::super::super::golem::rdbms::types::Timestamp {
                                                    date: date67,
                                                    time: time67,
                                                } = timestamp66;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year68,
                                                    month: month68,
                                                    day: day68,
                                                } = date67;
                                                *base.add(36).cast::<i32>() = _rt::as_i32(year68);
                                                *base.add(40).cast::<u8>() = (_rt::as_i32(month68)) as u8;
                                                *base.add(41).cast::<u8>() = (_rt::as_i32(day68)) as u8;
                                                let super::super::super::golem::rdbms::types::Time {
                                                    hour: hour69,
                                                    minute: minute69,
                                                    second: second69,
                                                    nanosecond: nanosecond69,
                                                } = time67;
                                                *base.add(44).cast::<u8>() = (_rt::as_i32(hour69)) as u8;
                                                *base.add(45).cast::<u8>() = (_rt::as_i32(minute69)) as u8;
                                                *base.add(46).cast::<u8>() = (_rt::as_i32(second69)) as u8;
                                                *base.add(48).cast::<i32>() = _rt::as_i32(nanosecond69);
                                                *base.add(52).cast::<i32>() = _rt::as_i32(offset66);
                                            }
                                            Tstzbound::Unbounded => {
                                                *base.add(32).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                    }
                                    DbValue::Daterange(e) => {
                                        *base.add(0).cast::<u8>() = (33i32) as u8;
                                        let Daterange { start: start70, end: end70 } = e;
                                        match start70 {
                                            Datebound::Included(e) => {
                                                *base.add(8).cast::<u8>() = (0i32) as u8;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year71,
                                                    month: month71,
                                                    day: day71,
                                                } = e;
                                                *base.add(12).cast::<i32>() = _rt::as_i32(year71);
                                                *base.add(16).cast::<u8>() = (_rt::as_i32(month71)) as u8;
                                                *base.add(17).cast::<u8>() = (_rt::as_i32(day71)) as u8;
                                            }
                                            Datebound::Excluded(e) => {
                                                *base.add(8).cast::<u8>() = (1i32) as u8;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year72,
                                                    month: month72,
                                                    day: day72,
                                                } = e;
                                                *base.add(12).cast::<i32>() = _rt::as_i32(year72);
                                                *base.add(16).cast::<u8>() = (_rt::as_i32(month72)) as u8;
                                                *base.add(17).cast::<u8>() = (_rt::as_i32(day72)) as u8;
                                            }
                                            Datebound::Unbounded => {
                                                *base.add(8).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                        match end70 {
                                            Datebound::Included(e) => {
                                                *base.add(20).cast::<u8>() = (0i32) as u8;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year73,
                                                    month: month73,
                                                    day: day73,
                                                } = e;
                                                *base.add(24).cast::<i32>() = _rt::as_i32(year73);
                                                *base.add(28).cast::<u8>() = (_rt::as_i32(month73)) as u8;
                                                *base.add(29).cast::<u8>() = (_rt::as_i32(day73)) as u8;
                                            }
                                            Datebound::Excluded(e) => {
                                                *base.add(20).cast::<u8>() = (1i32) as u8;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year74,
                                                    month: month74,
                                                    day: day74,
                                                } = e;
                                                *base.add(24).cast::<i32>() = _rt::as_i32(year74);
                                                *base.add(28).cast::<u8>() = (_rt::as_i32(month74)) as u8;
                                                *base.add(29).cast::<u8>() = (_rt::as_i32(day74)) as u8;
                                            }
                                            Datebound::Unbounded => {
                                                *base.add(20).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                    }
                                    DbValue::Money(e) => {
                                        *base.add(0).cast::<u8>() = (34i32) as u8;
                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    DbValue::Oid(e) => {
                                        *base.add(0).cast::<u8>() = (35i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::Enumeration(e) => {
                                        *base.add(0).cast::<u8>() = (36i32) as u8;
                                        let Enumeration { name: name75, value: value75 } = e;
                                        let vec76 = name75;
                                        let ptr76 = vec76.as_ptr().cast::<u8>();
                                        let len76 = vec76.len();
                                        *base.add(12).cast::<usize>() = len76;
                                        *base.add(8).cast::<*mut u8>() = ptr76.cast_mut();
                                        let vec77 = value75;
                                        let ptr77 = vec77.as_ptr().cast::<u8>();
                                        let len77 = vec77.len();
                                        *base.add(20).cast::<usize>() = len77;
                                        *base.add(16).cast::<*mut u8>() = ptr77.cast_mut();
                                    }
                                    DbValue::Composite(e) => {
                                        *base.add(0).cast::<u8>() = (37i32) as u8;
                                        let Composite { name: name78, values: values78 } = e;
                                        let vec79 = name78;
                                        let ptr79 = vec79.as_ptr().cast::<u8>();
                                        let len79 = vec79.len();
                                        *base.add(12).cast::<usize>() = len79;
                                        *base.add(8).cast::<*mut u8>() = ptr79.cast_mut();
                                        let vec80 = values78;
                                        let len80 = vec80.len();
                                        let layout80 = _rt::alloc::Layout::from_size_align_unchecked(
                                            vec80.len() * 4,
                                            4,
                                        );
                                        let result80 = if layout80.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout80).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout80);
                                            }
                                            ptr
                                        } else {
                                            ::core::ptr::null_mut()
                                        };
                                        for (i, e) in vec80.into_iter().enumerate() {
                                            let base = result80.add(i * 4);
                                            {
                                                *base.add(0).cast::<i32>() = (e).take_handle() as i32;
                                            }
                                        }
                                        *base.add(20).cast::<usize>() = len80;
                                        *base.add(16).cast::<*mut u8>() = result80;
                                        cleanup_list.extend_from_slice(&[(result80, layout80)]);
                                    }
                                    DbValue::Domain(e) => {
                                        *base.add(0).cast::<u8>() = (38i32) as u8;
                                        let Domain { name: name81, value: value81 } = e;
                                        let vec82 = name81;
                                        let ptr82 = vec82.as_ptr().cast::<u8>();
                                        let len82 = vec82.len();
                                        *base.add(12).cast::<usize>() = len82;
                                        *base.add(8).cast::<*mut u8>() = ptr82.cast_mut();
                                        *base.add(16).cast::<i32>() = (value81).take_handle()
                                            as i32;
                                    }
                                    DbValue::Array(e) => {
                                        *base.add(0).cast::<u8>() = (39i32) as u8;
                                        let vec83 = e;
                                        let len83 = vec83.len();
                                        let layout83 = _rt::alloc::Layout::from_size_align_unchecked(
                                            vec83.len() * 4,
                                            4,
                                        );
                                        let result83 = if layout83.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout83).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout83);
                                            }
                                            ptr
                                        } else {
                                            ::core::ptr::null_mut()
                                        };
                                        for (i, e) in vec83.into_iter().enumerate() {
                                            let base = result83.add(i * 4);
                                            {
                                                *base.add(0).cast::<i32>() = (e).take_handle() as i32;
                                            }
                                        }
                                        *base.add(12).cast::<usize>() = len83;
                                        *base.add(8).cast::<*mut u8>() = result83;
                                        cleanup_list.extend_from_slice(&[(result83, layout83)]);
                                    }
                                    DbValue::Range(e) => {
                                        *base.add(0).cast::<u8>() = (40i32) as u8;
                                        let Range { name: name84, value: value84 } = e;
                                        let vec85 = name84;
                                        let ptr85 = vec85.as_ptr().cast::<u8>();
                                        let len85 = vec85.len();
                                        *base.add(12).cast::<usize>() = len85;
                                        *base.add(8).cast::<*mut u8>() = ptr85.cast_mut();
                                        let ValuesRange { start: start86, end: end86 } = value84;
                                        match start86 {
                                            ValueBound::Included(e) => {
                                                *base.add(16).cast::<u8>() = (0i32) as u8;
                                                *base.add(20).cast::<i32>() = (e).take_handle() as i32;
                                            }
                                            ValueBound::Excluded(e) => {
                                                *base.add(16).cast::<u8>() = (1i32) as u8;
                                                *base.add(20).cast::<i32>() = (e).take_handle() as i32;
                                            }
                                            ValueBound::Unbounded => {
                                                *base.add(16).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                        match end86 {
                                            ValueBound::Included(e) => {
                                                *base.add(24).cast::<u8>() = (0i32) as u8;
                                                *base.add(28).cast::<i32>() = (e).take_handle() as i32;
                                            }
                                            ValueBound::Excluded(e) => {
                                                *base.add(24).cast::<u8>() = (1i32) as u8;
                                                *base.add(28).cast::<i32>() = (e).take_handle() as i32;
                                            }
                                            ValueBound::Unbounded => {
                                                *base.add(24).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                    }
                                    DbValue::Null => {
                                        *base.add(0).cast::<u8>() = (41i32) as u8;
                                    }
                                }
                            }
                        }
                        let ptr88 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rdbms/postgres@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]db-transaction.query"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            result87,
                            len87,
                            ptr88,
                        );
                        let l89 = i32::from(*ptr88.add(0).cast::<u8>());
                        if layout87.size() != 0 {
                            _rt::alloc::dealloc(result87.cast(), layout87);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l89 {
                            0 => {
                                let e = {
                                    let l90 = *ptr88.add(4).cast::<*mut u8>();
                                    let l91 = *ptr88.add(8).cast::<usize>();
                                    let base123 = l90;
                                    let len123 = l91;
                                    let mut result123 = _rt::Vec::with_capacity(len123);
                                    for i in 0..len123 {
                                        let base = base123.add(i * 48);
                                        let e123 = {
                                            let l92 = *base.add(0).cast::<i64>();
                                            let l93 = *base.add(8).cast::<*mut u8>();
                                            let l94 = *base.add(12).cast::<usize>();
                                            let len95 = l94;
                                            let bytes95 = _rt::Vec::from_raw_parts(
                                                l93.cast(),
                                                len95,
                                                len95,
                                            );
                                            let l96 = i32::from(*base.add(16).cast::<u8>());
                                            let v119 = match l96 {
                                                0 => DbColumnType::Character,
                                                1 => DbColumnType::Int2,
                                                2 => DbColumnType::Int4,
                                                3 => DbColumnType::Int8,
                                                4 => DbColumnType::Float4,
                                                5 => DbColumnType::Float8,
                                                6 => DbColumnType::Numeric,
                                                7 => DbColumnType::Boolean,
                                                8 => DbColumnType::Text,
                                                9 => DbColumnType::Varchar,
                                                10 => DbColumnType::Bpchar,
                                                11 => DbColumnType::Timestamp,
                                                12 => DbColumnType::Timestamptz,
                                                13 => DbColumnType::Date,
                                                14 => DbColumnType::Time,
                                                15 => DbColumnType::Timetz,
                                                16 => DbColumnType::Interval,
                                                17 => DbColumnType::Bytea,
                                                18 => DbColumnType::Uuid,
                                                19 => DbColumnType::Xml,
                                                20 => DbColumnType::Json,
                                                21 => DbColumnType::Jsonb,
                                                22 => DbColumnType::Jsonpath,
                                                23 => DbColumnType::Inet,
                                                24 => DbColumnType::Cidr,
                                                25 => DbColumnType::Macaddr,
                                                26 => DbColumnType::Bit,
                                                27 => DbColumnType::Varbit,
                                                28 => DbColumnType::Int4range,
                                                29 => DbColumnType::Int8range,
                                                30 => DbColumnType::Numrange,
                                                31 => DbColumnType::Tsrange,
                                                32 => DbColumnType::Tstzrange,
                                                33 => DbColumnType::Daterange,
                                                34 => DbColumnType::Money,
                                                35 => DbColumnType::Oid,
                                                36 => {
                                                    let e119 = {
                                                        let l97 = *base.add(20).cast::<*mut u8>();
                                                        let l98 = *base.add(24).cast::<usize>();
                                                        let len99 = l98;
                                                        let bytes99 = _rt::Vec::from_raw_parts(
                                                            l97.cast(),
                                                            len99,
                                                            len99,
                                                        );
                                                        EnumerationType {
                                                            name: _rt::string_lift(bytes99),
                                                        }
                                                    };
                                                    DbColumnType::Enumeration(e119)
                                                }
                                                37 => {
                                                    let e119 = {
                                                        let l100 = *base.add(20).cast::<*mut u8>();
                                                        let l101 = *base.add(24).cast::<usize>();
                                                        let len102 = l101;
                                                        let bytes102 = _rt::Vec::from_raw_parts(
                                                            l100.cast(),
                                                            len102,
                                                            len102,
                                                        );
                                                        let l103 = *base.add(28).cast::<*mut u8>();
                                                        let l104 = *base.add(32).cast::<usize>();
                                                        let base109 = l103;
                                                        let len109 = l104;
                                                        let mut result109 = _rt::Vec::with_capacity(len109);
                                                        for i in 0..len109 {
                                                            let base = base109.add(i * 12);
                                                            let e109 = {
                                                                let l105 = *base.add(0).cast::<*mut u8>();
                                                                let l106 = *base.add(4).cast::<usize>();
                                                                let len107 = l106;
                                                                let bytes107 = _rt::Vec::from_raw_parts(
                                                                    l105.cast(),
                                                                    len107,
                                                                    len107,
                                                                );
                                                                let l108 = *base.add(8).cast::<i32>();
                                                                (
                                                                    _rt::string_lift(bytes107),
                                                                    LazyDbColumnType::from_handle(l108 as u32),
                                                                )
                                                            };
                                                            result109.push(e109);
                                                        }
                                                        _rt::cabi_dealloc(base109, len109 * 12, 4);
                                                        CompositeType {
                                                            name: _rt::string_lift(bytes102),
                                                            attributes: result109,
                                                        }
                                                    };
                                                    DbColumnType::Composite(e119)
                                                }
                                                38 => {
                                                    let e119 = {
                                                        let l110 = *base.add(20).cast::<*mut u8>();
                                                        let l111 = *base.add(24).cast::<usize>();
                                                        let len112 = l111;
                                                        let bytes112 = _rt::Vec::from_raw_parts(
                                                            l110.cast(),
                                                            len112,
                                                            len112,
                                                        );
                                                        let l113 = *base.add(28).cast::<i32>();
                                                        DomainType {
                                                            name: _rt::string_lift(bytes112),
                                                            base_type: LazyDbColumnType::from_handle(l113 as u32),
                                                        }
                                                    };
                                                    DbColumnType::Domain(e119)
                                                }
                                                39 => {
                                                    let e119 = {
                                                        let l114 = *base.add(20).cast::<i32>();
                                                        LazyDbColumnType::from_handle(l114 as u32)
                                                    };
                                                    DbColumnType::Array(e119)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 40, "invalid enum discriminant");
                                                    let e119 = {
                                                        let l115 = *base.add(20).cast::<*mut u8>();
                                                        let l116 = *base.add(24).cast::<usize>();
                                                        let len117 = l116;
                                                        let bytes117 = _rt::Vec::from_raw_parts(
                                                            l115.cast(),
                                                            len117,
                                                            len117,
                                                        );
                                                        let l118 = *base.add(28).cast::<i32>();
                                                        RangeType {
                                                            name: _rt::string_lift(bytes117),
                                                            base_type: LazyDbColumnType::from_handle(l118 as u32),
                                                        }
                                                    };
                                                    DbColumnType::Range(e119)
                                                }
                                            };
                                            let l120 = *base.add(36).cast::<*mut u8>();
                                            let l121 = *base.add(40).cast::<usize>();
                                            let len122 = l121;
                                            let bytes122 = _rt::Vec::from_raw_parts(
                                                l120.cast(),
                                                len122,
                                                len122,
                                            );
                                            DbColumn {
                                                ordinal: l92 as u64,
                                                name: _rt::string_lift(bytes95),
                                                db_type: v119,
                                                db_type_name: _rt::string_lift(bytes122),
                                            }
                                        };
                                        result123.push(e123);
                                    }
                                    _rt::cabi_dealloc(base123, len123 * 48, 8);
                                    let l124 = *ptr88.add(12).cast::<*mut u8>();
                                    let l125 = *ptr88.add(16).cast::<usize>();
                                    let base389 = l124;
                                    let len389 = l125;
                                    let mut result389 = _rt::Vec::with_capacity(len389);
                                    for i in 0..len389 {
                                        let base = base389.add(i * 8);
                                        let e389 = {
                                            let l126 = *base.add(0).cast::<*mut u8>();
                                            let l127 = *base.add(4).cast::<usize>();
                                            let base388 = l126;
                                            let len388 = l127;
                                            let mut result388 = _rt::Vec::with_capacity(len388);
                                            for i in 0..len388 {
                                                let base = base388.add(i * 56);
                                                let e388 = {
                                                    let l128 = i32::from(*base.add(0).cast::<u8>());
                                                    let v387 = match l128 {
                                                        0 => {
                                                            let e387 = {
                                                                let l129 = i32::from(*base.add(8).cast::<i8>());
                                                                l129 as i8
                                                            };
                                                            DbValue::Character(e387)
                                                        }
                                                        1 => {
                                                            let e387 = {
                                                                let l130 = i32::from(*base.add(8).cast::<i16>());
                                                                l130 as i16
                                                            };
                                                            DbValue::Int2(e387)
                                                        }
                                                        2 => {
                                                            let e387 = {
                                                                let l131 = *base.add(8).cast::<i32>();
                                                                l131
                                                            };
                                                            DbValue::Int4(e387)
                                                        }
                                                        3 => {
                                                            let e387 = {
                                                                let l132 = *base.add(8).cast::<i64>();
                                                                l132
                                                            };
                                                            DbValue::Int8(e387)
                                                        }
                                                        4 => {
                                                            let e387 = {
                                                                let l133 = *base.add(8).cast::<f32>();
                                                                l133
                                                            };
                                                            DbValue::Float4(e387)
                                                        }
                                                        5 => {
                                                            let e387 = {
                                                                let l134 = *base.add(8).cast::<f64>();
                                                                l134
                                                            };
                                                            DbValue::Float8(e387)
                                                        }
                                                        6 => {
                                                            let e387 = {
                                                                let l135 = *base.add(8).cast::<*mut u8>();
                                                                let l136 = *base.add(12).cast::<usize>();
                                                                let len137 = l136;
                                                                let bytes137 = _rt::Vec::from_raw_parts(
                                                                    l135.cast(),
                                                                    len137,
                                                                    len137,
                                                                );
                                                                _rt::string_lift(bytes137)
                                                            };
                                                            DbValue::Numeric(e387)
                                                        }
                                                        7 => {
                                                            let e387 = {
                                                                let l138 = i32::from(*base.add(8).cast::<u8>());
                                                                _rt::bool_lift(l138 as u8)
                                                            };
                                                            DbValue::Boolean(e387)
                                                        }
                                                        8 => {
                                                            let e387 = {
                                                                let l139 = *base.add(8).cast::<*mut u8>();
                                                                let l140 = *base.add(12).cast::<usize>();
                                                                let len141 = l140;
                                                                let bytes141 = _rt::Vec::from_raw_parts(
                                                                    l139.cast(),
                                                                    len141,
                                                                    len141,
                                                                );
                                                                _rt::string_lift(bytes141)
                                                            };
                                                            DbValue::Text(e387)
                                                        }
                                                        9 => {
                                                            let e387 = {
                                                                let l142 = *base.add(8).cast::<*mut u8>();
                                                                let l143 = *base.add(12).cast::<usize>();
                                                                let len144 = l143;
                                                                let bytes144 = _rt::Vec::from_raw_parts(
                                                                    l142.cast(),
                                                                    len144,
                                                                    len144,
                                                                );
                                                                _rt::string_lift(bytes144)
                                                            };
                                                            DbValue::Varchar(e387)
                                                        }
                                                        10 => {
                                                            let e387 = {
                                                                let l145 = *base.add(8).cast::<*mut u8>();
                                                                let l146 = *base.add(12).cast::<usize>();
                                                                let len147 = l146;
                                                                let bytes147 = _rt::Vec::from_raw_parts(
                                                                    l145.cast(),
                                                                    len147,
                                                                    len147,
                                                                );
                                                                _rt::string_lift(bytes147)
                                                            };
                                                            DbValue::Bpchar(e387)
                                                        }
                                                        11 => {
                                                            let e387 = {
                                                                let l148 = *base.add(8).cast::<i32>();
                                                                let l149 = i32::from(*base.add(12).cast::<u8>());
                                                                let l150 = i32::from(*base.add(13).cast::<u8>());
                                                                let l151 = i32::from(*base.add(16).cast::<u8>());
                                                                let l152 = i32::from(*base.add(17).cast::<u8>());
                                                                let l153 = i32::from(*base.add(18).cast::<u8>());
                                                                let l154 = *base.add(20).cast::<i32>();
                                                                super::super::super::golem::rdbms::types::Timestamp {
                                                                    date: super::super::super::golem::rdbms::types::Date {
                                                                        year: l148,
                                                                        month: l149 as u8,
                                                                        day: l150 as u8,
                                                                    },
                                                                    time: super::super::super::golem::rdbms::types::Time {
                                                                        hour: l151 as u8,
                                                                        minute: l152 as u8,
                                                                        second: l153 as u8,
                                                                        nanosecond: l154 as u32,
                                                                    },
                                                                }
                                                            };
                                                            DbValue::Timestamp(e387)
                                                        }
                                                        12 => {
                                                            let e387 = {
                                                                let l155 = *base.add(8).cast::<i32>();
                                                                let l156 = i32::from(*base.add(12).cast::<u8>());
                                                                let l157 = i32::from(*base.add(13).cast::<u8>());
                                                                let l158 = i32::from(*base.add(16).cast::<u8>());
                                                                let l159 = i32::from(*base.add(17).cast::<u8>());
                                                                let l160 = i32::from(*base.add(18).cast::<u8>());
                                                                let l161 = *base.add(20).cast::<i32>();
                                                                let l162 = *base.add(24).cast::<i32>();
                                                                super::super::super::golem::rdbms::types::Timestamptz {
                                                                    timestamp: super::super::super::golem::rdbms::types::Timestamp {
                                                                        date: super::super::super::golem::rdbms::types::Date {
                                                                            year: l155,
                                                                            month: l156 as u8,
                                                                            day: l157 as u8,
                                                                        },
                                                                        time: super::super::super::golem::rdbms::types::Time {
                                                                            hour: l158 as u8,
                                                                            minute: l159 as u8,
                                                                            second: l160 as u8,
                                                                            nanosecond: l161 as u32,
                                                                        },
                                                                    },
                                                                    offset: l162,
                                                                }
                                                            };
                                                            DbValue::Timestamptz(e387)
                                                        }
                                                        13 => {
                                                            let e387 = {
                                                                let l163 = *base.add(8).cast::<i32>();
                                                                let l164 = i32::from(*base.add(12).cast::<u8>());
                                                                let l165 = i32::from(*base.add(13).cast::<u8>());
                                                                super::super::super::golem::rdbms::types::Date {
                                                                    year: l163,
                                                                    month: l164 as u8,
                                                                    day: l165 as u8,
                                                                }
                                                            };
                                                            DbValue::Date(e387)
                                                        }
                                                        14 => {
                                                            let e387 = {
                                                                let l166 = i32::from(*base.add(8).cast::<u8>());
                                                                let l167 = i32::from(*base.add(9).cast::<u8>());
                                                                let l168 = i32::from(*base.add(10).cast::<u8>());
                                                                let l169 = *base.add(12).cast::<i32>();
                                                                super::super::super::golem::rdbms::types::Time {
                                                                    hour: l166 as u8,
                                                                    minute: l167 as u8,
                                                                    second: l168 as u8,
                                                                    nanosecond: l169 as u32,
                                                                }
                                                            };
                                                            DbValue::Time(e387)
                                                        }
                                                        15 => {
                                                            let e387 = {
                                                                let l170 = i32::from(*base.add(8).cast::<u8>());
                                                                let l171 = i32::from(*base.add(9).cast::<u8>());
                                                                let l172 = i32::from(*base.add(10).cast::<u8>());
                                                                let l173 = *base.add(12).cast::<i32>();
                                                                let l174 = *base.add(16).cast::<i32>();
                                                                super::super::super::golem::rdbms::types::Timetz {
                                                                    time: super::super::super::golem::rdbms::types::Time {
                                                                        hour: l170 as u8,
                                                                        minute: l171 as u8,
                                                                        second: l172 as u8,
                                                                        nanosecond: l173 as u32,
                                                                    },
                                                                    offset: l174,
                                                                }
                                                            };
                                                            DbValue::Timetz(e387)
                                                        }
                                                        16 => {
                                                            let e387 = {
                                                                let l175 = *base.add(8).cast::<i32>();
                                                                let l176 = *base.add(12).cast::<i32>();
                                                                let l177 = *base.add(16).cast::<i64>();
                                                                Interval {
                                                                    months: l175,
                                                                    days: l176,
                                                                    microseconds: l177,
                                                                }
                                                            };
                                                            DbValue::Interval(e387)
                                                        }
                                                        17 => {
                                                            let e387 = {
                                                                let l178 = *base.add(8).cast::<*mut u8>();
                                                                let l179 = *base.add(12).cast::<usize>();
                                                                let len180 = l179;
                                                                _rt::Vec::from_raw_parts(l178.cast(), len180, len180)
                                                            };
                                                            DbValue::Bytea(e387)
                                                        }
                                                        18 => {
                                                            let e387 = {
                                                                let l181 = *base.add(8).cast::<*mut u8>();
                                                                let l182 = *base.add(12).cast::<usize>();
                                                                let len183 = l182;
                                                                let bytes183 = _rt::Vec::from_raw_parts(
                                                                    l181.cast(),
                                                                    len183,
                                                                    len183,
                                                                );
                                                                _rt::string_lift(bytes183)
                                                            };
                                                            DbValue::Json(e387)
                                                        }
                                                        19 => {
                                                            let e387 = {
                                                                let l184 = *base.add(8).cast::<*mut u8>();
                                                                let l185 = *base.add(12).cast::<usize>();
                                                                let len186 = l185;
                                                                let bytes186 = _rt::Vec::from_raw_parts(
                                                                    l184.cast(),
                                                                    len186,
                                                                    len186,
                                                                );
                                                                _rt::string_lift(bytes186)
                                                            };
                                                            DbValue::Jsonb(e387)
                                                        }
                                                        20 => {
                                                            let e387 = {
                                                                let l187 = *base.add(8).cast::<*mut u8>();
                                                                let l188 = *base.add(12).cast::<usize>();
                                                                let len189 = l188;
                                                                let bytes189 = _rt::Vec::from_raw_parts(
                                                                    l187.cast(),
                                                                    len189,
                                                                    len189,
                                                                );
                                                                _rt::string_lift(bytes189)
                                                            };
                                                            DbValue::Jsonpath(e387)
                                                        }
                                                        21 => {
                                                            let e387 = {
                                                                let l190 = *base.add(8).cast::<*mut u8>();
                                                                let l191 = *base.add(12).cast::<usize>();
                                                                let len192 = l191;
                                                                let bytes192 = _rt::Vec::from_raw_parts(
                                                                    l190.cast(),
                                                                    len192,
                                                                    len192,
                                                                );
                                                                _rt::string_lift(bytes192)
                                                            };
                                                            DbValue::Xml(e387)
                                                        }
                                                        22 => {
                                                            let e387 = {
                                                                let l193 = *base.add(8).cast::<i64>();
                                                                let l194 = *base.add(16).cast::<i64>();
                                                                super::super::super::golem::rdbms::types::Uuid {
                                                                    high_bits: l193 as u64,
                                                                    low_bits: l194 as u64,
                                                                }
                                                            };
                                                            DbValue::Uuid(e387)
                                                        }
                                                        23 => {
                                                            let e387 = {
                                                                let l195 = i32::from(*base.add(8).cast::<u8>());
                                                                use super::super::super::golem::rdbms::types::IpAddress as V208;
                                                                let v208 = match l195 {
                                                                    0 => {
                                                                        let e208 = {
                                                                            let l196 = i32::from(*base.add(10).cast::<u8>());
                                                                            let l197 = i32::from(*base.add(11).cast::<u8>());
                                                                            let l198 = i32::from(*base.add(12).cast::<u8>());
                                                                            let l199 = i32::from(*base.add(13).cast::<u8>());
                                                                            (l196 as u8, l197 as u8, l198 as u8, l199 as u8)
                                                                        };
                                                                        V208::Ipv4(e208)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                                        let e208 = {
                                                                            let l200 = i32::from(*base.add(10).cast::<u16>());
                                                                            let l201 = i32::from(*base.add(12).cast::<u16>());
                                                                            let l202 = i32::from(*base.add(14).cast::<u16>());
                                                                            let l203 = i32::from(*base.add(16).cast::<u16>());
                                                                            let l204 = i32::from(*base.add(18).cast::<u16>());
                                                                            let l205 = i32::from(*base.add(20).cast::<u16>());
                                                                            let l206 = i32::from(*base.add(22).cast::<u16>());
                                                                            let l207 = i32::from(*base.add(24).cast::<u16>());
                                                                            (
                                                                                l200 as u16,
                                                                                l201 as u16,
                                                                                l202 as u16,
                                                                                l203 as u16,
                                                                                l204 as u16,
                                                                                l205 as u16,
                                                                                l206 as u16,
                                                                                l207 as u16,
                                                                            )
                                                                        };
                                                                        V208::Ipv6(e208)
                                                                    }
                                                                };
                                                                v208
                                                            };
                                                            DbValue::Inet(e387)
                                                        }
                                                        24 => {
                                                            let e387 = {
                                                                let l209 = i32::from(*base.add(8).cast::<u8>());
                                                                use super::super::super::golem::rdbms::types::IpAddress as V222;
                                                                let v222 = match l209 {
                                                                    0 => {
                                                                        let e222 = {
                                                                            let l210 = i32::from(*base.add(10).cast::<u8>());
                                                                            let l211 = i32::from(*base.add(11).cast::<u8>());
                                                                            let l212 = i32::from(*base.add(12).cast::<u8>());
                                                                            let l213 = i32::from(*base.add(13).cast::<u8>());
                                                                            (l210 as u8, l211 as u8, l212 as u8, l213 as u8)
                                                                        };
                                                                        V222::Ipv4(e222)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                                        let e222 = {
                                                                            let l214 = i32::from(*base.add(10).cast::<u16>());
                                                                            let l215 = i32::from(*base.add(12).cast::<u16>());
                                                                            let l216 = i32::from(*base.add(14).cast::<u16>());
                                                                            let l217 = i32::from(*base.add(16).cast::<u16>());
                                                                            let l218 = i32::from(*base.add(18).cast::<u16>());
                                                                            let l219 = i32::from(*base.add(20).cast::<u16>());
                                                                            let l220 = i32::from(*base.add(22).cast::<u16>());
                                                                            let l221 = i32::from(*base.add(24).cast::<u16>());
                                                                            (
                                                                                l214 as u16,
                                                                                l215 as u16,
                                                                                l216 as u16,
                                                                                l217 as u16,
                                                                                l218 as u16,
                                                                                l219 as u16,
                                                                                l220 as u16,
                                                                                l221 as u16,
                                                                            )
                                                                        };
                                                                        V222::Ipv6(e222)
                                                                    }
                                                                };
                                                                v222
                                                            };
                                                            DbValue::Cidr(e387)
                                                        }
                                                        25 => {
                                                            let e387 = {
                                                                let l223 = i32::from(*base.add(8).cast::<u8>());
                                                                let l224 = i32::from(*base.add(9).cast::<u8>());
                                                                let l225 = i32::from(*base.add(10).cast::<u8>());
                                                                let l226 = i32::from(*base.add(11).cast::<u8>());
                                                                let l227 = i32::from(*base.add(12).cast::<u8>());
                                                                let l228 = i32::from(*base.add(13).cast::<u8>());
                                                                super::super::super::golem::rdbms::types::MacAddress {
                                                                    octets: (
                                                                        l223 as u8,
                                                                        l224 as u8,
                                                                        l225 as u8,
                                                                        l226 as u8,
                                                                        l227 as u8,
                                                                        l228 as u8,
                                                                    ),
                                                                }
                                                            };
                                                            DbValue::Macaddr(e387)
                                                        }
                                                        26 => {
                                                            let e387 = {
                                                                let l229 = *base.add(8).cast::<*mut u8>();
                                                                let l230 = *base.add(12).cast::<usize>();
                                                                let base232 = l229;
                                                                let len232 = l230;
                                                                let mut result232 = _rt::Vec::with_capacity(len232);
                                                                for i in 0..len232 {
                                                                    let base = base232.add(i * 1);
                                                                    let e232 = {
                                                                        let l231 = i32::from(*base.add(0).cast::<u8>());
                                                                        _rt::bool_lift(l231 as u8)
                                                                    };
                                                                    result232.push(e232);
                                                                }
                                                                _rt::cabi_dealloc(base232, len232 * 1, 1);
                                                                result232
                                                            };
                                                            DbValue::Bit(e387)
                                                        }
                                                        27 => {
                                                            let e387 = {
                                                                let l233 = *base.add(8).cast::<*mut u8>();
                                                                let l234 = *base.add(12).cast::<usize>();
                                                                let base236 = l233;
                                                                let len236 = l234;
                                                                let mut result236 = _rt::Vec::with_capacity(len236);
                                                                for i in 0..len236 {
                                                                    let base = base236.add(i * 1);
                                                                    let e236 = {
                                                                        let l235 = i32::from(*base.add(0).cast::<u8>());
                                                                        _rt::bool_lift(l235 as u8)
                                                                    };
                                                                    result236.push(e236);
                                                                }
                                                                _rt::cabi_dealloc(base236, len236 * 1, 1);
                                                                result236
                                                            };
                                                            DbValue::Varbit(e387)
                                                        }
                                                        28 => {
                                                            let e387 = {
                                                                let l237 = i32::from(*base.add(8).cast::<u8>());
                                                                let v240 = match l237 {
                                                                    0 => {
                                                                        let e240 = {
                                                                            let l238 = *base.add(12).cast::<i32>();
                                                                            l238
                                                                        };
                                                                        Int4bound::Included(e240)
                                                                    }
                                                                    1 => {
                                                                        let e240 = {
                                                                            let l239 = *base.add(12).cast::<i32>();
                                                                            l239
                                                                        };
                                                                        Int4bound::Excluded(e240)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                        Int4bound::Unbounded
                                                                    }
                                                                };
                                                                let l241 = i32::from(*base.add(16).cast::<u8>());
                                                                let v244 = match l241 {
                                                                    0 => {
                                                                        let e244 = {
                                                                            let l242 = *base.add(20).cast::<i32>();
                                                                            l242
                                                                        };
                                                                        Int4bound::Included(e244)
                                                                    }
                                                                    1 => {
                                                                        let e244 = {
                                                                            let l243 = *base.add(20).cast::<i32>();
                                                                            l243
                                                                        };
                                                                        Int4bound::Excluded(e244)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                        Int4bound::Unbounded
                                                                    }
                                                                };
                                                                Int4range {
                                                                    start: v240,
                                                                    end: v244,
                                                                }
                                                            };
                                                            DbValue::Int4range(e387)
                                                        }
                                                        29 => {
                                                            let e387 = {
                                                                let l245 = i32::from(*base.add(8).cast::<u8>());
                                                                let v248 = match l245 {
                                                                    0 => {
                                                                        let e248 = {
                                                                            let l246 = *base.add(16).cast::<i64>();
                                                                            l246
                                                                        };
                                                                        Int8bound::Included(e248)
                                                                    }
                                                                    1 => {
                                                                        let e248 = {
                                                                            let l247 = *base.add(16).cast::<i64>();
                                                                            l247
                                                                        };
                                                                        Int8bound::Excluded(e248)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                        Int8bound::Unbounded
                                                                    }
                                                                };
                                                                let l249 = i32::from(*base.add(24).cast::<u8>());
                                                                let v252 = match l249 {
                                                                    0 => {
                                                                        let e252 = {
                                                                            let l250 = *base.add(32).cast::<i64>();
                                                                            l250
                                                                        };
                                                                        Int8bound::Included(e252)
                                                                    }
                                                                    1 => {
                                                                        let e252 = {
                                                                            let l251 = *base.add(32).cast::<i64>();
                                                                            l251
                                                                        };
                                                                        Int8bound::Excluded(e252)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                        Int8bound::Unbounded
                                                                    }
                                                                };
                                                                Int8range {
                                                                    start: v248,
                                                                    end: v252,
                                                                }
                                                            };
                                                            DbValue::Int8range(e387)
                                                        }
                                                        30 => {
                                                            let e387 = {
                                                                let l253 = i32::from(*base.add(8).cast::<u8>());
                                                                let v260 = match l253 {
                                                                    0 => {
                                                                        let e260 = {
                                                                            let l254 = *base.add(12).cast::<*mut u8>();
                                                                            let l255 = *base.add(16).cast::<usize>();
                                                                            let len256 = l255;
                                                                            let bytes256 = _rt::Vec::from_raw_parts(
                                                                                l254.cast(),
                                                                                len256,
                                                                                len256,
                                                                            );
                                                                            _rt::string_lift(bytes256)
                                                                        };
                                                                        Numbound::Included(e260)
                                                                    }
                                                                    1 => {
                                                                        let e260 = {
                                                                            let l257 = *base.add(12).cast::<*mut u8>();
                                                                            let l258 = *base.add(16).cast::<usize>();
                                                                            let len259 = l258;
                                                                            let bytes259 = _rt::Vec::from_raw_parts(
                                                                                l257.cast(),
                                                                                len259,
                                                                                len259,
                                                                            );
                                                                            _rt::string_lift(bytes259)
                                                                        };
                                                                        Numbound::Excluded(e260)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                        Numbound::Unbounded
                                                                    }
                                                                };
                                                                let l261 = i32::from(*base.add(20).cast::<u8>());
                                                                let v268 = match l261 {
                                                                    0 => {
                                                                        let e268 = {
                                                                            let l262 = *base.add(24).cast::<*mut u8>();
                                                                            let l263 = *base.add(28).cast::<usize>();
                                                                            let len264 = l263;
                                                                            let bytes264 = _rt::Vec::from_raw_parts(
                                                                                l262.cast(),
                                                                                len264,
                                                                                len264,
                                                                            );
                                                                            _rt::string_lift(bytes264)
                                                                        };
                                                                        Numbound::Included(e268)
                                                                    }
                                                                    1 => {
                                                                        let e268 = {
                                                                            let l265 = *base.add(24).cast::<*mut u8>();
                                                                            let l266 = *base.add(28).cast::<usize>();
                                                                            let len267 = l266;
                                                                            let bytes267 = _rt::Vec::from_raw_parts(
                                                                                l265.cast(),
                                                                                len267,
                                                                                len267,
                                                                            );
                                                                            _rt::string_lift(bytes267)
                                                                        };
                                                                        Numbound::Excluded(e268)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                        Numbound::Unbounded
                                                                    }
                                                                };
                                                                Numrange { start: v260, end: v268 }
                                                            };
                                                            DbValue::Numrange(e387)
                                                        }
                                                        31 => {
                                                            let e387 = {
                                                                let l269 = i32::from(*base.add(8).cast::<u8>());
                                                                let v284 = match l269 {
                                                                    0 => {
                                                                        let e284 = {
                                                                            let l270 = *base.add(12).cast::<i32>();
                                                                            let l271 = i32::from(*base.add(16).cast::<u8>());
                                                                            let l272 = i32::from(*base.add(17).cast::<u8>());
                                                                            let l273 = i32::from(*base.add(20).cast::<u8>());
                                                                            let l274 = i32::from(*base.add(21).cast::<u8>());
                                                                            let l275 = i32::from(*base.add(22).cast::<u8>());
                                                                            let l276 = *base.add(24).cast::<i32>();
                                                                            super::super::super::golem::rdbms::types::Timestamp {
                                                                                date: super::super::super::golem::rdbms::types::Date {
                                                                                    year: l270,
                                                                                    month: l271 as u8,
                                                                                    day: l272 as u8,
                                                                                },
                                                                                time: super::super::super::golem::rdbms::types::Time {
                                                                                    hour: l273 as u8,
                                                                                    minute: l274 as u8,
                                                                                    second: l275 as u8,
                                                                                    nanosecond: l276 as u32,
                                                                                },
                                                                            }
                                                                        };
                                                                        Tsbound::Included(e284)
                                                                    }
                                                                    1 => {
                                                                        let e284 = {
                                                                            let l277 = *base.add(12).cast::<i32>();
                                                                            let l278 = i32::from(*base.add(16).cast::<u8>());
                                                                            let l279 = i32::from(*base.add(17).cast::<u8>());
                                                                            let l280 = i32::from(*base.add(20).cast::<u8>());
                                                                            let l281 = i32::from(*base.add(21).cast::<u8>());
                                                                            let l282 = i32::from(*base.add(22).cast::<u8>());
                                                                            let l283 = *base.add(24).cast::<i32>();
                                                                            super::super::super::golem::rdbms::types::Timestamp {
                                                                                date: super::super::super::golem::rdbms::types::Date {
                                                                                    year: l277,
                                                                                    month: l278 as u8,
                                                                                    day: l279 as u8,
                                                                                },
                                                                                time: super::super::super::golem::rdbms::types::Time {
                                                                                    hour: l280 as u8,
                                                                                    minute: l281 as u8,
                                                                                    second: l282 as u8,
                                                                                    nanosecond: l283 as u32,
                                                                                },
                                                                            }
                                                                        };
                                                                        Tsbound::Excluded(e284)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                        Tsbound::Unbounded
                                                                    }
                                                                };
                                                                let l285 = i32::from(*base.add(28).cast::<u8>());
                                                                let v300 = match l285 {
                                                                    0 => {
                                                                        let e300 = {
                                                                            let l286 = *base.add(32).cast::<i32>();
                                                                            let l287 = i32::from(*base.add(36).cast::<u8>());
                                                                            let l288 = i32::from(*base.add(37).cast::<u8>());
                                                                            let l289 = i32::from(*base.add(40).cast::<u8>());
                                                                            let l290 = i32::from(*base.add(41).cast::<u8>());
                                                                            let l291 = i32::from(*base.add(42).cast::<u8>());
                                                                            let l292 = *base.add(44).cast::<i32>();
                                                                            super::super::super::golem::rdbms::types::Timestamp {
                                                                                date: super::super::super::golem::rdbms::types::Date {
                                                                                    year: l286,
                                                                                    month: l287 as u8,
                                                                                    day: l288 as u8,
                                                                                },
                                                                                time: super::super::super::golem::rdbms::types::Time {
                                                                                    hour: l289 as u8,
                                                                                    minute: l290 as u8,
                                                                                    second: l291 as u8,
                                                                                    nanosecond: l292 as u32,
                                                                                },
                                                                            }
                                                                        };
                                                                        Tsbound::Included(e300)
                                                                    }
                                                                    1 => {
                                                                        let e300 = {
                                                                            let l293 = *base.add(32).cast::<i32>();
                                                                            let l294 = i32::from(*base.add(36).cast::<u8>());
                                                                            let l295 = i32::from(*base.add(37).cast::<u8>());
                                                                            let l296 = i32::from(*base.add(40).cast::<u8>());
                                                                            let l297 = i32::from(*base.add(41).cast::<u8>());
                                                                            let l298 = i32::from(*base.add(42).cast::<u8>());
                                                                            let l299 = *base.add(44).cast::<i32>();
                                                                            super::super::super::golem::rdbms::types::Timestamp {
                                                                                date: super::super::super::golem::rdbms::types::Date {
                                                                                    year: l293,
                                                                                    month: l294 as u8,
                                                                                    day: l295 as u8,
                                                                                },
                                                                                time: super::super::super::golem::rdbms::types::Time {
                                                                                    hour: l296 as u8,
                                                                                    minute: l297 as u8,
                                                                                    second: l298 as u8,
                                                                                    nanosecond: l299 as u32,
                                                                                },
                                                                            }
                                                                        };
                                                                        Tsbound::Excluded(e300)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                        Tsbound::Unbounded
                                                                    }
                                                                };
                                                                Tsrange { start: v284, end: v300 }
                                                            };
                                                            DbValue::Tsrange(e387)
                                                        }
                                                        32 => {
                                                            let e387 = {
                                                                let l301 = i32::from(*base.add(8).cast::<u8>());
                                                                let v318 = match l301 {
                                                                    0 => {
                                                                        let e318 = {
                                                                            let l302 = *base.add(12).cast::<i32>();
                                                                            let l303 = i32::from(*base.add(16).cast::<u8>());
                                                                            let l304 = i32::from(*base.add(17).cast::<u8>());
                                                                            let l305 = i32::from(*base.add(20).cast::<u8>());
                                                                            let l306 = i32::from(*base.add(21).cast::<u8>());
                                                                            let l307 = i32::from(*base.add(22).cast::<u8>());
                                                                            let l308 = *base.add(24).cast::<i32>();
                                                                            let l309 = *base.add(28).cast::<i32>();
                                                                            super::super::super::golem::rdbms::types::Timestamptz {
                                                                                timestamp: super::super::super::golem::rdbms::types::Timestamp {
                                                                                    date: super::super::super::golem::rdbms::types::Date {
                                                                                        year: l302,
                                                                                        month: l303 as u8,
                                                                                        day: l304 as u8,
                                                                                    },
                                                                                    time: super::super::super::golem::rdbms::types::Time {
                                                                                        hour: l305 as u8,
                                                                                        minute: l306 as u8,
                                                                                        second: l307 as u8,
                                                                                        nanosecond: l308 as u32,
                                                                                    },
                                                                                },
                                                                                offset: l309,
                                                                            }
                                                                        };
                                                                        Tstzbound::Included(e318)
                                                                    }
                                                                    1 => {
                                                                        let e318 = {
                                                                            let l310 = *base.add(12).cast::<i32>();
                                                                            let l311 = i32::from(*base.add(16).cast::<u8>());
                                                                            let l312 = i32::from(*base.add(17).cast::<u8>());
                                                                            let l313 = i32::from(*base.add(20).cast::<u8>());
                                                                            let l314 = i32::from(*base.add(21).cast::<u8>());
                                                                            let l315 = i32::from(*base.add(22).cast::<u8>());
                                                                            let l316 = *base.add(24).cast::<i32>();
                                                                            let l317 = *base.add(28).cast::<i32>();
                                                                            super::super::super::golem::rdbms::types::Timestamptz {
                                                                                timestamp: super::super::super::golem::rdbms::types::Timestamp {
                                                                                    date: super::super::super::golem::rdbms::types::Date {
                                                                                        year: l310,
                                                                                        month: l311 as u8,
                                                                                        day: l312 as u8,
                                                                                    },
                                                                                    time: super::super::super::golem::rdbms::types::Time {
                                                                                        hour: l313 as u8,
                                                                                        minute: l314 as u8,
                                                                                        second: l315 as u8,
                                                                                        nanosecond: l316 as u32,
                                                                                    },
                                                                                },
                                                                                offset: l317,
                                                                            }
                                                                        };
                                                                        Tstzbound::Excluded(e318)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                        Tstzbound::Unbounded
                                                                    }
                                                                };
                                                                let l319 = i32::from(*base.add(32).cast::<u8>());
                                                                let v336 = match l319 {
                                                                    0 => {
                                                                        let e336 = {
                                                                            let l320 = *base.add(36).cast::<i32>();
                                                                            let l321 = i32::from(*base.add(40).cast::<u8>());
                                                                            let l322 = i32::from(*base.add(41).cast::<u8>());
                                                                            let l323 = i32::from(*base.add(44).cast::<u8>());
                                                                            let l324 = i32::from(*base.add(45).cast::<u8>());
                                                                            let l325 = i32::from(*base.add(46).cast::<u8>());
                                                                            let l326 = *base.add(48).cast::<i32>();
                                                                            let l327 = *base.add(52).cast::<i32>();
                                                                            super::super::super::golem::rdbms::types::Timestamptz {
                                                                                timestamp: super::super::super::golem::rdbms::types::Timestamp {
                                                                                    date: super::super::super::golem::rdbms::types::Date {
                                                                                        year: l320,
                                                                                        month: l321 as u8,
                                                                                        day: l322 as u8,
                                                                                    },
                                                                                    time: super::super::super::golem::rdbms::types::Time {
                                                                                        hour: l323 as u8,
                                                                                        minute: l324 as u8,
                                                                                        second: l325 as u8,
                                                                                        nanosecond: l326 as u32,
                                                                                    },
                                                                                },
                                                                                offset: l327,
                                                                            }
                                                                        };
                                                                        Tstzbound::Included(e336)
                                                                    }
                                                                    1 => {
                                                                        let e336 = {
                                                                            let l328 = *base.add(36).cast::<i32>();
                                                                            let l329 = i32::from(*base.add(40).cast::<u8>());
                                                                            let l330 = i32::from(*base.add(41).cast::<u8>());
                                                                            let l331 = i32::from(*base.add(44).cast::<u8>());
                                                                            let l332 = i32::from(*base.add(45).cast::<u8>());
                                                                            let l333 = i32::from(*base.add(46).cast::<u8>());
                                                                            let l334 = *base.add(48).cast::<i32>();
                                                                            let l335 = *base.add(52).cast::<i32>();
                                                                            super::super::super::golem::rdbms::types::Timestamptz {
                                                                                timestamp: super::super::super::golem::rdbms::types::Timestamp {
                                                                                    date: super::super::super::golem::rdbms::types::Date {
                                                                                        year: l328,
                                                                                        month: l329 as u8,
                                                                                        day: l330 as u8,
                                                                                    },
                                                                                    time: super::super::super::golem::rdbms::types::Time {
                                                                                        hour: l331 as u8,
                                                                                        minute: l332 as u8,
                                                                                        second: l333 as u8,
                                                                                        nanosecond: l334 as u32,
                                                                                    },
                                                                                },
                                                                                offset: l335,
                                                                            }
                                                                        };
                                                                        Tstzbound::Excluded(e336)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                        Tstzbound::Unbounded
                                                                    }
                                                                };
                                                                Tstzrange {
                                                                    start: v318,
                                                                    end: v336,
                                                                }
                                                            };
                                                            DbValue::Tstzrange(e387)
                                                        }
                                                        33 => {
                                                            let e387 = {
                                                                let l337 = i32::from(*base.add(8).cast::<u8>());
                                                                let v344 = match l337 {
                                                                    0 => {
                                                                        let e344 = {
                                                                            let l338 = *base.add(12).cast::<i32>();
                                                                            let l339 = i32::from(*base.add(16).cast::<u8>());
                                                                            let l340 = i32::from(*base.add(17).cast::<u8>());
                                                                            super::super::super::golem::rdbms::types::Date {
                                                                                year: l338,
                                                                                month: l339 as u8,
                                                                                day: l340 as u8,
                                                                            }
                                                                        };
                                                                        Datebound::Included(e344)
                                                                    }
                                                                    1 => {
                                                                        let e344 = {
                                                                            let l341 = *base.add(12).cast::<i32>();
                                                                            let l342 = i32::from(*base.add(16).cast::<u8>());
                                                                            let l343 = i32::from(*base.add(17).cast::<u8>());
                                                                            super::super::super::golem::rdbms::types::Date {
                                                                                year: l341,
                                                                                month: l342 as u8,
                                                                                day: l343 as u8,
                                                                            }
                                                                        };
                                                                        Datebound::Excluded(e344)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                        Datebound::Unbounded
                                                                    }
                                                                };
                                                                let l345 = i32::from(*base.add(20).cast::<u8>());
                                                                let v352 = match l345 {
                                                                    0 => {
                                                                        let e352 = {
                                                                            let l346 = *base.add(24).cast::<i32>();
                                                                            let l347 = i32::from(*base.add(28).cast::<u8>());
                                                                            let l348 = i32::from(*base.add(29).cast::<u8>());
                                                                            super::super::super::golem::rdbms::types::Date {
                                                                                year: l346,
                                                                                month: l347 as u8,
                                                                                day: l348 as u8,
                                                                            }
                                                                        };
                                                                        Datebound::Included(e352)
                                                                    }
                                                                    1 => {
                                                                        let e352 = {
                                                                            let l349 = *base.add(24).cast::<i32>();
                                                                            let l350 = i32::from(*base.add(28).cast::<u8>());
                                                                            let l351 = i32::from(*base.add(29).cast::<u8>());
                                                                            super::super::super::golem::rdbms::types::Date {
                                                                                year: l349,
                                                                                month: l350 as u8,
                                                                                day: l351 as u8,
                                                                            }
                                                                        };
                                                                        Datebound::Excluded(e352)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                        Datebound::Unbounded
                                                                    }
                                                                };
                                                                Daterange {
                                                                    start: v344,
                                                                    end: v352,
                                                                }
                                                            };
                                                            DbValue::Daterange(e387)
                                                        }
                                                        34 => {
                                                            let e387 = {
                                                                let l353 = *base.add(8).cast::<i64>();
                                                                l353
                                                            };
                                                            DbValue::Money(e387)
                                                        }
                                                        35 => {
                                                            let e387 = {
                                                                let l354 = *base.add(8).cast::<i32>();
                                                                l354 as u32
                                                            };
                                                            DbValue::Oid(e387)
                                                        }
                                                        36 => {
                                                            let e387 = {
                                                                let l355 = *base.add(8).cast::<*mut u8>();
                                                                let l356 = *base.add(12).cast::<usize>();
                                                                let len357 = l356;
                                                                let bytes357 = _rt::Vec::from_raw_parts(
                                                                    l355.cast(),
                                                                    len357,
                                                                    len357,
                                                                );
                                                                let l358 = *base.add(16).cast::<*mut u8>();
                                                                let l359 = *base.add(20).cast::<usize>();
                                                                let len360 = l359;
                                                                let bytes360 = _rt::Vec::from_raw_parts(
                                                                    l358.cast(),
                                                                    len360,
                                                                    len360,
                                                                );
                                                                Enumeration {
                                                                    name: _rt::string_lift(bytes357),
                                                                    value: _rt::string_lift(bytes360),
                                                                }
                                                            };
                                                            DbValue::Enumeration(e387)
                                                        }
                                                        37 => {
                                                            let e387 = {
                                                                let l361 = *base.add(8).cast::<*mut u8>();
                                                                let l362 = *base.add(12).cast::<usize>();
                                                                let len363 = l362;
                                                                let bytes363 = _rt::Vec::from_raw_parts(
                                                                    l361.cast(),
                                                                    len363,
                                                                    len363,
                                                                );
                                                                let l364 = *base.add(16).cast::<*mut u8>();
                                                                let l365 = *base.add(20).cast::<usize>();
                                                                let base367 = l364;
                                                                let len367 = l365;
                                                                let mut result367 = _rt::Vec::with_capacity(len367);
                                                                for i in 0..len367 {
                                                                    let base = base367.add(i * 4);
                                                                    let e367 = {
                                                                        let l366 = *base.add(0).cast::<i32>();
                                                                        LazyDbValue::from_handle(l366 as u32)
                                                                    };
                                                                    result367.push(e367);
                                                                }
                                                                _rt::cabi_dealloc(base367, len367 * 4, 4);
                                                                Composite {
                                                                    name: _rt::string_lift(bytes363),
                                                                    values: result367,
                                                                }
                                                            };
                                                            DbValue::Composite(e387)
                                                        }
                                                        38 => {
                                                            let e387 = {
                                                                let l368 = *base.add(8).cast::<*mut u8>();
                                                                let l369 = *base.add(12).cast::<usize>();
                                                                let len370 = l369;
                                                                let bytes370 = _rt::Vec::from_raw_parts(
                                                                    l368.cast(),
                                                                    len370,
                                                                    len370,
                                                                );
                                                                let l371 = *base.add(16).cast::<i32>();
                                                                Domain {
                                                                    name: _rt::string_lift(bytes370),
                                                                    value: LazyDbValue::from_handle(l371 as u32),
                                                                }
                                                            };
                                                            DbValue::Domain(e387)
                                                        }
                                                        39 => {
                                                            let e387 = {
                                                                let l372 = *base.add(8).cast::<*mut u8>();
                                                                let l373 = *base.add(12).cast::<usize>();
                                                                let base375 = l372;
                                                                let len375 = l373;
                                                                let mut result375 = _rt::Vec::with_capacity(len375);
                                                                for i in 0..len375 {
                                                                    let base = base375.add(i * 4);
                                                                    let e375 = {
                                                                        let l374 = *base.add(0).cast::<i32>();
                                                                        LazyDbValue::from_handle(l374 as u32)
                                                                    };
                                                                    result375.push(e375);
                                                                }
                                                                _rt::cabi_dealloc(base375, len375 * 4, 4);
                                                                result375
                                                            };
                                                            DbValue::Array(e387)
                                                        }
                                                        40 => {
                                                            let e387 = {
                                                                let l376 = *base.add(8).cast::<*mut u8>();
                                                                let l377 = *base.add(12).cast::<usize>();
                                                                let len378 = l377;
                                                                let bytes378 = _rt::Vec::from_raw_parts(
                                                                    l376.cast(),
                                                                    len378,
                                                                    len378,
                                                                );
                                                                let l379 = i32::from(*base.add(16).cast::<u8>());
                                                                let v382 = match l379 {
                                                                    0 => {
                                                                        let e382 = {
                                                                            let l380 = *base.add(20).cast::<i32>();
                                                                            LazyDbValue::from_handle(l380 as u32)
                                                                        };
                                                                        ValueBound::Included(e382)
                                                                    }
                                                                    1 => {
                                                                        let e382 = {
                                                                            let l381 = *base.add(20).cast::<i32>();
                                                                            LazyDbValue::from_handle(l381 as u32)
                                                                        };
                                                                        ValueBound::Excluded(e382)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                        ValueBound::Unbounded
                                                                    }
                                                                };
                                                                let l383 = i32::from(*base.add(24).cast::<u8>());
                                                                let v386 = match l383 {
                                                                    0 => {
                                                                        let e386 = {
                                                                            let l384 = *base.add(28).cast::<i32>();
                                                                            LazyDbValue::from_handle(l384 as u32)
                                                                        };
                                                                        ValueBound::Included(e386)
                                                                    }
                                                                    1 => {
                                                                        let e386 = {
                                                                            let l385 = *base.add(28).cast::<i32>();
                                                                            LazyDbValue::from_handle(l385 as u32)
                                                                        };
                                                                        ValueBound::Excluded(e386)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                        ValueBound::Unbounded
                                                                    }
                                                                };
                                                                Range {
                                                                    name: _rt::string_lift(bytes378),
                                                                    value: ValuesRange {
                                                                        start: v382,
                                                                        end: v386,
                                                                    },
                                                                }
                                                            };
                                                            DbValue::Range(e387)
                                                        }
                                                        n => {
                                                            debug_assert_eq!(n, 41, "invalid enum discriminant");
                                                            DbValue::Null
                                                        }
                                                    };
                                                    v387
                                                };
                                                result388.push(e388);
                                            }
                                            _rt::cabi_dealloc(base388, len388 * 56, 8);
                                            DbRow { values: result388 }
                                        };
                                        result389.push(e389);
                                    }
                                    _rt::cabi_dealloc(base389, len389 * 8, 4);
                                    DbResult {
                                        columns: result123,
                                        rows: result389,
                                    }
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l390 = i32::from(*ptr88.add(4).cast::<u8>());
                                    let v406 = match l390 {
                                        0 => {
                                            let e406 = {
                                                let l391 = *ptr88.add(8).cast::<*mut u8>();
                                                let l392 = *ptr88.add(12).cast::<usize>();
                                                let len393 = l392;
                                                let bytes393 = _rt::Vec::from_raw_parts(
                                                    l391.cast(),
                                                    len393,
                                                    len393,
                                                );
                                                _rt::string_lift(bytes393)
                                            };
                                            Error::ConnectionFailure(e406)
                                        }
                                        1 => {
                                            let e406 = {
                                                let l394 = *ptr88.add(8).cast::<*mut u8>();
                                                let l395 = *ptr88.add(12).cast::<usize>();
                                                let len396 = l395;
                                                let bytes396 = _rt::Vec::from_raw_parts(
                                                    l394.cast(),
                                                    len396,
                                                    len396,
                                                );
                                                _rt::string_lift(bytes396)
                                            };
                                            Error::QueryParameterFailure(e406)
                                        }
                                        2 => {
                                            let e406 = {
                                                let l397 = *ptr88.add(8).cast::<*mut u8>();
                                                let l398 = *ptr88.add(12).cast::<usize>();
                                                let len399 = l398;
                                                let bytes399 = _rt::Vec::from_raw_parts(
                                                    l397.cast(),
                                                    len399,
                                                    len399,
                                                );
                                                _rt::string_lift(bytes399)
                                            };
                                            Error::QueryExecutionFailure(e406)
                                        }
                                        3 => {
                                            let e406 = {
                                                let l400 = *ptr88.add(8).cast::<*mut u8>();
                                                let l401 = *ptr88.add(12).cast::<usize>();
                                                let len402 = l401;
                                                let bytes402 = _rt::Vec::from_raw_parts(
                                                    l400.cast(),
                                                    len402,
                                                    len402,
                                                );
                                                _rt::string_lift(bytes402)
                                            };
                                            Error::QueryResponseFailure(e406)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 4, "invalid enum discriminant");
                                            let e406 = {
                                                let l403 = *ptr88.add(8).cast::<*mut u8>();
                                                let l404 = *ptr88.add(12).cast::<usize>();
                                                let len405 = l404;
                                                let bytes405 = _rt::Vec::from_raw_parts(
                                                    l403.cast(),
                                                    len405,
                                                    len405,
                                                );
                                                _rt::string_lift(bytes405)
                                            };
                                            Error::Other(e406)
                                        }
                                    };
                                    v406
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl DbTransaction {
                #[allow(unused_unsafe, clippy::all)]
                pub fn query_stream(
                    &self,
                    statement: &str,
                    params: _rt::Vec<DbValue>,
                ) -> Result<DbResultStream, Error> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 16],
                        );
                        let vec0 = statement;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec87 = &params;
                        let len87 = vec87.len();
                        let layout87 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec87.len() * 56,
                            8,
                        );
                        let result87 = if layout87.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout87).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout87);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec87.into_iter().enumerate() {
                            let base = result87.add(i * 56);
                            {
                                match e {
                                    DbValue::Character(e) => {
                                        *base.add(0).cast::<u8>() = (0i32) as u8;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                    }
                                    DbValue::Int2(e) => {
                                        *base.add(0).cast::<u8>() = (1i32) as u8;
                                        *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                    }
                                    DbValue::Int4(e) => {
                                        *base.add(0).cast::<u8>() = (2i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::Int8(e) => {
                                        *base.add(0).cast::<u8>() = (3i32) as u8;
                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    DbValue::Float4(e) => {
                                        *base.add(0).cast::<u8>() = (4i32) as u8;
                                        *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                    }
                                    DbValue::Float8(e) => {
                                        *base.add(0).cast::<u8>() = (5i32) as u8;
                                        *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                    }
                                    DbValue::Numeric(e) => {
                                        *base.add(0).cast::<u8>() = (6i32) as u8;
                                        let vec1 = e;
                                        let ptr1 = vec1.as_ptr().cast::<u8>();
                                        let len1 = vec1.len();
                                        *base.add(12).cast::<usize>() = len1;
                                        *base.add(8).cast::<*mut u8>() = ptr1.cast_mut();
                                    }
                                    DbValue::Boolean(e) => {
                                        *base.add(0).cast::<u8>() = (7i32) as u8;
                                        *base.add(8).cast::<u8>() = (match e {
                                            true => 1,
                                            false => 0,
                                        }) as u8;
                                    }
                                    DbValue::Text(e) => {
                                        *base.add(0).cast::<u8>() = (8i32) as u8;
                                        let vec2 = e;
                                        let ptr2 = vec2.as_ptr().cast::<u8>();
                                        let len2 = vec2.len();
                                        *base.add(12).cast::<usize>() = len2;
                                        *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                    }
                                    DbValue::Varchar(e) => {
                                        *base.add(0).cast::<u8>() = (9i32) as u8;
                                        let vec3 = e;
                                        let ptr3 = vec3.as_ptr().cast::<u8>();
                                        let len3 = vec3.len();
                                        *base.add(12).cast::<usize>() = len3;
                                        *base.add(8).cast::<*mut u8>() = ptr3.cast_mut();
                                    }
                                    DbValue::Bpchar(e) => {
                                        *base.add(0).cast::<u8>() = (10i32) as u8;
                                        let vec4 = e;
                                        let ptr4 = vec4.as_ptr().cast::<u8>();
                                        let len4 = vec4.len();
                                        *base.add(12).cast::<usize>() = len4;
                                        *base.add(8).cast::<*mut u8>() = ptr4.cast_mut();
                                    }
                                    DbValue::Timestamp(e) => {
                                        *base.add(0).cast::<u8>() = (11i32) as u8;
                                        let super::super::super::golem::rdbms::types::Timestamp {
                                            date: date5,
                                            time: time5,
                                        } = e;
                                        let super::super::super::golem::rdbms::types::Date {
                                            year: year6,
                                            month: month6,
                                            day: day6,
                                        } = date5;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(year6);
                                        *base.add(12).cast::<u8>() = (_rt::as_i32(month6)) as u8;
                                        *base.add(13).cast::<u8>() = (_rt::as_i32(day6)) as u8;
                                        let super::super::super::golem::rdbms::types::Time {
                                            hour: hour7,
                                            minute: minute7,
                                            second: second7,
                                            nanosecond: nanosecond7,
                                        } = time5;
                                        *base.add(16).cast::<u8>() = (_rt::as_i32(hour7)) as u8;
                                        *base.add(17).cast::<u8>() = (_rt::as_i32(minute7)) as u8;
                                        *base.add(18).cast::<u8>() = (_rt::as_i32(second7)) as u8;
                                        *base.add(20).cast::<i32>() = _rt::as_i32(nanosecond7);
                                    }
                                    DbValue::Timestamptz(e) => {
                                        *base.add(0).cast::<u8>() = (12i32) as u8;
                                        let super::super::super::golem::rdbms::types::Timestamptz {
                                            timestamp: timestamp8,
                                            offset: offset8,
                                        } = e;
                                        let super::super::super::golem::rdbms::types::Timestamp {
                                            date: date9,
                                            time: time9,
                                        } = timestamp8;
                                        let super::super::super::golem::rdbms::types::Date {
                                            year: year10,
                                            month: month10,
                                            day: day10,
                                        } = date9;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(year10);
                                        *base.add(12).cast::<u8>() = (_rt::as_i32(month10)) as u8;
                                        *base.add(13).cast::<u8>() = (_rt::as_i32(day10)) as u8;
                                        let super::super::super::golem::rdbms::types::Time {
                                            hour: hour11,
                                            minute: minute11,
                                            second: second11,
                                            nanosecond: nanosecond11,
                                        } = time9;
                                        *base.add(16).cast::<u8>() = (_rt::as_i32(hour11)) as u8;
                                        *base.add(17).cast::<u8>() = (_rt::as_i32(minute11)) as u8;
                                        *base.add(18).cast::<u8>() = (_rt::as_i32(second11)) as u8;
                                        *base.add(20).cast::<i32>() = _rt::as_i32(nanosecond11);
                                        *base.add(24).cast::<i32>() = _rt::as_i32(offset8);
                                    }
                                    DbValue::Date(e) => {
                                        *base.add(0).cast::<u8>() = (13i32) as u8;
                                        let super::super::super::golem::rdbms::types::Date {
                                            year: year12,
                                            month: month12,
                                            day: day12,
                                        } = e;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(year12);
                                        *base.add(12).cast::<u8>() = (_rt::as_i32(month12)) as u8;
                                        *base.add(13).cast::<u8>() = (_rt::as_i32(day12)) as u8;
                                    }
                                    DbValue::Time(e) => {
                                        *base.add(0).cast::<u8>() = (14i32) as u8;
                                        let super::super::super::golem::rdbms::types::Time {
                                            hour: hour13,
                                            minute: minute13,
                                            second: second13,
                                            nanosecond: nanosecond13,
                                        } = e;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(hour13)) as u8;
                                        *base.add(9).cast::<u8>() = (_rt::as_i32(minute13)) as u8;
                                        *base.add(10).cast::<u8>() = (_rt::as_i32(second13)) as u8;
                                        *base.add(12).cast::<i32>() = _rt::as_i32(nanosecond13);
                                    }
                                    DbValue::Timetz(e) => {
                                        *base.add(0).cast::<u8>() = (15i32) as u8;
                                        let super::super::super::golem::rdbms::types::Timetz {
                                            time: time14,
                                            offset: offset14,
                                        } = e;
                                        let super::super::super::golem::rdbms::types::Time {
                                            hour: hour15,
                                            minute: minute15,
                                            second: second15,
                                            nanosecond: nanosecond15,
                                        } = time14;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(hour15)) as u8;
                                        *base.add(9).cast::<u8>() = (_rt::as_i32(minute15)) as u8;
                                        *base.add(10).cast::<u8>() = (_rt::as_i32(second15)) as u8;
                                        *base.add(12).cast::<i32>() = _rt::as_i32(nanosecond15);
                                        *base.add(16).cast::<i32>() = _rt::as_i32(offset14);
                                    }
                                    DbValue::Interval(e) => {
                                        *base.add(0).cast::<u8>() = (16i32) as u8;
                                        let Interval {
                                            months: months16,
                                            days: days16,
                                            microseconds: microseconds16,
                                        } = e;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(months16);
                                        *base.add(12).cast::<i32>() = _rt::as_i32(days16);
                                        *base.add(16).cast::<i64>() = _rt::as_i64(microseconds16);
                                    }
                                    DbValue::Bytea(e) => {
                                        *base.add(0).cast::<u8>() = (17i32) as u8;
                                        let vec17 = e;
                                        let ptr17 = vec17.as_ptr().cast::<u8>();
                                        let len17 = vec17.len();
                                        *base.add(12).cast::<usize>() = len17;
                                        *base.add(8).cast::<*mut u8>() = ptr17.cast_mut();
                                    }
                                    DbValue::Json(e) => {
                                        *base.add(0).cast::<u8>() = (18i32) as u8;
                                        let vec18 = e;
                                        let ptr18 = vec18.as_ptr().cast::<u8>();
                                        let len18 = vec18.len();
                                        *base.add(12).cast::<usize>() = len18;
                                        *base.add(8).cast::<*mut u8>() = ptr18.cast_mut();
                                    }
                                    DbValue::Jsonb(e) => {
                                        *base.add(0).cast::<u8>() = (19i32) as u8;
                                        let vec19 = e;
                                        let ptr19 = vec19.as_ptr().cast::<u8>();
                                        let len19 = vec19.len();
                                        *base.add(12).cast::<usize>() = len19;
                                        *base.add(8).cast::<*mut u8>() = ptr19.cast_mut();
                                    }
                                    DbValue::Jsonpath(e) => {
                                        *base.add(0).cast::<u8>() = (20i32) as u8;
                                        let vec20 = e;
                                        let ptr20 = vec20.as_ptr().cast::<u8>();
                                        let len20 = vec20.len();
                                        *base.add(12).cast::<usize>() = len20;
                                        *base.add(8).cast::<*mut u8>() = ptr20.cast_mut();
                                    }
                                    DbValue::Xml(e) => {
                                        *base.add(0).cast::<u8>() = (21i32) as u8;
                                        let vec21 = e;
                                        let ptr21 = vec21.as_ptr().cast::<u8>();
                                        let len21 = vec21.len();
                                        *base.add(12).cast::<usize>() = len21;
                                        *base.add(8).cast::<*mut u8>() = ptr21.cast_mut();
                                    }
                                    DbValue::Uuid(e) => {
                                        *base.add(0).cast::<u8>() = (22i32) as u8;
                                        let super::super::super::golem::rdbms::types::Uuid {
                                            high_bits: high_bits22,
                                            low_bits: low_bits22,
                                        } = e;
                                        *base.add(8).cast::<i64>() = _rt::as_i64(high_bits22);
                                        *base.add(16).cast::<i64>() = _rt::as_i64(low_bits22);
                                    }
                                    DbValue::Inet(e) => {
                                        *base.add(0).cast::<u8>() = (23i32) as u8;
                                        use super::super::super::golem::rdbms::types::IpAddress as V25;
                                        match e {
                                            V25::Ipv4(e) => {
                                                *base.add(8).cast::<u8>() = (0i32) as u8;
                                                let (t23_0, t23_1, t23_2, t23_3) = e;
                                                *base.add(10).cast::<u8>() = (_rt::as_i32(t23_0)) as u8;
                                                *base.add(11).cast::<u8>() = (_rt::as_i32(t23_1)) as u8;
                                                *base.add(12).cast::<u8>() = (_rt::as_i32(t23_2)) as u8;
                                                *base.add(13).cast::<u8>() = (_rt::as_i32(t23_3)) as u8;
                                            }
                                            V25::Ipv6(e) => {
                                                *base.add(8).cast::<u8>() = (1i32) as u8;
                                                let (
                                                    t24_0,
                                                    t24_1,
                                                    t24_2,
                                                    t24_3,
                                                    t24_4,
                                                    t24_5,
                                                    t24_6,
                                                    t24_7,
                                                ) = e;
                                                *base.add(10).cast::<u16>() = (_rt::as_i32(t24_0)) as u16;
                                                *base.add(12).cast::<u16>() = (_rt::as_i32(t24_1)) as u16;
                                                *base.add(14).cast::<u16>() = (_rt::as_i32(t24_2)) as u16;
                                                *base.add(16).cast::<u16>() = (_rt::as_i32(t24_3)) as u16;
                                                *base.add(18).cast::<u16>() = (_rt::as_i32(t24_4)) as u16;
                                                *base.add(20).cast::<u16>() = (_rt::as_i32(t24_5)) as u16;
                                                *base.add(22).cast::<u16>() = (_rt::as_i32(t24_6)) as u16;
                                                *base.add(24).cast::<u16>() = (_rt::as_i32(t24_7)) as u16;
                                            }
                                        }
                                    }
                                    DbValue::Cidr(e) => {
                                        *base.add(0).cast::<u8>() = (24i32) as u8;
                                        use super::super::super::golem::rdbms::types::IpAddress as V28;
                                        match e {
                                            V28::Ipv4(e) => {
                                                *base.add(8).cast::<u8>() = (0i32) as u8;
                                                let (t26_0, t26_1, t26_2, t26_3) = e;
                                                *base.add(10).cast::<u8>() = (_rt::as_i32(t26_0)) as u8;
                                                *base.add(11).cast::<u8>() = (_rt::as_i32(t26_1)) as u8;
                                                *base.add(12).cast::<u8>() = (_rt::as_i32(t26_2)) as u8;
                                                *base.add(13).cast::<u8>() = (_rt::as_i32(t26_3)) as u8;
                                            }
                                            V28::Ipv6(e) => {
                                                *base.add(8).cast::<u8>() = (1i32) as u8;
                                                let (
                                                    t27_0,
                                                    t27_1,
                                                    t27_2,
                                                    t27_3,
                                                    t27_4,
                                                    t27_5,
                                                    t27_6,
                                                    t27_7,
                                                ) = e;
                                                *base.add(10).cast::<u16>() = (_rt::as_i32(t27_0)) as u16;
                                                *base.add(12).cast::<u16>() = (_rt::as_i32(t27_1)) as u16;
                                                *base.add(14).cast::<u16>() = (_rt::as_i32(t27_2)) as u16;
                                                *base.add(16).cast::<u16>() = (_rt::as_i32(t27_3)) as u16;
                                                *base.add(18).cast::<u16>() = (_rt::as_i32(t27_4)) as u16;
                                                *base.add(20).cast::<u16>() = (_rt::as_i32(t27_5)) as u16;
                                                *base.add(22).cast::<u16>() = (_rt::as_i32(t27_6)) as u16;
                                                *base.add(24).cast::<u16>() = (_rt::as_i32(t27_7)) as u16;
                                            }
                                        }
                                    }
                                    DbValue::Macaddr(e) => {
                                        *base.add(0).cast::<u8>() = (25i32) as u8;
                                        let super::super::super::golem::rdbms::types::MacAddress {
                                            octets: octets29,
                                        } = e;
                                        let (t30_0, t30_1, t30_2, t30_3, t30_4, t30_5) = octets29;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(t30_0)) as u8;
                                        *base.add(9).cast::<u8>() = (_rt::as_i32(t30_1)) as u8;
                                        *base.add(10).cast::<u8>() = (_rt::as_i32(t30_2)) as u8;
                                        *base.add(11).cast::<u8>() = (_rt::as_i32(t30_3)) as u8;
                                        *base.add(12).cast::<u8>() = (_rt::as_i32(t30_4)) as u8;
                                        *base.add(13).cast::<u8>() = (_rt::as_i32(t30_5)) as u8;
                                    }
                                    DbValue::Bit(e) => {
                                        *base.add(0).cast::<u8>() = (26i32) as u8;
                                        let vec31 = e;
                                        let len31 = vec31.len();
                                        let layout31 = _rt::alloc::Layout::from_size_align_unchecked(
                                            vec31.len() * 1,
                                            1,
                                        );
                                        let result31 = if layout31.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout31).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout31);
                                            }
                                            ptr
                                        } else {
                                            ::core::ptr::null_mut()
                                        };
                                        for (i, e) in vec31.into_iter().enumerate() {
                                            let base = result31.add(i * 1);
                                            {
                                                *base.add(0).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                        }
                                        *base.add(12).cast::<usize>() = len31;
                                        *base.add(8).cast::<*mut u8>() = result31;
                                        cleanup_list.extend_from_slice(&[(result31, layout31)]);
                                    }
                                    DbValue::Varbit(e) => {
                                        *base.add(0).cast::<u8>() = (27i32) as u8;
                                        let vec32 = e;
                                        let len32 = vec32.len();
                                        let layout32 = _rt::alloc::Layout::from_size_align_unchecked(
                                            vec32.len() * 1,
                                            1,
                                        );
                                        let result32 = if layout32.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout32).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout32);
                                            }
                                            ptr
                                        } else {
                                            ::core::ptr::null_mut()
                                        };
                                        for (i, e) in vec32.into_iter().enumerate() {
                                            let base = result32.add(i * 1);
                                            {
                                                *base.add(0).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                        }
                                        *base.add(12).cast::<usize>() = len32;
                                        *base.add(8).cast::<*mut u8>() = result32;
                                        cleanup_list.extend_from_slice(&[(result32, layout32)]);
                                    }
                                    DbValue::Int4range(e) => {
                                        *base.add(0).cast::<u8>() = (28i32) as u8;
                                        let Int4range { start: start33, end: end33 } = e;
                                        match start33 {
                                            Int4bound::Included(e) => {
                                                *base.add(8).cast::<u8>() = (0i32) as u8;
                                                *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            Int4bound::Excluded(e) => {
                                                *base.add(8).cast::<u8>() = (1i32) as u8;
                                                *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            Int4bound::Unbounded => {
                                                *base.add(8).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                        match end33 {
                                            Int4bound::Included(e) => {
                                                *base.add(16).cast::<u8>() = (0i32) as u8;
                                                *base.add(20).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            Int4bound::Excluded(e) => {
                                                *base.add(16).cast::<u8>() = (1i32) as u8;
                                                *base.add(20).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            Int4bound::Unbounded => {
                                                *base.add(16).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                    }
                                    DbValue::Int8range(e) => {
                                        *base.add(0).cast::<u8>() = (29i32) as u8;
                                        let Int8range { start: start34, end: end34 } = e;
                                        match start34 {
                                            Int8bound::Included(e) => {
                                                *base.add(8).cast::<u8>() = (0i32) as u8;
                                                *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            Int8bound::Excluded(e) => {
                                                *base.add(8).cast::<u8>() = (1i32) as u8;
                                                *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            Int8bound::Unbounded => {
                                                *base.add(8).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                        match end34 {
                                            Int8bound::Included(e) => {
                                                *base.add(24).cast::<u8>() = (0i32) as u8;
                                                *base.add(32).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            Int8bound::Excluded(e) => {
                                                *base.add(24).cast::<u8>() = (1i32) as u8;
                                                *base.add(32).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            Int8bound::Unbounded => {
                                                *base.add(24).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                    }
                                    DbValue::Numrange(e) => {
                                        *base.add(0).cast::<u8>() = (30i32) as u8;
                                        let Numrange { start: start35, end: end35 } = e;
                                        match start35 {
                                            Numbound::Included(e) => {
                                                *base.add(8).cast::<u8>() = (0i32) as u8;
                                                let vec36 = e;
                                                let ptr36 = vec36.as_ptr().cast::<u8>();
                                                let len36 = vec36.len();
                                                *base.add(16).cast::<usize>() = len36;
                                                *base.add(12).cast::<*mut u8>() = ptr36.cast_mut();
                                            }
                                            Numbound::Excluded(e) => {
                                                *base.add(8).cast::<u8>() = (1i32) as u8;
                                                let vec37 = e;
                                                let ptr37 = vec37.as_ptr().cast::<u8>();
                                                let len37 = vec37.len();
                                                *base.add(16).cast::<usize>() = len37;
                                                *base.add(12).cast::<*mut u8>() = ptr37.cast_mut();
                                            }
                                            Numbound::Unbounded => {
                                                *base.add(8).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                        match end35 {
                                            Numbound::Included(e) => {
                                                *base.add(20).cast::<u8>() = (0i32) as u8;
                                                let vec38 = e;
                                                let ptr38 = vec38.as_ptr().cast::<u8>();
                                                let len38 = vec38.len();
                                                *base.add(28).cast::<usize>() = len38;
                                                *base.add(24).cast::<*mut u8>() = ptr38.cast_mut();
                                            }
                                            Numbound::Excluded(e) => {
                                                *base.add(20).cast::<u8>() = (1i32) as u8;
                                                let vec39 = e;
                                                let ptr39 = vec39.as_ptr().cast::<u8>();
                                                let len39 = vec39.len();
                                                *base.add(28).cast::<usize>() = len39;
                                                *base.add(24).cast::<*mut u8>() = ptr39.cast_mut();
                                            }
                                            Numbound::Unbounded => {
                                                *base.add(20).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                    }
                                    DbValue::Tsrange(e) => {
                                        *base.add(0).cast::<u8>() = (31i32) as u8;
                                        let Tsrange { start: start40, end: end40 } = e;
                                        match start40 {
                                            Tsbound::Included(e) => {
                                                *base.add(8).cast::<u8>() = (0i32) as u8;
                                                let super::super::super::golem::rdbms::types::Timestamp {
                                                    date: date41,
                                                    time: time41,
                                                } = e;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year42,
                                                    month: month42,
                                                    day: day42,
                                                } = date41;
                                                *base.add(12).cast::<i32>() = _rt::as_i32(year42);
                                                *base.add(16).cast::<u8>() = (_rt::as_i32(month42)) as u8;
                                                *base.add(17).cast::<u8>() = (_rt::as_i32(day42)) as u8;
                                                let super::super::super::golem::rdbms::types::Time {
                                                    hour: hour43,
                                                    minute: minute43,
                                                    second: second43,
                                                    nanosecond: nanosecond43,
                                                } = time41;
                                                *base.add(20).cast::<u8>() = (_rt::as_i32(hour43)) as u8;
                                                *base.add(21).cast::<u8>() = (_rt::as_i32(minute43)) as u8;
                                                *base.add(22).cast::<u8>() = (_rt::as_i32(second43)) as u8;
                                                *base.add(24).cast::<i32>() = _rt::as_i32(nanosecond43);
                                            }
                                            Tsbound::Excluded(e) => {
                                                *base.add(8).cast::<u8>() = (1i32) as u8;
                                                let super::super::super::golem::rdbms::types::Timestamp {
                                                    date: date44,
                                                    time: time44,
                                                } = e;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year45,
                                                    month: month45,
                                                    day: day45,
                                                } = date44;
                                                *base.add(12).cast::<i32>() = _rt::as_i32(year45);
                                                *base.add(16).cast::<u8>() = (_rt::as_i32(month45)) as u8;
                                                *base.add(17).cast::<u8>() = (_rt::as_i32(day45)) as u8;
                                                let super::super::super::golem::rdbms::types::Time {
                                                    hour: hour46,
                                                    minute: minute46,
                                                    second: second46,
                                                    nanosecond: nanosecond46,
                                                } = time44;
                                                *base.add(20).cast::<u8>() = (_rt::as_i32(hour46)) as u8;
                                                *base.add(21).cast::<u8>() = (_rt::as_i32(minute46)) as u8;
                                                *base.add(22).cast::<u8>() = (_rt::as_i32(second46)) as u8;
                                                *base.add(24).cast::<i32>() = _rt::as_i32(nanosecond46);
                                            }
                                            Tsbound::Unbounded => {
                                                *base.add(8).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                        match end40 {
                                            Tsbound::Included(e) => {
                                                *base.add(28).cast::<u8>() = (0i32) as u8;
                                                let super::super::super::golem::rdbms::types::Timestamp {
                                                    date: date47,
                                                    time: time47,
                                                } = e;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year48,
                                                    month: month48,
                                                    day: day48,
                                                } = date47;
                                                *base.add(32).cast::<i32>() = _rt::as_i32(year48);
                                                *base.add(36).cast::<u8>() = (_rt::as_i32(month48)) as u8;
                                                *base.add(37).cast::<u8>() = (_rt::as_i32(day48)) as u8;
                                                let super::super::super::golem::rdbms::types::Time {
                                                    hour: hour49,
                                                    minute: minute49,
                                                    second: second49,
                                                    nanosecond: nanosecond49,
                                                } = time47;
                                                *base.add(40).cast::<u8>() = (_rt::as_i32(hour49)) as u8;
                                                *base.add(41).cast::<u8>() = (_rt::as_i32(minute49)) as u8;
                                                *base.add(42).cast::<u8>() = (_rt::as_i32(second49)) as u8;
                                                *base.add(44).cast::<i32>() = _rt::as_i32(nanosecond49);
                                            }
                                            Tsbound::Excluded(e) => {
                                                *base.add(28).cast::<u8>() = (1i32) as u8;
                                                let super::super::super::golem::rdbms::types::Timestamp {
                                                    date: date50,
                                                    time: time50,
                                                } = e;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year51,
                                                    month: month51,
                                                    day: day51,
                                                } = date50;
                                                *base.add(32).cast::<i32>() = _rt::as_i32(year51);
                                                *base.add(36).cast::<u8>() = (_rt::as_i32(month51)) as u8;
                                                *base.add(37).cast::<u8>() = (_rt::as_i32(day51)) as u8;
                                                let super::super::super::golem::rdbms::types::Time {
                                                    hour: hour52,
                                                    minute: minute52,
                                                    second: second52,
                                                    nanosecond: nanosecond52,
                                                } = time50;
                                                *base.add(40).cast::<u8>() = (_rt::as_i32(hour52)) as u8;
                                                *base.add(41).cast::<u8>() = (_rt::as_i32(minute52)) as u8;
                                                *base.add(42).cast::<u8>() = (_rt::as_i32(second52)) as u8;
                                                *base.add(44).cast::<i32>() = _rt::as_i32(nanosecond52);
                                            }
                                            Tsbound::Unbounded => {
                                                *base.add(28).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                    }
                                    DbValue::Tstzrange(e) => {
                                        *base.add(0).cast::<u8>() = (32i32) as u8;
                                        let Tstzrange { start: start53, end: end53 } = e;
                                        match start53 {
                                            Tstzbound::Included(e) => {
                                                *base.add(8).cast::<u8>() = (0i32) as u8;
                                                let super::super::super::golem::rdbms::types::Timestamptz {
                                                    timestamp: timestamp54,
                                                    offset: offset54,
                                                } = e;
                                                let super::super::super::golem::rdbms::types::Timestamp {
                                                    date: date55,
                                                    time: time55,
                                                } = timestamp54;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year56,
                                                    month: month56,
                                                    day: day56,
                                                } = date55;
                                                *base.add(12).cast::<i32>() = _rt::as_i32(year56);
                                                *base.add(16).cast::<u8>() = (_rt::as_i32(month56)) as u8;
                                                *base.add(17).cast::<u8>() = (_rt::as_i32(day56)) as u8;
                                                let super::super::super::golem::rdbms::types::Time {
                                                    hour: hour57,
                                                    minute: minute57,
                                                    second: second57,
                                                    nanosecond: nanosecond57,
                                                } = time55;
                                                *base.add(20).cast::<u8>() = (_rt::as_i32(hour57)) as u8;
                                                *base.add(21).cast::<u8>() = (_rt::as_i32(minute57)) as u8;
                                                *base.add(22).cast::<u8>() = (_rt::as_i32(second57)) as u8;
                                                *base.add(24).cast::<i32>() = _rt::as_i32(nanosecond57);
                                                *base.add(28).cast::<i32>() = _rt::as_i32(offset54);
                                            }
                                            Tstzbound::Excluded(e) => {
                                                *base.add(8).cast::<u8>() = (1i32) as u8;
                                                let super::super::super::golem::rdbms::types::Timestamptz {
                                                    timestamp: timestamp58,
                                                    offset: offset58,
                                                } = e;
                                                let super::super::super::golem::rdbms::types::Timestamp {
                                                    date: date59,
                                                    time: time59,
                                                } = timestamp58;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year60,
                                                    month: month60,
                                                    day: day60,
                                                } = date59;
                                                *base.add(12).cast::<i32>() = _rt::as_i32(year60);
                                                *base.add(16).cast::<u8>() = (_rt::as_i32(month60)) as u8;
                                                *base.add(17).cast::<u8>() = (_rt::as_i32(day60)) as u8;
                                                let super::super::super::golem::rdbms::types::Time {
                                                    hour: hour61,
                                                    minute: minute61,
                                                    second: second61,
                                                    nanosecond: nanosecond61,
                                                } = time59;
                                                *base.add(20).cast::<u8>() = (_rt::as_i32(hour61)) as u8;
                                                *base.add(21).cast::<u8>() = (_rt::as_i32(minute61)) as u8;
                                                *base.add(22).cast::<u8>() = (_rt::as_i32(second61)) as u8;
                                                *base.add(24).cast::<i32>() = _rt::as_i32(nanosecond61);
                                                *base.add(28).cast::<i32>() = _rt::as_i32(offset58);
                                            }
                                            Tstzbound::Unbounded => {
                                                *base.add(8).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                        match end53 {
                                            Tstzbound::Included(e) => {
                                                *base.add(32).cast::<u8>() = (0i32) as u8;
                                                let super::super::super::golem::rdbms::types::Timestamptz {
                                                    timestamp: timestamp62,
                                                    offset: offset62,
                                                } = e;
                                                let super::super::super::golem::rdbms::types::Timestamp {
                                                    date: date63,
                                                    time: time63,
                                                } = timestamp62;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year64,
                                                    month: month64,
                                                    day: day64,
                                                } = date63;
                                                *base.add(36).cast::<i32>() = _rt::as_i32(year64);
                                                *base.add(40).cast::<u8>() = (_rt::as_i32(month64)) as u8;
                                                *base.add(41).cast::<u8>() = (_rt::as_i32(day64)) as u8;
                                                let super::super::super::golem::rdbms::types::Time {
                                                    hour: hour65,
                                                    minute: minute65,
                                                    second: second65,
                                                    nanosecond: nanosecond65,
                                                } = time63;
                                                *base.add(44).cast::<u8>() = (_rt::as_i32(hour65)) as u8;
                                                *base.add(45).cast::<u8>() = (_rt::as_i32(minute65)) as u8;
                                                *base.add(46).cast::<u8>() = (_rt::as_i32(second65)) as u8;
                                                *base.add(48).cast::<i32>() = _rt::as_i32(nanosecond65);
                                                *base.add(52).cast::<i32>() = _rt::as_i32(offset62);
                                            }
                                            Tstzbound::Excluded(e) => {
                                                *base.add(32).cast::<u8>() = (1i32) as u8;
                                                let super::super::super::golem::rdbms::types::Timestamptz {
                                                    timestamp: timestamp66,
                                                    offset: offset66,
                                                } = e;
                                                let super::super::super::golem::rdbms::types::Timestamp {
                                                    date: date67,
                                                    time: time67,
                                                } = timestamp66;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year68,
                                                    month: month68,
                                                    day: day68,
                                                } = date67;
                                                *base.add(36).cast::<i32>() = _rt::as_i32(year68);
                                                *base.add(40).cast::<u8>() = (_rt::as_i32(month68)) as u8;
                                                *base.add(41).cast::<u8>() = (_rt::as_i32(day68)) as u8;
                                                let super::super::super::golem::rdbms::types::Time {
                                                    hour: hour69,
                                                    minute: minute69,
                                                    second: second69,
                                                    nanosecond: nanosecond69,
                                                } = time67;
                                                *base.add(44).cast::<u8>() = (_rt::as_i32(hour69)) as u8;
                                                *base.add(45).cast::<u8>() = (_rt::as_i32(minute69)) as u8;
                                                *base.add(46).cast::<u8>() = (_rt::as_i32(second69)) as u8;
                                                *base.add(48).cast::<i32>() = _rt::as_i32(nanosecond69);
                                                *base.add(52).cast::<i32>() = _rt::as_i32(offset66);
                                            }
                                            Tstzbound::Unbounded => {
                                                *base.add(32).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                    }
                                    DbValue::Daterange(e) => {
                                        *base.add(0).cast::<u8>() = (33i32) as u8;
                                        let Daterange { start: start70, end: end70 } = e;
                                        match start70 {
                                            Datebound::Included(e) => {
                                                *base.add(8).cast::<u8>() = (0i32) as u8;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year71,
                                                    month: month71,
                                                    day: day71,
                                                } = e;
                                                *base.add(12).cast::<i32>() = _rt::as_i32(year71);
                                                *base.add(16).cast::<u8>() = (_rt::as_i32(month71)) as u8;
                                                *base.add(17).cast::<u8>() = (_rt::as_i32(day71)) as u8;
                                            }
                                            Datebound::Excluded(e) => {
                                                *base.add(8).cast::<u8>() = (1i32) as u8;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year72,
                                                    month: month72,
                                                    day: day72,
                                                } = e;
                                                *base.add(12).cast::<i32>() = _rt::as_i32(year72);
                                                *base.add(16).cast::<u8>() = (_rt::as_i32(month72)) as u8;
                                                *base.add(17).cast::<u8>() = (_rt::as_i32(day72)) as u8;
                                            }
                                            Datebound::Unbounded => {
                                                *base.add(8).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                        match end70 {
                                            Datebound::Included(e) => {
                                                *base.add(20).cast::<u8>() = (0i32) as u8;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year73,
                                                    month: month73,
                                                    day: day73,
                                                } = e;
                                                *base.add(24).cast::<i32>() = _rt::as_i32(year73);
                                                *base.add(28).cast::<u8>() = (_rt::as_i32(month73)) as u8;
                                                *base.add(29).cast::<u8>() = (_rt::as_i32(day73)) as u8;
                                            }
                                            Datebound::Excluded(e) => {
                                                *base.add(20).cast::<u8>() = (1i32) as u8;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year74,
                                                    month: month74,
                                                    day: day74,
                                                } = e;
                                                *base.add(24).cast::<i32>() = _rt::as_i32(year74);
                                                *base.add(28).cast::<u8>() = (_rt::as_i32(month74)) as u8;
                                                *base.add(29).cast::<u8>() = (_rt::as_i32(day74)) as u8;
                                            }
                                            Datebound::Unbounded => {
                                                *base.add(20).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                    }
                                    DbValue::Money(e) => {
                                        *base.add(0).cast::<u8>() = (34i32) as u8;
                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    DbValue::Oid(e) => {
                                        *base.add(0).cast::<u8>() = (35i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::Enumeration(e) => {
                                        *base.add(0).cast::<u8>() = (36i32) as u8;
                                        let Enumeration { name: name75, value: value75 } = e;
                                        let vec76 = name75;
                                        let ptr76 = vec76.as_ptr().cast::<u8>();
                                        let len76 = vec76.len();
                                        *base.add(12).cast::<usize>() = len76;
                                        *base.add(8).cast::<*mut u8>() = ptr76.cast_mut();
                                        let vec77 = value75;
                                        let ptr77 = vec77.as_ptr().cast::<u8>();
                                        let len77 = vec77.len();
                                        *base.add(20).cast::<usize>() = len77;
                                        *base.add(16).cast::<*mut u8>() = ptr77.cast_mut();
                                    }
                                    DbValue::Composite(e) => {
                                        *base.add(0).cast::<u8>() = (37i32) as u8;
                                        let Composite { name: name78, values: values78 } = e;
                                        let vec79 = name78;
                                        let ptr79 = vec79.as_ptr().cast::<u8>();
                                        let len79 = vec79.len();
                                        *base.add(12).cast::<usize>() = len79;
                                        *base.add(8).cast::<*mut u8>() = ptr79.cast_mut();
                                        let vec80 = values78;
                                        let len80 = vec80.len();
                                        let layout80 = _rt::alloc::Layout::from_size_align_unchecked(
                                            vec80.len() * 4,
                                            4,
                                        );
                                        let result80 = if layout80.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout80).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout80);
                                            }
                                            ptr
                                        } else {
                                            ::core::ptr::null_mut()
                                        };
                                        for (i, e) in vec80.into_iter().enumerate() {
                                            let base = result80.add(i * 4);
                                            {
                                                *base.add(0).cast::<i32>() = (e).take_handle() as i32;
                                            }
                                        }
                                        *base.add(20).cast::<usize>() = len80;
                                        *base.add(16).cast::<*mut u8>() = result80;
                                        cleanup_list.extend_from_slice(&[(result80, layout80)]);
                                    }
                                    DbValue::Domain(e) => {
                                        *base.add(0).cast::<u8>() = (38i32) as u8;
                                        let Domain { name: name81, value: value81 } = e;
                                        let vec82 = name81;
                                        let ptr82 = vec82.as_ptr().cast::<u8>();
                                        let len82 = vec82.len();
                                        *base.add(12).cast::<usize>() = len82;
                                        *base.add(8).cast::<*mut u8>() = ptr82.cast_mut();
                                        *base.add(16).cast::<i32>() = (value81).take_handle()
                                            as i32;
                                    }
                                    DbValue::Array(e) => {
                                        *base.add(0).cast::<u8>() = (39i32) as u8;
                                        let vec83 = e;
                                        let len83 = vec83.len();
                                        let layout83 = _rt::alloc::Layout::from_size_align_unchecked(
                                            vec83.len() * 4,
                                            4,
                                        );
                                        let result83 = if layout83.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout83).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout83);
                                            }
                                            ptr
                                        } else {
                                            ::core::ptr::null_mut()
                                        };
                                        for (i, e) in vec83.into_iter().enumerate() {
                                            let base = result83.add(i * 4);
                                            {
                                                *base.add(0).cast::<i32>() = (e).take_handle() as i32;
                                            }
                                        }
                                        *base.add(12).cast::<usize>() = len83;
                                        *base.add(8).cast::<*mut u8>() = result83;
                                        cleanup_list.extend_from_slice(&[(result83, layout83)]);
                                    }
                                    DbValue::Range(e) => {
                                        *base.add(0).cast::<u8>() = (40i32) as u8;
                                        let Range { name: name84, value: value84 } = e;
                                        let vec85 = name84;
                                        let ptr85 = vec85.as_ptr().cast::<u8>();
                                        let len85 = vec85.len();
                                        *base.add(12).cast::<usize>() = len85;
                                        *base.add(8).cast::<*mut u8>() = ptr85.cast_mut();
                                        let ValuesRange { start: start86, end: end86 } = value84;
                                        match start86 {
                                            ValueBound::Included(e) => {
                                                *base.add(16).cast::<u8>() = (0i32) as u8;
                                                *base.add(20).cast::<i32>() = (e).take_handle() as i32;
                                            }
                                            ValueBound::Excluded(e) => {
                                                *base.add(16).cast::<u8>() = (1i32) as u8;
                                                *base.add(20).cast::<i32>() = (e).take_handle() as i32;
                                            }
                                            ValueBound::Unbounded => {
                                                *base.add(16).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                        match end86 {
                                            ValueBound::Included(e) => {
                                                *base.add(24).cast::<u8>() = (0i32) as u8;
                                                *base.add(28).cast::<i32>() = (e).take_handle() as i32;
                                            }
                                            ValueBound::Excluded(e) => {
                                                *base.add(24).cast::<u8>() = (1i32) as u8;
                                                *base.add(28).cast::<i32>() = (e).take_handle() as i32;
                                            }
                                            ValueBound::Unbounded => {
                                                *base.add(24).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                    }
                                    DbValue::Null => {
                                        *base.add(0).cast::<u8>() = (41i32) as u8;
                                    }
                                }
                            }
                        }
                        let ptr88 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rdbms/postgres@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]db-transaction.query-stream"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            result87,
                            len87,
                            ptr88,
                        );
                        let l89 = i32::from(*ptr88.add(0).cast::<u8>());
                        if layout87.size() != 0 {
                            _rt::alloc::dealloc(result87.cast(), layout87);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l89 {
                            0 => {
                                let e = {
                                    let l90 = *ptr88.add(4).cast::<i32>();
                                    DbResultStream::from_handle(l90 as u32)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l91 = i32::from(*ptr88.add(4).cast::<u8>());
                                    let v107 = match l91 {
                                        0 => {
                                            let e107 = {
                                                let l92 = *ptr88.add(8).cast::<*mut u8>();
                                                let l93 = *ptr88.add(12).cast::<usize>();
                                                let len94 = l93;
                                                let bytes94 = _rt::Vec::from_raw_parts(
                                                    l92.cast(),
                                                    len94,
                                                    len94,
                                                );
                                                _rt::string_lift(bytes94)
                                            };
                                            Error::ConnectionFailure(e107)
                                        }
                                        1 => {
                                            let e107 = {
                                                let l95 = *ptr88.add(8).cast::<*mut u8>();
                                                let l96 = *ptr88.add(12).cast::<usize>();
                                                let len97 = l96;
                                                let bytes97 = _rt::Vec::from_raw_parts(
                                                    l95.cast(),
                                                    len97,
                                                    len97,
                                                );
                                                _rt::string_lift(bytes97)
                                            };
                                            Error::QueryParameterFailure(e107)
                                        }
                                        2 => {
                                            let e107 = {
                                                let l98 = *ptr88.add(8).cast::<*mut u8>();
                                                let l99 = *ptr88.add(12).cast::<usize>();
                                                let len100 = l99;
                                                let bytes100 = _rt::Vec::from_raw_parts(
                                                    l98.cast(),
                                                    len100,
                                                    len100,
                                                );
                                                _rt::string_lift(bytes100)
                                            };
                                            Error::QueryExecutionFailure(e107)
                                        }
                                        3 => {
                                            let e107 = {
                                                let l101 = *ptr88.add(8).cast::<*mut u8>();
                                                let l102 = *ptr88.add(12).cast::<usize>();
                                                let len103 = l102;
                                                let bytes103 = _rt::Vec::from_raw_parts(
                                                    l101.cast(),
                                                    len103,
                                                    len103,
                                                );
                                                _rt::string_lift(bytes103)
                                            };
                                            Error::QueryResponseFailure(e107)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 4, "invalid enum discriminant");
                                            let e107 = {
                                                let l104 = *ptr88.add(8).cast::<*mut u8>();
                                                let l105 = *ptr88.add(12).cast::<usize>();
                                                let len106 = l105;
                                                let bytes106 = _rt::Vec::from_raw_parts(
                                                    l104.cast(),
                                                    len106,
                                                    len106,
                                                );
                                                _rt::string_lift(bytes106)
                                            };
                                            Error::Other(e107)
                                        }
                                    };
                                    v107
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl DbTransaction {
                #[allow(unused_unsafe, clippy::all)]
                pub fn execute(
                    &self,
                    statement: &str,
                    params: _rt::Vec<DbValue>,
                ) -> Result<u64, Error> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 24]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 24],
                        );
                        let vec0 = statement;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec87 = &params;
                        let len87 = vec87.len();
                        let layout87 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec87.len() * 56,
                            8,
                        );
                        let result87 = if layout87.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout87).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout87);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec87.into_iter().enumerate() {
                            let base = result87.add(i * 56);
                            {
                                match e {
                                    DbValue::Character(e) => {
                                        *base.add(0).cast::<u8>() = (0i32) as u8;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                    }
                                    DbValue::Int2(e) => {
                                        *base.add(0).cast::<u8>() = (1i32) as u8;
                                        *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                    }
                                    DbValue::Int4(e) => {
                                        *base.add(0).cast::<u8>() = (2i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::Int8(e) => {
                                        *base.add(0).cast::<u8>() = (3i32) as u8;
                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    DbValue::Float4(e) => {
                                        *base.add(0).cast::<u8>() = (4i32) as u8;
                                        *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                    }
                                    DbValue::Float8(e) => {
                                        *base.add(0).cast::<u8>() = (5i32) as u8;
                                        *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                    }
                                    DbValue::Numeric(e) => {
                                        *base.add(0).cast::<u8>() = (6i32) as u8;
                                        let vec1 = e;
                                        let ptr1 = vec1.as_ptr().cast::<u8>();
                                        let len1 = vec1.len();
                                        *base.add(12).cast::<usize>() = len1;
                                        *base.add(8).cast::<*mut u8>() = ptr1.cast_mut();
                                    }
                                    DbValue::Boolean(e) => {
                                        *base.add(0).cast::<u8>() = (7i32) as u8;
                                        *base.add(8).cast::<u8>() = (match e {
                                            true => 1,
                                            false => 0,
                                        }) as u8;
                                    }
                                    DbValue::Text(e) => {
                                        *base.add(0).cast::<u8>() = (8i32) as u8;
                                        let vec2 = e;
                                        let ptr2 = vec2.as_ptr().cast::<u8>();
                                        let len2 = vec2.len();
                                        *base.add(12).cast::<usize>() = len2;
                                        *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                    }
                                    DbValue::Varchar(e) => {
                                        *base.add(0).cast::<u8>() = (9i32) as u8;
                                        let vec3 = e;
                                        let ptr3 = vec3.as_ptr().cast::<u8>();
                                        let len3 = vec3.len();
                                        *base.add(12).cast::<usize>() = len3;
                                        *base.add(8).cast::<*mut u8>() = ptr3.cast_mut();
                                    }
                                    DbValue::Bpchar(e) => {
                                        *base.add(0).cast::<u8>() = (10i32) as u8;
                                        let vec4 = e;
                                        let ptr4 = vec4.as_ptr().cast::<u8>();
                                        let len4 = vec4.len();
                                        *base.add(12).cast::<usize>() = len4;
                                        *base.add(8).cast::<*mut u8>() = ptr4.cast_mut();
                                    }
                                    DbValue::Timestamp(e) => {
                                        *base.add(0).cast::<u8>() = (11i32) as u8;
                                        let super::super::super::golem::rdbms::types::Timestamp {
                                            date: date5,
                                            time: time5,
                                        } = e;
                                        let super::super::super::golem::rdbms::types::Date {
                                            year: year6,
                                            month: month6,
                                            day: day6,
                                        } = date5;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(year6);
                                        *base.add(12).cast::<u8>() = (_rt::as_i32(month6)) as u8;
                                        *base.add(13).cast::<u8>() = (_rt::as_i32(day6)) as u8;
                                        let super::super::super::golem::rdbms::types::Time {
                                            hour: hour7,
                                            minute: minute7,
                                            second: second7,
                                            nanosecond: nanosecond7,
                                        } = time5;
                                        *base.add(16).cast::<u8>() = (_rt::as_i32(hour7)) as u8;
                                        *base.add(17).cast::<u8>() = (_rt::as_i32(minute7)) as u8;
                                        *base.add(18).cast::<u8>() = (_rt::as_i32(second7)) as u8;
                                        *base.add(20).cast::<i32>() = _rt::as_i32(nanosecond7);
                                    }
                                    DbValue::Timestamptz(e) => {
                                        *base.add(0).cast::<u8>() = (12i32) as u8;
                                        let super::super::super::golem::rdbms::types::Timestamptz {
                                            timestamp: timestamp8,
                                            offset: offset8,
                                        } = e;
                                        let super::super::super::golem::rdbms::types::Timestamp {
                                            date: date9,
                                            time: time9,
                                        } = timestamp8;
                                        let super::super::super::golem::rdbms::types::Date {
                                            year: year10,
                                            month: month10,
                                            day: day10,
                                        } = date9;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(year10);
                                        *base.add(12).cast::<u8>() = (_rt::as_i32(month10)) as u8;
                                        *base.add(13).cast::<u8>() = (_rt::as_i32(day10)) as u8;
                                        let super::super::super::golem::rdbms::types::Time {
                                            hour: hour11,
                                            minute: minute11,
                                            second: second11,
                                            nanosecond: nanosecond11,
                                        } = time9;
                                        *base.add(16).cast::<u8>() = (_rt::as_i32(hour11)) as u8;
                                        *base.add(17).cast::<u8>() = (_rt::as_i32(minute11)) as u8;
                                        *base.add(18).cast::<u8>() = (_rt::as_i32(second11)) as u8;
                                        *base.add(20).cast::<i32>() = _rt::as_i32(nanosecond11);
                                        *base.add(24).cast::<i32>() = _rt::as_i32(offset8);
                                    }
                                    DbValue::Date(e) => {
                                        *base.add(0).cast::<u8>() = (13i32) as u8;
                                        let super::super::super::golem::rdbms::types::Date {
                                            year: year12,
                                            month: month12,
                                            day: day12,
                                        } = e;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(year12);
                                        *base.add(12).cast::<u8>() = (_rt::as_i32(month12)) as u8;
                                        *base.add(13).cast::<u8>() = (_rt::as_i32(day12)) as u8;
                                    }
                                    DbValue::Time(e) => {
                                        *base.add(0).cast::<u8>() = (14i32) as u8;
                                        let super::super::super::golem::rdbms::types::Time {
                                            hour: hour13,
                                            minute: minute13,
                                            second: second13,
                                            nanosecond: nanosecond13,
                                        } = e;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(hour13)) as u8;
                                        *base.add(9).cast::<u8>() = (_rt::as_i32(minute13)) as u8;
                                        *base.add(10).cast::<u8>() = (_rt::as_i32(second13)) as u8;
                                        *base.add(12).cast::<i32>() = _rt::as_i32(nanosecond13);
                                    }
                                    DbValue::Timetz(e) => {
                                        *base.add(0).cast::<u8>() = (15i32) as u8;
                                        let super::super::super::golem::rdbms::types::Timetz {
                                            time: time14,
                                            offset: offset14,
                                        } = e;
                                        let super::super::super::golem::rdbms::types::Time {
                                            hour: hour15,
                                            minute: minute15,
                                            second: second15,
                                            nanosecond: nanosecond15,
                                        } = time14;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(hour15)) as u8;
                                        *base.add(9).cast::<u8>() = (_rt::as_i32(minute15)) as u8;
                                        *base.add(10).cast::<u8>() = (_rt::as_i32(second15)) as u8;
                                        *base.add(12).cast::<i32>() = _rt::as_i32(nanosecond15);
                                        *base.add(16).cast::<i32>() = _rt::as_i32(offset14);
                                    }
                                    DbValue::Interval(e) => {
                                        *base.add(0).cast::<u8>() = (16i32) as u8;
                                        let Interval {
                                            months: months16,
                                            days: days16,
                                            microseconds: microseconds16,
                                        } = e;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(months16);
                                        *base.add(12).cast::<i32>() = _rt::as_i32(days16);
                                        *base.add(16).cast::<i64>() = _rt::as_i64(microseconds16);
                                    }
                                    DbValue::Bytea(e) => {
                                        *base.add(0).cast::<u8>() = (17i32) as u8;
                                        let vec17 = e;
                                        let ptr17 = vec17.as_ptr().cast::<u8>();
                                        let len17 = vec17.len();
                                        *base.add(12).cast::<usize>() = len17;
                                        *base.add(8).cast::<*mut u8>() = ptr17.cast_mut();
                                    }
                                    DbValue::Json(e) => {
                                        *base.add(0).cast::<u8>() = (18i32) as u8;
                                        let vec18 = e;
                                        let ptr18 = vec18.as_ptr().cast::<u8>();
                                        let len18 = vec18.len();
                                        *base.add(12).cast::<usize>() = len18;
                                        *base.add(8).cast::<*mut u8>() = ptr18.cast_mut();
                                    }
                                    DbValue::Jsonb(e) => {
                                        *base.add(0).cast::<u8>() = (19i32) as u8;
                                        let vec19 = e;
                                        let ptr19 = vec19.as_ptr().cast::<u8>();
                                        let len19 = vec19.len();
                                        *base.add(12).cast::<usize>() = len19;
                                        *base.add(8).cast::<*mut u8>() = ptr19.cast_mut();
                                    }
                                    DbValue::Jsonpath(e) => {
                                        *base.add(0).cast::<u8>() = (20i32) as u8;
                                        let vec20 = e;
                                        let ptr20 = vec20.as_ptr().cast::<u8>();
                                        let len20 = vec20.len();
                                        *base.add(12).cast::<usize>() = len20;
                                        *base.add(8).cast::<*mut u8>() = ptr20.cast_mut();
                                    }
                                    DbValue::Xml(e) => {
                                        *base.add(0).cast::<u8>() = (21i32) as u8;
                                        let vec21 = e;
                                        let ptr21 = vec21.as_ptr().cast::<u8>();
                                        let len21 = vec21.len();
                                        *base.add(12).cast::<usize>() = len21;
                                        *base.add(8).cast::<*mut u8>() = ptr21.cast_mut();
                                    }
                                    DbValue::Uuid(e) => {
                                        *base.add(0).cast::<u8>() = (22i32) as u8;
                                        let super::super::super::golem::rdbms::types::Uuid {
                                            high_bits: high_bits22,
                                            low_bits: low_bits22,
                                        } = e;
                                        *base.add(8).cast::<i64>() = _rt::as_i64(high_bits22);
                                        *base.add(16).cast::<i64>() = _rt::as_i64(low_bits22);
                                    }
                                    DbValue::Inet(e) => {
                                        *base.add(0).cast::<u8>() = (23i32) as u8;
                                        use super::super::super::golem::rdbms::types::IpAddress as V25;
                                        match e {
                                            V25::Ipv4(e) => {
                                                *base.add(8).cast::<u8>() = (0i32) as u8;
                                                let (t23_0, t23_1, t23_2, t23_3) = e;
                                                *base.add(10).cast::<u8>() = (_rt::as_i32(t23_0)) as u8;
                                                *base.add(11).cast::<u8>() = (_rt::as_i32(t23_1)) as u8;
                                                *base.add(12).cast::<u8>() = (_rt::as_i32(t23_2)) as u8;
                                                *base.add(13).cast::<u8>() = (_rt::as_i32(t23_3)) as u8;
                                            }
                                            V25::Ipv6(e) => {
                                                *base.add(8).cast::<u8>() = (1i32) as u8;
                                                let (
                                                    t24_0,
                                                    t24_1,
                                                    t24_2,
                                                    t24_3,
                                                    t24_4,
                                                    t24_5,
                                                    t24_6,
                                                    t24_7,
                                                ) = e;
                                                *base.add(10).cast::<u16>() = (_rt::as_i32(t24_0)) as u16;
                                                *base.add(12).cast::<u16>() = (_rt::as_i32(t24_1)) as u16;
                                                *base.add(14).cast::<u16>() = (_rt::as_i32(t24_2)) as u16;
                                                *base.add(16).cast::<u16>() = (_rt::as_i32(t24_3)) as u16;
                                                *base.add(18).cast::<u16>() = (_rt::as_i32(t24_4)) as u16;
                                                *base.add(20).cast::<u16>() = (_rt::as_i32(t24_5)) as u16;
                                                *base.add(22).cast::<u16>() = (_rt::as_i32(t24_6)) as u16;
                                                *base.add(24).cast::<u16>() = (_rt::as_i32(t24_7)) as u16;
                                            }
                                        }
                                    }
                                    DbValue::Cidr(e) => {
                                        *base.add(0).cast::<u8>() = (24i32) as u8;
                                        use super::super::super::golem::rdbms::types::IpAddress as V28;
                                        match e {
                                            V28::Ipv4(e) => {
                                                *base.add(8).cast::<u8>() = (0i32) as u8;
                                                let (t26_0, t26_1, t26_2, t26_3) = e;
                                                *base.add(10).cast::<u8>() = (_rt::as_i32(t26_0)) as u8;
                                                *base.add(11).cast::<u8>() = (_rt::as_i32(t26_1)) as u8;
                                                *base.add(12).cast::<u8>() = (_rt::as_i32(t26_2)) as u8;
                                                *base.add(13).cast::<u8>() = (_rt::as_i32(t26_3)) as u8;
                                            }
                                            V28::Ipv6(e) => {
                                                *base.add(8).cast::<u8>() = (1i32) as u8;
                                                let (
                                                    t27_0,
                                                    t27_1,
                                                    t27_2,
                                                    t27_3,
                                                    t27_4,
                                                    t27_5,
                                                    t27_6,
                                                    t27_7,
                                                ) = e;
                                                *base.add(10).cast::<u16>() = (_rt::as_i32(t27_0)) as u16;
                                                *base.add(12).cast::<u16>() = (_rt::as_i32(t27_1)) as u16;
                                                *base.add(14).cast::<u16>() = (_rt::as_i32(t27_2)) as u16;
                                                *base.add(16).cast::<u16>() = (_rt::as_i32(t27_3)) as u16;
                                                *base.add(18).cast::<u16>() = (_rt::as_i32(t27_4)) as u16;
                                                *base.add(20).cast::<u16>() = (_rt::as_i32(t27_5)) as u16;
                                                *base.add(22).cast::<u16>() = (_rt::as_i32(t27_6)) as u16;
                                                *base.add(24).cast::<u16>() = (_rt::as_i32(t27_7)) as u16;
                                            }
                                        }
                                    }
                                    DbValue::Macaddr(e) => {
                                        *base.add(0).cast::<u8>() = (25i32) as u8;
                                        let super::super::super::golem::rdbms::types::MacAddress {
                                            octets: octets29,
                                        } = e;
                                        let (t30_0, t30_1, t30_2, t30_3, t30_4, t30_5) = octets29;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(t30_0)) as u8;
                                        *base.add(9).cast::<u8>() = (_rt::as_i32(t30_1)) as u8;
                                        *base.add(10).cast::<u8>() = (_rt::as_i32(t30_2)) as u8;
                                        *base.add(11).cast::<u8>() = (_rt::as_i32(t30_3)) as u8;
                                        *base.add(12).cast::<u8>() = (_rt::as_i32(t30_4)) as u8;
                                        *base.add(13).cast::<u8>() = (_rt::as_i32(t30_5)) as u8;
                                    }
                                    DbValue::Bit(e) => {
                                        *base.add(0).cast::<u8>() = (26i32) as u8;
                                        let vec31 = e;
                                        let len31 = vec31.len();
                                        let layout31 = _rt::alloc::Layout::from_size_align_unchecked(
                                            vec31.len() * 1,
                                            1,
                                        );
                                        let result31 = if layout31.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout31).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout31);
                                            }
                                            ptr
                                        } else {
                                            ::core::ptr::null_mut()
                                        };
                                        for (i, e) in vec31.into_iter().enumerate() {
                                            let base = result31.add(i * 1);
                                            {
                                                *base.add(0).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                        }
                                        *base.add(12).cast::<usize>() = len31;
                                        *base.add(8).cast::<*mut u8>() = result31;
                                        cleanup_list.extend_from_slice(&[(result31, layout31)]);
                                    }
                                    DbValue::Varbit(e) => {
                                        *base.add(0).cast::<u8>() = (27i32) as u8;
                                        let vec32 = e;
                                        let len32 = vec32.len();
                                        let layout32 = _rt::alloc::Layout::from_size_align_unchecked(
                                            vec32.len() * 1,
                                            1,
                                        );
                                        let result32 = if layout32.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout32).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout32);
                                            }
                                            ptr
                                        } else {
                                            ::core::ptr::null_mut()
                                        };
                                        for (i, e) in vec32.into_iter().enumerate() {
                                            let base = result32.add(i * 1);
                                            {
                                                *base.add(0).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                        }
                                        *base.add(12).cast::<usize>() = len32;
                                        *base.add(8).cast::<*mut u8>() = result32;
                                        cleanup_list.extend_from_slice(&[(result32, layout32)]);
                                    }
                                    DbValue::Int4range(e) => {
                                        *base.add(0).cast::<u8>() = (28i32) as u8;
                                        let Int4range { start: start33, end: end33 } = e;
                                        match start33 {
                                            Int4bound::Included(e) => {
                                                *base.add(8).cast::<u8>() = (0i32) as u8;
                                                *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            Int4bound::Excluded(e) => {
                                                *base.add(8).cast::<u8>() = (1i32) as u8;
                                                *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            Int4bound::Unbounded => {
                                                *base.add(8).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                        match end33 {
                                            Int4bound::Included(e) => {
                                                *base.add(16).cast::<u8>() = (0i32) as u8;
                                                *base.add(20).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            Int4bound::Excluded(e) => {
                                                *base.add(16).cast::<u8>() = (1i32) as u8;
                                                *base.add(20).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            Int4bound::Unbounded => {
                                                *base.add(16).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                    }
                                    DbValue::Int8range(e) => {
                                        *base.add(0).cast::<u8>() = (29i32) as u8;
                                        let Int8range { start: start34, end: end34 } = e;
                                        match start34 {
                                            Int8bound::Included(e) => {
                                                *base.add(8).cast::<u8>() = (0i32) as u8;
                                                *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            Int8bound::Excluded(e) => {
                                                *base.add(8).cast::<u8>() = (1i32) as u8;
                                                *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            Int8bound::Unbounded => {
                                                *base.add(8).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                        match end34 {
                                            Int8bound::Included(e) => {
                                                *base.add(24).cast::<u8>() = (0i32) as u8;
                                                *base.add(32).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            Int8bound::Excluded(e) => {
                                                *base.add(24).cast::<u8>() = (1i32) as u8;
                                                *base.add(32).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            Int8bound::Unbounded => {
                                                *base.add(24).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                    }
                                    DbValue::Numrange(e) => {
                                        *base.add(0).cast::<u8>() = (30i32) as u8;
                                        let Numrange { start: start35, end: end35 } = e;
                                        match start35 {
                                            Numbound::Included(e) => {
                                                *base.add(8).cast::<u8>() = (0i32) as u8;
                                                let vec36 = e;
                                                let ptr36 = vec36.as_ptr().cast::<u8>();
                                                let len36 = vec36.len();
                                                *base.add(16).cast::<usize>() = len36;
                                                *base.add(12).cast::<*mut u8>() = ptr36.cast_mut();
                                            }
                                            Numbound::Excluded(e) => {
                                                *base.add(8).cast::<u8>() = (1i32) as u8;
                                                let vec37 = e;
                                                let ptr37 = vec37.as_ptr().cast::<u8>();
                                                let len37 = vec37.len();
                                                *base.add(16).cast::<usize>() = len37;
                                                *base.add(12).cast::<*mut u8>() = ptr37.cast_mut();
                                            }
                                            Numbound::Unbounded => {
                                                *base.add(8).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                        match end35 {
                                            Numbound::Included(e) => {
                                                *base.add(20).cast::<u8>() = (0i32) as u8;
                                                let vec38 = e;
                                                let ptr38 = vec38.as_ptr().cast::<u8>();
                                                let len38 = vec38.len();
                                                *base.add(28).cast::<usize>() = len38;
                                                *base.add(24).cast::<*mut u8>() = ptr38.cast_mut();
                                            }
                                            Numbound::Excluded(e) => {
                                                *base.add(20).cast::<u8>() = (1i32) as u8;
                                                let vec39 = e;
                                                let ptr39 = vec39.as_ptr().cast::<u8>();
                                                let len39 = vec39.len();
                                                *base.add(28).cast::<usize>() = len39;
                                                *base.add(24).cast::<*mut u8>() = ptr39.cast_mut();
                                            }
                                            Numbound::Unbounded => {
                                                *base.add(20).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                    }
                                    DbValue::Tsrange(e) => {
                                        *base.add(0).cast::<u8>() = (31i32) as u8;
                                        let Tsrange { start: start40, end: end40 } = e;
                                        match start40 {
                                            Tsbound::Included(e) => {
                                                *base.add(8).cast::<u8>() = (0i32) as u8;
                                                let super::super::super::golem::rdbms::types::Timestamp {
                                                    date: date41,
                                                    time: time41,
                                                } = e;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year42,
                                                    month: month42,
                                                    day: day42,
                                                } = date41;
                                                *base.add(12).cast::<i32>() = _rt::as_i32(year42);
                                                *base.add(16).cast::<u8>() = (_rt::as_i32(month42)) as u8;
                                                *base.add(17).cast::<u8>() = (_rt::as_i32(day42)) as u8;
                                                let super::super::super::golem::rdbms::types::Time {
                                                    hour: hour43,
                                                    minute: minute43,
                                                    second: second43,
                                                    nanosecond: nanosecond43,
                                                } = time41;
                                                *base.add(20).cast::<u8>() = (_rt::as_i32(hour43)) as u8;
                                                *base.add(21).cast::<u8>() = (_rt::as_i32(minute43)) as u8;
                                                *base.add(22).cast::<u8>() = (_rt::as_i32(second43)) as u8;
                                                *base.add(24).cast::<i32>() = _rt::as_i32(nanosecond43);
                                            }
                                            Tsbound::Excluded(e) => {
                                                *base.add(8).cast::<u8>() = (1i32) as u8;
                                                let super::super::super::golem::rdbms::types::Timestamp {
                                                    date: date44,
                                                    time: time44,
                                                } = e;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year45,
                                                    month: month45,
                                                    day: day45,
                                                } = date44;
                                                *base.add(12).cast::<i32>() = _rt::as_i32(year45);
                                                *base.add(16).cast::<u8>() = (_rt::as_i32(month45)) as u8;
                                                *base.add(17).cast::<u8>() = (_rt::as_i32(day45)) as u8;
                                                let super::super::super::golem::rdbms::types::Time {
                                                    hour: hour46,
                                                    minute: minute46,
                                                    second: second46,
                                                    nanosecond: nanosecond46,
                                                } = time44;
                                                *base.add(20).cast::<u8>() = (_rt::as_i32(hour46)) as u8;
                                                *base.add(21).cast::<u8>() = (_rt::as_i32(minute46)) as u8;
                                                *base.add(22).cast::<u8>() = (_rt::as_i32(second46)) as u8;
                                                *base.add(24).cast::<i32>() = _rt::as_i32(nanosecond46);
                                            }
                                            Tsbound::Unbounded => {
                                                *base.add(8).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                        match end40 {
                                            Tsbound::Included(e) => {
                                                *base.add(28).cast::<u8>() = (0i32) as u8;
                                                let super::super::super::golem::rdbms::types::Timestamp {
                                                    date: date47,
                                                    time: time47,
                                                } = e;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year48,
                                                    month: month48,
                                                    day: day48,
                                                } = date47;
                                                *base.add(32).cast::<i32>() = _rt::as_i32(year48);
                                                *base.add(36).cast::<u8>() = (_rt::as_i32(month48)) as u8;
                                                *base.add(37).cast::<u8>() = (_rt::as_i32(day48)) as u8;
                                                let super::super::super::golem::rdbms::types::Time {
                                                    hour: hour49,
                                                    minute: minute49,
                                                    second: second49,
                                                    nanosecond: nanosecond49,
                                                } = time47;
                                                *base.add(40).cast::<u8>() = (_rt::as_i32(hour49)) as u8;
                                                *base.add(41).cast::<u8>() = (_rt::as_i32(minute49)) as u8;
                                                *base.add(42).cast::<u8>() = (_rt::as_i32(second49)) as u8;
                                                *base.add(44).cast::<i32>() = _rt::as_i32(nanosecond49);
                                            }
                                            Tsbound::Excluded(e) => {
                                                *base.add(28).cast::<u8>() = (1i32) as u8;
                                                let super::super::super::golem::rdbms::types::Timestamp {
                                                    date: date50,
                                                    time: time50,
                                                } = e;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year51,
                                                    month: month51,
                                                    day: day51,
                                                } = date50;
                                                *base.add(32).cast::<i32>() = _rt::as_i32(year51);
                                                *base.add(36).cast::<u8>() = (_rt::as_i32(month51)) as u8;
                                                *base.add(37).cast::<u8>() = (_rt::as_i32(day51)) as u8;
                                                let super::super::super::golem::rdbms::types::Time {
                                                    hour: hour52,
                                                    minute: minute52,
                                                    second: second52,
                                                    nanosecond: nanosecond52,
                                                } = time50;
                                                *base.add(40).cast::<u8>() = (_rt::as_i32(hour52)) as u8;
                                                *base.add(41).cast::<u8>() = (_rt::as_i32(minute52)) as u8;
                                                *base.add(42).cast::<u8>() = (_rt::as_i32(second52)) as u8;
                                                *base.add(44).cast::<i32>() = _rt::as_i32(nanosecond52);
                                            }
                                            Tsbound::Unbounded => {
                                                *base.add(28).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                    }
                                    DbValue::Tstzrange(e) => {
                                        *base.add(0).cast::<u8>() = (32i32) as u8;
                                        let Tstzrange { start: start53, end: end53 } = e;
                                        match start53 {
                                            Tstzbound::Included(e) => {
                                                *base.add(8).cast::<u8>() = (0i32) as u8;
                                                let super::super::super::golem::rdbms::types::Timestamptz {
                                                    timestamp: timestamp54,
                                                    offset: offset54,
                                                } = e;
                                                let super::super::super::golem::rdbms::types::Timestamp {
                                                    date: date55,
                                                    time: time55,
                                                } = timestamp54;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year56,
                                                    month: month56,
                                                    day: day56,
                                                } = date55;
                                                *base.add(12).cast::<i32>() = _rt::as_i32(year56);
                                                *base.add(16).cast::<u8>() = (_rt::as_i32(month56)) as u8;
                                                *base.add(17).cast::<u8>() = (_rt::as_i32(day56)) as u8;
                                                let super::super::super::golem::rdbms::types::Time {
                                                    hour: hour57,
                                                    minute: minute57,
                                                    second: second57,
                                                    nanosecond: nanosecond57,
                                                } = time55;
                                                *base.add(20).cast::<u8>() = (_rt::as_i32(hour57)) as u8;
                                                *base.add(21).cast::<u8>() = (_rt::as_i32(minute57)) as u8;
                                                *base.add(22).cast::<u8>() = (_rt::as_i32(second57)) as u8;
                                                *base.add(24).cast::<i32>() = _rt::as_i32(nanosecond57);
                                                *base.add(28).cast::<i32>() = _rt::as_i32(offset54);
                                            }
                                            Tstzbound::Excluded(e) => {
                                                *base.add(8).cast::<u8>() = (1i32) as u8;
                                                let super::super::super::golem::rdbms::types::Timestamptz {
                                                    timestamp: timestamp58,
                                                    offset: offset58,
                                                } = e;
                                                let super::super::super::golem::rdbms::types::Timestamp {
                                                    date: date59,
                                                    time: time59,
                                                } = timestamp58;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year60,
                                                    month: month60,
                                                    day: day60,
                                                } = date59;
                                                *base.add(12).cast::<i32>() = _rt::as_i32(year60);
                                                *base.add(16).cast::<u8>() = (_rt::as_i32(month60)) as u8;
                                                *base.add(17).cast::<u8>() = (_rt::as_i32(day60)) as u8;
                                                let super::super::super::golem::rdbms::types::Time {
                                                    hour: hour61,
                                                    minute: minute61,
                                                    second: second61,
                                                    nanosecond: nanosecond61,
                                                } = time59;
                                                *base.add(20).cast::<u8>() = (_rt::as_i32(hour61)) as u8;
                                                *base.add(21).cast::<u8>() = (_rt::as_i32(minute61)) as u8;
                                                *base.add(22).cast::<u8>() = (_rt::as_i32(second61)) as u8;
                                                *base.add(24).cast::<i32>() = _rt::as_i32(nanosecond61);
                                                *base.add(28).cast::<i32>() = _rt::as_i32(offset58);
                                            }
                                            Tstzbound::Unbounded => {
                                                *base.add(8).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                        match end53 {
                                            Tstzbound::Included(e) => {
                                                *base.add(32).cast::<u8>() = (0i32) as u8;
                                                let super::super::super::golem::rdbms::types::Timestamptz {
                                                    timestamp: timestamp62,
                                                    offset: offset62,
                                                } = e;
                                                let super::super::super::golem::rdbms::types::Timestamp {
                                                    date: date63,
                                                    time: time63,
                                                } = timestamp62;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year64,
                                                    month: month64,
                                                    day: day64,
                                                } = date63;
                                                *base.add(36).cast::<i32>() = _rt::as_i32(year64);
                                                *base.add(40).cast::<u8>() = (_rt::as_i32(month64)) as u8;
                                                *base.add(41).cast::<u8>() = (_rt::as_i32(day64)) as u8;
                                                let super::super::super::golem::rdbms::types::Time {
                                                    hour: hour65,
                                                    minute: minute65,
                                                    second: second65,
                                                    nanosecond: nanosecond65,
                                                } = time63;
                                                *base.add(44).cast::<u8>() = (_rt::as_i32(hour65)) as u8;
                                                *base.add(45).cast::<u8>() = (_rt::as_i32(minute65)) as u8;
                                                *base.add(46).cast::<u8>() = (_rt::as_i32(second65)) as u8;
                                                *base.add(48).cast::<i32>() = _rt::as_i32(nanosecond65);
                                                *base.add(52).cast::<i32>() = _rt::as_i32(offset62);
                                            }
                                            Tstzbound::Excluded(e) => {
                                                *base.add(32).cast::<u8>() = (1i32) as u8;
                                                let super::super::super::golem::rdbms::types::Timestamptz {
                                                    timestamp: timestamp66,
                                                    offset: offset66,
                                                } = e;
                                                let super::super::super::golem::rdbms::types::Timestamp {
                                                    date: date67,
                                                    time: time67,
                                                } = timestamp66;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year68,
                                                    month: month68,
                                                    day: day68,
                                                } = date67;
                                                *base.add(36).cast::<i32>() = _rt::as_i32(year68);
                                                *base.add(40).cast::<u8>() = (_rt::as_i32(month68)) as u8;
                                                *base.add(41).cast::<u8>() = (_rt::as_i32(day68)) as u8;
                                                let super::super::super::golem::rdbms::types::Time {
                                                    hour: hour69,
                                                    minute: minute69,
                                                    second: second69,
                                                    nanosecond: nanosecond69,
                                                } = time67;
                                                *base.add(44).cast::<u8>() = (_rt::as_i32(hour69)) as u8;
                                                *base.add(45).cast::<u8>() = (_rt::as_i32(minute69)) as u8;
                                                *base.add(46).cast::<u8>() = (_rt::as_i32(second69)) as u8;
                                                *base.add(48).cast::<i32>() = _rt::as_i32(nanosecond69);
                                                *base.add(52).cast::<i32>() = _rt::as_i32(offset66);
                                            }
                                            Tstzbound::Unbounded => {
                                                *base.add(32).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                    }
                                    DbValue::Daterange(e) => {
                                        *base.add(0).cast::<u8>() = (33i32) as u8;
                                        let Daterange { start: start70, end: end70 } = e;
                                        match start70 {
                                            Datebound::Included(e) => {
                                                *base.add(8).cast::<u8>() = (0i32) as u8;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year71,
                                                    month: month71,
                                                    day: day71,
                                                } = e;
                                                *base.add(12).cast::<i32>() = _rt::as_i32(year71);
                                                *base.add(16).cast::<u8>() = (_rt::as_i32(month71)) as u8;
                                                *base.add(17).cast::<u8>() = (_rt::as_i32(day71)) as u8;
                                            }
                                            Datebound::Excluded(e) => {
                                                *base.add(8).cast::<u8>() = (1i32) as u8;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year72,
                                                    month: month72,
                                                    day: day72,
                                                } = e;
                                                *base.add(12).cast::<i32>() = _rt::as_i32(year72);
                                                *base.add(16).cast::<u8>() = (_rt::as_i32(month72)) as u8;
                                                *base.add(17).cast::<u8>() = (_rt::as_i32(day72)) as u8;
                                            }
                                            Datebound::Unbounded => {
                                                *base.add(8).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                        match end70 {
                                            Datebound::Included(e) => {
                                                *base.add(20).cast::<u8>() = (0i32) as u8;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year73,
                                                    month: month73,
                                                    day: day73,
                                                } = e;
                                                *base.add(24).cast::<i32>() = _rt::as_i32(year73);
                                                *base.add(28).cast::<u8>() = (_rt::as_i32(month73)) as u8;
                                                *base.add(29).cast::<u8>() = (_rt::as_i32(day73)) as u8;
                                            }
                                            Datebound::Excluded(e) => {
                                                *base.add(20).cast::<u8>() = (1i32) as u8;
                                                let super::super::super::golem::rdbms::types::Date {
                                                    year: year74,
                                                    month: month74,
                                                    day: day74,
                                                } = e;
                                                *base.add(24).cast::<i32>() = _rt::as_i32(year74);
                                                *base.add(28).cast::<u8>() = (_rt::as_i32(month74)) as u8;
                                                *base.add(29).cast::<u8>() = (_rt::as_i32(day74)) as u8;
                                            }
                                            Datebound::Unbounded => {
                                                *base.add(20).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                    }
                                    DbValue::Money(e) => {
                                        *base.add(0).cast::<u8>() = (34i32) as u8;
                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    DbValue::Oid(e) => {
                                        *base.add(0).cast::<u8>() = (35i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::Enumeration(e) => {
                                        *base.add(0).cast::<u8>() = (36i32) as u8;
                                        let Enumeration { name: name75, value: value75 } = e;
                                        let vec76 = name75;
                                        let ptr76 = vec76.as_ptr().cast::<u8>();
                                        let len76 = vec76.len();
                                        *base.add(12).cast::<usize>() = len76;
                                        *base.add(8).cast::<*mut u8>() = ptr76.cast_mut();
                                        let vec77 = value75;
                                        let ptr77 = vec77.as_ptr().cast::<u8>();
                                        let len77 = vec77.len();
                                        *base.add(20).cast::<usize>() = len77;
                                        *base.add(16).cast::<*mut u8>() = ptr77.cast_mut();
                                    }
                                    DbValue::Composite(e) => {
                                        *base.add(0).cast::<u8>() = (37i32) as u8;
                                        let Composite { name: name78, values: values78 } = e;
                                        let vec79 = name78;
                                        let ptr79 = vec79.as_ptr().cast::<u8>();
                                        let len79 = vec79.len();
                                        *base.add(12).cast::<usize>() = len79;
                                        *base.add(8).cast::<*mut u8>() = ptr79.cast_mut();
                                        let vec80 = values78;
                                        let len80 = vec80.len();
                                        let layout80 = _rt::alloc::Layout::from_size_align_unchecked(
                                            vec80.len() * 4,
                                            4,
                                        );
                                        let result80 = if layout80.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout80).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout80);
                                            }
                                            ptr
                                        } else {
                                            ::core::ptr::null_mut()
                                        };
                                        for (i, e) in vec80.into_iter().enumerate() {
                                            let base = result80.add(i * 4);
                                            {
                                                *base.add(0).cast::<i32>() = (e).take_handle() as i32;
                                            }
                                        }
                                        *base.add(20).cast::<usize>() = len80;
                                        *base.add(16).cast::<*mut u8>() = result80;
                                        cleanup_list.extend_from_slice(&[(result80, layout80)]);
                                    }
                                    DbValue::Domain(e) => {
                                        *base.add(0).cast::<u8>() = (38i32) as u8;
                                        let Domain { name: name81, value: value81 } = e;
                                        let vec82 = name81;
                                        let ptr82 = vec82.as_ptr().cast::<u8>();
                                        let len82 = vec82.len();
                                        *base.add(12).cast::<usize>() = len82;
                                        *base.add(8).cast::<*mut u8>() = ptr82.cast_mut();
                                        *base.add(16).cast::<i32>() = (value81).take_handle()
                                            as i32;
                                    }
                                    DbValue::Array(e) => {
                                        *base.add(0).cast::<u8>() = (39i32) as u8;
                                        let vec83 = e;
                                        let len83 = vec83.len();
                                        let layout83 = _rt::alloc::Layout::from_size_align_unchecked(
                                            vec83.len() * 4,
                                            4,
                                        );
                                        let result83 = if layout83.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout83).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout83);
                                            }
                                            ptr
                                        } else {
                                            ::core::ptr::null_mut()
                                        };
                                        for (i, e) in vec83.into_iter().enumerate() {
                                            let base = result83.add(i * 4);
                                            {
                                                *base.add(0).cast::<i32>() = (e).take_handle() as i32;
                                            }
                                        }
                                        *base.add(12).cast::<usize>() = len83;
                                        *base.add(8).cast::<*mut u8>() = result83;
                                        cleanup_list.extend_from_slice(&[(result83, layout83)]);
                                    }
                                    DbValue::Range(e) => {
                                        *base.add(0).cast::<u8>() = (40i32) as u8;
                                        let Range { name: name84, value: value84 } = e;
                                        let vec85 = name84;
                                        let ptr85 = vec85.as_ptr().cast::<u8>();
                                        let len85 = vec85.len();
                                        *base.add(12).cast::<usize>() = len85;
                                        *base.add(8).cast::<*mut u8>() = ptr85.cast_mut();
                                        let ValuesRange { start: start86, end: end86 } = value84;
                                        match start86 {
                                            ValueBound::Included(e) => {
                                                *base.add(16).cast::<u8>() = (0i32) as u8;
                                                *base.add(20).cast::<i32>() = (e).take_handle() as i32;
                                            }
                                            ValueBound::Excluded(e) => {
                                                *base.add(16).cast::<u8>() = (1i32) as u8;
                                                *base.add(20).cast::<i32>() = (e).take_handle() as i32;
                                            }
                                            ValueBound::Unbounded => {
                                                *base.add(16).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                        match end86 {
                                            ValueBound::Included(e) => {
                                                *base.add(24).cast::<u8>() = (0i32) as u8;
                                                *base.add(28).cast::<i32>() = (e).take_handle() as i32;
                                            }
                                            ValueBound::Excluded(e) => {
                                                *base.add(24).cast::<u8>() = (1i32) as u8;
                                                *base.add(28).cast::<i32>() = (e).take_handle() as i32;
                                            }
                                            ValueBound::Unbounded => {
                                                *base.add(24).cast::<u8>() = (2i32) as u8;
                                            }
                                        }
                                    }
                                    DbValue::Null => {
                                        *base.add(0).cast::<u8>() = (41i32) as u8;
                                    }
                                }
                            }
                        }
                        let ptr88 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rdbms/postgres@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]db-transaction.execute"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            result87,
                            len87,
                            ptr88,
                        );
                        let l89 = i32::from(*ptr88.add(0).cast::<u8>());
                        if layout87.size() != 0 {
                            _rt::alloc::dealloc(result87.cast(), layout87);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l89 {
                            0 => {
                                let e = {
                                    let l90 = *ptr88.add(8).cast::<i64>();
                                    l90 as u64
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l91 = i32::from(*ptr88.add(8).cast::<u8>());
                                    let v107 = match l91 {
                                        0 => {
                                            let e107 = {
                                                let l92 = *ptr88.add(12).cast::<*mut u8>();
                                                let l93 = *ptr88.add(16).cast::<usize>();
                                                let len94 = l93;
                                                let bytes94 = _rt::Vec::from_raw_parts(
                                                    l92.cast(),
                                                    len94,
                                                    len94,
                                                );
                                                _rt::string_lift(bytes94)
                                            };
                                            Error::ConnectionFailure(e107)
                                        }
                                        1 => {
                                            let e107 = {
                                                let l95 = *ptr88.add(12).cast::<*mut u8>();
                                                let l96 = *ptr88.add(16).cast::<usize>();
                                                let len97 = l96;
                                                let bytes97 = _rt::Vec::from_raw_parts(
                                                    l95.cast(),
                                                    len97,
                                                    len97,
                                                );
                                                _rt::string_lift(bytes97)
                                            };
                                            Error::QueryParameterFailure(e107)
                                        }
                                        2 => {
                                            let e107 = {
                                                let l98 = *ptr88.add(12).cast::<*mut u8>();
                                                let l99 = *ptr88.add(16).cast::<usize>();
                                                let len100 = l99;
                                                let bytes100 = _rt::Vec::from_raw_parts(
                                                    l98.cast(),
                                                    len100,
                                                    len100,
                                                );
                                                _rt::string_lift(bytes100)
                                            };
                                            Error::QueryExecutionFailure(e107)
                                        }
                                        3 => {
                                            let e107 = {
                                                let l101 = *ptr88.add(12).cast::<*mut u8>();
                                                let l102 = *ptr88.add(16).cast::<usize>();
                                                let len103 = l102;
                                                let bytes103 = _rt::Vec::from_raw_parts(
                                                    l101.cast(),
                                                    len103,
                                                    len103,
                                                );
                                                _rt::string_lift(bytes103)
                                            };
                                            Error::QueryResponseFailure(e107)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 4, "invalid enum discriminant");
                                            let e107 = {
                                                let l104 = *ptr88.add(12).cast::<*mut u8>();
                                                let l105 = *ptr88.add(16).cast::<usize>();
                                                let len106 = l105;
                                                let bytes106 = _rt::Vec::from_raw_parts(
                                                    l104.cast(),
                                                    len106,
                                                    len106,
                                                );
                                                _rt::string_lift(bytes106)
                                            };
                                            Error::Other(e107)
                                        }
                                    };
                                    v107
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl DbTransaction {
                #[allow(unused_unsafe, clippy::all)]
                pub fn commit(&self) -> Result<(), Error> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 16],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rdbms/postgres@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]db-transaction.commit"]
                            fn wit_import(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(4).cast::<u8>());
                                    let v18 = match l2 {
                                        0 => {
                                            let e18 = {
                                                let l3 = *ptr0.add(8).cast::<*mut u8>();
                                                let l4 = *ptr0.add(12).cast::<usize>();
                                                let len5 = l4;
                                                let bytes5 = _rt::Vec::from_raw_parts(
                                                    l3.cast(),
                                                    len5,
                                                    len5,
                                                );
                                                _rt::string_lift(bytes5)
                                            };
                                            Error::ConnectionFailure(e18)
                                        }
                                        1 => {
                                            let e18 = {
                                                let l6 = *ptr0.add(8).cast::<*mut u8>();
                                                let l7 = *ptr0.add(12).cast::<usize>();
                                                let len8 = l7;
                                                let bytes8 = _rt::Vec::from_raw_parts(
                                                    l6.cast(),
                                                    len8,
                                                    len8,
                                                );
                                                _rt::string_lift(bytes8)
                                            };
                                            Error::QueryParameterFailure(e18)
                                        }
                                        2 => {
                                            let e18 = {
                                                let l9 = *ptr0.add(8).cast::<*mut u8>();
                                                let l10 = *ptr0.add(12).cast::<usize>();
                                                let len11 = l10;
                                                let bytes11 = _rt::Vec::from_raw_parts(
                                                    l9.cast(),
                                                    len11,
                                                    len11,
                                                );
                                                _rt::string_lift(bytes11)
                                            };
                                            Error::QueryExecutionFailure(e18)
                                        }
                                        3 => {
                                            let e18 = {
                                                let l12 = *ptr0.add(8).cast::<*mut u8>();
                                                let l13 = *ptr0.add(12).cast::<usize>();
                                                let len14 = l13;
                                                let bytes14 = _rt::Vec::from_raw_parts(
                                                    l12.cast(),
                                                    len14,
                                                    len14,
                                                );
                                                _rt::string_lift(bytes14)
                                            };
                                            Error::QueryResponseFailure(e18)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 4, "invalid enum discriminant");
                                            let e18 = {
                                                let l15 = *ptr0.add(8).cast::<*mut u8>();
                                                let l16 = *ptr0.add(12).cast::<usize>();
                                                let len17 = l16;
                                                let bytes17 = _rt::Vec::from_raw_parts(
                                                    l15.cast(),
                                                    len17,
                                                    len17,
                                                );
                                                _rt::string_lift(bytes17)
                                            };
                                            Error::Other(e18)
                                        }
                                    };
                                    v18
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl DbTransaction {
                #[allow(unused_unsafe, clippy::all)]
                pub fn rollback(&self) -> Result<(), Error> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 16],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rdbms/postgres@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]db-transaction.rollback"]
                            fn wit_import(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(4).cast::<u8>());
                                    let v18 = match l2 {
                                        0 => {
                                            let e18 = {
                                                let l3 = *ptr0.add(8).cast::<*mut u8>();
                                                let l4 = *ptr0.add(12).cast::<usize>();
                                                let len5 = l4;
                                                let bytes5 = _rt::Vec::from_raw_parts(
                                                    l3.cast(),
                                                    len5,
                                                    len5,
                                                );
                                                _rt::string_lift(bytes5)
                                            };
                                            Error::ConnectionFailure(e18)
                                        }
                                        1 => {
                                            let e18 = {
                                                let l6 = *ptr0.add(8).cast::<*mut u8>();
                                                let l7 = *ptr0.add(12).cast::<usize>();
                                                let len8 = l7;
                                                let bytes8 = _rt::Vec::from_raw_parts(
                                                    l6.cast(),
                                                    len8,
                                                    len8,
                                                );
                                                _rt::string_lift(bytes8)
                                            };
                                            Error::QueryParameterFailure(e18)
                                        }
                                        2 => {
                                            let e18 = {
                                                let l9 = *ptr0.add(8).cast::<*mut u8>();
                                                let l10 = *ptr0.add(12).cast::<usize>();
                                                let len11 = l10;
                                                let bytes11 = _rt::Vec::from_raw_parts(
                                                    l9.cast(),
                                                    len11,
                                                    len11,
                                                );
                                                _rt::string_lift(bytes11)
                                            };
                                            Error::QueryExecutionFailure(e18)
                                        }
                                        3 => {
                                            let e18 = {
                                                let l12 = *ptr0.add(8).cast::<*mut u8>();
                                                let l13 = *ptr0.add(12).cast::<usize>();
                                                let len14 = l13;
                                                let bytes14 = _rt::Vec::from_raw_parts(
                                                    l12.cast(),
                                                    len14,
                                                    len14,
                                                );
                                                _rt::string_lift(bytes14)
                                            };
                                            Error::QueryResponseFailure(e18)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 4, "invalid enum discriminant");
                                            let e18 = {
                                                let l15 = *ptr0.add(8).cast::<*mut u8>();
                                                let l16 = *ptr0.add(12).cast::<usize>();
                                                let len17 = l16;
                                                let bytes17 = _rt::Vec::from_raw_parts(
                                                    l15.cast(),
                                                    len17,
                                                    len17,
                                                );
                                                _rt::string_lift(bytes17)
                                            };
                                            Error::Other(e18)
                                        }
                                    };
                                    v18
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
        }
        #[allow(dead_code, clippy::all)]
        pub mod mysql {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Date = super::super::super::golem::rdbms::types::Date;
            pub type Time = super::super::super::golem::rdbms::types::Time;
            pub type Timestamp = super::super::super::golem::rdbms::types::Timestamp;
            #[derive(Clone)]
            pub enum Error {
                ConnectionFailure(_rt::String),
                QueryParameterFailure(_rt::String),
                QueryExecutionFailure(_rt::String),
                QueryResponseFailure(_rt::String),
                Other(_rt::String),
            }
            impl ::core::fmt::Debug for Error {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        Error::ConnectionFailure(e) => {
                            f.debug_tuple("Error::ConnectionFailure").field(e).finish()
                        }
                        Error::QueryParameterFailure(e) => {
                            f.debug_tuple("Error::QueryParameterFailure")
                                .field(e)
                                .finish()
                        }
                        Error::QueryExecutionFailure(e) => {
                            f.debug_tuple("Error::QueryExecutionFailure")
                                .field(e)
                                .finish()
                        }
                        Error::QueryResponseFailure(e) => {
                            f.debug_tuple("Error::QueryResponseFailure")
                                .field(e)
                                .finish()
                        }
                        Error::Other(e) => {
                            f.debug_tuple("Error::Other").field(e).finish()
                        }
                    }
                }
            }
            impl ::core::fmt::Display for Error {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }
            impl std::error::Error for Error {}
            #[derive(Clone, Copy)]
            pub enum DbColumnType {
                Boolean,
                Tinyint,
                Smallint,
                Mediumint,
                Int,
                Bigint,
                TinyintUnsigned,
                SmallintUnsigned,
                MediumintUnsigned,
                IntUnsigned,
                BigintUnsigned,
                Float,
                Double,
                Decimal,
                Date,
                Datetime,
                Timestamp,
                Time,
                Year,
                Fixchar,
                Varchar,
                Tinytext,
                Text,
                Mediumtext,
                Longtext,
                Binary,
                Varbinary,
                Tinyblob,
                Blob,
                Mediumblob,
                Longblob,
                Enumeration,
                Set,
                Bit,
                Json,
            }
            impl ::core::fmt::Debug for DbColumnType {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        DbColumnType::Boolean => {
                            f.debug_tuple("DbColumnType::Boolean").finish()
                        }
                        DbColumnType::Tinyint => {
                            f.debug_tuple("DbColumnType::Tinyint").finish()
                        }
                        DbColumnType::Smallint => {
                            f.debug_tuple("DbColumnType::Smallint").finish()
                        }
                        DbColumnType::Mediumint => {
                            f.debug_tuple("DbColumnType::Mediumint").finish()
                        }
                        DbColumnType::Int => f.debug_tuple("DbColumnType::Int").finish(),
                        DbColumnType::Bigint => {
                            f.debug_tuple("DbColumnType::Bigint").finish()
                        }
                        DbColumnType::TinyintUnsigned => {
                            f.debug_tuple("DbColumnType::TinyintUnsigned").finish()
                        }
                        DbColumnType::SmallintUnsigned => {
                            f.debug_tuple("DbColumnType::SmallintUnsigned").finish()
                        }
                        DbColumnType::MediumintUnsigned => {
                            f.debug_tuple("DbColumnType::MediumintUnsigned").finish()
                        }
                        DbColumnType::IntUnsigned => {
                            f.debug_tuple("DbColumnType::IntUnsigned").finish()
                        }
                        DbColumnType::BigintUnsigned => {
                            f.debug_tuple("DbColumnType::BigintUnsigned").finish()
                        }
                        DbColumnType::Float => {
                            f.debug_tuple("DbColumnType::Float").finish()
                        }
                        DbColumnType::Double => {
                            f.debug_tuple("DbColumnType::Double").finish()
                        }
                        DbColumnType::Decimal => {
                            f.debug_tuple("DbColumnType::Decimal").finish()
                        }
                        DbColumnType::Date => {
                            f.debug_tuple("DbColumnType::Date").finish()
                        }
                        DbColumnType::Datetime => {
                            f.debug_tuple("DbColumnType::Datetime").finish()
                        }
                        DbColumnType::Timestamp => {
                            f.debug_tuple("DbColumnType::Timestamp").finish()
                        }
                        DbColumnType::Time => {
                            f.debug_tuple("DbColumnType::Time").finish()
                        }
                        DbColumnType::Year => {
                            f.debug_tuple("DbColumnType::Year").finish()
                        }
                        DbColumnType::Fixchar => {
                            f.debug_tuple("DbColumnType::Fixchar").finish()
                        }
                        DbColumnType::Varchar => {
                            f.debug_tuple("DbColumnType::Varchar").finish()
                        }
                        DbColumnType::Tinytext => {
                            f.debug_tuple("DbColumnType::Tinytext").finish()
                        }
                        DbColumnType::Text => {
                            f.debug_tuple("DbColumnType::Text").finish()
                        }
                        DbColumnType::Mediumtext => {
                            f.debug_tuple("DbColumnType::Mediumtext").finish()
                        }
                        DbColumnType::Longtext => {
                            f.debug_tuple("DbColumnType::Longtext").finish()
                        }
                        DbColumnType::Binary => {
                            f.debug_tuple("DbColumnType::Binary").finish()
                        }
                        DbColumnType::Varbinary => {
                            f.debug_tuple("DbColumnType::Varbinary").finish()
                        }
                        DbColumnType::Tinyblob => {
                            f.debug_tuple("DbColumnType::Tinyblob").finish()
                        }
                        DbColumnType::Blob => {
                            f.debug_tuple("DbColumnType::Blob").finish()
                        }
                        DbColumnType::Mediumblob => {
                            f.debug_tuple("DbColumnType::Mediumblob").finish()
                        }
                        DbColumnType::Longblob => {
                            f.debug_tuple("DbColumnType::Longblob").finish()
                        }
                        DbColumnType::Enumeration => {
                            f.debug_tuple("DbColumnType::Enumeration").finish()
                        }
                        DbColumnType::Set => f.debug_tuple("DbColumnType::Set").finish(),
                        DbColumnType::Bit => f.debug_tuple("DbColumnType::Bit").finish(),
                        DbColumnType::Json => {
                            f.debug_tuple("DbColumnType::Json").finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub struct DbColumn {
                pub ordinal: u64,
                pub name: _rt::String,
                pub db_type: DbColumnType,
                pub db_type_name: _rt::String,
            }
            impl ::core::fmt::Debug for DbColumn {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("DbColumn")
                        .field("ordinal", &self.ordinal)
                        .field("name", &self.name)
                        .field("db-type", &self.db_type)
                        .field("db-type-name", &self.db_type_name)
                        .finish()
                }
            }
            /// Value descriptor for a single database value
            #[derive(Clone)]
            pub enum DbValue {
                Boolean(bool),
                Tinyint(i8),
                Smallint(i16),
                /// s24
                Mediumint(i32),
                Int(i32),
                Bigint(i64),
                TinyintUnsigned(u8),
                SmallintUnsigned(u16),
                /// u24
                MediumintUnsigned(u32),
                IntUnsigned(u32),
                BigintUnsigned(u64),
                Float(f32),
                Double(f64),
                Decimal(_rt::String),
                Date(Date),
                Datetime(Timestamp),
                Timestamp(Timestamp),
                Time(Time),
                Year(u16),
                Fixchar(_rt::String),
                Varchar(_rt::String),
                Tinytext(_rt::String),
                Text(_rt::String),
                Mediumtext(_rt::String),
                Longtext(_rt::String),
                Binary(_rt::Vec<u8>),
                Varbinary(_rt::Vec<u8>),
                Tinyblob(_rt::Vec<u8>),
                Blob(_rt::Vec<u8>),
                Mediumblob(_rt::Vec<u8>),
                Longblob(_rt::Vec<u8>),
                Enumeration(_rt::String),
                Set(_rt::String),
                Bit(_rt::Vec<bool>),
                Json(_rt::String),
                Null,
            }
            impl ::core::fmt::Debug for DbValue {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        DbValue::Boolean(e) => {
                            f.debug_tuple("DbValue::Boolean").field(e).finish()
                        }
                        DbValue::Tinyint(e) => {
                            f.debug_tuple("DbValue::Tinyint").field(e).finish()
                        }
                        DbValue::Smallint(e) => {
                            f.debug_tuple("DbValue::Smallint").field(e).finish()
                        }
                        DbValue::Mediumint(e) => {
                            f.debug_tuple("DbValue::Mediumint").field(e).finish()
                        }
                        DbValue::Int(e) => {
                            f.debug_tuple("DbValue::Int").field(e).finish()
                        }
                        DbValue::Bigint(e) => {
                            f.debug_tuple("DbValue::Bigint").field(e).finish()
                        }
                        DbValue::TinyintUnsigned(e) => {
                            f.debug_tuple("DbValue::TinyintUnsigned").field(e).finish()
                        }
                        DbValue::SmallintUnsigned(e) => {
                            f.debug_tuple("DbValue::SmallintUnsigned").field(e).finish()
                        }
                        DbValue::MediumintUnsigned(e) => {
                            f.debug_tuple("DbValue::MediumintUnsigned").field(e).finish()
                        }
                        DbValue::IntUnsigned(e) => {
                            f.debug_tuple("DbValue::IntUnsigned").field(e).finish()
                        }
                        DbValue::BigintUnsigned(e) => {
                            f.debug_tuple("DbValue::BigintUnsigned").field(e).finish()
                        }
                        DbValue::Float(e) => {
                            f.debug_tuple("DbValue::Float").field(e).finish()
                        }
                        DbValue::Double(e) => {
                            f.debug_tuple("DbValue::Double").field(e).finish()
                        }
                        DbValue::Decimal(e) => {
                            f.debug_tuple("DbValue::Decimal").field(e).finish()
                        }
                        DbValue::Date(e) => {
                            f.debug_tuple("DbValue::Date").field(e).finish()
                        }
                        DbValue::Datetime(e) => {
                            f.debug_tuple("DbValue::Datetime").field(e).finish()
                        }
                        DbValue::Timestamp(e) => {
                            f.debug_tuple("DbValue::Timestamp").field(e).finish()
                        }
                        DbValue::Time(e) => {
                            f.debug_tuple("DbValue::Time").field(e).finish()
                        }
                        DbValue::Year(e) => {
                            f.debug_tuple("DbValue::Year").field(e).finish()
                        }
                        DbValue::Fixchar(e) => {
                            f.debug_tuple("DbValue::Fixchar").field(e).finish()
                        }
                        DbValue::Varchar(e) => {
                            f.debug_tuple("DbValue::Varchar").field(e).finish()
                        }
                        DbValue::Tinytext(e) => {
                            f.debug_tuple("DbValue::Tinytext").field(e).finish()
                        }
                        DbValue::Text(e) => {
                            f.debug_tuple("DbValue::Text").field(e).finish()
                        }
                        DbValue::Mediumtext(e) => {
                            f.debug_tuple("DbValue::Mediumtext").field(e).finish()
                        }
                        DbValue::Longtext(e) => {
                            f.debug_tuple("DbValue::Longtext").field(e).finish()
                        }
                        DbValue::Binary(e) => {
                            f.debug_tuple("DbValue::Binary").field(e).finish()
                        }
                        DbValue::Varbinary(e) => {
                            f.debug_tuple("DbValue::Varbinary").field(e).finish()
                        }
                        DbValue::Tinyblob(e) => {
                            f.debug_tuple("DbValue::Tinyblob").field(e).finish()
                        }
                        DbValue::Blob(e) => {
                            f.debug_tuple("DbValue::Blob").field(e).finish()
                        }
                        DbValue::Mediumblob(e) => {
                            f.debug_tuple("DbValue::Mediumblob").field(e).finish()
                        }
                        DbValue::Longblob(e) => {
                            f.debug_tuple("DbValue::Longblob").field(e).finish()
                        }
                        DbValue::Enumeration(e) => {
                            f.debug_tuple("DbValue::Enumeration").field(e).finish()
                        }
                        DbValue::Set(e) => {
                            f.debug_tuple("DbValue::Set").field(e).finish()
                        }
                        DbValue::Bit(e) => {
                            f.debug_tuple("DbValue::Bit").field(e).finish()
                        }
                        DbValue::Json(e) => {
                            f.debug_tuple("DbValue::Json").field(e).finish()
                        }
                        DbValue::Null => f.debug_tuple("DbValue::Null").finish(),
                    }
                }
            }
            /// A single row of values
            #[derive(Clone)]
            pub struct DbRow {
                pub values: _rt::Vec<DbValue>,
            }
            impl ::core::fmt::Debug for DbRow {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("DbRow").field("values", &self.values).finish()
                }
            }
            #[derive(Clone)]
            pub struct DbResult {
                pub columns: _rt::Vec<DbColumn>,
                pub rows: _rt::Vec<DbRow>,
            }
            impl ::core::fmt::Debug for DbResult {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("DbResult")
                        .field("columns", &self.columns)
                        .field("rows", &self.rows)
                        .finish()
                }
            }
            /// A potentially very large and lazy stream of rows:
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct DbResultStream {
                handle: _rt::Resource<DbResultStream>,
            }
            impl DbResultStream {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for DbResultStream {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:rdbms/mysql@0.0.1")]
                        extern "C" {
                            #[link_name = "[resource-drop]db-result-stream"]
                            fn drop(_: u32);
                        }
                        drop(_handle);
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct DbConnection {
                handle: _rt::Resource<DbConnection>,
            }
            impl DbConnection {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for DbConnection {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:rdbms/mysql@0.0.1")]
                        extern "C" {
                            #[link_name = "[resource-drop]db-connection"]
                            fn drop(_: u32);
                        }
                        drop(_handle);
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct DbTransaction {
                handle: _rt::Resource<DbTransaction>,
            }
            impl DbTransaction {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for DbTransaction {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:rdbms/mysql@0.0.1")]
                        extern "C" {
                            #[link_name = "[resource-drop]db-transaction"]
                            fn drop(_: u32);
                        }
                        drop(_handle);
                    }
                }
            }
            impl DbResultStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_columns(&self) -> _rt::Vec<DbColumn> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 8],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rdbms/mysql@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]db-result-stream.get-columns"]
                            fn wit_import(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let base12 = l1;
                        let len12 = l2;
                        let mut result12 = _rt::Vec::with_capacity(len12);
                        for i in 0..len12 {
                            let base = base12.add(i * 32);
                            let e12 = {
                                let l3 = *base.add(0).cast::<i64>();
                                let l4 = *base.add(8).cast::<*mut u8>();
                                let l5 = *base.add(12).cast::<usize>();
                                let len6 = l5;
                                let bytes6 = _rt::Vec::from_raw_parts(
                                    l4.cast(),
                                    len6,
                                    len6,
                                );
                                let l7 = i32::from(*base.add(16).cast::<u8>());
                                let v8 = match l7 {
                                    0 => DbColumnType::Boolean,
                                    1 => DbColumnType::Tinyint,
                                    2 => DbColumnType::Smallint,
                                    3 => DbColumnType::Mediumint,
                                    4 => DbColumnType::Int,
                                    5 => DbColumnType::Bigint,
                                    6 => DbColumnType::TinyintUnsigned,
                                    7 => DbColumnType::SmallintUnsigned,
                                    8 => DbColumnType::MediumintUnsigned,
                                    9 => DbColumnType::IntUnsigned,
                                    10 => DbColumnType::BigintUnsigned,
                                    11 => DbColumnType::Float,
                                    12 => DbColumnType::Double,
                                    13 => DbColumnType::Decimal,
                                    14 => DbColumnType::Date,
                                    15 => DbColumnType::Datetime,
                                    16 => DbColumnType::Timestamp,
                                    17 => DbColumnType::Time,
                                    18 => DbColumnType::Year,
                                    19 => DbColumnType::Fixchar,
                                    20 => DbColumnType::Varchar,
                                    21 => DbColumnType::Tinytext,
                                    22 => DbColumnType::Text,
                                    23 => DbColumnType::Mediumtext,
                                    24 => DbColumnType::Longtext,
                                    25 => DbColumnType::Binary,
                                    26 => DbColumnType::Varbinary,
                                    27 => DbColumnType::Tinyblob,
                                    28 => DbColumnType::Blob,
                                    29 => DbColumnType::Mediumblob,
                                    30 => DbColumnType::Longblob,
                                    31 => DbColumnType::Enumeration,
                                    32 => DbColumnType::Set,
                                    33 => DbColumnType::Bit,
                                    n => {
                                        debug_assert_eq!(n, 34, "invalid enum discriminant");
                                        DbColumnType::Json
                                    }
                                };
                                let l9 = *base.add(20).cast::<*mut u8>();
                                let l10 = *base.add(24).cast::<usize>();
                                let len11 = l10;
                                let bytes11 = _rt::Vec::from_raw_parts(
                                    l9.cast(),
                                    len11,
                                    len11,
                                );
                                DbColumn {
                                    ordinal: l3 as u64,
                                    name: _rt::string_lift(bytes6),
                                    db_type: v8,
                                    db_type_name: _rt::string_lift(bytes11),
                                }
                            };
                            result12.push(e12);
                        }
                        _rt::cabi_dealloc(base12, len12 * 32, 8);
                        result12
                    }
                }
            }
            impl DbResultStream {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_next(&self) -> Option<_rt::Vec<DbRow>> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 12],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rdbms/mysql@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]db-result-stream.get-next"]
                            fn wit_import(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<*mut u8>();
                                    let l3 = *ptr0.add(8).cast::<usize>();
                                    let base96 = l2;
                                    let len96 = l3;
                                    let mut result96 = _rt::Vec::with_capacity(len96);
                                    for i in 0..len96 {
                                        let base = base96.add(i * 8);
                                        let e96 = {
                                            let l4 = *base.add(0).cast::<*mut u8>();
                                            let l5 = *base.add(4).cast::<usize>();
                                            let base95 = l4;
                                            let len95 = l5;
                                            let mut result95 = _rt::Vec::with_capacity(len95);
                                            for i in 0..len95 {
                                                let base = base95.add(i * 24);
                                                let e95 = {
                                                    let l6 = i32::from(*base.add(0).cast::<u8>());
                                                    let v94 = match l6 {
                                                        0 => {
                                                            let e94 = {
                                                                let l7 = i32::from(*base.add(8).cast::<u8>());
                                                                _rt::bool_lift(l7 as u8)
                                                            };
                                                            DbValue::Boolean(e94)
                                                        }
                                                        1 => {
                                                            let e94 = {
                                                                let l8 = i32::from(*base.add(8).cast::<i8>());
                                                                l8 as i8
                                                            };
                                                            DbValue::Tinyint(e94)
                                                        }
                                                        2 => {
                                                            let e94 = {
                                                                let l9 = i32::from(*base.add(8).cast::<i16>());
                                                                l9 as i16
                                                            };
                                                            DbValue::Smallint(e94)
                                                        }
                                                        3 => {
                                                            let e94 = {
                                                                let l10 = *base.add(8).cast::<i32>();
                                                                l10
                                                            };
                                                            DbValue::Mediumint(e94)
                                                        }
                                                        4 => {
                                                            let e94 = {
                                                                let l11 = *base.add(8).cast::<i32>();
                                                                l11
                                                            };
                                                            DbValue::Int(e94)
                                                        }
                                                        5 => {
                                                            let e94 = {
                                                                let l12 = *base.add(8).cast::<i64>();
                                                                l12
                                                            };
                                                            DbValue::Bigint(e94)
                                                        }
                                                        6 => {
                                                            let e94 = {
                                                                let l13 = i32::from(*base.add(8).cast::<u8>());
                                                                l13 as u8
                                                            };
                                                            DbValue::TinyintUnsigned(e94)
                                                        }
                                                        7 => {
                                                            let e94 = {
                                                                let l14 = i32::from(*base.add(8).cast::<u16>());
                                                                l14 as u16
                                                            };
                                                            DbValue::SmallintUnsigned(e94)
                                                        }
                                                        8 => {
                                                            let e94 = {
                                                                let l15 = *base.add(8).cast::<i32>();
                                                                l15 as u32
                                                            };
                                                            DbValue::MediumintUnsigned(e94)
                                                        }
                                                        9 => {
                                                            let e94 = {
                                                                let l16 = *base.add(8).cast::<i32>();
                                                                l16 as u32
                                                            };
                                                            DbValue::IntUnsigned(e94)
                                                        }
                                                        10 => {
                                                            let e94 = {
                                                                let l17 = *base.add(8).cast::<i64>();
                                                                l17 as u64
                                                            };
                                                            DbValue::BigintUnsigned(e94)
                                                        }
                                                        11 => {
                                                            let e94 = {
                                                                let l18 = *base.add(8).cast::<f32>();
                                                                l18
                                                            };
                                                            DbValue::Float(e94)
                                                        }
                                                        12 => {
                                                            let e94 = {
                                                                let l19 = *base.add(8).cast::<f64>();
                                                                l19
                                                            };
                                                            DbValue::Double(e94)
                                                        }
                                                        13 => {
                                                            let e94 = {
                                                                let l20 = *base.add(8).cast::<*mut u8>();
                                                                let l21 = *base.add(12).cast::<usize>();
                                                                let len22 = l21;
                                                                let bytes22 = _rt::Vec::from_raw_parts(
                                                                    l20.cast(),
                                                                    len22,
                                                                    len22,
                                                                );
                                                                _rt::string_lift(bytes22)
                                                            };
                                                            DbValue::Decimal(e94)
                                                        }
                                                        14 => {
                                                            let e94 = {
                                                                let l23 = *base.add(8).cast::<i32>();
                                                                let l24 = i32::from(*base.add(12).cast::<u8>());
                                                                let l25 = i32::from(*base.add(13).cast::<u8>());
                                                                super::super::super::golem::rdbms::types::Date {
                                                                    year: l23,
                                                                    month: l24 as u8,
                                                                    day: l25 as u8,
                                                                }
                                                            };
                                                            DbValue::Date(e94)
                                                        }
                                                        15 => {
                                                            let e94 = {
                                                                let l26 = *base.add(8).cast::<i32>();
                                                                let l27 = i32::from(*base.add(12).cast::<u8>());
                                                                let l28 = i32::from(*base.add(13).cast::<u8>());
                                                                let l29 = i32::from(*base.add(16).cast::<u8>());
                                                                let l30 = i32::from(*base.add(17).cast::<u8>());
                                                                let l31 = i32::from(*base.add(18).cast::<u8>());
                                                                let l32 = *base.add(20).cast::<i32>();
                                                                super::super::super::golem::rdbms::types::Timestamp {
                                                                    date: super::super::super::golem::rdbms::types::Date {
                                                                        year: l26,
                                                                        month: l27 as u8,
                                                                        day: l28 as u8,
                                                                    },
                                                                    time: super::super::super::golem::rdbms::types::Time {
                                                                        hour: l29 as u8,
                                                                        minute: l30 as u8,
                                                                        second: l31 as u8,
                                                                        nanosecond: l32 as u32,
                                                                    },
                                                                }
                                                            };
                                                            DbValue::Datetime(e94)
                                                        }
                                                        16 => {
                                                            let e94 = {
                                                                let l33 = *base.add(8).cast::<i32>();
                                                                let l34 = i32::from(*base.add(12).cast::<u8>());
                                                                let l35 = i32::from(*base.add(13).cast::<u8>());
                                                                let l36 = i32::from(*base.add(16).cast::<u8>());
                                                                let l37 = i32::from(*base.add(17).cast::<u8>());
                                                                let l38 = i32::from(*base.add(18).cast::<u8>());
                                                                let l39 = *base.add(20).cast::<i32>();
                                                                super::super::super::golem::rdbms::types::Timestamp {
                                                                    date: super::super::super::golem::rdbms::types::Date {
                                                                        year: l33,
                                                                        month: l34 as u8,
                                                                        day: l35 as u8,
                                                                    },
                                                                    time: super::super::super::golem::rdbms::types::Time {
                                                                        hour: l36 as u8,
                                                                        minute: l37 as u8,
                                                                        second: l38 as u8,
                                                                        nanosecond: l39 as u32,
                                                                    },
                                                                }
                                                            };
                                                            DbValue::Timestamp(e94)
                                                        }
                                                        17 => {
                                                            let e94 = {
                                                                let l40 = i32::from(*base.add(8).cast::<u8>());
                                                                let l41 = i32::from(*base.add(9).cast::<u8>());
                                                                let l42 = i32::from(*base.add(10).cast::<u8>());
                                                                let l43 = *base.add(12).cast::<i32>();
                                                                super::super::super::golem::rdbms::types::Time {
                                                                    hour: l40 as u8,
                                                                    minute: l41 as u8,
                                                                    second: l42 as u8,
                                                                    nanosecond: l43 as u32,
                                                                }
                                                            };
                                                            DbValue::Time(e94)
                                                        }
                                                        18 => {
                                                            let e94 = {
                                                                let l44 = i32::from(*base.add(8).cast::<u16>());
                                                                l44 as u16
                                                            };
                                                            DbValue::Year(e94)
                                                        }
                                                        19 => {
                                                            let e94 = {
                                                                let l45 = *base.add(8).cast::<*mut u8>();
                                                                let l46 = *base.add(12).cast::<usize>();
                                                                let len47 = l46;
                                                                let bytes47 = _rt::Vec::from_raw_parts(
                                                                    l45.cast(),
                                                                    len47,
                                                                    len47,
                                                                );
                                                                _rt::string_lift(bytes47)
                                                            };
                                                            DbValue::Fixchar(e94)
                                                        }
                                                        20 => {
                                                            let e94 = {
                                                                let l48 = *base.add(8).cast::<*mut u8>();
                                                                let l49 = *base.add(12).cast::<usize>();
                                                                let len50 = l49;
                                                                let bytes50 = _rt::Vec::from_raw_parts(
                                                                    l48.cast(),
                                                                    len50,
                                                                    len50,
                                                                );
                                                                _rt::string_lift(bytes50)
                                                            };
                                                            DbValue::Varchar(e94)
                                                        }
                                                        21 => {
                                                            let e94 = {
                                                                let l51 = *base.add(8).cast::<*mut u8>();
                                                                let l52 = *base.add(12).cast::<usize>();
                                                                let len53 = l52;
                                                                let bytes53 = _rt::Vec::from_raw_parts(
                                                                    l51.cast(),
                                                                    len53,
                                                                    len53,
                                                                );
                                                                _rt::string_lift(bytes53)
                                                            };
                                                            DbValue::Tinytext(e94)
                                                        }
                                                        22 => {
                                                            let e94 = {
                                                                let l54 = *base.add(8).cast::<*mut u8>();
                                                                let l55 = *base.add(12).cast::<usize>();
                                                                let len56 = l55;
                                                                let bytes56 = _rt::Vec::from_raw_parts(
                                                                    l54.cast(),
                                                                    len56,
                                                                    len56,
                                                                );
                                                                _rt::string_lift(bytes56)
                                                            };
                                                            DbValue::Text(e94)
                                                        }
                                                        23 => {
                                                            let e94 = {
                                                                let l57 = *base.add(8).cast::<*mut u8>();
                                                                let l58 = *base.add(12).cast::<usize>();
                                                                let len59 = l58;
                                                                let bytes59 = _rt::Vec::from_raw_parts(
                                                                    l57.cast(),
                                                                    len59,
                                                                    len59,
                                                                );
                                                                _rt::string_lift(bytes59)
                                                            };
                                                            DbValue::Mediumtext(e94)
                                                        }
                                                        24 => {
                                                            let e94 = {
                                                                let l60 = *base.add(8).cast::<*mut u8>();
                                                                let l61 = *base.add(12).cast::<usize>();
                                                                let len62 = l61;
                                                                let bytes62 = _rt::Vec::from_raw_parts(
                                                                    l60.cast(),
                                                                    len62,
                                                                    len62,
                                                                );
                                                                _rt::string_lift(bytes62)
                                                            };
                                                            DbValue::Longtext(e94)
                                                        }
                                                        25 => {
                                                            let e94 = {
                                                                let l63 = *base.add(8).cast::<*mut u8>();
                                                                let l64 = *base.add(12).cast::<usize>();
                                                                let len65 = l64;
                                                                _rt::Vec::from_raw_parts(l63.cast(), len65, len65)
                                                            };
                                                            DbValue::Binary(e94)
                                                        }
                                                        26 => {
                                                            let e94 = {
                                                                let l66 = *base.add(8).cast::<*mut u8>();
                                                                let l67 = *base.add(12).cast::<usize>();
                                                                let len68 = l67;
                                                                _rt::Vec::from_raw_parts(l66.cast(), len68, len68)
                                                            };
                                                            DbValue::Varbinary(e94)
                                                        }
                                                        27 => {
                                                            let e94 = {
                                                                let l69 = *base.add(8).cast::<*mut u8>();
                                                                let l70 = *base.add(12).cast::<usize>();
                                                                let len71 = l70;
                                                                _rt::Vec::from_raw_parts(l69.cast(), len71, len71)
                                                            };
                                                            DbValue::Tinyblob(e94)
                                                        }
                                                        28 => {
                                                            let e94 = {
                                                                let l72 = *base.add(8).cast::<*mut u8>();
                                                                let l73 = *base.add(12).cast::<usize>();
                                                                let len74 = l73;
                                                                _rt::Vec::from_raw_parts(l72.cast(), len74, len74)
                                                            };
                                                            DbValue::Blob(e94)
                                                        }
                                                        29 => {
                                                            let e94 = {
                                                                let l75 = *base.add(8).cast::<*mut u8>();
                                                                let l76 = *base.add(12).cast::<usize>();
                                                                let len77 = l76;
                                                                _rt::Vec::from_raw_parts(l75.cast(), len77, len77)
                                                            };
                                                            DbValue::Mediumblob(e94)
                                                        }
                                                        30 => {
                                                            let e94 = {
                                                                let l78 = *base.add(8).cast::<*mut u8>();
                                                                let l79 = *base.add(12).cast::<usize>();
                                                                let len80 = l79;
                                                                _rt::Vec::from_raw_parts(l78.cast(), len80, len80)
                                                            };
                                                            DbValue::Longblob(e94)
                                                        }
                                                        31 => {
                                                            let e94 = {
                                                                let l81 = *base.add(8).cast::<*mut u8>();
                                                                let l82 = *base.add(12).cast::<usize>();
                                                                let len83 = l82;
                                                                let bytes83 = _rt::Vec::from_raw_parts(
                                                                    l81.cast(),
                                                                    len83,
                                                                    len83,
                                                                );
                                                                _rt::string_lift(bytes83)
                                                            };
                                                            DbValue::Enumeration(e94)
                                                        }
                                                        32 => {
                                                            let e94 = {
                                                                let l84 = *base.add(8).cast::<*mut u8>();
                                                                let l85 = *base.add(12).cast::<usize>();
                                                                let len86 = l85;
                                                                let bytes86 = _rt::Vec::from_raw_parts(
                                                                    l84.cast(),
                                                                    len86,
                                                                    len86,
                                                                );
                                                                _rt::string_lift(bytes86)
                                                            };
                                                            DbValue::Set(e94)
                                                        }
                                                        33 => {
                                                            let e94 = {
                                                                let l87 = *base.add(8).cast::<*mut u8>();
                                                                let l88 = *base.add(12).cast::<usize>();
                                                                let base90 = l87;
                                                                let len90 = l88;
                                                                let mut result90 = _rt::Vec::with_capacity(len90);
                                                                for i in 0..len90 {
                                                                    let base = base90.add(i * 1);
                                                                    let e90 = {
                                                                        let l89 = i32::from(*base.add(0).cast::<u8>());
                                                                        _rt::bool_lift(l89 as u8)
                                                                    };
                                                                    result90.push(e90);
                                                                }
                                                                _rt::cabi_dealloc(base90, len90 * 1, 1);
                                                                result90
                                                            };
                                                            DbValue::Bit(e94)
                                                        }
                                                        34 => {
                                                            let e94 = {
                                                                let l91 = *base.add(8).cast::<*mut u8>();
                                                                let l92 = *base.add(12).cast::<usize>();
                                                                let len93 = l92;
                                                                let bytes93 = _rt::Vec::from_raw_parts(
                                                                    l91.cast(),
                                                                    len93,
                                                                    len93,
                                                                );
                                                                _rt::string_lift(bytes93)
                                                            };
                                                            DbValue::Json(e94)
                                                        }
                                                        n => {
                                                            debug_assert_eq!(n, 35, "invalid enum discriminant");
                                                            DbValue::Null
                                                        }
                                                    };
                                                    v94
                                                };
                                                result95.push(e95);
                                            }
                                            _rt::cabi_dealloc(base95, len95 * 24, 8);
                                            DbRow { values: result95 }
                                        };
                                        result96.push(e96);
                                    }
                                    _rt::cabi_dealloc(base96, len96 * 8, 4);
                                    result96
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl DbConnection {
                #[allow(unused_unsafe, clippy::all)]
                pub fn open(address: &str) -> Result<DbConnection, Error> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 16],
                        );
                        let vec0 = address;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rdbms/mysql@0.0.1")]
                        extern "C" {
                            #[link_name = "[static]db-connection.open"]
                            fn wit_import(_: *mut u8, _: usize, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import(ptr0.cast_mut(), len0, ptr1);
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => {
                                let e = {
                                    let l3 = *ptr1.add(4).cast::<i32>();
                                    DbConnection::from_handle(l3 as u32)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l4 = i32::from(*ptr1.add(4).cast::<u8>());
                                    let v20 = match l4 {
                                        0 => {
                                            let e20 = {
                                                let l5 = *ptr1.add(8).cast::<*mut u8>();
                                                let l6 = *ptr1.add(12).cast::<usize>();
                                                let len7 = l6;
                                                let bytes7 = _rt::Vec::from_raw_parts(
                                                    l5.cast(),
                                                    len7,
                                                    len7,
                                                );
                                                _rt::string_lift(bytes7)
                                            };
                                            Error::ConnectionFailure(e20)
                                        }
                                        1 => {
                                            let e20 = {
                                                let l8 = *ptr1.add(8).cast::<*mut u8>();
                                                let l9 = *ptr1.add(12).cast::<usize>();
                                                let len10 = l9;
                                                let bytes10 = _rt::Vec::from_raw_parts(
                                                    l8.cast(),
                                                    len10,
                                                    len10,
                                                );
                                                _rt::string_lift(bytes10)
                                            };
                                            Error::QueryParameterFailure(e20)
                                        }
                                        2 => {
                                            let e20 = {
                                                let l11 = *ptr1.add(8).cast::<*mut u8>();
                                                let l12 = *ptr1.add(12).cast::<usize>();
                                                let len13 = l12;
                                                let bytes13 = _rt::Vec::from_raw_parts(
                                                    l11.cast(),
                                                    len13,
                                                    len13,
                                                );
                                                _rt::string_lift(bytes13)
                                            };
                                            Error::QueryExecutionFailure(e20)
                                        }
                                        3 => {
                                            let e20 = {
                                                let l14 = *ptr1.add(8).cast::<*mut u8>();
                                                let l15 = *ptr1.add(12).cast::<usize>();
                                                let len16 = l15;
                                                let bytes16 = _rt::Vec::from_raw_parts(
                                                    l14.cast(),
                                                    len16,
                                                    len16,
                                                );
                                                _rt::string_lift(bytes16)
                                            };
                                            Error::QueryResponseFailure(e20)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 4, "invalid enum discriminant");
                                            let e20 = {
                                                let l17 = *ptr1.add(8).cast::<*mut u8>();
                                                let l18 = *ptr1.add(12).cast::<usize>();
                                                let len19 = l18;
                                                let bytes19 = _rt::Vec::from_raw_parts(
                                                    l17.cast(),
                                                    len19,
                                                    len19,
                                                );
                                                _rt::string_lift(bytes19)
                                            };
                                            Error::Other(e20)
                                        }
                                    };
                                    v20
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl DbConnection {
                #[allow(unused_unsafe, clippy::all)]
                pub fn query(
                    &self,
                    statement: &str,
                    params: &[DbValue],
                ) -> Result<DbResult, Error> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 20]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 20],
                        );
                        let vec0 = statement;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec26 = params;
                        let len26 = vec26.len();
                        let layout26 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec26.len() * 24,
                            8,
                        );
                        let result26 = if layout26.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout26).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout26);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec26.into_iter().enumerate() {
                            let base = result26.add(i * 24);
                            {
                                match e {
                                    DbValue::Boolean(e) => {
                                        *base.add(0).cast::<u8>() = (0i32) as u8;
                                        *base.add(8).cast::<u8>() = (match e {
                                            true => 1,
                                            false => 0,
                                        }) as u8;
                                    }
                                    DbValue::Tinyint(e) => {
                                        *base.add(0).cast::<u8>() = (1i32) as u8;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                    }
                                    DbValue::Smallint(e) => {
                                        *base.add(0).cast::<u8>() = (2i32) as u8;
                                        *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                    }
                                    DbValue::Mediumint(e) => {
                                        *base.add(0).cast::<u8>() = (3i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::Int(e) => {
                                        *base.add(0).cast::<u8>() = (4i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::Bigint(e) => {
                                        *base.add(0).cast::<u8>() = (5i32) as u8;
                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    DbValue::TinyintUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (6i32) as u8;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                    }
                                    DbValue::SmallintUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (7i32) as u8;
                                        *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                    }
                                    DbValue::MediumintUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (8i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::IntUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (9i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::BigintUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (10i32) as u8;
                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    DbValue::Float(e) => {
                                        *base.add(0).cast::<u8>() = (11i32) as u8;
                                        *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                    }
                                    DbValue::Double(e) => {
                                        *base.add(0).cast::<u8>() = (12i32) as u8;
                                        *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                    }
                                    DbValue::Decimal(e) => {
                                        *base.add(0).cast::<u8>() = (13i32) as u8;
                                        let vec1 = e;
                                        let ptr1 = vec1.as_ptr().cast::<u8>();
                                        let len1 = vec1.len();
                                        *base.add(12).cast::<usize>() = len1;
                                        *base.add(8).cast::<*mut u8>() = ptr1.cast_mut();
                                    }
                                    DbValue::Date(e) => {
                                        *base.add(0).cast::<u8>() = (14i32) as u8;
                                        let super::super::super::golem::rdbms::types::Date {
                                            year: year2,
                                            month: month2,
                                            day: day2,
                                        } = e;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(year2);
                                        *base.add(12).cast::<u8>() = (_rt::as_i32(month2)) as u8;
                                        *base.add(13).cast::<u8>() = (_rt::as_i32(day2)) as u8;
                                    }
                                    DbValue::Datetime(e) => {
                                        *base.add(0).cast::<u8>() = (15i32) as u8;
                                        let super::super::super::golem::rdbms::types::Timestamp {
                                            date: date3,
                                            time: time3,
                                        } = e;
                                        let super::super::super::golem::rdbms::types::Date {
                                            year: year4,
                                            month: month4,
                                            day: day4,
                                        } = date3;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(year4);
                                        *base.add(12).cast::<u8>() = (_rt::as_i32(month4)) as u8;
                                        *base.add(13).cast::<u8>() = (_rt::as_i32(day4)) as u8;
                                        let super::super::super::golem::rdbms::types::Time {
                                            hour: hour5,
                                            minute: minute5,
                                            second: second5,
                                            nanosecond: nanosecond5,
                                        } = time3;
                                        *base.add(16).cast::<u8>() = (_rt::as_i32(hour5)) as u8;
                                        *base.add(17).cast::<u8>() = (_rt::as_i32(minute5)) as u8;
                                        *base.add(18).cast::<u8>() = (_rt::as_i32(second5)) as u8;
                                        *base.add(20).cast::<i32>() = _rt::as_i32(nanosecond5);
                                    }
                                    DbValue::Timestamp(e) => {
                                        *base.add(0).cast::<u8>() = (16i32) as u8;
                                        let super::super::super::golem::rdbms::types::Timestamp {
                                            date: date6,
                                            time: time6,
                                        } = e;
                                        let super::super::super::golem::rdbms::types::Date {
                                            year: year7,
                                            month: month7,
                                            day: day7,
                                        } = date6;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(year7);
                                        *base.add(12).cast::<u8>() = (_rt::as_i32(month7)) as u8;
                                        *base.add(13).cast::<u8>() = (_rt::as_i32(day7)) as u8;
                                        let super::super::super::golem::rdbms::types::Time {
                                            hour: hour8,
                                            minute: minute8,
                                            second: second8,
                                            nanosecond: nanosecond8,
                                        } = time6;
                                        *base.add(16).cast::<u8>() = (_rt::as_i32(hour8)) as u8;
                                        *base.add(17).cast::<u8>() = (_rt::as_i32(minute8)) as u8;
                                        *base.add(18).cast::<u8>() = (_rt::as_i32(second8)) as u8;
                                        *base.add(20).cast::<i32>() = _rt::as_i32(nanosecond8);
                                    }
                                    DbValue::Time(e) => {
                                        *base.add(0).cast::<u8>() = (17i32) as u8;
                                        let super::super::super::golem::rdbms::types::Time {
                                            hour: hour9,
                                            minute: minute9,
                                            second: second9,
                                            nanosecond: nanosecond9,
                                        } = e;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(hour9)) as u8;
                                        *base.add(9).cast::<u8>() = (_rt::as_i32(minute9)) as u8;
                                        *base.add(10).cast::<u8>() = (_rt::as_i32(second9)) as u8;
                                        *base.add(12).cast::<i32>() = _rt::as_i32(nanosecond9);
                                    }
                                    DbValue::Year(e) => {
                                        *base.add(0).cast::<u8>() = (18i32) as u8;
                                        *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                    }
                                    DbValue::Fixchar(e) => {
                                        *base.add(0).cast::<u8>() = (19i32) as u8;
                                        let vec10 = e;
                                        let ptr10 = vec10.as_ptr().cast::<u8>();
                                        let len10 = vec10.len();
                                        *base.add(12).cast::<usize>() = len10;
                                        *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                    }
                                    DbValue::Varchar(e) => {
                                        *base.add(0).cast::<u8>() = (20i32) as u8;
                                        let vec11 = e;
                                        let ptr11 = vec11.as_ptr().cast::<u8>();
                                        let len11 = vec11.len();
                                        *base.add(12).cast::<usize>() = len11;
                                        *base.add(8).cast::<*mut u8>() = ptr11.cast_mut();
                                    }
                                    DbValue::Tinytext(e) => {
                                        *base.add(0).cast::<u8>() = (21i32) as u8;
                                        let vec12 = e;
                                        let ptr12 = vec12.as_ptr().cast::<u8>();
                                        let len12 = vec12.len();
                                        *base.add(12).cast::<usize>() = len12;
                                        *base.add(8).cast::<*mut u8>() = ptr12.cast_mut();
                                    }
                                    DbValue::Text(e) => {
                                        *base.add(0).cast::<u8>() = (22i32) as u8;
                                        let vec13 = e;
                                        let ptr13 = vec13.as_ptr().cast::<u8>();
                                        let len13 = vec13.len();
                                        *base.add(12).cast::<usize>() = len13;
                                        *base.add(8).cast::<*mut u8>() = ptr13.cast_mut();
                                    }
                                    DbValue::Mediumtext(e) => {
                                        *base.add(0).cast::<u8>() = (23i32) as u8;
                                        let vec14 = e;
                                        let ptr14 = vec14.as_ptr().cast::<u8>();
                                        let len14 = vec14.len();
                                        *base.add(12).cast::<usize>() = len14;
                                        *base.add(8).cast::<*mut u8>() = ptr14.cast_mut();
                                    }
                                    DbValue::Longtext(e) => {
                                        *base.add(0).cast::<u8>() = (24i32) as u8;
                                        let vec15 = e;
                                        let ptr15 = vec15.as_ptr().cast::<u8>();
                                        let len15 = vec15.len();
                                        *base.add(12).cast::<usize>() = len15;
                                        *base.add(8).cast::<*mut u8>() = ptr15.cast_mut();
                                    }
                                    DbValue::Binary(e) => {
                                        *base.add(0).cast::<u8>() = (25i32) as u8;
                                        let vec16 = e;
                                        let ptr16 = vec16.as_ptr().cast::<u8>();
                                        let len16 = vec16.len();
                                        *base.add(12).cast::<usize>() = len16;
                                        *base.add(8).cast::<*mut u8>() = ptr16.cast_mut();
                                    }
                                    DbValue::Varbinary(e) => {
                                        *base.add(0).cast::<u8>() = (26i32) as u8;
                                        let vec17 = e;
                                        let ptr17 = vec17.as_ptr().cast::<u8>();
                                        let len17 = vec17.len();
                                        *base.add(12).cast::<usize>() = len17;
                                        *base.add(8).cast::<*mut u8>() = ptr17.cast_mut();
                                    }
                                    DbValue::Tinyblob(e) => {
                                        *base.add(0).cast::<u8>() = (27i32) as u8;
                                        let vec18 = e;
                                        let ptr18 = vec18.as_ptr().cast::<u8>();
                                        let len18 = vec18.len();
                                        *base.add(12).cast::<usize>() = len18;
                                        *base.add(8).cast::<*mut u8>() = ptr18.cast_mut();
                                    }
                                    DbValue::Blob(e) => {
                                        *base.add(0).cast::<u8>() = (28i32) as u8;
                                        let vec19 = e;
                                        let ptr19 = vec19.as_ptr().cast::<u8>();
                                        let len19 = vec19.len();
                                        *base.add(12).cast::<usize>() = len19;
                                        *base.add(8).cast::<*mut u8>() = ptr19.cast_mut();
                                    }
                                    DbValue::Mediumblob(e) => {
                                        *base.add(0).cast::<u8>() = (29i32) as u8;
                                        let vec20 = e;
                                        let ptr20 = vec20.as_ptr().cast::<u8>();
                                        let len20 = vec20.len();
                                        *base.add(12).cast::<usize>() = len20;
                                        *base.add(8).cast::<*mut u8>() = ptr20.cast_mut();
                                    }
                                    DbValue::Longblob(e) => {
                                        *base.add(0).cast::<u8>() = (30i32) as u8;
                                        let vec21 = e;
                                        let ptr21 = vec21.as_ptr().cast::<u8>();
                                        let len21 = vec21.len();
                                        *base.add(12).cast::<usize>() = len21;
                                        *base.add(8).cast::<*mut u8>() = ptr21.cast_mut();
                                    }
                                    DbValue::Enumeration(e) => {
                                        *base.add(0).cast::<u8>() = (31i32) as u8;
                                        let vec22 = e;
                                        let ptr22 = vec22.as_ptr().cast::<u8>();
                                        let len22 = vec22.len();
                                        *base.add(12).cast::<usize>() = len22;
                                        *base.add(8).cast::<*mut u8>() = ptr22.cast_mut();
                                    }
                                    DbValue::Set(e) => {
                                        *base.add(0).cast::<u8>() = (32i32) as u8;
                                        let vec23 = e;
                                        let ptr23 = vec23.as_ptr().cast::<u8>();
                                        let len23 = vec23.len();
                                        *base.add(12).cast::<usize>() = len23;
                                        *base.add(8).cast::<*mut u8>() = ptr23.cast_mut();
                                    }
                                    DbValue::Bit(e) => {
                                        *base.add(0).cast::<u8>() = (33i32) as u8;
                                        let vec24 = e;
                                        let len24 = vec24.len();
                                        let layout24 = _rt::alloc::Layout::from_size_align_unchecked(
                                            vec24.len() * 1,
                                            1,
                                        );
                                        let result24 = if layout24.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout24).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout24);
                                            }
                                            ptr
                                        } else {
                                            ::core::ptr::null_mut()
                                        };
                                        for (i, e) in vec24.into_iter().enumerate() {
                                            let base = result24.add(i * 1);
                                            {
                                                *base.add(0).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                        }
                                        *base.add(12).cast::<usize>() = len24;
                                        *base.add(8).cast::<*mut u8>() = result24;
                                        cleanup_list.extend_from_slice(&[(result24, layout24)]);
                                    }
                                    DbValue::Json(e) => {
                                        *base.add(0).cast::<u8>() = (34i32) as u8;
                                        let vec25 = e;
                                        let ptr25 = vec25.as_ptr().cast::<u8>();
                                        let len25 = vec25.len();
                                        *base.add(12).cast::<usize>() = len25;
                                        *base.add(8).cast::<*mut u8>() = ptr25.cast_mut();
                                    }
                                    DbValue::Null => {
                                        *base.add(0).cast::<u8>() = (35i32) as u8;
                                    }
                                }
                            }
                        }
                        let ptr27 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rdbms/mysql@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]db-connection.query"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            result26,
                            len26,
                            ptr27,
                        );
                        let l28 = i32::from(*ptr27.add(0).cast::<u8>());
                        if layout26.size() != 0 {
                            _rt::alloc::dealloc(result26.cast(), layout26);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l28 {
                            0 => {
                                let e = {
                                    let l29 = *ptr27.add(4).cast::<*mut u8>();
                                    let l30 = *ptr27.add(8).cast::<usize>();
                                    let base40 = l29;
                                    let len40 = l30;
                                    let mut result40 = _rt::Vec::with_capacity(len40);
                                    for i in 0..len40 {
                                        let base = base40.add(i * 32);
                                        let e40 = {
                                            let l31 = *base.add(0).cast::<i64>();
                                            let l32 = *base.add(8).cast::<*mut u8>();
                                            let l33 = *base.add(12).cast::<usize>();
                                            let len34 = l33;
                                            let bytes34 = _rt::Vec::from_raw_parts(
                                                l32.cast(),
                                                len34,
                                                len34,
                                            );
                                            let l35 = i32::from(*base.add(16).cast::<u8>());
                                            let v36 = match l35 {
                                                0 => DbColumnType::Boolean,
                                                1 => DbColumnType::Tinyint,
                                                2 => DbColumnType::Smallint,
                                                3 => DbColumnType::Mediumint,
                                                4 => DbColumnType::Int,
                                                5 => DbColumnType::Bigint,
                                                6 => DbColumnType::TinyintUnsigned,
                                                7 => DbColumnType::SmallintUnsigned,
                                                8 => DbColumnType::MediumintUnsigned,
                                                9 => DbColumnType::IntUnsigned,
                                                10 => DbColumnType::BigintUnsigned,
                                                11 => DbColumnType::Float,
                                                12 => DbColumnType::Double,
                                                13 => DbColumnType::Decimal,
                                                14 => DbColumnType::Date,
                                                15 => DbColumnType::Datetime,
                                                16 => DbColumnType::Timestamp,
                                                17 => DbColumnType::Time,
                                                18 => DbColumnType::Year,
                                                19 => DbColumnType::Fixchar,
                                                20 => DbColumnType::Varchar,
                                                21 => DbColumnType::Tinytext,
                                                22 => DbColumnType::Text,
                                                23 => DbColumnType::Mediumtext,
                                                24 => DbColumnType::Longtext,
                                                25 => DbColumnType::Binary,
                                                26 => DbColumnType::Varbinary,
                                                27 => DbColumnType::Tinyblob,
                                                28 => DbColumnType::Blob,
                                                29 => DbColumnType::Mediumblob,
                                                30 => DbColumnType::Longblob,
                                                31 => DbColumnType::Enumeration,
                                                32 => DbColumnType::Set,
                                                33 => DbColumnType::Bit,
                                                n => {
                                                    debug_assert_eq!(n, 34, "invalid enum discriminant");
                                                    DbColumnType::Json
                                                }
                                            };
                                            let l37 = *base.add(20).cast::<*mut u8>();
                                            let l38 = *base.add(24).cast::<usize>();
                                            let len39 = l38;
                                            let bytes39 = _rt::Vec::from_raw_parts(
                                                l37.cast(),
                                                len39,
                                                len39,
                                            );
                                            DbColumn {
                                                ordinal: l31 as u64,
                                                name: _rt::string_lift(bytes34),
                                                db_type: v36,
                                                db_type_name: _rt::string_lift(bytes39),
                                            }
                                        };
                                        result40.push(e40);
                                    }
                                    _rt::cabi_dealloc(base40, len40 * 32, 8);
                                    let l41 = *ptr27.add(12).cast::<*mut u8>();
                                    let l42 = *ptr27.add(16).cast::<usize>();
                                    let base135 = l41;
                                    let len135 = l42;
                                    let mut result135 = _rt::Vec::with_capacity(len135);
                                    for i in 0..len135 {
                                        let base = base135.add(i * 8);
                                        let e135 = {
                                            let l43 = *base.add(0).cast::<*mut u8>();
                                            let l44 = *base.add(4).cast::<usize>();
                                            let base134 = l43;
                                            let len134 = l44;
                                            let mut result134 = _rt::Vec::with_capacity(len134);
                                            for i in 0..len134 {
                                                let base = base134.add(i * 24);
                                                let e134 = {
                                                    let l45 = i32::from(*base.add(0).cast::<u8>());
                                                    let v133 = match l45 {
                                                        0 => {
                                                            let e133 = {
                                                                let l46 = i32::from(*base.add(8).cast::<u8>());
                                                                _rt::bool_lift(l46 as u8)
                                                            };
                                                            DbValue::Boolean(e133)
                                                        }
                                                        1 => {
                                                            let e133 = {
                                                                let l47 = i32::from(*base.add(8).cast::<i8>());
                                                                l47 as i8
                                                            };
                                                            DbValue::Tinyint(e133)
                                                        }
                                                        2 => {
                                                            let e133 = {
                                                                let l48 = i32::from(*base.add(8).cast::<i16>());
                                                                l48 as i16
                                                            };
                                                            DbValue::Smallint(e133)
                                                        }
                                                        3 => {
                                                            let e133 = {
                                                                let l49 = *base.add(8).cast::<i32>();
                                                                l49
                                                            };
                                                            DbValue::Mediumint(e133)
                                                        }
                                                        4 => {
                                                            let e133 = {
                                                                let l50 = *base.add(8).cast::<i32>();
                                                                l50
                                                            };
                                                            DbValue::Int(e133)
                                                        }
                                                        5 => {
                                                            let e133 = {
                                                                let l51 = *base.add(8).cast::<i64>();
                                                                l51
                                                            };
                                                            DbValue::Bigint(e133)
                                                        }
                                                        6 => {
                                                            let e133 = {
                                                                let l52 = i32::from(*base.add(8).cast::<u8>());
                                                                l52 as u8
                                                            };
                                                            DbValue::TinyintUnsigned(e133)
                                                        }
                                                        7 => {
                                                            let e133 = {
                                                                let l53 = i32::from(*base.add(8).cast::<u16>());
                                                                l53 as u16
                                                            };
                                                            DbValue::SmallintUnsigned(e133)
                                                        }
                                                        8 => {
                                                            let e133 = {
                                                                let l54 = *base.add(8).cast::<i32>();
                                                                l54 as u32
                                                            };
                                                            DbValue::MediumintUnsigned(e133)
                                                        }
                                                        9 => {
                                                            let e133 = {
                                                                let l55 = *base.add(8).cast::<i32>();
                                                                l55 as u32
                                                            };
                                                            DbValue::IntUnsigned(e133)
                                                        }
                                                        10 => {
                                                            let e133 = {
                                                                let l56 = *base.add(8).cast::<i64>();
                                                                l56 as u64
                                                            };
                                                            DbValue::BigintUnsigned(e133)
                                                        }
                                                        11 => {
                                                            let e133 = {
                                                                let l57 = *base.add(8).cast::<f32>();
                                                                l57
                                                            };
                                                            DbValue::Float(e133)
                                                        }
                                                        12 => {
                                                            let e133 = {
                                                                let l58 = *base.add(8).cast::<f64>();
                                                                l58
                                                            };
                                                            DbValue::Double(e133)
                                                        }
                                                        13 => {
                                                            let e133 = {
                                                                let l59 = *base.add(8).cast::<*mut u8>();
                                                                let l60 = *base.add(12).cast::<usize>();
                                                                let len61 = l60;
                                                                let bytes61 = _rt::Vec::from_raw_parts(
                                                                    l59.cast(),
                                                                    len61,
                                                                    len61,
                                                                );
                                                                _rt::string_lift(bytes61)
                                                            };
                                                            DbValue::Decimal(e133)
                                                        }
                                                        14 => {
                                                            let e133 = {
                                                                let l62 = *base.add(8).cast::<i32>();
                                                                let l63 = i32::from(*base.add(12).cast::<u8>());
                                                                let l64 = i32::from(*base.add(13).cast::<u8>());
                                                                super::super::super::golem::rdbms::types::Date {
                                                                    year: l62,
                                                                    month: l63 as u8,
                                                                    day: l64 as u8,
                                                                }
                                                            };
                                                            DbValue::Date(e133)
                                                        }
                                                        15 => {
                                                            let e133 = {
                                                                let l65 = *base.add(8).cast::<i32>();
                                                                let l66 = i32::from(*base.add(12).cast::<u8>());
                                                                let l67 = i32::from(*base.add(13).cast::<u8>());
                                                                let l68 = i32::from(*base.add(16).cast::<u8>());
                                                                let l69 = i32::from(*base.add(17).cast::<u8>());
                                                                let l70 = i32::from(*base.add(18).cast::<u8>());
                                                                let l71 = *base.add(20).cast::<i32>();
                                                                super::super::super::golem::rdbms::types::Timestamp {
                                                                    date: super::super::super::golem::rdbms::types::Date {
                                                                        year: l65,
                                                                        month: l66 as u8,
                                                                        day: l67 as u8,
                                                                    },
                                                                    time: super::super::super::golem::rdbms::types::Time {
                                                                        hour: l68 as u8,
                                                                        minute: l69 as u8,
                                                                        second: l70 as u8,
                                                                        nanosecond: l71 as u32,
                                                                    },
                                                                }
                                                            };
                                                            DbValue::Datetime(e133)
                                                        }
                                                        16 => {
                                                            let e133 = {
                                                                let l72 = *base.add(8).cast::<i32>();
                                                                let l73 = i32::from(*base.add(12).cast::<u8>());
                                                                let l74 = i32::from(*base.add(13).cast::<u8>());
                                                                let l75 = i32::from(*base.add(16).cast::<u8>());
                                                                let l76 = i32::from(*base.add(17).cast::<u8>());
                                                                let l77 = i32::from(*base.add(18).cast::<u8>());
                                                                let l78 = *base.add(20).cast::<i32>();
                                                                super::super::super::golem::rdbms::types::Timestamp {
                                                                    date: super::super::super::golem::rdbms::types::Date {
                                                                        year: l72,
                                                                        month: l73 as u8,
                                                                        day: l74 as u8,
                                                                    },
                                                                    time: super::super::super::golem::rdbms::types::Time {
                                                                        hour: l75 as u8,
                                                                        minute: l76 as u8,
                                                                        second: l77 as u8,
                                                                        nanosecond: l78 as u32,
                                                                    },
                                                                }
                                                            };
                                                            DbValue::Timestamp(e133)
                                                        }
                                                        17 => {
                                                            let e133 = {
                                                                let l79 = i32::from(*base.add(8).cast::<u8>());
                                                                let l80 = i32::from(*base.add(9).cast::<u8>());
                                                                let l81 = i32::from(*base.add(10).cast::<u8>());
                                                                let l82 = *base.add(12).cast::<i32>();
                                                                super::super::super::golem::rdbms::types::Time {
                                                                    hour: l79 as u8,
                                                                    minute: l80 as u8,
                                                                    second: l81 as u8,
                                                                    nanosecond: l82 as u32,
                                                                }
                                                            };
                                                            DbValue::Time(e133)
                                                        }
                                                        18 => {
                                                            let e133 = {
                                                                let l83 = i32::from(*base.add(8).cast::<u16>());
                                                                l83 as u16
                                                            };
                                                            DbValue::Year(e133)
                                                        }
                                                        19 => {
                                                            let e133 = {
                                                                let l84 = *base.add(8).cast::<*mut u8>();
                                                                let l85 = *base.add(12).cast::<usize>();
                                                                let len86 = l85;
                                                                let bytes86 = _rt::Vec::from_raw_parts(
                                                                    l84.cast(),
                                                                    len86,
                                                                    len86,
                                                                );
                                                                _rt::string_lift(bytes86)
                                                            };
                                                            DbValue::Fixchar(e133)
                                                        }
                                                        20 => {
                                                            let e133 = {
                                                                let l87 = *base.add(8).cast::<*mut u8>();
                                                                let l88 = *base.add(12).cast::<usize>();
                                                                let len89 = l88;
                                                                let bytes89 = _rt::Vec::from_raw_parts(
                                                                    l87.cast(),
                                                                    len89,
                                                                    len89,
                                                                );
                                                                _rt::string_lift(bytes89)
                                                            };
                                                            DbValue::Varchar(e133)
                                                        }
                                                        21 => {
                                                            let e133 = {
                                                                let l90 = *base.add(8).cast::<*mut u8>();
                                                                let l91 = *base.add(12).cast::<usize>();
                                                                let len92 = l91;
                                                                let bytes92 = _rt::Vec::from_raw_parts(
                                                                    l90.cast(),
                                                                    len92,
                                                                    len92,
                                                                );
                                                                _rt::string_lift(bytes92)
                                                            };
                                                            DbValue::Tinytext(e133)
                                                        }
                                                        22 => {
                                                            let e133 = {
                                                                let l93 = *base.add(8).cast::<*mut u8>();
                                                                let l94 = *base.add(12).cast::<usize>();
                                                                let len95 = l94;
                                                                let bytes95 = _rt::Vec::from_raw_parts(
                                                                    l93.cast(),
                                                                    len95,
                                                                    len95,
                                                                );
                                                                _rt::string_lift(bytes95)
                                                            };
                                                            DbValue::Text(e133)
                                                        }
                                                        23 => {
                                                            let e133 = {
                                                                let l96 = *base.add(8).cast::<*mut u8>();
                                                                let l97 = *base.add(12).cast::<usize>();
                                                                let len98 = l97;
                                                                let bytes98 = _rt::Vec::from_raw_parts(
                                                                    l96.cast(),
                                                                    len98,
                                                                    len98,
                                                                );
                                                                _rt::string_lift(bytes98)
                                                            };
                                                            DbValue::Mediumtext(e133)
                                                        }
                                                        24 => {
                                                            let e133 = {
                                                                let l99 = *base.add(8).cast::<*mut u8>();
                                                                let l100 = *base.add(12).cast::<usize>();
                                                                let len101 = l100;
                                                                let bytes101 = _rt::Vec::from_raw_parts(
                                                                    l99.cast(),
                                                                    len101,
                                                                    len101,
                                                                );
                                                                _rt::string_lift(bytes101)
                                                            };
                                                            DbValue::Longtext(e133)
                                                        }
                                                        25 => {
                                                            let e133 = {
                                                                let l102 = *base.add(8).cast::<*mut u8>();
                                                                let l103 = *base.add(12).cast::<usize>();
                                                                let len104 = l103;
                                                                _rt::Vec::from_raw_parts(l102.cast(), len104, len104)
                                                            };
                                                            DbValue::Binary(e133)
                                                        }
                                                        26 => {
                                                            let e133 = {
                                                                let l105 = *base.add(8).cast::<*mut u8>();
                                                                let l106 = *base.add(12).cast::<usize>();
                                                                let len107 = l106;
                                                                _rt::Vec::from_raw_parts(l105.cast(), len107, len107)
                                                            };
                                                            DbValue::Varbinary(e133)
                                                        }
                                                        27 => {
                                                            let e133 = {
                                                                let l108 = *base.add(8).cast::<*mut u8>();
                                                                let l109 = *base.add(12).cast::<usize>();
                                                                let len110 = l109;
                                                                _rt::Vec::from_raw_parts(l108.cast(), len110, len110)
                                                            };
                                                            DbValue::Tinyblob(e133)
                                                        }
                                                        28 => {
                                                            let e133 = {
                                                                let l111 = *base.add(8).cast::<*mut u8>();
                                                                let l112 = *base.add(12).cast::<usize>();
                                                                let len113 = l112;
                                                                _rt::Vec::from_raw_parts(l111.cast(), len113, len113)
                                                            };
                                                            DbValue::Blob(e133)
                                                        }
                                                        29 => {
                                                            let e133 = {
                                                                let l114 = *base.add(8).cast::<*mut u8>();
                                                                let l115 = *base.add(12).cast::<usize>();
                                                                let len116 = l115;
                                                                _rt::Vec::from_raw_parts(l114.cast(), len116, len116)
                                                            };
                                                            DbValue::Mediumblob(e133)
                                                        }
                                                        30 => {
                                                            let e133 = {
                                                                let l117 = *base.add(8).cast::<*mut u8>();
                                                                let l118 = *base.add(12).cast::<usize>();
                                                                let len119 = l118;
                                                                _rt::Vec::from_raw_parts(l117.cast(), len119, len119)
                                                            };
                                                            DbValue::Longblob(e133)
                                                        }
                                                        31 => {
                                                            let e133 = {
                                                                let l120 = *base.add(8).cast::<*mut u8>();
                                                                let l121 = *base.add(12).cast::<usize>();
                                                                let len122 = l121;
                                                                let bytes122 = _rt::Vec::from_raw_parts(
                                                                    l120.cast(),
                                                                    len122,
                                                                    len122,
                                                                );
                                                                _rt::string_lift(bytes122)
                                                            };
                                                            DbValue::Enumeration(e133)
                                                        }
                                                        32 => {
                                                            let e133 = {
                                                                let l123 = *base.add(8).cast::<*mut u8>();
                                                                let l124 = *base.add(12).cast::<usize>();
                                                                let len125 = l124;
                                                                let bytes125 = _rt::Vec::from_raw_parts(
                                                                    l123.cast(),
                                                                    len125,
                                                                    len125,
                                                                );
                                                                _rt::string_lift(bytes125)
                                                            };
                                                            DbValue::Set(e133)
                                                        }
                                                        33 => {
                                                            let e133 = {
                                                                let l126 = *base.add(8).cast::<*mut u8>();
                                                                let l127 = *base.add(12).cast::<usize>();
                                                                let base129 = l126;
                                                                let len129 = l127;
                                                                let mut result129 = _rt::Vec::with_capacity(len129);
                                                                for i in 0..len129 {
                                                                    let base = base129.add(i * 1);
                                                                    let e129 = {
                                                                        let l128 = i32::from(*base.add(0).cast::<u8>());
                                                                        _rt::bool_lift(l128 as u8)
                                                                    };
                                                                    result129.push(e129);
                                                                }
                                                                _rt::cabi_dealloc(base129, len129 * 1, 1);
                                                                result129
                                                            };
                                                            DbValue::Bit(e133)
                                                        }
                                                        34 => {
                                                            let e133 = {
                                                                let l130 = *base.add(8).cast::<*mut u8>();
                                                                let l131 = *base.add(12).cast::<usize>();
                                                                let len132 = l131;
                                                                let bytes132 = _rt::Vec::from_raw_parts(
                                                                    l130.cast(),
                                                                    len132,
                                                                    len132,
                                                                );
                                                                _rt::string_lift(bytes132)
                                                            };
                                                            DbValue::Json(e133)
                                                        }
                                                        n => {
                                                            debug_assert_eq!(n, 35, "invalid enum discriminant");
                                                            DbValue::Null
                                                        }
                                                    };
                                                    v133
                                                };
                                                result134.push(e134);
                                            }
                                            _rt::cabi_dealloc(base134, len134 * 24, 8);
                                            DbRow { values: result134 }
                                        };
                                        result135.push(e135);
                                    }
                                    _rt::cabi_dealloc(base135, len135 * 8, 4);
                                    DbResult {
                                        columns: result40,
                                        rows: result135,
                                    }
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l136 = i32::from(*ptr27.add(4).cast::<u8>());
                                    let v152 = match l136 {
                                        0 => {
                                            let e152 = {
                                                let l137 = *ptr27.add(8).cast::<*mut u8>();
                                                let l138 = *ptr27.add(12).cast::<usize>();
                                                let len139 = l138;
                                                let bytes139 = _rt::Vec::from_raw_parts(
                                                    l137.cast(),
                                                    len139,
                                                    len139,
                                                );
                                                _rt::string_lift(bytes139)
                                            };
                                            Error::ConnectionFailure(e152)
                                        }
                                        1 => {
                                            let e152 = {
                                                let l140 = *ptr27.add(8).cast::<*mut u8>();
                                                let l141 = *ptr27.add(12).cast::<usize>();
                                                let len142 = l141;
                                                let bytes142 = _rt::Vec::from_raw_parts(
                                                    l140.cast(),
                                                    len142,
                                                    len142,
                                                );
                                                _rt::string_lift(bytes142)
                                            };
                                            Error::QueryParameterFailure(e152)
                                        }
                                        2 => {
                                            let e152 = {
                                                let l143 = *ptr27.add(8).cast::<*mut u8>();
                                                let l144 = *ptr27.add(12).cast::<usize>();
                                                let len145 = l144;
                                                let bytes145 = _rt::Vec::from_raw_parts(
                                                    l143.cast(),
                                                    len145,
                                                    len145,
                                                );
                                                _rt::string_lift(bytes145)
                                            };
                                            Error::QueryExecutionFailure(e152)
                                        }
                                        3 => {
                                            let e152 = {
                                                let l146 = *ptr27.add(8).cast::<*mut u8>();
                                                let l147 = *ptr27.add(12).cast::<usize>();
                                                let len148 = l147;
                                                let bytes148 = _rt::Vec::from_raw_parts(
                                                    l146.cast(),
                                                    len148,
                                                    len148,
                                                );
                                                _rt::string_lift(bytes148)
                                            };
                                            Error::QueryResponseFailure(e152)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 4, "invalid enum discriminant");
                                            let e152 = {
                                                let l149 = *ptr27.add(8).cast::<*mut u8>();
                                                let l150 = *ptr27.add(12).cast::<usize>();
                                                let len151 = l150;
                                                let bytes151 = _rt::Vec::from_raw_parts(
                                                    l149.cast(),
                                                    len151,
                                                    len151,
                                                );
                                                _rt::string_lift(bytes151)
                                            };
                                            Error::Other(e152)
                                        }
                                    };
                                    v152
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl DbConnection {
                #[allow(unused_unsafe, clippy::all)]
                pub fn query_stream(
                    &self,
                    statement: &str,
                    params: &[DbValue],
                ) -> Result<DbResultStream, Error> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 16],
                        );
                        let vec0 = statement;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec26 = params;
                        let len26 = vec26.len();
                        let layout26 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec26.len() * 24,
                            8,
                        );
                        let result26 = if layout26.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout26).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout26);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec26.into_iter().enumerate() {
                            let base = result26.add(i * 24);
                            {
                                match e {
                                    DbValue::Boolean(e) => {
                                        *base.add(0).cast::<u8>() = (0i32) as u8;
                                        *base.add(8).cast::<u8>() = (match e {
                                            true => 1,
                                            false => 0,
                                        }) as u8;
                                    }
                                    DbValue::Tinyint(e) => {
                                        *base.add(0).cast::<u8>() = (1i32) as u8;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                    }
                                    DbValue::Smallint(e) => {
                                        *base.add(0).cast::<u8>() = (2i32) as u8;
                                        *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                    }
                                    DbValue::Mediumint(e) => {
                                        *base.add(0).cast::<u8>() = (3i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::Int(e) => {
                                        *base.add(0).cast::<u8>() = (4i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::Bigint(e) => {
                                        *base.add(0).cast::<u8>() = (5i32) as u8;
                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    DbValue::TinyintUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (6i32) as u8;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                    }
                                    DbValue::SmallintUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (7i32) as u8;
                                        *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                    }
                                    DbValue::MediumintUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (8i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::IntUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (9i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::BigintUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (10i32) as u8;
                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    DbValue::Float(e) => {
                                        *base.add(0).cast::<u8>() = (11i32) as u8;
                                        *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                    }
                                    DbValue::Double(e) => {
                                        *base.add(0).cast::<u8>() = (12i32) as u8;
                                        *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                    }
                                    DbValue::Decimal(e) => {
                                        *base.add(0).cast::<u8>() = (13i32) as u8;
                                        let vec1 = e;
                                        let ptr1 = vec1.as_ptr().cast::<u8>();
                                        let len1 = vec1.len();
                                        *base.add(12).cast::<usize>() = len1;
                                        *base.add(8).cast::<*mut u8>() = ptr1.cast_mut();
                                    }
                                    DbValue::Date(e) => {
                                        *base.add(0).cast::<u8>() = (14i32) as u8;
                                        let super::super::super::golem::rdbms::types::Date {
                                            year: year2,
                                            month: month2,
                                            day: day2,
                                        } = e;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(year2);
                                        *base.add(12).cast::<u8>() = (_rt::as_i32(month2)) as u8;
                                        *base.add(13).cast::<u8>() = (_rt::as_i32(day2)) as u8;
                                    }
                                    DbValue::Datetime(e) => {
                                        *base.add(0).cast::<u8>() = (15i32) as u8;
                                        let super::super::super::golem::rdbms::types::Timestamp {
                                            date: date3,
                                            time: time3,
                                        } = e;
                                        let super::super::super::golem::rdbms::types::Date {
                                            year: year4,
                                            month: month4,
                                            day: day4,
                                        } = date3;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(year4);
                                        *base.add(12).cast::<u8>() = (_rt::as_i32(month4)) as u8;
                                        *base.add(13).cast::<u8>() = (_rt::as_i32(day4)) as u8;
                                        let super::super::super::golem::rdbms::types::Time {
                                            hour: hour5,
                                            minute: minute5,
                                            second: second5,
                                            nanosecond: nanosecond5,
                                        } = time3;
                                        *base.add(16).cast::<u8>() = (_rt::as_i32(hour5)) as u8;
                                        *base.add(17).cast::<u8>() = (_rt::as_i32(minute5)) as u8;
                                        *base.add(18).cast::<u8>() = (_rt::as_i32(second5)) as u8;
                                        *base.add(20).cast::<i32>() = _rt::as_i32(nanosecond5);
                                    }
                                    DbValue::Timestamp(e) => {
                                        *base.add(0).cast::<u8>() = (16i32) as u8;
                                        let super::super::super::golem::rdbms::types::Timestamp {
                                            date: date6,
                                            time: time6,
                                        } = e;
                                        let super::super::super::golem::rdbms::types::Date {
                                            year: year7,
                                            month: month7,
                                            day: day7,
                                        } = date6;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(year7);
                                        *base.add(12).cast::<u8>() = (_rt::as_i32(month7)) as u8;
                                        *base.add(13).cast::<u8>() = (_rt::as_i32(day7)) as u8;
                                        let super::super::super::golem::rdbms::types::Time {
                                            hour: hour8,
                                            minute: minute8,
                                            second: second8,
                                            nanosecond: nanosecond8,
                                        } = time6;
                                        *base.add(16).cast::<u8>() = (_rt::as_i32(hour8)) as u8;
                                        *base.add(17).cast::<u8>() = (_rt::as_i32(minute8)) as u8;
                                        *base.add(18).cast::<u8>() = (_rt::as_i32(second8)) as u8;
                                        *base.add(20).cast::<i32>() = _rt::as_i32(nanosecond8);
                                    }
                                    DbValue::Time(e) => {
                                        *base.add(0).cast::<u8>() = (17i32) as u8;
                                        let super::super::super::golem::rdbms::types::Time {
                                            hour: hour9,
                                            minute: minute9,
                                            second: second9,
                                            nanosecond: nanosecond9,
                                        } = e;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(hour9)) as u8;
                                        *base.add(9).cast::<u8>() = (_rt::as_i32(minute9)) as u8;
                                        *base.add(10).cast::<u8>() = (_rt::as_i32(second9)) as u8;
                                        *base.add(12).cast::<i32>() = _rt::as_i32(nanosecond9);
                                    }
                                    DbValue::Year(e) => {
                                        *base.add(0).cast::<u8>() = (18i32) as u8;
                                        *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                    }
                                    DbValue::Fixchar(e) => {
                                        *base.add(0).cast::<u8>() = (19i32) as u8;
                                        let vec10 = e;
                                        let ptr10 = vec10.as_ptr().cast::<u8>();
                                        let len10 = vec10.len();
                                        *base.add(12).cast::<usize>() = len10;
                                        *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                    }
                                    DbValue::Varchar(e) => {
                                        *base.add(0).cast::<u8>() = (20i32) as u8;
                                        let vec11 = e;
                                        let ptr11 = vec11.as_ptr().cast::<u8>();
                                        let len11 = vec11.len();
                                        *base.add(12).cast::<usize>() = len11;
                                        *base.add(8).cast::<*mut u8>() = ptr11.cast_mut();
                                    }
                                    DbValue::Tinytext(e) => {
                                        *base.add(0).cast::<u8>() = (21i32) as u8;
                                        let vec12 = e;
                                        let ptr12 = vec12.as_ptr().cast::<u8>();
                                        let len12 = vec12.len();
                                        *base.add(12).cast::<usize>() = len12;
                                        *base.add(8).cast::<*mut u8>() = ptr12.cast_mut();
                                    }
                                    DbValue::Text(e) => {
                                        *base.add(0).cast::<u8>() = (22i32) as u8;
                                        let vec13 = e;
                                        let ptr13 = vec13.as_ptr().cast::<u8>();
                                        let len13 = vec13.len();
                                        *base.add(12).cast::<usize>() = len13;
                                        *base.add(8).cast::<*mut u8>() = ptr13.cast_mut();
                                    }
                                    DbValue::Mediumtext(e) => {
                                        *base.add(0).cast::<u8>() = (23i32) as u8;
                                        let vec14 = e;
                                        let ptr14 = vec14.as_ptr().cast::<u8>();
                                        let len14 = vec14.len();
                                        *base.add(12).cast::<usize>() = len14;
                                        *base.add(8).cast::<*mut u8>() = ptr14.cast_mut();
                                    }
                                    DbValue::Longtext(e) => {
                                        *base.add(0).cast::<u8>() = (24i32) as u8;
                                        let vec15 = e;
                                        let ptr15 = vec15.as_ptr().cast::<u8>();
                                        let len15 = vec15.len();
                                        *base.add(12).cast::<usize>() = len15;
                                        *base.add(8).cast::<*mut u8>() = ptr15.cast_mut();
                                    }
                                    DbValue::Binary(e) => {
                                        *base.add(0).cast::<u8>() = (25i32) as u8;
                                        let vec16 = e;
                                        let ptr16 = vec16.as_ptr().cast::<u8>();
                                        let len16 = vec16.len();
                                        *base.add(12).cast::<usize>() = len16;
                                        *base.add(8).cast::<*mut u8>() = ptr16.cast_mut();
                                    }
                                    DbValue::Varbinary(e) => {
                                        *base.add(0).cast::<u8>() = (26i32) as u8;
                                        let vec17 = e;
                                        let ptr17 = vec17.as_ptr().cast::<u8>();
                                        let len17 = vec17.len();
                                        *base.add(12).cast::<usize>() = len17;
                                        *base.add(8).cast::<*mut u8>() = ptr17.cast_mut();
                                    }
                                    DbValue::Tinyblob(e) => {
                                        *base.add(0).cast::<u8>() = (27i32) as u8;
                                        let vec18 = e;
                                        let ptr18 = vec18.as_ptr().cast::<u8>();
                                        let len18 = vec18.len();
                                        *base.add(12).cast::<usize>() = len18;
                                        *base.add(8).cast::<*mut u8>() = ptr18.cast_mut();
                                    }
                                    DbValue::Blob(e) => {
                                        *base.add(0).cast::<u8>() = (28i32) as u8;
                                        let vec19 = e;
                                        let ptr19 = vec19.as_ptr().cast::<u8>();
                                        let len19 = vec19.len();
                                        *base.add(12).cast::<usize>() = len19;
                                        *base.add(8).cast::<*mut u8>() = ptr19.cast_mut();
                                    }
                                    DbValue::Mediumblob(e) => {
                                        *base.add(0).cast::<u8>() = (29i32) as u8;
                                        let vec20 = e;
                                        let ptr20 = vec20.as_ptr().cast::<u8>();
                                        let len20 = vec20.len();
                                        *base.add(12).cast::<usize>() = len20;
                                        *base.add(8).cast::<*mut u8>() = ptr20.cast_mut();
                                    }
                                    DbValue::Longblob(e) => {
                                        *base.add(0).cast::<u8>() = (30i32) as u8;
                                        let vec21 = e;
                                        let ptr21 = vec21.as_ptr().cast::<u8>();
                                        let len21 = vec21.len();
                                        *base.add(12).cast::<usize>() = len21;
                                        *base.add(8).cast::<*mut u8>() = ptr21.cast_mut();
                                    }
                                    DbValue::Enumeration(e) => {
                                        *base.add(0).cast::<u8>() = (31i32) as u8;
                                        let vec22 = e;
                                        let ptr22 = vec22.as_ptr().cast::<u8>();
                                        let len22 = vec22.len();
                                        *base.add(12).cast::<usize>() = len22;
                                        *base.add(8).cast::<*mut u8>() = ptr22.cast_mut();
                                    }
                                    DbValue::Set(e) => {
                                        *base.add(0).cast::<u8>() = (32i32) as u8;
                                        let vec23 = e;
                                        let ptr23 = vec23.as_ptr().cast::<u8>();
                                        let len23 = vec23.len();
                                        *base.add(12).cast::<usize>() = len23;
                                        *base.add(8).cast::<*mut u8>() = ptr23.cast_mut();
                                    }
                                    DbValue::Bit(e) => {
                                        *base.add(0).cast::<u8>() = (33i32) as u8;
                                        let vec24 = e;
                                        let len24 = vec24.len();
                                        let layout24 = _rt::alloc::Layout::from_size_align_unchecked(
                                            vec24.len() * 1,
                                            1,
                                        );
                                        let result24 = if layout24.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout24).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout24);
                                            }
                                            ptr
                                        } else {
                                            ::core::ptr::null_mut()
                                        };
                                        for (i, e) in vec24.into_iter().enumerate() {
                                            let base = result24.add(i * 1);
                                            {
                                                *base.add(0).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                        }
                                        *base.add(12).cast::<usize>() = len24;
                                        *base.add(8).cast::<*mut u8>() = result24;
                                        cleanup_list.extend_from_slice(&[(result24, layout24)]);
                                    }
                                    DbValue::Json(e) => {
                                        *base.add(0).cast::<u8>() = (34i32) as u8;
                                        let vec25 = e;
                                        let ptr25 = vec25.as_ptr().cast::<u8>();
                                        let len25 = vec25.len();
                                        *base.add(12).cast::<usize>() = len25;
                                        *base.add(8).cast::<*mut u8>() = ptr25.cast_mut();
                                    }
                                    DbValue::Null => {
                                        *base.add(0).cast::<u8>() = (35i32) as u8;
                                    }
                                }
                            }
                        }
                        let ptr27 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rdbms/mysql@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]db-connection.query-stream"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            result26,
                            len26,
                            ptr27,
                        );
                        let l28 = i32::from(*ptr27.add(0).cast::<u8>());
                        if layout26.size() != 0 {
                            _rt::alloc::dealloc(result26.cast(), layout26);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l28 {
                            0 => {
                                let e = {
                                    let l29 = *ptr27.add(4).cast::<i32>();
                                    DbResultStream::from_handle(l29 as u32)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l30 = i32::from(*ptr27.add(4).cast::<u8>());
                                    let v46 = match l30 {
                                        0 => {
                                            let e46 = {
                                                let l31 = *ptr27.add(8).cast::<*mut u8>();
                                                let l32 = *ptr27.add(12).cast::<usize>();
                                                let len33 = l32;
                                                let bytes33 = _rt::Vec::from_raw_parts(
                                                    l31.cast(),
                                                    len33,
                                                    len33,
                                                );
                                                _rt::string_lift(bytes33)
                                            };
                                            Error::ConnectionFailure(e46)
                                        }
                                        1 => {
                                            let e46 = {
                                                let l34 = *ptr27.add(8).cast::<*mut u8>();
                                                let l35 = *ptr27.add(12).cast::<usize>();
                                                let len36 = l35;
                                                let bytes36 = _rt::Vec::from_raw_parts(
                                                    l34.cast(),
                                                    len36,
                                                    len36,
                                                );
                                                _rt::string_lift(bytes36)
                                            };
                                            Error::QueryParameterFailure(e46)
                                        }
                                        2 => {
                                            let e46 = {
                                                let l37 = *ptr27.add(8).cast::<*mut u8>();
                                                let l38 = *ptr27.add(12).cast::<usize>();
                                                let len39 = l38;
                                                let bytes39 = _rt::Vec::from_raw_parts(
                                                    l37.cast(),
                                                    len39,
                                                    len39,
                                                );
                                                _rt::string_lift(bytes39)
                                            };
                                            Error::QueryExecutionFailure(e46)
                                        }
                                        3 => {
                                            let e46 = {
                                                let l40 = *ptr27.add(8).cast::<*mut u8>();
                                                let l41 = *ptr27.add(12).cast::<usize>();
                                                let len42 = l41;
                                                let bytes42 = _rt::Vec::from_raw_parts(
                                                    l40.cast(),
                                                    len42,
                                                    len42,
                                                );
                                                _rt::string_lift(bytes42)
                                            };
                                            Error::QueryResponseFailure(e46)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 4, "invalid enum discriminant");
                                            let e46 = {
                                                let l43 = *ptr27.add(8).cast::<*mut u8>();
                                                let l44 = *ptr27.add(12).cast::<usize>();
                                                let len45 = l44;
                                                let bytes45 = _rt::Vec::from_raw_parts(
                                                    l43.cast(),
                                                    len45,
                                                    len45,
                                                );
                                                _rt::string_lift(bytes45)
                                            };
                                            Error::Other(e46)
                                        }
                                    };
                                    v46
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl DbConnection {
                #[allow(unused_unsafe, clippy::all)]
                pub fn execute(
                    &self,
                    statement: &str,
                    params: &[DbValue],
                ) -> Result<u64, Error> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 24]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 24],
                        );
                        let vec0 = statement;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec26 = params;
                        let len26 = vec26.len();
                        let layout26 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec26.len() * 24,
                            8,
                        );
                        let result26 = if layout26.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout26).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout26);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec26.into_iter().enumerate() {
                            let base = result26.add(i * 24);
                            {
                                match e {
                                    DbValue::Boolean(e) => {
                                        *base.add(0).cast::<u8>() = (0i32) as u8;
                                        *base.add(8).cast::<u8>() = (match e {
                                            true => 1,
                                            false => 0,
                                        }) as u8;
                                    }
                                    DbValue::Tinyint(e) => {
                                        *base.add(0).cast::<u8>() = (1i32) as u8;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                    }
                                    DbValue::Smallint(e) => {
                                        *base.add(0).cast::<u8>() = (2i32) as u8;
                                        *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                    }
                                    DbValue::Mediumint(e) => {
                                        *base.add(0).cast::<u8>() = (3i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::Int(e) => {
                                        *base.add(0).cast::<u8>() = (4i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::Bigint(e) => {
                                        *base.add(0).cast::<u8>() = (5i32) as u8;
                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    DbValue::TinyintUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (6i32) as u8;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                    }
                                    DbValue::SmallintUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (7i32) as u8;
                                        *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                    }
                                    DbValue::MediumintUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (8i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::IntUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (9i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::BigintUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (10i32) as u8;
                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    DbValue::Float(e) => {
                                        *base.add(0).cast::<u8>() = (11i32) as u8;
                                        *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                    }
                                    DbValue::Double(e) => {
                                        *base.add(0).cast::<u8>() = (12i32) as u8;
                                        *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                    }
                                    DbValue::Decimal(e) => {
                                        *base.add(0).cast::<u8>() = (13i32) as u8;
                                        let vec1 = e;
                                        let ptr1 = vec1.as_ptr().cast::<u8>();
                                        let len1 = vec1.len();
                                        *base.add(12).cast::<usize>() = len1;
                                        *base.add(8).cast::<*mut u8>() = ptr1.cast_mut();
                                    }
                                    DbValue::Date(e) => {
                                        *base.add(0).cast::<u8>() = (14i32) as u8;
                                        let super::super::super::golem::rdbms::types::Date {
                                            year: year2,
                                            month: month2,
                                            day: day2,
                                        } = e;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(year2);
                                        *base.add(12).cast::<u8>() = (_rt::as_i32(month2)) as u8;
                                        *base.add(13).cast::<u8>() = (_rt::as_i32(day2)) as u8;
                                    }
                                    DbValue::Datetime(e) => {
                                        *base.add(0).cast::<u8>() = (15i32) as u8;
                                        let super::super::super::golem::rdbms::types::Timestamp {
                                            date: date3,
                                            time: time3,
                                        } = e;
                                        let super::super::super::golem::rdbms::types::Date {
                                            year: year4,
                                            month: month4,
                                            day: day4,
                                        } = date3;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(year4);
                                        *base.add(12).cast::<u8>() = (_rt::as_i32(month4)) as u8;
                                        *base.add(13).cast::<u8>() = (_rt::as_i32(day4)) as u8;
                                        let super::super::super::golem::rdbms::types::Time {
                                            hour: hour5,
                                            minute: minute5,
                                            second: second5,
                                            nanosecond: nanosecond5,
                                        } = time3;
                                        *base.add(16).cast::<u8>() = (_rt::as_i32(hour5)) as u8;
                                        *base.add(17).cast::<u8>() = (_rt::as_i32(minute5)) as u8;
                                        *base.add(18).cast::<u8>() = (_rt::as_i32(second5)) as u8;
                                        *base.add(20).cast::<i32>() = _rt::as_i32(nanosecond5);
                                    }
                                    DbValue::Timestamp(e) => {
                                        *base.add(0).cast::<u8>() = (16i32) as u8;
                                        let super::super::super::golem::rdbms::types::Timestamp {
                                            date: date6,
                                            time: time6,
                                        } = e;
                                        let super::super::super::golem::rdbms::types::Date {
                                            year: year7,
                                            month: month7,
                                            day: day7,
                                        } = date6;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(year7);
                                        *base.add(12).cast::<u8>() = (_rt::as_i32(month7)) as u8;
                                        *base.add(13).cast::<u8>() = (_rt::as_i32(day7)) as u8;
                                        let super::super::super::golem::rdbms::types::Time {
                                            hour: hour8,
                                            minute: minute8,
                                            second: second8,
                                            nanosecond: nanosecond8,
                                        } = time6;
                                        *base.add(16).cast::<u8>() = (_rt::as_i32(hour8)) as u8;
                                        *base.add(17).cast::<u8>() = (_rt::as_i32(minute8)) as u8;
                                        *base.add(18).cast::<u8>() = (_rt::as_i32(second8)) as u8;
                                        *base.add(20).cast::<i32>() = _rt::as_i32(nanosecond8);
                                    }
                                    DbValue::Time(e) => {
                                        *base.add(0).cast::<u8>() = (17i32) as u8;
                                        let super::super::super::golem::rdbms::types::Time {
                                            hour: hour9,
                                            minute: minute9,
                                            second: second9,
                                            nanosecond: nanosecond9,
                                        } = e;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(hour9)) as u8;
                                        *base.add(9).cast::<u8>() = (_rt::as_i32(minute9)) as u8;
                                        *base.add(10).cast::<u8>() = (_rt::as_i32(second9)) as u8;
                                        *base.add(12).cast::<i32>() = _rt::as_i32(nanosecond9);
                                    }
                                    DbValue::Year(e) => {
                                        *base.add(0).cast::<u8>() = (18i32) as u8;
                                        *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                    }
                                    DbValue::Fixchar(e) => {
                                        *base.add(0).cast::<u8>() = (19i32) as u8;
                                        let vec10 = e;
                                        let ptr10 = vec10.as_ptr().cast::<u8>();
                                        let len10 = vec10.len();
                                        *base.add(12).cast::<usize>() = len10;
                                        *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                    }
                                    DbValue::Varchar(e) => {
                                        *base.add(0).cast::<u8>() = (20i32) as u8;
                                        let vec11 = e;
                                        let ptr11 = vec11.as_ptr().cast::<u8>();
                                        let len11 = vec11.len();
                                        *base.add(12).cast::<usize>() = len11;
                                        *base.add(8).cast::<*mut u8>() = ptr11.cast_mut();
                                    }
                                    DbValue::Tinytext(e) => {
                                        *base.add(0).cast::<u8>() = (21i32) as u8;
                                        let vec12 = e;
                                        let ptr12 = vec12.as_ptr().cast::<u8>();
                                        let len12 = vec12.len();
                                        *base.add(12).cast::<usize>() = len12;
                                        *base.add(8).cast::<*mut u8>() = ptr12.cast_mut();
                                    }
                                    DbValue::Text(e) => {
                                        *base.add(0).cast::<u8>() = (22i32) as u8;
                                        let vec13 = e;
                                        let ptr13 = vec13.as_ptr().cast::<u8>();
                                        let len13 = vec13.len();
                                        *base.add(12).cast::<usize>() = len13;
                                        *base.add(8).cast::<*mut u8>() = ptr13.cast_mut();
                                    }
                                    DbValue::Mediumtext(e) => {
                                        *base.add(0).cast::<u8>() = (23i32) as u8;
                                        let vec14 = e;
                                        let ptr14 = vec14.as_ptr().cast::<u8>();
                                        let len14 = vec14.len();
                                        *base.add(12).cast::<usize>() = len14;
                                        *base.add(8).cast::<*mut u8>() = ptr14.cast_mut();
                                    }
                                    DbValue::Longtext(e) => {
                                        *base.add(0).cast::<u8>() = (24i32) as u8;
                                        let vec15 = e;
                                        let ptr15 = vec15.as_ptr().cast::<u8>();
                                        let len15 = vec15.len();
                                        *base.add(12).cast::<usize>() = len15;
                                        *base.add(8).cast::<*mut u8>() = ptr15.cast_mut();
                                    }
                                    DbValue::Binary(e) => {
                                        *base.add(0).cast::<u8>() = (25i32) as u8;
                                        let vec16 = e;
                                        let ptr16 = vec16.as_ptr().cast::<u8>();
                                        let len16 = vec16.len();
                                        *base.add(12).cast::<usize>() = len16;
                                        *base.add(8).cast::<*mut u8>() = ptr16.cast_mut();
                                    }
                                    DbValue::Varbinary(e) => {
                                        *base.add(0).cast::<u8>() = (26i32) as u8;
                                        let vec17 = e;
                                        let ptr17 = vec17.as_ptr().cast::<u8>();
                                        let len17 = vec17.len();
                                        *base.add(12).cast::<usize>() = len17;
                                        *base.add(8).cast::<*mut u8>() = ptr17.cast_mut();
                                    }
                                    DbValue::Tinyblob(e) => {
                                        *base.add(0).cast::<u8>() = (27i32) as u8;
                                        let vec18 = e;
                                        let ptr18 = vec18.as_ptr().cast::<u8>();
                                        let len18 = vec18.len();
                                        *base.add(12).cast::<usize>() = len18;
                                        *base.add(8).cast::<*mut u8>() = ptr18.cast_mut();
                                    }
                                    DbValue::Blob(e) => {
                                        *base.add(0).cast::<u8>() = (28i32) as u8;
                                        let vec19 = e;
                                        let ptr19 = vec19.as_ptr().cast::<u8>();
                                        let len19 = vec19.len();
                                        *base.add(12).cast::<usize>() = len19;
                                        *base.add(8).cast::<*mut u8>() = ptr19.cast_mut();
                                    }
                                    DbValue::Mediumblob(e) => {
                                        *base.add(0).cast::<u8>() = (29i32) as u8;
                                        let vec20 = e;
                                        let ptr20 = vec20.as_ptr().cast::<u8>();
                                        let len20 = vec20.len();
                                        *base.add(12).cast::<usize>() = len20;
                                        *base.add(8).cast::<*mut u8>() = ptr20.cast_mut();
                                    }
                                    DbValue::Longblob(e) => {
                                        *base.add(0).cast::<u8>() = (30i32) as u8;
                                        let vec21 = e;
                                        let ptr21 = vec21.as_ptr().cast::<u8>();
                                        let len21 = vec21.len();
                                        *base.add(12).cast::<usize>() = len21;
                                        *base.add(8).cast::<*mut u8>() = ptr21.cast_mut();
                                    }
                                    DbValue::Enumeration(e) => {
                                        *base.add(0).cast::<u8>() = (31i32) as u8;
                                        let vec22 = e;
                                        let ptr22 = vec22.as_ptr().cast::<u8>();
                                        let len22 = vec22.len();
                                        *base.add(12).cast::<usize>() = len22;
                                        *base.add(8).cast::<*mut u8>() = ptr22.cast_mut();
                                    }
                                    DbValue::Set(e) => {
                                        *base.add(0).cast::<u8>() = (32i32) as u8;
                                        let vec23 = e;
                                        let ptr23 = vec23.as_ptr().cast::<u8>();
                                        let len23 = vec23.len();
                                        *base.add(12).cast::<usize>() = len23;
                                        *base.add(8).cast::<*mut u8>() = ptr23.cast_mut();
                                    }
                                    DbValue::Bit(e) => {
                                        *base.add(0).cast::<u8>() = (33i32) as u8;
                                        let vec24 = e;
                                        let len24 = vec24.len();
                                        let layout24 = _rt::alloc::Layout::from_size_align_unchecked(
                                            vec24.len() * 1,
                                            1,
                                        );
                                        let result24 = if layout24.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout24).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout24);
                                            }
                                            ptr
                                        } else {
                                            ::core::ptr::null_mut()
                                        };
                                        for (i, e) in vec24.into_iter().enumerate() {
                                            let base = result24.add(i * 1);
                                            {
                                                *base.add(0).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                        }
                                        *base.add(12).cast::<usize>() = len24;
                                        *base.add(8).cast::<*mut u8>() = result24;
                                        cleanup_list.extend_from_slice(&[(result24, layout24)]);
                                    }
                                    DbValue::Json(e) => {
                                        *base.add(0).cast::<u8>() = (34i32) as u8;
                                        let vec25 = e;
                                        let ptr25 = vec25.as_ptr().cast::<u8>();
                                        let len25 = vec25.len();
                                        *base.add(12).cast::<usize>() = len25;
                                        *base.add(8).cast::<*mut u8>() = ptr25.cast_mut();
                                    }
                                    DbValue::Null => {
                                        *base.add(0).cast::<u8>() = (35i32) as u8;
                                    }
                                }
                            }
                        }
                        let ptr27 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rdbms/mysql@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]db-connection.execute"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            result26,
                            len26,
                            ptr27,
                        );
                        let l28 = i32::from(*ptr27.add(0).cast::<u8>());
                        if layout26.size() != 0 {
                            _rt::alloc::dealloc(result26.cast(), layout26);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l28 {
                            0 => {
                                let e = {
                                    let l29 = *ptr27.add(8).cast::<i64>();
                                    l29 as u64
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l30 = i32::from(*ptr27.add(8).cast::<u8>());
                                    let v46 = match l30 {
                                        0 => {
                                            let e46 = {
                                                let l31 = *ptr27.add(12).cast::<*mut u8>();
                                                let l32 = *ptr27.add(16).cast::<usize>();
                                                let len33 = l32;
                                                let bytes33 = _rt::Vec::from_raw_parts(
                                                    l31.cast(),
                                                    len33,
                                                    len33,
                                                );
                                                _rt::string_lift(bytes33)
                                            };
                                            Error::ConnectionFailure(e46)
                                        }
                                        1 => {
                                            let e46 = {
                                                let l34 = *ptr27.add(12).cast::<*mut u8>();
                                                let l35 = *ptr27.add(16).cast::<usize>();
                                                let len36 = l35;
                                                let bytes36 = _rt::Vec::from_raw_parts(
                                                    l34.cast(),
                                                    len36,
                                                    len36,
                                                );
                                                _rt::string_lift(bytes36)
                                            };
                                            Error::QueryParameterFailure(e46)
                                        }
                                        2 => {
                                            let e46 = {
                                                let l37 = *ptr27.add(12).cast::<*mut u8>();
                                                let l38 = *ptr27.add(16).cast::<usize>();
                                                let len39 = l38;
                                                let bytes39 = _rt::Vec::from_raw_parts(
                                                    l37.cast(),
                                                    len39,
                                                    len39,
                                                );
                                                _rt::string_lift(bytes39)
                                            };
                                            Error::QueryExecutionFailure(e46)
                                        }
                                        3 => {
                                            let e46 = {
                                                let l40 = *ptr27.add(12).cast::<*mut u8>();
                                                let l41 = *ptr27.add(16).cast::<usize>();
                                                let len42 = l41;
                                                let bytes42 = _rt::Vec::from_raw_parts(
                                                    l40.cast(),
                                                    len42,
                                                    len42,
                                                );
                                                _rt::string_lift(bytes42)
                                            };
                                            Error::QueryResponseFailure(e46)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 4, "invalid enum discriminant");
                                            let e46 = {
                                                let l43 = *ptr27.add(12).cast::<*mut u8>();
                                                let l44 = *ptr27.add(16).cast::<usize>();
                                                let len45 = l44;
                                                let bytes45 = _rt::Vec::from_raw_parts(
                                                    l43.cast(),
                                                    len45,
                                                    len45,
                                                );
                                                _rt::string_lift(bytes45)
                                            };
                                            Error::Other(e46)
                                        }
                                    };
                                    v46
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl DbConnection {
                #[allow(unused_unsafe, clippy::all)]
                pub fn begin_transaction(&self) -> Result<DbTransaction, Error> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 16],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rdbms/mysql@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]db-connection.begin-transaction"]
                            fn wit_import(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<i32>();
                                    DbTransaction::from_handle(l2 as u32)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = i32::from(*ptr0.add(4).cast::<u8>());
                                    let v19 = match l3 {
                                        0 => {
                                            let e19 = {
                                                let l4 = *ptr0.add(8).cast::<*mut u8>();
                                                let l5 = *ptr0.add(12).cast::<usize>();
                                                let len6 = l5;
                                                let bytes6 = _rt::Vec::from_raw_parts(
                                                    l4.cast(),
                                                    len6,
                                                    len6,
                                                );
                                                _rt::string_lift(bytes6)
                                            };
                                            Error::ConnectionFailure(e19)
                                        }
                                        1 => {
                                            let e19 = {
                                                let l7 = *ptr0.add(8).cast::<*mut u8>();
                                                let l8 = *ptr0.add(12).cast::<usize>();
                                                let len9 = l8;
                                                let bytes9 = _rt::Vec::from_raw_parts(
                                                    l7.cast(),
                                                    len9,
                                                    len9,
                                                );
                                                _rt::string_lift(bytes9)
                                            };
                                            Error::QueryParameterFailure(e19)
                                        }
                                        2 => {
                                            let e19 = {
                                                let l10 = *ptr0.add(8).cast::<*mut u8>();
                                                let l11 = *ptr0.add(12).cast::<usize>();
                                                let len12 = l11;
                                                let bytes12 = _rt::Vec::from_raw_parts(
                                                    l10.cast(),
                                                    len12,
                                                    len12,
                                                );
                                                _rt::string_lift(bytes12)
                                            };
                                            Error::QueryExecutionFailure(e19)
                                        }
                                        3 => {
                                            let e19 = {
                                                let l13 = *ptr0.add(8).cast::<*mut u8>();
                                                let l14 = *ptr0.add(12).cast::<usize>();
                                                let len15 = l14;
                                                let bytes15 = _rt::Vec::from_raw_parts(
                                                    l13.cast(),
                                                    len15,
                                                    len15,
                                                );
                                                _rt::string_lift(bytes15)
                                            };
                                            Error::QueryResponseFailure(e19)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 4, "invalid enum discriminant");
                                            let e19 = {
                                                let l16 = *ptr0.add(8).cast::<*mut u8>();
                                                let l17 = *ptr0.add(12).cast::<usize>();
                                                let len18 = l17;
                                                let bytes18 = _rt::Vec::from_raw_parts(
                                                    l16.cast(),
                                                    len18,
                                                    len18,
                                                );
                                                _rt::string_lift(bytes18)
                                            };
                                            Error::Other(e19)
                                        }
                                    };
                                    v19
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl DbTransaction {
                #[allow(unused_unsafe, clippy::all)]
                pub fn query(
                    &self,
                    statement: &str,
                    params: &[DbValue],
                ) -> Result<DbResult, Error> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 20]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 20],
                        );
                        let vec0 = statement;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec26 = params;
                        let len26 = vec26.len();
                        let layout26 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec26.len() * 24,
                            8,
                        );
                        let result26 = if layout26.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout26).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout26);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec26.into_iter().enumerate() {
                            let base = result26.add(i * 24);
                            {
                                match e {
                                    DbValue::Boolean(e) => {
                                        *base.add(0).cast::<u8>() = (0i32) as u8;
                                        *base.add(8).cast::<u8>() = (match e {
                                            true => 1,
                                            false => 0,
                                        }) as u8;
                                    }
                                    DbValue::Tinyint(e) => {
                                        *base.add(0).cast::<u8>() = (1i32) as u8;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                    }
                                    DbValue::Smallint(e) => {
                                        *base.add(0).cast::<u8>() = (2i32) as u8;
                                        *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                    }
                                    DbValue::Mediumint(e) => {
                                        *base.add(0).cast::<u8>() = (3i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::Int(e) => {
                                        *base.add(0).cast::<u8>() = (4i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::Bigint(e) => {
                                        *base.add(0).cast::<u8>() = (5i32) as u8;
                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    DbValue::TinyintUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (6i32) as u8;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                    }
                                    DbValue::SmallintUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (7i32) as u8;
                                        *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                    }
                                    DbValue::MediumintUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (8i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::IntUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (9i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::BigintUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (10i32) as u8;
                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    DbValue::Float(e) => {
                                        *base.add(0).cast::<u8>() = (11i32) as u8;
                                        *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                    }
                                    DbValue::Double(e) => {
                                        *base.add(0).cast::<u8>() = (12i32) as u8;
                                        *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                    }
                                    DbValue::Decimal(e) => {
                                        *base.add(0).cast::<u8>() = (13i32) as u8;
                                        let vec1 = e;
                                        let ptr1 = vec1.as_ptr().cast::<u8>();
                                        let len1 = vec1.len();
                                        *base.add(12).cast::<usize>() = len1;
                                        *base.add(8).cast::<*mut u8>() = ptr1.cast_mut();
                                    }
                                    DbValue::Date(e) => {
                                        *base.add(0).cast::<u8>() = (14i32) as u8;
                                        let super::super::super::golem::rdbms::types::Date {
                                            year: year2,
                                            month: month2,
                                            day: day2,
                                        } = e;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(year2);
                                        *base.add(12).cast::<u8>() = (_rt::as_i32(month2)) as u8;
                                        *base.add(13).cast::<u8>() = (_rt::as_i32(day2)) as u8;
                                    }
                                    DbValue::Datetime(e) => {
                                        *base.add(0).cast::<u8>() = (15i32) as u8;
                                        let super::super::super::golem::rdbms::types::Timestamp {
                                            date: date3,
                                            time: time3,
                                        } = e;
                                        let super::super::super::golem::rdbms::types::Date {
                                            year: year4,
                                            month: month4,
                                            day: day4,
                                        } = date3;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(year4);
                                        *base.add(12).cast::<u8>() = (_rt::as_i32(month4)) as u8;
                                        *base.add(13).cast::<u8>() = (_rt::as_i32(day4)) as u8;
                                        let super::super::super::golem::rdbms::types::Time {
                                            hour: hour5,
                                            minute: minute5,
                                            second: second5,
                                            nanosecond: nanosecond5,
                                        } = time3;
                                        *base.add(16).cast::<u8>() = (_rt::as_i32(hour5)) as u8;
                                        *base.add(17).cast::<u8>() = (_rt::as_i32(minute5)) as u8;
                                        *base.add(18).cast::<u8>() = (_rt::as_i32(second5)) as u8;
                                        *base.add(20).cast::<i32>() = _rt::as_i32(nanosecond5);
                                    }
                                    DbValue::Timestamp(e) => {
                                        *base.add(0).cast::<u8>() = (16i32) as u8;
                                        let super::super::super::golem::rdbms::types::Timestamp {
                                            date: date6,
                                            time: time6,
                                        } = e;
                                        let super::super::super::golem::rdbms::types::Date {
                                            year: year7,
                                            month: month7,
                                            day: day7,
                                        } = date6;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(year7);
                                        *base.add(12).cast::<u8>() = (_rt::as_i32(month7)) as u8;
                                        *base.add(13).cast::<u8>() = (_rt::as_i32(day7)) as u8;
                                        let super::super::super::golem::rdbms::types::Time {
                                            hour: hour8,
                                            minute: minute8,
                                            second: second8,
                                            nanosecond: nanosecond8,
                                        } = time6;
                                        *base.add(16).cast::<u8>() = (_rt::as_i32(hour8)) as u8;
                                        *base.add(17).cast::<u8>() = (_rt::as_i32(minute8)) as u8;
                                        *base.add(18).cast::<u8>() = (_rt::as_i32(second8)) as u8;
                                        *base.add(20).cast::<i32>() = _rt::as_i32(nanosecond8);
                                    }
                                    DbValue::Time(e) => {
                                        *base.add(0).cast::<u8>() = (17i32) as u8;
                                        let super::super::super::golem::rdbms::types::Time {
                                            hour: hour9,
                                            minute: minute9,
                                            second: second9,
                                            nanosecond: nanosecond9,
                                        } = e;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(hour9)) as u8;
                                        *base.add(9).cast::<u8>() = (_rt::as_i32(minute9)) as u8;
                                        *base.add(10).cast::<u8>() = (_rt::as_i32(second9)) as u8;
                                        *base.add(12).cast::<i32>() = _rt::as_i32(nanosecond9);
                                    }
                                    DbValue::Year(e) => {
                                        *base.add(0).cast::<u8>() = (18i32) as u8;
                                        *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                    }
                                    DbValue::Fixchar(e) => {
                                        *base.add(0).cast::<u8>() = (19i32) as u8;
                                        let vec10 = e;
                                        let ptr10 = vec10.as_ptr().cast::<u8>();
                                        let len10 = vec10.len();
                                        *base.add(12).cast::<usize>() = len10;
                                        *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                    }
                                    DbValue::Varchar(e) => {
                                        *base.add(0).cast::<u8>() = (20i32) as u8;
                                        let vec11 = e;
                                        let ptr11 = vec11.as_ptr().cast::<u8>();
                                        let len11 = vec11.len();
                                        *base.add(12).cast::<usize>() = len11;
                                        *base.add(8).cast::<*mut u8>() = ptr11.cast_mut();
                                    }
                                    DbValue::Tinytext(e) => {
                                        *base.add(0).cast::<u8>() = (21i32) as u8;
                                        let vec12 = e;
                                        let ptr12 = vec12.as_ptr().cast::<u8>();
                                        let len12 = vec12.len();
                                        *base.add(12).cast::<usize>() = len12;
                                        *base.add(8).cast::<*mut u8>() = ptr12.cast_mut();
                                    }
                                    DbValue::Text(e) => {
                                        *base.add(0).cast::<u8>() = (22i32) as u8;
                                        let vec13 = e;
                                        let ptr13 = vec13.as_ptr().cast::<u8>();
                                        let len13 = vec13.len();
                                        *base.add(12).cast::<usize>() = len13;
                                        *base.add(8).cast::<*mut u8>() = ptr13.cast_mut();
                                    }
                                    DbValue::Mediumtext(e) => {
                                        *base.add(0).cast::<u8>() = (23i32) as u8;
                                        let vec14 = e;
                                        let ptr14 = vec14.as_ptr().cast::<u8>();
                                        let len14 = vec14.len();
                                        *base.add(12).cast::<usize>() = len14;
                                        *base.add(8).cast::<*mut u8>() = ptr14.cast_mut();
                                    }
                                    DbValue::Longtext(e) => {
                                        *base.add(0).cast::<u8>() = (24i32) as u8;
                                        let vec15 = e;
                                        let ptr15 = vec15.as_ptr().cast::<u8>();
                                        let len15 = vec15.len();
                                        *base.add(12).cast::<usize>() = len15;
                                        *base.add(8).cast::<*mut u8>() = ptr15.cast_mut();
                                    }
                                    DbValue::Binary(e) => {
                                        *base.add(0).cast::<u8>() = (25i32) as u8;
                                        let vec16 = e;
                                        let ptr16 = vec16.as_ptr().cast::<u8>();
                                        let len16 = vec16.len();
                                        *base.add(12).cast::<usize>() = len16;
                                        *base.add(8).cast::<*mut u8>() = ptr16.cast_mut();
                                    }
                                    DbValue::Varbinary(e) => {
                                        *base.add(0).cast::<u8>() = (26i32) as u8;
                                        let vec17 = e;
                                        let ptr17 = vec17.as_ptr().cast::<u8>();
                                        let len17 = vec17.len();
                                        *base.add(12).cast::<usize>() = len17;
                                        *base.add(8).cast::<*mut u8>() = ptr17.cast_mut();
                                    }
                                    DbValue::Tinyblob(e) => {
                                        *base.add(0).cast::<u8>() = (27i32) as u8;
                                        let vec18 = e;
                                        let ptr18 = vec18.as_ptr().cast::<u8>();
                                        let len18 = vec18.len();
                                        *base.add(12).cast::<usize>() = len18;
                                        *base.add(8).cast::<*mut u8>() = ptr18.cast_mut();
                                    }
                                    DbValue::Blob(e) => {
                                        *base.add(0).cast::<u8>() = (28i32) as u8;
                                        let vec19 = e;
                                        let ptr19 = vec19.as_ptr().cast::<u8>();
                                        let len19 = vec19.len();
                                        *base.add(12).cast::<usize>() = len19;
                                        *base.add(8).cast::<*mut u8>() = ptr19.cast_mut();
                                    }
                                    DbValue::Mediumblob(e) => {
                                        *base.add(0).cast::<u8>() = (29i32) as u8;
                                        let vec20 = e;
                                        let ptr20 = vec20.as_ptr().cast::<u8>();
                                        let len20 = vec20.len();
                                        *base.add(12).cast::<usize>() = len20;
                                        *base.add(8).cast::<*mut u8>() = ptr20.cast_mut();
                                    }
                                    DbValue::Longblob(e) => {
                                        *base.add(0).cast::<u8>() = (30i32) as u8;
                                        let vec21 = e;
                                        let ptr21 = vec21.as_ptr().cast::<u8>();
                                        let len21 = vec21.len();
                                        *base.add(12).cast::<usize>() = len21;
                                        *base.add(8).cast::<*mut u8>() = ptr21.cast_mut();
                                    }
                                    DbValue::Enumeration(e) => {
                                        *base.add(0).cast::<u8>() = (31i32) as u8;
                                        let vec22 = e;
                                        let ptr22 = vec22.as_ptr().cast::<u8>();
                                        let len22 = vec22.len();
                                        *base.add(12).cast::<usize>() = len22;
                                        *base.add(8).cast::<*mut u8>() = ptr22.cast_mut();
                                    }
                                    DbValue::Set(e) => {
                                        *base.add(0).cast::<u8>() = (32i32) as u8;
                                        let vec23 = e;
                                        let ptr23 = vec23.as_ptr().cast::<u8>();
                                        let len23 = vec23.len();
                                        *base.add(12).cast::<usize>() = len23;
                                        *base.add(8).cast::<*mut u8>() = ptr23.cast_mut();
                                    }
                                    DbValue::Bit(e) => {
                                        *base.add(0).cast::<u8>() = (33i32) as u8;
                                        let vec24 = e;
                                        let len24 = vec24.len();
                                        let layout24 = _rt::alloc::Layout::from_size_align_unchecked(
                                            vec24.len() * 1,
                                            1,
                                        );
                                        let result24 = if layout24.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout24).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout24);
                                            }
                                            ptr
                                        } else {
                                            ::core::ptr::null_mut()
                                        };
                                        for (i, e) in vec24.into_iter().enumerate() {
                                            let base = result24.add(i * 1);
                                            {
                                                *base.add(0).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                        }
                                        *base.add(12).cast::<usize>() = len24;
                                        *base.add(8).cast::<*mut u8>() = result24;
                                        cleanup_list.extend_from_slice(&[(result24, layout24)]);
                                    }
                                    DbValue::Json(e) => {
                                        *base.add(0).cast::<u8>() = (34i32) as u8;
                                        let vec25 = e;
                                        let ptr25 = vec25.as_ptr().cast::<u8>();
                                        let len25 = vec25.len();
                                        *base.add(12).cast::<usize>() = len25;
                                        *base.add(8).cast::<*mut u8>() = ptr25.cast_mut();
                                    }
                                    DbValue::Null => {
                                        *base.add(0).cast::<u8>() = (35i32) as u8;
                                    }
                                }
                            }
                        }
                        let ptr27 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rdbms/mysql@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]db-transaction.query"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            result26,
                            len26,
                            ptr27,
                        );
                        let l28 = i32::from(*ptr27.add(0).cast::<u8>());
                        if layout26.size() != 0 {
                            _rt::alloc::dealloc(result26.cast(), layout26);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l28 {
                            0 => {
                                let e = {
                                    let l29 = *ptr27.add(4).cast::<*mut u8>();
                                    let l30 = *ptr27.add(8).cast::<usize>();
                                    let base40 = l29;
                                    let len40 = l30;
                                    let mut result40 = _rt::Vec::with_capacity(len40);
                                    for i in 0..len40 {
                                        let base = base40.add(i * 32);
                                        let e40 = {
                                            let l31 = *base.add(0).cast::<i64>();
                                            let l32 = *base.add(8).cast::<*mut u8>();
                                            let l33 = *base.add(12).cast::<usize>();
                                            let len34 = l33;
                                            let bytes34 = _rt::Vec::from_raw_parts(
                                                l32.cast(),
                                                len34,
                                                len34,
                                            );
                                            let l35 = i32::from(*base.add(16).cast::<u8>());
                                            let v36 = match l35 {
                                                0 => DbColumnType::Boolean,
                                                1 => DbColumnType::Tinyint,
                                                2 => DbColumnType::Smallint,
                                                3 => DbColumnType::Mediumint,
                                                4 => DbColumnType::Int,
                                                5 => DbColumnType::Bigint,
                                                6 => DbColumnType::TinyintUnsigned,
                                                7 => DbColumnType::SmallintUnsigned,
                                                8 => DbColumnType::MediumintUnsigned,
                                                9 => DbColumnType::IntUnsigned,
                                                10 => DbColumnType::BigintUnsigned,
                                                11 => DbColumnType::Float,
                                                12 => DbColumnType::Double,
                                                13 => DbColumnType::Decimal,
                                                14 => DbColumnType::Date,
                                                15 => DbColumnType::Datetime,
                                                16 => DbColumnType::Timestamp,
                                                17 => DbColumnType::Time,
                                                18 => DbColumnType::Year,
                                                19 => DbColumnType::Fixchar,
                                                20 => DbColumnType::Varchar,
                                                21 => DbColumnType::Tinytext,
                                                22 => DbColumnType::Text,
                                                23 => DbColumnType::Mediumtext,
                                                24 => DbColumnType::Longtext,
                                                25 => DbColumnType::Binary,
                                                26 => DbColumnType::Varbinary,
                                                27 => DbColumnType::Tinyblob,
                                                28 => DbColumnType::Blob,
                                                29 => DbColumnType::Mediumblob,
                                                30 => DbColumnType::Longblob,
                                                31 => DbColumnType::Enumeration,
                                                32 => DbColumnType::Set,
                                                33 => DbColumnType::Bit,
                                                n => {
                                                    debug_assert_eq!(n, 34, "invalid enum discriminant");
                                                    DbColumnType::Json
                                                }
                                            };
                                            let l37 = *base.add(20).cast::<*mut u8>();
                                            let l38 = *base.add(24).cast::<usize>();
                                            let len39 = l38;
                                            let bytes39 = _rt::Vec::from_raw_parts(
                                                l37.cast(),
                                                len39,
                                                len39,
                                            );
                                            DbColumn {
                                                ordinal: l31 as u64,
                                                name: _rt::string_lift(bytes34),
                                                db_type: v36,
                                                db_type_name: _rt::string_lift(bytes39),
                                            }
                                        };
                                        result40.push(e40);
                                    }
                                    _rt::cabi_dealloc(base40, len40 * 32, 8);
                                    let l41 = *ptr27.add(12).cast::<*mut u8>();
                                    let l42 = *ptr27.add(16).cast::<usize>();
                                    let base135 = l41;
                                    let len135 = l42;
                                    let mut result135 = _rt::Vec::with_capacity(len135);
                                    for i in 0..len135 {
                                        let base = base135.add(i * 8);
                                        let e135 = {
                                            let l43 = *base.add(0).cast::<*mut u8>();
                                            let l44 = *base.add(4).cast::<usize>();
                                            let base134 = l43;
                                            let len134 = l44;
                                            let mut result134 = _rt::Vec::with_capacity(len134);
                                            for i in 0..len134 {
                                                let base = base134.add(i * 24);
                                                let e134 = {
                                                    let l45 = i32::from(*base.add(0).cast::<u8>());
                                                    let v133 = match l45 {
                                                        0 => {
                                                            let e133 = {
                                                                let l46 = i32::from(*base.add(8).cast::<u8>());
                                                                _rt::bool_lift(l46 as u8)
                                                            };
                                                            DbValue::Boolean(e133)
                                                        }
                                                        1 => {
                                                            let e133 = {
                                                                let l47 = i32::from(*base.add(8).cast::<i8>());
                                                                l47 as i8
                                                            };
                                                            DbValue::Tinyint(e133)
                                                        }
                                                        2 => {
                                                            let e133 = {
                                                                let l48 = i32::from(*base.add(8).cast::<i16>());
                                                                l48 as i16
                                                            };
                                                            DbValue::Smallint(e133)
                                                        }
                                                        3 => {
                                                            let e133 = {
                                                                let l49 = *base.add(8).cast::<i32>();
                                                                l49
                                                            };
                                                            DbValue::Mediumint(e133)
                                                        }
                                                        4 => {
                                                            let e133 = {
                                                                let l50 = *base.add(8).cast::<i32>();
                                                                l50
                                                            };
                                                            DbValue::Int(e133)
                                                        }
                                                        5 => {
                                                            let e133 = {
                                                                let l51 = *base.add(8).cast::<i64>();
                                                                l51
                                                            };
                                                            DbValue::Bigint(e133)
                                                        }
                                                        6 => {
                                                            let e133 = {
                                                                let l52 = i32::from(*base.add(8).cast::<u8>());
                                                                l52 as u8
                                                            };
                                                            DbValue::TinyintUnsigned(e133)
                                                        }
                                                        7 => {
                                                            let e133 = {
                                                                let l53 = i32::from(*base.add(8).cast::<u16>());
                                                                l53 as u16
                                                            };
                                                            DbValue::SmallintUnsigned(e133)
                                                        }
                                                        8 => {
                                                            let e133 = {
                                                                let l54 = *base.add(8).cast::<i32>();
                                                                l54 as u32
                                                            };
                                                            DbValue::MediumintUnsigned(e133)
                                                        }
                                                        9 => {
                                                            let e133 = {
                                                                let l55 = *base.add(8).cast::<i32>();
                                                                l55 as u32
                                                            };
                                                            DbValue::IntUnsigned(e133)
                                                        }
                                                        10 => {
                                                            let e133 = {
                                                                let l56 = *base.add(8).cast::<i64>();
                                                                l56 as u64
                                                            };
                                                            DbValue::BigintUnsigned(e133)
                                                        }
                                                        11 => {
                                                            let e133 = {
                                                                let l57 = *base.add(8).cast::<f32>();
                                                                l57
                                                            };
                                                            DbValue::Float(e133)
                                                        }
                                                        12 => {
                                                            let e133 = {
                                                                let l58 = *base.add(8).cast::<f64>();
                                                                l58
                                                            };
                                                            DbValue::Double(e133)
                                                        }
                                                        13 => {
                                                            let e133 = {
                                                                let l59 = *base.add(8).cast::<*mut u8>();
                                                                let l60 = *base.add(12).cast::<usize>();
                                                                let len61 = l60;
                                                                let bytes61 = _rt::Vec::from_raw_parts(
                                                                    l59.cast(),
                                                                    len61,
                                                                    len61,
                                                                );
                                                                _rt::string_lift(bytes61)
                                                            };
                                                            DbValue::Decimal(e133)
                                                        }
                                                        14 => {
                                                            let e133 = {
                                                                let l62 = *base.add(8).cast::<i32>();
                                                                let l63 = i32::from(*base.add(12).cast::<u8>());
                                                                let l64 = i32::from(*base.add(13).cast::<u8>());
                                                                super::super::super::golem::rdbms::types::Date {
                                                                    year: l62,
                                                                    month: l63 as u8,
                                                                    day: l64 as u8,
                                                                }
                                                            };
                                                            DbValue::Date(e133)
                                                        }
                                                        15 => {
                                                            let e133 = {
                                                                let l65 = *base.add(8).cast::<i32>();
                                                                let l66 = i32::from(*base.add(12).cast::<u8>());
                                                                let l67 = i32::from(*base.add(13).cast::<u8>());
                                                                let l68 = i32::from(*base.add(16).cast::<u8>());
                                                                let l69 = i32::from(*base.add(17).cast::<u8>());
                                                                let l70 = i32::from(*base.add(18).cast::<u8>());
                                                                let l71 = *base.add(20).cast::<i32>();
                                                                super::super::super::golem::rdbms::types::Timestamp {
                                                                    date: super::super::super::golem::rdbms::types::Date {
                                                                        year: l65,
                                                                        month: l66 as u8,
                                                                        day: l67 as u8,
                                                                    },
                                                                    time: super::super::super::golem::rdbms::types::Time {
                                                                        hour: l68 as u8,
                                                                        minute: l69 as u8,
                                                                        second: l70 as u8,
                                                                        nanosecond: l71 as u32,
                                                                    },
                                                                }
                                                            };
                                                            DbValue::Datetime(e133)
                                                        }
                                                        16 => {
                                                            let e133 = {
                                                                let l72 = *base.add(8).cast::<i32>();
                                                                let l73 = i32::from(*base.add(12).cast::<u8>());
                                                                let l74 = i32::from(*base.add(13).cast::<u8>());
                                                                let l75 = i32::from(*base.add(16).cast::<u8>());
                                                                let l76 = i32::from(*base.add(17).cast::<u8>());
                                                                let l77 = i32::from(*base.add(18).cast::<u8>());
                                                                let l78 = *base.add(20).cast::<i32>();
                                                                super::super::super::golem::rdbms::types::Timestamp {
                                                                    date: super::super::super::golem::rdbms::types::Date {
                                                                        year: l72,
                                                                        month: l73 as u8,
                                                                        day: l74 as u8,
                                                                    },
                                                                    time: super::super::super::golem::rdbms::types::Time {
                                                                        hour: l75 as u8,
                                                                        minute: l76 as u8,
                                                                        second: l77 as u8,
                                                                        nanosecond: l78 as u32,
                                                                    },
                                                                }
                                                            };
                                                            DbValue::Timestamp(e133)
                                                        }
                                                        17 => {
                                                            let e133 = {
                                                                let l79 = i32::from(*base.add(8).cast::<u8>());
                                                                let l80 = i32::from(*base.add(9).cast::<u8>());
                                                                let l81 = i32::from(*base.add(10).cast::<u8>());
                                                                let l82 = *base.add(12).cast::<i32>();
                                                                super::super::super::golem::rdbms::types::Time {
                                                                    hour: l79 as u8,
                                                                    minute: l80 as u8,
                                                                    second: l81 as u8,
                                                                    nanosecond: l82 as u32,
                                                                }
                                                            };
                                                            DbValue::Time(e133)
                                                        }
                                                        18 => {
                                                            let e133 = {
                                                                let l83 = i32::from(*base.add(8).cast::<u16>());
                                                                l83 as u16
                                                            };
                                                            DbValue::Year(e133)
                                                        }
                                                        19 => {
                                                            let e133 = {
                                                                let l84 = *base.add(8).cast::<*mut u8>();
                                                                let l85 = *base.add(12).cast::<usize>();
                                                                let len86 = l85;
                                                                let bytes86 = _rt::Vec::from_raw_parts(
                                                                    l84.cast(),
                                                                    len86,
                                                                    len86,
                                                                );
                                                                _rt::string_lift(bytes86)
                                                            };
                                                            DbValue::Fixchar(e133)
                                                        }
                                                        20 => {
                                                            let e133 = {
                                                                let l87 = *base.add(8).cast::<*mut u8>();
                                                                let l88 = *base.add(12).cast::<usize>();
                                                                let len89 = l88;
                                                                let bytes89 = _rt::Vec::from_raw_parts(
                                                                    l87.cast(),
                                                                    len89,
                                                                    len89,
                                                                );
                                                                _rt::string_lift(bytes89)
                                                            };
                                                            DbValue::Varchar(e133)
                                                        }
                                                        21 => {
                                                            let e133 = {
                                                                let l90 = *base.add(8).cast::<*mut u8>();
                                                                let l91 = *base.add(12).cast::<usize>();
                                                                let len92 = l91;
                                                                let bytes92 = _rt::Vec::from_raw_parts(
                                                                    l90.cast(),
                                                                    len92,
                                                                    len92,
                                                                );
                                                                _rt::string_lift(bytes92)
                                                            };
                                                            DbValue::Tinytext(e133)
                                                        }
                                                        22 => {
                                                            let e133 = {
                                                                let l93 = *base.add(8).cast::<*mut u8>();
                                                                let l94 = *base.add(12).cast::<usize>();
                                                                let len95 = l94;
                                                                let bytes95 = _rt::Vec::from_raw_parts(
                                                                    l93.cast(),
                                                                    len95,
                                                                    len95,
                                                                );
                                                                _rt::string_lift(bytes95)
                                                            };
                                                            DbValue::Text(e133)
                                                        }
                                                        23 => {
                                                            let e133 = {
                                                                let l96 = *base.add(8).cast::<*mut u8>();
                                                                let l97 = *base.add(12).cast::<usize>();
                                                                let len98 = l97;
                                                                let bytes98 = _rt::Vec::from_raw_parts(
                                                                    l96.cast(),
                                                                    len98,
                                                                    len98,
                                                                );
                                                                _rt::string_lift(bytes98)
                                                            };
                                                            DbValue::Mediumtext(e133)
                                                        }
                                                        24 => {
                                                            let e133 = {
                                                                let l99 = *base.add(8).cast::<*mut u8>();
                                                                let l100 = *base.add(12).cast::<usize>();
                                                                let len101 = l100;
                                                                let bytes101 = _rt::Vec::from_raw_parts(
                                                                    l99.cast(),
                                                                    len101,
                                                                    len101,
                                                                );
                                                                _rt::string_lift(bytes101)
                                                            };
                                                            DbValue::Longtext(e133)
                                                        }
                                                        25 => {
                                                            let e133 = {
                                                                let l102 = *base.add(8).cast::<*mut u8>();
                                                                let l103 = *base.add(12).cast::<usize>();
                                                                let len104 = l103;
                                                                _rt::Vec::from_raw_parts(l102.cast(), len104, len104)
                                                            };
                                                            DbValue::Binary(e133)
                                                        }
                                                        26 => {
                                                            let e133 = {
                                                                let l105 = *base.add(8).cast::<*mut u8>();
                                                                let l106 = *base.add(12).cast::<usize>();
                                                                let len107 = l106;
                                                                _rt::Vec::from_raw_parts(l105.cast(), len107, len107)
                                                            };
                                                            DbValue::Varbinary(e133)
                                                        }
                                                        27 => {
                                                            let e133 = {
                                                                let l108 = *base.add(8).cast::<*mut u8>();
                                                                let l109 = *base.add(12).cast::<usize>();
                                                                let len110 = l109;
                                                                _rt::Vec::from_raw_parts(l108.cast(), len110, len110)
                                                            };
                                                            DbValue::Tinyblob(e133)
                                                        }
                                                        28 => {
                                                            let e133 = {
                                                                let l111 = *base.add(8).cast::<*mut u8>();
                                                                let l112 = *base.add(12).cast::<usize>();
                                                                let len113 = l112;
                                                                _rt::Vec::from_raw_parts(l111.cast(), len113, len113)
                                                            };
                                                            DbValue::Blob(e133)
                                                        }
                                                        29 => {
                                                            let e133 = {
                                                                let l114 = *base.add(8).cast::<*mut u8>();
                                                                let l115 = *base.add(12).cast::<usize>();
                                                                let len116 = l115;
                                                                _rt::Vec::from_raw_parts(l114.cast(), len116, len116)
                                                            };
                                                            DbValue::Mediumblob(e133)
                                                        }
                                                        30 => {
                                                            let e133 = {
                                                                let l117 = *base.add(8).cast::<*mut u8>();
                                                                let l118 = *base.add(12).cast::<usize>();
                                                                let len119 = l118;
                                                                _rt::Vec::from_raw_parts(l117.cast(), len119, len119)
                                                            };
                                                            DbValue::Longblob(e133)
                                                        }
                                                        31 => {
                                                            let e133 = {
                                                                let l120 = *base.add(8).cast::<*mut u8>();
                                                                let l121 = *base.add(12).cast::<usize>();
                                                                let len122 = l121;
                                                                let bytes122 = _rt::Vec::from_raw_parts(
                                                                    l120.cast(),
                                                                    len122,
                                                                    len122,
                                                                );
                                                                _rt::string_lift(bytes122)
                                                            };
                                                            DbValue::Enumeration(e133)
                                                        }
                                                        32 => {
                                                            let e133 = {
                                                                let l123 = *base.add(8).cast::<*mut u8>();
                                                                let l124 = *base.add(12).cast::<usize>();
                                                                let len125 = l124;
                                                                let bytes125 = _rt::Vec::from_raw_parts(
                                                                    l123.cast(),
                                                                    len125,
                                                                    len125,
                                                                );
                                                                _rt::string_lift(bytes125)
                                                            };
                                                            DbValue::Set(e133)
                                                        }
                                                        33 => {
                                                            let e133 = {
                                                                let l126 = *base.add(8).cast::<*mut u8>();
                                                                let l127 = *base.add(12).cast::<usize>();
                                                                let base129 = l126;
                                                                let len129 = l127;
                                                                let mut result129 = _rt::Vec::with_capacity(len129);
                                                                for i in 0..len129 {
                                                                    let base = base129.add(i * 1);
                                                                    let e129 = {
                                                                        let l128 = i32::from(*base.add(0).cast::<u8>());
                                                                        _rt::bool_lift(l128 as u8)
                                                                    };
                                                                    result129.push(e129);
                                                                }
                                                                _rt::cabi_dealloc(base129, len129 * 1, 1);
                                                                result129
                                                            };
                                                            DbValue::Bit(e133)
                                                        }
                                                        34 => {
                                                            let e133 = {
                                                                let l130 = *base.add(8).cast::<*mut u8>();
                                                                let l131 = *base.add(12).cast::<usize>();
                                                                let len132 = l131;
                                                                let bytes132 = _rt::Vec::from_raw_parts(
                                                                    l130.cast(),
                                                                    len132,
                                                                    len132,
                                                                );
                                                                _rt::string_lift(bytes132)
                                                            };
                                                            DbValue::Json(e133)
                                                        }
                                                        n => {
                                                            debug_assert_eq!(n, 35, "invalid enum discriminant");
                                                            DbValue::Null
                                                        }
                                                    };
                                                    v133
                                                };
                                                result134.push(e134);
                                            }
                                            _rt::cabi_dealloc(base134, len134 * 24, 8);
                                            DbRow { values: result134 }
                                        };
                                        result135.push(e135);
                                    }
                                    _rt::cabi_dealloc(base135, len135 * 8, 4);
                                    DbResult {
                                        columns: result40,
                                        rows: result135,
                                    }
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l136 = i32::from(*ptr27.add(4).cast::<u8>());
                                    let v152 = match l136 {
                                        0 => {
                                            let e152 = {
                                                let l137 = *ptr27.add(8).cast::<*mut u8>();
                                                let l138 = *ptr27.add(12).cast::<usize>();
                                                let len139 = l138;
                                                let bytes139 = _rt::Vec::from_raw_parts(
                                                    l137.cast(),
                                                    len139,
                                                    len139,
                                                );
                                                _rt::string_lift(bytes139)
                                            };
                                            Error::ConnectionFailure(e152)
                                        }
                                        1 => {
                                            let e152 = {
                                                let l140 = *ptr27.add(8).cast::<*mut u8>();
                                                let l141 = *ptr27.add(12).cast::<usize>();
                                                let len142 = l141;
                                                let bytes142 = _rt::Vec::from_raw_parts(
                                                    l140.cast(),
                                                    len142,
                                                    len142,
                                                );
                                                _rt::string_lift(bytes142)
                                            };
                                            Error::QueryParameterFailure(e152)
                                        }
                                        2 => {
                                            let e152 = {
                                                let l143 = *ptr27.add(8).cast::<*mut u8>();
                                                let l144 = *ptr27.add(12).cast::<usize>();
                                                let len145 = l144;
                                                let bytes145 = _rt::Vec::from_raw_parts(
                                                    l143.cast(),
                                                    len145,
                                                    len145,
                                                );
                                                _rt::string_lift(bytes145)
                                            };
                                            Error::QueryExecutionFailure(e152)
                                        }
                                        3 => {
                                            let e152 = {
                                                let l146 = *ptr27.add(8).cast::<*mut u8>();
                                                let l147 = *ptr27.add(12).cast::<usize>();
                                                let len148 = l147;
                                                let bytes148 = _rt::Vec::from_raw_parts(
                                                    l146.cast(),
                                                    len148,
                                                    len148,
                                                );
                                                _rt::string_lift(bytes148)
                                            };
                                            Error::QueryResponseFailure(e152)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 4, "invalid enum discriminant");
                                            let e152 = {
                                                let l149 = *ptr27.add(8).cast::<*mut u8>();
                                                let l150 = *ptr27.add(12).cast::<usize>();
                                                let len151 = l150;
                                                let bytes151 = _rt::Vec::from_raw_parts(
                                                    l149.cast(),
                                                    len151,
                                                    len151,
                                                );
                                                _rt::string_lift(bytes151)
                                            };
                                            Error::Other(e152)
                                        }
                                    };
                                    v152
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl DbTransaction {
                #[allow(unused_unsafe, clippy::all)]
                pub fn query_stream(
                    &self,
                    statement: &str,
                    params: &[DbValue],
                ) -> Result<DbResultStream, Error> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 16],
                        );
                        let vec0 = statement;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec26 = params;
                        let len26 = vec26.len();
                        let layout26 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec26.len() * 24,
                            8,
                        );
                        let result26 = if layout26.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout26).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout26);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec26.into_iter().enumerate() {
                            let base = result26.add(i * 24);
                            {
                                match e {
                                    DbValue::Boolean(e) => {
                                        *base.add(0).cast::<u8>() = (0i32) as u8;
                                        *base.add(8).cast::<u8>() = (match e {
                                            true => 1,
                                            false => 0,
                                        }) as u8;
                                    }
                                    DbValue::Tinyint(e) => {
                                        *base.add(0).cast::<u8>() = (1i32) as u8;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                    }
                                    DbValue::Smallint(e) => {
                                        *base.add(0).cast::<u8>() = (2i32) as u8;
                                        *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                    }
                                    DbValue::Mediumint(e) => {
                                        *base.add(0).cast::<u8>() = (3i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::Int(e) => {
                                        *base.add(0).cast::<u8>() = (4i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::Bigint(e) => {
                                        *base.add(0).cast::<u8>() = (5i32) as u8;
                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    DbValue::TinyintUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (6i32) as u8;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                    }
                                    DbValue::SmallintUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (7i32) as u8;
                                        *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                    }
                                    DbValue::MediumintUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (8i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::IntUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (9i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::BigintUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (10i32) as u8;
                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    DbValue::Float(e) => {
                                        *base.add(0).cast::<u8>() = (11i32) as u8;
                                        *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                    }
                                    DbValue::Double(e) => {
                                        *base.add(0).cast::<u8>() = (12i32) as u8;
                                        *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                    }
                                    DbValue::Decimal(e) => {
                                        *base.add(0).cast::<u8>() = (13i32) as u8;
                                        let vec1 = e;
                                        let ptr1 = vec1.as_ptr().cast::<u8>();
                                        let len1 = vec1.len();
                                        *base.add(12).cast::<usize>() = len1;
                                        *base.add(8).cast::<*mut u8>() = ptr1.cast_mut();
                                    }
                                    DbValue::Date(e) => {
                                        *base.add(0).cast::<u8>() = (14i32) as u8;
                                        let super::super::super::golem::rdbms::types::Date {
                                            year: year2,
                                            month: month2,
                                            day: day2,
                                        } = e;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(year2);
                                        *base.add(12).cast::<u8>() = (_rt::as_i32(month2)) as u8;
                                        *base.add(13).cast::<u8>() = (_rt::as_i32(day2)) as u8;
                                    }
                                    DbValue::Datetime(e) => {
                                        *base.add(0).cast::<u8>() = (15i32) as u8;
                                        let super::super::super::golem::rdbms::types::Timestamp {
                                            date: date3,
                                            time: time3,
                                        } = e;
                                        let super::super::super::golem::rdbms::types::Date {
                                            year: year4,
                                            month: month4,
                                            day: day4,
                                        } = date3;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(year4);
                                        *base.add(12).cast::<u8>() = (_rt::as_i32(month4)) as u8;
                                        *base.add(13).cast::<u8>() = (_rt::as_i32(day4)) as u8;
                                        let super::super::super::golem::rdbms::types::Time {
                                            hour: hour5,
                                            minute: minute5,
                                            second: second5,
                                            nanosecond: nanosecond5,
                                        } = time3;
                                        *base.add(16).cast::<u8>() = (_rt::as_i32(hour5)) as u8;
                                        *base.add(17).cast::<u8>() = (_rt::as_i32(minute5)) as u8;
                                        *base.add(18).cast::<u8>() = (_rt::as_i32(second5)) as u8;
                                        *base.add(20).cast::<i32>() = _rt::as_i32(nanosecond5);
                                    }
                                    DbValue::Timestamp(e) => {
                                        *base.add(0).cast::<u8>() = (16i32) as u8;
                                        let super::super::super::golem::rdbms::types::Timestamp {
                                            date: date6,
                                            time: time6,
                                        } = e;
                                        let super::super::super::golem::rdbms::types::Date {
                                            year: year7,
                                            month: month7,
                                            day: day7,
                                        } = date6;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(year7);
                                        *base.add(12).cast::<u8>() = (_rt::as_i32(month7)) as u8;
                                        *base.add(13).cast::<u8>() = (_rt::as_i32(day7)) as u8;
                                        let super::super::super::golem::rdbms::types::Time {
                                            hour: hour8,
                                            minute: minute8,
                                            second: second8,
                                            nanosecond: nanosecond8,
                                        } = time6;
                                        *base.add(16).cast::<u8>() = (_rt::as_i32(hour8)) as u8;
                                        *base.add(17).cast::<u8>() = (_rt::as_i32(minute8)) as u8;
                                        *base.add(18).cast::<u8>() = (_rt::as_i32(second8)) as u8;
                                        *base.add(20).cast::<i32>() = _rt::as_i32(nanosecond8);
                                    }
                                    DbValue::Time(e) => {
                                        *base.add(0).cast::<u8>() = (17i32) as u8;
                                        let super::super::super::golem::rdbms::types::Time {
                                            hour: hour9,
                                            minute: minute9,
                                            second: second9,
                                            nanosecond: nanosecond9,
                                        } = e;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(hour9)) as u8;
                                        *base.add(9).cast::<u8>() = (_rt::as_i32(minute9)) as u8;
                                        *base.add(10).cast::<u8>() = (_rt::as_i32(second9)) as u8;
                                        *base.add(12).cast::<i32>() = _rt::as_i32(nanosecond9);
                                    }
                                    DbValue::Year(e) => {
                                        *base.add(0).cast::<u8>() = (18i32) as u8;
                                        *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                    }
                                    DbValue::Fixchar(e) => {
                                        *base.add(0).cast::<u8>() = (19i32) as u8;
                                        let vec10 = e;
                                        let ptr10 = vec10.as_ptr().cast::<u8>();
                                        let len10 = vec10.len();
                                        *base.add(12).cast::<usize>() = len10;
                                        *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                    }
                                    DbValue::Varchar(e) => {
                                        *base.add(0).cast::<u8>() = (20i32) as u8;
                                        let vec11 = e;
                                        let ptr11 = vec11.as_ptr().cast::<u8>();
                                        let len11 = vec11.len();
                                        *base.add(12).cast::<usize>() = len11;
                                        *base.add(8).cast::<*mut u8>() = ptr11.cast_mut();
                                    }
                                    DbValue::Tinytext(e) => {
                                        *base.add(0).cast::<u8>() = (21i32) as u8;
                                        let vec12 = e;
                                        let ptr12 = vec12.as_ptr().cast::<u8>();
                                        let len12 = vec12.len();
                                        *base.add(12).cast::<usize>() = len12;
                                        *base.add(8).cast::<*mut u8>() = ptr12.cast_mut();
                                    }
                                    DbValue::Text(e) => {
                                        *base.add(0).cast::<u8>() = (22i32) as u8;
                                        let vec13 = e;
                                        let ptr13 = vec13.as_ptr().cast::<u8>();
                                        let len13 = vec13.len();
                                        *base.add(12).cast::<usize>() = len13;
                                        *base.add(8).cast::<*mut u8>() = ptr13.cast_mut();
                                    }
                                    DbValue::Mediumtext(e) => {
                                        *base.add(0).cast::<u8>() = (23i32) as u8;
                                        let vec14 = e;
                                        let ptr14 = vec14.as_ptr().cast::<u8>();
                                        let len14 = vec14.len();
                                        *base.add(12).cast::<usize>() = len14;
                                        *base.add(8).cast::<*mut u8>() = ptr14.cast_mut();
                                    }
                                    DbValue::Longtext(e) => {
                                        *base.add(0).cast::<u8>() = (24i32) as u8;
                                        let vec15 = e;
                                        let ptr15 = vec15.as_ptr().cast::<u8>();
                                        let len15 = vec15.len();
                                        *base.add(12).cast::<usize>() = len15;
                                        *base.add(8).cast::<*mut u8>() = ptr15.cast_mut();
                                    }
                                    DbValue::Binary(e) => {
                                        *base.add(0).cast::<u8>() = (25i32) as u8;
                                        let vec16 = e;
                                        let ptr16 = vec16.as_ptr().cast::<u8>();
                                        let len16 = vec16.len();
                                        *base.add(12).cast::<usize>() = len16;
                                        *base.add(8).cast::<*mut u8>() = ptr16.cast_mut();
                                    }
                                    DbValue::Varbinary(e) => {
                                        *base.add(0).cast::<u8>() = (26i32) as u8;
                                        let vec17 = e;
                                        let ptr17 = vec17.as_ptr().cast::<u8>();
                                        let len17 = vec17.len();
                                        *base.add(12).cast::<usize>() = len17;
                                        *base.add(8).cast::<*mut u8>() = ptr17.cast_mut();
                                    }
                                    DbValue::Tinyblob(e) => {
                                        *base.add(0).cast::<u8>() = (27i32) as u8;
                                        let vec18 = e;
                                        let ptr18 = vec18.as_ptr().cast::<u8>();
                                        let len18 = vec18.len();
                                        *base.add(12).cast::<usize>() = len18;
                                        *base.add(8).cast::<*mut u8>() = ptr18.cast_mut();
                                    }
                                    DbValue::Blob(e) => {
                                        *base.add(0).cast::<u8>() = (28i32) as u8;
                                        let vec19 = e;
                                        let ptr19 = vec19.as_ptr().cast::<u8>();
                                        let len19 = vec19.len();
                                        *base.add(12).cast::<usize>() = len19;
                                        *base.add(8).cast::<*mut u8>() = ptr19.cast_mut();
                                    }
                                    DbValue::Mediumblob(e) => {
                                        *base.add(0).cast::<u8>() = (29i32) as u8;
                                        let vec20 = e;
                                        let ptr20 = vec20.as_ptr().cast::<u8>();
                                        let len20 = vec20.len();
                                        *base.add(12).cast::<usize>() = len20;
                                        *base.add(8).cast::<*mut u8>() = ptr20.cast_mut();
                                    }
                                    DbValue::Longblob(e) => {
                                        *base.add(0).cast::<u8>() = (30i32) as u8;
                                        let vec21 = e;
                                        let ptr21 = vec21.as_ptr().cast::<u8>();
                                        let len21 = vec21.len();
                                        *base.add(12).cast::<usize>() = len21;
                                        *base.add(8).cast::<*mut u8>() = ptr21.cast_mut();
                                    }
                                    DbValue::Enumeration(e) => {
                                        *base.add(0).cast::<u8>() = (31i32) as u8;
                                        let vec22 = e;
                                        let ptr22 = vec22.as_ptr().cast::<u8>();
                                        let len22 = vec22.len();
                                        *base.add(12).cast::<usize>() = len22;
                                        *base.add(8).cast::<*mut u8>() = ptr22.cast_mut();
                                    }
                                    DbValue::Set(e) => {
                                        *base.add(0).cast::<u8>() = (32i32) as u8;
                                        let vec23 = e;
                                        let ptr23 = vec23.as_ptr().cast::<u8>();
                                        let len23 = vec23.len();
                                        *base.add(12).cast::<usize>() = len23;
                                        *base.add(8).cast::<*mut u8>() = ptr23.cast_mut();
                                    }
                                    DbValue::Bit(e) => {
                                        *base.add(0).cast::<u8>() = (33i32) as u8;
                                        let vec24 = e;
                                        let len24 = vec24.len();
                                        let layout24 = _rt::alloc::Layout::from_size_align_unchecked(
                                            vec24.len() * 1,
                                            1,
                                        );
                                        let result24 = if layout24.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout24).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout24);
                                            }
                                            ptr
                                        } else {
                                            ::core::ptr::null_mut()
                                        };
                                        for (i, e) in vec24.into_iter().enumerate() {
                                            let base = result24.add(i * 1);
                                            {
                                                *base.add(0).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                        }
                                        *base.add(12).cast::<usize>() = len24;
                                        *base.add(8).cast::<*mut u8>() = result24;
                                        cleanup_list.extend_from_slice(&[(result24, layout24)]);
                                    }
                                    DbValue::Json(e) => {
                                        *base.add(0).cast::<u8>() = (34i32) as u8;
                                        let vec25 = e;
                                        let ptr25 = vec25.as_ptr().cast::<u8>();
                                        let len25 = vec25.len();
                                        *base.add(12).cast::<usize>() = len25;
                                        *base.add(8).cast::<*mut u8>() = ptr25.cast_mut();
                                    }
                                    DbValue::Null => {
                                        *base.add(0).cast::<u8>() = (35i32) as u8;
                                    }
                                }
                            }
                        }
                        let ptr27 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rdbms/mysql@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]db-transaction.query-stream"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            result26,
                            len26,
                            ptr27,
                        );
                        let l28 = i32::from(*ptr27.add(0).cast::<u8>());
                        if layout26.size() != 0 {
                            _rt::alloc::dealloc(result26.cast(), layout26);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l28 {
                            0 => {
                                let e = {
                                    let l29 = *ptr27.add(4).cast::<i32>();
                                    DbResultStream::from_handle(l29 as u32)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l30 = i32::from(*ptr27.add(4).cast::<u8>());
                                    let v46 = match l30 {
                                        0 => {
                                            let e46 = {
                                                let l31 = *ptr27.add(8).cast::<*mut u8>();
                                                let l32 = *ptr27.add(12).cast::<usize>();
                                                let len33 = l32;
                                                let bytes33 = _rt::Vec::from_raw_parts(
                                                    l31.cast(),
                                                    len33,
                                                    len33,
                                                );
                                                _rt::string_lift(bytes33)
                                            };
                                            Error::ConnectionFailure(e46)
                                        }
                                        1 => {
                                            let e46 = {
                                                let l34 = *ptr27.add(8).cast::<*mut u8>();
                                                let l35 = *ptr27.add(12).cast::<usize>();
                                                let len36 = l35;
                                                let bytes36 = _rt::Vec::from_raw_parts(
                                                    l34.cast(),
                                                    len36,
                                                    len36,
                                                );
                                                _rt::string_lift(bytes36)
                                            };
                                            Error::QueryParameterFailure(e46)
                                        }
                                        2 => {
                                            let e46 = {
                                                let l37 = *ptr27.add(8).cast::<*mut u8>();
                                                let l38 = *ptr27.add(12).cast::<usize>();
                                                let len39 = l38;
                                                let bytes39 = _rt::Vec::from_raw_parts(
                                                    l37.cast(),
                                                    len39,
                                                    len39,
                                                );
                                                _rt::string_lift(bytes39)
                                            };
                                            Error::QueryExecutionFailure(e46)
                                        }
                                        3 => {
                                            let e46 = {
                                                let l40 = *ptr27.add(8).cast::<*mut u8>();
                                                let l41 = *ptr27.add(12).cast::<usize>();
                                                let len42 = l41;
                                                let bytes42 = _rt::Vec::from_raw_parts(
                                                    l40.cast(),
                                                    len42,
                                                    len42,
                                                );
                                                _rt::string_lift(bytes42)
                                            };
                                            Error::QueryResponseFailure(e46)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 4, "invalid enum discriminant");
                                            let e46 = {
                                                let l43 = *ptr27.add(8).cast::<*mut u8>();
                                                let l44 = *ptr27.add(12).cast::<usize>();
                                                let len45 = l44;
                                                let bytes45 = _rt::Vec::from_raw_parts(
                                                    l43.cast(),
                                                    len45,
                                                    len45,
                                                );
                                                _rt::string_lift(bytes45)
                                            };
                                            Error::Other(e46)
                                        }
                                    };
                                    v46
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl DbTransaction {
                #[allow(unused_unsafe, clippy::all)]
                pub fn execute(
                    &self,
                    statement: &str,
                    params: &[DbValue],
                ) -> Result<u64, Error> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 24]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 24],
                        );
                        let vec0 = statement;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec26 = params;
                        let len26 = vec26.len();
                        let layout26 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec26.len() * 24,
                            8,
                        );
                        let result26 = if layout26.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout26).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout26);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec26.into_iter().enumerate() {
                            let base = result26.add(i * 24);
                            {
                                match e {
                                    DbValue::Boolean(e) => {
                                        *base.add(0).cast::<u8>() = (0i32) as u8;
                                        *base.add(8).cast::<u8>() = (match e {
                                            true => 1,
                                            false => 0,
                                        }) as u8;
                                    }
                                    DbValue::Tinyint(e) => {
                                        *base.add(0).cast::<u8>() = (1i32) as u8;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                    }
                                    DbValue::Smallint(e) => {
                                        *base.add(0).cast::<u8>() = (2i32) as u8;
                                        *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                    }
                                    DbValue::Mediumint(e) => {
                                        *base.add(0).cast::<u8>() = (3i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::Int(e) => {
                                        *base.add(0).cast::<u8>() = (4i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::Bigint(e) => {
                                        *base.add(0).cast::<u8>() = (5i32) as u8;
                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    DbValue::TinyintUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (6i32) as u8;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                    }
                                    DbValue::SmallintUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (7i32) as u8;
                                        *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                    }
                                    DbValue::MediumintUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (8i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::IntUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (9i32) as u8;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    DbValue::BigintUnsigned(e) => {
                                        *base.add(0).cast::<u8>() = (10i32) as u8;
                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    DbValue::Float(e) => {
                                        *base.add(0).cast::<u8>() = (11i32) as u8;
                                        *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                    }
                                    DbValue::Double(e) => {
                                        *base.add(0).cast::<u8>() = (12i32) as u8;
                                        *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                    }
                                    DbValue::Decimal(e) => {
                                        *base.add(0).cast::<u8>() = (13i32) as u8;
                                        let vec1 = e;
                                        let ptr1 = vec1.as_ptr().cast::<u8>();
                                        let len1 = vec1.len();
                                        *base.add(12).cast::<usize>() = len1;
                                        *base.add(8).cast::<*mut u8>() = ptr1.cast_mut();
                                    }
                                    DbValue::Date(e) => {
                                        *base.add(0).cast::<u8>() = (14i32) as u8;
                                        let super::super::super::golem::rdbms::types::Date {
                                            year: year2,
                                            month: month2,
                                            day: day2,
                                        } = e;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(year2);
                                        *base.add(12).cast::<u8>() = (_rt::as_i32(month2)) as u8;
                                        *base.add(13).cast::<u8>() = (_rt::as_i32(day2)) as u8;
                                    }
                                    DbValue::Datetime(e) => {
                                        *base.add(0).cast::<u8>() = (15i32) as u8;
                                        let super::super::super::golem::rdbms::types::Timestamp {
                                            date: date3,
                                            time: time3,
                                        } = e;
                                        let super::super::super::golem::rdbms::types::Date {
                                            year: year4,
                                            month: month4,
                                            day: day4,
                                        } = date3;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(year4);
                                        *base.add(12).cast::<u8>() = (_rt::as_i32(month4)) as u8;
                                        *base.add(13).cast::<u8>() = (_rt::as_i32(day4)) as u8;
                                        let super::super::super::golem::rdbms::types::Time {
                                            hour: hour5,
                                            minute: minute5,
                                            second: second5,
                                            nanosecond: nanosecond5,
                                        } = time3;
                                        *base.add(16).cast::<u8>() = (_rt::as_i32(hour5)) as u8;
                                        *base.add(17).cast::<u8>() = (_rt::as_i32(minute5)) as u8;
                                        *base.add(18).cast::<u8>() = (_rt::as_i32(second5)) as u8;
                                        *base.add(20).cast::<i32>() = _rt::as_i32(nanosecond5);
                                    }
                                    DbValue::Timestamp(e) => {
                                        *base.add(0).cast::<u8>() = (16i32) as u8;
                                        let super::super::super::golem::rdbms::types::Timestamp {
                                            date: date6,
                                            time: time6,
                                        } = e;
                                        let super::super::super::golem::rdbms::types::Date {
                                            year: year7,
                                            month: month7,
                                            day: day7,
                                        } = date6;
                                        *base.add(8).cast::<i32>() = _rt::as_i32(year7);
                                        *base.add(12).cast::<u8>() = (_rt::as_i32(month7)) as u8;
                                        *base.add(13).cast::<u8>() = (_rt::as_i32(day7)) as u8;
                                        let super::super::super::golem::rdbms::types::Time {
                                            hour: hour8,
                                            minute: minute8,
                                            second: second8,
                                            nanosecond: nanosecond8,
                                        } = time6;
                                        *base.add(16).cast::<u8>() = (_rt::as_i32(hour8)) as u8;
                                        *base.add(17).cast::<u8>() = (_rt::as_i32(minute8)) as u8;
                                        *base.add(18).cast::<u8>() = (_rt::as_i32(second8)) as u8;
                                        *base.add(20).cast::<i32>() = _rt::as_i32(nanosecond8);
                                    }
                                    DbValue::Time(e) => {
                                        *base.add(0).cast::<u8>() = (17i32) as u8;
                                        let super::super::super::golem::rdbms::types::Time {
                                            hour: hour9,
                                            minute: minute9,
                                            second: second9,
                                            nanosecond: nanosecond9,
                                        } = e;
                                        *base.add(8).cast::<u8>() = (_rt::as_i32(hour9)) as u8;
                                        *base.add(9).cast::<u8>() = (_rt::as_i32(minute9)) as u8;
                                        *base.add(10).cast::<u8>() = (_rt::as_i32(second9)) as u8;
                                        *base.add(12).cast::<i32>() = _rt::as_i32(nanosecond9);
                                    }
                                    DbValue::Year(e) => {
                                        *base.add(0).cast::<u8>() = (18i32) as u8;
                                        *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                    }
                                    DbValue::Fixchar(e) => {
                                        *base.add(0).cast::<u8>() = (19i32) as u8;
                                        let vec10 = e;
                                        let ptr10 = vec10.as_ptr().cast::<u8>();
                                        let len10 = vec10.len();
                                        *base.add(12).cast::<usize>() = len10;
                                        *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                    }
                                    DbValue::Varchar(e) => {
                                        *base.add(0).cast::<u8>() = (20i32) as u8;
                                        let vec11 = e;
                                        let ptr11 = vec11.as_ptr().cast::<u8>();
                                        let len11 = vec11.len();
                                        *base.add(12).cast::<usize>() = len11;
                                        *base.add(8).cast::<*mut u8>() = ptr11.cast_mut();
                                    }
                                    DbValue::Tinytext(e) => {
                                        *base.add(0).cast::<u8>() = (21i32) as u8;
                                        let vec12 = e;
                                        let ptr12 = vec12.as_ptr().cast::<u8>();
                                        let len12 = vec12.len();
                                        *base.add(12).cast::<usize>() = len12;
                                        *base.add(8).cast::<*mut u8>() = ptr12.cast_mut();
                                    }
                                    DbValue::Text(e) => {
                                        *base.add(0).cast::<u8>() = (22i32) as u8;
                                        let vec13 = e;
                                        let ptr13 = vec13.as_ptr().cast::<u8>();
                                        let len13 = vec13.len();
                                        *base.add(12).cast::<usize>() = len13;
                                        *base.add(8).cast::<*mut u8>() = ptr13.cast_mut();
                                    }
                                    DbValue::Mediumtext(e) => {
                                        *base.add(0).cast::<u8>() = (23i32) as u8;
                                        let vec14 = e;
                                        let ptr14 = vec14.as_ptr().cast::<u8>();
                                        let len14 = vec14.len();
                                        *base.add(12).cast::<usize>() = len14;
                                        *base.add(8).cast::<*mut u8>() = ptr14.cast_mut();
                                    }
                                    DbValue::Longtext(e) => {
                                        *base.add(0).cast::<u8>() = (24i32) as u8;
                                        let vec15 = e;
                                        let ptr15 = vec15.as_ptr().cast::<u8>();
                                        let len15 = vec15.len();
                                        *base.add(12).cast::<usize>() = len15;
                                        *base.add(8).cast::<*mut u8>() = ptr15.cast_mut();
                                    }
                                    DbValue::Binary(e) => {
                                        *base.add(0).cast::<u8>() = (25i32) as u8;
                                        let vec16 = e;
                                        let ptr16 = vec16.as_ptr().cast::<u8>();
                                        let len16 = vec16.len();
                                        *base.add(12).cast::<usize>() = len16;
                                        *base.add(8).cast::<*mut u8>() = ptr16.cast_mut();
                                    }
                                    DbValue::Varbinary(e) => {
                                        *base.add(0).cast::<u8>() = (26i32) as u8;
                                        let vec17 = e;
                                        let ptr17 = vec17.as_ptr().cast::<u8>();
                                        let len17 = vec17.len();
                                        *base.add(12).cast::<usize>() = len17;
                                        *base.add(8).cast::<*mut u8>() = ptr17.cast_mut();
                                    }
                                    DbValue::Tinyblob(e) => {
                                        *base.add(0).cast::<u8>() = (27i32) as u8;
                                        let vec18 = e;
                                        let ptr18 = vec18.as_ptr().cast::<u8>();
                                        let len18 = vec18.len();
                                        *base.add(12).cast::<usize>() = len18;
                                        *base.add(8).cast::<*mut u8>() = ptr18.cast_mut();
                                    }
                                    DbValue::Blob(e) => {
                                        *base.add(0).cast::<u8>() = (28i32) as u8;
                                        let vec19 = e;
                                        let ptr19 = vec19.as_ptr().cast::<u8>();
                                        let len19 = vec19.len();
                                        *base.add(12).cast::<usize>() = len19;
                                        *base.add(8).cast::<*mut u8>() = ptr19.cast_mut();
                                    }
                                    DbValue::Mediumblob(e) => {
                                        *base.add(0).cast::<u8>() = (29i32) as u8;
                                        let vec20 = e;
                                        let ptr20 = vec20.as_ptr().cast::<u8>();
                                        let len20 = vec20.len();
                                        *base.add(12).cast::<usize>() = len20;
                                        *base.add(8).cast::<*mut u8>() = ptr20.cast_mut();
                                    }
                                    DbValue::Longblob(e) => {
                                        *base.add(0).cast::<u8>() = (30i32) as u8;
                                        let vec21 = e;
                                        let ptr21 = vec21.as_ptr().cast::<u8>();
                                        let len21 = vec21.len();
                                        *base.add(12).cast::<usize>() = len21;
                                        *base.add(8).cast::<*mut u8>() = ptr21.cast_mut();
                                    }
                                    DbValue::Enumeration(e) => {
                                        *base.add(0).cast::<u8>() = (31i32) as u8;
                                        let vec22 = e;
                                        let ptr22 = vec22.as_ptr().cast::<u8>();
                                        let len22 = vec22.len();
                                        *base.add(12).cast::<usize>() = len22;
                                        *base.add(8).cast::<*mut u8>() = ptr22.cast_mut();
                                    }
                                    DbValue::Set(e) => {
                                        *base.add(0).cast::<u8>() = (32i32) as u8;
                                        let vec23 = e;
                                        let ptr23 = vec23.as_ptr().cast::<u8>();
                                        let len23 = vec23.len();
                                        *base.add(12).cast::<usize>() = len23;
                                        *base.add(8).cast::<*mut u8>() = ptr23.cast_mut();
                                    }
                                    DbValue::Bit(e) => {
                                        *base.add(0).cast::<u8>() = (33i32) as u8;
                                        let vec24 = e;
                                        let len24 = vec24.len();
                                        let layout24 = _rt::alloc::Layout::from_size_align_unchecked(
                                            vec24.len() * 1,
                                            1,
                                        );
                                        let result24 = if layout24.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout24).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout24);
                                            }
                                            ptr
                                        } else {
                                            ::core::ptr::null_mut()
                                        };
                                        for (i, e) in vec24.into_iter().enumerate() {
                                            let base = result24.add(i * 1);
                                            {
                                                *base.add(0).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                        }
                                        *base.add(12).cast::<usize>() = len24;
                                        *base.add(8).cast::<*mut u8>() = result24;
                                        cleanup_list.extend_from_slice(&[(result24, layout24)]);
                                    }
                                    DbValue::Json(e) => {
                                        *base.add(0).cast::<u8>() = (34i32) as u8;
                                        let vec25 = e;
                                        let ptr25 = vec25.as_ptr().cast::<u8>();
                                        let len25 = vec25.len();
                                        *base.add(12).cast::<usize>() = len25;
                                        *base.add(8).cast::<*mut u8>() = ptr25.cast_mut();
                                    }
                                    DbValue::Null => {
                                        *base.add(0).cast::<u8>() = (35i32) as u8;
                                    }
                                }
                            }
                        }
                        let ptr27 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rdbms/mysql@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]db-transaction.execute"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            result26,
                            len26,
                            ptr27,
                        );
                        let l28 = i32::from(*ptr27.add(0).cast::<u8>());
                        if layout26.size() != 0 {
                            _rt::alloc::dealloc(result26.cast(), layout26);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l28 {
                            0 => {
                                let e = {
                                    let l29 = *ptr27.add(8).cast::<i64>();
                                    l29 as u64
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l30 = i32::from(*ptr27.add(8).cast::<u8>());
                                    let v46 = match l30 {
                                        0 => {
                                            let e46 = {
                                                let l31 = *ptr27.add(12).cast::<*mut u8>();
                                                let l32 = *ptr27.add(16).cast::<usize>();
                                                let len33 = l32;
                                                let bytes33 = _rt::Vec::from_raw_parts(
                                                    l31.cast(),
                                                    len33,
                                                    len33,
                                                );
                                                _rt::string_lift(bytes33)
                                            };
                                            Error::ConnectionFailure(e46)
                                        }
                                        1 => {
                                            let e46 = {
                                                let l34 = *ptr27.add(12).cast::<*mut u8>();
                                                let l35 = *ptr27.add(16).cast::<usize>();
                                                let len36 = l35;
                                                let bytes36 = _rt::Vec::from_raw_parts(
                                                    l34.cast(),
                                                    len36,
                                                    len36,
                                                );
                                                _rt::string_lift(bytes36)
                                            };
                                            Error::QueryParameterFailure(e46)
                                        }
                                        2 => {
                                            let e46 = {
                                                let l37 = *ptr27.add(12).cast::<*mut u8>();
                                                let l38 = *ptr27.add(16).cast::<usize>();
                                                let len39 = l38;
                                                let bytes39 = _rt::Vec::from_raw_parts(
                                                    l37.cast(),
                                                    len39,
                                                    len39,
                                                );
                                                _rt::string_lift(bytes39)
                                            };
                                            Error::QueryExecutionFailure(e46)
                                        }
                                        3 => {
                                            let e46 = {
                                                let l40 = *ptr27.add(12).cast::<*mut u8>();
                                                let l41 = *ptr27.add(16).cast::<usize>();
                                                let len42 = l41;
                                                let bytes42 = _rt::Vec::from_raw_parts(
                                                    l40.cast(),
                                                    len42,
                                                    len42,
                                                );
                                                _rt::string_lift(bytes42)
                                            };
                                            Error::QueryResponseFailure(e46)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 4, "invalid enum discriminant");
                                            let e46 = {
                                                let l43 = *ptr27.add(12).cast::<*mut u8>();
                                                let l44 = *ptr27.add(16).cast::<usize>();
                                                let len45 = l44;
                                                let bytes45 = _rt::Vec::from_raw_parts(
                                                    l43.cast(),
                                                    len45,
                                                    len45,
                                                );
                                                _rt::string_lift(bytes45)
                                            };
                                            Error::Other(e46)
                                        }
                                    };
                                    v46
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl DbTransaction {
                #[allow(unused_unsafe, clippy::all)]
                pub fn commit(&self) -> Result<(), Error> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 16],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rdbms/mysql@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]db-transaction.commit"]
                            fn wit_import(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(4).cast::<u8>());
                                    let v18 = match l2 {
                                        0 => {
                                            let e18 = {
                                                let l3 = *ptr0.add(8).cast::<*mut u8>();
                                                let l4 = *ptr0.add(12).cast::<usize>();
                                                let len5 = l4;
                                                let bytes5 = _rt::Vec::from_raw_parts(
                                                    l3.cast(),
                                                    len5,
                                                    len5,
                                                );
                                                _rt::string_lift(bytes5)
                                            };
                                            Error::ConnectionFailure(e18)
                                        }
                                        1 => {
                                            let e18 = {
                                                let l6 = *ptr0.add(8).cast::<*mut u8>();
                                                let l7 = *ptr0.add(12).cast::<usize>();
                                                let len8 = l7;
                                                let bytes8 = _rt::Vec::from_raw_parts(
                                                    l6.cast(),
                                                    len8,
                                                    len8,
                                                );
                                                _rt::string_lift(bytes8)
                                            };
                                            Error::QueryParameterFailure(e18)
                                        }
                                        2 => {
                                            let e18 = {
                                                let l9 = *ptr0.add(8).cast::<*mut u8>();
                                                let l10 = *ptr0.add(12).cast::<usize>();
                                                let len11 = l10;
                                                let bytes11 = _rt::Vec::from_raw_parts(
                                                    l9.cast(),
                                                    len11,
                                                    len11,
                                                );
                                                _rt::string_lift(bytes11)
                                            };
                                            Error::QueryExecutionFailure(e18)
                                        }
                                        3 => {
                                            let e18 = {
                                                let l12 = *ptr0.add(8).cast::<*mut u8>();
                                                let l13 = *ptr0.add(12).cast::<usize>();
                                                let len14 = l13;
                                                let bytes14 = _rt::Vec::from_raw_parts(
                                                    l12.cast(),
                                                    len14,
                                                    len14,
                                                );
                                                _rt::string_lift(bytes14)
                                            };
                                            Error::QueryResponseFailure(e18)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 4, "invalid enum discriminant");
                                            let e18 = {
                                                let l15 = *ptr0.add(8).cast::<*mut u8>();
                                                let l16 = *ptr0.add(12).cast::<usize>();
                                                let len17 = l16;
                                                let bytes17 = _rt::Vec::from_raw_parts(
                                                    l15.cast(),
                                                    len17,
                                                    len17,
                                                );
                                                _rt::string_lift(bytes17)
                                            };
                                            Error::Other(e18)
                                        }
                                    };
                                    v18
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl DbTransaction {
                #[allow(unused_unsafe, clippy::all)]
                pub fn rollback(&self) -> Result<(), Error> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 16],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rdbms/mysql@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]db-transaction.rollback"]
                            fn wit_import(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(4).cast::<u8>());
                                    let v18 = match l2 {
                                        0 => {
                                            let e18 = {
                                                let l3 = *ptr0.add(8).cast::<*mut u8>();
                                                let l4 = *ptr0.add(12).cast::<usize>();
                                                let len5 = l4;
                                                let bytes5 = _rt::Vec::from_raw_parts(
                                                    l3.cast(),
                                                    len5,
                                                    len5,
                                                );
                                                _rt::string_lift(bytes5)
                                            };
                                            Error::ConnectionFailure(e18)
                                        }
                                        1 => {
                                            let e18 = {
                                                let l6 = *ptr0.add(8).cast::<*mut u8>();
                                                let l7 = *ptr0.add(12).cast::<usize>();
                                                let len8 = l7;
                                                let bytes8 = _rt::Vec::from_raw_parts(
                                                    l6.cast(),
                                                    len8,
                                                    len8,
                                                );
                                                _rt::string_lift(bytes8)
                                            };
                                            Error::QueryParameterFailure(e18)
                                        }
                                        2 => {
                                            let e18 = {
                                                let l9 = *ptr0.add(8).cast::<*mut u8>();
                                                let l10 = *ptr0.add(12).cast::<usize>();
                                                let len11 = l10;
                                                let bytes11 = _rt::Vec::from_raw_parts(
                                                    l9.cast(),
                                                    len11,
                                                    len11,
                                                );
                                                _rt::string_lift(bytes11)
                                            };
                                            Error::QueryExecutionFailure(e18)
                                        }
                                        3 => {
                                            let e18 = {
                                                let l12 = *ptr0.add(8).cast::<*mut u8>();
                                                let l13 = *ptr0.add(12).cast::<usize>();
                                                let len14 = l13;
                                                let bytes14 = _rt::Vec::from_raw_parts(
                                                    l12.cast(),
                                                    len14,
                                                    len14,
                                                );
                                                _rt::string_lift(bytes14)
                                            };
                                            Error::QueryResponseFailure(e18)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 4, "invalid enum discriminant");
                                            let e18 = {
                                                let l15 = *ptr0.add(8).cast::<*mut u8>();
                                                let l16 = *ptr0.add(12).cast::<usize>();
                                                let len17 = l16;
                                                let bytes17 = _rt::Vec::from_raw_parts(
                                                    l15.cast(),
                                                    len17,
                                                    len17,
                                                );
                                                _rt::string_lift(bytes17)
                                            };
                                            Error::Other(e18)
                                        }
                                    };
                                    v18
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod golem {
        pub mod it {
            #[allow(dead_code, clippy::all)]
            pub mod api {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type PostgresDbResult = super::super::super::super::golem::rdbms::postgres::DbResult;
                pub type MysqlDbResult = super::super::super::super::golem::rdbms::mysql::DbResult;
                #[repr(u8)]
                #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
                pub enum TransactionEnd {
                    Commit,
                    Rollback,
                    None,
                }
                impl ::core::fmt::Debug for TransactionEnd {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        match self {
                            TransactionEnd::Commit => {
                                f.debug_tuple("TransactionEnd::Commit").finish()
                            }
                            TransactionEnd::Rollback => {
                                f.debug_tuple("TransactionEnd::Rollback").finish()
                            }
                            TransactionEnd::None => {
                                f.debug_tuple("TransactionEnd::None").finish()
                            }
                        }
                    }
                }
                impl TransactionEnd {
                    #[doc(hidden)]
                    pub unsafe fn _lift(val: u8) -> TransactionEnd {
                        if !cfg!(debug_assertions) {
                            return ::core::mem::transmute(val);
                        }
                        match val {
                            0 => TransactionEnd::Commit,
                            1 => TransactionEnd::Rollback,
                            2 => TransactionEnd::None,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                }
                #[repr(u8)]
                #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
                pub enum StatementAction {
                    Execute,
                    Query,
                    QueryStream,
                }
                impl ::core::fmt::Debug for StatementAction {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        match self {
                            StatementAction::Execute => {
                                f.debug_tuple("StatementAction::Execute").finish()
                            }
                            StatementAction::Query => {
                                f.debug_tuple("StatementAction::Query").finish()
                            }
                            StatementAction::QueryStream => {
                                f.debug_tuple("StatementAction::QueryStream").finish()
                            }
                        }
                    }
                }
                impl StatementAction {
                    #[doc(hidden)]
                    pub unsafe fn _lift(val: u8) -> StatementAction {
                        if !cfg!(debug_assertions) {
                            return ::core::mem::transmute(val);
                        }
                        match val {
                            0 => StatementAction::Execute,
                            1 => StatementAction::Query,
                            2 => StatementAction::QueryStream,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                }
                #[derive(Clone)]
                pub struct Statement {
                    pub statement: _rt::String,
                    pub params: _rt::Vec<_rt::String>,
                    pub action: StatementAction,
                    pub sleep: Option<u64>,
                }
                impl ::core::fmt::Debug for Statement {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("Statement")
                            .field("statement", &self.statement)
                            .field("params", &self.params)
                            .field("action", &self.action)
                            .field("sleep", &self.sleep)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub enum MysqlResult {
                    Execute(u64),
                    Query(MysqlDbResult),
                }
                impl ::core::fmt::Debug for MysqlResult {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        match self {
                            MysqlResult::Execute(e) => {
                                f.debug_tuple("MysqlResult::Execute").field(e).finish()
                            }
                            MysqlResult::Query(e) => {
                                f.debug_tuple("MysqlResult::Query").field(e).finish()
                            }
                        }
                    }
                }
                pub enum PostgresResult {
                    Execute(u64),
                    Query(PostgresDbResult),
                }
                impl ::core::fmt::Debug for PostgresResult {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        match self {
                            PostgresResult::Execute(e) => {
                                f.debug_tuple("PostgresResult::Execute").field(e).finish()
                            }
                            PostgresResult::Query(e) => {
                                f.debug_tuple("PostgresResult::Query").field(e).finish()
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_check_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::check();
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let vec2 = (result0.into_bytes()).into_boxed_slice();
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    ::core::mem::forget(vec2);
                    *ptr1.add(4).cast::<usize>() = len2;
                    *ptr1.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_check<T: Guest>(arg0: *mut u8) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0.add(4).cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_mysql_transaction_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: i32,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let base12 = arg0;
                    let len12 = arg1;
                    let mut result12 = _rt::Vec::with_capacity(len12);
                    for i in 0..len12 {
                        let base = base12.add(i * 40);
                        let e12 = {
                            let l0 = *base.add(0).cast::<*mut u8>();
                            let l1 = *base.add(4).cast::<usize>();
                            let len2 = l1;
                            let bytes2 = _rt::Vec::from_raw_parts(l0.cast(), len2, len2);
                            let l3 = *base.add(8).cast::<*mut u8>();
                            let l4 = *base.add(12).cast::<usize>();
                            let base8 = l3;
                            let len8 = l4;
                            let mut result8 = _rt::Vec::with_capacity(len8);
                            for i in 0..len8 {
                                let base = base8.add(i * 8);
                                let e8 = {
                                    let l5 = *base.add(0).cast::<*mut u8>();
                                    let l6 = *base.add(4).cast::<usize>();
                                    let len7 = l6;
                                    let bytes7 = _rt::Vec::from_raw_parts(
                                        l5.cast(),
                                        len7,
                                        len7,
                                    );
                                    _rt::string_lift(bytes7)
                                };
                                result8.push(e8);
                            }
                            _rt::cabi_dealloc(base8, len8 * 8, 4);
                            let l9 = i32::from(*base.add(16).cast::<u8>());
                            let l10 = i32::from(*base.add(24).cast::<u8>());
                            Statement {
                                statement: _rt::string_lift(bytes2),
                                params: result8,
                                action: StatementAction::_lift(l9 as u8),
                                sleep: match l10 {
                                    0 => None,
                                    1 => {
                                        let e = {
                                            let l11 = *base.add(32).cast::<i64>();
                                            l11 as u64
                                        };
                                        Some(e)
                                    }
                                    _ => _rt::invalid_enum_discriminant(),
                                },
                            }
                        };
                        result12.push(e12);
                    }
                    _rt::cabi_dealloc(base12, len12 * 40, 8);
                    let result13 = T::mysql_transaction(
                        result12,
                        TransactionEnd::_lift(arg2 as u8),
                    );
                    let ptr14 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result13 {
                        Ok(e) => {
                            *ptr14.add(0).cast::<u8>() = (0i32) as u8;
                            let vec51 = e;
                            let len51 = vec51.len();
                            let layout51 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec51.len() * 32,
                                8,
                            );
                            let result51 = if layout51.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout51).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout51);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec51.into_iter().enumerate() {
                                let base = result51.add(i * 32);
                                {
                                    match e {
                                        Ok(e) => {
                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                            match e {
                                                MysqlResult::Execute(e) => {
                                                    *base.add(8).cast::<u8>() = (0i32) as u8;
                                                    *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                                }
                                                MysqlResult::Query(e) => {
                                                    *base.add(8).cast::<u8>() = (1i32) as u8;
                                                    let super::super::super::super::golem::rdbms::mysql::DbResult {
                                                        columns: columns15,
                                                        rows: rows15,
                                                    } = e;
                                                    let vec20 = columns15;
                                                    let len20 = vec20.len();
                                                    let layout20 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec20.len() * 32,
                                                        8,
                                                    );
                                                    let result20 = if layout20.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout20).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout20);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec20.into_iter().enumerate() {
                                                        let base = result20.add(i * 32);
                                                        {
                                                            let super::super::super::super::golem::rdbms::mysql::DbColumn {
                                                                ordinal: ordinal16,
                                                                name: name16,
                                                                db_type: db_type16,
                                                                db_type_name: db_type_name16,
                                                            } = e;
                                                            *base.add(0).cast::<i64>() = _rt::as_i64(ordinal16);
                                                            let vec17 = (name16.into_bytes()).into_boxed_slice();
                                                            let ptr17 = vec17.as_ptr().cast::<u8>();
                                                            let len17 = vec17.len();
                                                            ::core::mem::forget(vec17);
                                                            *base.add(12).cast::<usize>() = len17;
                                                            *base.add(8).cast::<*mut u8>() = ptr17.cast_mut();
                                                            use super::super::super::super::golem::rdbms::mysql::DbColumnType as V18;
                                                            match db_type16 {
                                                                V18::Boolean => {
                                                                    *base.add(16).cast::<u8>() = (0i32) as u8;
                                                                }
                                                                V18::Tinyint => {
                                                                    *base.add(16).cast::<u8>() = (1i32) as u8;
                                                                }
                                                                V18::Smallint => {
                                                                    *base.add(16).cast::<u8>() = (2i32) as u8;
                                                                }
                                                                V18::Mediumint => {
                                                                    *base.add(16).cast::<u8>() = (3i32) as u8;
                                                                }
                                                                V18::Int => {
                                                                    *base.add(16).cast::<u8>() = (4i32) as u8;
                                                                }
                                                                V18::Bigint => {
                                                                    *base.add(16).cast::<u8>() = (5i32) as u8;
                                                                }
                                                                V18::TinyintUnsigned => {
                                                                    *base.add(16).cast::<u8>() = (6i32) as u8;
                                                                }
                                                                V18::SmallintUnsigned => {
                                                                    *base.add(16).cast::<u8>() = (7i32) as u8;
                                                                }
                                                                V18::MediumintUnsigned => {
                                                                    *base.add(16).cast::<u8>() = (8i32) as u8;
                                                                }
                                                                V18::IntUnsigned => {
                                                                    *base.add(16).cast::<u8>() = (9i32) as u8;
                                                                }
                                                                V18::BigintUnsigned => {
                                                                    *base.add(16).cast::<u8>() = (10i32) as u8;
                                                                }
                                                                V18::Float => {
                                                                    *base.add(16).cast::<u8>() = (11i32) as u8;
                                                                }
                                                                V18::Double => {
                                                                    *base.add(16).cast::<u8>() = (12i32) as u8;
                                                                }
                                                                V18::Decimal => {
                                                                    *base.add(16).cast::<u8>() = (13i32) as u8;
                                                                }
                                                                V18::Date => {
                                                                    *base.add(16).cast::<u8>() = (14i32) as u8;
                                                                }
                                                                V18::Datetime => {
                                                                    *base.add(16).cast::<u8>() = (15i32) as u8;
                                                                }
                                                                V18::Timestamp => {
                                                                    *base.add(16).cast::<u8>() = (16i32) as u8;
                                                                }
                                                                V18::Time => {
                                                                    *base.add(16).cast::<u8>() = (17i32) as u8;
                                                                }
                                                                V18::Year => {
                                                                    *base.add(16).cast::<u8>() = (18i32) as u8;
                                                                }
                                                                V18::Fixchar => {
                                                                    *base.add(16).cast::<u8>() = (19i32) as u8;
                                                                }
                                                                V18::Varchar => {
                                                                    *base.add(16).cast::<u8>() = (20i32) as u8;
                                                                }
                                                                V18::Tinytext => {
                                                                    *base.add(16).cast::<u8>() = (21i32) as u8;
                                                                }
                                                                V18::Text => {
                                                                    *base.add(16).cast::<u8>() = (22i32) as u8;
                                                                }
                                                                V18::Mediumtext => {
                                                                    *base.add(16).cast::<u8>() = (23i32) as u8;
                                                                }
                                                                V18::Longtext => {
                                                                    *base.add(16).cast::<u8>() = (24i32) as u8;
                                                                }
                                                                V18::Binary => {
                                                                    *base.add(16).cast::<u8>() = (25i32) as u8;
                                                                }
                                                                V18::Varbinary => {
                                                                    *base.add(16).cast::<u8>() = (26i32) as u8;
                                                                }
                                                                V18::Tinyblob => {
                                                                    *base.add(16).cast::<u8>() = (27i32) as u8;
                                                                }
                                                                V18::Blob => {
                                                                    *base.add(16).cast::<u8>() = (28i32) as u8;
                                                                }
                                                                V18::Mediumblob => {
                                                                    *base.add(16).cast::<u8>() = (29i32) as u8;
                                                                }
                                                                V18::Longblob => {
                                                                    *base.add(16).cast::<u8>() = (30i32) as u8;
                                                                }
                                                                V18::Enumeration => {
                                                                    *base.add(16).cast::<u8>() = (31i32) as u8;
                                                                }
                                                                V18::Set => {
                                                                    *base.add(16).cast::<u8>() = (32i32) as u8;
                                                                }
                                                                V18::Bit => {
                                                                    *base.add(16).cast::<u8>() = (33i32) as u8;
                                                                }
                                                                V18::Json => {
                                                                    *base.add(16).cast::<u8>() = (34i32) as u8;
                                                                }
                                                            }
                                                            let vec19 = (db_type_name16.into_bytes())
                                                                .into_boxed_slice();
                                                            let ptr19 = vec19.as_ptr().cast::<u8>();
                                                            let len19 = vec19.len();
                                                            ::core::mem::forget(vec19);
                                                            *base.add(24).cast::<usize>() = len19;
                                                            *base.add(20).cast::<*mut u8>() = ptr19.cast_mut();
                                                        }
                                                    }
                                                    *base.add(20).cast::<usize>() = len20;
                                                    *base.add(16).cast::<*mut u8>() = result20;
                                                    let vec49 = rows15;
                                                    let len49 = vec49.len();
                                                    let layout49 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec49.len() * 8,
                                                        4,
                                                    );
                                                    let result49 = if layout49.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout49).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout49);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec49.into_iter().enumerate() {
                                                        let base = result49.add(i * 8);
                                                        {
                                                            let super::super::super::super::golem::rdbms::mysql::DbRow {
                                                                values: values21,
                                                            } = e;
                                                            let vec48 = values21;
                                                            let len48 = vec48.len();
                                                            let layout48 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec48.len() * 24,
                                                                8,
                                                            );
                                                            let result48 = if layout48.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout48).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout48);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec48.into_iter().enumerate() {
                                                                let base = result48.add(i * 24);
                                                                {
                                                                    use super::super::super::super::golem::rdbms::mysql::DbValue as V47;
                                                                    match e {
                                                                        V47::Boolean(e) => {
                                                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                            *base.add(8).cast::<u8>() = (match e {
                                                                                true => 1,
                                                                                false => 0,
                                                                            }) as u8;
                                                                        }
                                                                        V47::Tinyint(e) => {
                                                                            *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                            *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                                                        }
                                                                        V47::Smallint(e) => {
                                                                            *base.add(0).cast::<u8>() = (2i32) as u8;
                                                                            *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                                                        }
                                                                        V47::Mediumint(e) => {
                                                                            *base.add(0).cast::<u8>() = (3i32) as u8;
                                                                            *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V47::Int(e) => {
                                                                            *base.add(0).cast::<u8>() = (4i32) as u8;
                                                                            *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V47::Bigint(e) => {
                                                                            *base.add(0).cast::<u8>() = (5i32) as u8;
                                                                            *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                                        }
                                                                        V47::TinyintUnsigned(e) => {
                                                                            *base.add(0).cast::<u8>() = (6i32) as u8;
                                                                            *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                                                        }
                                                                        V47::SmallintUnsigned(e) => {
                                                                            *base.add(0).cast::<u8>() = (7i32) as u8;
                                                                            *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                                                        }
                                                                        V47::MediumintUnsigned(e) => {
                                                                            *base.add(0).cast::<u8>() = (8i32) as u8;
                                                                            *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V47::IntUnsigned(e) => {
                                                                            *base.add(0).cast::<u8>() = (9i32) as u8;
                                                                            *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V47::BigintUnsigned(e) => {
                                                                            *base.add(0).cast::<u8>() = (10i32) as u8;
                                                                            *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                                        }
                                                                        V47::Float(e) => {
                                                                            *base.add(0).cast::<u8>() = (11i32) as u8;
                                                                            *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                                                        }
                                                                        V47::Double(e) => {
                                                                            *base.add(0).cast::<u8>() = (12i32) as u8;
                                                                            *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                                                        }
                                                                        V47::Decimal(e) => {
                                                                            *base.add(0).cast::<u8>() = (13i32) as u8;
                                                                            let vec22 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr22 = vec22.as_ptr().cast::<u8>();
                                                                            let len22 = vec22.len();
                                                                            ::core::mem::forget(vec22);
                                                                            *base.add(12).cast::<usize>() = len22;
                                                                            *base.add(8).cast::<*mut u8>() = ptr22.cast_mut();
                                                                        }
                                                                        V47::Date(e) => {
                                                                            *base.add(0).cast::<u8>() = (14i32) as u8;
                                                                            let super::super::super::super::golem::rdbms::types::Date {
                                                                                year: year23,
                                                                                month: month23,
                                                                                day: day23,
                                                                            } = e;
                                                                            *base.add(8).cast::<i32>() = _rt::as_i32(year23);
                                                                            *base.add(12).cast::<u8>() = (_rt::as_i32(month23)) as u8;
                                                                            *base.add(13).cast::<u8>() = (_rt::as_i32(day23)) as u8;
                                                                        }
                                                                        V47::Datetime(e) => {
                                                                            *base.add(0).cast::<u8>() = (15i32) as u8;
                                                                            let super::super::super::super::golem::rdbms::types::Timestamp {
                                                                                date: date24,
                                                                                time: time24,
                                                                            } = e;
                                                                            let super::super::super::super::golem::rdbms::types::Date {
                                                                                year: year25,
                                                                                month: month25,
                                                                                day: day25,
                                                                            } = date24;
                                                                            *base.add(8).cast::<i32>() = _rt::as_i32(year25);
                                                                            *base.add(12).cast::<u8>() = (_rt::as_i32(month25)) as u8;
                                                                            *base.add(13).cast::<u8>() = (_rt::as_i32(day25)) as u8;
                                                                            let super::super::super::super::golem::rdbms::types::Time {
                                                                                hour: hour26,
                                                                                minute: minute26,
                                                                                second: second26,
                                                                                nanosecond: nanosecond26,
                                                                            } = time24;
                                                                            *base.add(16).cast::<u8>() = (_rt::as_i32(hour26)) as u8;
                                                                            *base.add(17).cast::<u8>() = (_rt::as_i32(minute26)) as u8;
                                                                            *base.add(18).cast::<u8>() = (_rt::as_i32(second26)) as u8;
                                                                            *base.add(20).cast::<i32>() = _rt::as_i32(nanosecond26);
                                                                        }
                                                                        V47::Timestamp(e) => {
                                                                            *base.add(0).cast::<u8>() = (16i32) as u8;
                                                                            let super::super::super::super::golem::rdbms::types::Timestamp {
                                                                                date: date27,
                                                                                time: time27,
                                                                            } = e;
                                                                            let super::super::super::super::golem::rdbms::types::Date {
                                                                                year: year28,
                                                                                month: month28,
                                                                                day: day28,
                                                                            } = date27;
                                                                            *base.add(8).cast::<i32>() = _rt::as_i32(year28);
                                                                            *base.add(12).cast::<u8>() = (_rt::as_i32(month28)) as u8;
                                                                            *base.add(13).cast::<u8>() = (_rt::as_i32(day28)) as u8;
                                                                            let super::super::super::super::golem::rdbms::types::Time {
                                                                                hour: hour29,
                                                                                minute: minute29,
                                                                                second: second29,
                                                                                nanosecond: nanosecond29,
                                                                            } = time27;
                                                                            *base.add(16).cast::<u8>() = (_rt::as_i32(hour29)) as u8;
                                                                            *base.add(17).cast::<u8>() = (_rt::as_i32(minute29)) as u8;
                                                                            *base.add(18).cast::<u8>() = (_rt::as_i32(second29)) as u8;
                                                                            *base.add(20).cast::<i32>() = _rt::as_i32(nanosecond29);
                                                                        }
                                                                        V47::Time(e) => {
                                                                            *base.add(0).cast::<u8>() = (17i32) as u8;
                                                                            let super::super::super::super::golem::rdbms::types::Time {
                                                                                hour: hour30,
                                                                                minute: minute30,
                                                                                second: second30,
                                                                                nanosecond: nanosecond30,
                                                                            } = e;
                                                                            *base.add(8).cast::<u8>() = (_rt::as_i32(hour30)) as u8;
                                                                            *base.add(9).cast::<u8>() = (_rt::as_i32(minute30)) as u8;
                                                                            *base.add(10).cast::<u8>() = (_rt::as_i32(second30)) as u8;
                                                                            *base.add(12).cast::<i32>() = _rt::as_i32(nanosecond30);
                                                                        }
                                                                        V47::Year(e) => {
                                                                            *base.add(0).cast::<u8>() = (18i32) as u8;
                                                                            *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                                                        }
                                                                        V47::Fixchar(e) => {
                                                                            *base.add(0).cast::<u8>() = (19i32) as u8;
                                                                            let vec31 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr31 = vec31.as_ptr().cast::<u8>();
                                                                            let len31 = vec31.len();
                                                                            ::core::mem::forget(vec31);
                                                                            *base.add(12).cast::<usize>() = len31;
                                                                            *base.add(8).cast::<*mut u8>() = ptr31.cast_mut();
                                                                        }
                                                                        V47::Varchar(e) => {
                                                                            *base.add(0).cast::<u8>() = (20i32) as u8;
                                                                            let vec32 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr32 = vec32.as_ptr().cast::<u8>();
                                                                            let len32 = vec32.len();
                                                                            ::core::mem::forget(vec32);
                                                                            *base.add(12).cast::<usize>() = len32;
                                                                            *base.add(8).cast::<*mut u8>() = ptr32.cast_mut();
                                                                        }
                                                                        V47::Tinytext(e) => {
                                                                            *base.add(0).cast::<u8>() = (21i32) as u8;
                                                                            let vec33 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr33 = vec33.as_ptr().cast::<u8>();
                                                                            let len33 = vec33.len();
                                                                            ::core::mem::forget(vec33);
                                                                            *base.add(12).cast::<usize>() = len33;
                                                                            *base.add(8).cast::<*mut u8>() = ptr33.cast_mut();
                                                                        }
                                                                        V47::Text(e) => {
                                                                            *base.add(0).cast::<u8>() = (22i32) as u8;
                                                                            let vec34 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr34 = vec34.as_ptr().cast::<u8>();
                                                                            let len34 = vec34.len();
                                                                            ::core::mem::forget(vec34);
                                                                            *base.add(12).cast::<usize>() = len34;
                                                                            *base.add(8).cast::<*mut u8>() = ptr34.cast_mut();
                                                                        }
                                                                        V47::Mediumtext(e) => {
                                                                            *base.add(0).cast::<u8>() = (23i32) as u8;
                                                                            let vec35 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr35 = vec35.as_ptr().cast::<u8>();
                                                                            let len35 = vec35.len();
                                                                            ::core::mem::forget(vec35);
                                                                            *base.add(12).cast::<usize>() = len35;
                                                                            *base.add(8).cast::<*mut u8>() = ptr35.cast_mut();
                                                                        }
                                                                        V47::Longtext(e) => {
                                                                            *base.add(0).cast::<u8>() = (24i32) as u8;
                                                                            let vec36 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr36 = vec36.as_ptr().cast::<u8>();
                                                                            let len36 = vec36.len();
                                                                            ::core::mem::forget(vec36);
                                                                            *base.add(12).cast::<usize>() = len36;
                                                                            *base.add(8).cast::<*mut u8>() = ptr36.cast_mut();
                                                                        }
                                                                        V47::Binary(e) => {
                                                                            *base.add(0).cast::<u8>() = (25i32) as u8;
                                                                            let vec37 = (e).into_boxed_slice();
                                                                            let ptr37 = vec37.as_ptr().cast::<u8>();
                                                                            let len37 = vec37.len();
                                                                            ::core::mem::forget(vec37);
                                                                            *base.add(12).cast::<usize>() = len37;
                                                                            *base.add(8).cast::<*mut u8>() = ptr37.cast_mut();
                                                                        }
                                                                        V47::Varbinary(e) => {
                                                                            *base.add(0).cast::<u8>() = (26i32) as u8;
                                                                            let vec38 = (e).into_boxed_slice();
                                                                            let ptr38 = vec38.as_ptr().cast::<u8>();
                                                                            let len38 = vec38.len();
                                                                            ::core::mem::forget(vec38);
                                                                            *base.add(12).cast::<usize>() = len38;
                                                                            *base.add(8).cast::<*mut u8>() = ptr38.cast_mut();
                                                                        }
                                                                        V47::Tinyblob(e) => {
                                                                            *base.add(0).cast::<u8>() = (27i32) as u8;
                                                                            let vec39 = (e).into_boxed_slice();
                                                                            let ptr39 = vec39.as_ptr().cast::<u8>();
                                                                            let len39 = vec39.len();
                                                                            ::core::mem::forget(vec39);
                                                                            *base.add(12).cast::<usize>() = len39;
                                                                            *base.add(8).cast::<*mut u8>() = ptr39.cast_mut();
                                                                        }
                                                                        V47::Blob(e) => {
                                                                            *base.add(0).cast::<u8>() = (28i32) as u8;
                                                                            let vec40 = (e).into_boxed_slice();
                                                                            let ptr40 = vec40.as_ptr().cast::<u8>();
                                                                            let len40 = vec40.len();
                                                                            ::core::mem::forget(vec40);
                                                                            *base.add(12).cast::<usize>() = len40;
                                                                            *base.add(8).cast::<*mut u8>() = ptr40.cast_mut();
                                                                        }
                                                                        V47::Mediumblob(e) => {
                                                                            *base.add(0).cast::<u8>() = (29i32) as u8;
                                                                            let vec41 = (e).into_boxed_slice();
                                                                            let ptr41 = vec41.as_ptr().cast::<u8>();
                                                                            let len41 = vec41.len();
                                                                            ::core::mem::forget(vec41);
                                                                            *base.add(12).cast::<usize>() = len41;
                                                                            *base.add(8).cast::<*mut u8>() = ptr41.cast_mut();
                                                                        }
                                                                        V47::Longblob(e) => {
                                                                            *base.add(0).cast::<u8>() = (30i32) as u8;
                                                                            let vec42 = (e).into_boxed_slice();
                                                                            let ptr42 = vec42.as_ptr().cast::<u8>();
                                                                            let len42 = vec42.len();
                                                                            ::core::mem::forget(vec42);
                                                                            *base.add(12).cast::<usize>() = len42;
                                                                            *base.add(8).cast::<*mut u8>() = ptr42.cast_mut();
                                                                        }
                                                                        V47::Enumeration(e) => {
                                                                            *base.add(0).cast::<u8>() = (31i32) as u8;
                                                                            let vec43 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr43 = vec43.as_ptr().cast::<u8>();
                                                                            let len43 = vec43.len();
                                                                            ::core::mem::forget(vec43);
                                                                            *base.add(12).cast::<usize>() = len43;
                                                                            *base.add(8).cast::<*mut u8>() = ptr43.cast_mut();
                                                                        }
                                                                        V47::Set(e) => {
                                                                            *base.add(0).cast::<u8>() = (32i32) as u8;
                                                                            let vec44 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr44 = vec44.as_ptr().cast::<u8>();
                                                                            let len44 = vec44.len();
                                                                            ::core::mem::forget(vec44);
                                                                            *base.add(12).cast::<usize>() = len44;
                                                                            *base.add(8).cast::<*mut u8>() = ptr44.cast_mut();
                                                                        }
                                                                        V47::Bit(e) => {
                                                                            *base.add(0).cast::<u8>() = (33i32) as u8;
                                                                            let vec45 = e;
                                                                            let len45 = vec45.len();
                                                                            let layout45 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec45.len() * 1,
                                                                                1,
                                                                            );
                                                                            let result45 = if layout45.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout45).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout45);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec45.into_iter().enumerate() {
                                                                                let base = result45.add(i * 1);
                                                                                {
                                                                                    *base.add(0).cast::<u8>() = (match e {
                                                                                        true => 1,
                                                                                        false => 0,
                                                                                    }) as u8;
                                                                                }
                                                                            }
                                                                            *base.add(12).cast::<usize>() = len45;
                                                                            *base.add(8).cast::<*mut u8>() = result45;
                                                                        }
                                                                        V47::Json(e) => {
                                                                            *base.add(0).cast::<u8>() = (34i32) as u8;
                                                                            let vec46 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr46 = vec46.as_ptr().cast::<u8>();
                                                                            let len46 = vec46.len();
                                                                            ::core::mem::forget(vec46);
                                                                            *base.add(12).cast::<usize>() = len46;
                                                                            *base.add(8).cast::<*mut u8>() = ptr46.cast_mut();
                                                                        }
                                                                        V47::Null => {
                                                                            *base.add(0).cast::<u8>() = (35i32) as u8;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            *base.add(4).cast::<usize>() = len48;
                                                            *base.add(0).cast::<*mut u8>() = result48;
                                                        }
                                                    }
                                                    *base.add(28).cast::<usize>() = len49;
                                                    *base.add(24).cast::<*mut u8>() = result49;
                                                }
                                            }
                                        }
                                        Err(e) => {
                                            *base.add(0).cast::<u8>() = (1i32) as u8;
                                            let vec50 = (e.into_bytes()).into_boxed_slice();
                                            let ptr50 = vec50.as_ptr().cast::<u8>();
                                            let len50 = vec50.len();
                                            ::core::mem::forget(vec50);
                                            *base.add(12).cast::<usize>() = len50;
                                            *base.add(8).cast::<*mut u8>() = ptr50.cast_mut();
                                        }
                                    };
                                }
                            }
                            *ptr14.add(8).cast::<usize>() = len51;
                            *ptr14.add(4).cast::<*mut u8>() = result51;
                        }
                        Err(e) => {
                            *ptr14.add(0).cast::<u8>() = (1i32) as u8;
                            let vec52 = (e.into_bytes()).into_boxed_slice();
                            let ptr52 = vec52.as_ptr().cast::<u8>();
                            let len52 = vec52.len();
                            ::core::mem::forget(vec52);
                            *ptr14.add(8).cast::<usize>() = len52;
                            *ptr14.add(4).cast::<*mut u8>() = ptr52.cast_mut();
                        }
                    };
                    ptr14
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_mysql_transaction<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            let base62 = l1;
                            let len62 = l2;
                            for i in 0..len62 {
                                let base = base62.add(i * 32);
                                {
                                    let l3 = i32::from(*base.add(0).cast::<u8>());
                                    match l3 {
                                        0 => {
                                            let l4 = i32::from(*base.add(8).cast::<u8>());
                                            match l4 {
                                                0 => {}
                                                _ => {
                                                    let l5 = *base.add(16).cast::<*mut u8>();
                                                    let l6 = *base.add(20).cast::<usize>();
                                                    let base11 = l5;
                                                    let len11 = l6;
                                                    for i in 0..len11 {
                                                        let base = base11.add(i * 32);
                                                        {
                                                            let l7 = *base.add(8).cast::<*mut u8>();
                                                            let l8 = *base.add(12).cast::<usize>();
                                                            _rt::cabi_dealloc(l7, l8, 1);
                                                            let l9 = *base.add(20).cast::<*mut u8>();
                                                            let l10 = *base.add(24).cast::<usize>();
                                                            _rt::cabi_dealloc(l9, l10, 1);
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(base11, len11 * 32, 8);
                                                    let l12 = *base.add(24).cast::<*mut u8>();
                                                    let l13 = *base.add(28).cast::<usize>();
                                                    let base59 = l12;
                                                    let len59 = l13;
                                                    for i in 0..len59 {
                                                        let base = base59.add(i * 8);
                                                        {
                                                            let l14 = *base.add(0).cast::<*mut u8>();
                                                            let l15 = *base.add(4).cast::<usize>();
                                                            let base58 = l14;
                                                            let len58 = l15;
                                                            for i in 0..len58 {
                                                                let base = base58.add(i * 24);
                                                                {
                                                                    let l16 = i32::from(*base.add(0).cast::<u8>());
                                                                    match l16 {
                                                                        0 => {}
                                                                        1 => {}
                                                                        2 => {}
                                                                        3 => {}
                                                                        4 => {}
                                                                        5 => {}
                                                                        6 => {}
                                                                        7 => {}
                                                                        8 => {}
                                                                        9 => {}
                                                                        10 => {}
                                                                        11 => {}
                                                                        12 => {}
                                                                        13 => {
                                                                            let l17 = *base.add(8).cast::<*mut u8>();
                                                                            let l18 = *base.add(12).cast::<usize>();
                                                                            _rt::cabi_dealloc(l17, l18, 1);
                                                                        }
                                                                        14 => {}
                                                                        15 => {}
                                                                        16 => {}
                                                                        17 => {}
                                                                        18 => {}
                                                                        19 => {
                                                                            let l19 = *base.add(8).cast::<*mut u8>();
                                                                            let l20 = *base.add(12).cast::<usize>();
                                                                            _rt::cabi_dealloc(l19, l20, 1);
                                                                        }
                                                                        20 => {
                                                                            let l21 = *base.add(8).cast::<*mut u8>();
                                                                            let l22 = *base.add(12).cast::<usize>();
                                                                            _rt::cabi_dealloc(l21, l22, 1);
                                                                        }
                                                                        21 => {
                                                                            let l23 = *base.add(8).cast::<*mut u8>();
                                                                            let l24 = *base.add(12).cast::<usize>();
                                                                            _rt::cabi_dealloc(l23, l24, 1);
                                                                        }
                                                                        22 => {
                                                                            let l25 = *base.add(8).cast::<*mut u8>();
                                                                            let l26 = *base.add(12).cast::<usize>();
                                                                            _rt::cabi_dealloc(l25, l26, 1);
                                                                        }
                                                                        23 => {
                                                                            let l27 = *base.add(8).cast::<*mut u8>();
                                                                            let l28 = *base.add(12).cast::<usize>();
                                                                            _rt::cabi_dealloc(l27, l28, 1);
                                                                        }
                                                                        24 => {
                                                                            let l29 = *base.add(8).cast::<*mut u8>();
                                                                            let l30 = *base.add(12).cast::<usize>();
                                                                            _rt::cabi_dealloc(l29, l30, 1);
                                                                        }
                                                                        25 => {
                                                                            let l31 = *base.add(8).cast::<*mut u8>();
                                                                            let l32 = *base.add(12).cast::<usize>();
                                                                            let base33 = l31;
                                                                            let len33 = l32;
                                                                            _rt::cabi_dealloc(base33, len33 * 1, 1);
                                                                        }
                                                                        26 => {
                                                                            let l34 = *base.add(8).cast::<*mut u8>();
                                                                            let l35 = *base.add(12).cast::<usize>();
                                                                            let base36 = l34;
                                                                            let len36 = l35;
                                                                            _rt::cabi_dealloc(base36, len36 * 1, 1);
                                                                        }
                                                                        27 => {
                                                                            let l37 = *base.add(8).cast::<*mut u8>();
                                                                            let l38 = *base.add(12).cast::<usize>();
                                                                            let base39 = l37;
                                                                            let len39 = l38;
                                                                            _rt::cabi_dealloc(base39, len39 * 1, 1);
                                                                        }
                                                                        28 => {
                                                                            let l40 = *base.add(8).cast::<*mut u8>();
                                                                            let l41 = *base.add(12).cast::<usize>();
                                                                            let base42 = l40;
                                                                            let len42 = l41;
                                                                            _rt::cabi_dealloc(base42, len42 * 1, 1);
                                                                        }
                                                                        29 => {
                                                                            let l43 = *base.add(8).cast::<*mut u8>();
                                                                            let l44 = *base.add(12).cast::<usize>();
                                                                            let base45 = l43;
                                                                            let len45 = l44;
                                                                            _rt::cabi_dealloc(base45, len45 * 1, 1);
                                                                        }
                                                                        30 => {
                                                                            let l46 = *base.add(8).cast::<*mut u8>();
                                                                            let l47 = *base.add(12).cast::<usize>();
                                                                            let base48 = l46;
                                                                            let len48 = l47;
                                                                            _rt::cabi_dealloc(base48, len48 * 1, 1);
                                                                        }
                                                                        31 => {
                                                                            let l49 = *base.add(8).cast::<*mut u8>();
                                                                            let l50 = *base.add(12).cast::<usize>();
                                                                            _rt::cabi_dealloc(l49, l50, 1);
                                                                        }
                                                                        32 => {
                                                                            let l51 = *base.add(8).cast::<*mut u8>();
                                                                            let l52 = *base.add(12).cast::<usize>();
                                                                            _rt::cabi_dealloc(l51, l52, 1);
                                                                        }
                                                                        33 => {
                                                                            let l53 = *base.add(8).cast::<*mut u8>();
                                                                            let l54 = *base.add(12).cast::<usize>();
                                                                            let base55 = l53;
                                                                            let len55 = l54;
                                                                            _rt::cabi_dealloc(base55, len55 * 1, 1);
                                                                        }
                                                                        34 => {
                                                                            let l56 = *base.add(8).cast::<*mut u8>();
                                                                            let l57 = *base.add(12).cast::<usize>();
                                                                            _rt::cabi_dealloc(l56, l57, 1);
                                                                        }
                                                                        _ => {}
                                                                    }
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(base58, len58 * 24, 8);
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(base59, len59 * 8, 4);
                                                }
                                            }
                                        }
                                        _ => {
                                            let l60 = *base.add(8).cast::<*mut u8>();
                                            let l61 = *base.add(12).cast::<usize>();
                                            _rt::cabi_dealloc(l60, l61, 1);
                                        }
                                    }
                                }
                            }
                            _rt::cabi_dealloc(base62, len62 * 32, 8);
                        }
                        _ => {
                            let l63 = *arg0.add(4).cast::<*mut u8>();
                            let l64 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l63, l64, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_mysql_executions_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let base12 = arg0;
                    let len12 = arg1;
                    let mut result12 = _rt::Vec::with_capacity(len12);
                    for i in 0..len12 {
                        let base = base12.add(i * 40);
                        let e12 = {
                            let l0 = *base.add(0).cast::<*mut u8>();
                            let l1 = *base.add(4).cast::<usize>();
                            let len2 = l1;
                            let bytes2 = _rt::Vec::from_raw_parts(l0.cast(), len2, len2);
                            let l3 = *base.add(8).cast::<*mut u8>();
                            let l4 = *base.add(12).cast::<usize>();
                            let base8 = l3;
                            let len8 = l4;
                            let mut result8 = _rt::Vec::with_capacity(len8);
                            for i in 0..len8 {
                                let base = base8.add(i * 8);
                                let e8 = {
                                    let l5 = *base.add(0).cast::<*mut u8>();
                                    let l6 = *base.add(4).cast::<usize>();
                                    let len7 = l6;
                                    let bytes7 = _rt::Vec::from_raw_parts(
                                        l5.cast(),
                                        len7,
                                        len7,
                                    );
                                    _rt::string_lift(bytes7)
                                };
                                result8.push(e8);
                            }
                            _rt::cabi_dealloc(base8, len8 * 8, 4);
                            let l9 = i32::from(*base.add(16).cast::<u8>());
                            let l10 = i32::from(*base.add(24).cast::<u8>());
                            Statement {
                                statement: _rt::string_lift(bytes2),
                                params: result8,
                                action: StatementAction::_lift(l9 as u8),
                                sleep: match l10 {
                                    0 => None,
                                    1 => {
                                        let e = {
                                            let l11 = *base.add(32).cast::<i64>();
                                            l11 as u64
                                        };
                                        Some(e)
                                    }
                                    _ => _rt::invalid_enum_discriminant(),
                                },
                            }
                        };
                        result12.push(e12);
                    }
                    _rt::cabi_dealloc(base12, len12 * 40, 8);
                    let result13 = T::mysql_executions(result12);
                    let ptr14 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result13 {
                        Ok(e) => {
                            *ptr14.add(0).cast::<u8>() = (0i32) as u8;
                            let vec51 = e;
                            let len51 = vec51.len();
                            let layout51 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec51.len() * 32,
                                8,
                            );
                            let result51 = if layout51.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout51).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout51);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec51.into_iter().enumerate() {
                                let base = result51.add(i * 32);
                                {
                                    match e {
                                        Ok(e) => {
                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                            match e {
                                                MysqlResult::Execute(e) => {
                                                    *base.add(8).cast::<u8>() = (0i32) as u8;
                                                    *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                                }
                                                MysqlResult::Query(e) => {
                                                    *base.add(8).cast::<u8>() = (1i32) as u8;
                                                    let super::super::super::super::golem::rdbms::mysql::DbResult {
                                                        columns: columns15,
                                                        rows: rows15,
                                                    } = e;
                                                    let vec20 = columns15;
                                                    let len20 = vec20.len();
                                                    let layout20 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec20.len() * 32,
                                                        8,
                                                    );
                                                    let result20 = if layout20.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout20).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout20);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec20.into_iter().enumerate() {
                                                        let base = result20.add(i * 32);
                                                        {
                                                            let super::super::super::super::golem::rdbms::mysql::DbColumn {
                                                                ordinal: ordinal16,
                                                                name: name16,
                                                                db_type: db_type16,
                                                                db_type_name: db_type_name16,
                                                            } = e;
                                                            *base.add(0).cast::<i64>() = _rt::as_i64(ordinal16);
                                                            let vec17 = (name16.into_bytes()).into_boxed_slice();
                                                            let ptr17 = vec17.as_ptr().cast::<u8>();
                                                            let len17 = vec17.len();
                                                            ::core::mem::forget(vec17);
                                                            *base.add(12).cast::<usize>() = len17;
                                                            *base.add(8).cast::<*mut u8>() = ptr17.cast_mut();
                                                            use super::super::super::super::golem::rdbms::mysql::DbColumnType as V18;
                                                            match db_type16 {
                                                                V18::Boolean => {
                                                                    *base.add(16).cast::<u8>() = (0i32) as u8;
                                                                }
                                                                V18::Tinyint => {
                                                                    *base.add(16).cast::<u8>() = (1i32) as u8;
                                                                }
                                                                V18::Smallint => {
                                                                    *base.add(16).cast::<u8>() = (2i32) as u8;
                                                                }
                                                                V18::Mediumint => {
                                                                    *base.add(16).cast::<u8>() = (3i32) as u8;
                                                                }
                                                                V18::Int => {
                                                                    *base.add(16).cast::<u8>() = (4i32) as u8;
                                                                }
                                                                V18::Bigint => {
                                                                    *base.add(16).cast::<u8>() = (5i32) as u8;
                                                                }
                                                                V18::TinyintUnsigned => {
                                                                    *base.add(16).cast::<u8>() = (6i32) as u8;
                                                                }
                                                                V18::SmallintUnsigned => {
                                                                    *base.add(16).cast::<u8>() = (7i32) as u8;
                                                                }
                                                                V18::MediumintUnsigned => {
                                                                    *base.add(16).cast::<u8>() = (8i32) as u8;
                                                                }
                                                                V18::IntUnsigned => {
                                                                    *base.add(16).cast::<u8>() = (9i32) as u8;
                                                                }
                                                                V18::BigintUnsigned => {
                                                                    *base.add(16).cast::<u8>() = (10i32) as u8;
                                                                }
                                                                V18::Float => {
                                                                    *base.add(16).cast::<u8>() = (11i32) as u8;
                                                                }
                                                                V18::Double => {
                                                                    *base.add(16).cast::<u8>() = (12i32) as u8;
                                                                }
                                                                V18::Decimal => {
                                                                    *base.add(16).cast::<u8>() = (13i32) as u8;
                                                                }
                                                                V18::Date => {
                                                                    *base.add(16).cast::<u8>() = (14i32) as u8;
                                                                }
                                                                V18::Datetime => {
                                                                    *base.add(16).cast::<u8>() = (15i32) as u8;
                                                                }
                                                                V18::Timestamp => {
                                                                    *base.add(16).cast::<u8>() = (16i32) as u8;
                                                                }
                                                                V18::Time => {
                                                                    *base.add(16).cast::<u8>() = (17i32) as u8;
                                                                }
                                                                V18::Year => {
                                                                    *base.add(16).cast::<u8>() = (18i32) as u8;
                                                                }
                                                                V18::Fixchar => {
                                                                    *base.add(16).cast::<u8>() = (19i32) as u8;
                                                                }
                                                                V18::Varchar => {
                                                                    *base.add(16).cast::<u8>() = (20i32) as u8;
                                                                }
                                                                V18::Tinytext => {
                                                                    *base.add(16).cast::<u8>() = (21i32) as u8;
                                                                }
                                                                V18::Text => {
                                                                    *base.add(16).cast::<u8>() = (22i32) as u8;
                                                                }
                                                                V18::Mediumtext => {
                                                                    *base.add(16).cast::<u8>() = (23i32) as u8;
                                                                }
                                                                V18::Longtext => {
                                                                    *base.add(16).cast::<u8>() = (24i32) as u8;
                                                                }
                                                                V18::Binary => {
                                                                    *base.add(16).cast::<u8>() = (25i32) as u8;
                                                                }
                                                                V18::Varbinary => {
                                                                    *base.add(16).cast::<u8>() = (26i32) as u8;
                                                                }
                                                                V18::Tinyblob => {
                                                                    *base.add(16).cast::<u8>() = (27i32) as u8;
                                                                }
                                                                V18::Blob => {
                                                                    *base.add(16).cast::<u8>() = (28i32) as u8;
                                                                }
                                                                V18::Mediumblob => {
                                                                    *base.add(16).cast::<u8>() = (29i32) as u8;
                                                                }
                                                                V18::Longblob => {
                                                                    *base.add(16).cast::<u8>() = (30i32) as u8;
                                                                }
                                                                V18::Enumeration => {
                                                                    *base.add(16).cast::<u8>() = (31i32) as u8;
                                                                }
                                                                V18::Set => {
                                                                    *base.add(16).cast::<u8>() = (32i32) as u8;
                                                                }
                                                                V18::Bit => {
                                                                    *base.add(16).cast::<u8>() = (33i32) as u8;
                                                                }
                                                                V18::Json => {
                                                                    *base.add(16).cast::<u8>() = (34i32) as u8;
                                                                }
                                                            }
                                                            let vec19 = (db_type_name16.into_bytes())
                                                                .into_boxed_slice();
                                                            let ptr19 = vec19.as_ptr().cast::<u8>();
                                                            let len19 = vec19.len();
                                                            ::core::mem::forget(vec19);
                                                            *base.add(24).cast::<usize>() = len19;
                                                            *base.add(20).cast::<*mut u8>() = ptr19.cast_mut();
                                                        }
                                                    }
                                                    *base.add(20).cast::<usize>() = len20;
                                                    *base.add(16).cast::<*mut u8>() = result20;
                                                    let vec49 = rows15;
                                                    let len49 = vec49.len();
                                                    let layout49 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec49.len() * 8,
                                                        4,
                                                    );
                                                    let result49 = if layout49.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout49).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout49);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec49.into_iter().enumerate() {
                                                        let base = result49.add(i * 8);
                                                        {
                                                            let super::super::super::super::golem::rdbms::mysql::DbRow {
                                                                values: values21,
                                                            } = e;
                                                            let vec48 = values21;
                                                            let len48 = vec48.len();
                                                            let layout48 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec48.len() * 24,
                                                                8,
                                                            );
                                                            let result48 = if layout48.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout48).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout48);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec48.into_iter().enumerate() {
                                                                let base = result48.add(i * 24);
                                                                {
                                                                    use super::super::super::super::golem::rdbms::mysql::DbValue as V47;
                                                                    match e {
                                                                        V47::Boolean(e) => {
                                                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                            *base.add(8).cast::<u8>() = (match e {
                                                                                true => 1,
                                                                                false => 0,
                                                                            }) as u8;
                                                                        }
                                                                        V47::Tinyint(e) => {
                                                                            *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                            *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                                                        }
                                                                        V47::Smallint(e) => {
                                                                            *base.add(0).cast::<u8>() = (2i32) as u8;
                                                                            *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                                                        }
                                                                        V47::Mediumint(e) => {
                                                                            *base.add(0).cast::<u8>() = (3i32) as u8;
                                                                            *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V47::Int(e) => {
                                                                            *base.add(0).cast::<u8>() = (4i32) as u8;
                                                                            *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V47::Bigint(e) => {
                                                                            *base.add(0).cast::<u8>() = (5i32) as u8;
                                                                            *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                                        }
                                                                        V47::TinyintUnsigned(e) => {
                                                                            *base.add(0).cast::<u8>() = (6i32) as u8;
                                                                            *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                                                        }
                                                                        V47::SmallintUnsigned(e) => {
                                                                            *base.add(0).cast::<u8>() = (7i32) as u8;
                                                                            *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                                                        }
                                                                        V47::MediumintUnsigned(e) => {
                                                                            *base.add(0).cast::<u8>() = (8i32) as u8;
                                                                            *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V47::IntUnsigned(e) => {
                                                                            *base.add(0).cast::<u8>() = (9i32) as u8;
                                                                            *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V47::BigintUnsigned(e) => {
                                                                            *base.add(0).cast::<u8>() = (10i32) as u8;
                                                                            *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                                        }
                                                                        V47::Float(e) => {
                                                                            *base.add(0).cast::<u8>() = (11i32) as u8;
                                                                            *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                                                        }
                                                                        V47::Double(e) => {
                                                                            *base.add(0).cast::<u8>() = (12i32) as u8;
                                                                            *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                                                        }
                                                                        V47::Decimal(e) => {
                                                                            *base.add(0).cast::<u8>() = (13i32) as u8;
                                                                            let vec22 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr22 = vec22.as_ptr().cast::<u8>();
                                                                            let len22 = vec22.len();
                                                                            ::core::mem::forget(vec22);
                                                                            *base.add(12).cast::<usize>() = len22;
                                                                            *base.add(8).cast::<*mut u8>() = ptr22.cast_mut();
                                                                        }
                                                                        V47::Date(e) => {
                                                                            *base.add(0).cast::<u8>() = (14i32) as u8;
                                                                            let super::super::super::super::golem::rdbms::types::Date {
                                                                                year: year23,
                                                                                month: month23,
                                                                                day: day23,
                                                                            } = e;
                                                                            *base.add(8).cast::<i32>() = _rt::as_i32(year23);
                                                                            *base.add(12).cast::<u8>() = (_rt::as_i32(month23)) as u8;
                                                                            *base.add(13).cast::<u8>() = (_rt::as_i32(day23)) as u8;
                                                                        }
                                                                        V47::Datetime(e) => {
                                                                            *base.add(0).cast::<u8>() = (15i32) as u8;
                                                                            let super::super::super::super::golem::rdbms::types::Timestamp {
                                                                                date: date24,
                                                                                time: time24,
                                                                            } = e;
                                                                            let super::super::super::super::golem::rdbms::types::Date {
                                                                                year: year25,
                                                                                month: month25,
                                                                                day: day25,
                                                                            } = date24;
                                                                            *base.add(8).cast::<i32>() = _rt::as_i32(year25);
                                                                            *base.add(12).cast::<u8>() = (_rt::as_i32(month25)) as u8;
                                                                            *base.add(13).cast::<u8>() = (_rt::as_i32(day25)) as u8;
                                                                            let super::super::super::super::golem::rdbms::types::Time {
                                                                                hour: hour26,
                                                                                minute: minute26,
                                                                                second: second26,
                                                                                nanosecond: nanosecond26,
                                                                            } = time24;
                                                                            *base.add(16).cast::<u8>() = (_rt::as_i32(hour26)) as u8;
                                                                            *base.add(17).cast::<u8>() = (_rt::as_i32(minute26)) as u8;
                                                                            *base.add(18).cast::<u8>() = (_rt::as_i32(second26)) as u8;
                                                                            *base.add(20).cast::<i32>() = _rt::as_i32(nanosecond26);
                                                                        }
                                                                        V47::Timestamp(e) => {
                                                                            *base.add(0).cast::<u8>() = (16i32) as u8;
                                                                            let super::super::super::super::golem::rdbms::types::Timestamp {
                                                                                date: date27,
                                                                                time: time27,
                                                                            } = e;
                                                                            let super::super::super::super::golem::rdbms::types::Date {
                                                                                year: year28,
                                                                                month: month28,
                                                                                day: day28,
                                                                            } = date27;
                                                                            *base.add(8).cast::<i32>() = _rt::as_i32(year28);
                                                                            *base.add(12).cast::<u8>() = (_rt::as_i32(month28)) as u8;
                                                                            *base.add(13).cast::<u8>() = (_rt::as_i32(day28)) as u8;
                                                                            let super::super::super::super::golem::rdbms::types::Time {
                                                                                hour: hour29,
                                                                                minute: minute29,
                                                                                second: second29,
                                                                                nanosecond: nanosecond29,
                                                                            } = time27;
                                                                            *base.add(16).cast::<u8>() = (_rt::as_i32(hour29)) as u8;
                                                                            *base.add(17).cast::<u8>() = (_rt::as_i32(minute29)) as u8;
                                                                            *base.add(18).cast::<u8>() = (_rt::as_i32(second29)) as u8;
                                                                            *base.add(20).cast::<i32>() = _rt::as_i32(nanosecond29);
                                                                        }
                                                                        V47::Time(e) => {
                                                                            *base.add(0).cast::<u8>() = (17i32) as u8;
                                                                            let super::super::super::super::golem::rdbms::types::Time {
                                                                                hour: hour30,
                                                                                minute: minute30,
                                                                                second: second30,
                                                                                nanosecond: nanosecond30,
                                                                            } = e;
                                                                            *base.add(8).cast::<u8>() = (_rt::as_i32(hour30)) as u8;
                                                                            *base.add(9).cast::<u8>() = (_rt::as_i32(minute30)) as u8;
                                                                            *base.add(10).cast::<u8>() = (_rt::as_i32(second30)) as u8;
                                                                            *base.add(12).cast::<i32>() = _rt::as_i32(nanosecond30);
                                                                        }
                                                                        V47::Year(e) => {
                                                                            *base.add(0).cast::<u8>() = (18i32) as u8;
                                                                            *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                                                        }
                                                                        V47::Fixchar(e) => {
                                                                            *base.add(0).cast::<u8>() = (19i32) as u8;
                                                                            let vec31 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr31 = vec31.as_ptr().cast::<u8>();
                                                                            let len31 = vec31.len();
                                                                            ::core::mem::forget(vec31);
                                                                            *base.add(12).cast::<usize>() = len31;
                                                                            *base.add(8).cast::<*mut u8>() = ptr31.cast_mut();
                                                                        }
                                                                        V47::Varchar(e) => {
                                                                            *base.add(0).cast::<u8>() = (20i32) as u8;
                                                                            let vec32 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr32 = vec32.as_ptr().cast::<u8>();
                                                                            let len32 = vec32.len();
                                                                            ::core::mem::forget(vec32);
                                                                            *base.add(12).cast::<usize>() = len32;
                                                                            *base.add(8).cast::<*mut u8>() = ptr32.cast_mut();
                                                                        }
                                                                        V47::Tinytext(e) => {
                                                                            *base.add(0).cast::<u8>() = (21i32) as u8;
                                                                            let vec33 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr33 = vec33.as_ptr().cast::<u8>();
                                                                            let len33 = vec33.len();
                                                                            ::core::mem::forget(vec33);
                                                                            *base.add(12).cast::<usize>() = len33;
                                                                            *base.add(8).cast::<*mut u8>() = ptr33.cast_mut();
                                                                        }
                                                                        V47::Text(e) => {
                                                                            *base.add(0).cast::<u8>() = (22i32) as u8;
                                                                            let vec34 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr34 = vec34.as_ptr().cast::<u8>();
                                                                            let len34 = vec34.len();
                                                                            ::core::mem::forget(vec34);
                                                                            *base.add(12).cast::<usize>() = len34;
                                                                            *base.add(8).cast::<*mut u8>() = ptr34.cast_mut();
                                                                        }
                                                                        V47::Mediumtext(e) => {
                                                                            *base.add(0).cast::<u8>() = (23i32) as u8;
                                                                            let vec35 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr35 = vec35.as_ptr().cast::<u8>();
                                                                            let len35 = vec35.len();
                                                                            ::core::mem::forget(vec35);
                                                                            *base.add(12).cast::<usize>() = len35;
                                                                            *base.add(8).cast::<*mut u8>() = ptr35.cast_mut();
                                                                        }
                                                                        V47::Longtext(e) => {
                                                                            *base.add(0).cast::<u8>() = (24i32) as u8;
                                                                            let vec36 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr36 = vec36.as_ptr().cast::<u8>();
                                                                            let len36 = vec36.len();
                                                                            ::core::mem::forget(vec36);
                                                                            *base.add(12).cast::<usize>() = len36;
                                                                            *base.add(8).cast::<*mut u8>() = ptr36.cast_mut();
                                                                        }
                                                                        V47::Binary(e) => {
                                                                            *base.add(0).cast::<u8>() = (25i32) as u8;
                                                                            let vec37 = (e).into_boxed_slice();
                                                                            let ptr37 = vec37.as_ptr().cast::<u8>();
                                                                            let len37 = vec37.len();
                                                                            ::core::mem::forget(vec37);
                                                                            *base.add(12).cast::<usize>() = len37;
                                                                            *base.add(8).cast::<*mut u8>() = ptr37.cast_mut();
                                                                        }
                                                                        V47::Varbinary(e) => {
                                                                            *base.add(0).cast::<u8>() = (26i32) as u8;
                                                                            let vec38 = (e).into_boxed_slice();
                                                                            let ptr38 = vec38.as_ptr().cast::<u8>();
                                                                            let len38 = vec38.len();
                                                                            ::core::mem::forget(vec38);
                                                                            *base.add(12).cast::<usize>() = len38;
                                                                            *base.add(8).cast::<*mut u8>() = ptr38.cast_mut();
                                                                        }
                                                                        V47::Tinyblob(e) => {
                                                                            *base.add(0).cast::<u8>() = (27i32) as u8;
                                                                            let vec39 = (e).into_boxed_slice();
                                                                            let ptr39 = vec39.as_ptr().cast::<u8>();
                                                                            let len39 = vec39.len();
                                                                            ::core::mem::forget(vec39);
                                                                            *base.add(12).cast::<usize>() = len39;
                                                                            *base.add(8).cast::<*mut u8>() = ptr39.cast_mut();
                                                                        }
                                                                        V47::Blob(e) => {
                                                                            *base.add(0).cast::<u8>() = (28i32) as u8;
                                                                            let vec40 = (e).into_boxed_slice();
                                                                            let ptr40 = vec40.as_ptr().cast::<u8>();
                                                                            let len40 = vec40.len();
                                                                            ::core::mem::forget(vec40);
                                                                            *base.add(12).cast::<usize>() = len40;
                                                                            *base.add(8).cast::<*mut u8>() = ptr40.cast_mut();
                                                                        }
                                                                        V47::Mediumblob(e) => {
                                                                            *base.add(0).cast::<u8>() = (29i32) as u8;
                                                                            let vec41 = (e).into_boxed_slice();
                                                                            let ptr41 = vec41.as_ptr().cast::<u8>();
                                                                            let len41 = vec41.len();
                                                                            ::core::mem::forget(vec41);
                                                                            *base.add(12).cast::<usize>() = len41;
                                                                            *base.add(8).cast::<*mut u8>() = ptr41.cast_mut();
                                                                        }
                                                                        V47::Longblob(e) => {
                                                                            *base.add(0).cast::<u8>() = (30i32) as u8;
                                                                            let vec42 = (e).into_boxed_slice();
                                                                            let ptr42 = vec42.as_ptr().cast::<u8>();
                                                                            let len42 = vec42.len();
                                                                            ::core::mem::forget(vec42);
                                                                            *base.add(12).cast::<usize>() = len42;
                                                                            *base.add(8).cast::<*mut u8>() = ptr42.cast_mut();
                                                                        }
                                                                        V47::Enumeration(e) => {
                                                                            *base.add(0).cast::<u8>() = (31i32) as u8;
                                                                            let vec43 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr43 = vec43.as_ptr().cast::<u8>();
                                                                            let len43 = vec43.len();
                                                                            ::core::mem::forget(vec43);
                                                                            *base.add(12).cast::<usize>() = len43;
                                                                            *base.add(8).cast::<*mut u8>() = ptr43.cast_mut();
                                                                        }
                                                                        V47::Set(e) => {
                                                                            *base.add(0).cast::<u8>() = (32i32) as u8;
                                                                            let vec44 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr44 = vec44.as_ptr().cast::<u8>();
                                                                            let len44 = vec44.len();
                                                                            ::core::mem::forget(vec44);
                                                                            *base.add(12).cast::<usize>() = len44;
                                                                            *base.add(8).cast::<*mut u8>() = ptr44.cast_mut();
                                                                        }
                                                                        V47::Bit(e) => {
                                                                            *base.add(0).cast::<u8>() = (33i32) as u8;
                                                                            let vec45 = e;
                                                                            let len45 = vec45.len();
                                                                            let layout45 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec45.len() * 1,
                                                                                1,
                                                                            );
                                                                            let result45 = if layout45.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout45).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout45);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec45.into_iter().enumerate() {
                                                                                let base = result45.add(i * 1);
                                                                                {
                                                                                    *base.add(0).cast::<u8>() = (match e {
                                                                                        true => 1,
                                                                                        false => 0,
                                                                                    }) as u8;
                                                                                }
                                                                            }
                                                                            *base.add(12).cast::<usize>() = len45;
                                                                            *base.add(8).cast::<*mut u8>() = result45;
                                                                        }
                                                                        V47::Json(e) => {
                                                                            *base.add(0).cast::<u8>() = (34i32) as u8;
                                                                            let vec46 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr46 = vec46.as_ptr().cast::<u8>();
                                                                            let len46 = vec46.len();
                                                                            ::core::mem::forget(vec46);
                                                                            *base.add(12).cast::<usize>() = len46;
                                                                            *base.add(8).cast::<*mut u8>() = ptr46.cast_mut();
                                                                        }
                                                                        V47::Null => {
                                                                            *base.add(0).cast::<u8>() = (35i32) as u8;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            *base.add(4).cast::<usize>() = len48;
                                                            *base.add(0).cast::<*mut u8>() = result48;
                                                        }
                                                    }
                                                    *base.add(28).cast::<usize>() = len49;
                                                    *base.add(24).cast::<*mut u8>() = result49;
                                                }
                                            }
                                        }
                                        Err(e) => {
                                            *base.add(0).cast::<u8>() = (1i32) as u8;
                                            let vec50 = (e.into_bytes()).into_boxed_slice();
                                            let ptr50 = vec50.as_ptr().cast::<u8>();
                                            let len50 = vec50.len();
                                            ::core::mem::forget(vec50);
                                            *base.add(12).cast::<usize>() = len50;
                                            *base.add(8).cast::<*mut u8>() = ptr50.cast_mut();
                                        }
                                    };
                                }
                            }
                            *ptr14.add(8).cast::<usize>() = len51;
                            *ptr14.add(4).cast::<*mut u8>() = result51;
                        }
                        Err(e) => {
                            *ptr14.add(0).cast::<u8>() = (1i32) as u8;
                            let vec52 = (e.into_bytes()).into_boxed_slice();
                            let ptr52 = vec52.as_ptr().cast::<u8>();
                            let len52 = vec52.len();
                            ::core::mem::forget(vec52);
                            *ptr14.add(8).cast::<usize>() = len52;
                            *ptr14.add(4).cast::<*mut u8>() = ptr52.cast_mut();
                        }
                    };
                    ptr14
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_mysql_executions<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            let base62 = l1;
                            let len62 = l2;
                            for i in 0..len62 {
                                let base = base62.add(i * 32);
                                {
                                    let l3 = i32::from(*base.add(0).cast::<u8>());
                                    match l3 {
                                        0 => {
                                            let l4 = i32::from(*base.add(8).cast::<u8>());
                                            match l4 {
                                                0 => {}
                                                _ => {
                                                    let l5 = *base.add(16).cast::<*mut u8>();
                                                    let l6 = *base.add(20).cast::<usize>();
                                                    let base11 = l5;
                                                    let len11 = l6;
                                                    for i in 0..len11 {
                                                        let base = base11.add(i * 32);
                                                        {
                                                            let l7 = *base.add(8).cast::<*mut u8>();
                                                            let l8 = *base.add(12).cast::<usize>();
                                                            _rt::cabi_dealloc(l7, l8, 1);
                                                            let l9 = *base.add(20).cast::<*mut u8>();
                                                            let l10 = *base.add(24).cast::<usize>();
                                                            _rt::cabi_dealloc(l9, l10, 1);
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(base11, len11 * 32, 8);
                                                    let l12 = *base.add(24).cast::<*mut u8>();
                                                    let l13 = *base.add(28).cast::<usize>();
                                                    let base59 = l12;
                                                    let len59 = l13;
                                                    for i in 0..len59 {
                                                        let base = base59.add(i * 8);
                                                        {
                                                            let l14 = *base.add(0).cast::<*mut u8>();
                                                            let l15 = *base.add(4).cast::<usize>();
                                                            let base58 = l14;
                                                            let len58 = l15;
                                                            for i in 0..len58 {
                                                                let base = base58.add(i * 24);
                                                                {
                                                                    let l16 = i32::from(*base.add(0).cast::<u8>());
                                                                    match l16 {
                                                                        0 => {}
                                                                        1 => {}
                                                                        2 => {}
                                                                        3 => {}
                                                                        4 => {}
                                                                        5 => {}
                                                                        6 => {}
                                                                        7 => {}
                                                                        8 => {}
                                                                        9 => {}
                                                                        10 => {}
                                                                        11 => {}
                                                                        12 => {}
                                                                        13 => {
                                                                            let l17 = *base.add(8).cast::<*mut u8>();
                                                                            let l18 = *base.add(12).cast::<usize>();
                                                                            _rt::cabi_dealloc(l17, l18, 1);
                                                                        }
                                                                        14 => {}
                                                                        15 => {}
                                                                        16 => {}
                                                                        17 => {}
                                                                        18 => {}
                                                                        19 => {
                                                                            let l19 = *base.add(8).cast::<*mut u8>();
                                                                            let l20 = *base.add(12).cast::<usize>();
                                                                            _rt::cabi_dealloc(l19, l20, 1);
                                                                        }
                                                                        20 => {
                                                                            let l21 = *base.add(8).cast::<*mut u8>();
                                                                            let l22 = *base.add(12).cast::<usize>();
                                                                            _rt::cabi_dealloc(l21, l22, 1);
                                                                        }
                                                                        21 => {
                                                                            let l23 = *base.add(8).cast::<*mut u8>();
                                                                            let l24 = *base.add(12).cast::<usize>();
                                                                            _rt::cabi_dealloc(l23, l24, 1);
                                                                        }
                                                                        22 => {
                                                                            let l25 = *base.add(8).cast::<*mut u8>();
                                                                            let l26 = *base.add(12).cast::<usize>();
                                                                            _rt::cabi_dealloc(l25, l26, 1);
                                                                        }
                                                                        23 => {
                                                                            let l27 = *base.add(8).cast::<*mut u8>();
                                                                            let l28 = *base.add(12).cast::<usize>();
                                                                            _rt::cabi_dealloc(l27, l28, 1);
                                                                        }
                                                                        24 => {
                                                                            let l29 = *base.add(8).cast::<*mut u8>();
                                                                            let l30 = *base.add(12).cast::<usize>();
                                                                            _rt::cabi_dealloc(l29, l30, 1);
                                                                        }
                                                                        25 => {
                                                                            let l31 = *base.add(8).cast::<*mut u8>();
                                                                            let l32 = *base.add(12).cast::<usize>();
                                                                            let base33 = l31;
                                                                            let len33 = l32;
                                                                            _rt::cabi_dealloc(base33, len33 * 1, 1);
                                                                        }
                                                                        26 => {
                                                                            let l34 = *base.add(8).cast::<*mut u8>();
                                                                            let l35 = *base.add(12).cast::<usize>();
                                                                            let base36 = l34;
                                                                            let len36 = l35;
                                                                            _rt::cabi_dealloc(base36, len36 * 1, 1);
                                                                        }
                                                                        27 => {
                                                                            let l37 = *base.add(8).cast::<*mut u8>();
                                                                            let l38 = *base.add(12).cast::<usize>();
                                                                            let base39 = l37;
                                                                            let len39 = l38;
                                                                            _rt::cabi_dealloc(base39, len39 * 1, 1);
                                                                        }
                                                                        28 => {
                                                                            let l40 = *base.add(8).cast::<*mut u8>();
                                                                            let l41 = *base.add(12).cast::<usize>();
                                                                            let base42 = l40;
                                                                            let len42 = l41;
                                                                            _rt::cabi_dealloc(base42, len42 * 1, 1);
                                                                        }
                                                                        29 => {
                                                                            let l43 = *base.add(8).cast::<*mut u8>();
                                                                            let l44 = *base.add(12).cast::<usize>();
                                                                            let base45 = l43;
                                                                            let len45 = l44;
                                                                            _rt::cabi_dealloc(base45, len45 * 1, 1);
                                                                        }
                                                                        30 => {
                                                                            let l46 = *base.add(8).cast::<*mut u8>();
                                                                            let l47 = *base.add(12).cast::<usize>();
                                                                            let base48 = l46;
                                                                            let len48 = l47;
                                                                            _rt::cabi_dealloc(base48, len48 * 1, 1);
                                                                        }
                                                                        31 => {
                                                                            let l49 = *base.add(8).cast::<*mut u8>();
                                                                            let l50 = *base.add(12).cast::<usize>();
                                                                            _rt::cabi_dealloc(l49, l50, 1);
                                                                        }
                                                                        32 => {
                                                                            let l51 = *base.add(8).cast::<*mut u8>();
                                                                            let l52 = *base.add(12).cast::<usize>();
                                                                            _rt::cabi_dealloc(l51, l52, 1);
                                                                        }
                                                                        33 => {
                                                                            let l53 = *base.add(8).cast::<*mut u8>();
                                                                            let l54 = *base.add(12).cast::<usize>();
                                                                            let base55 = l53;
                                                                            let len55 = l54;
                                                                            _rt::cabi_dealloc(base55, len55 * 1, 1);
                                                                        }
                                                                        34 => {
                                                                            let l56 = *base.add(8).cast::<*mut u8>();
                                                                            let l57 = *base.add(12).cast::<usize>();
                                                                            _rt::cabi_dealloc(l56, l57, 1);
                                                                        }
                                                                        _ => {}
                                                                    }
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(base58, len58 * 24, 8);
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(base59, len59 * 8, 4);
                                                }
                                            }
                                        }
                                        _ => {
                                            let l60 = *base.add(8).cast::<*mut u8>();
                                            let l61 = *base.add(12).cast::<usize>();
                                            _rt::cabi_dealloc(l60, l61, 1);
                                        }
                                    }
                                }
                            }
                            _rt::cabi_dealloc(base62, len62 * 32, 8);
                        }
                        _ => {
                            let l63 = *arg0.add(4).cast::<*mut u8>();
                            let l64 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l63, l64, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_postgres_transaction_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: i32,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let base12 = arg0;
                    let len12 = arg1;
                    let mut result12 = _rt::Vec::with_capacity(len12);
                    for i in 0..len12 {
                        let base = base12.add(i * 40);
                        let e12 = {
                            let l0 = *base.add(0).cast::<*mut u8>();
                            let l1 = *base.add(4).cast::<usize>();
                            let len2 = l1;
                            let bytes2 = _rt::Vec::from_raw_parts(l0.cast(), len2, len2);
                            let l3 = *base.add(8).cast::<*mut u8>();
                            let l4 = *base.add(12).cast::<usize>();
                            let base8 = l3;
                            let len8 = l4;
                            let mut result8 = _rt::Vec::with_capacity(len8);
                            for i in 0..len8 {
                                let base = base8.add(i * 8);
                                let e8 = {
                                    let l5 = *base.add(0).cast::<*mut u8>();
                                    let l6 = *base.add(4).cast::<usize>();
                                    let len7 = l6;
                                    let bytes7 = _rt::Vec::from_raw_parts(
                                        l5.cast(),
                                        len7,
                                        len7,
                                    );
                                    _rt::string_lift(bytes7)
                                };
                                result8.push(e8);
                            }
                            _rt::cabi_dealloc(base8, len8 * 8, 4);
                            let l9 = i32::from(*base.add(16).cast::<u8>());
                            let l10 = i32::from(*base.add(24).cast::<u8>());
                            Statement {
                                statement: _rt::string_lift(bytes2),
                                params: result8,
                                action: StatementAction::_lift(l9 as u8),
                                sleep: match l10 {
                                    0 => None,
                                    1 => {
                                        let e = {
                                            let l11 = *base.add(32).cast::<i64>();
                                            l11 as u64
                                        };
                                        Some(e)
                                    }
                                    _ => _rt::invalid_enum_discriminant(),
                                },
                            }
                        };
                        result12.push(e12);
                    }
                    _rt::cabi_dealloc(base12, len12 * 40, 8);
                    let result13 = T::postgres_transaction(
                        result12,
                        TransactionEnd::_lift(arg2 as u8),
                    );
                    let ptr14 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result13 {
                        Ok(e) => {
                            *ptr14.add(0).cast::<u8>() = (0i32) as u8;
                            let vec137 = e;
                            let len137 = vec137.len();
                            let layout137 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec137.len() * 32,
                                8,
                            );
                            let result137 = if layout137.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout137).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout137);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec137.into_iter().enumerate() {
                                let base = result137.add(i * 32);
                                {
                                    match e {
                                        Ok(e) => {
                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                            match e {
                                                PostgresResult::Execute(e) => {
                                                    *base.add(8).cast::<u8>() = (0i32) as u8;
                                                    *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                                }
                                                PostgresResult::Query(e) => {
                                                    *base.add(8).cast::<u8>() = (1i32) as u8;
                                                    let super::super::super::super::golem::rdbms::postgres::DbResult {
                                                        columns: columns15,
                                                        rows: rows15,
                                                    } = e;
                                                    let vec31 = columns15;
                                                    let len31 = vec31.len();
                                                    let layout31 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec31.len() * 48,
                                                        8,
                                                    );
                                                    let result31 = if layout31.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout31).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout31);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec31.into_iter().enumerate() {
                                                        let base = result31.add(i * 48);
                                                        {
                                                            let super::super::super::super::golem::rdbms::postgres::DbColumn {
                                                                ordinal: ordinal16,
                                                                name: name16,
                                                                db_type: db_type16,
                                                                db_type_name: db_type_name16,
                                                            } = e;
                                                            *base.add(0).cast::<i64>() = _rt::as_i64(ordinal16);
                                                            let vec17 = (name16.into_bytes()).into_boxed_slice();
                                                            let ptr17 = vec17.as_ptr().cast::<u8>();
                                                            let len17 = vec17.len();
                                                            ::core::mem::forget(vec17);
                                                            *base.add(12).cast::<usize>() = len17;
                                                            *base.add(8).cast::<*mut u8>() = ptr17.cast_mut();
                                                            use super::super::super::super::golem::rdbms::postgres::DbColumnType as V29;
                                                            match db_type16 {
                                                                V29::Character => {
                                                                    *base.add(16).cast::<u8>() = (0i32) as u8;
                                                                }
                                                                V29::Int2 => {
                                                                    *base.add(16).cast::<u8>() = (1i32) as u8;
                                                                }
                                                                V29::Int4 => {
                                                                    *base.add(16).cast::<u8>() = (2i32) as u8;
                                                                }
                                                                V29::Int8 => {
                                                                    *base.add(16).cast::<u8>() = (3i32) as u8;
                                                                }
                                                                V29::Float4 => {
                                                                    *base.add(16).cast::<u8>() = (4i32) as u8;
                                                                }
                                                                V29::Float8 => {
                                                                    *base.add(16).cast::<u8>() = (5i32) as u8;
                                                                }
                                                                V29::Numeric => {
                                                                    *base.add(16).cast::<u8>() = (6i32) as u8;
                                                                }
                                                                V29::Boolean => {
                                                                    *base.add(16).cast::<u8>() = (7i32) as u8;
                                                                }
                                                                V29::Text => {
                                                                    *base.add(16).cast::<u8>() = (8i32) as u8;
                                                                }
                                                                V29::Varchar => {
                                                                    *base.add(16).cast::<u8>() = (9i32) as u8;
                                                                }
                                                                V29::Bpchar => {
                                                                    *base.add(16).cast::<u8>() = (10i32) as u8;
                                                                }
                                                                V29::Timestamp => {
                                                                    *base.add(16).cast::<u8>() = (11i32) as u8;
                                                                }
                                                                V29::Timestamptz => {
                                                                    *base.add(16).cast::<u8>() = (12i32) as u8;
                                                                }
                                                                V29::Date => {
                                                                    *base.add(16).cast::<u8>() = (13i32) as u8;
                                                                }
                                                                V29::Time => {
                                                                    *base.add(16).cast::<u8>() = (14i32) as u8;
                                                                }
                                                                V29::Timetz => {
                                                                    *base.add(16).cast::<u8>() = (15i32) as u8;
                                                                }
                                                                V29::Interval => {
                                                                    *base.add(16).cast::<u8>() = (16i32) as u8;
                                                                }
                                                                V29::Bytea => {
                                                                    *base.add(16).cast::<u8>() = (17i32) as u8;
                                                                }
                                                                V29::Uuid => {
                                                                    *base.add(16).cast::<u8>() = (18i32) as u8;
                                                                }
                                                                V29::Xml => {
                                                                    *base.add(16).cast::<u8>() = (19i32) as u8;
                                                                }
                                                                V29::Json => {
                                                                    *base.add(16).cast::<u8>() = (20i32) as u8;
                                                                }
                                                                V29::Jsonb => {
                                                                    *base.add(16).cast::<u8>() = (21i32) as u8;
                                                                }
                                                                V29::Jsonpath => {
                                                                    *base.add(16).cast::<u8>() = (22i32) as u8;
                                                                }
                                                                V29::Inet => {
                                                                    *base.add(16).cast::<u8>() = (23i32) as u8;
                                                                }
                                                                V29::Cidr => {
                                                                    *base.add(16).cast::<u8>() = (24i32) as u8;
                                                                }
                                                                V29::Macaddr => {
                                                                    *base.add(16).cast::<u8>() = (25i32) as u8;
                                                                }
                                                                V29::Bit => {
                                                                    *base.add(16).cast::<u8>() = (26i32) as u8;
                                                                }
                                                                V29::Varbit => {
                                                                    *base.add(16).cast::<u8>() = (27i32) as u8;
                                                                }
                                                                V29::Int4range => {
                                                                    *base.add(16).cast::<u8>() = (28i32) as u8;
                                                                }
                                                                V29::Int8range => {
                                                                    *base.add(16).cast::<u8>() = (29i32) as u8;
                                                                }
                                                                V29::Numrange => {
                                                                    *base.add(16).cast::<u8>() = (30i32) as u8;
                                                                }
                                                                V29::Tsrange => {
                                                                    *base.add(16).cast::<u8>() = (31i32) as u8;
                                                                }
                                                                V29::Tstzrange => {
                                                                    *base.add(16).cast::<u8>() = (32i32) as u8;
                                                                }
                                                                V29::Daterange => {
                                                                    *base.add(16).cast::<u8>() = (33i32) as u8;
                                                                }
                                                                V29::Money => {
                                                                    *base.add(16).cast::<u8>() = (34i32) as u8;
                                                                }
                                                                V29::Oid => {
                                                                    *base.add(16).cast::<u8>() = (35i32) as u8;
                                                                }
                                                                V29::Enumeration(e) => {
                                                                    *base.add(16).cast::<u8>() = (36i32) as u8;
                                                                    let super::super::super::super::golem::rdbms::postgres::EnumerationType {
                                                                        name: name18,
                                                                    } = e;
                                                                    let vec19 = (name18.into_bytes()).into_boxed_slice();
                                                                    let ptr19 = vec19.as_ptr().cast::<u8>();
                                                                    let len19 = vec19.len();
                                                                    ::core::mem::forget(vec19);
                                                                    *base.add(24).cast::<usize>() = len19;
                                                                    *base.add(20).cast::<*mut u8>() = ptr19.cast_mut();
                                                                }
                                                                V29::Composite(e) => {
                                                                    *base.add(16).cast::<u8>() = (37i32) as u8;
                                                                    let super::super::super::super::golem::rdbms::postgres::CompositeType {
                                                                        name: name20,
                                                                        attributes: attributes20,
                                                                    } = e;
                                                                    let vec21 = (name20.into_bytes()).into_boxed_slice();
                                                                    let ptr21 = vec21.as_ptr().cast::<u8>();
                                                                    let len21 = vec21.len();
                                                                    ::core::mem::forget(vec21);
                                                                    *base.add(24).cast::<usize>() = len21;
                                                                    *base.add(20).cast::<*mut u8>() = ptr21.cast_mut();
                                                                    let vec24 = attributes20;
                                                                    let len24 = vec24.len();
                                                                    let layout24 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec24.len() * 12,
                                                                        4,
                                                                    );
                                                                    let result24 = if layout24.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout24).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout24);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec24.into_iter().enumerate() {
                                                                        let base = result24.add(i * 12);
                                                                        {
                                                                            let (t22_0, t22_1) = e;
                                                                            let vec23 = (t22_0.into_bytes()).into_boxed_slice();
                                                                            let ptr23 = vec23.as_ptr().cast::<u8>();
                                                                            let len23 = vec23.len();
                                                                            ::core::mem::forget(vec23);
                                                                            *base.add(4).cast::<usize>() = len23;
                                                                            *base.add(0).cast::<*mut u8>() = ptr23.cast_mut();
                                                                            *base.add(8).cast::<i32>() = (t22_1).take_handle() as i32;
                                                                        }
                                                                    }
                                                                    *base.add(32).cast::<usize>() = len24;
                                                                    *base.add(28).cast::<*mut u8>() = result24;
                                                                }
                                                                V29::Domain(e) => {
                                                                    *base.add(16).cast::<u8>() = (38i32) as u8;
                                                                    let super::super::super::super::golem::rdbms::postgres::DomainType {
                                                                        name: name25,
                                                                        base_type: base_type25,
                                                                    } = e;
                                                                    let vec26 = (name25.into_bytes()).into_boxed_slice();
                                                                    let ptr26 = vec26.as_ptr().cast::<u8>();
                                                                    let len26 = vec26.len();
                                                                    ::core::mem::forget(vec26);
                                                                    *base.add(24).cast::<usize>() = len26;
                                                                    *base.add(20).cast::<*mut u8>() = ptr26.cast_mut();
                                                                    *base.add(28).cast::<i32>() = (base_type25).take_handle()
                                                                        as i32;
                                                                }
                                                                V29::Array(e) => {
                                                                    *base.add(16).cast::<u8>() = (39i32) as u8;
                                                                    *base.add(20).cast::<i32>() = (e).take_handle() as i32;
                                                                }
                                                                V29::Range(e) => {
                                                                    *base.add(16).cast::<u8>() = (40i32) as u8;
                                                                    let super::super::super::super::golem::rdbms::postgres::RangeType {
                                                                        name: name27,
                                                                        base_type: base_type27,
                                                                    } = e;
                                                                    let vec28 = (name27.into_bytes()).into_boxed_slice();
                                                                    let ptr28 = vec28.as_ptr().cast::<u8>();
                                                                    let len28 = vec28.len();
                                                                    ::core::mem::forget(vec28);
                                                                    *base.add(24).cast::<usize>() = len28;
                                                                    *base.add(20).cast::<*mut u8>() = ptr28.cast_mut();
                                                                    *base.add(28).cast::<i32>() = (base_type27).take_handle()
                                                                        as i32;
                                                                }
                                                            }
                                                            let vec30 = (db_type_name16.into_bytes())
                                                                .into_boxed_slice();
                                                            let ptr30 = vec30.as_ptr().cast::<u8>();
                                                            let len30 = vec30.len();
                                                            ::core::mem::forget(vec30);
                                                            *base.add(40).cast::<usize>() = len30;
                                                            *base.add(36).cast::<*mut u8>() = ptr30.cast_mut();
                                                        }
                                                    }
                                                    *base.add(20).cast::<usize>() = len31;
                                                    *base.add(16).cast::<*mut u8>() = result31;
                                                    let vec135 = rows15;
                                                    let len135 = vec135.len();
                                                    let layout135 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec135.len() * 8,
                                                        4,
                                                    );
                                                    let result135 = if layout135.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout135).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout135);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec135.into_iter().enumerate() {
                                                        let base = result135.add(i * 8);
                                                        {
                                                            let super::super::super::super::golem::rdbms::postgres::DbRow {
                                                                values: values32,
                                                            } = e;
                                                            let vec134 = values32;
                                                            let len134 = vec134.len();
                                                            let layout134 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec134.len() * 56,
                                                                8,
                                                            );
                                                            let result134 = if layout134.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout134).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout134);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec134.into_iter().enumerate() {
                                                                let base = result134.add(i * 56);
                                                                {
                                                                    use super::super::super::super::golem::rdbms::postgres::DbValue as V133;
                                                                    match e {
                                                                        V133::Character(e) => {
                                                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                            *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                                                        }
                                                                        V133::Int2(e) => {
                                                                            *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                            *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                                                        }
                                                                        V133::Int4(e) => {
                                                                            *base.add(0).cast::<u8>() = (2i32) as u8;
                                                                            *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V133::Int8(e) => {
                                                                            *base.add(0).cast::<u8>() = (3i32) as u8;
                                                                            *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                                        }
                                                                        V133::Float4(e) => {
                                                                            *base.add(0).cast::<u8>() = (4i32) as u8;
                                                                            *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                                                        }
                                                                        V133::Float8(e) => {
                                                                            *base.add(0).cast::<u8>() = (5i32) as u8;
                                                                            *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                                                        }
                                                                        V133::Numeric(e) => {
                                                                            *base.add(0).cast::<u8>() = (6i32) as u8;
                                                                            let vec33 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr33 = vec33.as_ptr().cast::<u8>();
                                                                            let len33 = vec33.len();
                                                                            ::core::mem::forget(vec33);
                                                                            *base.add(12).cast::<usize>() = len33;
                                                                            *base.add(8).cast::<*mut u8>() = ptr33.cast_mut();
                                                                        }
                                                                        V133::Boolean(e) => {
                                                                            *base.add(0).cast::<u8>() = (7i32) as u8;
                                                                            *base.add(8).cast::<u8>() = (match e {
                                                                                true => 1,
                                                                                false => 0,
                                                                            }) as u8;
                                                                        }
                                                                        V133::Text(e) => {
                                                                            *base.add(0).cast::<u8>() = (8i32) as u8;
                                                                            let vec34 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr34 = vec34.as_ptr().cast::<u8>();
                                                                            let len34 = vec34.len();
                                                                            ::core::mem::forget(vec34);
                                                                            *base.add(12).cast::<usize>() = len34;
                                                                            *base.add(8).cast::<*mut u8>() = ptr34.cast_mut();
                                                                        }
                                                                        V133::Varchar(e) => {
                                                                            *base.add(0).cast::<u8>() = (9i32) as u8;
                                                                            let vec35 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr35 = vec35.as_ptr().cast::<u8>();
                                                                            let len35 = vec35.len();
                                                                            ::core::mem::forget(vec35);
                                                                            *base.add(12).cast::<usize>() = len35;
                                                                            *base.add(8).cast::<*mut u8>() = ptr35.cast_mut();
                                                                        }
                                                                        V133::Bpchar(e) => {
                                                                            *base.add(0).cast::<u8>() = (10i32) as u8;
                                                                            let vec36 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr36 = vec36.as_ptr().cast::<u8>();
                                                                            let len36 = vec36.len();
                                                                            ::core::mem::forget(vec36);
                                                                            *base.add(12).cast::<usize>() = len36;
                                                                            *base.add(8).cast::<*mut u8>() = ptr36.cast_mut();
                                                                        }
                                                                        V133::Timestamp(e) => {
                                                                            *base.add(0).cast::<u8>() = (11i32) as u8;
                                                                            let super::super::super::super::golem::rdbms::types::Timestamp {
                                                                                date: date37,
                                                                                time: time37,
                                                                            } = e;
                                                                            let super::super::super::super::golem::rdbms::types::Date {
                                                                                year: year38,
                                                                                month: month38,
                                                                                day: day38,
                                                                            } = date37;
                                                                            *base.add(8).cast::<i32>() = _rt::as_i32(year38);
                                                                            *base.add(12).cast::<u8>() = (_rt::as_i32(month38)) as u8;
                                                                            *base.add(13).cast::<u8>() = (_rt::as_i32(day38)) as u8;
                                                                            let super::super::super::super::golem::rdbms::types::Time {
                                                                                hour: hour39,
                                                                                minute: minute39,
                                                                                second: second39,
                                                                                nanosecond: nanosecond39,
                                                                            } = time37;
                                                                            *base.add(16).cast::<u8>() = (_rt::as_i32(hour39)) as u8;
                                                                            *base.add(17).cast::<u8>() = (_rt::as_i32(minute39)) as u8;
                                                                            *base.add(18).cast::<u8>() = (_rt::as_i32(second39)) as u8;
                                                                            *base.add(20).cast::<i32>() = _rt::as_i32(nanosecond39);
                                                                        }
                                                                        V133::Timestamptz(e) => {
                                                                            *base.add(0).cast::<u8>() = (12i32) as u8;
                                                                            let super::super::super::super::golem::rdbms::types::Timestamptz {
                                                                                timestamp: timestamp40,
                                                                                offset: offset40,
                                                                            } = e;
                                                                            let super::super::super::super::golem::rdbms::types::Timestamp {
                                                                                date: date41,
                                                                                time: time41,
                                                                            } = timestamp40;
                                                                            let super::super::super::super::golem::rdbms::types::Date {
                                                                                year: year42,
                                                                                month: month42,
                                                                                day: day42,
                                                                            } = date41;
                                                                            *base.add(8).cast::<i32>() = _rt::as_i32(year42);
                                                                            *base.add(12).cast::<u8>() = (_rt::as_i32(month42)) as u8;
                                                                            *base.add(13).cast::<u8>() = (_rt::as_i32(day42)) as u8;
                                                                            let super::super::super::super::golem::rdbms::types::Time {
                                                                                hour: hour43,
                                                                                minute: minute43,
                                                                                second: second43,
                                                                                nanosecond: nanosecond43,
                                                                            } = time41;
                                                                            *base.add(16).cast::<u8>() = (_rt::as_i32(hour43)) as u8;
                                                                            *base.add(17).cast::<u8>() = (_rt::as_i32(minute43)) as u8;
                                                                            *base.add(18).cast::<u8>() = (_rt::as_i32(second43)) as u8;
                                                                            *base.add(20).cast::<i32>() = _rt::as_i32(nanosecond43);
                                                                            *base.add(24).cast::<i32>() = _rt::as_i32(offset40);
                                                                        }
                                                                        V133::Date(e) => {
                                                                            *base.add(0).cast::<u8>() = (13i32) as u8;
                                                                            let super::super::super::super::golem::rdbms::types::Date {
                                                                                year: year44,
                                                                                month: month44,
                                                                                day: day44,
                                                                            } = e;
                                                                            *base.add(8).cast::<i32>() = _rt::as_i32(year44);
                                                                            *base.add(12).cast::<u8>() = (_rt::as_i32(month44)) as u8;
                                                                            *base.add(13).cast::<u8>() = (_rt::as_i32(day44)) as u8;
                                                                        }
                                                                        V133::Time(e) => {
                                                                            *base.add(0).cast::<u8>() = (14i32) as u8;
                                                                            let super::super::super::super::golem::rdbms::types::Time {
                                                                                hour: hour45,
                                                                                minute: minute45,
                                                                                second: second45,
                                                                                nanosecond: nanosecond45,
                                                                            } = e;
                                                                            *base.add(8).cast::<u8>() = (_rt::as_i32(hour45)) as u8;
                                                                            *base.add(9).cast::<u8>() = (_rt::as_i32(minute45)) as u8;
                                                                            *base.add(10).cast::<u8>() = (_rt::as_i32(second45)) as u8;
                                                                            *base.add(12).cast::<i32>() = _rt::as_i32(nanosecond45);
                                                                        }
                                                                        V133::Timetz(e) => {
                                                                            *base.add(0).cast::<u8>() = (15i32) as u8;
                                                                            let super::super::super::super::golem::rdbms::types::Timetz {
                                                                                time: time46,
                                                                                offset: offset46,
                                                                            } = e;
                                                                            let super::super::super::super::golem::rdbms::types::Time {
                                                                                hour: hour47,
                                                                                minute: minute47,
                                                                                second: second47,
                                                                                nanosecond: nanosecond47,
                                                                            } = time46;
                                                                            *base.add(8).cast::<u8>() = (_rt::as_i32(hour47)) as u8;
                                                                            *base.add(9).cast::<u8>() = (_rt::as_i32(minute47)) as u8;
                                                                            *base.add(10).cast::<u8>() = (_rt::as_i32(second47)) as u8;
                                                                            *base.add(12).cast::<i32>() = _rt::as_i32(nanosecond47);
                                                                            *base.add(16).cast::<i32>() = _rt::as_i32(offset46);
                                                                        }
                                                                        V133::Interval(e) => {
                                                                            *base.add(0).cast::<u8>() = (16i32) as u8;
                                                                            let super::super::super::super::golem::rdbms::postgres::Interval {
                                                                                months: months48,
                                                                                days: days48,
                                                                                microseconds: microseconds48,
                                                                            } = e;
                                                                            *base.add(8).cast::<i32>() = _rt::as_i32(months48);
                                                                            *base.add(12).cast::<i32>() = _rt::as_i32(days48);
                                                                            *base.add(16).cast::<i64>() = _rt::as_i64(microseconds48);
                                                                        }
                                                                        V133::Bytea(e) => {
                                                                            *base.add(0).cast::<u8>() = (17i32) as u8;
                                                                            let vec49 = (e).into_boxed_slice();
                                                                            let ptr49 = vec49.as_ptr().cast::<u8>();
                                                                            let len49 = vec49.len();
                                                                            ::core::mem::forget(vec49);
                                                                            *base.add(12).cast::<usize>() = len49;
                                                                            *base.add(8).cast::<*mut u8>() = ptr49.cast_mut();
                                                                        }
                                                                        V133::Json(e) => {
                                                                            *base.add(0).cast::<u8>() = (18i32) as u8;
                                                                            let vec50 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr50 = vec50.as_ptr().cast::<u8>();
                                                                            let len50 = vec50.len();
                                                                            ::core::mem::forget(vec50);
                                                                            *base.add(12).cast::<usize>() = len50;
                                                                            *base.add(8).cast::<*mut u8>() = ptr50.cast_mut();
                                                                        }
                                                                        V133::Jsonb(e) => {
                                                                            *base.add(0).cast::<u8>() = (19i32) as u8;
                                                                            let vec51 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr51 = vec51.as_ptr().cast::<u8>();
                                                                            let len51 = vec51.len();
                                                                            ::core::mem::forget(vec51);
                                                                            *base.add(12).cast::<usize>() = len51;
                                                                            *base.add(8).cast::<*mut u8>() = ptr51.cast_mut();
                                                                        }
                                                                        V133::Jsonpath(e) => {
                                                                            *base.add(0).cast::<u8>() = (20i32) as u8;
                                                                            let vec52 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr52 = vec52.as_ptr().cast::<u8>();
                                                                            let len52 = vec52.len();
                                                                            ::core::mem::forget(vec52);
                                                                            *base.add(12).cast::<usize>() = len52;
                                                                            *base.add(8).cast::<*mut u8>() = ptr52.cast_mut();
                                                                        }
                                                                        V133::Xml(e) => {
                                                                            *base.add(0).cast::<u8>() = (21i32) as u8;
                                                                            let vec53 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr53 = vec53.as_ptr().cast::<u8>();
                                                                            let len53 = vec53.len();
                                                                            ::core::mem::forget(vec53);
                                                                            *base.add(12).cast::<usize>() = len53;
                                                                            *base.add(8).cast::<*mut u8>() = ptr53.cast_mut();
                                                                        }
                                                                        V133::Uuid(e) => {
                                                                            *base.add(0).cast::<u8>() = (22i32) as u8;
                                                                            let super::super::super::super::golem::rdbms::types::Uuid {
                                                                                high_bits: high_bits54,
                                                                                low_bits: low_bits54,
                                                                            } = e;
                                                                            *base.add(8).cast::<i64>() = _rt::as_i64(high_bits54);
                                                                            *base.add(16).cast::<i64>() = _rt::as_i64(low_bits54);
                                                                        }
                                                                        V133::Inet(e) => {
                                                                            *base.add(0).cast::<u8>() = (23i32) as u8;
                                                                            use super::super::super::super::golem::rdbms::types::IpAddress as V57;
                                                                            match e {
                                                                                V57::Ipv4(e) => {
                                                                                    *base.add(8).cast::<u8>() = (0i32) as u8;
                                                                                    let (t55_0, t55_1, t55_2, t55_3) = e;
                                                                                    *base.add(10).cast::<u8>() = (_rt::as_i32(t55_0)) as u8;
                                                                                    *base.add(11).cast::<u8>() = (_rt::as_i32(t55_1)) as u8;
                                                                                    *base.add(12).cast::<u8>() = (_rt::as_i32(t55_2)) as u8;
                                                                                    *base.add(13).cast::<u8>() = (_rt::as_i32(t55_3)) as u8;
                                                                                }
                                                                                V57::Ipv6(e) => {
                                                                                    *base.add(8).cast::<u8>() = (1i32) as u8;
                                                                                    let (
                                                                                        t56_0,
                                                                                        t56_1,
                                                                                        t56_2,
                                                                                        t56_3,
                                                                                        t56_4,
                                                                                        t56_5,
                                                                                        t56_6,
                                                                                        t56_7,
                                                                                    ) = e;
                                                                                    *base.add(10).cast::<u16>() = (_rt::as_i32(t56_0)) as u16;
                                                                                    *base.add(12).cast::<u16>() = (_rt::as_i32(t56_1)) as u16;
                                                                                    *base.add(14).cast::<u16>() = (_rt::as_i32(t56_2)) as u16;
                                                                                    *base.add(16).cast::<u16>() = (_rt::as_i32(t56_3)) as u16;
                                                                                    *base.add(18).cast::<u16>() = (_rt::as_i32(t56_4)) as u16;
                                                                                    *base.add(20).cast::<u16>() = (_rt::as_i32(t56_5)) as u16;
                                                                                    *base.add(22).cast::<u16>() = (_rt::as_i32(t56_6)) as u16;
                                                                                    *base.add(24).cast::<u16>() = (_rt::as_i32(t56_7)) as u16;
                                                                                }
                                                                            }
                                                                        }
                                                                        V133::Cidr(e) => {
                                                                            *base.add(0).cast::<u8>() = (24i32) as u8;
                                                                            use super::super::super::super::golem::rdbms::types::IpAddress as V60;
                                                                            match e {
                                                                                V60::Ipv4(e) => {
                                                                                    *base.add(8).cast::<u8>() = (0i32) as u8;
                                                                                    let (t58_0, t58_1, t58_2, t58_3) = e;
                                                                                    *base.add(10).cast::<u8>() = (_rt::as_i32(t58_0)) as u8;
                                                                                    *base.add(11).cast::<u8>() = (_rt::as_i32(t58_1)) as u8;
                                                                                    *base.add(12).cast::<u8>() = (_rt::as_i32(t58_2)) as u8;
                                                                                    *base.add(13).cast::<u8>() = (_rt::as_i32(t58_3)) as u8;
                                                                                }
                                                                                V60::Ipv6(e) => {
                                                                                    *base.add(8).cast::<u8>() = (1i32) as u8;
                                                                                    let (
                                                                                        t59_0,
                                                                                        t59_1,
                                                                                        t59_2,
                                                                                        t59_3,
                                                                                        t59_4,
                                                                                        t59_5,
                                                                                        t59_6,
                                                                                        t59_7,
                                                                                    ) = e;
                                                                                    *base.add(10).cast::<u16>() = (_rt::as_i32(t59_0)) as u16;
                                                                                    *base.add(12).cast::<u16>() = (_rt::as_i32(t59_1)) as u16;
                                                                                    *base.add(14).cast::<u16>() = (_rt::as_i32(t59_2)) as u16;
                                                                                    *base.add(16).cast::<u16>() = (_rt::as_i32(t59_3)) as u16;
                                                                                    *base.add(18).cast::<u16>() = (_rt::as_i32(t59_4)) as u16;
                                                                                    *base.add(20).cast::<u16>() = (_rt::as_i32(t59_5)) as u16;
                                                                                    *base.add(22).cast::<u16>() = (_rt::as_i32(t59_6)) as u16;
                                                                                    *base.add(24).cast::<u16>() = (_rt::as_i32(t59_7)) as u16;
                                                                                }
                                                                            }
                                                                        }
                                                                        V133::Macaddr(e) => {
                                                                            *base.add(0).cast::<u8>() = (25i32) as u8;
                                                                            let super::super::super::super::golem::rdbms::types::MacAddress {
                                                                                octets: octets61,
                                                                            } = e;
                                                                            let (t62_0, t62_1, t62_2, t62_3, t62_4, t62_5) = octets61;
                                                                            *base.add(8).cast::<u8>() = (_rt::as_i32(t62_0)) as u8;
                                                                            *base.add(9).cast::<u8>() = (_rt::as_i32(t62_1)) as u8;
                                                                            *base.add(10).cast::<u8>() = (_rt::as_i32(t62_2)) as u8;
                                                                            *base.add(11).cast::<u8>() = (_rt::as_i32(t62_3)) as u8;
                                                                            *base.add(12).cast::<u8>() = (_rt::as_i32(t62_4)) as u8;
                                                                            *base.add(13).cast::<u8>() = (_rt::as_i32(t62_5)) as u8;
                                                                        }
                                                                        V133::Bit(e) => {
                                                                            *base.add(0).cast::<u8>() = (26i32) as u8;
                                                                            let vec63 = e;
                                                                            let len63 = vec63.len();
                                                                            let layout63 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec63.len() * 1,
                                                                                1,
                                                                            );
                                                                            let result63 = if layout63.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout63).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout63);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec63.into_iter().enumerate() {
                                                                                let base = result63.add(i * 1);
                                                                                {
                                                                                    *base.add(0).cast::<u8>() = (match e {
                                                                                        true => 1,
                                                                                        false => 0,
                                                                                    }) as u8;
                                                                                }
                                                                            }
                                                                            *base.add(12).cast::<usize>() = len63;
                                                                            *base.add(8).cast::<*mut u8>() = result63;
                                                                        }
                                                                        V133::Varbit(e) => {
                                                                            *base.add(0).cast::<u8>() = (27i32) as u8;
                                                                            let vec64 = e;
                                                                            let len64 = vec64.len();
                                                                            let layout64 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec64.len() * 1,
                                                                                1,
                                                                            );
                                                                            let result64 = if layout64.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout64).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout64);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec64.into_iter().enumerate() {
                                                                                let base = result64.add(i * 1);
                                                                                {
                                                                                    *base.add(0).cast::<u8>() = (match e {
                                                                                        true => 1,
                                                                                        false => 0,
                                                                                    }) as u8;
                                                                                }
                                                                            }
                                                                            *base.add(12).cast::<usize>() = len64;
                                                                            *base.add(8).cast::<*mut u8>() = result64;
                                                                        }
                                                                        V133::Int4range(e) => {
                                                                            *base.add(0).cast::<u8>() = (28i32) as u8;
                                                                            let super::super::super::super::golem::rdbms::postgres::Int4range {
                                                                                start: start65,
                                                                                end: end65,
                                                                            } = e;
                                                                            use super::super::super::super::golem::rdbms::postgres::Int4bound as V66;
                                                                            match start65 {
                                                                                V66::Included(e) => {
                                                                                    *base.add(8).cast::<u8>() = (0i32) as u8;
                                                                                    *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                V66::Excluded(e) => {
                                                                                    *base.add(8).cast::<u8>() = (1i32) as u8;
                                                                                    *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                V66::Unbounded => {
                                                                                    *base.add(8).cast::<u8>() = (2i32) as u8;
                                                                                }
                                                                            }
                                                                            use super::super::super::super::golem::rdbms::postgres::Int4bound as V67;
                                                                            match end65 {
                                                                                V67::Included(e) => {
                                                                                    *base.add(16).cast::<u8>() = (0i32) as u8;
                                                                                    *base.add(20).cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                V67::Excluded(e) => {
                                                                                    *base.add(16).cast::<u8>() = (1i32) as u8;
                                                                                    *base.add(20).cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                V67::Unbounded => {
                                                                                    *base.add(16).cast::<u8>() = (2i32) as u8;
                                                                                }
                                                                            }
                                                                        }
                                                                        V133::Int8range(e) => {
                                                                            *base.add(0).cast::<u8>() = (29i32) as u8;
                                                                            let super::super::super::super::golem::rdbms::postgres::Int8range {
                                                                                start: start68,
                                                                                end: end68,
                                                                            } = e;
                                                                            use super::super::super::super::golem::rdbms::postgres::Int8bound as V69;
                                                                            match start68 {
                                                                                V69::Included(e) => {
                                                                                    *base.add(8).cast::<u8>() = (0i32) as u8;
                                                                                    *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                                                                }
                                                                                V69::Excluded(e) => {
                                                                                    *base.add(8).cast::<u8>() = (1i32) as u8;
                                                                                    *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                                                                }
                                                                                V69::Unbounded => {
                                                                                    *base.add(8).cast::<u8>() = (2i32) as u8;
                                                                                }
                                                                            }
                                                                            use super::super::super::super::golem::rdbms::postgres::Int8bound as V70;
                                                                            match end68 {
                                                                                V70::Included(e) => {
                                                                                    *base.add(24).cast::<u8>() = (0i32) as u8;
                                                                                    *base.add(32).cast::<i64>() = _rt::as_i64(e);
                                                                                }
                                                                                V70::Excluded(e) => {
                                                                                    *base.add(24).cast::<u8>() = (1i32) as u8;
                                                                                    *base.add(32).cast::<i64>() = _rt::as_i64(e);
                                                                                }
                                                                                V70::Unbounded => {
                                                                                    *base.add(24).cast::<u8>() = (2i32) as u8;
                                                                                }
                                                                            }
                                                                        }
                                                                        V133::Numrange(e) => {
                                                                            *base.add(0).cast::<u8>() = (30i32) as u8;
                                                                            let super::super::super::super::golem::rdbms::postgres::Numrange {
                                                                                start: start71,
                                                                                end: end71,
                                                                            } = e;
                                                                            use super::super::super::super::golem::rdbms::postgres::Numbound as V74;
                                                                            match start71 {
                                                                                V74::Included(e) => {
                                                                                    *base.add(8).cast::<u8>() = (0i32) as u8;
                                                                                    let vec72 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr72 = vec72.as_ptr().cast::<u8>();
                                                                                    let len72 = vec72.len();
                                                                                    ::core::mem::forget(vec72);
                                                                                    *base.add(16).cast::<usize>() = len72;
                                                                                    *base.add(12).cast::<*mut u8>() = ptr72.cast_mut();
                                                                                }
                                                                                V74::Excluded(e) => {
                                                                                    *base.add(8).cast::<u8>() = (1i32) as u8;
                                                                                    let vec73 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr73 = vec73.as_ptr().cast::<u8>();
                                                                                    let len73 = vec73.len();
                                                                                    ::core::mem::forget(vec73);
                                                                                    *base.add(16).cast::<usize>() = len73;
                                                                                    *base.add(12).cast::<*mut u8>() = ptr73.cast_mut();
                                                                                }
                                                                                V74::Unbounded => {
                                                                                    *base.add(8).cast::<u8>() = (2i32) as u8;
                                                                                }
                                                                            }
                                                                            use super::super::super::super::golem::rdbms::postgres::Numbound as V77;
                                                                            match end71 {
                                                                                V77::Included(e) => {
                                                                                    *base.add(20).cast::<u8>() = (0i32) as u8;
                                                                                    let vec75 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr75 = vec75.as_ptr().cast::<u8>();
                                                                                    let len75 = vec75.len();
                                                                                    ::core::mem::forget(vec75);
                                                                                    *base.add(28).cast::<usize>() = len75;
                                                                                    *base.add(24).cast::<*mut u8>() = ptr75.cast_mut();
                                                                                }
                                                                                V77::Excluded(e) => {
                                                                                    *base.add(20).cast::<u8>() = (1i32) as u8;
                                                                                    let vec76 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr76 = vec76.as_ptr().cast::<u8>();
                                                                                    let len76 = vec76.len();
                                                                                    ::core::mem::forget(vec76);
                                                                                    *base.add(28).cast::<usize>() = len76;
                                                                                    *base.add(24).cast::<*mut u8>() = ptr76.cast_mut();
                                                                                }
                                                                                V77::Unbounded => {
                                                                                    *base.add(20).cast::<u8>() = (2i32) as u8;
                                                                                }
                                                                            }
                                                                        }
                                                                        V133::Tsrange(e) => {
                                                                            *base.add(0).cast::<u8>() = (31i32) as u8;
                                                                            let super::super::super::super::golem::rdbms::postgres::Tsrange {
                                                                                start: start78,
                                                                                end: end78,
                                                                            } = e;
                                                                            use super::super::super::super::golem::rdbms::postgres::Tsbound as V85;
                                                                            match start78 {
                                                                                V85::Included(e) => {
                                                                                    *base.add(8).cast::<u8>() = (0i32) as u8;
                                                                                    let super::super::super::super::golem::rdbms::types::Timestamp {
                                                                                        date: date79,
                                                                                        time: time79,
                                                                                    } = e;
                                                                                    let super::super::super::super::golem::rdbms::types::Date {
                                                                                        year: year80,
                                                                                        month: month80,
                                                                                        day: day80,
                                                                                    } = date79;
                                                                                    *base.add(12).cast::<i32>() = _rt::as_i32(year80);
                                                                                    *base.add(16).cast::<u8>() = (_rt::as_i32(month80)) as u8;
                                                                                    *base.add(17).cast::<u8>() = (_rt::as_i32(day80)) as u8;
                                                                                    let super::super::super::super::golem::rdbms::types::Time {
                                                                                        hour: hour81,
                                                                                        minute: minute81,
                                                                                        second: second81,
                                                                                        nanosecond: nanosecond81,
                                                                                    } = time79;
                                                                                    *base.add(20).cast::<u8>() = (_rt::as_i32(hour81)) as u8;
                                                                                    *base.add(21).cast::<u8>() = (_rt::as_i32(minute81)) as u8;
                                                                                    *base.add(22).cast::<u8>() = (_rt::as_i32(second81)) as u8;
                                                                                    *base.add(24).cast::<i32>() = _rt::as_i32(nanosecond81);
                                                                                }
                                                                                V85::Excluded(e) => {
                                                                                    *base.add(8).cast::<u8>() = (1i32) as u8;
                                                                                    let super::super::super::super::golem::rdbms::types::Timestamp {
                                                                                        date: date82,
                                                                                        time: time82,
                                                                                    } = e;
                                                                                    let super::super::super::super::golem::rdbms::types::Date {
                                                                                        year: year83,
                                                                                        month: month83,
                                                                                        day: day83,
                                                                                    } = date82;
                                                                                    *base.add(12).cast::<i32>() = _rt::as_i32(year83);
                                                                                    *base.add(16).cast::<u8>() = (_rt::as_i32(month83)) as u8;
                                                                                    *base.add(17).cast::<u8>() = (_rt::as_i32(day83)) as u8;
                                                                                    let super::super::super::super::golem::rdbms::types::Time {
                                                                                        hour: hour84,
                                                                                        minute: minute84,
                                                                                        second: second84,
                                                                                        nanosecond: nanosecond84,
                                                                                    } = time82;
                                                                                    *base.add(20).cast::<u8>() = (_rt::as_i32(hour84)) as u8;
                                                                                    *base.add(21).cast::<u8>() = (_rt::as_i32(minute84)) as u8;
                                                                                    *base.add(22).cast::<u8>() = (_rt::as_i32(second84)) as u8;
                                                                                    *base.add(24).cast::<i32>() = _rt::as_i32(nanosecond84);
                                                                                }
                                                                                V85::Unbounded => {
                                                                                    *base.add(8).cast::<u8>() = (2i32) as u8;
                                                                                }
                                                                            }
                                                                            use super::super::super::super::golem::rdbms::postgres::Tsbound as V92;
                                                                            match end78 {
                                                                                V92::Included(e) => {
                                                                                    *base.add(28).cast::<u8>() = (0i32) as u8;
                                                                                    let super::super::super::super::golem::rdbms::types::Timestamp {
                                                                                        date: date86,
                                                                                        time: time86,
                                                                                    } = e;
                                                                                    let super::super::super::super::golem::rdbms::types::Date {
                                                                                        year: year87,
                                                                                        month: month87,
                                                                                        day: day87,
                                                                                    } = date86;
                                                                                    *base.add(32).cast::<i32>() = _rt::as_i32(year87);
                                                                                    *base.add(36).cast::<u8>() = (_rt::as_i32(month87)) as u8;
                                                                                    *base.add(37).cast::<u8>() = (_rt::as_i32(day87)) as u8;
                                                                                    let super::super::super::super::golem::rdbms::types::Time {
                                                                                        hour: hour88,
                                                                                        minute: minute88,
                                                                                        second: second88,
                                                                                        nanosecond: nanosecond88,
                                                                                    } = time86;
                                                                                    *base.add(40).cast::<u8>() = (_rt::as_i32(hour88)) as u8;
                                                                                    *base.add(41).cast::<u8>() = (_rt::as_i32(minute88)) as u8;
                                                                                    *base.add(42).cast::<u8>() = (_rt::as_i32(second88)) as u8;
                                                                                    *base.add(44).cast::<i32>() = _rt::as_i32(nanosecond88);
                                                                                }
                                                                                V92::Excluded(e) => {
                                                                                    *base.add(28).cast::<u8>() = (1i32) as u8;
                                                                                    let super::super::super::super::golem::rdbms::types::Timestamp {
                                                                                        date: date89,
                                                                                        time: time89,
                                                                                    } = e;
                                                                                    let super::super::super::super::golem::rdbms::types::Date {
                                                                                        year: year90,
                                                                                        month: month90,
                                                                                        day: day90,
                                                                                    } = date89;
                                                                                    *base.add(32).cast::<i32>() = _rt::as_i32(year90);
                                                                                    *base.add(36).cast::<u8>() = (_rt::as_i32(month90)) as u8;
                                                                                    *base.add(37).cast::<u8>() = (_rt::as_i32(day90)) as u8;
                                                                                    let super::super::super::super::golem::rdbms::types::Time {
                                                                                        hour: hour91,
                                                                                        minute: minute91,
                                                                                        second: second91,
                                                                                        nanosecond: nanosecond91,
                                                                                    } = time89;
                                                                                    *base.add(40).cast::<u8>() = (_rt::as_i32(hour91)) as u8;
                                                                                    *base.add(41).cast::<u8>() = (_rt::as_i32(minute91)) as u8;
                                                                                    *base.add(42).cast::<u8>() = (_rt::as_i32(second91)) as u8;
                                                                                    *base.add(44).cast::<i32>() = _rt::as_i32(nanosecond91);
                                                                                }
                                                                                V92::Unbounded => {
                                                                                    *base.add(28).cast::<u8>() = (2i32) as u8;
                                                                                }
                                                                            }
                                                                        }
                                                                        V133::Tstzrange(e) => {
                                                                            *base.add(0).cast::<u8>() = (32i32) as u8;
                                                                            let super::super::super::super::golem::rdbms::postgres::Tstzrange {
                                                                                start: start93,
                                                                                end: end93,
                                                                            } = e;
                                                                            use super::super::super::super::golem::rdbms::postgres::Tstzbound as V102;
                                                                            match start93 {
                                                                                V102::Included(e) => {
                                                                                    *base.add(8).cast::<u8>() = (0i32) as u8;
                                                                                    let super::super::super::super::golem::rdbms::types::Timestamptz {
                                                                                        timestamp: timestamp94,
                                                                                        offset: offset94,
                                                                                    } = e;
                                                                                    let super::super::super::super::golem::rdbms::types::Timestamp {
                                                                                        date: date95,
                                                                                        time: time95,
                                                                                    } = timestamp94;
                                                                                    let super::super::super::super::golem::rdbms::types::Date {
                                                                                        year: year96,
                                                                                        month: month96,
                                                                                        day: day96,
                                                                                    } = date95;
                                                                                    *base.add(12).cast::<i32>() = _rt::as_i32(year96);
                                                                                    *base.add(16).cast::<u8>() = (_rt::as_i32(month96)) as u8;
                                                                                    *base.add(17).cast::<u8>() = (_rt::as_i32(day96)) as u8;
                                                                                    let super::super::super::super::golem::rdbms::types::Time {
                                                                                        hour: hour97,
                                                                                        minute: minute97,
                                                                                        second: second97,
                                                                                        nanosecond: nanosecond97,
                                                                                    } = time95;
                                                                                    *base.add(20).cast::<u8>() = (_rt::as_i32(hour97)) as u8;
                                                                                    *base.add(21).cast::<u8>() = (_rt::as_i32(minute97)) as u8;
                                                                                    *base.add(22).cast::<u8>() = (_rt::as_i32(second97)) as u8;
                                                                                    *base.add(24).cast::<i32>() = _rt::as_i32(nanosecond97);
                                                                                    *base.add(28).cast::<i32>() = _rt::as_i32(offset94);
                                                                                }
                                                                                V102::Excluded(e) => {
                                                                                    *base.add(8).cast::<u8>() = (1i32) as u8;
                                                                                    let super::super::super::super::golem::rdbms::types::Timestamptz {
                                                                                        timestamp: timestamp98,
                                                                                        offset: offset98,
                                                                                    } = e;
                                                                                    let super::super::super::super::golem::rdbms::types::Timestamp {
                                                                                        date: date99,
                                                                                        time: time99,
                                                                                    } = timestamp98;
                                                                                    let super::super::super::super::golem::rdbms::types::Date {
                                                                                        year: year100,
                                                                                        month: month100,
                                                                                        day: day100,
                                                                                    } = date99;
                                                                                    *base.add(12).cast::<i32>() = _rt::as_i32(year100);
                                                                                    *base.add(16).cast::<u8>() = (_rt::as_i32(month100)) as u8;
                                                                                    *base.add(17).cast::<u8>() = (_rt::as_i32(day100)) as u8;
                                                                                    let super::super::super::super::golem::rdbms::types::Time {
                                                                                        hour: hour101,
                                                                                        minute: minute101,
                                                                                        second: second101,
                                                                                        nanosecond: nanosecond101,
                                                                                    } = time99;
                                                                                    *base.add(20).cast::<u8>() = (_rt::as_i32(hour101)) as u8;
                                                                                    *base.add(21).cast::<u8>() = (_rt::as_i32(minute101)) as u8;
                                                                                    *base.add(22).cast::<u8>() = (_rt::as_i32(second101)) as u8;
                                                                                    *base.add(24).cast::<i32>() = _rt::as_i32(nanosecond101);
                                                                                    *base.add(28).cast::<i32>() = _rt::as_i32(offset98);
                                                                                }
                                                                                V102::Unbounded => {
                                                                                    *base.add(8).cast::<u8>() = (2i32) as u8;
                                                                                }
                                                                            }
                                                                            use super::super::super::super::golem::rdbms::postgres::Tstzbound as V111;
                                                                            match end93 {
                                                                                V111::Included(e) => {
                                                                                    *base.add(32).cast::<u8>() = (0i32) as u8;
                                                                                    let super::super::super::super::golem::rdbms::types::Timestamptz {
                                                                                        timestamp: timestamp103,
                                                                                        offset: offset103,
                                                                                    } = e;
                                                                                    let super::super::super::super::golem::rdbms::types::Timestamp {
                                                                                        date: date104,
                                                                                        time: time104,
                                                                                    } = timestamp103;
                                                                                    let super::super::super::super::golem::rdbms::types::Date {
                                                                                        year: year105,
                                                                                        month: month105,
                                                                                        day: day105,
                                                                                    } = date104;
                                                                                    *base.add(36).cast::<i32>() = _rt::as_i32(year105);
                                                                                    *base.add(40).cast::<u8>() = (_rt::as_i32(month105)) as u8;
                                                                                    *base.add(41).cast::<u8>() = (_rt::as_i32(day105)) as u8;
                                                                                    let super::super::super::super::golem::rdbms::types::Time {
                                                                                        hour: hour106,
                                                                                        minute: minute106,
                                                                                        second: second106,
                                                                                        nanosecond: nanosecond106,
                                                                                    } = time104;
                                                                                    *base.add(44).cast::<u8>() = (_rt::as_i32(hour106)) as u8;
                                                                                    *base.add(45).cast::<u8>() = (_rt::as_i32(minute106)) as u8;
                                                                                    *base.add(46).cast::<u8>() = (_rt::as_i32(second106)) as u8;
                                                                                    *base.add(48).cast::<i32>() = _rt::as_i32(nanosecond106);
                                                                                    *base.add(52).cast::<i32>() = _rt::as_i32(offset103);
                                                                                }
                                                                                V111::Excluded(e) => {
                                                                                    *base.add(32).cast::<u8>() = (1i32) as u8;
                                                                                    let super::super::super::super::golem::rdbms::types::Timestamptz {
                                                                                        timestamp: timestamp107,
                                                                                        offset: offset107,
                                                                                    } = e;
                                                                                    let super::super::super::super::golem::rdbms::types::Timestamp {
                                                                                        date: date108,
                                                                                        time: time108,
                                                                                    } = timestamp107;
                                                                                    let super::super::super::super::golem::rdbms::types::Date {
                                                                                        year: year109,
                                                                                        month: month109,
                                                                                        day: day109,
                                                                                    } = date108;
                                                                                    *base.add(36).cast::<i32>() = _rt::as_i32(year109);
                                                                                    *base.add(40).cast::<u8>() = (_rt::as_i32(month109)) as u8;
                                                                                    *base.add(41).cast::<u8>() = (_rt::as_i32(day109)) as u8;
                                                                                    let super::super::super::super::golem::rdbms::types::Time {
                                                                                        hour: hour110,
                                                                                        minute: minute110,
                                                                                        second: second110,
                                                                                        nanosecond: nanosecond110,
                                                                                    } = time108;
                                                                                    *base.add(44).cast::<u8>() = (_rt::as_i32(hour110)) as u8;
                                                                                    *base.add(45).cast::<u8>() = (_rt::as_i32(minute110)) as u8;
                                                                                    *base.add(46).cast::<u8>() = (_rt::as_i32(second110)) as u8;
                                                                                    *base.add(48).cast::<i32>() = _rt::as_i32(nanosecond110);
                                                                                    *base.add(52).cast::<i32>() = _rt::as_i32(offset107);
                                                                                }
                                                                                V111::Unbounded => {
                                                                                    *base.add(32).cast::<u8>() = (2i32) as u8;
                                                                                }
                                                                            }
                                                                        }
                                                                        V133::Daterange(e) => {
                                                                            *base.add(0).cast::<u8>() = (33i32) as u8;
                                                                            let super::super::super::super::golem::rdbms::postgres::Daterange {
                                                                                start: start112,
                                                                                end: end112,
                                                                            } = e;
                                                                            use super::super::super::super::golem::rdbms::postgres::Datebound as V115;
                                                                            match start112 {
                                                                                V115::Included(e) => {
                                                                                    *base.add(8).cast::<u8>() = (0i32) as u8;
                                                                                    let super::super::super::super::golem::rdbms::types::Date {
                                                                                        year: year113,
                                                                                        month: month113,
                                                                                        day: day113,
                                                                                    } = e;
                                                                                    *base.add(12).cast::<i32>() = _rt::as_i32(year113);
                                                                                    *base.add(16).cast::<u8>() = (_rt::as_i32(month113)) as u8;
                                                                                    *base.add(17).cast::<u8>() = (_rt::as_i32(day113)) as u8;
                                                                                }
                                                                                V115::Excluded(e) => {
                                                                                    *base.add(8).cast::<u8>() = (1i32) as u8;
                                                                                    let super::super::super::super::golem::rdbms::types::Date {
                                                                                        year: year114,
                                                                                        month: month114,
                                                                                        day: day114,
                                                                                    } = e;
                                                                                    *base.add(12).cast::<i32>() = _rt::as_i32(year114);
                                                                                    *base.add(16).cast::<u8>() = (_rt::as_i32(month114)) as u8;
                                                                                    *base.add(17).cast::<u8>() = (_rt::as_i32(day114)) as u8;
                                                                                }
                                                                                V115::Unbounded => {
                                                                                    *base.add(8).cast::<u8>() = (2i32) as u8;
                                                                                }
                                                                            }
                                                                            use super::super::super::super::golem::rdbms::postgres::Datebound as V118;
                                                                            match end112 {
                                                                                V118::Included(e) => {
                                                                                    *base.add(20).cast::<u8>() = (0i32) as u8;
                                                                                    let super::super::super::super::golem::rdbms::types::Date {
                                                                                        year: year116,
                                                                                        month: month116,
                                                                                        day: day116,
                                                                                    } = e;
                                                                                    *base.add(24).cast::<i32>() = _rt::as_i32(year116);
                                                                                    *base.add(28).cast::<u8>() = (_rt::as_i32(month116)) as u8;
                                                                                    *base.add(29).cast::<u8>() = (_rt::as_i32(day116)) as u8;
                                                                                }
                                                                                V118::Excluded(e) => {
                                                                                    *base.add(20).cast::<u8>() = (1i32) as u8;
                                                                                    let super::super::super::super::golem::rdbms::types::Date {
                                                                                        year: year117,
                                                                                        month: month117,
                                                                                        day: day117,
                                                                                    } = e;
                                                                                    *base.add(24).cast::<i32>() = _rt::as_i32(year117);
                                                                                    *base.add(28).cast::<u8>() = (_rt::as_i32(month117)) as u8;
                                                                                    *base.add(29).cast::<u8>() = (_rt::as_i32(day117)) as u8;
                                                                                }
                                                                                V118::Unbounded => {
                                                                                    *base.add(20).cast::<u8>() = (2i32) as u8;
                                                                                }
                                                                            }
                                                                        }
                                                                        V133::Money(e) => {
                                                                            *base.add(0).cast::<u8>() = (34i32) as u8;
                                                                            *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                                        }
                                                                        V133::Oid(e) => {
                                                                            *base.add(0).cast::<u8>() = (35i32) as u8;
                                                                            *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V133::Enumeration(e) => {
                                                                            *base.add(0).cast::<u8>() = (36i32) as u8;
                                                                            let super::super::super::super::golem::rdbms::postgres::Enumeration {
                                                                                name: name119,
                                                                                value: value119,
                                                                            } = e;
                                                                            let vec120 = (name119.into_bytes()).into_boxed_slice();
                                                                            let ptr120 = vec120.as_ptr().cast::<u8>();
                                                                            let len120 = vec120.len();
                                                                            ::core::mem::forget(vec120);
                                                                            *base.add(12).cast::<usize>() = len120;
                                                                            *base.add(8).cast::<*mut u8>() = ptr120.cast_mut();
                                                                            let vec121 = (value119.into_bytes()).into_boxed_slice();
                                                                            let ptr121 = vec121.as_ptr().cast::<u8>();
                                                                            let len121 = vec121.len();
                                                                            ::core::mem::forget(vec121);
                                                                            *base.add(20).cast::<usize>() = len121;
                                                                            *base.add(16).cast::<*mut u8>() = ptr121.cast_mut();
                                                                        }
                                                                        V133::Composite(e) => {
                                                                            *base.add(0).cast::<u8>() = (37i32) as u8;
                                                                            let super::super::super::super::golem::rdbms::postgres::Composite {
                                                                                name: name122,
                                                                                values: values122,
                                                                            } = e;
                                                                            let vec123 = (name122.into_bytes()).into_boxed_slice();
                                                                            let ptr123 = vec123.as_ptr().cast::<u8>();
                                                                            let len123 = vec123.len();
                                                                            ::core::mem::forget(vec123);
                                                                            *base.add(12).cast::<usize>() = len123;
                                                                            *base.add(8).cast::<*mut u8>() = ptr123.cast_mut();
                                                                            let vec124 = values122;
                                                                            let len124 = vec124.len();
                                                                            let layout124 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec124.len() * 4,
                                                                                4,
                                                                            );
                                                                            let result124 = if layout124.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout124).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout124);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec124.into_iter().enumerate() {
                                                                                let base = result124.add(i * 4);
                                                                                {
                                                                                    *base.add(0).cast::<i32>() = (e).take_handle() as i32;
                                                                                }
                                                                            }
                                                                            *base.add(20).cast::<usize>() = len124;
                                                                            *base.add(16).cast::<*mut u8>() = result124;
                                                                        }
                                                                        V133::Domain(e) => {
                                                                            *base.add(0).cast::<u8>() = (38i32) as u8;
                                                                            let super::super::super::super::golem::rdbms::postgres::Domain {
                                                                                name: name125,
                                                                                value: value125,
                                                                            } = e;
                                                                            let vec126 = (name125.into_bytes()).into_boxed_slice();
                                                                            let ptr126 = vec126.as_ptr().cast::<u8>();
                                                                            let len126 = vec126.len();
                                                                            ::core::mem::forget(vec126);
                                                                            *base.add(12).cast::<usize>() = len126;
                                                                            *base.add(8).cast::<*mut u8>() = ptr126.cast_mut();
                                                                            *base.add(16).cast::<i32>() = (value125).take_handle()
                                                                                as i32;
                                                                        }
                                                                        V133::Array(e) => {
                                                                            *base.add(0).cast::<u8>() = (39i32) as u8;
                                                                            let vec127 = e;
                                                                            let len127 = vec127.len();
                                                                            let layout127 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec127.len() * 4,
                                                                                4,
                                                                            );
                                                                            let result127 = if layout127.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout127).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout127);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec127.into_iter().enumerate() {
                                                                                let base = result127.add(i * 4);
                                                                                {
                                                                                    *base.add(0).cast::<i32>() = (e).take_handle() as i32;
                                                                                }
                                                                            }
                                                                            *base.add(12).cast::<usize>() = len127;
                                                                            *base.add(8).cast::<*mut u8>() = result127;
                                                                        }
                                                                        V133::Range(e) => {
                                                                            *base.add(0).cast::<u8>() = (40i32) as u8;
                                                                            let super::super::super::super::golem::rdbms::postgres::Range {
                                                                                name: name128,
                                                                                value: value128,
                                                                            } = e;
                                                                            let vec129 = (name128.into_bytes()).into_boxed_slice();
                                                                            let ptr129 = vec129.as_ptr().cast::<u8>();
                                                                            let len129 = vec129.len();
                                                                            ::core::mem::forget(vec129);
                                                                            *base.add(12).cast::<usize>() = len129;
                                                                            *base.add(8).cast::<*mut u8>() = ptr129.cast_mut();
                                                                            let super::super::super::super::golem::rdbms::postgres::ValuesRange {
                                                                                start: start130,
                                                                                end: end130,
                                                                            } = value128;
                                                                            use super::super::super::super::golem::rdbms::postgres::ValueBound as V131;
                                                                            match start130 {
                                                                                V131::Included(e) => {
                                                                                    *base.add(16).cast::<u8>() = (0i32) as u8;
                                                                                    *base.add(20).cast::<i32>() = (e).take_handle() as i32;
                                                                                }
                                                                                V131::Excluded(e) => {
                                                                                    *base.add(16).cast::<u8>() = (1i32) as u8;
                                                                                    *base.add(20).cast::<i32>() = (e).take_handle() as i32;
                                                                                }
                                                                                V131::Unbounded => {
                                                                                    *base.add(16).cast::<u8>() = (2i32) as u8;
                                                                                }
                                                                            }
                                                                            use super::super::super::super::golem::rdbms::postgres::ValueBound as V132;
                                                                            match end130 {
                                                                                V132::Included(e) => {
                                                                                    *base.add(24).cast::<u8>() = (0i32) as u8;
                                                                                    *base.add(28).cast::<i32>() = (e).take_handle() as i32;
                                                                                }
                                                                                V132::Excluded(e) => {
                                                                                    *base.add(24).cast::<u8>() = (1i32) as u8;
                                                                                    *base.add(28).cast::<i32>() = (e).take_handle() as i32;
                                                                                }
                                                                                V132::Unbounded => {
                                                                                    *base.add(24).cast::<u8>() = (2i32) as u8;
                                                                                }
                                                                            }
                                                                        }
                                                                        V133::Null => {
                                                                            *base.add(0).cast::<u8>() = (41i32) as u8;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            *base.add(4).cast::<usize>() = len134;
                                                            *base.add(0).cast::<*mut u8>() = result134;
                                                        }
                                                    }
                                                    *base.add(28).cast::<usize>() = len135;
                                                    *base.add(24).cast::<*mut u8>() = result135;
                                                }
                                            }
                                        }
                                        Err(e) => {
                                            *base.add(0).cast::<u8>() = (1i32) as u8;
                                            let vec136 = (e.into_bytes()).into_boxed_slice();
                                            let ptr136 = vec136.as_ptr().cast::<u8>();
                                            let len136 = vec136.len();
                                            ::core::mem::forget(vec136);
                                            *base.add(12).cast::<usize>() = len136;
                                            *base.add(8).cast::<*mut u8>() = ptr136.cast_mut();
                                        }
                                    };
                                }
                            }
                            *ptr14.add(8).cast::<usize>() = len137;
                            *ptr14.add(4).cast::<*mut u8>() = result137;
                        }
                        Err(e) => {
                            *ptr14.add(0).cast::<u8>() = (1i32) as u8;
                            let vec138 = (e.into_bytes()).into_boxed_slice();
                            let ptr138 = vec138.as_ptr().cast::<u8>();
                            let len138 = vec138.len();
                            ::core::mem::forget(vec138);
                            *ptr14.add(8).cast::<usize>() = len138;
                            *ptr14.add(4).cast::<*mut u8>() = ptr138.cast_mut();
                        }
                    };
                    ptr14
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_postgres_transaction<T: Guest>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            let base86 = l1;
                            let len86 = l2;
                            for i in 0..len86 {
                                let base = base86.add(i * 32);
                                {
                                    let l3 = i32::from(*base.add(0).cast::<u8>());
                                    match l3 {
                                        0 => {
                                            let l4 = i32::from(*base.add(8).cast::<u8>());
                                            match l4 {
                                                0 => {}
                                                _ => {
                                                    let l5 = *base.add(16).cast::<*mut u8>();
                                                    let l6 = *base.add(20).cast::<usize>();
                                                    let base25 = l5;
                                                    let len25 = l6;
                                                    for i in 0..len25 {
                                                        let base = base25.add(i * 48);
                                                        {
                                                            let l7 = *base.add(8).cast::<*mut u8>();
                                                            let l8 = *base.add(12).cast::<usize>();
                                                            _rt::cabi_dealloc(l7, l8, 1);
                                                            let l9 = i32::from(*base.add(16).cast::<u8>());
                                                            match l9 {
                                                                0 => {}
                                                                1 => {}
                                                                2 => {}
                                                                3 => {}
                                                                4 => {}
                                                                5 => {}
                                                                6 => {}
                                                                7 => {}
                                                                8 => {}
                                                                9 => {}
                                                                10 => {}
                                                                11 => {}
                                                                12 => {}
                                                                13 => {}
                                                                14 => {}
                                                                15 => {}
                                                                16 => {}
                                                                17 => {}
                                                                18 => {}
                                                                19 => {}
                                                                20 => {}
                                                                21 => {}
                                                                22 => {}
                                                                23 => {}
                                                                24 => {}
                                                                25 => {}
                                                                26 => {}
                                                                27 => {}
                                                                28 => {}
                                                                29 => {}
                                                                30 => {}
                                                                31 => {}
                                                                32 => {}
                                                                33 => {}
                                                                34 => {}
                                                                35 => {}
                                                                36 => {
                                                                    let l10 = *base.add(20).cast::<*mut u8>();
                                                                    let l11 = *base.add(24).cast::<usize>();
                                                                    _rt::cabi_dealloc(l10, l11, 1);
                                                                }
                                                                37 => {
                                                                    let l12 = *base.add(20).cast::<*mut u8>();
                                                                    let l13 = *base.add(24).cast::<usize>();
                                                                    _rt::cabi_dealloc(l12, l13, 1);
                                                                    let l14 = *base.add(28).cast::<*mut u8>();
                                                                    let l15 = *base.add(32).cast::<usize>();
                                                                    let base18 = l14;
                                                                    let len18 = l15;
                                                                    for i in 0..len18 {
                                                                        let base = base18.add(i * 12);
                                                                        {
                                                                            let l16 = *base.add(0).cast::<*mut u8>();
                                                                            let l17 = *base.add(4).cast::<usize>();
                                                                            _rt::cabi_dealloc(l16, l17, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(base18, len18 * 12, 4);
                                                                }
                                                                38 => {
                                                                    let l19 = *base.add(20).cast::<*mut u8>();
                                                                    let l20 = *base.add(24).cast::<usize>();
                                                                    _rt::cabi_dealloc(l19, l20, 1);
                                                                }
                                                                39 => {}
                                                                _ => {
                                                                    let l21 = *base.add(20).cast::<*mut u8>();
                                                                    let l22 = *base.add(24).cast::<usize>();
                                                                    _rt::cabi_dealloc(l21, l22, 1);
                                                                }
                                                            }
                                                            let l23 = *base.add(36).cast::<*mut u8>();
                                                            let l24 = *base.add(40).cast::<usize>();
                                                            _rt::cabi_dealloc(l23, l24, 1);
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(base25, len25 * 48, 8);
                                                    let l26 = *base.add(24).cast::<*mut u8>();
                                                    let l27 = *base.add(28).cast::<usize>();
                                                    let base83 = l26;
                                                    let len83 = l27;
                                                    for i in 0..len83 {
                                                        let base = base83.add(i * 8);
                                                        {
                                                            let l28 = *base.add(0).cast::<*mut u8>();
                                                            let l29 = *base.add(4).cast::<usize>();
                                                            let base82 = l28;
                                                            let len82 = l29;
                                                            for i in 0..len82 {
                                                                let base = base82.add(i * 56);
                                                                {
                                                                    let l30 = i32::from(*base.add(0).cast::<u8>());
                                                                    match l30 {
                                                                        0 => {}
                                                                        1 => {}
                                                                        2 => {}
                                                                        3 => {}
                                                                        4 => {}
                                                                        5 => {}
                                                                        6 => {
                                                                            let l31 = *base.add(8).cast::<*mut u8>();
                                                                            let l32 = *base.add(12).cast::<usize>();
                                                                            _rt::cabi_dealloc(l31, l32, 1);
                                                                        }
                                                                        7 => {}
                                                                        8 => {
                                                                            let l33 = *base.add(8).cast::<*mut u8>();
                                                                            let l34 = *base.add(12).cast::<usize>();
                                                                            _rt::cabi_dealloc(l33, l34, 1);
                                                                        }
                                                                        9 => {
                                                                            let l35 = *base.add(8).cast::<*mut u8>();
                                                                            let l36 = *base.add(12).cast::<usize>();
                                                                            _rt::cabi_dealloc(l35, l36, 1);
                                                                        }
                                                                        10 => {
                                                                            let l37 = *base.add(8).cast::<*mut u8>();
                                                                            let l38 = *base.add(12).cast::<usize>();
                                                                            _rt::cabi_dealloc(l37, l38, 1);
                                                                        }
                                                                        11 => {}
                                                                        12 => {}
                                                                        13 => {}
                                                                        14 => {}
                                                                        15 => {}
                                                                        16 => {}
                                                                        17 => {
                                                                            let l39 = *base.add(8).cast::<*mut u8>();
                                                                            let l40 = *base.add(12).cast::<usize>();
                                                                            let base41 = l39;
                                                                            let len41 = l40;
                                                                            _rt::cabi_dealloc(base41, len41 * 1, 1);
                                                                        }
                                                                        18 => {
                                                                            let l42 = *base.add(8).cast::<*mut u8>();
                                                                            let l43 = *base.add(12).cast::<usize>();
                                                                            _rt::cabi_dealloc(l42, l43, 1);
                                                                        }
                                                                        19 => {
                                                                            let l44 = *base.add(8).cast::<*mut u8>();
                                                                            let l45 = *base.add(12).cast::<usize>();
                                                                            _rt::cabi_dealloc(l44, l45, 1);
                                                                        }
                                                                        20 => {
                                                                            let l46 = *base.add(8).cast::<*mut u8>();
                                                                            let l47 = *base.add(12).cast::<usize>();
                                                                            _rt::cabi_dealloc(l46, l47, 1);
                                                                        }
                                                                        21 => {
                                                                            let l48 = *base.add(8).cast::<*mut u8>();
                                                                            let l49 = *base.add(12).cast::<usize>();
                                                                            _rt::cabi_dealloc(l48, l49, 1);
                                                                        }
                                                                        22 => {}
                                                                        23 => {}
                                                                        24 => {}
                                                                        25 => {}
                                                                        26 => {
                                                                            let l50 = *base.add(8).cast::<*mut u8>();
                                                                            let l51 = *base.add(12).cast::<usize>();
                                                                            let base52 = l50;
                                                                            let len52 = l51;
                                                                            _rt::cabi_dealloc(base52, len52 * 1, 1);
                                                                        }
                                                                        27 => {
                                                                            let l53 = *base.add(8).cast::<*mut u8>();
                                                                            let l54 = *base.add(12).cast::<usize>();
                                                                            let base55 = l53;
                                                                            let len55 = l54;
                                                                            _rt::cabi_dealloc(base55, len55 * 1, 1);
                                                                        }
                                                                        28 => {}
                                                                        29 => {}
                                                                        30 => {
                                                                            let l56 = i32::from(*base.add(8).cast::<u8>());
                                                                            match l56 {
                                                                                0 => {
                                                                                    let l57 = *base.add(12).cast::<*mut u8>();
                                                                                    let l58 = *base.add(16).cast::<usize>();
                                                                                    _rt::cabi_dealloc(l57, l58, 1);
                                                                                }
                                                                                1 => {
                                                                                    let l59 = *base.add(12).cast::<*mut u8>();
                                                                                    let l60 = *base.add(16).cast::<usize>();
                                                                                    _rt::cabi_dealloc(l59, l60, 1);
                                                                                }
                                                                                _ => {}
                                                                            }
                                                                            let l61 = i32::from(*base.add(20).cast::<u8>());
                                                                            match l61 {
                                                                                0 => {
                                                                                    let l62 = *base.add(24).cast::<*mut u8>();
                                                                                    let l63 = *base.add(28).cast::<usize>();
                                                                                    _rt::cabi_dealloc(l62, l63, 1);
                                                                                }
                                                                                1 => {
                                                                                    let l64 = *base.add(24).cast::<*mut u8>();
                                                                                    let l65 = *base.add(28).cast::<usize>();
                                                                                    _rt::cabi_dealloc(l64, l65, 1);
                                                                                }
                                                                                _ => {}
                                                                            }
                                                                        }
                                                                        31 => {}
                                                                        32 => {}
                                                                        33 => {}
                                                                        34 => {}
                                                                        35 => {}
                                                                        36 => {
                                                                            let l66 = *base.add(8).cast::<*mut u8>();
                                                                            let l67 = *base.add(12).cast::<usize>();
                                                                            _rt::cabi_dealloc(l66, l67, 1);
                                                                            let l68 = *base.add(16).cast::<*mut u8>();
                                                                            let l69 = *base.add(20).cast::<usize>();
                                                                            _rt::cabi_dealloc(l68, l69, 1);
                                                                        }
                                                                        37 => {
                                                                            let l70 = *base.add(8).cast::<*mut u8>();
                                                                            let l71 = *base.add(12).cast::<usize>();
                                                                            _rt::cabi_dealloc(l70, l71, 1);
                                                                            let l72 = *base.add(16).cast::<*mut u8>();
                                                                            let l73 = *base.add(20).cast::<usize>();
                                                                            let base74 = l72;
                                                                            let len74 = l73;
                                                                            _rt::cabi_dealloc(base74, len74 * 4, 4);
                                                                        }
                                                                        38 => {
                                                                            let l75 = *base.add(8).cast::<*mut u8>();
                                                                            let l76 = *base.add(12).cast::<usize>();
                                                                            _rt::cabi_dealloc(l75, l76, 1);
                                                                        }
                                                                        39 => {
                                                                            let l77 = *base.add(8).cast::<*mut u8>();
                                                                            let l78 = *base.add(12).cast::<usize>();
                                                                            let base79 = l77;
                                                                            let len79 = l78;
                                                                            _rt::cabi_dealloc(base79, len79 * 4, 4);
                                                                        }
                                                                        40 => {
                                                                            let l80 = *base.add(8).cast::<*mut u8>();
                                                                            let l81 = *base.add(12).cast::<usize>();
                                                                            _rt::cabi_dealloc(l80, l81, 1);
                                                                        }
                                                                        _ => {}
                                                                    }
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(base82, len82 * 56, 8);
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(base83, len83 * 8, 4);
                                                }
                                            }
                                        }
                                        _ => {
                                            let l84 = *base.add(8).cast::<*mut u8>();
                                            let l85 = *base.add(12).cast::<usize>();
                                            _rt::cabi_dealloc(l84, l85, 1);
                                        }
                                    }
                                }
                            }
                            _rt::cabi_dealloc(base86, len86 * 32, 8);
                        }
                        _ => {
                            let l87 = *arg0.add(4).cast::<*mut u8>();
                            let l88 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l87, l88, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_postgres_executions_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let base12 = arg0;
                    let len12 = arg1;
                    let mut result12 = _rt::Vec::with_capacity(len12);
                    for i in 0..len12 {
                        let base = base12.add(i * 40);
                        let e12 = {
                            let l0 = *base.add(0).cast::<*mut u8>();
                            let l1 = *base.add(4).cast::<usize>();
                            let len2 = l1;
                            let bytes2 = _rt::Vec::from_raw_parts(l0.cast(), len2, len2);
                            let l3 = *base.add(8).cast::<*mut u8>();
                            let l4 = *base.add(12).cast::<usize>();
                            let base8 = l3;
                            let len8 = l4;
                            let mut result8 = _rt::Vec::with_capacity(len8);
                            for i in 0..len8 {
                                let base = base8.add(i * 8);
                                let e8 = {
                                    let l5 = *base.add(0).cast::<*mut u8>();
                                    let l6 = *base.add(4).cast::<usize>();
                                    let len7 = l6;
                                    let bytes7 = _rt::Vec::from_raw_parts(
                                        l5.cast(),
                                        len7,
                                        len7,
                                    );
                                    _rt::string_lift(bytes7)
                                };
                                result8.push(e8);
                            }
                            _rt::cabi_dealloc(base8, len8 * 8, 4);
                            let l9 = i32::from(*base.add(16).cast::<u8>());
                            let l10 = i32::from(*base.add(24).cast::<u8>());
                            Statement {
                                statement: _rt::string_lift(bytes2),
                                params: result8,
                                action: StatementAction::_lift(l9 as u8),
                                sleep: match l10 {
                                    0 => None,
                                    1 => {
                                        let e = {
                                            let l11 = *base.add(32).cast::<i64>();
                                            l11 as u64
                                        };
                                        Some(e)
                                    }
                                    _ => _rt::invalid_enum_discriminant(),
                                },
                            }
                        };
                        result12.push(e12);
                    }
                    _rt::cabi_dealloc(base12, len12 * 40, 8);
                    let result13 = T::postgres_executions(result12);
                    let ptr14 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result13 {
                        Ok(e) => {
                            *ptr14.add(0).cast::<u8>() = (0i32) as u8;
                            let vec137 = e;
                            let len137 = vec137.len();
                            let layout137 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec137.len() * 32,
                                8,
                            );
                            let result137 = if layout137.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout137).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout137);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec137.into_iter().enumerate() {
                                let base = result137.add(i * 32);
                                {
                                    match e {
                                        Ok(e) => {
                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                            match e {
                                                PostgresResult::Execute(e) => {
                                                    *base.add(8).cast::<u8>() = (0i32) as u8;
                                                    *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                                }
                                                PostgresResult::Query(e) => {
                                                    *base.add(8).cast::<u8>() = (1i32) as u8;
                                                    let super::super::super::super::golem::rdbms::postgres::DbResult {
                                                        columns: columns15,
                                                        rows: rows15,
                                                    } = e;
                                                    let vec31 = columns15;
                                                    let len31 = vec31.len();
                                                    let layout31 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec31.len() * 48,
                                                        8,
                                                    );
                                                    let result31 = if layout31.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout31).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout31);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec31.into_iter().enumerate() {
                                                        let base = result31.add(i * 48);
                                                        {
                                                            let super::super::super::super::golem::rdbms::postgres::DbColumn {
                                                                ordinal: ordinal16,
                                                                name: name16,
                                                                db_type: db_type16,
                                                                db_type_name: db_type_name16,
                                                            } = e;
                                                            *base.add(0).cast::<i64>() = _rt::as_i64(ordinal16);
                                                            let vec17 = (name16.into_bytes()).into_boxed_slice();
                                                            let ptr17 = vec17.as_ptr().cast::<u8>();
                                                            let len17 = vec17.len();
                                                            ::core::mem::forget(vec17);
                                                            *base.add(12).cast::<usize>() = len17;
                                                            *base.add(8).cast::<*mut u8>() = ptr17.cast_mut();
                                                            use super::super::super::super::golem::rdbms::postgres::DbColumnType as V29;
                                                            match db_type16 {
                                                                V29::Character => {
                                                                    *base.add(16).cast::<u8>() = (0i32) as u8;
                                                                }
                                                                V29::Int2 => {
                                                                    *base.add(16).cast::<u8>() = (1i32) as u8;
                                                                }
                                                                V29::Int4 => {
                                                                    *base.add(16).cast::<u8>() = (2i32) as u8;
                                                                }
                                                                V29::Int8 => {
                                                                    *base.add(16).cast::<u8>() = (3i32) as u8;
                                                                }
                                                                V29::Float4 => {
                                                                    *base.add(16).cast::<u8>() = (4i32) as u8;
                                                                }
                                                                V29::Float8 => {
                                                                    *base.add(16).cast::<u8>() = (5i32) as u8;
                                                                }
                                                                V29::Numeric => {
                                                                    *base.add(16).cast::<u8>() = (6i32) as u8;
                                                                }
                                                                V29::Boolean => {
                                                                    *base.add(16).cast::<u8>() = (7i32) as u8;
                                                                }
                                                                V29::Text => {
                                                                    *base.add(16).cast::<u8>() = (8i32) as u8;
                                                                }
                                                                V29::Varchar => {
                                                                    *base.add(16).cast::<u8>() = (9i32) as u8;
                                                                }
                                                                V29::Bpchar => {
                                                                    *base.add(16).cast::<u8>() = (10i32) as u8;
                                                                }
                                                                V29::Timestamp => {
                                                                    *base.add(16).cast::<u8>() = (11i32) as u8;
                                                                }
                                                                V29::Timestamptz => {
                                                                    *base.add(16).cast::<u8>() = (12i32) as u8;
                                                                }
                                                                V29::Date => {
                                                                    *base.add(16).cast::<u8>() = (13i32) as u8;
                                                                }
                                                                V29::Time => {
                                                                    *base.add(16).cast::<u8>() = (14i32) as u8;
                                                                }
                                                                V29::Timetz => {
                                                                    *base.add(16).cast::<u8>() = (15i32) as u8;
                                                                }
                                                                V29::Interval => {
                                                                    *base.add(16).cast::<u8>() = (16i32) as u8;
                                                                }
                                                                V29::Bytea => {
                                                                    *base.add(16).cast::<u8>() = (17i32) as u8;
                                                                }
                                                                V29::Uuid => {
                                                                    *base.add(16).cast::<u8>() = (18i32) as u8;
                                                                }
                                                                V29::Xml => {
                                                                    *base.add(16).cast::<u8>() = (19i32) as u8;
                                                                }
                                                                V29::Json => {
                                                                    *base.add(16).cast::<u8>() = (20i32) as u8;
                                                                }
                                                                V29::Jsonb => {
                                                                    *base.add(16).cast::<u8>() = (21i32) as u8;
                                                                }
                                                                V29::Jsonpath => {
                                                                    *base.add(16).cast::<u8>() = (22i32) as u8;
                                                                }
                                                                V29::Inet => {
                                                                    *base.add(16).cast::<u8>() = (23i32) as u8;
                                                                }
                                                                V29::Cidr => {
                                                                    *base.add(16).cast::<u8>() = (24i32) as u8;
                                                                }
                                                                V29::Macaddr => {
                                                                    *base.add(16).cast::<u8>() = (25i32) as u8;
                                                                }
                                                                V29::Bit => {
                                                                    *base.add(16).cast::<u8>() = (26i32) as u8;
                                                                }
                                                                V29::Varbit => {
                                                                    *base.add(16).cast::<u8>() = (27i32) as u8;
                                                                }
                                                                V29::Int4range => {
                                                                    *base.add(16).cast::<u8>() = (28i32) as u8;
                                                                }
                                                                V29::Int8range => {
                                                                    *base.add(16).cast::<u8>() = (29i32) as u8;
                                                                }
                                                                V29::Numrange => {
                                                                    *base.add(16).cast::<u8>() = (30i32) as u8;
                                                                }
                                                                V29::Tsrange => {
                                                                    *base.add(16).cast::<u8>() = (31i32) as u8;
                                                                }
                                                                V29::Tstzrange => {
                                                                    *base.add(16).cast::<u8>() = (32i32) as u8;
                                                                }
                                                                V29::Daterange => {
                                                                    *base.add(16).cast::<u8>() = (33i32) as u8;
                                                                }
                                                                V29::Money => {
                                                                    *base.add(16).cast::<u8>() = (34i32) as u8;
                                                                }
                                                                V29::Oid => {
                                                                    *base.add(16).cast::<u8>() = (35i32) as u8;
                                                                }
                                                                V29::Enumeration(e) => {
                                                                    *base.add(16).cast::<u8>() = (36i32) as u8;
                                                                    let super::super::super::super::golem::rdbms::postgres::EnumerationType {
                                                                        name: name18,
                                                                    } = e;
                                                                    let vec19 = (name18.into_bytes()).into_boxed_slice();
                                                                    let ptr19 = vec19.as_ptr().cast::<u8>();
                                                                    let len19 = vec19.len();
                                                                    ::core::mem::forget(vec19);
                                                                    *base.add(24).cast::<usize>() = len19;
                                                                    *base.add(20).cast::<*mut u8>() = ptr19.cast_mut();
                                                                }
                                                                V29::Composite(e) => {
                                                                    *base.add(16).cast::<u8>() = (37i32) as u8;
                                                                    let super::super::super::super::golem::rdbms::postgres::CompositeType {
                                                                        name: name20,
                                                                        attributes: attributes20,
                                                                    } = e;
                                                                    let vec21 = (name20.into_bytes()).into_boxed_slice();
                                                                    let ptr21 = vec21.as_ptr().cast::<u8>();
                                                                    let len21 = vec21.len();
                                                                    ::core::mem::forget(vec21);
                                                                    *base.add(24).cast::<usize>() = len21;
                                                                    *base.add(20).cast::<*mut u8>() = ptr21.cast_mut();
                                                                    let vec24 = attributes20;
                                                                    let len24 = vec24.len();
                                                                    let layout24 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec24.len() * 12,
                                                                        4,
                                                                    );
                                                                    let result24 = if layout24.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout24).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout24);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec24.into_iter().enumerate() {
                                                                        let base = result24.add(i * 12);
                                                                        {
                                                                            let (t22_0, t22_1) = e;
                                                                            let vec23 = (t22_0.into_bytes()).into_boxed_slice();
                                                                            let ptr23 = vec23.as_ptr().cast::<u8>();
                                                                            let len23 = vec23.len();
                                                                            ::core::mem::forget(vec23);
                                                                            *base.add(4).cast::<usize>() = len23;
                                                                            *base.add(0).cast::<*mut u8>() = ptr23.cast_mut();
                                                                            *base.add(8).cast::<i32>() = (t22_1).take_handle() as i32;
                                                                        }
                                                                    }
                                                                    *base.add(32).cast::<usize>() = len24;
                                                                    *base.add(28).cast::<*mut u8>() = result24;
                                                                }
                                                                V29::Domain(e) => {
                                                                    *base.add(16).cast::<u8>() = (38i32) as u8;
                                                                    let super::super::super::super::golem::rdbms::postgres::DomainType {
                                                                        name: name25,
                                                                        base_type: base_type25,
                                                                    } = e;
                                                                    let vec26 = (name25.into_bytes()).into_boxed_slice();
                                                                    let ptr26 = vec26.as_ptr().cast::<u8>();
                                                                    let len26 = vec26.len();
                                                                    ::core::mem::forget(vec26);
                                                                    *base.add(24).cast::<usize>() = len26;
                                                                    *base.add(20).cast::<*mut u8>() = ptr26.cast_mut();
                                                                    *base.add(28).cast::<i32>() = (base_type25).take_handle()
                                                                        as i32;
                                                                }
                                                                V29::Array(e) => {
                                                                    *base.add(16).cast::<u8>() = (39i32) as u8;
                                                                    *base.add(20).cast::<i32>() = (e).take_handle() as i32;
                                                                }
                                                                V29::Range(e) => {
                                                                    *base.add(16).cast::<u8>() = (40i32) as u8;
                                                                    let super::super::super::super::golem::rdbms::postgres::RangeType {
                                                                        name: name27,
                                                                        base_type: base_type27,
                                                                    } = e;
                                                                    let vec28 = (name27.into_bytes()).into_boxed_slice();
                                                                    let ptr28 = vec28.as_ptr().cast::<u8>();
                                                                    let len28 = vec28.len();
                                                                    ::core::mem::forget(vec28);
                                                                    *base.add(24).cast::<usize>() = len28;
                                                                    *base.add(20).cast::<*mut u8>() = ptr28.cast_mut();
                                                                    *base.add(28).cast::<i32>() = (base_type27).take_handle()
                                                                        as i32;
                                                                }
                                                            }
                                                            let vec30 = (db_type_name16.into_bytes())
                                                                .into_boxed_slice();
                                                            let ptr30 = vec30.as_ptr().cast::<u8>();
                                                            let len30 = vec30.len();
                                                            ::core::mem::forget(vec30);
                                                            *base.add(40).cast::<usize>() = len30;
                                                            *base.add(36).cast::<*mut u8>() = ptr30.cast_mut();
                                                        }
                                                    }
                                                    *base.add(20).cast::<usize>() = len31;
                                                    *base.add(16).cast::<*mut u8>() = result31;
                                                    let vec135 = rows15;
                                                    let len135 = vec135.len();
                                                    let layout135 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec135.len() * 8,
                                                        4,
                                                    );
                                                    let result135 = if layout135.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout135).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout135);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec135.into_iter().enumerate() {
                                                        let base = result135.add(i * 8);
                                                        {
                                                            let super::super::super::super::golem::rdbms::postgres::DbRow {
                                                                values: values32,
                                                            } = e;
                                                            let vec134 = values32;
                                                            let len134 = vec134.len();
                                                            let layout134 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec134.len() * 56,
                                                                8,
                                                            );
                                                            let result134 = if layout134.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout134).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout134);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec134.into_iter().enumerate() {
                                                                let base = result134.add(i * 56);
                                                                {
                                                                    use super::super::super::super::golem::rdbms::postgres::DbValue as V133;
                                                                    match e {
                                                                        V133::Character(e) => {
                                                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                            *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                                                        }
                                                                        V133::Int2(e) => {
                                                                            *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                            *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                                                        }
                                                                        V133::Int4(e) => {
                                                                            *base.add(0).cast::<u8>() = (2i32) as u8;
                                                                            *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V133::Int8(e) => {
                                                                            *base.add(0).cast::<u8>() = (3i32) as u8;
                                                                            *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                                        }
                                                                        V133::Float4(e) => {
                                                                            *base.add(0).cast::<u8>() = (4i32) as u8;
                                                                            *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                                                        }
                                                                        V133::Float8(e) => {
                                                                            *base.add(0).cast::<u8>() = (5i32) as u8;
                                                                            *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                                                        }
                                                                        V133::Numeric(e) => {
                                                                            *base.add(0).cast::<u8>() = (6i32) as u8;
                                                                            let vec33 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr33 = vec33.as_ptr().cast::<u8>();
                                                                            let len33 = vec33.len();
                                                                            ::core::mem::forget(vec33);
                                                                            *base.add(12).cast::<usize>() = len33;
                                                                            *base.add(8).cast::<*mut u8>() = ptr33.cast_mut();
                                                                        }
                                                                        V133::Boolean(e) => {
                                                                            *base.add(0).cast::<u8>() = (7i32) as u8;
                                                                            *base.add(8).cast::<u8>() = (match e {
                                                                                true => 1,
                                                                                false => 0,
                                                                            }) as u8;
                                                                        }
                                                                        V133::Text(e) => {
                                                                            *base.add(0).cast::<u8>() = (8i32) as u8;
                                                                            let vec34 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr34 = vec34.as_ptr().cast::<u8>();
                                                                            let len34 = vec34.len();
                                                                            ::core::mem::forget(vec34);
                                                                            *base.add(12).cast::<usize>() = len34;
                                                                            *base.add(8).cast::<*mut u8>() = ptr34.cast_mut();
                                                                        }
                                                                        V133::Varchar(e) => {
                                                                            *base.add(0).cast::<u8>() = (9i32) as u8;
                                                                            let vec35 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr35 = vec35.as_ptr().cast::<u8>();
                                                                            let len35 = vec35.len();
                                                                            ::core::mem::forget(vec35);
                                                                            *base.add(12).cast::<usize>() = len35;
                                                                            *base.add(8).cast::<*mut u8>() = ptr35.cast_mut();
                                                                        }
                                                                        V133::Bpchar(e) => {
                                                                            *base.add(0).cast::<u8>() = (10i32) as u8;
                                                                            let vec36 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr36 = vec36.as_ptr().cast::<u8>();
                                                                            let len36 = vec36.len();
                                                                            ::core::mem::forget(vec36);
                                                                            *base.add(12).cast::<usize>() = len36;
                                                                            *base.add(8).cast::<*mut u8>() = ptr36.cast_mut();
                                                                        }
                                                                        V133::Timestamp(e) => {
                                                                            *base.add(0).cast::<u8>() = (11i32) as u8;
                                                                            let super::super::super::super::golem::rdbms::types::Timestamp {
                                                                                date: date37,
                                                                                time: time37,
                                                                            } = e;
                                                                            let super::super::super::super::golem::rdbms::types::Date {
                                                                                year: year38,
                                                                                month: month38,
                                                                                day: day38,
                                                                            } = date37;
                                                                            *base.add(8).cast::<i32>() = _rt::as_i32(year38);
                                                                            *base.add(12).cast::<u8>() = (_rt::as_i32(month38)) as u8;
                                                                            *base.add(13).cast::<u8>() = (_rt::as_i32(day38)) as u8;
                                                                            let super::super::super::super::golem::rdbms::types::Time {
                                                                                hour: hour39,
                                                                                minute: minute39,
                                                                                second: second39,
                                                                                nanosecond: nanosecond39,
                                                                            } = time37;
                                                                            *base.add(16).cast::<u8>() = (_rt::as_i32(hour39)) as u8;
                                                                            *base.add(17).cast::<u8>() = (_rt::as_i32(minute39)) as u8;
                                                                            *base.add(18).cast::<u8>() = (_rt::as_i32(second39)) as u8;
                                                                            *base.add(20).cast::<i32>() = _rt::as_i32(nanosecond39);
                                                                        }
                                                                        V133::Timestamptz(e) => {
                                                                            *base.add(0).cast::<u8>() = (12i32) as u8;
                                                                            let super::super::super::super::golem::rdbms::types::Timestamptz {
                                                                                timestamp: timestamp40,
                                                                                offset: offset40,
                                                                            } = e;
                                                                            let super::super::super::super::golem::rdbms::types::Timestamp {
                                                                                date: date41,
                                                                                time: time41,
                                                                            } = timestamp40;
                                                                            let super::super::super::super::golem::rdbms::types::Date {
                                                                                year: year42,
                                                                                month: month42,
                                                                                day: day42,
                                                                            } = date41;
                                                                            *base.add(8).cast::<i32>() = _rt::as_i32(year42);
                                                                            *base.add(12).cast::<u8>() = (_rt::as_i32(month42)) as u8;
                                                                            *base.add(13).cast::<u8>() = (_rt::as_i32(day42)) as u8;
                                                                            let super::super::super::super::golem::rdbms::types::Time {
                                                                                hour: hour43,
                                                                                minute: minute43,
                                                                                second: second43,
                                                                                nanosecond: nanosecond43,
                                                                            } = time41;
                                                                            *base.add(16).cast::<u8>() = (_rt::as_i32(hour43)) as u8;
                                                                            *base.add(17).cast::<u8>() = (_rt::as_i32(minute43)) as u8;
                                                                            *base.add(18).cast::<u8>() = (_rt::as_i32(second43)) as u8;
                                                                            *base.add(20).cast::<i32>() = _rt::as_i32(nanosecond43);
                                                                            *base.add(24).cast::<i32>() = _rt::as_i32(offset40);
                                                                        }
                                                                        V133::Date(e) => {
                                                                            *base.add(0).cast::<u8>() = (13i32) as u8;
                                                                            let super::super::super::super::golem::rdbms::types::Date {
                                                                                year: year44,
                                                                                month: month44,
                                                                                day: day44,
                                                                            } = e;
                                                                            *base.add(8).cast::<i32>() = _rt::as_i32(year44);
                                                                            *base.add(12).cast::<u8>() = (_rt::as_i32(month44)) as u8;
                                                                            *base.add(13).cast::<u8>() = (_rt::as_i32(day44)) as u8;
                                                                        }
                                                                        V133::Time(e) => {
                                                                            *base.add(0).cast::<u8>() = (14i32) as u8;
                                                                            let super::super::super::super::golem::rdbms::types::Time {
                                                                                hour: hour45,
                                                                                minute: minute45,
                                                                                second: second45,
                                                                                nanosecond: nanosecond45,
                                                                            } = e;
                                                                            *base.add(8).cast::<u8>() = (_rt::as_i32(hour45)) as u8;
                                                                            *base.add(9).cast::<u8>() = (_rt::as_i32(minute45)) as u8;
                                                                            *base.add(10).cast::<u8>() = (_rt::as_i32(second45)) as u8;
                                                                            *base.add(12).cast::<i32>() = _rt::as_i32(nanosecond45);
                                                                        }
                                                                        V133::Timetz(e) => {
                                                                            *base.add(0).cast::<u8>() = (15i32) as u8;
                                                                            let super::super::super::super::golem::rdbms::types::Timetz {
                                                                                time: time46,
                                                                                offset: offset46,
                                                                            } = e;
                                                                            let super::super::super::super::golem::rdbms::types::Time {
                                                                                hour: hour47,
                                                                                minute: minute47,
                                                                                second: second47,
                                                                                nanosecond: nanosecond47,
                                                                            } = time46;
                                                                            *base.add(8).cast::<u8>() = (_rt::as_i32(hour47)) as u8;
                                                                            *base.add(9).cast::<u8>() = (_rt::as_i32(minute47)) as u8;
                                                                            *base.add(10).cast::<u8>() = (_rt::as_i32(second47)) as u8;
                                                                            *base.add(12).cast::<i32>() = _rt::as_i32(nanosecond47);
                                                                            *base.add(16).cast::<i32>() = _rt::as_i32(offset46);
                                                                        }
                                                                        V133::Interval(e) => {
                                                                            *base.add(0).cast::<u8>() = (16i32) as u8;
                                                                            let super::super::super::super::golem::rdbms::postgres::Interval {
                                                                                months: months48,
                                                                                days: days48,
                                                                                microseconds: microseconds48,
                                                                            } = e;
                                                                            *base.add(8).cast::<i32>() = _rt::as_i32(months48);
                                                                            *base.add(12).cast::<i32>() = _rt::as_i32(days48);
                                                                            *base.add(16).cast::<i64>() = _rt::as_i64(microseconds48);
                                                                        }
                                                                        V133::Bytea(e) => {
                                                                            *base.add(0).cast::<u8>() = (17i32) as u8;
                                                                            let vec49 = (e).into_boxed_slice();
                                                                            let ptr49 = vec49.as_ptr().cast::<u8>();
                                                                            let len49 = vec49.len();
                                                                            ::core::mem::forget(vec49);
                                                                            *base.add(12).cast::<usize>() = len49;
                                                                            *base.add(8).cast::<*mut u8>() = ptr49.cast_mut();
                                                                        }
                                                                        V133::Json(e) => {
                                                                            *base.add(0).cast::<u8>() = (18i32) as u8;
                                                                            let vec50 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr50 = vec50.as_ptr().cast::<u8>();
                                                                            let len50 = vec50.len();
                                                                            ::core::mem::forget(vec50);
                                                                            *base.add(12).cast::<usize>() = len50;
                                                                            *base.add(8).cast::<*mut u8>() = ptr50.cast_mut();
                                                                        }
                                                                        V133::Jsonb(e) => {
                                                                            *base.add(0).cast::<u8>() = (19i32) as u8;
                                                                            let vec51 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr51 = vec51.as_ptr().cast::<u8>();
                                                                            let len51 = vec51.len();
                                                                            ::core::mem::forget(vec51);
                                                                            *base.add(12).cast::<usize>() = len51;
                                                                            *base.add(8).cast::<*mut u8>() = ptr51.cast_mut();
                                                                        }
                                                                        V133::Jsonpath(e) => {
                                                                            *base.add(0).cast::<u8>() = (20i32) as u8;
                                                                            let vec52 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr52 = vec52.as_ptr().cast::<u8>();
                                                                            let len52 = vec52.len();
                                                                            ::core::mem::forget(vec52);
                                                                            *base.add(12).cast::<usize>() = len52;
                                                                            *base.add(8).cast::<*mut u8>() = ptr52.cast_mut();
                                                                        }
                                                                        V133::Xml(e) => {
                                                                            *base.add(0).cast::<u8>() = (21i32) as u8;
                                                                            let vec53 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr53 = vec53.as_ptr().cast::<u8>();
                                                                            let len53 = vec53.len();
                                                                            ::core::mem::forget(vec53);
                                                                            *base.add(12).cast::<usize>() = len53;
                                                                            *base.add(8).cast::<*mut u8>() = ptr53.cast_mut();
                                                                        }
                                                                        V133::Uuid(e) => {
                                                                            *base.add(0).cast::<u8>() = (22i32) as u8;
                                                                            let super::super::super::super::golem::rdbms::types::Uuid {
                                                                                high_bits: high_bits54,
                                                                                low_bits: low_bits54,
                                                                            } = e;
                                                                            *base.add(8).cast::<i64>() = _rt::as_i64(high_bits54);
                                                                            *base.add(16).cast::<i64>() = _rt::as_i64(low_bits54);
                                                                        }
                                                                        V133::Inet(e) => {
                                                                            *base.add(0).cast::<u8>() = (23i32) as u8;
                                                                            use super::super::super::super::golem::rdbms::types::IpAddress as V57;
                                                                            match e {
                                                                                V57::Ipv4(e) => {
                                                                                    *base.add(8).cast::<u8>() = (0i32) as u8;
                                                                                    let (t55_0, t55_1, t55_2, t55_3) = e;
                                                                                    *base.add(10).cast::<u8>() = (_rt::as_i32(t55_0)) as u8;
                                                                                    *base.add(11).cast::<u8>() = (_rt::as_i32(t55_1)) as u8;
                                                                                    *base.add(12).cast::<u8>() = (_rt::as_i32(t55_2)) as u8;
                                                                                    *base.add(13).cast::<u8>() = (_rt::as_i32(t55_3)) as u8;
                                                                                }
                                                                                V57::Ipv6(e) => {
                                                                                    *base.add(8).cast::<u8>() = (1i32) as u8;
                                                                                    let (
                                                                                        t56_0,
                                                                                        t56_1,
                                                                                        t56_2,
                                                                                        t56_3,
                                                                                        t56_4,
                                                                                        t56_5,
                                                                                        t56_6,
                                                                                        t56_7,
                                                                                    ) = e;
                                                                                    *base.add(10).cast::<u16>() = (_rt::as_i32(t56_0)) as u16;
                                                                                    *base.add(12).cast::<u16>() = (_rt::as_i32(t56_1)) as u16;
                                                                                    *base.add(14).cast::<u16>() = (_rt::as_i32(t56_2)) as u16;
                                                                                    *base.add(16).cast::<u16>() = (_rt::as_i32(t56_3)) as u16;
                                                                                    *base.add(18).cast::<u16>() = (_rt::as_i32(t56_4)) as u16;
                                                                                    *base.add(20).cast::<u16>() = (_rt::as_i32(t56_5)) as u16;
                                                                                    *base.add(22).cast::<u16>() = (_rt::as_i32(t56_6)) as u16;
                                                                                    *base.add(24).cast::<u16>() = (_rt::as_i32(t56_7)) as u16;
                                                                                }
                                                                            }
                                                                        }
                                                                        V133::Cidr(e) => {
                                                                            *base.add(0).cast::<u8>() = (24i32) as u8;
                                                                            use super::super::super::super::golem::rdbms::types::IpAddress as V60;
                                                                            match e {
                                                                                V60::Ipv4(e) => {
                                                                                    *base.add(8).cast::<u8>() = (0i32) as u8;
                                                                                    let (t58_0, t58_1, t58_2, t58_3) = e;
                                                                                    *base.add(10).cast::<u8>() = (_rt::as_i32(t58_0)) as u8;
                                                                                    *base.add(11).cast::<u8>() = (_rt::as_i32(t58_1)) as u8;
                                                                                    *base.add(12).cast::<u8>() = (_rt::as_i32(t58_2)) as u8;
                                                                                    *base.add(13).cast::<u8>() = (_rt::as_i32(t58_3)) as u8;
                                                                                }
                                                                                V60::Ipv6(e) => {
                                                                                    *base.add(8).cast::<u8>() = (1i32) as u8;
                                                                                    let (
                                                                                        t59_0,
                                                                                        t59_1,
                                                                                        t59_2,
                                                                                        t59_3,
                                                                                        t59_4,
                                                                                        t59_5,
                                                                                        t59_6,
                                                                                        t59_7,
                                                                                    ) = e;
                                                                                    *base.add(10).cast::<u16>() = (_rt::as_i32(t59_0)) as u16;
                                                                                    *base.add(12).cast::<u16>() = (_rt::as_i32(t59_1)) as u16;
                                                                                    *base.add(14).cast::<u16>() = (_rt::as_i32(t59_2)) as u16;
                                                                                    *base.add(16).cast::<u16>() = (_rt::as_i32(t59_3)) as u16;
                                                                                    *base.add(18).cast::<u16>() = (_rt::as_i32(t59_4)) as u16;
                                                                                    *base.add(20).cast::<u16>() = (_rt::as_i32(t59_5)) as u16;
                                                                                    *base.add(22).cast::<u16>() = (_rt::as_i32(t59_6)) as u16;
                                                                                    *base.add(24).cast::<u16>() = (_rt::as_i32(t59_7)) as u16;
                                                                                }
                                                                            }
                                                                        }
                                                                        V133::Macaddr(e) => {
                                                                            *base.add(0).cast::<u8>() = (25i32) as u8;
                                                                            let super::super::super::super::golem::rdbms::types::MacAddress {
                                                                                octets: octets61,
                                                                            } = e;
                                                                            let (t62_0, t62_1, t62_2, t62_3, t62_4, t62_5) = octets61;
                                                                            *base.add(8).cast::<u8>() = (_rt::as_i32(t62_0)) as u8;
                                                                            *base.add(9).cast::<u8>() = (_rt::as_i32(t62_1)) as u8;
                                                                            *base.add(10).cast::<u8>() = (_rt::as_i32(t62_2)) as u8;
                                                                            *base.add(11).cast::<u8>() = (_rt::as_i32(t62_3)) as u8;
                                                                            *base.add(12).cast::<u8>() = (_rt::as_i32(t62_4)) as u8;
                                                                            *base.add(13).cast::<u8>() = (_rt::as_i32(t62_5)) as u8;
                                                                        }
                                                                        V133::Bit(e) => {
                                                                            *base.add(0).cast::<u8>() = (26i32) as u8;
                                                                            let vec63 = e;
                                                                            let len63 = vec63.len();
                                                                            let layout63 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec63.len() * 1,
                                                                                1,
                                                                            );
                                                                            let result63 = if layout63.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout63).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout63);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec63.into_iter().enumerate() {
                                                                                let base = result63.add(i * 1);
                                                                                {
                                                                                    *base.add(0).cast::<u8>() = (match e {
                                                                                        true => 1,
                                                                                        false => 0,
                                                                                    }) as u8;
                                                                                }
                                                                            }
                                                                            *base.add(12).cast::<usize>() = len63;
                                                                            *base.add(8).cast::<*mut u8>() = result63;
                                                                        }
                                                                        V133::Varbit(e) => {
                                                                            *base.add(0).cast::<u8>() = (27i32) as u8;
                                                                            let vec64 = e;
                                                                            let len64 = vec64.len();
                                                                            let layout64 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec64.len() * 1,
                                                                                1,
                                                                            );
                                                                            let result64 = if layout64.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout64).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout64);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec64.into_iter().enumerate() {
                                                                                let base = result64.add(i * 1);
                                                                                {
                                                                                    *base.add(0).cast::<u8>() = (match e {
                                                                                        true => 1,
                                                                                        false => 0,
                                                                                    }) as u8;
                                                                                }
                                                                            }
                                                                            *base.add(12).cast::<usize>() = len64;
                                                                            *base.add(8).cast::<*mut u8>() = result64;
                                                                        }
                                                                        V133::Int4range(e) => {
                                                                            *base.add(0).cast::<u8>() = (28i32) as u8;
                                                                            let super::super::super::super::golem::rdbms::postgres::Int4range {
                                                                                start: start65,
                                                                                end: end65,
                                                                            } = e;
                                                                            use super::super::super::super::golem::rdbms::postgres::Int4bound as V66;
                                                                            match start65 {
                                                                                V66::Included(e) => {
                                                                                    *base.add(8).cast::<u8>() = (0i32) as u8;
                                                                                    *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                V66::Excluded(e) => {
                                                                                    *base.add(8).cast::<u8>() = (1i32) as u8;
                                                                                    *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                V66::Unbounded => {
                                                                                    *base.add(8).cast::<u8>() = (2i32) as u8;
                                                                                }
                                                                            }
                                                                            use super::super::super::super::golem::rdbms::postgres::Int4bound as V67;
                                                                            match end65 {
                                                                                V67::Included(e) => {
                                                                                    *base.add(16).cast::<u8>() = (0i32) as u8;
                                                                                    *base.add(20).cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                V67::Excluded(e) => {
                                                                                    *base.add(16).cast::<u8>() = (1i32) as u8;
                                                                                    *base.add(20).cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                V67::Unbounded => {
                                                                                    *base.add(16).cast::<u8>() = (2i32) as u8;
                                                                                }
                                                                            }
                                                                        }
                                                                        V133::Int8range(e) => {
                                                                            *base.add(0).cast::<u8>() = (29i32) as u8;
                                                                            let super::super::super::super::golem::rdbms::postgres::Int8range {
                                                                                start: start68,
                                                                                end: end68,
                                                                            } = e;
                                                                            use super::super::super::super::golem::rdbms::postgres::Int8bound as V69;
                                                                            match start68 {
                                                                                V69::Included(e) => {
                                                                                    *base.add(8).cast::<u8>() = (0i32) as u8;
                                                                                    *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                                                                }
                                                                                V69::Excluded(e) => {
                                                                                    *base.add(8).cast::<u8>() = (1i32) as u8;
                                                                                    *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                                                                }
                                                                                V69::Unbounded => {
                                                                                    *base.add(8).cast::<u8>() = (2i32) as u8;
                                                                                }
                                                                            }
                                                                            use super::super::super::super::golem::rdbms::postgres::Int8bound as V70;
                                                                            match end68 {
                                                                                V70::Included(e) => {
                                                                                    *base.add(24).cast::<u8>() = (0i32) as u8;
                                                                                    *base.add(32).cast::<i64>() = _rt::as_i64(e);
                                                                                }
                                                                                V70::Excluded(e) => {
                                                                                    *base.add(24).cast::<u8>() = (1i32) as u8;
                                                                                    *base.add(32).cast::<i64>() = _rt::as_i64(e);
                                                                                }
                                                                                V70::Unbounded => {
                                                                                    *base.add(24).cast::<u8>() = (2i32) as u8;
                                                                                }
                                                                            }
                                                                        }
                                                                        V133::Numrange(e) => {
                                                                            *base.add(0).cast::<u8>() = (30i32) as u8;
                                                                            let super::super::super::super::golem::rdbms::postgres::Numrange {
                                                                                start: start71,
                                                                                end: end71,
                                                                            } = e;
                                                                            use super::super::super::super::golem::rdbms::postgres::Numbound as V74;
                                                                            match start71 {
                                                                                V74::Included(e) => {
                                                                                    *base.add(8).cast::<u8>() = (0i32) as u8;
                                                                                    let vec72 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr72 = vec72.as_ptr().cast::<u8>();
                                                                                    let len72 = vec72.len();
                                                                                    ::core::mem::forget(vec72);
                                                                                    *base.add(16).cast::<usize>() = len72;
                                                                                    *base.add(12).cast::<*mut u8>() = ptr72.cast_mut();
                                                                                }
                                                                                V74::Excluded(e) => {
                                                                                    *base.add(8).cast::<u8>() = (1i32) as u8;
                                                                                    let vec73 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr73 = vec73.as_ptr().cast::<u8>();
                                                                                    let len73 = vec73.len();
                                                                                    ::core::mem::forget(vec73);
                                                                                    *base.add(16).cast::<usize>() = len73;
                                                                                    *base.add(12).cast::<*mut u8>() = ptr73.cast_mut();
                                                                                }
                                                                                V74::Unbounded => {
                                                                                    *base.add(8).cast::<u8>() = (2i32) as u8;
                                                                                }
                                                                            }
                                                                            use super::super::super::super::golem::rdbms::postgres::Numbound as V77;
                                                                            match end71 {
                                                                                V77::Included(e) => {
                                                                                    *base.add(20).cast::<u8>() = (0i32) as u8;
                                                                                    let vec75 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr75 = vec75.as_ptr().cast::<u8>();
                                                                                    let len75 = vec75.len();
                                                                                    ::core::mem::forget(vec75);
                                                                                    *base.add(28).cast::<usize>() = len75;
                                                                                    *base.add(24).cast::<*mut u8>() = ptr75.cast_mut();
                                                                                }
                                                                                V77::Excluded(e) => {
                                                                                    *base.add(20).cast::<u8>() = (1i32) as u8;
                                                                                    let vec76 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr76 = vec76.as_ptr().cast::<u8>();
                                                                                    let len76 = vec76.len();
                                                                                    ::core::mem::forget(vec76);
                                                                                    *base.add(28).cast::<usize>() = len76;
                                                                                    *base.add(24).cast::<*mut u8>() = ptr76.cast_mut();
                                                                                }
                                                                                V77::Unbounded => {
                                                                                    *base.add(20).cast::<u8>() = (2i32) as u8;
                                                                                }
                                                                            }
                                                                        }
                                                                        V133::Tsrange(e) => {
                                                                            *base.add(0).cast::<u8>() = (31i32) as u8;
                                                                            let super::super::super::super::golem::rdbms::postgres::Tsrange {
                                                                                start: start78,
                                                                                end: end78,
                                                                            } = e;
                                                                            use super::super::super::super::golem::rdbms::postgres::Tsbound as V85;
                                                                            match start78 {
                                                                                V85::Included(e) => {
                                                                                    *base.add(8).cast::<u8>() = (0i32) as u8;
                                                                                    let super::super::super::super::golem::rdbms::types::Timestamp {
                                                                                        date: date79,
                                                                                        time: time79,
                                                                                    } = e;
                                                                                    let super::super::super::super::golem::rdbms::types::Date {
                                                                                        year: year80,
                                                                                        month: month80,
                                                                                        day: day80,
                                                                                    } = date79;
                                                                                    *base.add(12).cast::<i32>() = _rt::as_i32(year80);
                                                                                    *base.add(16).cast::<u8>() = (_rt::as_i32(month80)) as u8;
                                                                                    *base.add(17).cast::<u8>() = (_rt::as_i32(day80)) as u8;
                                                                                    let super::super::super::super::golem::rdbms::types::Time {
                                                                                        hour: hour81,
                                                                                        minute: minute81,
                                                                                        second: second81,
                                                                                        nanosecond: nanosecond81,
                                                                                    } = time79;
                                                                                    *base.add(20).cast::<u8>() = (_rt::as_i32(hour81)) as u8;
                                                                                    *base.add(21).cast::<u8>() = (_rt::as_i32(minute81)) as u8;
                                                                                    *base.add(22).cast::<u8>() = (_rt::as_i32(second81)) as u8;
                                                                                    *base.add(24).cast::<i32>() = _rt::as_i32(nanosecond81);
                                                                                }
                                                                                V85::Excluded(e) => {
                                                                                    *base.add(8).cast::<u8>() = (1i32) as u8;
                                                                                    let super::super::super::super::golem::rdbms::types::Timestamp {
                                                                                        date: date82,
                                                                                        time: time82,
                                                                                    } = e;
                                                                                    let super::super::super::super::golem::rdbms::types::Date {
                                                                                        year: year83,
                                                                                        month: month83,
                                                                                        day: day83,
                                                                                    } = date82;
                                                                                    *base.add(12).cast::<i32>() = _rt::as_i32(year83);
                                                                                    *base.add(16).cast::<u8>() = (_rt::as_i32(month83)) as u8;
                                                                                    *base.add(17).cast::<u8>() = (_rt::as_i32(day83)) as u8;
                                                                                    let super::super::super::super::golem::rdbms::types::Time {
                                                                                        hour: hour84,
                                                                                        minute: minute84,
                                                                                        second: second84,
                                                                                        nanosecond: nanosecond84,
                                                                                    } = time82;
                                                                                    *base.add(20).cast::<u8>() = (_rt::as_i32(hour84)) as u8;
                                                                                    *base.add(21).cast::<u8>() = (_rt::as_i32(minute84)) as u8;
                                                                                    *base.add(22).cast::<u8>() = (_rt::as_i32(second84)) as u8;
                                                                                    *base.add(24).cast::<i32>() = _rt::as_i32(nanosecond84);
                                                                                }
                                                                                V85::Unbounded => {
                                                                                    *base.add(8).cast::<u8>() = (2i32) as u8;
                                                                                }
                                                                            }
                                                                            use super::super::super::super::golem::rdbms::postgres::Tsbound as V92;
                                                                            match end78 {
                                                                                V92::Included(e) => {
                                                                                    *base.add(28).cast::<u8>() = (0i32) as u8;
                                                                                    let super::super::super::super::golem::rdbms::types::Timestamp {
                                                                                        date: date86,
                                                                                        time: time86,
                                                                                    } = e;
                                                                                    let super::super::super::super::golem::rdbms::types::Date {
                                                                                        year: year87,
                                                                                        month: month87,
                                                                                        day: day87,
                                                                                    } = date86;
                                                                                    *base.add(32).cast::<i32>() = _rt::as_i32(year87);
                                                                                    *base.add(36).cast::<u8>() = (_rt::as_i32(month87)) as u8;
                                                                                    *base.add(37).cast::<u8>() = (_rt::as_i32(day87)) as u8;
                                                                                    let super::super::super::super::golem::rdbms::types::Time {
                                                                                        hour: hour88,
                                                                                        minute: minute88,
                                                                                        second: second88,
                                                                                        nanosecond: nanosecond88,
                                                                                    } = time86;
                                                                                    *base.add(40).cast::<u8>() = (_rt::as_i32(hour88)) as u8;
                                                                                    *base.add(41).cast::<u8>() = (_rt::as_i32(minute88)) as u8;
                                                                                    *base.add(42).cast::<u8>() = (_rt::as_i32(second88)) as u8;
                                                                                    *base.add(44).cast::<i32>() = _rt::as_i32(nanosecond88);
                                                                                }
                                                                                V92::Excluded(e) => {
                                                                                    *base.add(28).cast::<u8>() = (1i32) as u8;
                                                                                    let super::super::super::super::golem::rdbms::types::Timestamp {
                                                                                        date: date89,
                                                                                        time: time89,
                                                                                    } = e;
                                                                                    let super::super::super::super::golem::rdbms::types::Date {
                                                                                        year: year90,
                                                                                        month: month90,
                                                                                        day: day90,
                                                                                    } = date89;
                                                                                    *base.add(32).cast::<i32>() = _rt::as_i32(year90);
                                                                                    *base.add(36).cast::<u8>() = (_rt::as_i32(month90)) as u8;
                                                                                    *base.add(37).cast::<u8>() = (_rt::as_i32(day90)) as u8;
                                                                                    let super::super::super::super::golem::rdbms::types::Time {
                                                                                        hour: hour91,
                                                                                        minute: minute91,
                                                                                        second: second91,
                                                                                        nanosecond: nanosecond91,
                                                                                    } = time89;
                                                                                    *base.add(40).cast::<u8>() = (_rt::as_i32(hour91)) as u8;
                                                                                    *base.add(41).cast::<u8>() = (_rt::as_i32(minute91)) as u8;
                                                                                    *base.add(42).cast::<u8>() = (_rt::as_i32(second91)) as u8;
                                                                                    *base.add(44).cast::<i32>() = _rt::as_i32(nanosecond91);
                                                                                }
                                                                                V92::Unbounded => {
                                                                                    *base.add(28).cast::<u8>() = (2i32) as u8;
                                                                                }
                                                                            }
                                                                        }
                                                                        V133::Tstzrange(e) => {
                                                                            *base.add(0).cast::<u8>() = (32i32) as u8;
                                                                            let super::super::super::super::golem::rdbms::postgres::Tstzrange {
                                                                                start: start93,
                                                                                end: end93,
                                                                            } = e;
                                                                            use super::super::super::super::golem::rdbms::postgres::Tstzbound as V102;
                                                                            match start93 {
                                                                                V102::Included(e) => {
                                                                                    *base.add(8).cast::<u8>() = (0i32) as u8;
                                                                                    let super::super::super::super::golem::rdbms::types::Timestamptz {
                                                                                        timestamp: timestamp94,
                                                                                        offset: offset94,
                                                                                    } = e;
                                                                                    let super::super::super::super::golem::rdbms::types::Timestamp {
                                                                                        date: date95,
                                                                                        time: time95,
                                                                                    } = timestamp94;
                                                                                    let super::super::super::super::golem::rdbms::types::Date {
                                                                                        year: year96,
                                                                                        month: month96,
                                                                                        day: day96,
                                                                                    } = date95;
                                                                                    *base.add(12).cast::<i32>() = _rt::as_i32(year96);
                                                                                    *base.add(16).cast::<u8>() = (_rt::as_i32(month96)) as u8;
                                                                                    *base.add(17).cast::<u8>() = (_rt::as_i32(day96)) as u8;
                                                                                    let super::super::super::super::golem::rdbms::types::Time {
                                                                                        hour: hour97,
                                                                                        minute: minute97,
                                                                                        second: second97,
                                                                                        nanosecond: nanosecond97,
                                                                                    } = time95;
                                                                                    *base.add(20).cast::<u8>() = (_rt::as_i32(hour97)) as u8;
                                                                                    *base.add(21).cast::<u8>() = (_rt::as_i32(minute97)) as u8;
                                                                                    *base.add(22).cast::<u8>() = (_rt::as_i32(second97)) as u8;
                                                                                    *base.add(24).cast::<i32>() = _rt::as_i32(nanosecond97);
                                                                                    *base.add(28).cast::<i32>() = _rt::as_i32(offset94);
                                                                                }
                                                                                V102::Excluded(e) => {
                                                                                    *base.add(8).cast::<u8>() = (1i32) as u8;
                                                                                    let super::super::super::super::golem::rdbms::types::Timestamptz {
                                                                                        timestamp: timestamp98,
                                                                                        offset: offset98,
                                                                                    } = e;
                                                                                    let super::super::super::super::golem::rdbms::types::Timestamp {
                                                                                        date: date99,
                                                                                        time: time99,
                                                                                    } = timestamp98;
                                                                                    let super::super::super::super::golem::rdbms::types::Date {
                                                                                        year: year100,
                                                                                        month: month100,
                                                                                        day: day100,
                                                                                    } = date99;
                                                                                    *base.add(12).cast::<i32>() = _rt::as_i32(year100);
                                                                                    *base.add(16).cast::<u8>() = (_rt::as_i32(month100)) as u8;
                                                                                    *base.add(17).cast::<u8>() = (_rt::as_i32(day100)) as u8;
                                                                                    let super::super::super::super::golem::rdbms::types::Time {
                                                                                        hour: hour101,
                                                                                        minute: minute101,
                                                                                        second: second101,
                                                                                        nanosecond: nanosecond101,
                                                                                    } = time99;
                                                                                    *base.add(20).cast::<u8>() = (_rt::as_i32(hour101)) as u8;
                                                                                    *base.add(21).cast::<u8>() = (_rt::as_i32(minute101)) as u8;
                                                                                    *base.add(22).cast::<u8>() = (_rt::as_i32(second101)) as u8;
                                                                                    *base.add(24).cast::<i32>() = _rt::as_i32(nanosecond101);
                                                                                    *base.add(28).cast::<i32>() = _rt::as_i32(offset98);
                                                                                }
                                                                                V102::Unbounded => {
                                                                                    *base.add(8).cast::<u8>() = (2i32) as u8;
                                                                                }
                                                                            }
                                                                            use super::super::super::super::golem::rdbms::postgres::Tstzbound as V111;
                                                                            match end93 {
                                                                                V111::Included(e) => {
                                                                                    *base.add(32).cast::<u8>() = (0i32) as u8;
                                                                                    let super::super::super::super::golem::rdbms::types::Timestamptz {
                                                                                        timestamp: timestamp103,
                                                                                        offset: offset103,
                                                                                    } = e;
                                                                                    let super::super::super::super::golem::rdbms::types::Timestamp {
                                                                                        date: date104,
                                                                                        time: time104,
                                                                                    } = timestamp103;
                                                                                    let super::super::super::super::golem::rdbms::types::Date {
                                                                                        year: year105,
                                                                                        month: month105,
                                                                                        day: day105,
                                                                                    } = date104;
                                                                                    *base.add(36).cast::<i32>() = _rt::as_i32(year105);
                                                                                    *base.add(40).cast::<u8>() = (_rt::as_i32(month105)) as u8;
                                                                                    *base.add(41).cast::<u8>() = (_rt::as_i32(day105)) as u8;
                                                                                    let super::super::super::super::golem::rdbms::types::Time {
                                                                                        hour: hour106,
                                                                                        minute: minute106,
                                                                                        second: second106,
                                                                                        nanosecond: nanosecond106,
                                                                                    } = time104;
                                                                                    *base.add(44).cast::<u8>() = (_rt::as_i32(hour106)) as u8;
                                                                                    *base.add(45).cast::<u8>() = (_rt::as_i32(minute106)) as u8;
                                                                                    *base.add(46).cast::<u8>() = (_rt::as_i32(second106)) as u8;
                                                                                    *base.add(48).cast::<i32>() = _rt::as_i32(nanosecond106);
                                                                                    *base.add(52).cast::<i32>() = _rt::as_i32(offset103);
                                                                                }
                                                                                V111::Excluded(e) => {
                                                                                    *base.add(32).cast::<u8>() = (1i32) as u8;
                                                                                    let super::super::super::super::golem::rdbms::types::Timestamptz {
                                                                                        timestamp: timestamp107,
                                                                                        offset: offset107,
                                                                                    } = e;
                                                                                    let super::super::super::super::golem::rdbms::types::Timestamp {
                                                                                        date: date108,
                                                                                        time: time108,
                                                                                    } = timestamp107;
                                                                                    let super::super::super::super::golem::rdbms::types::Date {
                                                                                        year: year109,
                                                                                        month: month109,
                                                                                        day: day109,
                                                                                    } = date108;
                                                                                    *base.add(36).cast::<i32>() = _rt::as_i32(year109);
                                                                                    *base.add(40).cast::<u8>() = (_rt::as_i32(month109)) as u8;
                                                                                    *base.add(41).cast::<u8>() = (_rt::as_i32(day109)) as u8;
                                                                                    let super::super::super::super::golem::rdbms::types::Time {
                                                                                        hour: hour110,
                                                                                        minute: minute110,
                                                                                        second: second110,
                                                                                        nanosecond: nanosecond110,
                                                                                    } = time108;
                                                                                    *base.add(44).cast::<u8>() = (_rt::as_i32(hour110)) as u8;
                                                                                    *base.add(45).cast::<u8>() = (_rt::as_i32(minute110)) as u8;
                                                                                    *base.add(46).cast::<u8>() = (_rt::as_i32(second110)) as u8;
                                                                                    *base.add(48).cast::<i32>() = _rt::as_i32(nanosecond110);
                                                                                    *base.add(52).cast::<i32>() = _rt::as_i32(offset107);
                                                                                }
                                                                                V111::Unbounded => {
                                                                                    *base.add(32).cast::<u8>() = (2i32) as u8;
                                                                                }
                                                                            }
                                                                        }
                                                                        V133::Daterange(e) => {
                                                                            *base.add(0).cast::<u8>() = (33i32) as u8;
                                                                            let super::super::super::super::golem::rdbms::postgres::Daterange {
                                                                                start: start112,
                                                                                end: end112,
                                                                            } = e;
                                                                            use super::super::super::super::golem::rdbms::postgres::Datebound as V115;
                                                                            match start112 {
                                                                                V115::Included(e) => {
                                                                                    *base.add(8).cast::<u8>() = (0i32) as u8;
                                                                                    let super::super::super::super::golem::rdbms::types::Date {
                                                                                        year: year113,
                                                                                        month: month113,
                                                                                        day: day113,
                                                                                    } = e;
                                                                                    *base.add(12).cast::<i32>() = _rt::as_i32(year113);
                                                                                    *base.add(16).cast::<u8>() = (_rt::as_i32(month113)) as u8;
                                                                                    *base.add(17).cast::<u8>() = (_rt::as_i32(day113)) as u8;
                                                                                }
                                                                                V115::Excluded(e) => {
                                                                                    *base.add(8).cast::<u8>() = (1i32) as u8;
                                                                                    let super::super::super::super::golem::rdbms::types::Date {
                                                                                        year: year114,
                                                                                        month: month114,
                                                                                        day: day114,
                                                                                    } = e;
                                                                                    *base.add(12).cast::<i32>() = _rt::as_i32(year114);
                                                                                    *base.add(16).cast::<u8>() = (_rt::as_i32(month114)) as u8;
                                                                                    *base.add(17).cast::<u8>() = (_rt::as_i32(day114)) as u8;
                                                                                }
                                                                                V115::Unbounded => {
                                                                                    *base.add(8).cast::<u8>() = (2i32) as u8;
                                                                                }
                                                                            }
                                                                            use super::super::super::super::golem::rdbms::postgres::Datebound as V118;
                                                                            match end112 {
                                                                                V118::Included(e) => {
                                                                                    *base.add(20).cast::<u8>() = (0i32) as u8;
                                                                                    let super::super::super::super::golem::rdbms::types::Date {
                                                                                        year: year116,
                                                                                        month: month116,
                                                                                        day: day116,
                                                                                    } = e;
                                                                                    *base.add(24).cast::<i32>() = _rt::as_i32(year116);
                                                                                    *base.add(28).cast::<u8>() = (_rt::as_i32(month116)) as u8;
                                                                                    *base.add(29).cast::<u8>() = (_rt::as_i32(day116)) as u8;
                                                                                }
                                                                                V118::Excluded(e) => {
                                                                                    *base.add(20).cast::<u8>() = (1i32) as u8;
                                                                                    let super::super::super::super::golem::rdbms::types::Date {
                                                                                        year: year117,
                                                                                        month: month117,
                                                                                        day: day117,
                                                                                    } = e;
                                                                                    *base.add(24).cast::<i32>() = _rt::as_i32(year117);
                                                                                    *base.add(28).cast::<u8>() = (_rt::as_i32(month117)) as u8;
                                                                                    *base.add(29).cast::<u8>() = (_rt::as_i32(day117)) as u8;
                                                                                }
                                                                                V118::Unbounded => {
                                                                                    *base.add(20).cast::<u8>() = (2i32) as u8;
                                                                                }
                                                                            }
                                                                        }
                                                                        V133::Money(e) => {
                                                                            *base.add(0).cast::<u8>() = (34i32) as u8;
                                                                            *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                                        }
                                                                        V133::Oid(e) => {
                                                                            *base.add(0).cast::<u8>() = (35i32) as u8;
                                                                            *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V133::Enumeration(e) => {
                                                                            *base.add(0).cast::<u8>() = (36i32) as u8;
                                                                            let super::super::super::super::golem::rdbms::postgres::Enumeration {
                                                                                name: name119,
                                                                                value: value119,
                                                                            } = e;
                                                                            let vec120 = (name119.into_bytes()).into_boxed_slice();
                                                                            let ptr120 = vec120.as_ptr().cast::<u8>();
                                                                            let len120 = vec120.len();
                                                                            ::core::mem::forget(vec120);
                                                                            *base.add(12).cast::<usize>() = len120;
                                                                            *base.add(8).cast::<*mut u8>() = ptr120.cast_mut();
                                                                            let vec121 = (value119.into_bytes()).into_boxed_slice();
                                                                            let ptr121 = vec121.as_ptr().cast::<u8>();
                                                                            let len121 = vec121.len();
                                                                            ::core::mem::forget(vec121);
                                                                            *base.add(20).cast::<usize>() = len121;
                                                                            *base.add(16).cast::<*mut u8>() = ptr121.cast_mut();
                                                                        }
                                                                        V133::Composite(e) => {
                                                                            *base.add(0).cast::<u8>() = (37i32) as u8;
                                                                            let super::super::super::super::golem::rdbms::postgres::Composite {
                                                                                name: name122,
                                                                                values: values122,
                                                                            } = e;
                                                                            let vec123 = (name122.into_bytes()).into_boxed_slice();
                                                                            let ptr123 = vec123.as_ptr().cast::<u8>();
                                                                            let len123 = vec123.len();
                                                                            ::core::mem::forget(vec123);
                                                                            *base.add(12).cast::<usize>() = len123;
                                                                            *base.add(8).cast::<*mut u8>() = ptr123.cast_mut();
                                                                            let vec124 = values122;
                                                                            let len124 = vec124.len();
                                                                            let layout124 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec124.len() * 4,
                                                                                4,
                                                                            );
                                                                            let result124 = if layout124.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout124).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout124);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec124.into_iter().enumerate() {
                                                                                let base = result124.add(i * 4);
                                                                                {
                                                                                    *base.add(0).cast::<i32>() = (e).take_handle() as i32;
                                                                                }
                                                                            }
                                                                            *base.add(20).cast::<usize>() = len124;
                                                                            *base.add(16).cast::<*mut u8>() = result124;
                                                                        }
                                                                        V133::Domain(e) => {
                                                                            *base.add(0).cast::<u8>() = (38i32) as u8;
                                                                            let super::super::super::super::golem::rdbms::postgres::Domain {
                                                                                name: name125,
                                                                                value: value125,
                                                                            } = e;
                                                                            let vec126 = (name125.into_bytes()).into_boxed_slice();
                                                                            let ptr126 = vec126.as_ptr().cast::<u8>();
                                                                            let len126 = vec126.len();
                                                                            ::core::mem::forget(vec126);
                                                                            *base.add(12).cast::<usize>() = len126;
                                                                            *base.add(8).cast::<*mut u8>() = ptr126.cast_mut();
                                                                            *base.add(16).cast::<i32>() = (value125).take_handle()
                                                                                as i32;
                                                                        }
                                                                        V133::Array(e) => {
                                                                            *base.add(0).cast::<u8>() = (39i32) as u8;
                                                                            let vec127 = e;
                                                                            let len127 = vec127.len();
                                                                            let layout127 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec127.len() * 4,
                                                                                4,
                                                                            );
                                                                            let result127 = if layout127.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout127).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout127);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec127.into_iter().enumerate() {
                                                                                let base = result127.add(i * 4);
                                                                                {
                                                                                    *base.add(0).cast::<i32>() = (e).take_handle() as i32;
                                                                                }
                                                                            }
                                                                            *base.add(12).cast::<usize>() = len127;
                                                                            *base.add(8).cast::<*mut u8>() = result127;
                                                                        }
                                                                        V133::Range(e) => {
                                                                            *base.add(0).cast::<u8>() = (40i32) as u8;
                                                                            let super::super::super::super::golem::rdbms::postgres::Range {
                                                                                name: name128,
                                                                                value: value128,
                                                                            } = e;
                                                                            let vec129 = (name128.into_bytes()).into_boxed_slice();
                                                                            let ptr129 = vec129.as_ptr().cast::<u8>();
                                                                            let len129 = vec129.len();
                                                                            ::core::mem::forget(vec129);
                                                                            *base.add(12).cast::<usize>() = len129;
                                                                            *base.add(8).cast::<*mut u8>() = ptr129.cast_mut();
                                                                            let super::super::super::super::golem::rdbms::postgres::ValuesRange {
                                                                                start: start130,
                                                                                end: end130,
                                                                            } = value128;
                                                                            use super::super::super::super::golem::rdbms::postgres::ValueBound as V131;
                                                                            match start130 {
                                                                                V131::Included(e) => {
                                                                                    *base.add(16).cast::<u8>() = (0i32) as u8;
                                                                                    *base.add(20).cast::<i32>() = (e).take_handle() as i32;
                                                                                }
                                                                                V131::Excluded(e) => {
                                                                                    *base.add(16).cast::<u8>() = (1i32) as u8;
                                                                                    *base.add(20).cast::<i32>() = (e).take_handle() as i32;
                                                                                }
                                                                                V131::Unbounded => {
                                                                                    *base.add(16).cast::<u8>() = (2i32) as u8;
                                                                                }
                                                                            }
                                                                            use super::super::super::super::golem::rdbms::postgres::ValueBound as V132;
                                                                            match end130 {
                                                                                V132::Included(e) => {
                                                                                    *base.add(24).cast::<u8>() = (0i32) as u8;
                                                                                    *base.add(28).cast::<i32>() = (e).take_handle() as i32;
                                                                                }
                                                                                V132::Excluded(e) => {
                                                                                    *base.add(24).cast::<u8>() = (1i32) as u8;
                                                                                    *base.add(28).cast::<i32>() = (e).take_handle() as i32;
                                                                                }
                                                                                V132::Unbounded => {
                                                                                    *base.add(24).cast::<u8>() = (2i32) as u8;
                                                                                }
                                                                            }
                                                                        }
                                                                        V133::Null => {
                                                                            *base.add(0).cast::<u8>() = (41i32) as u8;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            *base.add(4).cast::<usize>() = len134;
                                                            *base.add(0).cast::<*mut u8>() = result134;
                                                        }
                                                    }
                                                    *base.add(28).cast::<usize>() = len135;
                                                    *base.add(24).cast::<*mut u8>() = result135;
                                                }
                                            }
                                        }
                                        Err(e) => {
                                            *base.add(0).cast::<u8>() = (1i32) as u8;
                                            let vec136 = (e.into_bytes()).into_boxed_slice();
                                            let ptr136 = vec136.as_ptr().cast::<u8>();
                                            let len136 = vec136.len();
                                            ::core::mem::forget(vec136);
                                            *base.add(12).cast::<usize>() = len136;
                                            *base.add(8).cast::<*mut u8>() = ptr136.cast_mut();
                                        }
                                    };
                                }
                            }
                            *ptr14.add(8).cast::<usize>() = len137;
                            *ptr14.add(4).cast::<*mut u8>() = result137;
                        }
                        Err(e) => {
                            *ptr14.add(0).cast::<u8>() = (1i32) as u8;
                            let vec138 = (e.into_bytes()).into_boxed_slice();
                            let ptr138 = vec138.as_ptr().cast::<u8>();
                            let len138 = vec138.len();
                            ::core::mem::forget(vec138);
                            *ptr14.add(8).cast::<usize>() = len138;
                            *ptr14.add(4).cast::<*mut u8>() = ptr138.cast_mut();
                        }
                    };
                    ptr14
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_postgres_executions<T: Guest>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            let base86 = l1;
                            let len86 = l2;
                            for i in 0..len86 {
                                let base = base86.add(i * 32);
                                {
                                    let l3 = i32::from(*base.add(0).cast::<u8>());
                                    match l3 {
                                        0 => {
                                            let l4 = i32::from(*base.add(8).cast::<u8>());
                                            match l4 {
                                                0 => {}
                                                _ => {
                                                    let l5 = *base.add(16).cast::<*mut u8>();
                                                    let l6 = *base.add(20).cast::<usize>();
                                                    let base25 = l5;
                                                    let len25 = l6;
                                                    for i in 0..len25 {
                                                        let base = base25.add(i * 48);
                                                        {
                                                            let l7 = *base.add(8).cast::<*mut u8>();
                                                            let l8 = *base.add(12).cast::<usize>();
                                                            _rt::cabi_dealloc(l7, l8, 1);
                                                            let l9 = i32::from(*base.add(16).cast::<u8>());
                                                            match l9 {
                                                                0 => {}
                                                                1 => {}
                                                                2 => {}
                                                                3 => {}
                                                                4 => {}
                                                                5 => {}
                                                                6 => {}
                                                                7 => {}
                                                                8 => {}
                                                                9 => {}
                                                                10 => {}
                                                                11 => {}
                                                                12 => {}
                                                                13 => {}
                                                                14 => {}
                                                                15 => {}
                                                                16 => {}
                                                                17 => {}
                                                                18 => {}
                                                                19 => {}
                                                                20 => {}
                                                                21 => {}
                                                                22 => {}
                                                                23 => {}
                                                                24 => {}
                                                                25 => {}
                                                                26 => {}
                                                                27 => {}
                                                                28 => {}
                                                                29 => {}
                                                                30 => {}
                                                                31 => {}
                                                                32 => {}
                                                                33 => {}
                                                                34 => {}
                                                                35 => {}
                                                                36 => {
                                                                    let l10 = *base.add(20).cast::<*mut u8>();
                                                                    let l11 = *base.add(24).cast::<usize>();
                                                                    _rt::cabi_dealloc(l10, l11, 1);
                                                                }
                                                                37 => {
                                                                    let l12 = *base.add(20).cast::<*mut u8>();
                                                                    let l13 = *base.add(24).cast::<usize>();
                                                                    _rt::cabi_dealloc(l12, l13, 1);
                                                                    let l14 = *base.add(28).cast::<*mut u8>();
                                                                    let l15 = *base.add(32).cast::<usize>();
                                                                    let base18 = l14;
                                                                    let len18 = l15;
                                                                    for i in 0..len18 {
                                                                        let base = base18.add(i * 12);
                                                                        {
                                                                            let l16 = *base.add(0).cast::<*mut u8>();
                                                                            let l17 = *base.add(4).cast::<usize>();
                                                                            _rt::cabi_dealloc(l16, l17, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(base18, len18 * 12, 4);
                                                                }
                                                                38 => {
                                                                    let l19 = *base.add(20).cast::<*mut u8>();
                                                                    let l20 = *base.add(24).cast::<usize>();
                                                                    _rt::cabi_dealloc(l19, l20, 1);
                                                                }
                                                                39 => {}
                                                                _ => {
                                                                    let l21 = *base.add(20).cast::<*mut u8>();
                                                                    let l22 = *base.add(24).cast::<usize>();
                                                                    _rt::cabi_dealloc(l21, l22, 1);
                                                                }
                                                            }
                                                            let l23 = *base.add(36).cast::<*mut u8>();
                                                            let l24 = *base.add(40).cast::<usize>();
                                                            _rt::cabi_dealloc(l23, l24, 1);
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(base25, len25 * 48, 8);
                                                    let l26 = *base.add(24).cast::<*mut u8>();
                                                    let l27 = *base.add(28).cast::<usize>();
                                                    let base83 = l26;
                                                    let len83 = l27;
                                                    for i in 0..len83 {
                                                        let base = base83.add(i * 8);
                                                        {
                                                            let l28 = *base.add(0).cast::<*mut u8>();
                                                            let l29 = *base.add(4).cast::<usize>();
                                                            let base82 = l28;
                                                            let len82 = l29;
                                                            for i in 0..len82 {
                                                                let base = base82.add(i * 56);
                                                                {
                                                                    let l30 = i32::from(*base.add(0).cast::<u8>());
                                                                    match l30 {
                                                                        0 => {}
                                                                        1 => {}
                                                                        2 => {}
                                                                        3 => {}
                                                                        4 => {}
                                                                        5 => {}
                                                                        6 => {
                                                                            let l31 = *base.add(8).cast::<*mut u8>();
                                                                            let l32 = *base.add(12).cast::<usize>();
                                                                            _rt::cabi_dealloc(l31, l32, 1);
                                                                        }
                                                                        7 => {}
                                                                        8 => {
                                                                            let l33 = *base.add(8).cast::<*mut u8>();
                                                                            let l34 = *base.add(12).cast::<usize>();
                                                                            _rt::cabi_dealloc(l33, l34, 1);
                                                                        }
                                                                        9 => {
                                                                            let l35 = *base.add(8).cast::<*mut u8>();
                                                                            let l36 = *base.add(12).cast::<usize>();
                                                                            _rt::cabi_dealloc(l35, l36, 1);
                                                                        }
                                                                        10 => {
                                                                            let l37 = *base.add(8).cast::<*mut u8>();
                                                                            let l38 = *base.add(12).cast::<usize>();
                                                                            _rt::cabi_dealloc(l37, l38, 1);
                                                                        }
                                                                        11 => {}
                                                                        12 => {}
                                                                        13 => {}
                                                                        14 => {}
                                                                        15 => {}
                                                                        16 => {}
                                                                        17 => {
                                                                            let l39 = *base.add(8).cast::<*mut u8>();
                                                                            let l40 = *base.add(12).cast::<usize>();
                                                                            let base41 = l39;
                                                                            let len41 = l40;
                                                                            _rt::cabi_dealloc(base41, len41 * 1, 1);
                                                                        }
                                                                        18 => {
                                                                            let l42 = *base.add(8).cast::<*mut u8>();
                                                                            let l43 = *base.add(12).cast::<usize>();
                                                                            _rt::cabi_dealloc(l42, l43, 1);
                                                                        }
                                                                        19 => {
                                                                            let l44 = *base.add(8).cast::<*mut u8>();
                                                                            let l45 = *base.add(12).cast::<usize>();
                                                                            _rt::cabi_dealloc(l44, l45, 1);
                                                                        }
                                                                        20 => {
                                                                            let l46 = *base.add(8).cast::<*mut u8>();
                                                                            let l47 = *base.add(12).cast::<usize>();
                                                                            _rt::cabi_dealloc(l46, l47, 1);
                                                                        }
                                                                        21 => {
                                                                            let l48 = *base.add(8).cast::<*mut u8>();
                                                                            let l49 = *base.add(12).cast::<usize>();
                                                                            _rt::cabi_dealloc(l48, l49, 1);
                                                                        }
                                                                        22 => {}
                                                                        23 => {}
                                                                        24 => {}
                                                                        25 => {}
                                                                        26 => {
                                                                            let l50 = *base.add(8).cast::<*mut u8>();
                                                                            let l51 = *base.add(12).cast::<usize>();
                                                                            let base52 = l50;
                                                                            let len52 = l51;
                                                                            _rt::cabi_dealloc(base52, len52 * 1, 1);
                                                                        }
                                                                        27 => {
                                                                            let l53 = *base.add(8).cast::<*mut u8>();
                                                                            let l54 = *base.add(12).cast::<usize>();
                                                                            let base55 = l53;
                                                                            let len55 = l54;
                                                                            _rt::cabi_dealloc(base55, len55 * 1, 1);
                                                                        }
                                                                        28 => {}
                                                                        29 => {}
                                                                        30 => {
                                                                            let l56 = i32::from(*base.add(8).cast::<u8>());
                                                                            match l56 {
                                                                                0 => {
                                                                                    let l57 = *base.add(12).cast::<*mut u8>();
                                                                                    let l58 = *base.add(16).cast::<usize>();
                                                                                    _rt::cabi_dealloc(l57, l58, 1);
                                                                                }
                                                                                1 => {
                                                                                    let l59 = *base.add(12).cast::<*mut u8>();
                                                                                    let l60 = *base.add(16).cast::<usize>();
                                                                                    _rt::cabi_dealloc(l59, l60, 1);
                                                                                }
                                                                                _ => {}
                                                                            }
                                                                            let l61 = i32::from(*base.add(20).cast::<u8>());
                                                                            match l61 {
                                                                                0 => {
                                                                                    let l62 = *base.add(24).cast::<*mut u8>();
                                                                                    let l63 = *base.add(28).cast::<usize>();
                                                                                    _rt::cabi_dealloc(l62, l63, 1);
                                                                                }
                                                                                1 => {
                                                                                    let l64 = *base.add(24).cast::<*mut u8>();
                                                                                    let l65 = *base.add(28).cast::<usize>();
                                                                                    _rt::cabi_dealloc(l64, l65, 1);
                                                                                }
                                                                                _ => {}
                                                                            }
                                                                        }
                                                                        31 => {}
                                                                        32 => {}
                                                                        33 => {}
                                                                        34 => {}
                                                                        35 => {}
                                                                        36 => {
                                                                            let l66 = *base.add(8).cast::<*mut u8>();
                                                                            let l67 = *base.add(12).cast::<usize>();
                                                                            _rt::cabi_dealloc(l66, l67, 1);
                                                                            let l68 = *base.add(16).cast::<*mut u8>();
                                                                            let l69 = *base.add(20).cast::<usize>();
                                                                            _rt::cabi_dealloc(l68, l69, 1);
                                                                        }
                                                                        37 => {
                                                                            let l70 = *base.add(8).cast::<*mut u8>();
                                                                            let l71 = *base.add(12).cast::<usize>();
                                                                            _rt::cabi_dealloc(l70, l71, 1);
                                                                            let l72 = *base.add(16).cast::<*mut u8>();
                                                                            let l73 = *base.add(20).cast::<usize>();
                                                                            let base74 = l72;
                                                                            let len74 = l73;
                                                                            _rt::cabi_dealloc(base74, len74 * 4, 4);
                                                                        }
                                                                        38 => {
                                                                            let l75 = *base.add(8).cast::<*mut u8>();
                                                                            let l76 = *base.add(12).cast::<usize>();
                                                                            _rt::cabi_dealloc(l75, l76, 1);
                                                                        }
                                                                        39 => {
                                                                            let l77 = *base.add(8).cast::<*mut u8>();
                                                                            let l78 = *base.add(12).cast::<usize>();
                                                                            let base79 = l77;
                                                                            let len79 = l78;
                                                                            _rt::cabi_dealloc(base79, len79 * 4, 4);
                                                                        }
                                                                        40 => {
                                                                            let l80 = *base.add(8).cast::<*mut u8>();
                                                                            let l81 = *base.add(12).cast::<usize>();
                                                                            _rt::cabi_dealloc(l80, l81, 1);
                                                                        }
                                                                        _ => {}
                                                                    }
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(base82, len82 * 56, 8);
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(base83, len83 * 8, 4);
                                                }
                                            }
                                        }
                                        _ => {
                                            let l84 = *base.add(8).cast::<*mut u8>();
                                            let l85 = *base.add(12).cast::<usize>();
                                            _rt::cabi_dealloc(l84, l85, 1);
                                        }
                                    }
                                }
                            }
                            _rt::cabi_dealloc(base86, len86 * 32, 8);
                        }
                        _ => {
                            let l87 = *arg0.add(4).cast::<*mut u8>();
                            let l88 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l87, l88, 1);
                        }
                    }
                }
                pub trait Guest {
                    fn check() -> _rt::String;
                    fn mysql_transaction(
                        statements: _rt::Vec<Statement>,
                        end: TransactionEnd,
                    ) -> Result<_rt::Vec<Result<MysqlResult, _rt::String>>, _rt::String>;
                    fn mysql_executions(
                        statements: _rt::Vec<Statement>,
                    ) -> Result<_rt::Vec<Result<MysqlResult, _rt::String>>, _rt::String>;
                    fn postgres_transaction(
                        statements: _rt::Vec<Statement>,
                        end: TransactionEnd,
                    ) -> Result<
                        _rt::Vec<Result<PostgresResult, _rt::String>>,
                        _rt::String,
                    >;
                    fn postgres_executions(
                        statements: _rt::Vec<Statement>,
                    ) -> Result<
                        _rt::Vec<Result<PostgresResult, _rt::String>>,
                        _rt::String,
                    >;
                }
                #[doc(hidden)]
                macro_rules! __export_golem_it_api_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[export_name = "golem:it/api#check"] unsafe
                        extern "C" fn export_check() -> * mut u8 { $($path_to_types)*::
                        _export_check_cabi::<$ty > () } #[export_name =
                        "cabi_post_golem:it/api#check"] unsafe extern "C" fn
                        _post_return_check(arg0 : * mut u8,) { $($path_to_types)*::
                        __post_return_check::<$ty > (arg0) } #[export_name =
                        "golem:it/api#mysql-transaction"] unsafe extern "C" fn
                        export_mysql_transaction(arg0 : * mut u8, arg1 : usize, arg2 :
                        i32,) -> * mut u8 { $($path_to_types)*::
                        _export_mysql_transaction_cabi::<$ty > (arg0, arg1, arg2) }
                        #[export_name = "cabi_post_golem:it/api#mysql-transaction"]
                        unsafe extern "C" fn _post_return_mysql_transaction(arg0 : * mut
                        u8,) { $($path_to_types)*:: __post_return_mysql_transaction::<$ty
                        > (arg0) } #[export_name = "golem:it/api#mysql-executions"]
                        unsafe extern "C" fn export_mysql_executions(arg0 : * mut u8,
                        arg1 : usize,) -> * mut u8 { $($path_to_types)*::
                        _export_mysql_executions_cabi::<$ty > (arg0, arg1) }
                        #[export_name = "cabi_post_golem:it/api#mysql-executions"] unsafe
                        extern "C" fn _post_return_mysql_executions(arg0 : * mut u8,) {
                        $($path_to_types)*:: __post_return_mysql_executions::<$ty >
                        (arg0) } #[export_name = "golem:it/api#postgres-transaction"]
                        unsafe extern "C" fn export_postgres_transaction(arg0 : * mut u8,
                        arg1 : usize, arg2 : i32,) -> * mut u8 { $($path_to_types)*::
                        _export_postgres_transaction_cabi::<$ty > (arg0, arg1, arg2) }
                        #[export_name = "cabi_post_golem:it/api#postgres-transaction"]
                        unsafe extern "C" fn _post_return_postgres_transaction(arg0 : *
                        mut u8,) { $($path_to_types)*::
                        __post_return_postgres_transaction::<$ty > (arg0) } #[export_name
                        = "golem:it/api#postgres-executions"] unsafe extern "C" fn
                        export_postgres_executions(arg0 : * mut u8, arg1 : usize,) -> *
                        mut u8 { $($path_to_types)*::
                        _export_postgres_executions_cabi::<$ty > (arg0, arg1) }
                        #[export_name = "cabi_post_golem:it/api#postgres-executions"]
                        unsafe extern "C" fn _post_return_postgres_executions(arg0 : *
                        mut u8,) { $($path_to_types)*::
                        __post_return_postgres_executions::<$ty > (arg0) } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_golem_it_api_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 12]);
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 12],
                );
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    pub use alloc_crate::string::String;
    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};
    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }
    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }
    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }
        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }
        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }
    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource").field("handle", &self.handle).finish()
        }
    }
    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    u32::MAX => {}
                    other => T::drop(other),
                }
            }
        }
    }
    pub use alloc_crate::vec::Vec;
    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }
    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }
    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }
    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }
    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }
    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }
    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    pub fn as_f32<T: AsF32>(t: T) -> f32 {
        t.as_f32()
    }
    pub trait AsF32 {
        fn as_f32(self) -> f32;
    }
    impl<'a, T: Copy + AsF32> AsF32 for &'a T {
        fn as_f32(self) -> f32 {
            (*self).as_f32()
        }
    }
    impl AsF32 for f32 {
        #[inline]
        fn as_f32(self) -> f32 {
            self as f32
        }
    }
    pub fn as_f64<T: AsF64>(t: T) -> f64 {
        t.as_f64()
    }
    pub trait AsF64 {
        fn as_f64(self) -> f64;
    }
    impl<'a, T: Copy + AsF64> AsF64 for &'a T {
        fn as_f64(self) -> f64 {
            (*self).as_f64()
        }
    }
    impl AsF64 for f64 {
        #[inline]
        fn as_f64(self) -> f64 {
            self as f64
        }
    }
    pub use alloc_crate::alloc;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            core::hint::unreachable_unchecked()
        }
    }
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    extern crate alloc as alloc_crate;
}
/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_rdbms_service_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::golem::it::api::__export_golem_it_api_cabi!($ty with_types_in
        $($path_to_types_root)*:: exports::golem::it::api);
    };
}
#[doc(inline)]
pub(crate) use __export_rdbms_service_impl as export;
#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.36.0:golem:it:rdbms-service:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 6387] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xef0\x01A\x02\x01A\x12\
\x01B\x13\x01r\x02\x09high-bitsw\x08low-bitsw\x04\0\x04uuid\x03\0\0\x01o\x04}}}}\
\x01o\x08{{{{{{{{\x01q\x02\x04ipv4\x01\x02\0\x04ipv6\x01\x03\0\x04\0\x0aip-addre\
ss\x03\0\x04\x01o\x06}}}}}}\x01r\x01\x06octets\x06\x04\0\x0bmac-address\x03\0\x07\
\x01r\x03\x04yearz\x05month}\x03day}\x04\0\x04date\x03\0\x09\x01r\x04\x04hour}\x06\
minute}\x06second}\x0ananosecondy\x04\0\x04time\x03\0\x0b\x01r\x02\x04date\x0a\x04\
time\x0c\x04\0\x09timestamp\x03\0\x0d\x01r\x02\x09timestamp\x0e\x06offsetz\x04\0\
\x0btimestamptz\x03\0\x0f\x01r\x02\x04time\x0c\x06offsetz\x04\0\x06timetz\x03\0\x11\
\x03\0\x17golem:rdbms/types@0.0.1\x05\0\x02\x03\0\0\x04date\x02\x03\0\0\x04time\x02\
\x03\0\0\x06timetz\x02\x03\0\0\x09timestamp\x02\x03\0\0\x0btimestamptz\x02\x03\0\
\0\x04uuid\x02\x03\0\0\x0aip-address\x02\x03\0\0\x0bmac-address\x01B\x87\x01\x02\
\x03\x02\x01\x01\x04\0\x04date\x03\0\0\x02\x03\x02\x01\x02\x04\0\x04time\x03\0\x02\
\x02\x03\x02\x01\x03\x04\0\x06timetz\x03\0\x04\x02\x03\x02\x01\x04\x04\0\x09time\
stamp\x03\0\x06\x02\x03\x02\x01\x05\x04\0\x0btimestamptz\x03\0\x08\x02\x03\x02\x01\
\x06\x04\0\x04uuid\x03\0\x0a\x02\x03\x02\x01\x07\x04\0\x0aip-address\x03\0\x0c\x02\
\x03\x02\x01\x08\x04\0\x0bmac-address\x03\0\x0e\x01q\x05\x12connection-failure\x01\
s\0\x17query-parameter-failure\x01s\0\x17query-execution-failure\x01s\0\x16query\
-response-failure\x01s\0\x05other\x01s\0\x04\0\x05error\x03\0\x10\x01r\x03\x06mo\
nthsz\x04daysz\x0cmicrosecondsx\x04\0\x08interval\x03\0\x12\x01q\x03\x08included\
\x01z\0\x08excluded\x01z\0\x09unbounded\0\0\x04\0\x09int4bound\x03\0\x14\x01q\x03\
\x08included\x01x\0\x08excluded\x01x\0\x09unbounded\0\0\x04\0\x09int8bound\x03\0\
\x16\x01q\x03\x08included\x01s\0\x08excluded\x01s\0\x09unbounded\0\0\x04\0\x08nu\
mbound\x03\0\x18\x01q\x03\x08included\x01\x07\0\x08excluded\x01\x07\0\x09unbound\
ed\0\0\x04\0\x07tsbound\x03\0\x1a\x01q\x03\x08included\x01\x09\0\x08excluded\x01\
\x09\0\x09unbounded\0\0\x04\0\x09tstzbound\x03\0\x1c\x01q\x03\x08included\x01\x01\
\0\x08excluded\x01\x01\0\x09unbounded\0\0\x04\0\x09datebound\x03\0\x1e\x01r\x02\x05\
start\x15\x03end\x15\x04\0\x09int4range\x03\0\x20\x01r\x02\x05start\x17\x03end\x17\
\x04\0\x09int8range\x03\0\"\x01r\x02\x05start\x19\x03end\x19\x04\0\x08numrange\x03\
\0$\x01r\x02\x05start\x1b\x03end\x1b\x04\0\x07tsrange\x03\0&\x01r\x02\x05start\x1d\
\x03end\x1d\x04\0\x09tstzrange\x03\0(\x01r\x02\x05start\x1f\x03end\x1f\x04\0\x09\
daterange\x03\0*\x01r\x01\x04names\x04\0\x10enumeration-type\x03\0,\x01r\x02\x04\
names\x05values\x04\0\x0benumeration\x03\0.\x04\0\x0dlazy-db-value\x03\x01\x01i0\
\x01p1\x01r\x02\x04names\x06values2\x04\0\x09composite\x03\03\x01r\x02\x04names\x05\
value1\x04\0\x06domain\x03\05\x01q\x03\x08included\x011\0\x08excluded\x011\0\x09\
unbounded\0\0\x04\0\x0bvalue-bound\x03\07\x01r\x02\x05start8\x03end8\x04\0\x0cva\
lues-range\x03\09\x01r\x02\x04names\x05value:\x04\0\x05range\x03\0;\x01p}\x01p\x7f\
\x01q*\x09character\x01~\0\x04int2\x01|\0\x04int4\x01z\0\x04int8\x01x\0\x06float\
4\x01v\0\x06float8\x01u\0\x07numeric\x01s\0\x07boolean\x01\x7f\0\x04text\x01s\0\x07\
varchar\x01s\0\x06bpchar\x01s\0\x09timestamp\x01\x07\0\x0btimestamptz\x01\x09\0\x04\
date\x01\x01\0\x04time\x01\x03\0\x06timetz\x01\x05\0\x08interval\x01\x13\0\x05by\
tea\x01=\0\x04json\x01s\0\x05jsonb\x01s\0\x08jsonpath\x01s\0\x03xml\x01s\0\x04uu\
id\x01\x0b\0\x04inet\x01\x0d\0\x04cidr\x01\x0d\0\x07macaddr\x01\x0f\0\x03bit\x01\
>\0\x06varbit\x01>\0\x09int4range\x01!\0\x09int8range\x01#\0\x08numrange\x01%\0\x07\
tsrange\x01'\0\x09tstzrange\x01)\0\x09daterange\x01+\0\x05money\x01x\0\x03oid\x01\
y\0\x0benumeration\x01/\0\x09composite\x014\0\x06domain\x016\0\x05array\x012\0\x05\
range\x01<\0\x04null\0\0\x04\0\x08db-value\x03\0?\x04\0\x13lazy-db-column-type\x03\
\x01\x01iA\x01o\x02s\xc2\0\x01p\xc3\0\x01r\x02\x04names\x0aattributes\xc4\0\x04\0\
\x0ecomposite-type\x03\0E\x01r\x02\x04names\x09base-type\xc2\0\x04\0\x0bdomain-t\
ype\x03\0G\x01r\x02\x04names\x09base-type\xc2\0\x04\0\x0arange-type\x03\0I\x01q)\
\x09character\0\0\x04int2\0\0\x04int4\0\0\x04int8\0\0\x06float4\0\0\x06float8\0\0\
\x07numeric\0\0\x07boolean\0\0\x04text\0\0\x07varchar\0\0\x06bpchar\0\0\x09times\
tamp\0\0\x0btimestamptz\0\0\x04date\0\0\x04time\0\0\x06timetz\0\0\x08interval\0\0\
\x05bytea\0\0\x04uuid\0\0\x03xml\0\0\x04json\0\0\x05jsonb\0\0\x08jsonpath\0\0\x04\
inet\0\0\x04cidr\0\0\x07macaddr\0\0\x03bit\0\0\x06varbit\0\0\x09int4range\0\0\x09\
int8range\0\0\x08numrange\0\0\x07tsrange\0\0\x09tstzrange\0\0\x09daterange\0\0\x05\
money\0\0\x03oid\0\0\x0benumeration\x01-\0\x09composite\x01\xc6\0\0\x06domain\x01\
\xc8\0\0\x05array\x01\xc2\0\0\x05range\x01\xca\0\0\x04\0\x0edb-column-type\x03\0\
K\x01r\x04\x07ordinalw\x04names\x07db-type\xcc\0\x0cdb-type-names\x04\0\x09db-co\
lumn\x03\0M\x01p\xc0\0\x01r\x01\x06values\xcf\0\x04\0\x06db-row\x03\0P\x01p\xce\0\
\x01p\xd1\0\x01r\x02\x07columns\xd2\0\x04rows\xd3\0\x04\0\x09db-result\x03\0T\x04\
\0\x10db-result-stream\x03\x01\x04\0\x0ddb-connection\x03\x01\x04\0\x0edb-transa\
ction\x03\x01\x01@\x01\x05value\xc0\0\01\x04\0\x1a[constructor]lazy-db-value\x01\
Y\x01h0\x01@\x01\x04self\xda\0\0\xc0\0\x04\0\x19[method]lazy-db-value.get\x01[\x01\
@\x01\x05value\xcc\0\0\xc2\0\x04\0\x20[constructor]lazy-db-column-type\x01\\\x01\
hA\x01@\x01\x04self\xdd\0\0\xcc\0\x04\0\x1f[method]lazy-db-column-type.get\x01^\x01\
hV\x01@\x01\x04self\xdf\0\0\xd2\0\x04\0$[method]db-result-stream.get-columns\x01\
`\x01k\xd3\0\x01@\x01\x04self\xdf\0\0\xe1\0\x04\0![method]db-result-stream.get-n\
ext\x01b\x01iW\x01j\x01\xe3\0\x01\x11\x01@\x01\x07addresss\0\xe4\0\x04\0\x1a[sta\
tic]db-connection.open\x01e\x01hW\x01j\x01\xd5\0\x01\x11\x01@\x03\x04self\xe6\0\x09\
statements\x06params\xcf\0\0\xe7\0\x04\0\x1b[method]db-connection.query\x01h\x01\
iV\x01j\x01\xe9\0\x01\x11\x01@\x03\x04self\xe6\0\x09statements\x06params\xcf\0\0\
\xea\0\x04\0\"[method]db-connection.query-stream\x01k\x01j\x01w\x01\x11\x01@\x03\
\x04self\xe6\0\x09statements\x06params\xcf\0\0\xec\0\x04\0\x1d[method]db-connect\
ion.execute\x01m\x01iX\x01j\x01\xee\0\x01\x11\x01@\x01\x04self\xe6\0\0\xef\0\x04\
\0'[method]db-connection.begin-transaction\x01p\x01hX\x01@\x03\x04self\xf1\0\x09\
statements\x06params\xcf\0\0\xe7\0\x04\0\x1c[method]db-transaction.query\x01r\x01\
@\x03\x04self\xf1\0\x09statements\x06params\xcf\0\0\xea\0\x04\0#[method]db-trans\
action.query-stream\x01s\x01@\x03\x04self\xf1\0\x09statements\x06params\xcf\0\0\xec\
\0\x04\0\x1e[method]db-transaction.execute\x01t\x01j\0\x01\x11\x01@\x01\x04self\xf1\
\0\0\xf5\0\x04\0\x1d[method]db-transaction.commit\x01v\x04\0\x1f[method]db-trans\
action.rollback\x01v\x03\0\x1agolem:rdbms/postgres@0.0.1\x05\x09\x01B>\x02\x03\x02\
\x01\x01\x04\0\x04date\x03\0\0\x02\x03\x02\x01\x02\x04\0\x04time\x03\0\x02\x02\x03\
\x02\x01\x04\x04\0\x09timestamp\x03\0\x04\x01q\x05\x12connection-failure\x01s\0\x17\
query-parameter-failure\x01s\0\x17query-execution-failure\x01s\0\x16query-respon\
se-failure\x01s\0\x05other\x01s\0\x04\0\x05error\x03\0\x06\x01q#\x07boolean\0\0\x07\
tinyint\0\0\x08smallint\0\0\x09mediumint\0\0\x03int\0\0\x06bigint\0\0\x10tinyint\
-unsigned\0\0\x11smallint-unsigned\0\0\x12mediumint-unsigned\0\0\x0cint-unsigned\
\0\0\x0fbigint-unsigned\0\0\x05float\0\0\x06double\0\0\x07decimal\0\0\x04date\0\0\
\x08datetime\0\0\x09timestamp\0\0\x04time\0\0\x04year\0\0\x07fixchar\0\0\x07varc\
har\0\0\x08tinytext\0\0\x04text\0\0\x0amediumtext\0\0\x08longtext\0\0\x06binary\0\
\0\x09varbinary\0\0\x08tinyblob\0\0\x04blob\0\0\x0amediumblob\0\0\x08longblob\0\0\
\x0benumeration\0\0\x03set\0\0\x03bit\0\0\x04json\0\0\x04\0\x0edb-column-type\x03\
\0\x08\x01r\x04\x07ordinalw\x04names\x07db-type\x09\x0cdb-type-names\x04\0\x09db\
-column\x03\0\x0a\x01p}\x01p\x7f\x01q$\x07boolean\x01\x7f\0\x07tinyint\x01~\0\x08\
smallint\x01|\0\x09mediumint\x01z\0\x03int\x01z\0\x06bigint\x01x\0\x10tinyint-un\
signed\x01}\0\x11smallint-unsigned\x01{\0\x12mediumint-unsigned\x01y\0\x0cint-un\
signed\x01y\0\x0fbigint-unsigned\x01w\0\x05float\x01v\0\x06double\x01u\0\x07deci\
mal\x01s\0\x04date\x01\x01\0\x08datetime\x01\x05\0\x09timestamp\x01\x05\0\x04tim\
e\x01\x03\0\x04year\x01{\0\x07fixchar\x01s\0\x07varchar\x01s\0\x08tinytext\x01s\0\
\x04text\x01s\0\x0amediumtext\x01s\0\x08longtext\x01s\0\x06binary\x01\x0c\0\x09v\
arbinary\x01\x0c\0\x08tinyblob\x01\x0c\0\x04blob\x01\x0c\0\x0amediumblob\x01\x0c\
\0\x08longblob\x01\x0c\0\x0benumeration\x01s\0\x03set\x01s\0\x03bit\x01\x0d\0\x04\
json\x01s\0\x04null\0\0\x04\0\x08db-value\x03\0\x0e\x01p\x0f\x01r\x01\x06values\x10\
\x04\0\x06db-row\x03\0\x11\x01p\x0b\x01p\x12\x01r\x02\x07columns\x13\x04rows\x14\
\x04\0\x09db-result\x03\0\x15\x04\0\x10db-result-stream\x03\x01\x04\0\x0ddb-conn\
ection\x03\x01\x04\0\x0edb-transaction\x03\x01\x01h\x17\x01@\x01\x04self\x1a\0\x13\
\x04\0$[method]db-result-stream.get-columns\x01\x1b\x01k\x14\x01@\x01\x04self\x1a\
\0\x1c\x04\0![method]db-result-stream.get-next\x01\x1d\x01i\x18\x01j\x01\x1e\x01\
\x07\x01@\x01\x07addresss\0\x1f\x04\0\x1a[static]db-connection.open\x01\x20\x01h\
\x18\x01j\x01\x16\x01\x07\x01@\x03\x04self!\x09statements\x06params\x10\0\"\x04\0\
\x1b[method]db-connection.query\x01#\x01i\x17\x01j\x01$\x01\x07\x01@\x03\x04self\
!\x09statements\x06params\x10\0%\x04\0\"[method]db-connection.query-stream\x01&\x01\
j\x01w\x01\x07\x01@\x03\x04self!\x09statements\x06params\x10\0'\x04\0\x1d[method\
]db-connection.execute\x01(\x01i\x19\x01j\x01)\x01\x07\x01@\x01\x04self!\0*\x04\0\
'[method]db-connection.begin-transaction\x01+\x01h\x19\x01@\x03\x04self,\x09stat\
ements\x06params\x10\0\"\x04\0\x1c[method]db-transaction.query\x01-\x01@\x03\x04\
self,\x09statements\x06params\x10\0%\x04\0#[method]db-transaction.query-stream\x01\
.\x01@\x03\x04self,\x09statements\x06params\x10\0'\x04\0\x1e[method]db-transacti\
on.execute\x01/\x01j\0\x01\x07\x01@\x01\x04self,\00\x04\0\x1d[method]db-transact\
ion.commit\x011\x04\0\x1f[method]db-transaction.rollback\x011\x03\0\x17golem:rdb\
ms/mysql@0.0.1\x05\x0a\x02\x03\0\x01\x09db-result\x02\x03\0\x02\x09db-result\x01\
B!\x02\x03\x02\x01\x0b\x04\0\x12postgres-db-result\x03\0\0\x02\x03\x02\x01\x0c\x04\
\0\x0fmysql-db-result\x03\0\x02\x01m\x03\x06commit\x08rollback\x04none\x04\0\x0f\
transaction-end\x03\0\x04\x01m\x03\x07execute\x05query\x0cquery-stream\x04\0\x10\
statement-action\x03\0\x06\x01ps\x01kw\x01r\x04\x09statements\x06params\x08\x06a\
ction\x07\x05sleep\x09\x04\0\x09statement\x03\0\x0a\x01q\x02\x07execute\x01w\0\x05\
query\x01\x03\0\x04\0\x0cmysql-result\x03\0\x0c\x01q\x02\x07execute\x01w\0\x05qu\
ery\x01\x01\0\x04\0\x0fpostgres-result\x03\0\x0e\x01@\0\0s\x04\0\x05check\x01\x10\
\x01p\x0b\x01j\x01\x0d\x01s\x01p\x12\x01j\x01\x13\x01s\x01@\x02\x0astatements\x11\
\x03end\x05\0\x14\x04\0\x11mysql-transaction\x01\x15\x01@\x01\x0astatements\x11\0\
\x14\x04\0\x10mysql-executions\x01\x16\x01j\x01\x0f\x01s\x01p\x17\x01j\x01\x18\x01\
s\x01@\x02\x0astatements\x11\x03end\x05\0\x19\x04\0\x14postgres-transaction\x01\x1a\
\x01@\x01\x0astatements\x11\0\x19\x04\0\x13postgres-executions\x01\x1b\x04\0\x0c\
golem:it/api\x05\x0d\x04\0\x16golem:it/rdbms-service\x04\0\x0b\x13\x01\0\x0drdbm\
s-service\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.\
220.0\x10wit-bindgen-rust\x060.36.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
