// Generated by `wit-bindgen` 0.25.0. DO NOT EDIT!
// Options used:
#[allow(dead_code)]
pub mod wasi {
    #[allow(dead_code)]
    pub mod rdbms {
        #[allow(dead_code, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[derive(Clone)]
            pub enum Error {
                ConnectionFailure(_rt::String),
                QueryParameterFailure(_rt::String),
                QueryExecutionFailure(_rt::String),
                QueryResponseFailure(_rt::String),
                Other(_rt::String),
            }
            impl ::core::fmt::Debug for Error {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        Error::ConnectionFailure(e) => {
                            f.debug_tuple("Error::ConnectionFailure").field(e).finish()
                        }
                        Error::QueryParameterFailure(e) => f
                            .debug_tuple("Error::QueryParameterFailure")
                            .field(e)
                            .finish(),
                        Error::QueryExecutionFailure(e) => f
                            .debug_tuple("Error::QueryExecutionFailure")
                            .field(e)
                            .finish(),
                        Error::QueryResponseFailure(e) => f
                            .debug_tuple("Error::QueryResponseFailure")
                            .field(e)
                            .finish(),
                        Error::Other(e) => f.debug_tuple("Error::Other").field(e).finish(),
                    }
                }
            }
            impl ::core::fmt::Display for Error {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }

            impl std::error::Error for Error {}
            /// variant db-column-type-info-primitive {
            /// integer(option<u8>),
            /// decimal(tuple<u8, u8>),
            /// float,
            /// boolean,
            /// datetime,
            /// interval,
            /// chars(option<u32>),
            /// text,
            /// binary(option<u32>),
            /// blob,
            /// enumeration(list<string>),
            /// json,
            /// xml,
            /// uuid,
            /// spatial
            /// }
            ///
            /// variant db-column-type-info {
            /// primitive(db-column-type-info-primitive),
            /// array(tuple<list<option<u32>>, db-column-type-info-primitive>)
            /// }
            ///
            /// flags db-column-type-flags {
            /// // Key constraints
            /// primary-key,     // Single or part of composite primary key
            /// foreign-key,     // References another table's key
            /// unique,          // Unique constraint
            ///
            /// // Core properties
            /// nullable,        // If not present, column is NOT NULL
            /// generated,       // Value is computed rather than stored directly
            /// auto-increment,  // MySQL AUTO_INCREMENT/PostgreSQL SERIAL/SQL Server IDENTITY
            ///
            /// // Common behaviors
            /// default-value,   // Has a default value defined
            /// indexed         // Participates in an index
            /// }
            ///
            /// /// Data types for database columns
            /// record db-column-type-meta {
            /// name:        string,
            /// db-type:     db-column-type-info,
            /// db-type-flags: db-column-type-flags,
            /// foreign-key: option<table-name>
            /// }
            #[derive(Clone, Copy)]
            pub enum DbColumnTypePrimitive {
                Int8,
                Int16,
                Int32,
                Int64,
                Float,
                Double,
                Decimal,
                Boolean,
                Timestamp,
                Date,
                Time,
                Interval,
                Text,
                Blob,
                Json,
                Xml,
                Uuid,
            }
            impl ::core::fmt::Debug for DbColumnTypePrimitive {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        DbColumnTypePrimitive::Int8 => {
                            f.debug_tuple("DbColumnTypePrimitive::Int8").finish()
                        }
                        DbColumnTypePrimitive::Int16 => {
                            f.debug_tuple("DbColumnTypePrimitive::Int16").finish()
                        }
                        DbColumnTypePrimitive::Int32 => {
                            f.debug_tuple("DbColumnTypePrimitive::Int32").finish()
                        }
                        DbColumnTypePrimitive::Int64 => {
                            f.debug_tuple("DbColumnTypePrimitive::Int64").finish()
                        }
                        DbColumnTypePrimitive::Float => {
                            f.debug_tuple("DbColumnTypePrimitive::Float").finish()
                        }
                        DbColumnTypePrimitive::Double => {
                            f.debug_tuple("DbColumnTypePrimitive::Double").finish()
                        }
                        DbColumnTypePrimitive::Decimal => {
                            f.debug_tuple("DbColumnTypePrimitive::Decimal").finish()
                        }
                        DbColumnTypePrimitive::Boolean => {
                            f.debug_tuple("DbColumnTypePrimitive::Boolean").finish()
                        }
                        DbColumnTypePrimitive::Timestamp => {
                            f.debug_tuple("DbColumnTypePrimitive::Timestamp").finish()
                        }
                        DbColumnTypePrimitive::Date => {
                            f.debug_tuple("DbColumnTypePrimitive::Date").finish()
                        }
                        DbColumnTypePrimitive::Time => {
                            f.debug_tuple("DbColumnTypePrimitive::Time").finish()
                        }
                        DbColumnTypePrimitive::Interval => {
                            f.debug_tuple("DbColumnTypePrimitive::Interval").finish()
                        }
                        DbColumnTypePrimitive::Text => {
                            f.debug_tuple("DbColumnTypePrimitive::Text").finish()
                        }
                        DbColumnTypePrimitive::Blob => {
                            f.debug_tuple("DbColumnTypePrimitive::Blob").finish()
                        }
                        DbColumnTypePrimitive::Json => {
                            f.debug_tuple("DbColumnTypePrimitive::Json").finish()
                        }
                        DbColumnTypePrimitive::Xml => {
                            f.debug_tuple("DbColumnTypePrimitive::Xml").finish()
                        }
                        DbColumnTypePrimitive::Uuid => {
                            f.debug_tuple("DbColumnTypePrimitive::Uuid").finish()
                        }
                    }
                }
            }
            #[derive(Clone, Copy)]
            pub enum DbColumnType {
                Primitive(DbColumnTypePrimitive),
                Array(DbColumnTypePrimitive),
            }
            impl ::core::fmt::Debug for DbColumnType {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        DbColumnType::Primitive(e) => {
                            f.debug_tuple("DbColumnType::Primitive").field(e).finish()
                        }
                        DbColumnType::Array(e) => {
                            f.debug_tuple("DbColumnType::Array").field(e).finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub struct DbColumn {
                pub ordinal: u64,
                pub name: _rt::String,
                pub db_type: DbColumnType,
                pub db_type_name: _rt::String,
            }
            impl ::core::fmt::Debug for DbColumn {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("DbColumn")
                        .field("ordinal", &self.ordinal)
                        .field("name", &self.name)
                        .field("db-type", &self.db_type)
                        .field("db-type-name", &self.db_type_name)
                        .finish()
                }
            }
            /// Value descriptor for a single database value
            #[derive(Clone)]
            pub enum DbValuePrimitive {
                Int8(i8),
                Int16(i16),
                Int32(i32),
                Int64(i64),
                Float(f32),
                Double(f64),
                Decimal(_rt::String),
                Boolean(bool),
                Timestamp(i64),
                Date(i64),
                Time(i64),
                Interval(i64),
                Text(_rt::String),
                Blob(_rt::Vec<u8>),
                Json(_rt::String),
                Xml(_rt::String),
                Uuid((u64, u64)),
                DbNull,
            }
            impl ::core::fmt::Debug for DbValuePrimitive {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        DbValuePrimitive::Int8(e) => {
                            f.debug_tuple("DbValuePrimitive::Int8").field(e).finish()
                        }
                        DbValuePrimitive::Int16(e) => {
                            f.debug_tuple("DbValuePrimitive::Int16").field(e).finish()
                        }
                        DbValuePrimitive::Int32(e) => {
                            f.debug_tuple("DbValuePrimitive::Int32").field(e).finish()
                        }
                        DbValuePrimitive::Int64(e) => {
                            f.debug_tuple("DbValuePrimitive::Int64").field(e).finish()
                        }
                        DbValuePrimitive::Float(e) => {
                            f.debug_tuple("DbValuePrimitive::Float").field(e).finish()
                        }
                        DbValuePrimitive::Double(e) => {
                            f.debug_tuple("DbValuePrimitive::Double").field(e).finish()
                        }
                        DbValuePrimitive::Decimal(e) => {
                            f.debug_tuple("DbValuePrimitive::Decimal").field(e).finish()
                        }
                        DbValuePrimitive::Boolean(e) => {
                            f.debug_tuple("DbValuePrimitive::Boolean").field(e).finish()
                        }
                        DbValuePrimitive::Timestamp(e) => f
                            .debug_tuple("DbValuePrimitive::Timestamp")
                            .field(e)
                            .finish(),
                        DbValuePrimitive::Date(e) => {
                            f.debug_tuple("DbValuePrimitive::Date").field(e).finish()
                        }
                        DbValuePrimitive::Time(e) => {
                            f.debug_tuple("DbValuePrimitive::Time").field(e).finish()
                        }
                        DbValuePrimitive::Interval(e) => f
                            .debug_tuple("DbValuePrimitive::Interval")
                            .field(e)
                            .finish(),
                        DbValuePrimitive::Text(e) => {
                            f.debug_tuple("DbValuePrimitive::Text").field(e).finish()
                        }
                        DbValuePrimitive::Blob(e) => {
                            f.debug_tuple("DbValuePrimitive::Blob").field(e).finish()
                        }
                        DbValuePrimitive::Json(e) => {
                            f.debug_tuple("DbValuePrimitive::Json").field(e).finish()
                        }
                        DbValuePrimitive::Xml(e) => {
                            f.debug_tuple("DbValuePrimitive::Xml").field(e).finish()
                        }
                        DbValuePrimitive::Uuid(e) => {
                            f.debug_tuple("DbValuePrimitive::Uuid").field(e).finish()
                        }
                        DbValuePrimitive::DbNull => {
                            f.debug_tuple("DbValuePrimitive::DbNull").finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub enum DbValue {
                Primitive(DbValuePrimitive),
                Array(_rt::Vec<DbValuePrimitive>),
            }
            impl ::core::fmt::Debug for DbValue {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        DbValue::Primitive(e) => {
                            f.debug_tuple("DbValue::Primitive").field(e).finish()
                        }
                        DbValue::Array(e) => f.debug_tuple("DbValue::Array").field(e).finish(),
                    }
                }
            }
            /// A single row of values
            #[derive(Clone)]
            pub struct DbRow {
                pub values: _rt::Vec<DbValue>,
            }
            impl ::core::fmt::Debug for DbRow {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("DbRow")
                        .field("values", &self.values)
                        .finish()
                }
            }
            /// A potentially very large and lazy stream of rows:

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct DbResultSet {
                handle: _rt::Resource<DbResultSet>,
            }

            impl DbResultSet {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for DbResultSet {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:rdbms/types@0.0.1")]
                        extern "C" {
                            #[link_name = "[resource-drop]db-result-set"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            impl DbResultSet {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_columns(&self) -> _rt::Vec<DbColumn> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:rdbms/types@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]db-result-set.get-columns"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let base16 = l1;
                        let len16 = l2;
                        let mut result16 = _rt::Vec::with_capacity(len16);
                        for i in 0..len16 {
                            let base = base16.add(i * 32);
                            let e16 = {
                                let l3 = *base.add(0).cast::<i64>();
                                let l4 = *base.add(8).cast::<*mut u8>();
                                let l5 = *base.add(12).cast::<usize>();
                                let len6 = l5;
                                let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);
                                let l7 = i32::from(*base.add(16).cast::<u8>());
                                let v12 = match l7 {
                                    0 => {
                                        let e12 = {
                                            let l8 = i32::from(*base.add(17).cast::<u8>());
                                            let v9 = match l8 {
                                                0 => DbColumnTypePrimitive::Int8,
                                                1 => DbColumnTypePrimitive::Int16,
                                                2 => DbColumnTypePrimitive::Int32,
                                                3 => DbColumnTypePrimitive::Int64,
                                                4 => DbColumnTypePrimitive::Float,
                                                5 => DbColumnTypePrimitive::Double,
                                                6 => DbColumnTypePrimitive::Decimal,
                                                7 => DbColumnTypePrimitive::Boolean,
                                                8 => DbColumnTypePrimitive::Timestamp,
                                                9 => DbColumnTypePrimitive::Date,
                                                10 => DbColumnTypePrimitive::Time,
                                                11 => DbColumnTypePrimitive::Interval,
                                                12 => DbColumnTypePrimitive::Text,
                                                13 => DbColumnTypePrimitive::Blob,
                                                14 => DbColumnTypePrimitive::Json,
                                                15 => DbColumnTypePrimitive::Xml,
                                                n => {
                                                    debug_assert_eq!(
                                                        n, 16,
                                                        "invalid enum discriminant"
                                                    );
                                                    DbColumnTypePrimitive::Uuid
                                                }
                                            };

                                            v9
                                        };
                                        DbColumnType::Primitive(e12)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 1, "invalid enum discriminant");
                                        let e12 = {
                                            let l10 = i32::from(*base.add(17).cast::<u8>());
                                            let v11 = match l10 {
                                                0 => DbColumnTypePrimitive::Int8,
                                                1 => DbColumnTypePrimitive::Int16,
                                                2 => DbColumnTypePrimitive::Int32,
                                                3 => DbColumnTypePrimitive::Int64,
                                                4 => DbColumnTypePrimitive::Float,
                                                5 => DbColumnTypePrimitive::Double,
                                                6 => DbColumnTypePrimitive::Decimal,
                                                7 => DbColumnTypePrimitive::Boolean,
                                                8 => DbColumnTypePrimitive::Timestamp,
                                                9 => DbColumnTypePrimitive::Date,
                                                10 => DbColumnTypePrimitive::Time,
                                                11 => DbColumnTypePrimitive::Interval,
                                                12 => DbColumnTypePrimitive::Text,
                                                13 => DbColumnTypePrimitive::Blob,
                                                14 => DbColumnTypePrimitive::Json,
                                                15 => DbColumnTypePrimitive::Xml,
                                                n => {
                                                    debug_assert_eq!(
                                                        n, 16,
                                                        "invalid enum discriminant"
                                                    );
                                                    DbColumnTypePrimitive::Uuid
                                                }
                                            };

                                            v11
                                        };
                                        DbColumnType::Array(e12)
                                    }
                                };
                                let l13 = *base.add(20).cast::<*mut u8>();
                                let l14 = *base.add(24).cast::<usize>();
                                let len15 = l14;
                                let bytes15 = _rt::Vec::from_raw_parts(l13.cast(), len15, len15);

                                DbColumn {
                                    ordinal: l3 as u64,
                                    name: _rt::string_lift(bytes6),
                                    db_type: v12,
                                    db_type_name: _rt::string_lift(bytes15),
                                }
                            };
                            result16.push(e16);
                        }
                        _rt::cabi_dealloc(base16, len16 * 32, 8);
                        result16
                    }
                }
            }
            impl DbResultSet {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_next(&self) -> Option<_rt::Vec<DbRow>> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:rdbms/types@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]db-result-set.get-next"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<*mut u8>();
                                    let l3 = *ptr0.add(8).cast::<usize>();
                                    let base72 = l2;
                                    let len72 = l3;
                                    let mut result72 = _rt::Vec::with_capacity(len72);
                                    for i in 0..len72 {
                                        let base = base72.add(i * 8);
                                        let e72 = {
                                            let l4 = *base.add(0).cast::<*mut u8>();
                                            let l5 = *base.add(4).cast::<usize>();
                                            let base71 = l4;
                                            let len71 = l5;
                                            let mut result71 = _rt::Vec::with_capacity(len71);
                                            for i in 0..len71 {
                                                let base = base71.add(i * 32);
                                                let e71 = {
                                                    let l6 = i32::from(*base.add(0).cast::<u8>());
                                                    let v70 = match l6 {
                                                        0 => {
                                                            let e70 = {
                                                                let l7 = i32::from(
                                                                    *base.add(8).cast::<u8>(),
                                                                );
                                                                let v36 = match l7 {
                                                                    0 => {
                                                                        let e36 = {
                                                                            let l8 = i32::from(
                                                                                *base
                                                                                    .add(16)
                                                                                    .cast::<i8>(),
                                                                            );

                                                                            l8 as i8
                                                                        };
                                                                        DbValuePrimitive::Int8(e36)
                                                                    }
                                                                    1 => {
                                                                        let e36 = {
                                                                            let l9 = i32::from(
                                                                                *base
                                                                                    .add(16)
                                                                                    .cast::<i16>(),
                                                                            );

                                                                            l9 as i16
                                                                        };
                                                                        DbValuePrimitive::Int16(e36)
                                                                    }
                                                                    2 => {
                                                                        let e36 = {
                                                                            let l10 = *base
                                                                                .add(16)
                                                                                .cast::<i32>();

                                                                            l10
                                                                        };
                                                                        DbValuePrimitive::Int32(e36)
                                                                    }
                                                                    3 => {
                                                                        let e36 = {
                                                                            let l11 = *base
                                                                                .add(16)
                                                                                .cast::<i64>();

                                                                            l11
                                                                        };
                                                                        DbValuePrimitive::Int64(e36)
                                                                    }
                                                                    4 => {
                                                                        let e36 = {
                                                                            let l12 = *base
                                                                                .add(16)
                                                                                .cast::<f32>();

                                                                            l12
                                                                        };
                                                                        DbValuePrimitive::Float(e36)
                                                                    }
                                                                    5 => {
                                                                        let e36 = {
                                                                            let l13 = *base
                                                                                .add(16)
                                                                                .cast::<f64>();

                                                                            l13
                                                                        };
                                                                        DbValuePrimitive::Double(
                                                                            e36,
                                                                        )
                                                                    }
                                                                    6 => {
                                                                        let e36 = {
                                                                            let l14 = *base
                                                                                .add(16)
                                                                                .cast::<*mut u8>();
                                                                            let l15 = *base
                                                                                .add(20)
                                                                                .cast::<usize>();
                                                                            let len16 = l15;
                                                                            let bytes16 = _rt::Vec::from_raw_parts(l14.cast(), len16, len16);

                                                                            _rt::string_lift(
                                                                                bytes16,
                                                                            )
                                                                        };
                                                                        DbValuePrimitive::Decimal(
                                                                            e36,
                                                                        )
                                                                    }
                                                                    7 => {
                                                                        let e36 = {
                                                                            let l17 = i32::from(
                                                                                *base
                                                                                    .add(16)
                                                                                    .cast::<u8>(),
                                                                            );

                                                                            _rt::bool_lift(
                                                                                l17 as u8,
                                                                            )
                                                                        };
                                                                        DbValuePrimitive::Boolean(
                                                                            e36,
                                                                        )
                                                                    }
                                                                    8 => {
                                                                        let e36 = {
                                                                            let l18 = *base
                                                                                .add(16)
                                                                                .cast::<i64>();

                                                                            l18
                                                                        };
                                                                        DbValuePrimitive::Timestamp(
                                                                            e36,
                                                                        )
                                                                    }
                                                                    9 => {
                                                                        let e36 = {
                                                                            let l19 = *base
                                                                                .add(16)
                                                                                .cast::<i64>();

                                                                            l19
                                                                        };
                                                                        DbValuePrimitive::Date(e36)
                                                                    }
                                                                    10 => {
                                                                        let e36 = {
                                                                            let l20 = *base
                                                                                .add(16)
                                                                                .cast::<i64>();

                                                                            l20
                                                                        };
                                                                        DbValuePrimitive::Time(e36)
                                                                    }
                                                                    11 => {
                                                                        let e36 = {
                                                                            let l21 = *base
                                                                                .add(16)
                                                                                .cast::<i64>();

                                                                            l21
                                                                        };
                                                                        DbValuePrimitive::Interval(
                                                                            e36,
                                                                        )
                                                                    }
                                                                    12 => {
                                                                        let e36 = {
                                                                            let l22 = *base
                                                                                .add(16)
                                                                                .cast::<*mut u8>();
                                                                            let l23 = *base
                                                                                .add(20)
                                                                                .cast::<usize>();
                                                                            let len24 = l23;
                                                                            let bytes24 = _rt::Vec::from_raw_parts(l22.cast(), len24, len24);

                                                                            _rt::string_lift(
                                                                                bytes24,
                                                                            )
                                                                        };
                                                                        DbValuePrimitive::Text(e36)
                                                                    }
                                                                    13 => {
                                                                        let e36 = {
                                                                            let l25 = *base
                                                                                .add(16)
                                                                                .cast::<*mut u8>();
                                                                            let l26 = *base
                                                                                .add(20)
                                                                                .cast::<usize>();
                                                                            let len27 = l26;

                                                                            _rt::Vec::from_raw_parts(
                                                                                l25.cast(),
                                                                                len27,
                                                                                len27,
                                                                            )
                                                                        };
                                                                        DbValuePrimitive::Blob(e36)
                                                                    }
                                                                    14 => {
                                                                        let e36 = {
                                                                            let l28 = *base
                                                                                .add(16)
                                                                                .cast::<*mut u8>();
                                                                            let l29 = *base
                                                                                .add(20)
                                                                                .cast::<usize>();
                                                                            let len30 = l29;
                                                                            let bytes30 = _rt::Vec::from_raw_parts(l28.cast(), len30, len30);

                                                                            _rt::string_lift(
                                                                                bytes30,
                                                                            )
                                                                        };
                                                                        DbValuePrimitive::Json(e36)
                                                                    }
                                                                    15 => {
                                                                        let e36 = {
                                                                            let l31 = *base
                                                                                .add(16)
                                                                                .cast::<*mut u8>();
                                                                            let l32 = *base
                                                                                .add(20)
                                                                                .cast::<usize>();
                                                                            let len33 = l32;
                                                                            let bytes33 = _rt::Vec::from_raw_parts(l31.cast(), len33, len33);

                                                                            _rt::string_lift(
                                                                                bytes33,
                                                                            )
                                                                        };
                                                                        DbValuePrimitive::Xml(e36)
                                                                    }
                                                                    16 => {
                                                                        let e36 = {
                                                                            let l34 = *base
                                                                                .add(16)
                                                                                .cast::<i64>();
                                                                            let l35 = *base
                                                                                .add(24)
                                                                                .cast::<i64>();

                                                                            (l34 as u64, l35 as u64)
                                                                        };
                                                                        DbValuePrimitive::Uuid(e36)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 17, "invalid enum discriminant");
                                                                        DbValuePrimitive::DbNull
                                                                    }
                                                                };

                                                                v36
                                                            };
                                                            DbValue::Primitive(e70)
                                                        }
                                                        n => {
                                                            debug_assert_eq!(
                                                                n, 1,
                                                                "invalid enum discriminant"
                                                            );
                                                            let e70 = {
                                                                let l37 =
                                                                    *base.add(8).cast::<*mut u8>();
                                                                let l38 =
                                                                    *base.add(12).cast::<usize>();
                                                                let base69 = l37;
                                                                let len69 = l38;
                                                                let mut result69 =
                                                                    _rt::Vec::with_capacity(len69);
                                                                for i in 0..len69 {
                                                                    let base = base69.add(i * 24);
                                                                    let e69 = {
                                                                        let l39 = i32::from(
                                                                            *base
                                                                                .add(0)
                                                                                .cast::<u8>(),
                                                                        );
                                                                        let v68 = match l39 {
                                                                            0 => {
                                                                                let e68 = {
                                                                                    let l40 = i32::from(*base.add(8).cast::<i8>());

                                                                                    l40 as i8
                                                                                };
                                                                                DbValuePrimitive::Int8(e68)
                                                                            }
                                                                            1 => {
                                                                                let e68 = {
                                                                                    let l41 = i32::from(*base.add(8).cast::<i16>());

                                                                                    l41 as i16
                                                                                };
                                                                                DbValuePrimitive::Int16(e68)
                                                                            }
                                                                            2 => {
                                                                                let e68 = {
                                                                                    let l42 = *base.add(8).cast::<i32>();

                                                                                    l42
                                                                                };
                                                                                DbValuePrimitive::Int32(e68)
                                                                            }
                                                                            3 => {
                                                                                let e68 = {
                                                                                    let l43 = *base.add(8).cast::<i64>();

                                                                                    l43
                                                                                };
                                                                                DbValuePrimitive::Int64(e68)
                                                                            }
                                                                            4 => {
                                                                                let e68 = {
                                                                                    let l44 = *base.add(8).cast::<f32>();

                                                                                    l44
                                                                                };
                                                                                DbValuePrimitive::Float(e68)
                                                                            }
                                                                            5 => {
                                                                                let e68 = {
                                                                                    let l45 = *base.add(8).cast::<f64>();

                                                                                    l45
                                                                                };
                                                                                DbValuePrimitive::Double(e68)
                                                                            }
                                                                            6 => {
                                                                                let e68 = {
                                                                                    let l46 = *base.add(8).cast::<*mut u8>();
                                                                                    let l47 = *base.add(12).cast::<usize>();
                                                                                    let len48 = l47;
                                                                                    let bytes48 = _rt::Vec::from_raw_parts(l46.cast(), len48, len48);

                                                                                    _rt::string_lift(
                                                                                        bytes48,
                                                                                    )
                                                                                };
                                                                                DbValuePrimitive::Decimal(e68)
                                                                            }
                                                                            7 => {
                                                                                let e68 = {
                                                                                    let l49 = i32::from(*base.add(8).cast::<u8>());

                                                                                    _rt::bool_lift(
                                                                                        l49 as u8,
                                                                                    )
                                                                                };
                                                                                DbValuePrimitive::Boolean(e68)
                                                                            }
                                                                            8 => {
                                                                                let e68 = {
                                                                                    let l50 = *base.add(8).cast::<i64>();

                                                                                    l50
                                                                                };
                                                                                DbValuePrimitive::Timestamp(e68)
                                                                            }
                                                                            9 => {
                                                                                let e68 = {
                                                                                    let l51 = *base.add(8).cast::<i64>();

                                                                                    l51
                                                                                };
                                                                                DbValuePrimitive::Date(e68)
                                                                            }
                                                                            10 => {
                                                                                let e68 = {
                                                                                    let l52 = *base.add(8).cast::<i64>();

                                                                                    l52
                                                                                };
                                                                                DbValuePrimitive::Time(e68)
                                                                            }
                                                                            11 => {
                                                                                let e68 = {
                                                                                    let l53 = *base.add(8).cast::<i64>();

                                                                                    l53
                                                                                };
                                                                                DbValuePrimitive::Interval(e68)
                                                                            }
                                                                            12 => {
                                                                                let e68 = {
                                                                                    let l54 = *base.add(8).cast::<*mut u8>();
                                                                                    let l55 = *base.add(12).cast::<usize>();
                                                                                    let len56 = l55;
                                                                                    let bytes56 = _rt::Vec::from_raw_parts(l54.cast(), len56, len56);

                                                                                    _rt::string_lift(
                                                                                        bytes56,
                                                                                    )
                                                                                };
                                                                                DbValuePrimitive::Text(e68)
                                                                            }
                                                                            13 => {
                                                                                let e68 = {
                                                                                    let l57 = *base.add(8).cast::<*mut u8>();
                                                                                    let l58 = *base.add(12).cast::<usize>();
                                                                                    let len59 = l58;

                                                                                    _rt::Vec::from_raw_parts(l57.cast(), len59, len59)
                                                                                };
                                                                                DbValuePrimitive::Blob(e68)
                                                                            }
                                                                            14 => {
                                                                                let e68 = {
                                                                                    let l60 = *base.add(8).cast::<*mut u8>();
                                                                                    let l61 = *base.add(12).cast::<usize>();
                                                                                    let len62 = l61;
                                                                                    let bytes62 = _rt::Vec::from_raw_parts(l60.cast(), len62, len62);

                                                                                    _rt::string_lift(
                                                                                        bytes62,
                                                                                    )
                                                                                };
                                                                                DbValuePrimitive::Json(e68)
                                                                            }
                                                                            15 => {
                                                                                let e68 = {
                                                                                    let l63 = *base.add(8).cast::<*mut u8>();
                                                                                    let l64 = *base.add(12).cast::<usize>();
                                                                                    let len65 = l64;
                                                                                    let bytes65 = _rt::Vec::from_raw_parts(l63.cast(), len65, len65);

                                                                                    _rt::string_lift(
                                                                                        bytes65,
                                                                                    )
                                                                                };
                                                                                DbValuePrimitive::Xml(e68)
                                                                            }
                                                                            16 => {
                                                                                let e68 = {
                                                                                    let l66 = *base.add(8).cast::<i64>();
                                                                                    let l67 = *base.add(16).cast::<i64>();

                                                                                    (
                                                                                        l66 as u64,
                                                                                        l67 as u64,
                                                                                    )
                                                                                };
                                                                                DbValuePrimitive::Uuid(e68)
                                                                            }
                                                                            n => {
                                                                                debug_assert_eq!(n, 17, "invalid enum discriminant");
                                                                                DbValuePrimitive::DbNull
                                                                            }
                                                                        };

                                                                        v68
                                                                    };
                                                                    result69.push(e69);
                                                                }
                                                                _rt::cabi_dealloc(
                                                                    base69,
                                                                    len69 * 24,
                                                                    8,
                                                                );

                                                                result69
                                                            };
                                                            DbValue::Array(e70)
                                                        }
                                                    };

                                                    v70
                                                };
                                                result71.push(e71);
                                            }
                                            _rt::cabi_dealloc(base71, len71 * 32, 8);

                                            DbRow { values: result71 }
                                        };
                                        result72.push(e72);
                                    }
                                    _rt::cabi_dealloc(base72, len72 * 8, 4);

                                    result72
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
        }

        #[allow(dead_code, clippy::all)]
        pub mod postgres {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type DbResultSet = super::super::super::wasi::rdbms::types::DbResultSet;
            pub type DbValue = super::super::super::wasi::rdbms::types::DbValue;
            pub type Error = super::super::super::wasi::rdbms::types::Error;

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct DbConnection {
                handle: _rt::Resource<DbConnection>,
            }

            impl DbConnection {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for DbConnection {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:rdbms/postgres@0.0.1")]
                        extern "C" {
                            #[link_name = "[resource-drop]db-connection"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            impl DbConnection {
                #[allow(unused_unsafe, clippy::all)]
                pub fn open(address: &str) -> Result<DbConnection, Error> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let vec0 = address;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:rdbms/postgres@0.0.1")]
                        extern "C" {
                            #[link_name = "[static]db-connection.open"]
                            fn wit_import(_: *mut u8, _: usize, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import(ptr0.cast_mut(), len0, ptr1);
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => {
                                let e = {
                                    let l3 = *ptr1.add(4).cast::<i32>();

                                    DbConnection::from_handle(l3 as u32)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l4 = i32::from(*ptr1.add(4).cast::<u8>());
                                    use super::super::super::wasi::rdbms::types::Error as V20;
                                    let v20 = match l4 {
                                        0 => {
                                            let e20 = {
                                                let l5 = *ptr1.add(8).cast::<*mut u8>();
                                                let l6 = *ptr1.add(12).cast::<usize>();
                                                let len7 = l6;
                                                let bytes7 =
                                                    _rt::Vec::from_raw_parts(l5.cast(), len7, len7);

                                                _rt::string_lift(bytes7)
                                            };
                                            V20::ConnectionFailure(e20)
                                        }
                                        1 => {
                                            let e20 = {
                                                let l8 = *ptr1.add(8).cast::<*mut u8>();
                                                let l9 = *ptr1.add(12).cast::<usize>();
                                                let len10 = l9;
                                                let bytes10 = _rt::Vec::from_raw_parts(
                                                    l8.cast(),
                                                    len10,
                                                    len10,
                                                );

                                                _rt::string_lift(bytes10)
                                            };
                                            V20::QueryParameterFailure(e20)
                                        }
                                        2 => {
                                            let e20 = {
                                                let l11 = *ptr1.add(8).cast::<*mut u8>();
                                                let l12 = *ptr1.add(12).cast::<usize>();
                                                let len13 = l12;
                                                let bytes13 = _rt::Vec::from_raw_parts(
                                                    l11.cast(),
                                                    len13,
                                                    len13,
                                                );

                                                _rt::string_lift(bytes13)
                                            };
                                            V20::QueryExecutionFailure(e20)
                                        }
                                        3 => {
                                            let e20 = {
                                                let l14 = *ptr1.add(8).cast::<*mut u8>();
                                                let l15 = *ptr1.add(12).cast::<usize>();
                                                let len16 = l15;
                                                let bytes16 = _rt::Vec::from_raw_parts(
                                                    l14.cast(),
                                                    len16,
                                                    len16,
                                                );

                                                _rt::string_lift(bytes16)
                                            };
                                            V20::QueryResponseFailure(e20)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 4, "invalid enum discriminant");
                                            let e20 = {
                                                let l17 = *ptr1.add(8).cast::<*mut u8>();
                                                let l18 = *ptr1.add(12).cast::<usize>();
                                                let len19 = l18;
                                                let bytes19 = _rt::Vec::from_raw_parts(
                                                    l17.cast(),
                                                    len19,
                                                    len19,
                                                );

                                                _rt::string_lift(bytes19)
                                            };
                                            V20::Other(e20)
                                        }
                                    };

                                    v20
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl DbConnection {
                #[allow(unused_unsafe, clippy::all)]
                pub fn query(
                    &self,
                    statement: &str,
                    params: &[DbValue],
                ) -> Result<DbResultSet, Error> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let vec0 = statement;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec17 = params;
                        let len17 = vec17.len();
                        let layout17 =
                            _rt::alloc::Layout::from_size_align_unchecked(vec17.len() * 32, 8);
                        let result17 = if layout17.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout17).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout17);
                            }
                            ptr
                        } else {
                            {
                                ::core::ptr::null_mut()
                            }
                        };
                        for (i, e) in vec17.into_iter().enumerate() {
                            let base = result17.add(i * 32);
                            {
                                use super::super::super::wasi::rdbms::types::DbValue as V16;
                                match e {
                                    V16::Primitive(e) => {
                                        *base.add(0).cast::<u8>() = (0i32) as u8;
                                        use super::super::super::wasi::rdbms::types::DbValuePrimitive as V7;
                                        match e {
                                            V7::Int8(e) => {
                                                *base.add(8).cast::<u8>() = (0i32) as u8;
                                                *base.add(16).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            V7::Int16(e) => {
                                                *base.add(8).cast::<u8>() = (1i32) as u8;
                                                *base.add(16).cast::<u16>() =
                                                    (_rt::as_i32(e)) as u16;
                                            }
                                            V7::Int32(e) => {
                                                *base.add(8).cast::<u8>() = (2i32) as u8;
                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            V7::Int64(e) => {
                                                *base.add(8).cast::<u8>() = (3i32) as u8;
                                                *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            V7::Float(e) => {
                                                *base.add(8).cast::<u8>() = (4i32) as u8;
                                                *base.add(16).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            V7::Double(e) => {
                                                *base.add(8).cast::<u8>() = (5i32) as u8;
                                                *base.add(16).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            V7::Decimal(e) => {
                                                *base.add(8).cast::<u8>() = (6i32) as u8;
                                                let vec1 = e;
                                                let ptr1 = vec1.as_ptr().cast::<u8>();
                                                let len1 = vec1.len();
                                                *base.add(20).cast::<usize>() = len1;
                                                *base.add(16).cast::<*mut u8>() = ptr1.cast_mut();
                                            }
                                            V7::Boolean(e) => {
                                                *base.add(8).cast::<u8>() = (7i32) as u8;
                                                *base.add(16).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                })
                                                    as u8;
                                            }
                                            V7::Timestamp(e) => {
                                                *base.add(8).cast::<u8>() = (8i32) as u8;
                                                *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            V7::Date(e) => {
                                                *base.add(8).cast::<u8>() = (9i32) as u8;
                                                *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            V7::Time(e) => {
                                                *base.add(8).cast::<u8>() = (10i32) as u8;
                                                *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            V7::Interval(e) => {
                                                *base.add(8).cast::<u8>() = (11i32) as u8;
                                                *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            V7::Text(e) => {
                                                *base.add(8).cast::<u8>() = (12i32) as u8;
                                                let vec2 = e;
                                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                                let len2 = vec2.len();
                                                *base.add(20).cast::<usize>() = len2;
                                                *base.add(16).cast::<*mut u8>() = ptr2.cast_mut();
                                            }
                                            V7::Blob(e) => {
                                                *base.add(8).cast::<u8>() = (13i32) as u8;
                                                let vec3 = e;
                                                let ptr3 = vec3.as_ptr().cast::<u8>();
                                                let len3 = vec3.len();
                                                *base.add(20).cast::<usize>() = len3;
                                                *base.add(16).cast::<*mut u8>() = ptr3.cast_mut();
                                            }
                                            V7::Json(e) => {
                                                *base.add(8).cast::<u8>() = (14i32) as u8;
                                                let vec4 = e;
                                                let ptr4 = vec4.as_ptr().cast::<u8>();
                                                let len4 = vec4.len();
                                                *base.add(20).cast::<usize>() = len4;
                                                *base.add(16).cast::<*mut u8>() = ptr4.cast_mut();
                                            }
                                            V7::Xml(e) => {
                                                *base.add(8).cast::<u8>() = (15i32) as u8;
                                                let vec5 = e;
                                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                                let len5 = vec5.len();
                                                *base.add(20).cast::<usize>() = len5;
                                                *base.add(16).cast::<*mut u8>() = ptr5.cast_mut();
                                            }
                                            V7::Uuid(e) => {
                                                *base.add(8).cast::<u8>() = (16i32) as u8;
                                                let (t6_0, t6_1) = e;
                                                *base.add(16).cast::<i64>() = _rt::as_i64(t6_0);
                                                *base.add(24).cast::<i64>() = _rt::as_i64(t6_1);
                                            }
                                            V7::DbNull => {
                                                *base.add(8).cast::<u8>() = (17i32) as u8;
                                            }
                                        }
                                    }
                                    V16::Array(e) => {
                                        *base.add(0).cast::<u8>() = (1i32) as u8;
                                        let vec15 = e;
                                        let len15 = vec15.len();
                                        let layout15 =
                                            _rt::alloc::Layout::from_size_align_unchecked(
                                                vec15.len() * 24,
                                                8,
                                            );
                                        let result15 = if layout15.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout15).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout15);
                                            }
                                            ptr
                                        } else {
                                            {
                                                ::core::ptr::null_mut()
                                            }
                                        };
                                        for (i, e) in vec15.into_iter().enumerate() {
                                            let base = result15.add(i * 24);
                                            {
                                                use super::super::super::wasi::rdbms::types::DbValuePrimitive as V14;
                                                match e {
                                                    V14::Int8(e) => {
                                                        *base.add(0).cast::<u8>() = (0i32) as u8;
                                                        *base.add(8).cast::<u8>() =
                                                            (_rt::as_i32(e)) as u8;
                                                    }
                                                    V14::Int16(e) => {
                                                        *base.add(0).cast::<u8>() = (1i32) as u8;
                                                        *base.add(8).cast::<u16>() =
                                                            (_rt::as_i32(e)) as u16;
                                                    }
                                                    V14::Int32(e) => {
                                                        *base.add(0).cast::<u8>() = (2i32) as u8;
                                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    V14::Int64(e) => {
                                                        *base.add(0).cast::<u8>() = (3i32) as u8;
                                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                    }
                                                    V14::Float(e) => {
                                                        *base.add(0).cast::<u8>() = (4i32) as u8;
                                                        *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                                    }
                                                    V14::Double(e) => {
                                                        *base.add(0).cast::<u8>() = (5i32) as u8;
                                                        *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                                    }
                                                    V14::Decimal(e) => {
                                                        *base.add(0).cast::<u8>() = (6i32) as u8;
                                                        let vec8 = e;
                                                        let ptr8 = vec8.as_ptr().cast::<u8>();
                                                        let len8 = vec8.len();
                                                        *base.add(12).cast::<usize>() = len8;
                                                        *base.add(8).cast::<*mut u8>() =
                                                            ptr8.cast_mut();
                                                    }
                                                    V14::Boolean(e) => {
                                                        *base.add(0).cast::<u8>() = (7i32) as u8;
                                                        *base.add(8).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        })
                                                            as u8;
                                                    }
                                                    V14::Timestamp(e) => {
                                                        *base.add(0).cast::<u8>() = (8i32) as u8;
                                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                    }
                                                    V14::Date(e) => {
                                                        *base.add(0).cast::<u8>() = (9i32) as u8;
                                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                    }
                                                    V14::Time(e) => {
                                                        *base.add(0).cast::<u8>() = (10i32) as u8;
                                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                    }
                                                    V14::Interval(e) => {
                                                        *base.add(0).cast::<u8>() = (11i32) as u8;
                                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                    }
                                                    V14::Text(e) => {
                                                        *base.add(0).cast::<u8>() = (12i32) as u8;
                                                        let vec9 = e;
                                                        let ptr9 = vec9.as_ptr().cast::<u8>();
                                                        let len9 = vec9.len();
                                                        *base.add(12).cast::<usize>() = len9;
                                                        *base.add(8).cast::<*mut u8>() =
                                                            ptr9.cast_mut();
                                                    }
                                                    V14::Blob(e) => {
                                                        *base.add(0).cast::<u8>() = (13i32) as u8;
                                                        let vec10 = e;
                                                        let ptr10 = vec10.as_ptr().cast::<u8>();
                                                        let len10 = vec10.len();
                                                        *base.add(12).cast::<usize>() = len10;
                                                        *base.add(8).cast::<*mut u8>() =
                                                            ptr10.cast_mut();
                                                    }
                                                    V14::Json(e) => {
                                                        *base.add(0).cast::<u8>() = (14i32) as u8;
                                                        let vec11 = e;
                                                        let ptr11 = vec11.as_ptr().cast::<u8>();
                                                        let len11 = vec11.len();
                                                        *base.add(12).cast::<usize>() = len11;
                                                        *base.add(8).cast::<*mut u8>() =
                                                            ptr11.cast_mut();
                                                    }
                                                    V14::Xml(e) => {
                                                        *base.add(0).cast::<u8>() = (15i32) as u8;
                                                        let vec12 = e;
                                                        let ptr12 = vec12.as_ptr().cast::<u8>();
                                                        let len12 = vec12.len();
                                                        *base.add(12).cast::<usize>() = len12;
                                                        *base.add(8).cast::<*mut u8>() =
                                                            ptr12.cast_mut();
                                                    }
                                                    V14::Uuid(e) => {
                                                        *base.add(0).cast::<u8>() = (16i32) as u8;
                                                        let (t13_0, t13_1) = e;
                                                        *base.add(8).cast::<i64>() =
                                                            _rt::as_i64(t13_0);
                                                        *base.add(16).cast::<i64>() =
                                                            _rt::as_i64(t13_1);
                                                    }
                                                    V14::DbNull => {
                                                        *base.add(0).cast::<u8>() = (17i32) as u8;
                                                    }
                                                }
                                            }
                                        }
                                        *base.add(12).cast::<usize>() = len15;
                                        *base.add(8).cast::<*mut u8>() = result15;
                                        cleanup_list.extend_from_slice(&[(result15, layout15)]);
                                    }
                                }
                            }
                        }
                        let ptr18 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:rdbms/postgres@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]db-connection.query"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            result17,
                            len17,
                            ptr18,
                        );
                        let l19 = i32::from(*ptr18.add(0).cast::<u8>());
                        if layout17.size() != 0 {
                            _rt::alloc::dealloc(result17.cast(), layout17);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l19 {
                            0 => {
                                let e = {
                                    let l20 = *ptr18.add(4).cast::<i32>();

                                    super::super::super::wasi::rdbms::types::DbResultSet::from_handle(l20 as u32)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l21 = i32::from(*ptr18.add(4).cast::<u8>());
                                    use super::super::super::wasi::rdbms::types::Error as V37;
                                    let v37 = match l21 {
                                        0 => {
                                            let e37 = {
                                                let l22 = *ptr18.add(8).cast::<*mut u8>();
                                                let l23 = *ptr18.add(12).cast::<usize>();
                                                let len24 = l23;
                                                let bytes24 = _rt::Vec::from_raw_parts(
                                                    l22.cast(),
                                                    len24,
                                                    len24,
                                                );

                                                _rt::string_lift(bytes24)
                                            };
                                            V37::ConnectionFailure(e37)
                                        }
                                        1 => {
                                            let e37 = {
                                                let l25 = *ptr18.add(8).cast::<*mut u8>();
                                                let l26 = *ptr18.add(12).cast::<usize>();
                                                let len27 = l26;
                                                let bytes27 = _rt::Vec::from_raw_parts(
                                                    l25.cast(),
                                                    len27,
                                                    len27,
                                                );

                                                _rt::string_lift(bytes27)
                                            };
                                            V37::QueryParameterFailure(e37)
                                        }
                                        2 => {
                                            let e37 = {
                                                let l28 = *ptr18.add(8).cast::<*mut u8>();
                                                let l29 = *ptr18.add(12).cast::<usize>();
                                                let len30 = l29;
                                                let bytes30 = _rt::Vec::from_raw_parts(
                                                    l28.cast(),
                                                    len30,
                                                    len30,
                                                );

                                                _rt::string_lift(bytes30)
                                            };
                                            V37::QueryExecutionFailure(e37)
                                        }
                                        3 => {
                                            let e37 = {
                                                let l31 = *ptr18.add(8).cast::<*mut u8>();
                                                let l32 = *ptr18.add(12).cast::<usize>();
                                                let len33 = l32;
                                                let bytes33 = _rt::Vec::from_raw_parts(
                                                    l31.cast(),
                                                    len33,
                                                    len33,
                                                );

                                                _rt::string_lift(bytes33)
                                            };
                                            V37::QueryResponseFailure(e37)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 4, "invalid enum discriminant");
                                            let e37 = {
                                                let l34 = *ptr18.add(8).cast::<*mut u8>();
                                                let l35 = *ptr18.add(12).cast::<usize>();
                                                let len36 = l35;
                                                let bytes36 = _rt::Vec::from_raw_parts(
                                                    l34.cast(),
                                                    len36,
                                                    len36,
                                                );

                                                _rt::string_lift(bytes36)
                                            };
                                            V37::Other(e37)
                                        }
                                    };

                                    v37
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl DbConnection {
                #[allow(unused_unsafe, clippy::all)]
                pub fn execute(&self, statement: &str, params: &[DbValue]) -> Result<u64, Error> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 24]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 24]);
                        let vec0 = statement;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec17 = params;
                        let len17 = vec17.len();
                        let layout17 =
                            _rt::alloc::Layout::from_size_align_unchecked(vec17.len() * 32, 8);
                        let result17 = if layout17.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout17).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout17);
                            }
                            ptr
                        } else {
                            {
                                ::core::ptr::null_mut()
                            }
                        };
                        for (i, e) in vec17.into_iter().enumerate() {
                            let base = result17.add(i * 32);
                            {
                                use super::super::super::wasi::rdbms::types::DbValue as V16;
                                match e {
                                    V16::Primitive(e) => {
                                        *base.add(0).cast::<u8>() = (0i32) as u8;
                                        use super::super::super::wasi::rdbms::types::DbValuePrimitive as V7;
                                        match e {
                                            V7::Int8(e) => {
                                                *base.add(8).cast::<u8>() = (0i32) as u8;
                                                *base.add(16).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            V7::Int16(e) => {
                                                *base.add(8).cast::<u8>() = (1i32) as u8;
                                                *base.add(16).cast::<u16>() =
                                                    (_rt::as_i32(e)) as u16;
                                            }
                                            V7::Int32(e) => {
                                                *base.add(8).cast::<u8>() = (2i32) as u8;
                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            V7::Int64(e) => {
                                                *base.add(8).cast::<u8>() = (3i32) as u8;
                                                *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            V7::Float(e) => {
                                                *base.add(8).cast::<u8>() = (4i32) as u8;
                                                *base.add(16).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            V7::Double(e) => {
                                                *base.add(8).cast::<u8>() = (5i32) as u8;
                                                *base.add(16).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            V7::Decimal(e) => {
                                                *base.add(8).cast::<u8>() = (6i32) as u8;
                                                let vec1 = e;
                                                let ptr1 = vec1.as_ptr().cast::<u8>();
                                                let len1 = vec1.len();
                                                *base.add(20).cast::<usize>() = len1;
                                                *base.add(16).cast::<*mut u8>() = ptr1.cast_mut();
                                            }
                                            V7::Boolean(e) => {
                                                *base.add(8).cast::<u8>() = (7i32) as u8;
                                                *base.add(16).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                })
                                                    as u8;
                                            }
                                            V7::Timestamp(e) => {
                                                *base.add(8).cast::<u8>() = (8i32) as u8;
                                                *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            V7::Date(e) => {
                                                *base.add(8).cast::<u8>() = (9i32) as u8;
                                                *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            V7::Time(e) => {
                                                *base.add(8).cast::<u8>() = (10i32) as u8;
                                                *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            V7::Interval(e) => {
                                                *base.add(8).cast::<u8>() = (11i32) as u8;
                                                *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            V7::Text(e) => {
                                                *base.add(8).cast::<u8>() = (12i32) as u8;
                                                let vec2 = e;
                                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                                let len2 = vec2.len();
                                                *base.add(20).cast::<usize>() = len2;
                                                *base.add(16).cast::<*mut u8>() = ptr2.cast_mut();
                                            }
                                            V7::Blob(e) => {
                                                *base.add(8).cast::<u8>() = (13i32) as u8;
                                                let vec3 = e;
                                                let ptr3 = vec3.as_ptr().cast::<u8>();
                                                let len3 = vec3.len();
                                                *base.add(20).cast::<usize>() = len3;
                                                *base.add(16).cast::<*mut u8>() = ptr3.cast_mut();
                                            }
                                            V7::Json(e) => {
                                                *base.add(8).cast::<u8>() = (14i32) as u8;
                                                let vec4 = e;
                                                let ptr4 = vec4.as_ptr().cast::<u8>();
                                                let len4 = vec4.len();
                                                *base.add(20).cast::<usize>() = len4;
                                                *base.add(16).cast::<*mut u8>() = ptr4.cast_mut();
                                            }
                                            V7::Xml(e) => {
                                                *base.add(8).cast::<u8>() = (15i32) as u8;
                                                let vec5 = e;
                                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                                let len5 = vec5.len();
                                                *base.add(20).cast::<usize>() = len5;
                                                *base.add(16).cast::<*mut u8>() = ptr5.cast_mut();
                                            }
                                            V7::Uuid(e) => {
                                                *base.add(8).cast::<u8>() = (16i32) as u8;
                                                let (t6_0, t6_1) = e;
                                                *base.add(16).cast::<i64>() = _rt::as_i64(t6_0);
                                                *base.add(24).cast::<i64>() = _rt::as_i64(t6_1);
                                            }
                                            V7::DbNull => {
                                                *base.add(8).cast::<u8>() = (17i32) as u8;
                                            }
                                        }
                                    }
                                    V16::Array(e) => {
                                        *base.add(0).cast::<u8>() = (1i32) as u8;
                                        let vec15 = e;
                                        let len15 = vec15.len();
                                        let layout15 =
                                            _rt::alloc::Layout::from_size_align_unchecked(
                                                vec15.len() * 24,
                                                8,
                                            );
                                        let result15 = if layout15.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout15).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout15);
                                            }
                                            ptr
                                        } else {
                                            {
                                                ::core::ptr::null_mut()
                                            }
                                        };
                                        for (i, e) in vec15.into_iter().enumerate() {
                                            let base = result15.add(i * 24);
                                            {
                                                use super::super::super::wasi::rdbms::types::DbValuePrimitive as V14;
                                                match e {
                                                    V14::Int8(e) => {
                                                        *base.add(0).cast::<u8>() = (0i32) as u8;
                                                        *base.add(8).cast::<u8>() =
                                                            (_rt::as_i32(e)) as u8;
                                                    }
                                                    V14::Int16(e) => {
                                                        *base.add(0).cast::<u8>() = (1i32) as u8;
                                                        *base.add(8).cast::<u16>() =
                                                            (_rt::as_i32(e)) as u16;
                                                    }
                                                    V14::Int32(e) => {
                                                        *base.add(0).cast::<u8>() = (2i32) as u8;
                                                        *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    V14::Int64(e) => {
                                                        *base.add(0).cast::<u8>() = (3i32) as u8;
                                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                    }
                                                    V14::Float(e) => {
                                                        *base.add(0).cast::<u8>() = (4i32) as u8;
                                                        *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                                    }
                                                    V14::Double(e) => {
                                                        *base.add(0).cast::<u8>() = (5i32) as u8;
                                                        *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                                    }
                                                    V14::Decimal(e) => {
                                                        *base.add(0).cast::<u8>() = (6i32) as u8;
                                                        let vec8 = e;
                                                        let ptr8 = vec8.as_ptr().cast::<u8>();
                                                        let len8 = vec8.len();
                                                        *base.add(12).cast::<usize>() = len8;
                                                        *base.add(8).cast::<*mut u8>() =
                                                            ptr8.cast_mut();
                                                    }
                                                    V14::Boolean(e) => {
                                                        *base.add(0).cast::<u8>() = (7i32) as u8;
                                                        *base.add(8).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        })
                                                            as u8;
                                                    }
                                                    V14::Timestamp(e) => {
                                                        *base.add(0).cast::<u8>() = (8i32) as u8;
                                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                    }
                                                    V14::Date(e) => {
                                                        *base.add(0).cast::<u8>() = (9i32) as u8;
                                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                    }
                                                    V14::Time(e) => {
                                                        *base.add(0).cast::<u8>() = (10i32) as u8;
                                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                    }
                                                    V14::Interval(e) => {
                                                        *base.add(0).cast::<u8>() = (11i32) as u8;
                                                        *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                    }
                                                    V14::Text(e) => {
                                                        *base.add(0).cast::<u8>() = (12i32) as u8;
                                                        let vec9 = e;
                                                        let ptr9 = vec9.as_ptr().cast::<u8>();
                                                        let len9 = vec9.len();
                                                        *base.add(12).cast::<usize>() = len9;
                                                        *base.add(8).cast::<*mut u8>() =
                                                            ptr9.cast_mut();
                                                    }
                                                    V14::Blob(e) => {
                                                        *base.add(0).cast::<u8>() = (13i32) as u8;
                                                        let vec10 = e;
                                                        let ptr10 = vec10.as_ptr().cast::<u8>();
                                                        let len10 = vec10.len();
                                                        *base.add(12).cast::<usize>() = len10;
                                                        *base.add(8).cast::<*mut u8>() =
                                                            ptr10.cast_mut();
                                                    }
                                                    V14::Json(e) => {
                                                        *base.add(0).cast::<u8>() = (14i32) as u8;
                                                        let vec11 = e;
                                                        let ptr11 = vec11.as_ptr().cast::<u8>();
                                                        let len11 = vec11.len();
                                                        *base.add(12).cast::<usize>() = len11;
                                                        *base.add(8).cast::<*mut u8>() =
                                                            ptr11.cast_mut();
                                                    }
                                                    V14::Xml(e) => {
                                                        *base.add(0).cast::<u8>() = (15i32) as u8;
                                                        let vec12 = e;
                                                        let ptr12 = vec12.as_ptr().cast::<u8>();
                                                        let len12 = vec12.len();
                                                        *base.add(12).cast::<usize>() = len12;
                                                        *base.add(8).cast::<*mut u8>() =
                                                            ptr12.cast_mut();
                                                    }
                                                    V14::Uuid(e) => {
                                                        *base.add(0).cast::<u8>() = (16i32) as u8;
                                                        let (t13_0, t13_1) = e;
                                                        *base.add(8).cast::<i64>() =
                                                            _rt::as_i64(t13_0);
                                                        *base.add(16).cast::<i64>() =
                                                            _rt::as_i64(t13_1);
                                                    }
                                                    V14::DbNull => {
                                                        *base.add(0).cast::<u8>() = (17i32) as u8;
                                                    }
                                                }
                                            }
                                        }
                                        *base.add(12).cast::<usize>() = len15;
                                        *base.add(8).cast::<*mut u8>() = result15;
                                        cleanup_list.extend_from_slice(&[(result15, layout15)]);
                                    }
                                }
                            }
                        }
                        let ptr18 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:rdbms/postgres@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]db-connection.execute"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            result17,
                            len17,
                            ptr18,
                        );
                        let l19 = i32::from(*ptr18.add(0).cast::<u8>());
                        if layout17.size() != 0 {
                            _rt::alloc::dealloc(result17.cast(), layout17);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l19 {
                            0 => {
                                let e = {
                                    let l20 = *ptr18.add(8).cast::<i64>();

                                    l20 as u64
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l21 = i32::from(*ptr18.add(8).cast::<u8>());
                                    use super::super::super::wasi::rdbms::types::Error as V37;
                                    let v37 = match l21 {
                                        0 => {
                                            let e37 = {
                                                let l22 = *ptr18.add(12).cast::<*mut u8>();
                                                let l23 = *ptr18.add(16).cast::<usize>();
                                                let len24 = l23;
                                                let bytes24 = _rt::Vec::from_raw_parts(
                                                    l22.cast(),
                                                    len24,
                                                    len24,
                                                );

                                                _rt::string_lift(bytes24)
                                            };
                                            V37::ConnectionFailure(e37)
                                        }
                                        1 => {
                                            let e37 = {
                                                let l25 = *ptr18.add(12).cast::<*mut u8>();
                                                let l26 = *ptr18.add(16).cast::<usize>();
                                                let len27 = l26;
                                                let bytes27 = _rt::Vec::from_raw_parts(
                                                    l25.cast(),
                                                    len27,
                                                    len27,
                                                );

                                                _rt::string_lift(bytes27)
                                            };
                                            V37::QueryParameterFailure(e37)
                                        }
                                        2 => {
                                            let e37 = {
                                                let l28 = *ptr18.add(12).cast::<*mut u8>();
                                                let l29 = *ptr18.add(16).cast::<usize>();
                                                let len30 = l29;
                                                let bytes30 = _rt::Vec::from_raw_parts(
                                                    l28.cast(),
                                                    len30,
                                                    len30,
                                                );

                                                _rt::string_lift(bytes30)
                                            };
                                            V37::QueryExecutionFailure(e37)
                                        }
                                        3 => {
                                            let e37 = {
                                                let l31 = *ptr18.add(12).cast::<*mut u8>();
                                                let l32 = *ptr18.add(16).cast::<usize>();
                                                let len33 = l32;
                                                let bytes33 = _rt::Vec::from_raw_parts(
                                                    l31.cast(),
                                                    len33,
                                                    len33,
                                                );

                                                _rt::string_lift(bytes33)
                                            };
                                            V37::QueryResponseFailure(e37)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 4, "invalid enum discriminant");
                                            let e37 = {
                                                let l34 = *ptr18.add(12).cast::<*mut u8>();
                                                let l35 = *ptr18.add(16).cast::<usize>();
                                                let len36 = l35;
                                                let bytes36 = _rt::Vec::from_raw_parts(
                                                    l34.cast(),
                                                    len36,
                                                    len36,
                                                );

                                                _rt::string_lift(bytes36)
                                            };
                                            V37::Other(e37)
                                        }
                                    };

                                    v37
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
        }
    }
}
#[allow(dead_code)]
pub mod exports {
    #[allow(dead_code)]
    pub mod golem {
        #[allow(dead_code)]
        pub mod it {
            #[allow(dead_code, clippy::all)]
            pub mod api {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type DbRow = super::super::super::super::wasi::rdbms::types::DbRow;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_check_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::check();
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let vec2 = (result0.into_bytes()).into_boxed_slice();
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    ::core::mem::forget(vec2);
                    *ptr1.add(4).cast::<usize>() = len2;
                    *ptr1.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_check<T: Guest>(arg0: *mut u8) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0.add(4).cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_execute_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let base4 = arg2;
                    let len4 = arg3;
                    let mut result4 = _rt::Vec::with_capacity(len4);
                    for i in 0..len4 {
                        let base = base4.add(i * 8);
                        let e4 = {
                            let l1 = *base.add(0).cast::<*mut u8>();
                            let l2 = *base.add(4).cast::<usize>();
                            let len3 = l2;
                            let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);

                            _rt::string_lift(bytes3)
                        };
                        result4.push(e4);
                    }
                    _rt::cabi_dealloc(base4, len4 * 8, 4);
                    let result5 = T::execute(_rt::string_lift(bytes0), result4);
                    let ptr6 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result5 {
                        Ok(e) => {
                            *ptr6.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr6.add(8).cast::<i64>() = _rt::as_i64(e);
                        }
                        Err(e) => {
                            *ptr6.add(0).cast::<u8>() = (1i32) as u8;
                            let vec7 = (e.into_bytes()).into_boxed_slice();
                            let ptr7 = vec7.as_ptr().cast::<u8>();
                            let len7 = vec7.len();
                            ::core::mem::forget(vec7);
                            *ptr6.add(12).cast::<usize>() = len7;
                            *ptr6.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                        }
                    };
                    ptr6
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_execute<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = *arg0.add(8).cast::<*mut u8>();
                            let l2 = *arg0.add(12).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_query_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let base4 = arg2;
                    let len4 = arg3;
                    let mut result4 = _rt::Vec::with_capacity(len4);
                    for i in 0..len4 {
                        let base = base4.add(i * 8);
                        let e4 = {
                            let l1 = *base.add(0).cast::<*mut u8>();
                            let l2 = *base.add(4).cast::<usize>();
                            let len3 = l2;
                            let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);

                            _rt::string_lift(bytes3)
                        };
                        result4.push(e4);
                    }
                    _rt::cabi_dealloc(base4, len4 * 8, 4);
                    let result5 = T::query(_rt::string_lift(bytes0), result4);
                    let ptr6 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result5 {
                        Ok(e) => {
                            *ptr6.add(0).cast::<u8>() = (0i32) as u8;
                            let vec25 = e;
                            let len25 = vec25.len();
                            let layout25 =
                                _rt::alloc::Layout::from_size_align_unchecked(vec25.len() * 8, 4);
                            let result25 = if layout25.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout25).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout25);
                                }
                                ptr
                            } else {
                                {
                                    ::core::ptr::null_mut()
                                }
                            };
                            for (i, e) in vec25.into_iter().enumerate() {
                                let base = result25.add(i * 8);
                                {
                                    let super::super::super::super::wasi::rdbms::types::DbRow {
                                        values: values7,
                                    } = e;
                                    let vec24 = values7;
                                    let len24 = vec24.len();
                                    let layout24 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec24.len() * 32,
                                        8,
                                    );
                                    let result24 = if layout24.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout24).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout24);
                                        }
                                        ptr
                                    } else {
                                        {
                                            ::core::ptr::null_mut()
                                        }
                                    };
                                    for (i, e) in vec24.into_iter().enumerate() {
                                        let base = result24.add(i * 32);
                                        {
                                            use super::super::super::super::wasi::rdbms::types::DbValue as V23;
                                            match e {
                                                V23::Primitive(e) => {
                                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                                    use super::super::super::super::wasi::rdbms::types::DbValuePrimitive as V14;
                                                    match e {
                                                        V14::Int8(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (0i32) as u8;
                                                            *base.add(16).cast::<u8>() =
                                                                (_rt::as_i32(e)) as u8;
                                                        }
                                                        V14::Int16(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (1i32) as u8;
                                                            *base.add(16).cast::<u16>() =
                                                                (_rt::as_i32(e)) as u16;
                                                        }
                                                        V14::Int32(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (2i32) as u8;
                                                            *base.add(16).cast::<i32>() =
                                                                _rt::as_i32(e);
                                                        }
                                                        V14::Int64(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (3i32) as u8;
                                                            *base.add(16).cast::<i64>() =
                                                                _rt::as_i64(e);
                                                        }
                                                        V14::Float(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (4i32) as u8;
                                                            *base.add(16).cast::<f32>() =
                                                                _rt::as_f32(e);
                                                        }
                                                        V14::Double(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (5i32) as u8;
                                                            *base.add(16).cast::<f64>() =
                                                                _rt::as_f64(e);
                                                        }
                                                        V14::Decimal(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (6i32) as u8;
                                                            let vec8 =
                                                                (e.into_bytes()).into_boxed_slice();
                                                            let ptr8 = vec8.as_ptr().cast::<u8>();
                                                            let len8 = vec8.len();
                                                            ::core::mem::forget(vec8);
                                                            *base.add(20).cast::<usize>() = len8;
                                                            *base.add(16).cast::<*mut u8>() =
                                                                ptr8.cast_mut();
                                                        }
                                                        V14::Boolean(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (7i32) as u8;
                                                            *base.add(16).cast::<u8>() = (match e {
                                                                true => 1,
                                                                false => 0,
                                                            })
                                                                as u8;
                                                        }
                                                        V14::Timestamp(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (8i32) as u8;
                                                            *base.add(16).cast::<i64>() =
                                                                _rt::as_i64(e);
                                                        }
                                                        V14::Date(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (9i32) as u8;
                                                            *base.add(16).cast::<i64>() =
                                                                _rt::as_i64(e);
                                                        }
                                                        V14::Time(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (10i32) as u8;
                                                            *base.add(16).cast::<i64>() =
                                                                _rt::as_i64(e);
                                                        }
                                                        V14::Interval(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (11i32) as u8;
                                                            *base.add(16).cast::<i64>() =
                                                                _rt::as_i64(e);
                                                        }
                                                        V14::Text(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (12i32) as u8;
                                                            let vec9 =
                                                                (e.into_bytes()).into_boxed_slice();
                                                            let ptr9 = vec9.as_ptr().cast::<u8>();
                                                            let len9 = vec9.len();
                                                            ::core::mem::forget(vec9);
                                                            *base.add(20).cast::<usize>() = len9;
                                                            *base.add(16).cast::<*mut u8>() =
                                                                ptr9.cast_mut();
                                                        }
                                                        V14::Blob(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (13i32) as u8;
                                                            let vec10 = (e).into_boxed_slice();
                                                            let ptr10 = vec10.as_ptr().cast::<u8>();
                                                            let len10 = vec10.len();
                                                            ::core::mem::forget(vec10);
                                                            *base.add(20).cast::<usize>() = len10;
                                                            *base.add(16).cast::<*mut u8>() =
                                                                ptr10.cast_mut();
                                                        }
                                                        V14::Json(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (14i32) as u8;
                                                            let vec11 =
                                                                (e.into_bytes()).into_boxed_slice();
                                                            let ptr11 = vec11.as_ptr().cast::<u8>();
                                                            let len11 = vec11.len();
                                                            ::core::mem::forget(vec11);
                                                            *base.add(20).cast::<usize>() = len11;
                                                            *base.add(16).cast::<*mut u8>() =
                                                                ptr11.cast_mut();
                                                        }
                                                        V14::Xml(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (15i32) as u8;
                                                            let vec12 =
                                                                (e.into_bytes()).into_boxed_slice();
                                                            let ptr12 = vec12.as_ptr().cast::<u8>();
                                                            let len12 = vec12.len();
                                                            ::core::mem::forget(vec12);
                                                            *base.add(20).cast::<usize>() = len12;
                                                            *base.add(16).cast::<*mut u8>() =
                                                                ptr12.cast_mut();
                                                        }
                                                        V14::Uuid(e) => {
                                                            *base.add(8).cast::<u8>() =
                                                                (16i32) as u8;
                                                            let (t13_0, t13_1) = e;
                                                            *base.add(16).cast::<i64>() =
                                                                _rt::as_i64(t13_0);
                                                            *base.add(24).cast::<i64>() =
                                                                _rt::as_i64(t13_1);
                                                        }
                                                        V14::DbNull => {
                                                            *base.add(8).cast::<u8>() =
                                                                (17i32) as u8;
                                                        }
                                                    }
                                                }
                                                V23::Array(e) => {
                                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                                    let vec22 = e;
                                                    let len22 = vec22.len();
                                                    let layout22 = _rt::alloc::Layout::from_size_align_unchecked(vec22.len() * 24, 8);
                                                    let result22 = if layout22.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout22)
                                                            .cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(
                                                                layout22,
                                                            );
                                                        }
                                                        ptr
                                                    } else {
                                                        {
                                                            ::core::ptr::null_mut()
                                                        }
                                                    };
                                                    for (i, e) in vec22.into_iter().enumerate() {
                                                        let base = result22.add(i * 24);
                                                        {
                                                            use super::super::super::super::wasi::rdbms::types::DbValuePrimitive as V21;
                                                            match e {
                                                                V21::Int8(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (0i32) as u8;
                                                                    *base.add(8).cast::<u8>() =
                                                                        (_rt::as_i32(e)) as u8;
                                                                }
                                                                V21::Int16(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (1i32) as u8;
                                                                    *base.add(8).cast::<u16>() =
                                                                        (_rt::as_i32(e)) as u16;
                                                                }
                                                                V21::Int32(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (2i32) as u8;
                                                                    *base.add(8).cast::<i32>() =
                                                                        _rt::as_i32(e);
                                                                }
                                                                V21::Int64(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (3i32) as u8;
                                                                    *base.add(8).cast::<i64>() =
                                                                        _rt::as_i64(e);
                                                                }
                                                                V21::Float(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (4i32) as u8;
                                                                    *base.add(8).cast::<f32>() =
                                                                        _rt::as_f32(e);
                                                                }
                                                                V21::Double(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (5i32) as u8;
                                                                    *base.add(8).cast::<f64>() =
                                                                        _rt::as_f64(e);
                                                                }
                                                                V21::Decimal(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (6i32) as u8;
                                                                    let vec15 = (e.into_bytes())
                                                                        .into_boxed_slice();
                                                                    let ptr15 =
                                                                        vec15.as_ptr().cast::<u8>();
                                                                    let len15 = vec15.len();
                                                                    ::core::mem::forget(vec15);
                                                                    *base.add(12).cast::<usize>() =
                                                                        len15;
                                                                    *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>() =
                                                                        ptr15.cast_mut();
                                                                }
                                                                V21::Boolean(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (7i32) as u8;
                                                                    *base.add(8).cast::<u8>() =
                                                                        (match e {
                                                                            true => 1,
                                                                            false => 0,
                                                                        })
                                                                            as u8;
                                                                }
                                                                V21::Timestamp(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (8i32) as u8;
                                                                    *base.add(8).cast::<i64>() =
                                                                        _rt::as_i64(e);
                                                                }
                                                                V21::Date(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (9i32) as u8;
                                                                    *base.add(8).cast::<i64>() =
                                                                        _rt::as_i64(e);
                                                                }
                                                                V21::Time(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (10i32) as u8;
                                                                    *base.add(8).cast::<i64>() =
                                                                        _rt::as_i64(e);
                                                                }
                                                                V21::Interval(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (11i32) as u8;
                                                                    *base.add(8).cast::<i64>() =
                                                                        _rt::as_i64(e);
                                                                }
                                                                V21::Text(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (12i32) as u8;
                                                                    let vec16 = (e.into_bytes())
                                                                        .into_boxed_slice();
                                                                    let ptr16 =
                                                                        vec16.as_ptr().cast::<u8>();
                                                                    let len16 = vec16.len();
                                                                    ::core::mem::forget(vec16);
                                                                    *base.add(12).cast::<usize>() =
                                                                        len16;
                                                                    *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>() =
                                                                        ptr16.cast_mut();
                                                                }
                                                                V21::Blob(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (13i32) as u8;
                                                                    let vec17 =
                                                                        (e).into_boxed_slice();
                                                                    let ptr17 =
                                                                        vec17.as_ptr().cast::<u8>();
                                                                    let len17 = vec17.len();
                                                                    ::core::mem::forget(vec17);
                                                                    *base.add(12).cast::<usize>() =
                                                                        len17;
                                                                    *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>() =
                                                                        ptr17.cast_mut();
                                                                }
                                                                V21::Json(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (14i32) as u8;
                                                                    let vec18 = (e.into_bytes())
                                                                        .into_boxed_slice();
                                                                    let ptr18 =
                                                                        vec18.as_ptr().cast::<u8>();
                                                                    let len18 = vec18.len();
                                                                    ::core::mem::forget(vec18);
                                                                    *base.add(12).cast::<usize>() =
                                                                        len18;
                                                                    *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>() =
                                                                        ptr18.cast_mut();
                                                                }
                                                                V21::Xml(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (15i32) as u8;
                                                                    let vec19 = (e.into_bytes())
                                                                        .into_boxed_slice();
                                                                    let ptr19 =
                                                                        vec19.as_ptr().cast::<u8>();
                                                                    let len19 = vec19.len();
                                                                    ::core::mem::forget(vec19);
                                                                    *base.add(12).cast::<usize>() =
                                                                        len19;
                                                                    *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>() =
                                                                        ptr19.cast_mut();
                                                                }
                                                                V21::Uuid(e) => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (16i32) as u8;
                                                                    let (t20_0, t20_1) = e;
                                                                    *base.add(8).cast::<i64>() =
                                                                        _rt::as_i64(t20_0);
                                                                    *base.add(16).cast::<i64>() =
                                                                        _rt::as_i64(t20_1);
                                                                }
                                                                V21::DbNull => {
                                                                    *base.add(0).cast::<u8>() =
                                                                        (17i32) as u8;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    *base.add(12).cast::<usize>() = len22;
                                                    *base.add(8).cast::<*mut u8>() = result22;
                                                }
                                            }
                                        }
                                    }
                                    *base.add(4).cast::<usize>() = len24;
                                    *base.add(0).cast::<*mut u8>() = result24;
                                }
                            }
                            *ptr6.add(8).cast::<usize>() = len25;
                            *ptr6.add(4).cast::<*mut u8>() = result25;
                        }
                        Err(e) => {
                            *ptr6.add(0).cast::<u8>() = (1i32) as u8;
                            let vec26 = (e.into_bytes()).into_boxed_slice();
                            let ptr26 = vec26.as_ptr().cast::<u8>();
                            let len26 = vec26.len();
                            ::core::mem::forget(vec26);
                            *ptr6.add(8).cast::<usize>() = len26;
                            *ptr6.add(4).cast::<*mut u8>() = ptr26.cast_mut();
                        }
                    };
                    ptr6
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_query<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l32 = *arg0.add(4).cast::<*mut u8>();
                            let l33 = *arg0.add(8).cast::<usize>();
                            let base34 = l32;
                            let len34 = l33;
                            for i in 0..len34 {
                                let base = base34.add(i * 8);
                                {
                                    let l29 = *base.add(0).cast::<*mut u8>();
                                    let l30 = *base.add(4).cast::<usize>();
                                    let base31 = l29;
                                    let len31 = l30;
                                    for i in 0..len31 {
                                        let base = base31.add(i * 32);
                                        {
                                            let l1 = i32::from(*base.add(0).cast::<u8>());
                                            match l1 {
                                                0 => {
                                                    let l2 = i32::from(*base.add(8).cast::<u8>());
                                                    match l2 {
                                                        0 => (),
                                                        1 => (),
                                                        2 => (),
                                                        3 => (),
                                                        4 => (),
                                                        5 => (),
                                                        6 => {
                                                            let l3 =
                                                                *base.add(16).cast::<*mut u8>();
                                                            let l4 = *base.add(20).cast::<usize>();
                                                            _rt::cabi_dealloc(l3, l4, 1);
                                                        }
                                                        7 => (),
                                                        8 => (),
                                                        9 => (),
                                                        10 => (),
                                                        11 => (),
                                                        12 => {
                                                            let l5 =
                                                                *base.add(16).cast::<*mut u8>();
                                                            let l6 = *base.add(20).cast::<usize>();
                                                            _rt::cabi_dealloc(l5, l6, 1);
                                                        }
                                                        13 => {
                                                            let l7 =
                                                                *base.add(16).cast::<*mut u8>();
                                                            let l8 = *base.add(20).cast::<usize>();
                                                            let base9 = l7;
                                                            let len9 = l8;
                                                            _rt::cabi_dealloc(base9, len9 * 1, 1);
                                                        }
                                                        14 => {
                                                            let l10 =
                                                                *base.add(16).cast::<*mut u8>();
                                                            let l11 = *base.add(20).cast::<usize>();
                                                            _rt::cabi_dealloc(l10, l11, 1);
                                                        }
                                                        15 => {
                                                            let l12 =
                                                                *base.add(16).cast::<*mut u8>();
                                                            let l13 = *base.add(20).cast::<usize>();
                                                            _rt::cabi_dealloc(l12, l13, 1);
                                                        }
                                                        16 => (),
                                                        _ => (),
                                                    }
                                                }
                                                _ => {
                                                    let l26 = *base.add(8).cast::<*mut u8>();
                                                    let l27 = *base.add(12).cast::<usize>();
                                                    let base28 = l26;
                                                    let len28 = l27;
                                                    for i in 0..len28 {
                                                        let base = base28.add(i * 24);
                                                        {
                                                            let l14 = i32::from(
                                                                *base.add(0).cast::<u8>(),
                                                            );
                                                            match l14 {
                                                                0 => (),
                                                                1 => (),
                                                                2 => (),
                                                                3 => (),
                                                                4 => (),
                                                                5 => (),
                                                                6 => {
                                                                    let l15 = *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>();
                                                                    let l16 = *base
                                                                        .add(12)
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l15, l16, 1);
                                                                }
                                                                7 => (),
                                                                8 => (),
                                                                9 => (),
                                                                10 => (),
                                                                11 => (),
                                                                12 => {
                                                                    let l17 = *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>();
                                                                    let l18 = *base
                                                                        .add(12)
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l17, l18, 1);
                                                                }
                                                                13 => {
                                                                    let l19 = *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>();
                                                                    let l20 = *base
                                                                        .add(12)
                                                                        .cast::<usize>();
                                                                    let base21 = l19;
                                                                    let len21 = l20;
                                                                    _rt::cabi_dealloc(
                                                                        base21,
                                                                        len21 * 1,
                                                                        1,
                                                                    );
                                                                }
                                                                14 => {
                                                                    let l22 = *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>();
                                                                    let l23 = *base
                                                                        .add(12)
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l22, l23, 1);
                                                                }
                                                                15 => {
                                                                    let l24 = *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>();
                                                                    let l25 = *base
                                                                        .add(12)
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l24, l25, 1);
                                                                }
                                                                16 => (),
                                                                _ => (),
                                                            }
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(base28, len28 * 24, 8);
                                                }
                                            }
                                        }
                                    }
                                    _rt::cabi_dealloc(base31, len31 * 32, 8);
                                }
                            }
                            _rt::cabi_dealloc(base34, len34 * 8, 4);
                        }
                        _ => {
                            let l35 = *arg0.add(4).cast::<*mut u8>();
                            let l36 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l35, l36, 1);
                        }
                    }
                }
                pub trait Guest {
                    fn check() -> _rt::String;
                    fn execute(
                        statement: _rt::String,
                        params: _rt::Vec<_rt::String>,
                    ) -> Result<u64, _rt::String>;
                    fn query(
                        statement: _rt::String,
                        params: _rt::Vec<_rt::String>,
                    ) -> Result<_rt::Vec<DbRow>, _rt::String>;
                }
                #[doc(hidden)]

                macro_rules! __export_golem_it_api_cabi{
    ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

      #[export_name = "golem:it/api#check"]
      unsafe extern "C" fn export_check() -> *mut u8 {
        $($path_to_types)*::_export_check_cabi::<$ty>()
      }
      #[export_name = "cabi_post_golem:it/api#check"]
      unsafe extern "C" fn _post_return_check(arg0: *mut u8,) {
        $($path_to_types)*::__post_return_check::<$ty>(arg0)
      }
      #[export_name = "golem:it/api#execute"]
      unsafe extern "C" fn export_execute(arg0: *mut u8,arg1: usize,arg2: *mut u8,arg3: usize,) -> *mut u8 {
        $($path_to_types)*::_export_execute_cabi::<$ty>(arg0, arg1, arg2, arg3)
      }
      #[export_name = "cabi_post_golem:it/api#execute"]
      unsafe extern "C" fn _post_return_execute(arg0: *mut u8,) {
        $($path_to_types)*::__post_return_execute::<$ty>(arg0)
      }
      #[export_name = "golem:it/api#query"]
      unsafe extern "C" fn export_query(arg0: *mut u8,arg1: usize,arg2: *mut u8,arg3: usize,) -> *mut u8 {
        $($path_to_types)*::_export_query_cabi::<$ty>(arg0, arg1, arg2, arg3)
      }
      #[export_name = "cabi_post_golem:it/api#query"]
      unsafe extern "C" fn _post_return_query(arg0: *mut u8,) {
        $($path_to_types)*::__post_return_query::<$ty>(arg0)
      }
    };);
  }
                #[doc(hidden)]
                pub(crate) use __export_golem_it_api_cabi;
                #[repr(align(8))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 16]);
                static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 16]);
            }
        }
    }
}
mod _rt {
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;

    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};

    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        // NB: This would ideally be `u32` but it is not. The fact that this has
        // interior mutability is not exposed in the API of this type except for the
        // `take_handle` method which is supposed to in theory be private.
        //
        // This represents, almost all the time, a valid handle value. When it's
        // invalid it's stored as `u32::MAX`.
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }

    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }

    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }

        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }

        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }

    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource")
                .field("handle", &self.handle)
                .finish()
        }
    }

    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    // If this handle was "taken" then don't do anything in the
                    // destructor.
                    u32::MAX => {}

                    // ... but otherwise do actually destroy it with the imported
                    // component model intrinsic as defined through `T`.
                    other => T::drop(other),
                }
            }
        }
    }
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr as *mut u8, layout);
    }
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            core::hint::unreachable_unchecked()
        }
    }

    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }

    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }

    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }

    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }

    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }

    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }

    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }

    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }

    pub fn as_f32<T: AsF32>(t: T) -> f32 {
        t.as_f32()
    }

    pub trait AsF32 {
        fn as_f32(self) -> f32;
    }

    impl<'a, T: Copy + AsF32> AsF32 for &'a T {
        fn as_f32(self) -> f32 {
            (*self).as_f32()
        }
    }

    impl AsF32 for f32 {
        #[inline]
        fn as_f32(self) -> f32 {
            self as f32
        }
    }

    pub fn as_f64<T: AsF64>(t: T) -> f64 {
        t.as_f64()
    }

    pub trait AsF64 {
        fn as_f64(self) -> f64;
    }

    impl<'a, T: Copy + AsF64> AsF64 for &'a T {
        fn as_f64(self) -> f64 {
            (*self).as_f64()
        }
    }

    impl AsF64 for f64 {
        #[inline]
        fn as_f64(self) -> f64 {
            self as f64
        }
    }
    pub use alloc_crate::alloc;

    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    extern crate alloc as alloc_crate;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_rdbms_service_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::golem::it::api::__export_golem_it_api_cabi!($ty with_types_in $($path_to_types_root)*::exports::golem::it::api);
  )
}
#[doc(inline)]
pub(crate) use __export_rdbms_service_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.25.0:rdbms-service:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 1526] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xf2\x0a\x01A\x02\x01\
A\x0a\x01B\x1f\x01y\x04\0\x0anode-index\x03\0\0\x01s\x04\0\x0atable-name\x03\0\x02\
\x01q\x05\x12connection-failure\x01s\0\x17query-parameter-failure\x01s\0\x17quer\
y-execution-failure\x01s\0\x16query-response-failure\x01s\0\x05other\x01s\0\x04\0\
\x05error\x03\0\x04\x01q\x11\x04int8\0\0\x05int16\0\0\x05int32\0\0\x05int64\0\0\x05\
float\0\0\x06double\0\0\x07decimal\0\0\x07boolean\0\0\x09timestamp\0\0\x04date\0\
\0\x04time\0\0\x08interval\0\0\x04text\0\0\x04blob\0\0\x04json\0\0\x03xml\0\0\x04\
uuid\0\0\x04\0\x18db-column-type-primitive\x03\0\x06\x01q\x02\x09primitive\x01\x07\
\0\x05array\x01\x07\0\x04\0\x0edb-column-type\x03\0\x08\x01r\x04\x07ordinalw\x04\
names\x07db-type\x09\x0cdb-type-names\x04\0\x09db-column\x03\0\x0a\x01p}\x01o\x02\
ww\x01q\x12\x04int8\x01~\0\x05int16\x01|\0\x05int32\x01z\0\x05int64\x01x\0\x05fl\
oat\x01v\0\x06double\x01u\0\x07decimal\x01s\0\x07boolean\x01\x7f\0\x09timestamp\x01\
x\0\x04date\x01x\0\x04time\x01x\0\x08interval\x01x\0\x04text\x01s\0\x04blob\x01\x0c\
\0\x04json\x01s\0\x03xml\x01s\0\x04uuid\x01\x0d\0\x07db-null\0\0\x04\0\x12db-val\
ue-primitive\x03\0\x0e\x01p\x0f\x01q\x02\x09primitive\x01\x0f\0\x05array\x01\x10\
\0\x04\0\x08db-value\x03\0\x11\x01p\x12\x01r\x01\x06values\x13\x04\0\x06db-row\x03\
\0\x14\x04\0\x0ddb-result-set\x03\x01\x01h\x16\x01p\x0b\x01@\x01\x04self\x17\0\x18\
\x04\0![method]db-result-set.get-columns\x01\x19\x01p\x15\x01k\x1a\x01@\x01\x04s\
elf\x17\0\x1b\x04\0\x1e[method]db-result-set.get-next\x01\x1c\x03\x01\x16wasi:rd\
bms/types@0.0.1\x05\0\x02\x03\0\0\x0ddb-result-set\x02\x03\0\0\x08db-value\x02\x03\
\0\0\x05error\x01B\x14\x02\x03\x02\x01\x01\x04\0\x0ddb-result-set\x03\0\0\x02\x03\
\x02\x01\x02\x04\0\x08db-value\x03\0\x02\x02\x03\x02\x01\x03\x04\0\x05error\x03\0\
\x04\x04\0\x0ddb-connection\x03\x01\x01i\x06\x01j\x01\x07\x01\x05\x01@\x01\x07ad\
dresss\0\x08\x04\0\x1a[static]db-connection.open\x01\x09\x01h\x06\x01p\x03\x01i\x01\
\x01j\x01\x0c\x01\x05\x01@\x03\x04self\x0a\x09statements\x06params\x0b\0\x0d\x04\
\0\x1b[method]db-connection.query\x01\x0e\x01j\x01w\x01\x05\x01@\x03\x04self\x0a\
\x09statements\x06params\x0b\0\x0f\x04\0\x1d[method]db-connection.execute\x01\x10\
\x03\x01\x19wasi:rdbms/postgres@0.0.1\x05\x04\x02\x03\0\0\x06db-row\x01B\x0c\x02\
\x03\x02\x01\x05\x04\0\x06db-row\x03\0\0\x01@\0\0s\x04\0\x05check\x01\x02\x01ps\x01\
j\x01w\x01s\x01@\x02\x09statements\x06params\x03\0\x04\x04\0\x07execute\x01\x05\x01\
p\x01\x01j\x01\x06\x01s\x01@\x02\x09statements\x06params\x03\0\x07\x04\0\x05quer\
y\x01\x08\x04\x01\x0cgolem:it/api\x05\x06\x04\x01\x16golem:it/rdbms-service\x04\0\
\x0b\x13\x01\0\x0drdbms-service\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0d\
wit-component\x070.208.1\x10wit-bindgen-rust\x060.25.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
