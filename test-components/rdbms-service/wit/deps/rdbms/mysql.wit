package wasi:rdbms@0.0.1;

interface mysql {

  variant error {
    connection-failure(string),
    query-parameter-failure(string),
    query-execution-failure(string),
    query-response-failure(string),
    other(string)
  }

  type date = tuple<s32, u8, u8>; // year, month, day
  type time = tuple<u8, u8, u8, u32>; // hour, minute, second, nanosecond
  type timestamp = tuple<s32, u8, u8, u8, u8, u8, u32>; // year, month, day, hour, minute, second, nanosecond

  type bit-vec = list<bool>;

  variant db-column-type {
         boolean,
         tinyint,
         smallint,
         mediumint,
         int,
         bigint,
         tiny-unsigned,
         small-unsigned,
         medium-unsigned,
         unsigned,
         big-unsigned,
         float,
         double,
         decimal,
         date,
         datetime,
         timestamp,
         time,
         year,
         fixchar,
         varchar,
         tinytext,
         text,
         mediumtext,
         longtext,
         binary,
         varbinary,
         tinyblob,
         blob,
         mediumblob,
         longblob,
         enumeration,
         set,
         bit,
         json
//          geometry,
//          point,
//          linestring,
//          polygon,
//          multipoint,
//          multilinestring,
//          multipolygon,
//          geometrycollection
  }

  record db-column {
    ordinal:     u64,
    name:        string,
    db-type:     db-column-type,
    db-type-name: string
  }

  /// Value descriptor for a single database value
  variant db-value {
       boolean(bool),
       tinyint(s8),
       smallint(s16),
       mediumint(s32), // s24
       int(s32),
       bigint(s64),
       tiny-unsigned(u8),
       small-unsigned(u16),
       medium-unsigned(u32), // u24
       unsigned(u32),
       big-unsigned(u64),
       float(float32),
       double(float64),
       decimal(string),
       date(date),
       datetime(timestamp),
       timestamp(timestamp),
       time(time),
       year(s8),
       fixchar(string),
       varchar(string),
       tinytext(string),
       text(string),
       mediumtext(string),
       longtext(string),
       binary(list<u8>),
       varbinary(list<u8>),
       tinyblob(list<u8>),
       blob(list<u8>),
       mediumblob(list<u8>),
       longblob(list<u8>),
       enumeration(string),
       set(string),
       bit(bit-vec),
       json(string),
       null
//        geometry,
//        point,
//        linestring,
//        polygon,
//        multipoint,
//        multilinestring,
//        multipolygon,
//        geometrycollection

  }

  /// A single row of values
  record db-row {
    values: list<db-value>
  }

  /// A potentially very large and lazy stream of rows:
  resource db-result-set {
    get-columns: func() -> list<db-column>;
    get-next: func() -> option<list<db-row>>;
  }

  resource db-connection {
    open: static func(address: string) -> result<db-connection, error>;

    query: func(statement: string, params: list<db-value>) -> result<db-result-set, error>;

    execute: func(statement: string, params: list<db-value>) -> result<u64, error>;
  }
}