package wasi:rdbms@0.0.1;

interface types {
  type node-index = u32;
  type table-name = string;

  variant error {
    connection-failure(string),
    query-parameter-failure(string),
    query-execution-failure(string),
    query-response-failure(string),
    other(string)
  }

//   variant db-column-type-info-primitive {
//     integer(option<u8>),
//     decimal(tuple<u8, u8>),
//     float,
//     boolean,
//     datetime,
//     interval,
//     chars(option<u32>),
//     text,
//     binary(option<u32>),
//     blob,
//     enumeration(list<string>),
//     json,
//     xml,
//     uuid,
//     spatial
//   }
//
//   variant db-column-type-info {
//     primitive(db-column-type-info-primitive),
//     array(tuple<list<option<u32>>, db-column-type-info-primitive>)
//   }
//
//   flags db-column-type-flags {
//     // Key constraints
//     primary-key,     // Single or part of composite primary key
//     foreign-key,     // References another table's key
//     unique,          // Unique constraint
//
//     // Core properties
//     nullable,        // If not present, column is NOT NULL
//     generated,       // Value is computed rather than stored directly
//     auto-increment,  // MySQL AUTO_INCREMENT/PostgreSQL SERIAL/SQL Server IDENTITY
//
//     // Common behaviors
//     default-value,   // Has a default value defined
//     indexed         // Participates in an index
//   }
//
//   /// Data types for database columns
//   record db-column-type-meta {
//     name:        string,
//     db-type:     db-column-type-info,
//     db-type-flags: db-column-type-flags,
//     foreign-key: option<table-name>
//   }

  variant db-column-type-primitive {
    int8,
    int16,
    int32,
    int64,
    float,
    double,
    decimal,
    boolean,
    timestamp,
    date,
    time,
    interval,
    text,
    blob,
    json,
    xml,
    uuid
  }

  variant db-column-type {
    primitive(db-column-type-primitive),
    array(db-column-type-primitive)
  }

  record db-column {
    ordinal:     u64,
    name:        string,
    db-type:     db-column-type,
    db-type-name: string
  }

  /// Value descriptor for a single database value
  variant db-value-primitive {
    int8(s8),
    int16(s16),
    int32(s32),
    int64(s64),
    float(float32),
    double(float64),
    decimal(string),
    boolean(bool),
    timestamp(s64),
    date(s64),
    time(s64),
    interval(s64),
    text(string),
    blob(list<u8>),
    json(string),
    xml(string),
    uuid(tuple<u64, u64>),
    db-null
  }

  variant db-value {
    primitive(db-value-primitive),
    array(list<db-value-primitive>) // Flatteneed
  }

  /// A single row of values
  record db-row {
      values: list<db-value>
  }

  /// A potentially very large and lazy stream of rows:
  resource db-result-set {
        get-columns: func() -> list<db-column>;
        get-next: func() -> option<list<db-row>>;
  }

}