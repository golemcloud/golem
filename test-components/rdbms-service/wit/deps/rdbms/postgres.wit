package wasi:rdbms@0.0.1;

interface postgres {

  variant error {
    connection-failure(string),
    query-parameter-failure(string),
    query-execution-failure(string),
    query-response-failure(string),
    other(string)
  }

  variant db-column-type-primitive {
    character,
    int2,
    int4,
    int8,
    float4,
    float8,
    numeric,
    boolean,
    text,
    varchar,
    bpchar,
    timestamp,
    timestamptz,
    date,
    time,
    timetz,
    interval,
    bytea,
    uuid,
    xml,
    json,
    jsonb
//     inet,
//     macaddr,
//     cidr,
//     point,
//     line,
//     lseg,
//     box,
//     polygon,
//     circle,
//     path,
//     box2d,
//     polygonz,
//     circlez,
//     pathz,
//     hstore,
//     tsvector,
//     tsquery,
//     range,
//     tstzrange,
//     int4range,
//     int8range,
//     numrange,
//     tsrange,
//     tstzrange
  }

  variant db-value-primitive {
      character(s8),
      int2(s16),
      int4(s32),
      int8(s64),
      float4(float32),
      float8(float64),
      numeric(string),
      boolean(bool),
      text(string),
      varchar(string),
      bpchar(string),
      timestamp(s64),
      timestamptz(s64),
      date(s64),
      time(s64),
      timetz(s64),
      interval(s64),
      bytea(list<u8>),
      json(string),
      xml(string),
      uuid(tuple<u64, u64>),
      null
  }

  variant db-column-type {
    primitive(db-column-type-primitive),
    array(db-column-type-primitive)
  }

  record db-column {
    ordinal:     u64,
    name:        string,
    db-type:     db-column-type,
    db-type-name: string
  }

  variant db-value {
    primitive(db-value-primitive),
    array(list<db-value-primitive>) // Flatteneed
  }

  /// A single row of values
  record db-row {
    values: list<db-value>
  }

  /// A potentially very large and lazy stream of rows:
  resource db-result-set {
    get-columns: func() -> list<db-column>;
    get-next: func() -> option<list<db-row>>;
  }

  resource db-connection {
    open: static func(address: string) -> result<db-connection, error>;

    query: func(statement: string, params: list<db-value>) -> result<db-result-set, error>;

    execute: func(statement: string, params: list<db-value>) -> result<u64, error>;
  }
}