// Generated by `wit-bindgen` 0.16.0. DO NOT EDIT!
pub mod exports {
  pub mod golem {
    pub mod it {
      
      #[allow(clippy::all)]
      pub mod api {
        #[used]
        #[doc(hidden)]
        #[cfg(target_arch = "wasm32")]
        static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
        #[derive(Clone)]
        pub struct Task {
          pub name: wit_bindgen::rt::string::String,
          pub description: Option<wit_bindgen::rt::string::String>,
        }
        impl ::core::fmt::Debug for Task {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("Task").field("name", &self.name).field("description", &self.description).finish()
          }
        }
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "golem:it/api#echo"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_echo(arg0: i32,arg1: i32,arg2: i32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result1 = <_GuestImpl as Guest>::echo(match arg0 {
              0 => None,
              1 => {
                let e = {
                  let len0 = arg2 as usize;
                  let bytes0 = Vec::from_raw_parts(arg1 as *mut _, len0, len0);
                  
                  wit_bindgen::rt::string_lift(bytes0)
                };
                Some(e)
              }
              _ => wit_bindgen::rt::invalid_enum_discriminant(),
            });
            let ptr2 = _RET_AREA.0.as_mut_ptr() as i32;
            match result1 {
              Some(e) => {
                *((ptr2 + 0) as *mut u8) = (1i32) as u8;
                let vec3 = (e.into_bytes()).into_boxed_slice();
                let ptr3 = vec3.as_ptr() as i32;
                let len3 = vec3.len() as i32;
                ::core::mem::forget(vec3);
                *((ptr2 + 8) as *mut i32) = len3;
                *((ptr2 + 4) as *mut i32) = ptr3;
              },
              None => {
                {
                  *((ptr2 + 0) as *mut u8) = (0i32) as u8;
                }
              },
            };ptr2
          }
          
          const _: () = {
            #[doc(hidden)]
            #[export_name = "cabi_post_golem:it/api#echo"]
            #[allow(non_snake_case)]
            unsafe extern "C" fn __post_return_echo(arg0: i32,) {
              let l0 = i32::from(*((arg0 + 0) as *const u8));
              match l0 {
                0 => (),
                _ => {
                  let l1 = *((arg0 + 4) as *const i32);
                  let l2 = *((arg0 + 8) as *const i32);
                  wit_bindgen::rt::dealloc(l1, (l2) as usize, 1);
                },
              }
            }
          };
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "golem:it/api#todo"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_todo(arg0: i32,arg1: i32,arg2: i32,arg3: i32,arg4: i32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let len0 = arg1 as usize;
            let bytes0 = Vec::from_raw_parts(arg0 as *mut _, len0, len0);
            let result2 = <_GuestImpl as Guest>::todo(Task{
              name: wit_bindgen::rt::string_lift(bytes0),
              description: match arg2 {
                0 => None,
                1 => {
                  let e = {
                    let len1 = arg4 as usize;
                    let bytes1 = Vec::from_raw_parts(arg3 as *mut _, len1, len1);
                    
                    wit_bindgen::rt::string_lift(bytes1)
                  };
                  Some(e)
                }
                _ => wit_bindgen::rt::invalid_enum_discriminant(),
              },
            });
            let ptr3 = _RET_AREA.0.as_mut_ptr() as i32;
            let vec4 = (result2.into_bytes()).into_boxed_slice();
            let ptr4 = vec4.as_ptr() as i32;
            let len4 = vec4.len() as i32;
            ::core::mem::forget(vec4);
            *((ptr3 + 4) as *mut i32) = len4;
            *((ptr3 + 0) as *mut i32) = ptr4;
            ptr3
          }
          
          const _: () = {
            #[doc(hidden)]
            #[export_name = "cabi_post_golem:it/api#todo"]
            #[allow(non_snake_case)]
            unsafe extern "C" fn __post_return_todo(arg0: i32,) {
              let l0 = *((arg0 + 0) as *const i32);
              let l1 = *((arg0 + 4) as *const i32);
              wit_bindgen::rt::dealloc(l0, (l1) as usize, 1);
            }
          };
        };
        use super::super::super::super::super::Component as _GuestImpl;
        pub trait Guest {
          fn echo(input: Option<wit_bindgen::rt::string::String>,) -> Option<wit_bindgen::rt::string::String>;
          fn todo(input: Task,) -> wit_bindgen::rt::string::String;
        }
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        
        #[repr(align(4))]
        struct _RetArea([u8; 12]);
        static mut _RET_AREA: _RetArea = _RetArea([0; 12]);
        
      }
      
    }
  }
}

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:option-service"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 384] = [3, 0, 14, 111, 112, 116, 105, 111, 110, 45, 115, 101, 114, 118, 105, 99, 101, 0, 97, 115, 109, 13, 0, 1, 0, 7, 100, 1, 65, 2, 1, 66, 7, 1, 107, 115, 1, 114, 2, 4, 110, 97, 109, 101, 115, 11, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 0, 4, 0, 4, 116, 97, 115, 107, 3, 0, 1, 1, 64, 1, 5, 105, 110, 112, 117, 116, 0, 0, 0, 4, 0, 4, 101, 99, 104, 111, 1, 3, 1, 64, 1, 5, 105, 110, 112, 117, 116, 2, 0, 115, 4, 0, 4, 116, 111, 100, 111, 1, 4, 4, 1, 12, 103, 111, 108, 101, 109, 58, 105, 116, 47, 97, 112, 105, 5, 0, 11, 9, 1, 0, 3, 97, 112, 105, 3, 0, 0, 7, 131, 1, 1, 65, 2, 1, 65, 2, 1, 66, 7, 1, 107, 115, 1, 114, 2, 4, 110, 97, 109, 101, 115, 11, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 0, 4, 0, 4, 116, 97, 115, 107, 3, 0, 1, 1, 64, 1, 5, 105, 110, 112, 117, 116, 0, 0, 0, 4, 0, 4, 101, 99, 104, 111, 1, 3, 1, 64, 1, 5, 105, 110, 112, 117, 116, 2, 0, 115, 4, 0, 4, 116, 111, 100, 111, 1, 4, 4, 1, 12, 103, 111, 108, 101, 109, 58, 105, 116, 47, 97, 112, 105, 5, 0, 4, 1, 23, 103, 111, 108, 101, 109, 58, 105, 116, 47, 111, 112, 116, 105, 111, 110, 45, 115, 101, 114, 118, 105, 99, 101, 4, 0, 11, 20, 1, 0, 14, 111, 112, 116, 105, 111, 110, 45, 115, 101, 114, 118, 105, 99, 101, 3, 2, 0, 0, 16, 12, 112, 97, 99, 107, 97, 103, 101, 45, 100, 111, 99, 115, 0, 123, 125, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 49, 56, 46, 50, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 54, 46, 48];

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_section() {}
