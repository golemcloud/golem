package rpc:counters-stub;

interface stub-counters {
  use golem:rpc/types@0.1.0.{uri};
  use wasi:io/poll@0.2.0.{pollable};
  use rpc:counters/api.{timeline-node};

  resource future-get-global-value-result {
    subscribe: func() -> pollable;
    get: func() -> option<u64>;
  }
  resource future-get-all-dropped-result {
    subscribe: func() -> pollable;
    get: func() -> option<list<tuple<string, u64>>>;
  }
  resource future-bug-wasm-rpc-i32-result {
    subscribe: func() -> pollable;
    get: func() -> option<timeline-node>;
  }
  resource future-counter-get-value-result {
    subscribe: func() -> pollable;
    get: func() -> option<u64>;
  }
  resource future-counter-get-args-result {
    subscribe: func() -> pollable;
    get: func() -> option<list<string>>;
  }
  resource future-counter-get-env-result {
    subscribe: func() -> pollable;
    get: func() -> option<list<tuple<string, string>>>;
  }
  resource api {
    constructor(location: uri);
    blocking-inc-global-by: func(value: u64);
    inc-global-by: func(value: u64);
    blocking-get-global-value: func() -> u64;
    get-global-value: func() -> future-get-global-value-result;
    blocking-get-all-dropped: func() -> list<tuple<string, u64>>;
    get-all-dropped: func() -> future-get-all-dropped-result;
    blocking-bug-wasm-rpc-i32: func(in: timeline-node) -> timeline-node;
    bug-wasm-rpc-i32: func(in: timeline-node) -> future-bug-wasm-rpc-i32-result;
  }

  resource counter {
    constructor(location: uri, name: string);
    blocking-inc-by: func(value: u64);
    inc-by: func(value: u64);
    blocking-get-value: func() -> u64;
    get-value: func() -> future-counter-get-value-result;
    blocking-get-args: func() -> list<string>;
    get-args: func() -> future-counter-get-args-result;
    blocking-get-env: func() -> list<tuple<string, string>>;
    get-env: func() -> future-counter-get-env-result;
  }

}

world wasm-rpc-stub-counters {
  export stub-counters;
}
