// Generated by `wit-bindgen` 0.25.0. DO NOT EDIT!
// Options used:
#[allow(dead_code)]
pub mod exports {
    #[allow(dead_code)]
    pub mod rpc {
        #[allow(dead_code)]
        pub mod counters {
            #[allow(dead_code, clippy::all)]
            pub mod api {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;

                #[derive(Debug)]
                #[repr(transparent)]
                pub struct Counter {
                    handle: _rt::Resource<Counter>,
                }

                type _CounterRep<T> = Option<T>;

                impl Counter {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `Counter`.
                    pub fn new<T: GuestCounter>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _CounterRep<T> = Some(val);
                        let ptr: *mut _CounterRep<T> = _rt::Box::into_raw(_rt::Box::new(val));
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }

                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestCounter>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestCounter>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }

                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestCounter>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }

                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: _rt::Resource::from_handle(handle),
                        }
                    }

                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }

                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }

                    // It's theoretically possible to implement the `GuestCounter` trait twice
                    // so guard against using it with two different types here.
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(!cfg!(target_feature = "threads"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => assert!(
                                    ty == id,
                                    "cannot use two types with this resource type"
                                ),
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }

                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(handle as *mut _CounterRep<T>);
                    }

                    fn as_ptr<T: GuestCounter>(&self) -> *mut _CounterRep<T> {
                        Counter::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }

                /// A borrowed version of [`Counter`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct CounterBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a Counter>,
                }

                impl<'a> CounterBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }

                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestCounter>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    // NB: mutable access is not allowed due to the component model allowing
                    // multiple borrows of the same resource.

                    fn as_ptr<T: 'static>(&self) -> *mut _CounterRep<T> {
                        Counter::type_guard::<T>();
                        self.rep.cast()
                    }
                }

                unsafe impl _rt::WasmResource for Counter {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]rpc:counters/api")]
                            extern "C" {
                                #[link_name = "[resource-drop]counter"]
                                fn drop(_: u32);
                            }

                            drop(_handle);
                        }
                    }
                }

                #[derive(Clone, Copy)]
                pub enum TimelineNode {
                    Leaf,
                }
                impl ::core::fmt::Debug for TimelineNode {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        match self {
                            TimelineNode::Leaf => f.debug_tuple("TimelineNode::Leaf").finish(),
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_constructor_counter_cabi<T: GuestCounter>(
                    arg0: *mut u8,
                    arg1: usize,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let result1 = Counter::new(T::new(_rt::string_lift(bytes0)));
                    (result1).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_counter_inc_by_cabi<T: GuestCounter>(
                    arg0: *mut u8,
                    arg1: i64,
                ) {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    T::inc_by(CounterBorrow::lift(arg0 as u32 as usize).get(), arg1 as u64);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_counter_get_value_cabi<T: GuestCounter>(
                    arg0: *mut u8,
                ) -> i64 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::get_value(CounterBorrow::lift(arg0 as u32 as usize).get());
                    _rt::as_i64(result0)
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_counter_get_args_cabi<T: GuestCounter>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::get_args(CounterBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let vec3 = result0;
                    let len3 = vec3.len();
                    let layout3 = _rt::alloc::Layout::from_size_align_unchecked(vec3.len() * 8, 4);
                    let result3 = if layout3.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout3).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout3);
                        }
                        ptr
                    } else {
                        {
                            ::core::ptr::null_mut()
                        }
                    };
                    for (i, e) in vec3.into_iter().enumerate() {
                        let base = result3.add(i * 8);
                        {
                            let vec2 = (e.into_bytes()).into_boxed_slice();
                            let ptr2 = vec2.as_ptr().cast::<u8>();
                            let len2 = vec2.len();
                            ::core::mem::forget(vec2);
                            *base.add(4).cast::<usize>() = len2;
                            *base.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                        }
                    }
                    *ptr1.add(4).cast::<usize>() = len3;
                    *ptr1.add(0).cast::<*mut u8>() = result3;
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_counter_get_args<T: GuestCounter>(
                    arg0: *mut u8,
                ) {
                    let l2 = *arg0.add(0).cast::<*mut u8>();
                    let l3 = *arg0.add(4).cast::<usize>();
                    let base4 = l2;
                    let len4 = l3;
                    for i in 0..len4 {
                        let base = base4.add(i * 8);
                        {
                            let l0 = *base.add(0).cast::<*mut u8>();
                            let l1 = *base.add(4).cast::<usize>();
                            _rt::cabi_dealloc(l0, l1, 1);
                        }
                    }
                    _rt::cabi_dealloc(base4, len4 * 8, 4);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_counter_get_env_cabi<T: GuestCounter>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::get_env(CounterBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let vec5 = result0;
                    let len5 = vec5.len();
                    let layout5 = _rt::alloc::Layout::from_size_align_unchecked(vec5.len() * 16, 4);
                    let result5 = if layout5.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout5).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout5);
                        }
                        ptr
                    } else {
                        {
                            ::core::ptr::null_mut()
                        }
                    };
                    for (i, e) in vec5.into_iter().enumerate() {
                        let base = result5.add(i * 16);
                        {
                            let (t2_0, t2_1) = e;
                            let vec3 = (t2_0.into_bytes()).into_boxed_slice();
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            ::core::mem::forget(vec3);
                            *base.add(4).cast::<usize>() = len3;
                            *base.add(0).cast::<*mut u8>() = ptr3.cast_mut();
                            let vec4 = (t2_1.into_bytes()).into_boxed_slice();
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            ::core::mem::forget(vec4);
                            *base.add(12).cast::<usize>() = len4;
                            *base.add(8).cast::<*mut u8>() = ptr4.cast_mut();
                        }
                    }
                    *ptr1.add(4).cast::<usize>() = len5;
                    *ptr1.add(0).cast::<*mut u8>() = result5;
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_counter_get_env<T: GuestCounter>(arg0: *mut u8) {
                    let l4 = *arg0.add(0).cast::<*mut u8>();
                    let l5 = *arg0.add(4).cast::<usize>();
                    let base6 = l4;
                    let len6 = l5;
                    for i in 0..len6 {
                        let base = base6.add(i * 16);
                        {
                            let l0 = *base.add(0).cast::<*mut u8>();
                            let l1 = *base.add(4).cast::<usize>();
                            _rt::cabi_dealloc(l0, l1, 1);
                            let l2 = *base.add(8).cast::<*mut u8>();
                            let l3 = *base.add(12).cast::<usize>();
                            _rt::cabi_dealloc(l2, l3, 1);
                        }
                    }
                    _rt::cabi_dealloc(base6, len6 * 16, 4);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_inc_global_by_cabi<T: Guest>(arg0: i64) {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    T::inc_global_by(arg0 as u64);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_get_global_value_cabi<T: Guest>() -> i64 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::get_global_value();
                    _rt::as_i64(result0)
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_get_all_dropped_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::get_all_dropped();
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let vec4 = result0;
                    let len4 = vec4.len();
                    let layout4 = _rt::alloc::Layout::from_size_align_unchecked(vec4.len() * 16, 8);
                    let result4 = if layout4.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout4).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout4);
                        }
                        ptr
                    } else {
                        {
                            ::core::ptr::null_mut()
                        }
                    };
                    for (i, e) in vec4.into_iter().enumerate() {
                        let base = result4.add(i * 16);
                        {
                            let (t2_0, t2_1) = e;
                            let vec3 = (t2_0.into_bytes()).into_boxed_slice();
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            ::core::mem::forget(vec3);
                            *base.add(4).cast::<usize>() = len3;
                            *base.add(0).cast::<*mut u8>() = ptr3.cast_mut();
                            *base.add(8).cast::<i64>() = _rt::as_i64(t2_1);
                        }
                    }
                    *ptr1.add(4).cast::<usize>() = len4;
                    *ptr1.add(0).cast::<*mut u8>() = result4;
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_get_all_dropped<T: Guest>(arg0: *mut u8) {
                    let l2 = *arg0.add(0).cast::<*mut u8>();
                    let l3 = *arg0.add(4).cast::<usize>();
                    let base4 = l2;
                    let len4 = l3;
                    for i in 0..len4 {
                        let base = base4.add(i * 16);
                        {
                            let l0 = *base.add(0).cast::<*mut u8>();
                            let l1 = *base.add(4).cast::<usize>();
                            _rt::cabi_dealloc(l0, l1, 1);
                        }
                    }
                    _rt::cabi_dealloc(base4, len4 * 16, 8);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_bug_wasm_rpc_i32_cabi<T: Guest>(arg0: i32) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let v0 = match arg0 {
                        n => {
                            debug_assert_eq!(n, 0, "invalid enum discriminant");
                            TimelineNode::Leaf
                        }
                    };
                    let result1 = T::bug_wasm_rpc_i32(v0);
                    let result2 = match result1 {
                        TimelineNode::Leaf => 0i32,
                    };
                    result2
                }
                pub trait Guest {
                    type Counter: GuestCounter;
                    fn inc_global_by(value: u64);
                    fn get_global_value() -> u64;
                    fn get_all_dropped() -> _rt::Vec<(_rt::String, u64)>;
                    fn bug_wasm_rpc_i32(in_: TimelineNode) -> TimelineNode;
                }
                pub trait GuestCounter: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]rpc:counters/api")]
                            extern "C" {
                                #[link_name = "[resource-new]counter"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }

                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]rpc:counters/api")]
                            extern "C" {
                                #[link_name = "[resource-rep]counter"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }

                    fn new(name: _rt::String) -> Self;
                    fn inc_by(&self, value: u64);
                    fn get_value(&self) -> u64;
                    fn get_args(&self) -> _rt::Vec<_rt::String>;
                    fn get_env(&self) -> _rt::Vec<(_rt::String, _rt::String)>;
                }
                #[doc(hidden)]

                macro_rules! __export_rpc_counters_api_cabi{
  ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

    #[export_name = "rpc:counters/api#[constructor]counter"]
    unsafe extern "C" fn export_constructor_counter(arg0: *mut u8,arg1: usize,) -> i32 {
      $($path_to_types)*::_export_constructor_counter_cabi::<<$ty as $($path_to_types)*::Guest>::Counter>(arg0, arg1)
    }
    #[export_name = "rpc:counters/api#[method]counter.inc-by"]
    unsafe extern "C" fn export_method_counter_inc_by(arg0: *mut u8,arg1: i64,) {
      $($path_to_types)*::_export_method_counter_inc_by_cabi::<<$ty as $($path_to_types)*::Guest>::Counter>(arg0, arg1)
    }
    #[export_name = "rpc:counters/api#[method]counter.get-value"]
    unsafe extern "C" fn export_method_counter_get_value(arg0: *mut u8,) -> i64 {
      $($path_to_types)*::_export_method_counter_get_value_cabi::<<$ty as $($path_to_types)*::Guest>::Counter>(arg0)
    }
    #[export_name = "rpc:counters/api#[method]counter.get-args"]
    unsafe extern "C" fn export_method_counter_get_args(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_counter_get_args_cabi::<<$ty as $($path_to_types)*::Guest>::Counter>(arg0)
    }
    #[export_name = "cabi_post_rpc:counters/api#[method]counter.get-args"]
    unsafe extern "C" fn _post_return_method_counter_get_args(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_counter_get_args::<<$ty as $($path_to_types)*::Guest>::Counter>(arg0)
    }
    #[export_name = "rpc:counters/api#[method]counter.get-env"]
    unsafe extern "C" fn export_method_counter_get_env(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_counter_get_env_cabi::<<$ty as $($path_to_types)*::Guest>::Counter>(arg0)
    }
    #[export_name = "cabi_post_rpc:counters/api#[method]counter.get-env"]
    unsafe extern "C" fn _post_return_method_counter_get_env(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_counter_get_env::<<$ty as $($path_to_types)*::Guest>::Counter>(arg0)
    }
    #[export_name = "rpc:counters/api#inc-global-by"]
    unsafe extern "C" fn export_inc_global_by(arg0: i64,) {
      $($path_to_types)*::_export_inc_global_by_cabi::<$ty>(arg0)
    }
    #[export_name = "rpc:counters/api#get-global-value"]
    unsafe extern "C" fn export_get_global_value() -> i64 {
      $($path_to_types)*::_export_get_global_value_cabi::<$ty>()
    }
    #[export_name = "rpc:counters/api#get-all-dropped"]
    unsafe extern "C" fn export_get_all_dropped() -> *mut u8 {
      $($path_to_types)*::_export_get_all_dropped_cabi::<$ty>()
    }
    #[export_name = "cabi_post_rpc:counters/api#get-all-dropped"]
    unsafe extern "C" fn _post_return_get_all_dropped(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_get_all_dropped::<$ty>(arg0)
    }
    #[export_name = "rpc:counters/api#bug-wasm-rpc-i32"]
    unsafe extern "C" fn export_bug_wasm_rpc_i32(arg0: i32,) -> i32 {
      $($path_to_types)*::_export_bug_wasm_rpc_i32_cabi::<$ty>(arg0)
    }

    const _: () = {
      #[doc(hidden)]
      #[export_name = "rpc:counters/api#[dtor]counter"]
      #[allow(non_snake_case)]
      unsafe extern "C" fn dtor(rep: *mut u8) {
        $($path_to_types)*::Counter::dtor::<
        <$ty as $($path_to_types)*::Guest>::Counter
        >(rep)
      }
    };

  };);
}
                #[doc(hidden)]
                pub(crate) use __export_rpc_counters_api_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 8]);
                static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 8]);
            }
        }
    }
}
mod _rt {

    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};

    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        // NB: This would ideally be `u32` but it is not. The fact that this has
        // interior mutability is not exposed in the API of this type except for the
        // `take_handle` method which is supposed to in theory be private.
        //
        // This represents, almost all the time, a valid handle value. When it's
        // invalid it's stored as `u32::MAX`.
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }

    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }

    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }

        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }

        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }

    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource")
                .field("handle", &self.handle)
                .finish()
        }
    }

    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    // If this handle was "taken" then don't do anything in the
                    // destructor.
                    u32::MAX => {}

                    // ... but otherwise do actually destroy it with the imported
                    // component model intrinsic as defined through `T`.
                    other => T::drop(other),
                }
            }
        }
    }
    pub use alloc_crate::boxed::Box;

    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub use alloc_crate::string::String;

    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }

    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }

    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }

    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }

    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    pub use alloc_crate::alloc;
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr as *mut u8, layout);
    }
    extern crate alloc as alloc_crate;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_counters_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::rpc::counters::api::__export_rpc_counters_api_cabi!($ty with_types_in $($path_to_types_root)*::exports::rpc::counters::api);
  )
}
#[doc(inline)]
pub(crate) use __export_counters_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.25.0:counters:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 561] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xb2\x03\x01A\x02\x01\
A\x02\x01B\x1c\x04\0\x07counter\x03\x01\x01q\x01\x04leaf\0\0\x04\0\x0dtimeline-n\
ode\x03\0\x01\x01i\0\x01@\x01\x04names\0\x03\x04\0\x14[constructor]counter\x01\x04\
\x01h\0\x01@\x02\x04self\x05\x05valuew\x01\0\x04\0\x16[method]counter.inc-by\x01\
\x06\x01@\x01\x04self\x05\0w\x04\0\x19[method]counter.get-value\x01\x07\x01ps\x01\
@\x01\x04self\x05\0\x08\x04\0\x18[method]counter.get-args\x01\x09\x01o\x02ss\x01\
p\x0a\x01@\x01\x04self\x05\0\x0b\x04\0\x17[method]counter.get-env\x01\x0c\x01@\x01\
\x05valuew\x01\0\x04\0\x0dinc-global-by\x01\x0d\x01@\0\0w\x04\0\x10get-global-va\
lue\x01\x0e\x01o\x02sw\x01p\x0f\x01@\0\0\x10\x04\0\x0fget-all-dropped\x01\x11\x01\
@\x01\x02in\x02\0\x02\x04\0\x10bug-wasm-rpc-i32\x01\x12\x04\x01\x10rpc:counters/\
api\x05\0\x04\x01\x15rpc:counters/counters\x04\0\x0b\x0e\x01\0\x08counters\x03\0\
\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.208.1\x10wit-bi\
ndgen-rust\x060.25.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
