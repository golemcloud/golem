// Generated by `wit-bindgen` 0.36.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod todo {
    pub mod personal {
        #[allow(dead_code, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// Basic timestamp type (Unix timestamp in milliseconds)
            pub type Timestamp = u64;
            /// Input for updating profile
            #[derive(Clone)]
            pub struct UpdateProfileInput {
                pub name: Option<_rt::String>,
                pub email: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for UpdateProfileInput {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("UpdateProfileInput")
                        .field("name", &self.name)
                        .field("email", &self.email)
                        .finish()
                }
            }
            /// Input for creating a task
            #[derive(Clone)]
            pub struct CreateTaskInput {
                pub title: _rt::String,
                pub description: _rt::String,
                pub due_date: Option<Timestamp>,
            }
            impl ::core::fmt::Debug for CreateTaskInput {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("CreateTaskInput")
                        .field("title", &self.title)
                        .field("description", &self.description)
                        .field("due-date", &self.due_date)
                        .finish()
                }
            }
            /// Input for updating a task
            #[derive(Clone)]
            pub struct UpdateTaskInput {
                pub title: Option<_rt::String>,
                pub description: Option<_rt::String>,
                pub completed: Option<bool>,
                pub due_date: Option<Timestamp>,
            }
            impl ::core::fmt::Debug for UpdateTaskInput {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("UpdateTaskInput")
                        .field("title", &self.title)
                        .field("description", &self.description)
                        .field("completed", &self.completed)
                        .field("due-date", &self.due_date)
                        .finish()
                }
            }
            /// Error types
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum Error {
                NotFound,
                InvalidInput,
                InternalError,
            }
            impl ::core::fmt::Debug for Error {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        Error::NotFound => f.debug_tuple("Error::NotFound").finish(),
                        Error::InvalidInput => {
                            f.debug_tuple("Error::InvalidInput").finish()
                        }
                        Error::InternalError => {
                            f.debug_tuple("Error::InternalError").finish()
                        }
                    }
                }
            }
            impl Error {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> Error {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => Error::NotFound,
                        1 => Error::InvalidInput,
                        2 => Error::InternalError,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            /// Response wrapper type
            #[derive(Clone)]
            pub struct JsonResponse {
                pub status: u16,
                pub body: _rt::String,
            }
            impl ::core::fmt::Debug for JsonResponse {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("JsonResponse")
                        .field("status", &self.status)
                        .field("body", &self.body)
                        .finish()
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod todo {
        pub mod personal {
            /// Profile management interface
            #[allow(dead_code, clippy::all)]
            pub mod profile {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type UpdateProfileInput = super::super::super::super::todo::personal::types::UpdateProfileInput;
                pub type JsonResponse = super::super::super::super::todo::personal::types::JsonResponse;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_get_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::get();
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let super::super::super::super::todo::personal::types::JsonResponse {
                        status: status2,
                        body: body2,
                    } = result0;
                    *ptr1.add(0).cast::<u16>() = (_rt::as_i32(status2)) as u16;
                    let vec3 = (body2.into_bytes()).into_boxed_slice();
                    let ptr3 = vec3.as_ptr().cast::<u8>();
                    let len3 = vec3.len();
                    ::core::mem::forget(vec3);
                    *ptr1.add(8).cast::<usize>() = len3;
                    *ptr1.add(4).cast::<*mut u8>() = ptr3.cast_mut();
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_get<T: Guest>(arg0: *mut u8) {
                    let l0 = *arg0.add(4).cast::<*mut u8>();
                    let l1 = *arg0.add(8).cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_update_cabi<T: Guest>(
                    arg0: i32,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: i32,
                    arg4: *mut u8,
                    arg5: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result2 = T::update(super::super::super::super::todo::personal::types::UpdateProfileInput {
                        name: match arg0 {
                            0 => None,
                            1 => {
                                let e = {
                                    let len0 = arg2;
                                    let bytes0 = _rt::Vec::from_raw_parts(
                                        arg1.cast(),
                                        len0,
                                        len0,
                                    );
                                    _rt::string_lift(bytes0)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        email: match arg3 {
                            0 => None,
                            1 => {
                                let e = {
                                    let len1 = arg5;
                                    let bytes1 = _rt::Vec::from_raw_parts(
                                        arg4.cast(),
                                        len1,
                                        len1,
                                    );
                                    _rt::string_lift(bytes1)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    });
                    let ptr3 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let super::super::super::super::todo::personal::types::JsonResponse {
                        status: status4,
                        body: body4,
                    } = result2;
                    *ptr3.add(0).cast::<u16>() = (_rt::as_i32(status4)) as u16;
                    let vec5 = (body4.into_bytes()).into_boxed_slice();
                    let ptr5 = vec5.as_ptr().cast::<u8>();
                    let len5 = vec5.len();
                    ::core::mem::forget(vec5);
                    *ptr3.add(8).cast::<usize>() = len5;
                    *ptr3.add(4).cast::<*mut u8>() = ptr5.cast_mut();
                    ptr3
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_update<T: Guest>(arg0: *mut u8) {
                    let l0 = *arg0.add(4).cast::<*mut u8>();
                    let l1 = *arg0.add(8).cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                }
                pub trait Guest {
                    /// Get the current user's profile
                    fn get() -> JsonResponse;
                    /// Update the current user's profile
                    fn update(input: UpdateProfileInput) -> JsonResponse;
                }
                #[doc(hidden)]
                macro_rules! __export_todo_personal_profile_0_1_0_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[export_name =
                        "todo:personal/profile@0.1.0#get"] unsafe extern "C" fn
                        export_get() -> * mut u8 { $($path_to_types)*::
                        _export_get_cabi::<$ty > () } #[export_name =
                        "cabi_post_todo:personal/profile@0.1.0#get"] unsafe extern "C" fn
                        _post_return_get(arg0 : * mut u8,) { $($path_to_types)*::
                        __post_return_get::<$ty > (arg0) } #[export_name =
                        "todo:personal/profile@0.1.0#update"] unsafe extern "C" fn
                        export_update(arg0 : i32, arg1 : * mut u8, arg2 : usize, arg3 :
                        i32, arg4 : * mut u8, arg5 : usize,) -> * mut u8 {
                        $($path_to_types)*:: _export_update_cabi::<$ty > (arg0, arg1,
                        arg2, arg3, arg4, arg5) } #[export_name =
                        "cabi_post_todo:personal/profile@0.1.0#update"] unsafe extern "C"
                        fn _post_return_update(arg0 : * mut u8,) { $($path_to_types)*::
                        __post_return_update::<$ty > (arg0) } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_todo_personal_profile_0_1_0_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 12]);
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 12],
                );
            }
            /// Task management interface
            #[allow(dead_code, clippy::all)]
            pub mod tasks {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type CreateTaskInput = super::super::super::super::todo::personal::types::CreateTaskInput;
                pub type UpdateTaskInput = super::super::super::super::todo::personal::types::UpdateTaskInput;
                pub type Timestamp = super::super::super::super::todo::personal::types::Timestamp;
                pub type JsonResponse = super::super::super::super::todo::personal::types::JsonResponse;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_create_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                    arg4: i32,
                    arg5: i64,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let len1 = arg3;
                    let bytes1 = _rt::Vec::from_raw_parts(arg2.cast(), len1, len1);
                    let result2 = T::create(super::super::super::super::todo::personal::types::CreateTaskInput {
                        title: _rt::string_lift(bytes0),
                        description: _rt::string_lift(bytes1),
                        due_date: match arg4 {
                            0 => None,
                            1 => {
                                let e = arg5 as u64;
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    });
                    let ptr3 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let super::super::super::super::todo::personal::types::JsonResponse {
                        status: status4,
                        body: body4,
                    } = result2;
                    *ptr3.add(0).cast::<u16>() = (_rt::as_i32(status4)) as u16;
                    let vec5 = (body4.into_bytes()).into_boxed_slice();
                    let ptr5 = vec5.as_ptr().cast::<u8>();
                    let len5 = vec5.len();
                    ::core::mem::forget(vec5);
                    *ptr3.add(8).cast::<usize>() = len5;
                    *ptr3.add(4).cast::<*mut u8>() = ptr5.cast_mut();
                    ptr3
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_create<T: Guest>(arg0: *mut u8) {
                    let l0 = *arg0.add(4).cast::<*mut u8>();
                    let l1 = *arg0.add(8).cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_get_cabi<T: Guest>(arg0: i64) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::get(arg0 as u64);
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let super::super::super::super::todo::personal::types::JsonResponse {
                        status: status2,
                        body: body2,
                    } = result0;
                    *ptr1.add(0).cast::<u16>() = (_rt::as_i32(status2)) as u16;
                    let vec3 = (body2.into_bytes()).into_boxed_slice();
                    let ptr3 = vec3.as_ptr().cast::<u8>();
                    let len3 = vec3.len();
                    ::core::mem::forget(vec3);
                    *ptr1.add(8).cast::<usize>() = len3;
                    *ptr1.add(4).cast::<*mut u8>() = ptr3.cast_mut();
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_get<T: Guest>(arg0: *mut u8) {
                    let l0 = *arg0.add(4).cast::<*mut u8>();
                    let l1 = *arg0.add(8).cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_update_cabi<T: Guest>(
                    arg0: i64,
                    arg1: i32,
                    arg2: *mut u8,
                    arg3: usize,
                    arg4: i32,
                    arg5: *mut u8,
                    arg6: usize,
                    arg7: i32,
                    arg8: i32,
                    arg9: i32,
                    arg10: i64,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result2 = T::update(
                        arg0 as u64,
                        super::super::super::super::todo::personal::types::UpdateTaskInput {
                            title: match arg1 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let len0 = arg3;
                                        let bytes0 = _rt::Vec::from_raw_parts(
                                            arg2.cast(),
                                            len0,
                                            len0,
                                        );
                                        _rt::string_lift(bytes0)
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            description: match arg4 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let len1 = arg6;
                                        let bytes1 = _rt::Vec::from_raw_parts(
                                            arg5.cast(),
                                            len1,
                                            len1,
                                        );
                                        _rt::string_lift(bytes1)
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            completed: match arg7 {
                                0 => None,
                                1 => {
                                    let e = _rt::bool_lift(arg8 as u8);
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            due_date: match arg9 {
                                0 => None,
                                1 => {
                                    let e = arg10 as u64;
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                        },
                    );
                    let ptr3 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let super::super::super::super::todo::personal::types::JsonResponse {
                        status: status4,
                        body: body4,
                    } = result2;
                    *ptr3.add(0).cast::<u16>() = (_rt::as_i32(status4)) as u16;
                    let vec5 = (body4.into_bytes()).into_boxed_slice();
                    let ptr5 = vec5.as_ptr().cast::<u8>();
                    let len5 = vec5.len();
                    ::core::mem::forget(vec5);
                    *ptr3.add(8).cast::<usize>() = len5;
                    *ptr3.add(4).cast::<*mut u8>() = ptr5.cast_mut();
                    ptr3
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_update<T: Guest>(arg0: *mut u8) {
                    let l0 = *arg0.add(4).cast::<*mut u8>();
                    let l1 = *arg0.add(8).cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_delete_cabi<T: Guest>(arg0: i64) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::delete(arg0 as u64);
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let super::super::super::super::todo::personal::types::JsonResponse {
                        status: status2,
                        body: body2,
                    } = result0;
                    *ptr1.add(0).cast::<u16>() = (_rt::as_i32(status2)) as u16;
                    let vec3 = (body2.into_bytes()).into_boxed_slice();
                    let ptr3 = vec3.as_ptr().cast::<u8>();
                    let len3 = vec3.len();
                    ::core::mem::forget(vec3);
                    *ptr1.add(8).cast::<usize>() = len3;
                    *ptr1.add(4).cast::<*mut u8>() = ptr3.cast_mut();
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_delete<T: Guest>(arg0: *mut u8) {
                    let l0 = *arg0.add(4).cast::<*mut u8>();
                    let l1 = *arg0.add(8).cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_get_all_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::get_all();
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let super::super::super::super::todo::personal::types::JsonResponse {
                        status: status2,
                        body: body2,
                    } = result0;
                    *ptr1.add(0).cast::<u16>() = (_rt::as_i32(status2)) as u16;
                    let vec3 = (body2.into_bytes()).into_boxed_slice();
                    let ptr3 = vec3.as_ptr().cast::<u8>();
                    let len3 = vec3.len();
                    ::core::mem::forget(vec3);
                    *ptr1.add(8).cast::<usize>() = len3;
                    *ptr1.add(4).cast::<*mut u8>() = ptr3.cast_mut();
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_get_all<T: Guest>(arg0: *mut u8) {
                    let l0 = *arg0.add(4).cast::<*mut u8>();
                    let l1 = *arg0.add(8).cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_list_due_before_cabi<T: Guest>(
                    arg0: i64,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::list_due_before(arg0 as u64);
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let super::super::super::super::todo::personal::types::JsonResponse {
                        status: status2,
                        body: body2,
                    } = result0;
                    *ptr1.add(0).cast::<u16>() = (_rt::as_i32(status2)) as u16;
                    let vec3 = (body2.into_bytes()).into_boxed_slice();
                    let ptr3 = vec3.as_ptr().cast::<u8>();
                    let len3 = vec3.len();
                    ::core::mem::forget(vec3);
                    *ptr1.add(8).cast::<usize>() = len3;
                    *ptr1.add(4).cast::<*mut u8>() = ptr3.cast_mut();
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_list_due_before<T: Guest>(arg0: *mut u8) {
                    let l0 = *arg0.add(4).cast::<*mut u8>();
                    let l1 = *arg0.add(8).cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_list_completed_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::list_completed();
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let super::super::super::super::todo::personal::types::JsonResponse {
                        status: status2,
                        body: body2,
                    } = result0;
                    *ptr1.add(0).cast::<u16>() = (_rt::as_i32(status2)) as u16;
                    let vec3 = (body2.into_bytes()).into_boxed_slice();
                    let ptr3 = vec3.as_ptr().cast::<u8>();
                    let len3 = vec3.len();
                    ::core::mem::forget(vec3);
                    *ptr1.add(8).cast::<usize>() = len3;
                    *ptr1.add(4).cast::<*mut u8>() = ptr3.cast_mut();
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_list_completed<T: Guest>(arg0: *mut u8) {
                    let l0 = *arg0.add(4).cast::<*mut u8>();
                    let l1 = *arg0.add(8).cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_list_incomplete_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::list_incomplete();
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let super::super::super::super::todo::personal::types::JsonResponse {
                        status: status2,
                        body: body2,
                    } = result0;
                    *ptr1.add(0).cast::<u16>() = (_rt::as_i32(status2)) as u16;
                    let vec3 = (body2.into_bytes()).into_boxed_slice();
                    let ptr3 = vec3.as_ptr().cast::<u8>();
                    let len3 = vec3.len();
                    ::core::mem::forget(vec3);
                    *ptr1.add(8).cast::<usize>() = len3;
                    *ptr1.add(4).cast::<*mut u8>() = ptr3.cast_mut();
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_list_incomplete<T: Guest>(arg0: *mut u8) {
                    let l0 = *arg0.add(4).cast::<*mut u8>();
                    let l1 = *arg0.add(8).cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                }
                pub trait Guest {
                    /// Create a new task
                    fn create(input: CreateTaskInput) -> JsonResponse;
                    /// Get a specific task by ID
                    fn get(id: u64) -> JsonResponse;
                    /// Update an existing task
                    fn update(id: u64, input: UpdateTaskInput) -> JsonResponse;
                    /// Delete a task
                    fn delete(id: u64) -> JsonResponse;
                    /// Get all tasks
                    fn get_all() -> JsonResponse;
                    /// List tasks due before a specific timestamp
                    fn list_due_before(before: Timestamp) -> JsonResponse;
                    /// List all completed tasks
                    fn list_completed() -> JsonResponse;
                    /// List all incomplete tasks
                    fn list_incomplete() -> JsonResponse;
                }
                #[doc(hidden)]
                macro_rules! __export_todo_personal_tasks_0_1_0_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[export_name =
                        "todo:personal/tasks@0.1.0#create"] unsafe extern "C" fn
                        export_create(arg0 : * mut u8, arg1 : usize, arg2 : * mut u8,
                        arg3 : usize, arg4 : i32, arg5 : i64,) -> * mut u8 {
                        $($path_to_types)*:: _export_create_cabi::<$ty > (arg0, arg1,
                        arg2, arg3, arg4, arg5) } #[export_name =
                        "cabi_post_todo:personal/tasks@0.1.0#create"] unsafe extern "C"
                        fn _post_return_create(arg0 : * mut u8,) { $($path_to_types)*::
                        __post_return_create::<$ty > (arg0) } #[export_name =
                        "todo:personal/tasks@0.1.0#get"] unsafe extern "C" fn
                        export_get(arg0 : i64,) -> * mut u8 { $($path_to_types)*::
                        _export_get_cabi::<$ty > (arg0) } #[export_name =
                        "cabi_post_todo:personal/tasks@0.1.0#get"] unsafe extern "C" fn
                        _post_return_get(arg0 : * mut u8,) { $($path_to_types)*::
                        __post_return_get::<$ty > (arg0) } #[export_name =
                        "todo:personal/tasks@0.1.0#update"] unsafe extern "C" fn
                        export_update(arg0 : i64, arg1 : i32, arg2 : * mut u8, arg3 :
                        usize, arg4 : i32, arg5 : * mut u8, arg6 : usize, arg7 : i32,
                        arg8 : i32, arg9 : i32, arg10 : i64,) -> * mut u8 {
                        $($path_to_types)*:: _export_update_cabi::<$ty > (arg0, arg1,
                        arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10) }
                        #[export_name = "cabi_post_todo:personal/tasks@0.1.0#update"]
                        unsafe extern "C" fn _post_return_update(arg0 : * mut u8,) {
                        $($path_to_types)*:: __post_return_update::<$ty > (arg0) }
                        #[export_name = "todo:personal/tasks@0.1.0#delete"] unsafe extern
                        "C" fn export_delete(arg0 : i64,) -> * mut u8 {
                        $($path_to_types)*:: _export_delete_cabi::<$ty > (arg0) }
                        #[export_name = "cabi_post_todo:personal/tasks@0.1.0#delete"]
                        unsafe extern "C" fn _post_return_delete(arg0 : * mut u8,) {
                        $($path_to_types)*:: __post_return_delete::<$ty > (arg0) }
                        #[export_name = "todo:personal/tasks@0.1.0#get-all"] unsafe
                        extern "C" fn export_get_all() -> * mut u8 { $($path_to_types)*::
                        _export_get_all_cabi::<$ty > () } #[export_name =
                        "cabi_post_todo:personal/tasks@0.1.0#get-all"] unsafe extern "C"
                        fn _post_return_get_all(arg0 : * mut u8,) { $($path_to_types)*::
                        __post_return_get_all::<$ty > (arg0) } #[export_name =
                        "todo:personal/tasks@0.1.0#list-due-before"] unsafe extern "C" fn
                        export_list_due_before(arg0 : i64,) -> * mut u8 {
                        $($path_to_types)*:: _export_list_due_before_cabi::<$ty > (arg0)
                        } #[export_name =
                        "cabi_post_todo:personal/tasks@0.1.0#list-due-before"] unsafe
                        extern "C" fn _post_return_list_due_before(arg0 : * mut u8,) {
                        $($path_to_types)*:: __post_return_list_due_before::<$ty > (arg0)
                        } #[export_name = "todo:personal/tasks@0.1.0#list-completed"]
                        unsafe extern "C" fn export_list_completed() -> * mut u8 {
                        $($path_to_types)*:: _export_list_completed_cabi::<$ty > () }
                        #[export_name =
                        "cabi_post_todo:personal/tasks@0.1.0#list-completed"] unsafe
                        extern "C" fn _post_return_list_completed(arg0 : * mut u8,) {
                        $($path_to_types)*:: __post_return_list_completed::<$ty > (arg0)
                        } #[export_name = "todo:personal/tasks@0.1.0#list-incomplete"]
                        unsafe extern "C" fn export_list_incomplete() -> * mut u8 {
                        $($path_to_types)*:: _export_list_incomplete_cabi::<$ty > () }
                        #[export_name =
                        "cabi_post_todo:personal/tasks@0.1.0#list-incomplete"] unsafe
                        extern "C" fn _post_return_list_incomplete(arg0 : * mut u8,) {
                        $($path_to_types)*:: __post_return_list_incomplete::<$ty > (arg0)
                        } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_todo_personal_tasks_0_1_0_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 12]);
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 12],
                );
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    pub use alloc_crate::string::String;
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }
    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }
    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }
    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            core::hint::unreachable_unchecked()
        }
    }
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }
    extern crate alloc as alloc_crate;
    pub use alloc_crate::alloc;
}
/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_todo_worker_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::todo::personal::profile::__export_todo_personal_profile_0_1_0_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::todo::personal::profile);
        $($path_to_types_root)*::
        exports::todo::personal::tasks::__export_todo_personal_tasks_0_1_0_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::todo::personal::tasks);
    };
}
#[doc(inline)]
pub(crate) use __export_todo_worker_impl as export;
#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.36.0:todo:personal@0.1.0:todo-worker:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 1295] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\x8d\x09\x01A\x02\x01\
A\x0f\x01B\x15\x01w\x04\0\x09timestamp\x03\0\0\x01r\x04\x04names\x05emails\x0acr\
eated-at\x01\x0aupdated-at\x01\x04\0\x07profile\x03\0\x02\x01ks\x01r\x02\x04name\
\x04\x05email\x04\x04\0\x14update-profile-input\x03\0\x05\x01k\x01\x01r\x07\x02i\
dw\x05titles\x0bdescriptions\x09completed\x7f\x08due-date\x07\x0acreated-at\x01\x0a\
updated-at\x01\x04\0\x04task\x03\0\x08\x01r\x03\x05titles\x0bdescriptions\x08due\
-date\x07\x04\0\x11create-task-input\x03\0\x0a\x01k\x7f\x01r\x04\x05title\x04\x0b\
description\x04\x09completed\x0c\x08due-date\x07\x04\0\x11update-task-input\x03\0\
\x0d\x01p\x09\x04\0\x09task-list\x03\0\x0f\x01m\x03\x09not-found\x0dinvalid-inpu\
t\x0einternal-error\x04\0\x05error\x03\0\x11\x01r\x02\x06status{\x04bodys\x04\0\x0d\
json-response\x03\0\x13\x03\0\x19todo:personal/types@0.1.0\x05\0\x02\x03\0\0\x05\
error\x02\x03\0\0\x07profile\x02\x03\0\0\x14update-profile-input\x02\x03\0\0\x0d\
json-response\x01B\x0c\x02\x03\x02\x01\x01\x04\0\x05error\x03\0\0\x02\x03\x02\x01\
\x02\x04\0\x07profile\x03\0\x02\x02\x03\x02\x01\x03\x04\0\x14update-profile-inpu\
t\x03\0\x04\x02\x03\x02\x01\x04\x04\0\x0djson-response\x03\0\x06\x01@\0\0\x07\x04\
\0\x03get\x01\x08\x01@\x01\x05input\x05\0\x07\x04\0\x06update\x01\x09\x04\0\x1bt\
odo:personal/profile@0.1.0\x05\x05\x02\x03\0\0\x04task\x02\x03\0\0\x09task-list\x02\
\x03\0\0\x11create-task-input\x02\x03\0\0\x11update-task-input\x02\x03\0\0\x09ti\
mestamp\x01B\x1b\x02\x03\x02\x01\x01\x04\0\x05error\x03\0\0\x02\x03\x02\x01\x06\x04\
\0\x04task\x03\0\x02\x02\x03\x02\x01\x07\x04\0\x09task-list\x03\0\x04\x02\x03\x02\
\x01\x08\x04\0\x11create-task-input\x03\0\x06\x02\x03\x02\x01\x09\x04\0\x11updat\
e-task-input\x03\0\x08\x02\x03\x02\x01\x0a\x04\0\x09timestamp\x03\0\x0a\x02\x03\x02\
\x01\x04\x04\0\x0djson-response\x03\0\x0c\x01@\x01\x05input\x07\0\x0d\x04\0\x06c\
reate\x01\x0e\x01@\x01\x02idw\0\x0d\x04\0\x03get\x01\x0f\x01@\x02\x02idw\x05inpu\
t\x09\0\x0d\x04\0\x06update\x01\x10\x04\0\x06delete\x01\x0f\x01@\0\0\x0d\x04\0\x07\
get-all\x01\x11\x01@\x01\x06before\x0b\0\x0d\x04\0\x0flist-due-before\x01\x12\x04\
\0\x0elist-completed\x01\x11\x04\0\x0flist-incomplete\x01\x11\x04\0\x19todo:pers\
onal/tasks@0.1.0\x05\x0b\x04\0\x1ftodo:personal/todo-worker@0.1.0\x04\0\x0b\x11\x01\
\0\x0btodo-worker\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-compone\
nt\x070.220.0\x10wit-bindgen-rust\x060.36.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
