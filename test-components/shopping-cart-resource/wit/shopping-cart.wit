package golem:it;

interface api {
  record product-item {
    product-id: string,
    name: string,
    price: f32,
    quantity: u32,
  }

  record order {
    order-id: string,
    items: list<product-item>,
    total: f32,
    timestamp: u64,
  }

  record order-confirmation {
    order-id: string,
  }

  variant checkout-result {
    error(string),
    success(order-confirmation),
  }

  resource cart {
    constructor(user-id: string);
    add-item: func(item: product-item) -> ();
    remove-item: func(product-id: string) -> ();
    update-item-quantity: func(product-id: string, quantity: u32) -> ();
    checkout: func() -> checkout-result;
    get-cart-contents: func() -> list<product-item>;
    merge-with: func(other-cart: borrow<cart>) -> ();
  }
}

world shopping-cart {
  export api;
}
