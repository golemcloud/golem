// Generated by `wit-bindgen` 0.36.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod golem {
        pub mod it {
            #[allow(dead_code, clippy::all)]
            pub mod api {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                #[derive(Clone)]
                pub struct ProductItem {
                    pub product_id: _rt::String,
                    pub name: _rt::String,
                    pub price: f32,
                    pub quantity: u32,
                }
                impl ::core::fmt::Debug for ProductItem {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("ProductItem")
                            .field("product-id", &self.product_id)
                            .field("name", &self.name)
                            .field("price", &self.price)
                            .field("quantity", &self.quantity)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub struct OrderConfirmation {
                    pub order_id: _rt::String,
                }
                impl ::core::fmt::Debug for OrderConfirmation {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("OrderConfirmation")
                            .field("order-id", &self.order_id)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub enum CheckoutResult {
                    Error(_rt::String),
                    Success(OrderConfirmation),
                }
                impl ::core::fmt::Debug for CheckoutResult {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        match self {
                            CheckoutResult::Error(e) => {
                                f.debug_tuple("CheckoutResult::Error").field(e).finish()
                            }
                            CheckoutResult::Success(e) => {
                                f.debug_tuple("CheckoutResult::Success").field(e).finish()
                            }
                        }
                    }
                }
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct Cart {
                    handle: _rt::Resource<Cart>,
                }
                type _CartRep<T> = Option<T>;
                impl Cart {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `Cart`.
                    pub fn new<T: GuestCart>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _CartRep<T> = Some(val);
                        let ptr: *mut _CartRep<T> = _rt::Box::into_raw(
                            _rt::Box::new(val),
                        );
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }
                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestCart>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestCart>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }
                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestCart>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }
                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: _rt::Resource::from_handle(handle),
                        }
                    }
                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }
                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(! cfg!(target_feature = "atomics"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => {
                                    assert!(
                                        ty == id, "cannot use two types with this resource type"
                                    )
                                }
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }
                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(handle as *mut _CartRep<T>);
                    }
                    fn as_ptr<T: GuestCart>(&self) -> *mut _CartRep<T> {
                        Cart::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }
                /// A borrowed version of [`Cart`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct CartBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a Cart>,
                }
                impl<'a> CartBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }
                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestCart>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    fn as_ptr<T: 'static>(&self) -> *mut _CartRep<T> {
                        Cart::type_guard::<T>();
                        self.rep.cast()
                    }
                }
                unsafe impl _rt::WasmResource for Cart {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]golem:it/api")]
                            extern "C" {
                                #[link_name = "[resource-drop]cart"]
                                fn drop(_: u32);
                            }
                            drop(_handle);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_constructor_cart_cabi<T: GuestCart>(
                    arg0: *mut u8,
                    arg1: usize,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let result1 = Cart::new(T::new(_rt::string_lift(bytes0)));
                    (result1).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_cart_add_item_cabi<T: GuestCart>(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: *mut u8,
                    arg4: usize,
                    arg5: f32,
                    arg6: i32,
                ) {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    let len1 = arg4;
                    let bytes1 = _rt::Vec::from_raw_parts(arg3.cast(), len1, len1);
                    T::add_item(
                        CartBorrow::lift(arg0 as u32 as usize).get(),
                        ProductItem {
                            product_id: _rt::string_lift(bytes0),
                            name: _rt::string_lift(bytes1),
                            price: arg5,
                            quantity: arg6 as u32,
                        },
                    );
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_cart_remove_item_cabi<T: GuestCart>(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                ) {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    T::remove_item(
                        CartBorrow::lift(arg0 as u32 as usize).get(),
                        _rt::string_lift(bytes0),
                    );
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_cart_update_item_quantity_cabi<
                    T: GuestCart,
                >(arg0: *mut u8, arg1: *mut u8, arg2: usize, arg3: i32) {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    T::update_item_quantity(
                        CartBorrow::lift(arg0 as u32 as usize).get(),
                        _rt::string_lift(bytes0),
                        arg3 as u32,
                    );
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_cart_checkout_cabi<T: GuestCart>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::checkout(
                        CartBorrow::lift(arg0 as u32 as usize).get(),
                    );
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        CheckoutResult::Error(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            let vec2 = (e.into_bytes()).into_boxed_slice();
                            let ptr2 = vec2.as_ptr().cast::<u8>();
                            let len2 = vec2.len();
                            ::core::mem::forget(vec2);
                            *ptr1.add(8).cast::<usize>() = len2;
                            *ptr1.add(4).cast::<*mut u8>() = ptr2.cast_mut();
                        }
                        CheckoutResult::Success(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            let OrderConfirmation { order_id: order_id3 } = e;
                            let vec4 = (order_id3.into_bytes()).into_boxed_slice();
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            ::core::mem::forget(vec4);
                            *ptr1.add(8).cast::<usize>() = len4;
                            *ptr1.add(4).cast::<*mut u8>() = ptr4.cast_mut();
                        }
                    }
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_cart_checkout<T: GuestCart>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                        _ => {
                            let l3 = *arg0.add(4).cast::<*mut u8>();
                            let l4 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l3, l4, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_cart_get_cart_contents_cabi<T: GuestCart>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::get_cart_contents(
                        CartBorrow::lift(arg0 as u32 as usize).get(),
                    );
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let vec5 = result0;
                    let len5 = vec5.len();
                    let layout5 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec5.len() * 24,
                        4,
                    );
                    let result5 = if layout5.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout5).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout5);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec5.into_iter().enumerate() {
                        let base = result5.add(i * 24);
                        {
                            let ProductItem {
                                product_id: product_id2,
                                name: name2,
                                price: price2,
                                quantity: quantity2,
                            } = e;
                            let vec3 = (product_id2.into_bytes()).into_boxed_slice();
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            ::core::mem::forget(vec3);
                            *base.add(4).cast::<usize>() = len3;
                            *base.add(0).cast::<*mut u8>() = ptr3.cast_mut();
                            let vec4 = (name2.into_bytes()).into_boxed_slice();
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            ::core::mem::forget(vec4);
                            *base.add(12).cast::<usize>() = len4;
                            *base.add(8).cast::<*mut u8>() = ptr4.cast_mut();
                            *base.add(16).cast::<f32>() = _rt::as_f32(price2);
                            *base.add(20).cast::<i32>() = _rt::as_i32(quantity2);
                        }
                    }
                    *ptr1.add(4).cast::<usize>() = len5;
                    *ptr1.add(0).cast::<*mut u8>() = result5;
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_cart_get_cart_contents<T: GuestCart>(
                    arg0: *mut u8,
                ) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0.add(4).cast::<usize>();
                    let base6 = l0;
                    let len6 = l1;
                    for i in 0..len6 {
                        let base = base6.add(i * 24);
                        {
                            let l2 = *base.add(0).cast::<*mut u8>();
                            let l3 = *base.add(4).cast::<usize>();
                            _rt::cabi_dealloc(l2, l3, 1);
                            let l4 = *base.add(8).cast::<*mut u8>();
                            let l5 = *base.add(12).cast::<usize>();
                            _rt::cabi_dealloc(l4, l5, 1);
                        }
                    }
                    _rt::cabi_dealloc(base6, len6 * 24, 4);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_cart_merge_with_cabi<T: GuestCart>(
                    arg0: *mut u8,
                    arg1: i32,
                ) {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    T::merge_with(
                        CartBorrow::lift(arg0 as u32 as usize).get(),
                        CartBorrow::lift(arg1 as u32 as usize),
                    );
                }
                pub trait Guest {
                    type Cart: GuestCart;
                }
                pub trait GuestCart: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]golem:it/api")]
                            extern "C" {
                                #[link_name = "[resource-new]cart"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }
                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]golem:it/api")]
                            extern "C" {
                                #[link_name = "[resource-rep]cart"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }
                    fn new(user_id: _rt::String) -> Self;
                    fn add_item(&self, item: ProductItem);
                    fn remove_item(&self, product_id: _rt::String);
                    fn update_item_quantity(
                        &self,
                        product_id: _rt::String,
                        quantity: u32,
                    );
                    fn checkout(&self) -> CheckoutResult;
                    fn get_cart_contents(&self) -> _rt::Vec<ProductItem>;
                    fn merge_with(&self, other_cart: CartBorrow<'_>);
                }
                #[doc(hidden)]
                macro_rules! __export_golem_it_api_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[export_name =
                        "golem:it/api#[constructor]cart"] unsafe extern "C" fn
                        export_constructor_cart(arg0 : * mut u8, arg1 : usize,) -> i32 {
                        $($path_to_types)*:: _export_constructor_cart_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::Cart > (arg0, arg1) } #[export_name
                        = "golem:it/api#[method]cart.add-item"] unsafe extern "C" fn
                        export_method_cart_add_item(arg0 : * mut u8, arg1 : * mut u8,
                        arg2 : usize, arg3 : * mut u8, arg4 : usize, arg5 : f32, arg6 :
                        i32,) { $($path_to_types)*::
                        _export_method_cart_add_item_cabi::<<$ty as $($path_to_types)*::
                        Guest >::Cart > (arg0, arg1, arg2, arg3, arg4, arg5, arg6) }
                        #[export_name = "golem:it/api#[method]cart.remove-item"] unsafe
                        extern "C" fn export_method_cart_remove_item(arg0 : * mut u8,
                        arg1 : * mut u8, arg2 : usize,) { $($path_to_types)*::
                        _export_method_cart_remove_item_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::Cart > (arg0, arg1, arg2) }
                        #[export_name = "golem:it/api#[method]cart.update-item-quantity"]
                        unsafe extern "C" fn export_method_cart_update_item_quantity(arg0
                        : * mut u8, arg1 : * mut u8, arg2 : usize, arg3 : i32,) {
                        $($path_to_types)*::
                        _export_method_cart_update_item_quantity_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::Cart > (arg0, arg1, arg2, arg3) }
                        #[export_name = "golem:it/api#[method]cart.checkout"] unsafe
                        extern "C" fn export_method_cart_checkout(arg0 : * mut u8,) -> *
                        mut u8 { $($path_to_types)*::
                        _export_method_cart_checkout_cabi::<<$ty as $($path_to_types)*::
                        Guest >::Cart > (arg0) } #[export_name =
                        "cabi_post_golem:it/api#[method]cart.checkout"] unsafe extern "C"
                        fn _post_return_method_cart_checkout(arg0 : * mut u8,) {
                        $($path_to_types)*:: __post_return_method_cart_checkout::<<$ty as
                        $($path_to_types)*:: Guest >::Cart > (arg0) } #[export_name =
                        "golem:it/api#[method]cart.get-cart-contents"] unsafe extern "C"
                        fn export_method_cart_get_cart_contents(arg0 : * mut u8,) -> *
                        mut u8 { $($path_to_types)*::
                        _export_method_cart_get_cart_contents_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::Cart > (arg0) } #[export_name =
                        "cabi_post_golem:it/api#[method]cart.get-cart-contents"] unsafe
                        extern "C" fn _post_return_method_cart_get_cart_contents(arg0 : *
                        mut u8,) { $($path_to_types)*::
                        __post_return_method_cart_get_cart_contents::<<$ty as
                        $($path_to_types)*:: Guest >::Cart > (arg0) } #[export_name =
                        "golem:it/api#[method]cart.merge-with"] unsafe extern "C" fn
                        export_method_cart_merge_with(arg0 : * mut u8, arg1 : i32,) {
                        $($path_to_types)*:: _export_method_cart_merge_with_cabi::<<$ty
                        as $($path_to_types)*:: Guest >::Cart > (arg0, arg1) } const _ :
                        () = { #[doc(hidden)] #[export_name = "golem:it/api#[dtor]cart"]
                        #[allow(non_snake_case)] unsafe extern "C" fn dtor(rep : * mut
                        u8) { $($path_to_types)*:: Cart::dtor::< <$ty as
                        $($path_to_types)*:: Guest >::Cart > (rep) } }; };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_golem_it_api_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 12]);
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 12],
                );
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    pub use alloc_crate::string::String;
    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};
    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }
    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }
    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }
        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }
        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }
    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource").field("handle", &self.handle).finish()
        }
    }
    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    u32::MAX => {}
                    other => T::drop(other),
                }
            }
        }
    }
    pub use alloc_crate::boxed::Box;
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    pub fn as_f32<T: AsF32>(t: T) -> f32 {
        t.as_f32()
    }
    pub trait AsF32 {
        fn as_f32(self) -> f32;
    }
    impl<'a, T: Copy + AsF32> AsF32 for &'a T {
        fn as_f32(self) -> f32 {
            (*self).as_f32()
        }
    }
    impl AsF32 for f32 {
        #[inline]
        fn as_f32(self) -> f32 {
            self as f32
        }
    }
    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }
    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }
    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }
    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub use alloc_crate::alloc;
    extern crate alloc as alloc_crate;
}
/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_shopping_cart_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::golem::it::api::__export_golem_it_api_cabi!($ty with_types_in
        $($path_to_types_root)*:: exports::golem::it::api);
    };
}
#[doc(inline)]
pub(crate) use __export_shopping_cart_impl as export;
#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.36.0:golem:it:shopping-cart:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 725] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xd1\x04\x01A\x02\x01\
A\x02\x01B\x1a\x01r\x04\x0aproduct-ids\x04names\x05pricev\x08quantityy\x04\0\x0c\
product-item\x03\0\0\x01p\x01\x01r\x04\x08order-ids\x05items\x02\x05totalv\x09ti\
mestampw\x04\0\x05order\x03\0\x03\x01r\x01\x08order-ids\x04\0\x12order-confirmat\
ion\x03\0\x05\x01q\x02\x05error\x01s\0\x07success\x01\x06\0\x04\0\x0fcheckout-re\
sult\x03\0\x07\x04\0\x04cart\x03\x01\x01i\x09\x01@\x01\x07user-ids\0\x0a\x04\0\x11\
[constructor]cart\x01\x0b\x01h\x09\x01@\x02\x04self\x0c\x04item\x01\x01\0\x04\0\x15\
[method]cart.add-item\x01\x0d\x01@\x02\x04self\x0c\x0aproduct-ids\x01\0\x04\0\x18\
[method]cart.remove-item\x01\x0e\x01@\x03\x04self\x0c\x0aproduct-ids\x08quantity\
y\x01\0\x04\0![method]cart.update-item-quantity\x01\x0f\x01@\x01\x04self\x0c\0\x08\
\x04\0\x15[method]cart.checkout\x01\x10\x01@\x01\x04self\x0c\0\x02\x04\0\x1e[met\
hod]cart.get-cart-contents\x01\x11\x01@\x02\x04self\x0c\x0aother-cart\x0c\x01\0\x04\
\0\x17[method]cart.merge-with\x01\x12\x04\0\x0cgolem:it/api\x05\0\x04\0\x16golem\
:it/shopping-cart\x04\0\x0b\x13\x01\0\x0dshopping-cart\x03\0\0\0G\x09producers\x01\
\x0cprocessed-by\x02\x0dwit-component\x070.220.0\x10wit-bindgen-rust\x060.36.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
