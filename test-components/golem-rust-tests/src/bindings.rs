// Generated by `wit-bindgen` 0.36.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod golem {
        pub mod it {
            #[allow(dead_code, clippy::all)]
            pub mod api {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_fail_with_custom_max_retries_cabi<T: Guest>(
                    arg0: i64,
                ) {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    T::fail_with_custom_max_retries(arg0 as u64);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_explicit_commit_cabi<T: Guest>(arg0: i32) {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    T::explicit_commit(arg0 as u8);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_atomic_region_cabi<T: Guest>() {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    T::atomic_region();
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_idempotence_flag_cabi<T: Guest>(arg0: i32) {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    T::idempotence_flag(_rt::bool_lift(arg0 as u8));
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_persist_nothing_cabi<T: Guest>() {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    T::persist_nothing();
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_fallible_transaction_test_cabi<T: Guest>() -> i64 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::fallible_transaction_test();
                    _rt::as_i64(result0)
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_infallible_transaction_test_cabi<T: Guest>() -> i64 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::infallible_transaction_test();
                    _rt::as_i64(result0)
                }
                pub trait Guest {
                    fn fail_with_custom_max_retries(max_retries: u64);
                    fn explicit_commit(replicas: u8);
                    fn atomic_region();
                    fn idempotence_flag(enabled: bool);
                    fn persist_nothing();
                    fn fallible_transaction_test() -> u64;
                    fn infallible_transaction_test() -> u64;
                }
                #[doc(hidden)]
                macro_rules! __export_golem_it_api_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[export_name =
                        "golem:it/api#fail-with-custom-max-retries"] unsafe extern "C" fn
                        export_fail_with_custom_max_retries(arg0 : i64,) {
                        $($path_to_types)*::
                        _export_fail_with_custom_max_retries_cabi::<$ty > (arg0) }
                        #[export_name = "golem:it/api#explicit-commit"] unsafe extern "C"
                        fn export_explicit_commit(arg0 : i32,) { $($path_to_types)*::
                        _export_explicit_commit_cabi::<$ty > (arg0) } #[export_name =
                        "golem:it/api#atomic-region"] unsafe extern "C" fn
                        export_atomic_region() { $($path_to_types)*::
                        _export_atomic_region_cabi::<$ty > () } #[export_name =
                        "golem:it/api#idempotence-flag"] unsafe extern "C" fn
                        export_idempotence_flag(arg0 : i32,) { $($path_to_types)*::
                        _export_idempotence_flag_cabi::<$ty > (arg0) } #[export_name =
                        "golem:it/api#persist-nothing"] unsafe extern "C" fn
                        export_persist_nothing() { $($path_to_types)*::
                        _export_persist_nothing_cabi::<$ty > () } #[export_name =
                        "golem:it/api#fallible-transaction-test"] unsafe extern "C" fn
                        export_fallible_transaction_test() -> i64 { $($path_to_types)*::
                        _export_fallible_transaction_test_cabi::<$ty > () } #[export_name
                        = "golem:it/api#infallible-transaction-test"] unsafe extern "C"
                        fn export_infallible_transaction_test() -> i64 {
                        $($path_to_types)*::
                        _export_infallible_transaction_test_cabi::<$ty > () } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_golem_it_api_cabi;
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }
    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }
    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }
    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }
    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
}
/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_golem_rust_tests_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::golem::it::api::__export_golem_it_api_cabi!($ty with_types_in
        $($path_to_types_root)*:: exports::golem::it::api);
    };
}
#[doc(inline)]
pub(crate) use __export_golem_rust_tests_impl as export;
#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.36.0:golem:it:golem-rust-tests:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 422] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\x9f\x02\x01A\x02\x01\
A\x02\x01B\x0c\x01@\x01\x0bmax-retriesw\x01\0\x04\0\x1cfail-with-custom-max-retr\
ies\x01\0\x01@\x01\x08replicas}\x01\0\x04\0\x0fexplicit-commit\x01\x01\x01@\0\x01\
\0\x04\0\x0datomic-region\x01\x02\x01@\x01\x07enabled\x7f\x01\0\x04\0\x10idempot\
ence-flag\x01\x03\x04\0\x0fpersist-nothing\x01\x02\x01@\0\0w\x04\0\x19fallible-t\
ransaction-test\x01\x04\x04\0\x1binfallible-transaction-test\x01\x04\x04\0\x0cgo\
lem:it/api\x05\0\x04\0\x19golem:it/golem-rust-tests\x04\0\x0b\x16\x01\0\x10golem\
-rust-tests\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x07\
0.220.0\x10wit-bindgen-rust\x060.36.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
