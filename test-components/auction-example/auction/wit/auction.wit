package auction:auction;

interface api {
  record bidder-id {
    bidder-id: string,
  }

  record auction-id {
    auction-id: string,
  }

  type deadline = u64;

  record auction {
    auction-id: auction-id,
    name: string,
    description: string,
    limit-price: f32,
    expiration: deadline,
  }

  variant bid-result {
    auction-expired,
    price-too-low,
    success,
  }

  initialize: func(auction: auction) -> ();

  bid: func(bidder-id: bidder-id, price: float32) -> bid-result;

  close-auction: func() -> option<bidder-id>;

  // an alternative interface for hosting multiple auctions in a single worker
  resource running-auction {
    constructor(auction: auction);
    bid: func(bidder-id: bidder-id, price: float32) -> bid-result;
    close: func() -> option<bidder-id>;
  }
}

world auction {
  export api;
}