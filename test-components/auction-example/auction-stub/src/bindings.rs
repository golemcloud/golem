// Generated by `wit-bindgen` 0.16.0. DO NOT EDIT!
pub mod auction {
  pub mod auction {
    
    #[allow(clippy::all)]
    pub mod api {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      #[derive(Clone)]
      pub struct BidderId {
        pub bidder_id: wit_bindgen::rt::string::String,
      }
      impl ::core::fmt::Debug for BidderId {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("BidderId").field("bidder-id", &self.bidder_id).finish()
        }
      }
      #[derive(Clone)]
      pub struct AuctionId {
        pub auction_id: wit_bindgen::rt::string::String,
      }
      impl ::core::fmt::Debug for AuctionId {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("AuctionId").field("auction-id", &self.auction_id).finish()
        }
      }
      pub type Deadline = u64;
      #[derive(Clone)]
      pub struct Auction {
        pub auction_id: AuctionId,
        pub name: wit_bindgen::rt::string::String,
        pub description: wit_bindgen::rt::string::String,
        pub limit_price: f32,
        pub expiration: Deadline,
      }
      impl ::core::fmt::Debug for Auction {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Auction").field("auction-id", &self.auction_id).field("name", &self.name).field("description", &self.description).field("limit-price", &self.limit_price).field("expiration", &self.expiration).finish()
        }
      }
      #[derive(Clone, Copy)]
      pub enum BidResult{
        AuctionExpired,
        PriceTooLow,
        Success,
      }
      impl ::core::fmt::Debug for BidResult {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            BidResult::AuctionExpired => {
              f.debug_tuple("BidResult::AuctionExpired").finish()
            }
            BidResult::PriceTooLow => {
              f.debug_tuple("BidResult::PriceTooLow").finish()
            }
            BidResult::Success => {
              f.debug_tuple("BidResult::Success").finish()
            }
          }
        }
      }
      /// an alternative interface for hosting multiple auctions in a single worker
      
      #[derive(Debug)]
      #[repr(transparent)]
      pub struct RunningAuction{
        handle: wit_bindgen::rt::Resource<RunningAuction>,
      }
      
      impl RunningAuction{
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
          Self {
            handle: wit_bindgen::rt::Resource::from_handle(handle),
          }
        }
        
        #[doc(hidden)]
        pub fn into_handle(self) -> u32 {
          wit_bindgen::rt::Resource::into_handle(self.handle)
        }
        
        #[doc(hidden)]
        pub fn handle(&self) -> u32 {
          wit_bindgen::rt::Resource::handle(&self.handle)
        }
      }
      
      
      unsafe impl wit_bindgen::rt::WasmResource for RunningAuction{
        #[inline]
        unsafe fn drop(_handle: u32) {
          #[cfg(not(target_arch = "wasm32"))]
          unreachable!();
          
          #[cfg(target_arch = "wasm32")]
          {
            #[link(wasm_import_module = "auction:auction/api")]
            extern "C" {
              #[link_name = "[resource-drop]running-auction"]
              fn drop(_: u32);
            }
            
            drop(_handle);
          }
        }
      }
      
      #[allow(unused_unsafe, clippy::all)]
      pub fn initialize(auction: &Auction,){
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          let Auction{ auction_id:auction_id0, name:name0, description:description0, limit_price:limit_price0, expiration:expiration0, } = auction;
          let AuctionId{ auction_id:auction_id1, } = auction_id0;
          let vec2 = auction_id1;
          let ptr2 = vec2.as_ptr() as i32;
          let len2 = vec2.len() as i32;
          let vec3 = name0;
          let ptr3 = vec3.as_ptr() as i32;
          let len3 = vec3.len() as i32;
          let vec4 = description0;
          let ptr4 = vec4.as_ptr() as i32;
          let len4 = vec4.len() as i32;
          
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "auction:auction/api")]
          extern "C" {
            #[link_name = "initialize"]
            fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: f32, _: i64, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: f32, _: i64, ){ unreachable!() }
          wit_import(ptr2, len2, ptr3, len3, ptr4, len4, wit_bindgen::rt::as_f32(limit_price0), wit_bindgen::rt::as_i64(expiration0));
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      pub fn bid(bidder_id: &BidderId,price: f32,) -> BidResult{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          let BidderId{ bidder_id:bidder_id0, } = bidder_id;
          let vec1 = bidder_id0;
          let ptr1 = vec1.as_ptr() as i32;
          let len1 = vec1.len() as i32;
          
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "auction:auction/api")]
          extern "C" {
            #[link_name = "bid"]
            fn wit_import(_: i32, _: i32, _: f32, ) -> i32;
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, _: i32, _: f32, ) -> i32{ unreachable!() }
          let ret = wit_import(ptr1, len1, wit_bindgen::rt::as_f32(price));
          let v2 = match ret {
            0 => {
              BidResult::AuctionExpired
            }
            1 => {
              BidResult::PriceTooLow
            }
            n => {
              debug_assert_eq!(n, 2, "invalid enum discriminant");
              BidResult::Success
            }
          };
          v2
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      pub fn close_auction() -> Option<BidderId>{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(4))]
          struct RetArea([u8; 12]);
          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
          let ptr0 = ret_area.as_mut_ptr() as i32;
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "auction:auction/api")]
          extern "C" {
            #[link_name = "close-auction"]
            fn wit_import(_: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, ){ unreachable!() }
          wit_import(ptr0);
          let l1 = i32::from(*((ptr0 + 0) as *const u8));
          match l1 {
            0 => None,
            1 => {
              let e = {
                let l2 = *((ptr0 + 4) as *const i32);
                let l3 = *((ptr0 + 8) as *const i32);
                let len4 = l3 as usize;
                let bytes4 = Vec::from_raw_parts(l2 as *mut _, len4, len4);
                
                BidderId{
                  bidder_id: wit_bindgen::rt::string_lift(bytes4),
                }
              };
              Some(e)
            }
            _ => wit_bindgen::rt::invalid_enum_discriminant(),
          }
        }
      }
      impl RunningAuction {
        #[allow(unused_unsafe, clippy::all)]
        pub fn new(auction: &Auction,) -> Self{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            let Auction{ auction_id:auction_id0, name:name0, description:description0, limit_price:limit_price0, expiration:expiration0, } = auction;
            let AuctionId{ auction_id:auction_id1, } = auction_id0;
            let vec2 = auction_id1;
            let ptr2 = vec2.as_ptr() as i32;
            let len2 = vec2.len() as i32;
            let vec3 = name0;
            let ptr3 = vec3.as_ptr() as i32;
            let len3 = vec3.len() as i32;
            let vec4 = description0;
            let ptr4 = vec4.as_ptr() as i32;
            let len4 = vec4.len() as i32;
            
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "auction:auction/api")]
            extern "C" {
              #[link_name = "[constructor]running-auction"]
              fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: f32, _: i64, ) -> i32;
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: f32, _: i64, ) -> i32{ unreachable!() }
            let ret = wit_import(ptr2, len2, ptr3, len3, ptr4, len4, wit_bindgen::rt::as_f32(limit_price0), wit_bindgen::rt::as_i64(expiration0));
            RunningAuction::from_handle(ret as u32)
          }
        }
      }
      impl RunningAuction {
        #[allow(unused_unsafe, clippy::all)]
        pub fn bid(&self,bidder_id: &BidderId,price: f32,) -> BidResult{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            let BidderId{ bidder_id:bidder_id0, } = bidder_id;
            let vec1 = bidder_id0;
            let ptr1 = vec1.as_ptr() as i32;
            let len1 = vec1.len() as i32;
            
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "auction:auction/api")]
            extern "C" {
              #[link_name = "[method]running-auction.bid"]
              fn wit_import(_: i32, _: i32, _: i32, _: f32, ) -> i32;
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i32, _: i32, _: f32, ) -> i32{ unreachable!() }
            let ret = wit_import((self).handle() as i32, ptr1, len1, wit_bindgen::rt::as_f32(price));
            let v2 = match ret {
              0 => {
                BidResult::AuctionExpired
              }
              1 => {
                BidResult::PriceTooLow
              }
              n => {
                debug_assert_eq!(n, 2, "invalid enum discriminant");
                BidResult::Success
              }
            };
            v2
          }
        }
      }
      impl RunningAuction {
        #[allow(unused_unsafe, clippy::all)]
        pub fn close(&self,) -> Option<BidderId>{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            
            #[repr(align(4))]
            struct RetArea([u8; 12]);
            let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "auction:auction/api")]
            extern "C" {
              #[link_name = "[method]running-auction.close"]
              fn wit_import(_: i32, _: i32, );
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i32, ){ unreachable!() }
            wit_import((self).handle() as i32, ptr0);
            let l1 = i32::from(*((ptr0 + 0) as *const u8));
            match l1 {
              0 => None,
              1 => {
                let e = {
                  let l2 = *((ptr0 + 4) as *const i32);
                  let l3 = *((ptr0 + 8) as *const i32);
                  let len4 = l3 as usize;
                  let bytes4 = Vec::from_raw_parts(l2 as *mut _, len4, len4);
                  
                  BidderId{
                    bidder_id: wit_bindgen::rt::string_lift(bytes4),
                  }
                };
                Some(e)
              }
              _ => wit_bindgen::rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      
    }
    
  }
}
pub mod golem {
  pub mod rpc {
    
    #[allow(clippy::all)]
    pub mod types {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      pub type NodeIndex = i32;
      #[derive(Clone)]
      pub struct Uri {
        pub value: wit_bindgen::rt::string::String,
      }
      impl ::core::fmt::Debug for Uri {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Uri").field("value", &self.value).finish()
        }
      }
      #[derive(Clone)]
      pub enum WitNode{
        RecordValue(wit_bindgen::rt::vec::Vec::<NodeIndex>),
        VariantValue((u32,Option<NodeIndex>,)),
        EnumValue(u32),
        FlagsValue(wit_bindgen::rt::vec::Vec::<bool>),
        TupleValue(wit_bindgen::rt::vec::Vec::<NodeIndex>),
        ListValue(wit_bindgen::rt::vec::Vec::<NodeIndex>),
        OptionValue(Option<NodeIndex>),
        ResultValue(Result<Option<NodeIndex>,Option<NodeIndex>>),
        PrimU8(u8),
        PrimU16(u16),
        PrimU32(u32),
        PrimU64(u64),
        PrimS8(i8),
        PrimS16(i16),
        PrimS32(i32),
        PrimS64(i64),
        PrimFloat32(f32),
        PrimFloat64(f64),
        PrimChar(char),
        PrimBool(bool),
        PrimString(wit_bindgen::rt::string::String),
        Handle((Uri,u64,)),
      }
      impl ::core::fmt::Debug for WitNode {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            WitNode::RecordValue(e) => {
              f.debug_tuple("WitNode::RecordValue").field(e).finish()
            }
            WitNode::VariantValue(e) => {
              f.debug_tuple("WitNode::VariantValue").field(e).finish()
            }
            WitNode::EnumValue(e) => {
              f.debug_tuple("WitNode::EnumValue").field(e).finish()
            }
            WitNode::FlagsValue(e) => {
              f.debug_tuple("WitNode::FlagsValue").field(e).finish()
            }
            WitNode::TupleValue(e) => {
              f.debug_tuple("WitNode::TupleValue").field(e).finish()
            }
            WitNode::ListValue(e) => {
              f.debug_tuple("WitNode::ListValue").field(e).finish()
            }
            WitNode::OptionValue(e) => {
              f.debug_tuple("WitNode::OptionValue").field(e).finish()
            }
            WitNode::ResultValue(e) => {
              f.debug_tuple("WitNode::ResultValue").field(e).finish()
            }
            WitNode::PrimU8(e) => {
              f.debug_tuple("WitNode::PrimU8").field(e).finish()
            }
            WitNode::PrimU16(e) => {
              f.debug_tuple("WitNode::PrimU16").field(e).finish()
            }
            WitNode::PrimU32(e) => {
              f.debug_tuple("WitNode::PrimU32").field(e).finish()
            }
            WitNode::PrimU64(e) => {
              f.debug_tuple("WitNode::PrimU64").field(e).finish()
            }
            WitNode::PrimS8(e) => {
              f.debug_tuple("WitNode::PrimS8").field(e).finish()
            }
            WitNode::PrimS16(e) => {
              f.debug_tuple("WitNode::PrimS16").field(e).finish()
            }
            WitNode::PrimS32(e) => {
              f.debug_tuple("WitNode::PrimS32").field(e).finish()
            }
            WitNode::PrimS64(e) => {
              f.debug_tuple("WitNode::PrimS64").field(e).finish()
            }
            WitNode::PrimFloat32(e) => {
              f.debug_tuple("WitNode::PrimFloat32").field(e).finish()
            }
            WitNode::PrimFloat64(e) => {
              f.debug_tuple("WitNode::PrimFloat64").field(e).finish()
            }
            WitNode::PrimChar(e) => {
              f.debug_tuple("WitNode::PrimChar").field(e).finish()
            }
            WitNode::PrimBool(e) => {
              f.debug_tuple("WitNode::PrimBool").field(e).finish()
            }
            WitNode::PrimString(e) => {
              f.debug_tuple("WitNode::PrimString").field(e).finish()
            }
            WitNode::Handle(e) => {
              f.debug_tuple("WitNode::Handle").field(e).finish()
            }
          }
        }
      }
      #[derive(Clone)]
      pub struct WitValue {
        pub nodes: wit_bindgen::rt::vec::Vec::<WitNode>,
      }
      impl ::core::fmt::Debug for WitValue {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("WitValue").field("nodes", &self.nodes).finish()
        }
      }
      #[derive(Clone)]
      pub enum RpcError{
        ProtocolError(wit_bindgen::rt::string::String),
        Denied(wit_bindgen::rt::string::String),
        NotFound(wit_bindgen::rt::string::String),
        RemoteInternalError(wit_bindgen::rt::string::String),
      }
      impl ::core::fmt::Debug for RpcError {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            RpcError::ProtocolError(e) => {
              f.debug_tuple("RpcError::ProtocolError").field(e).finish()
            }
            RpcError::Denied(e) => {
              f.debug_tuple("RpcError::Denied").field(e).finish()
            }
            RpcError::NotFound(e) => {
              f.debug_tuple("RpcError::NotFound").field(e).finish()
            }
            RpcError::RemoteInternalError(e) => {
              f.debug_tuple("RpcError::RemoteInternalError").field(e).finish()
            }
          }
        }
      }
      impl ::core::fmt::Display for RpcError {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          write!(f, "{:?}", self)
        }
      }
      
      impl std::error::Error for RpcError {}
      
      #[derive(Debug)]
      #[repr(transparent)]
      pub struct WasmRpc{
        handle: wit_bindgen::rt::Resource<WasmRpc>,
      }
      
      impl WasmRpc{
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
          Self {
            handle: wit_bindgen::rt::Resource::from_handle(handle),
          }
        }
        
        #[doc(hidden)]
        pub fn into_handle(self) -> u32 {
          wit_bindgen::rt::Resource::into_handle(self.handle)
        }
        
        #[doc(hidden)]
        pub fn handle(&self) -> u32 {
          wit_bindgen::rt::Resource::handle(&self.handle)
        }
      }
      
      
      unsafe impl wit_bindgen::rt::WasmResource for WasmRpc{
        #[inline]
        unsafe fn drop(_handle: u32) {
          #[cfg(not(target_arch = "wasm32"))]
          unreachable!();
          
          #[cfg(target_arch = "wasm32")]
          {
            #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
            extern "C" {
              #[link_name = "[resource-drop]wasm-rpc"]
              fn drop(_: u32);
            }
            
            drop(_handle);
          }
        }
      }
      
      impl WasmRpc {
        #[allow(unused_unsafe, clippy::all)]
        pub fn new(location: &Uri,) -> Self{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            let Uri{ value:value0, } = location;
            let vec1 = value0;
            let ptr1 = vec1.as_ptr() as i32;
            let len1 = vec1.len() as i32;
            
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
            extern "C" {
              #[link_name = "[constructor]wasm-rpc"]
              fn wit_import(_: i32, _: i32, ) -> i32;
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i32, ) -> i32{ unreachable!() }
            let ret = wit_import(ptr1, len1);
            WasmRpc::from_handle(ret as u32)
          }
        }
      }
      impl WasmRpc {
        #[allow(unused_unsafe, clippy::all)]
        pub fn invoke_and_await(&self,function_name: &str,function_params: &[WitValue],) -> Result<WitValue,RpcError>{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            let mut cleanup_list = Vec::new();
            
            #[repr(align(4))]
            struct RetArea([u8; 16]);
            let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
            let vec0 = function_name;
            let ptr0 = vec0.as_ptr() as i32;
            let len0 = vec0.len() as i32;
            let vec12 = function_params;
            let len12 = vec12.len() as i32;
            let layout12 = alloc::Layout::from_size_align_unchecked(vec12.len() * 8, 4);
            let result12 = if layout12.size() != 0
            {
              let ptr = alloc::alloc(layout12);
              if ptr.is_null()
              {
                alloc::handle_alloc_error(layout12);
              }
              ptr
            }else {{
              ::core::ptr::null_mut()
            }};
            for (i, e) in vec12.into_iter().enumerate() {
              let base = result12 as i32 + (i as i32) * 8;
              {
                let WitValue{ nodes:nodes1, } = e;
                let vec11 = nodes1;
                let len11 = vec11.len() as i32;
                let layout11 = alloc::Layout::from_size_align_unchecked(vec11.len() * 24, 8);
                let result11 = if layout11.size() != 0
                {
                  let ptr = alloc::alloc(layout11);
                  if ptr.is_null()
                  {
                    alloc::handle_alloc_error(layout11);
                  }
                  ptr
                }else {{
                  ::core::ptr::null_mut()
                }};
                for (i, e) in vec11.into_iter().enumerate() {
                  let base = result11 as i32 + (i as i32) * 24;
                  {
                    match e {
                      WitNode::RecordValue(e) => {
                        *((base + 0) as *mut u8) = (0i32) as u8;
                        let vec2 = e;
                        let ptr2 = vec2.as_ptr() as i32;
                        let len2 = vec2.len() as i32;
                        *((base + 12) as *mut i32) = len2;
                        *((base + 8) as *mut i32) = ptr2;
                      },
                      WitNode::VariantValue(e) => {
                        *((base + 0) as *mut u8) = (1i32) as u8;
                        let (t3_0, t3_1, ) = e;
                        *((base + 8) as *mut i32) = wit_bindgen::rt::as_i32(t3_0);
                        match t3_1 {
                          Some(e) => {
                            *((base + 12) as *mut u8) = (1i32) as u8;
                            *((base + 16) as *mut i32) = wit_bindgen::rt::as_i32(e);
                          },
                          None => {
                            {
                              *((base + 12) as *mut u8) = (0i32) as u8;
                            }
                          },
                        };},
                        WitNode::EnumValue(e) => {
                          *((base + 0) as *mut u8) = (2i32) as u8;
                          *((base + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                        },
                        WitNode::FlagsValue(e) => {
                          *((base + 0) as *mut u8) = (3i32) as u8;
                          let vec4 = e;
                          let len4 = vec4.len() as i32;
                          let layout4 = alloc::Layout::from_size_align_unchecked(vec4.len() * 1, 1);
                          let result4 = if layout4.size() != 0
                          {
                            let ptr = alloc::alloc(layout4);
                            if ptr.is_null()
                            {
                              alloc::handle_alloc_error(layout4);
                            }
                            ptr
                          }else {{
                            ::core::ptr::null_mut()
                          }};
                          for (i, e) in vec4.into_iter().enumerate() {
                            let base = result4 as i32 + (i as i32) * 1;
                            {
                              *((base + 0) as *mut u8) = (match e { true => 1, false => 0 }) as u8;
                            }
                          }
                          *((base + 12) as *mut i32) = len4;
                          *((base + 8) as *mut i32) = result4 as i32;
                          cleanup_list.extend_from_slice(&[(result4, layout4),]);
                        },
                        WitNode::TupleValue(e) => {
                          *((base + 0) as *mut u8) = (4i32) as u8;
                          let vec5 = e;
                          let ptr5 = vec5.as_ptr() as i32;
                          let len5 = vec5.len() as i32;
                          *((base + 12) as *mut i32) = len5;
                          *((base + 8) as *mut i32) = ptr5;
                        },
                        WitNode::ListValue(e) => {
                          *((base + 0) as *mut u8) = (5i32) as u8;
                          let vec6 = e;
                          let ptr6 = vec6.as_ptr() as i32;
                          let len6 = vec6.len() as i32;
                          *((base + 12) as *mut i32) = len6;
                          *((base + 8) as *mut i32) = ptr6;
                        },
                        WitNode::OptionValue(e) => {
                          *((base + 0) as *mut u8) = (6i32) as u8;
                          match e {
                            Some(e) => {
                              *((base + 8) as *mut u8) = (1i32) as u8;
                              *((base + 12) as *mut i32) = wit_bindgen::rt::as_i32(e);
                            },
                            None => {
                              {
                                *((base + 8) as *mut u8) = (0i32) as u8;
                              }
                            },
                          };},
                          WitNode::ResultValue(e) => {
                            *((base + 0) as *mut u8) = (7i32) as u8;
                            match e {
                              Ok(e) => { {
                                *((base + 8) as *mut u8) = (0i32) as u8;
                                match e {
                                  Some(e) => {
                                    *((base + 12) as *mut u8) = (1i32) as u8;
                                    *((base + 16) as *mut i32) = wit_bindgen::rt::as_i32(e);
                                  },
                                  None => {
                                    {
                                      *((base + 12) as *mut u8) = (0i32) as u8;
                                    }
                                  },
                                };} },
                                Err(e) => { {
                                  *((base + 8) as *mut u8) = (1i32) as u8;
                                  match e {
                                    Some(e) => {
                                      *((base + 12) as *mut u8) = (1i32) as u8;
                                      *((base + 16) as *mut i32) = wit_bindgen::rt::as_i32(e);
                                    },
                                    None => {
                                      {
                                        *((base + 12) as *mut u8) = (0i32) as u8;
                                      }
                                    },
                                  };} },
                                };},
                                WitNode::PrimU8(e) => {
                                  *((base + 0) as *mut u8) = (8i32) as u8;
                                  *((base + 8) as *mut u8) = (wit_bindgen::rt::as_i32(e)) as u8;
                                },
                                WitNode::PrimU16(e) => {
                                  *((base + 0) as *mut u8) = (9i32) as u8;
                                  *((base + 8) as *mut u16) = (wit_bindgen::rt::as_i32(e)) as u16;
                                },
                                WitNode::PrimU32(e) => {
                                  *((base + 0) as *mut u8) = (10i32) as u8;
                                  *((base + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                                },
                                WitNode::PrimU64(e) => {
                                  *((base + 0) as *mut u8) = (11i32) as u8;
                                  *((base + 8) as *mut i64) = wit_bindgen::rt::as_i64(e);
                                },
                                WitNode::PrimS8(e) => {
                                  *((base + 0) as *mut u8) = (12i32) as u8;
                                  *((base + 8) as *mut u8) = (wit_bindgen::rt::as_i32(e)) as u8;
                                },
                                WitNode::PrimS16(e) => {
                                  *((base + 0) as *mut u8) = (13i32) as u8;
                                  *((base + 8) as *mut u16) = (wit_bindgen::rt::as_i32(e)) as u16;
                                },
                                WitNode::PrimS32(e) => {
                                  *((base + 0) as *mut u8) = (14i32) as u8;
                                  *((base + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                                },
                                WitNode::PrimS64(e) => {
                                  *((base + 0) as *mut u8) = (15i32) as u8;
                                  *((base + 8) as *mut i64) = wit_bindgen::rt::as_i64(e);
                                },
                                WitNode::PrimFloat32(e) => {
                                  *((base + 0) as *mut u8) = (16i32) as u8;
                                  *((base + 8) as *mut f32) = wit_bindgen::rt::as_f32(e);
                                },
                                WitNode::PrimFloat64(e) => {
                                  *((base + 0) as *mut u8) = (17i32) as u8;
                                  *((base + 8) as *mut f64) = wit_bindgen::rt::as_f64(e);
                                },
                                WitNode::PrimChar(e) => {
                                  *((base + 0) as *mut u8) = (18i32) as u8;
                                  *((base + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                                },
                                WitNode::PrimBool(e) => {
                                  *((base + 0) as *mut u8) = (19i32) as u8;
                                  *((base + 8) as *mut u8) = (match e { true => 1, false => 0 }) as u8;
                                },
                                WitNode::PrimString(e) => {
                                  *((base + 0) as *mut u8) = (20i32) as u8;
                                  let vec7 = e;
                                  let ptr7 = vec7.as_ptr() as i32;
                                  let len7 = vec7.len() as i32;
                                  *((base + 12) as *mut i32) = len7;
                                  *((base + 8) as *mut i32) = ptr7;
                                },
                                WitNode::Handle(e) => {
                                  *((base + 0) as *mut u8) = (21i32) as u8;
                                  let (t8_0, t8_1, ) = e;
                                  let Uri{ value:value9, } = t8_0;
                                  let vec10 = value9;
                                  let ptr10 = vec10.as_ptr() as i32;
                                  let len10 = vec10.len() as i32;
                                  *((base + 12) as *mut i32) = len10;
                                  *((base + 8) as *mut i32) = ptr10;
                                  *((base + 16) as *mut i64) = wit_bindgen::rt::as_i64(t8_1);
                                },
                              }
                            }
                          }
                          *((base + 4) as *mut i32) = len11;
                          *((base + 0) as *mut i32) = result11 as i32;
                          cleanup_list.extend_from_slice(&[(result11, layout11),]);
                        }
                      }
                      let ptr13 = ret_area.as_mut_ptr() as i32;
                      #[cfg(target_arch = "wasm32")]
                      #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
                      extern "C" {
                        #[link_name = "[method]wasm-rpc.invoke-and-await"]
                        fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, );
                      }
                      
                      #[cfg(not(target_arch = "wasm32"))]
                      fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
                      wit_import((self).handle() as i32, ptr0, len0, result12 as i32, len12, ptr13);
                      let l14 = i32::from(*((ptr13 + 0) as *const u8));
                      if layout12.size() != 0 {
                        alloc::dealloc(result12, layout12);
                      }
                      for (ptr, layout) in cleanup_list {
                        
                        if layout.size() != 0 {
                          
                          alloc::dealloc(ptr, layout);
                          
                        }
                        
                      }
                      match l14 {
                        0 => {
                          let e = {
                            let l15 = *((ptr13 + 4) as *const i32);
                            let l16 = *((ptr13 + 8) as *const i32);
                            let base62 = l15;
                            let len62 = l16;
                            let mut result62 = Vec::with_capacity(len62 as usize);
                            for i in 0..len62 {
                              let base = base62 + i * 24;
                              let e62 = {
                                let l17 = i32::from(*((base + 0) as *const u8));
                                let v61 = match l17 {
                                  0 => {
                                    let e61 = {
                                      let l18 = *((base + 8) as *const i32);
                                      let l19 = *((base + 12) as *const i32);
                                      let len20 = l19 as usize;
                                      
                                      Vec::from_raw_parts(l18 as *mut _, len20, len20)
                                    };
                                    WitNode::RecordValue(e61)
                                  }
                                  1 => {
                                    let e61 = {
                                      let l21 = *((base + 8) as *const i32);
                                      let l22 = i32::from(*((base + 12) as *const u8));
                                      
                                      (l21 as u32, match l22 {
                                        0 => None,
                                        1 => {
                                          let e = {
                                            let l23 = *((base + 16) as *const i32);
                                            
                                            l23
                                          };
                                          Some(e)
                                        }
                                        _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                      })
                                    };
                                    WitNode::VariantValue(e61)
                                  }
                                  2 => {
                                    let e61 = {
                                      let l24 = *((base + 8) as *const i32);
                                      
                                      l24 as u32
                                    };
                                    WitNode::EnumValue(e61)
                                  }
                                  3 => {
                                    let e61 = {
                                      let l25 = *((base + 8) as *const i32);
                                      let l26 = *((base + 12) as *const i32);
                                      let base28 = l25;
                                      let len28 = l26;
                                      let mut result28 = Vec::with_capacity(len28 as usize);
                                      for i in 0..len28 {
                                        let base = base28 + i * 1;
                                        let e28 = {
                                          let l27 = i32::from(*((base + 0) as *const u8));
                                          
                                          wit_bindgen::rt::bool_lift(l27 as u8)
                                        };
                                        result28.push(e28);
                                      }
                                      wit_bindgen::rt::dealloc(base28, (len28 as usize) * 1, 1);
                                      
                                      result28
                                    };
                                    WitNode::FlagsValue(e61)
                                  }
                                  4 => {
                                    let e61 = {
                                      let l29 = *((base + 8) as *const i32);
                                      let l30 = *((base + 12) as *const i32);
                                      let len31 = l30 as usize;
                                      
                                      Vec::from_raw_parts(l29 as *mut _, len31, len31)
                                    };
                                    WitNode::TupleValue(e61)
                                  }
                                  5 => {
                                    let e61 = {
                                      let l32 = *((base + 8) as *const i32);
                                      let l33 = *((base + 12) as *const i32);
                                      let len34 = l33 as usize;
                                      
                                      Vec::from_raw_parts(l32 as *mut _, len34, len34)
                                    };
                                    WitNode::ListValue(e61)
                                  }
                                  6 => {
                                    let e61 = {
                                      let l35 = i32::from(*((base + 8) as *const u8));
                                      
                                      match l35 {
                                        0 => None,
                                        1 => {
                                          let e = {
                                            let l36 = *((base + 12) as *const i32);
                                            
                                            l36
                                          };
                                          Some(e)
                                        }
                                        _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                      }
                                    };
                                    WitNode::OptionValue(e61)
                                  }
                                  7 => {
                                    let e61 = {
                                      let l37 = i32::from(*((base + 8) as *const u8));
                                      
                                      match l37 {
                                        0 => {
                                          let e = {
                                            let l38 = i32::from(*((base + 12) as *const u8));
                                            
                                            match l38 {
                                              0 => None,
                                              1 => {
                                                let e = {
                                                  let l39 = *((base + 16) as *const i32);
                                                  
                                                  l39
                                                };
                                                Some(e)
                                              }
                                              _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                            }
                                          };
                                          Ok(e)
                                        }
                                        1 => {
                                          let e = {
                                            let l40 = i32::from(*((base + 12) as *const u8));
                                            
                                            match l40 {
                                              0 => None,
                                              1 => {
                                                let e = {
                                                  let l41 = *((base + 16) as *const i32);
                                                  
                                                  l41
                                                };
                                                Some(e)
                                              }
                                              _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                            }
                                          };
                                          Err(e)
                                        }
                                        _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                      }
                                    };
                                    WitNode::ResultValue(e61)
                                  }
                                  8 => {
                                    let e61 = {
                                      let l42 = i32::from(*((base + 8) as *const u8));
                                      
                                      l42 as u8
                                    };
                                    WitNode::PrimU8(e61)
                                  }
                                  9 => {
                                    let e61 = {
                                      let l43 = i32::from(*((base + 8) as *const u16));
                                      
                                      l43 as u16
                                    };
                                    WitNode::PrimU16(e61)
                                  }
                                  10 => {
                                    let e61 = {
                                      let l44 = *((base + 8) as *const i32);
                                      
                                      l44 as u32
                                    };
                                    WitNode::PrimU32(e61)
                                  }
                                  11 => {
                                    let e61 = {
                                      let l45 = *((base + 8) as *const i64);
                                      
                                      l45 as u64
                                    };
                                    WitNode::PrimU64(e61)
                                  }
                                  12 => {
                                    let e61 = {
                                      let l46 = i32::from(*((base + 8) as *const i8));
                                      
                                      l46 as i8
                                    };
                                    WitNode::PrimS8(e61)
                                  }
                                  13 => {
                                    let e61 = {
                                      let l47 = i32::from(*((base + 8) as *const i16));
                                      
                                      l47 as i16
                                    };
                                    WitNode::PrimS16(e61)
                                  }
                                  14 => {
                                    let e61 = {
                                      let l48 = *((base + 8) as *const i32);
                                      
                                      l48
                                    };
                                    WitNode::PrimS32(e61)
                                  }
                                  15 => {
                                    let e61 = {
                                      let l49 = *((base + 8) as *const i64);
                                      
                                      l49
                                    };
                                    WitNode::PrimS64(e61)
                                  }
                                  16 => {
                                    let e61 = {
                                      let l50 = *((base + 8) as *const f32);
                                      
                                      l50
                                    };
                                    WitNode::PrimFloat32(e61)
                                  }
                                  17 => {
                                    let e61 = {
                                      let l51 = *((base + 8) as *const f64);
                                      
                                      l51
                                    };
                                    WitNode::PrimFloat64(e61)
                                  }
                                  18 => {
                                    let e61 = {
                                      let l52 = *((base + 8) as *const i32);
                                      
                                      wit_bindgen::rt::char_lift(l52 as u32)
                                    };
                                    WitNode::PrimChar(e61)
                                  }
                                  19 => {
                                    let e61 = {
                                      let l53 = i32::from(*((base + 8) as *const u8));
                                      
                                      wit_bindgen::rt::bool_lift(l53 as u8)
                                    };
                                    WitNode::PrimBool(e61)
                                  }
                                  20 => {
                                    let e61 = {
                                      let l54 = *((base + 8) as *const i32);
                                      let l55 = *((base + 12) as *const i32);
                                      let len56 = l55 as usize;
                                      let bytes56 = Vec::from_raw_parts(l54 as *mut _, len56, len56);
                                      
                                      wit_bindgen::rt::string_lift(bytes56)
                                    };
                                    WitNode::PrimString(e61)
                                  }
                                  n => {
                                    debug_assert_eq!(n, 21, "invalid enum discriminant");
                                    let e61 = {
                                      let l57 = *((base + 8) as *const i32);
                                      let l58 = *((base + 12) as *const i32);
                                      let len59 = l58 as usize;
                                      let bytes59 = Vec::from_raw_parts(l57 as *mut _, len59, len59);
                                      let l60 = *((base + 16) as *const i64);
                                      
                                      (Uri{
                                        value: wit_bindgen::rt::string_lift(bytes59),
                                      }, l60 as u64)
                                    };
                                    WitNode::Handle(e61)
                                  }
                                };
                                
                                v61
                              };
                              result62.push(e62);
                            }
                            wit_bindgen::rt::dealloc(base62, (len62 as usize) * 24, 8);
                            
                            WitValue{
                              nodes: result62,
                            }
                          };
                          Ok(e)
                        }
                        1 => {
                          let e = {
                            let l63 = i32::from(*((ptr13 + 4) as *const u8));
                            let v76 = match l63 {
                              0 => {
                                let e76 = {
                                  let l64 = *((ptr13 + 8) as *const i32);
                                  let l65 = *((ptr13 + 12) as *const i32);
                                  let len66 = l65 as usize;
                                  let bytes66 = Vec::from_raw_parts(l64 as *mut _, len66, len66);
                                  
                                  wit_bindgen::rt::string_lift(bytes66)
                                };
                                RpcError::ProtocolError(e76)
                              }
                              1 => {
                                let e76 = {
                                  let l67 = *((ptr13 + 8) as *const i32);
                                  let l68 = *((ptr13 + 12) as *const i32);
                                  let len69 = l68 as usize;
                                  let bytes69 = Vec::from_raw_parts(l67 as *mut _, len69, len69);
                                  
                                  wit_bindgen::rt::string_lift(bytes69)
                                };
                                RpcError::Denied(e76)
                              }
                              2 => {
                                let e76 = {
                                  let l70 = *((ptr13 + 8) as *const i32);
                                  let l71 = *((ptr13 + 12) as *const i32);
                                  let len72 = l71 as usize;
                                  let bytes72 = Vec::from_raw_parts(l70 as *mut _, len72, len72);
                                  
                                  wit_bindgen::rt::string_lift(bytes72)
                                };
                                RpcError::NotFound(e76)
                              }
                              n => {
                                debug_assert_eq!(n, 3, "invalid enum discriminant");
                                let e76 = {
                                  let l73 = *((ptr13 + 8) as *const i32);
                                  let l74 = *((ptr13 + 12) as *const i32);
                                  let len75 = l74 as usize;
                                  let bytes75 = Vec::from_raw_parts(l73 as *mut _, len75, len75);
                                  
                                  wit_bindgen::rt::string_lift(bytes75)
                                };
                                RpcError::RemoteInternalError(e76)
                              }
                            };
                            
                            v76
                          };
                          Err(e)
                        }
                        _ => wit_bindgen::rt::invalid_enum_discriminant(),
                      }
                    }
                  }
                }
                impl WasmRpc {
                  #[allow(unused_unsafe, clippy::all)]
                  pub fn invoke(&self,function_name: &str,function_params: &[WitValue],) -> Result<(),RpcError>{
                    
                    #[allow(unused_imports)]
                    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                    unsafe {
                      let mut cleanup_list = Vec::new();
                      
                      #[repr(align(4))]
                      struct RetArea([u8; 16]);
                      let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                      let vec0 = function_name;
                      let ptr0 = vec0.as_ptr() as i32;
                      let len0 = vec0.len() as i32;
                      let vec12 = function_params;
                      let len12 = vec12.len() as i32;
                      let layout12 = alloc::Layout::from_size_align_unchecked(vec12.len() * 8, 4);
                      let result12 = if layout12.size() != 0
                      {
                        let ptr = alloc::alloc(layout12);
                        if ptr.is_null()
                        {
                          alloc::handle_alloc_error(layout12);
                        }
                        ptr
                      }else {{
                        ::core::ptr::null_mut()
                      }};
                      for (i, e) in vec12.into_iter().enumerate() {
                        let base = result12 as i32 + (i as i32) * 8;
                        {
                          let WitValue{ nodes:nodes1, } = e;
                          let vec11 = nodes1;
                          let len11 = vec11.len() as i32;
                          let layout11 = alloc::Layout::from_size_align_unchecked(vec11.len() * 24, 8);
                          let result11 = if layout11.size() != 0
                          {
                            let ptr = alloc::alloc(layout11);
                            if ptr.is_null()
                            {
                              alloc::handle_alloc_error(layout11);
                            }
                            ptr
                          }else {{
                            ::core::ptr::null_mut()
                          }};
                          for (i, e) in vec11.into_iter().enumerate() {
                            let base = result11 as i32 + (i as i32) * 24;
                            {
                              match e {
                                WitNode::RecordValue(e) => {
                                  *((base + 0) as *mut u8) = (0i32) as u8;
                                  let vec2 = e;
                                  let ptr2 = vec2.as_ptr() as i32;
                                  let len2 = vec2.len() as i32;
                                  *((base + 12) as *mut i32) = len2;
                                  *((base + 8) as *mut i32) = ptr2;
                                },
                                WitNode::VariantValue(e) => {
                                  *((base + 0) as *mut u8) = (1i32) as u8;
                                  let (t3_0, t3_1, ) = e;
                                  *((base + 8) as *mut i32) = wit_bindgen::rt::as_i32(t3_0);
                                  match t3_1 {
                                    Some(e) => {
                                      *((base + 12) as *mut u8) = (1i32) as u8;
                                      *((base + 16) as *mut i32) = wit_bindgen::rt::as_i32(e);
                                    },
                                    None => {
                                      {
                                        *((base + 12) as *mut u8) = (0i32) as u8;
                                      }
                                    },
                                  };},
                                  WitNode::EnumValue(e) => {
                                    *((base + 0) as *mut u8) = (2i32) as u8;
                                    *((base + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                                  },
                                  WitNode::FlagsValue(e) => {
                                    *((base + 0) as *mut u8) = (3i32) as u8;
                                    let vec4 = e;
                                    let len4 = vec4.len() as i32;
                                    let layout4 = alloc::Layout::from_size_align_unchecked(vec4.len() * 1, 1);
                                    let result4 = if layout4.size() != 0
                                    {
                                      let ptr = alloc::alloc(layout4);
                                      if ptr.is_null()
                                      {
                                        alloc::handle_alloc_error(layout4);
                                      }
                                      ptr
                                    }else {{
                                      ::core::ptr::null_mut()
                                    }};
                                    for (i, e) in vec4.into_iter().enumerate() {
                                      let base = result4 as i32 + (i as i32) * 1;
                                      {
                                        *((base + 0) as *mut u8) = (match e { true => 1, false => 0 }) as u8;
                                      }
                                    }
                                    *((base + 12) as *mut i32) = len4;
                                    *((base + 8) as *mut i32) = result4 as i32;
                                    cleanup_list.extend_from_slice(&[(result4, layout4),]);
                                  },
                                  WitNode::TupleValue(e) => {
                                    *((base + 0) as *mut u8) = (4i32) as u8;
                                    let vec5 = e;
                                    let ptr5 = vec5.as_ptr() as i32;
                                    let len5 = vec5.len() as i32;
                                    *((base + 12) as *mut i32) = len5;
                                    *((base + 8) as *mut i32) = ptr5;
                                  },
                                  WitNode::ListValue(e) => {
                                    *((base + 0) as *mut u8) = (5i32) as u8;
                                    let vec6 = e;
                                    let ptr6 = vec6.as_ptr() as i32;
                                    let len6 = vec6.len() as i32;
                                    *((base + 12) as *mut i32) = len6;
                                    *((base + 8) as *mut i32) = ptr6;
                                  },
                                  WitNode::OptionValue(e) => {
                                    *((base + 0) as *mut u8) = (6i32) as u8;
                                    match e {
                                      Some(e) => {
                                        *((base + 8) as *mut u8) = (1i32) as u8;
                                        *((base + 12) as *mut i32) = wit_bindgen::rt::as_i32(e);
                                      },
                                      None => {
                                        {
                                          *((base + 8) as *mut u8) = (0i32) as u8;
                                        }
                                      },
                                    };},
                                    WitNode::ResultValue(e) => {
                                      *((base + 0) as *mut u8) = (7i32) as u8;
                                      match e {
                                        Ok(e) => { {
                                          *((base + 8) as *mut u8) = (0i32) as u8;
                                          match e {
                                            Some(e) => {
                                              *((base + 12) as *mut u8) = (1i32) as u8;
                                              *((base + 16) as *mut i32) = wit_bindgen::rt::as_i32(e);
                                            },
                                            None => {
                                              {
                                                *((base + 12) as *mut u8) = (0i32) as u8;
                                              }
                                            },
                                          };} },
                                          Err(e) => { {
                                            *((base + 8) as *mut u8) = (1i32) as u8;
                                            match e {
                                              Some(e) => {
                                                *((base + 12) as *mut u8) = (1i32) as u8;
                                                *((base + 16) as *mut i32) = wit_bindgen::rt::as_i32(e);
                                              },
                                              None => {
                                                {
                                                  *((base + 12) as *mut u8) = (0i32) as u8;
                                                }
                                              },
                                            };} },
                                          };},
                                          WitNode::PrimU8(e) => {
                                            *((base + 0) as *mut u8) = (8i32) as u8;
                                            *((base + 8) as *mut u8) = (wit_bindgen::rt::as_i32(e)) as u8;
                                          },
                                          WitNode::PrimU16(e) => {
                                            *((base + 0) as *mut u8) = (9i32) as u8;
                                            *((base + 8) as *mut u16) = (wit_bindgen::rt::as_i32(e)) as u16;
                                          },
                                          WitNode::PrimU32(e) => {
                                            *((base + 0) as *mut u8) = (10i32) as u8;
                                            *((base + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                                          },
                                          WitNode::PrimU64(e) => {
                                            *((base + 0) as *mut u8) = (11i32) as u8;
                                            *((base + 8) as *mut i64) = wit_bindgen::rt::as_i64(e);
                                          },
                                          WitNode::PrimS8(e) => {
                                            *((base + 0) as *mut u8) = (12i32) as u8;
                                            *((base + 8) as *mut u8) = (wit_bindgen::rt::as_i32(e)) as u8;
                                          },
                                          WitNode::PrimS16(e) => {
                                            *((base + 0) as *mut u8) = (13i32) as u8;
                                            *((base + 8) as *mut u16) = (wit_bindgen::rt::as_i32(e)) as u16;
                                          },
                                          WitNode::PrimS32(e) => {
                                            *((base + 0) as *mut u8) = (14i32) as u8;
                                            *((base + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                                          },
                                          WitNode::PrimS64(e) => {
                                            *((base + 0) as *mut u8) = (15i32) as u8;
                                            *((base + 8) as *mut i64) = wit_bindgen::rt::as_i64(e);
                                          },
                                          WitNode::PrimFloat32(e) => {
                                            *((base + 0) as *mut u8) = (16i32) as u8;
                                            *((base + 8) as *mut f32) = wit_bindgen::rt::as_f32(e);
                                          },
                                          WitNode::PrimFloat64(e) => {
                                            *((base + 0) as *mut u8) = (17i32) as u8;
                                            *((base + 8) as *mut f64) = wit_bindgen::rt::as_f64(e);
                                          },
                                          WitNode::PrimChar(e) => {
                                            *((base + 0) as *mut u8) = (18i32) as u8;
                                            *((base + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                                          },
                                          WitNode::PrimBool(e) => {
                                            *((base + 0) as *mut u8) = (19i32) as u8;
                                            *((base + 8) as *mut u8) = (match e { true => 1, false => 0 }) as u8;
                                          },
                                          WitNode::PrimString(e) => {
                                            *((base + 0) as *mut u8) = (20i32) as u8;
                                            let vec7 = e;
                                            let ptr7 = vec7.as_ptr() as i32;
                                            let len7 = vec7.len() as i32;
                                            *((base + 12) as *mut i32) = len7;
                                            *((base + 8) as *mut i32) = ptr7;
                                          },
                                          WitNode::Handle(e) => {
                                            *((base + 0) as *mut u8) = (21i32) as u8;
                                            let (t8_0, t8_1, ) = e;
                                            let Uri{ value:value9, } = t8_0;
                                            let vec10 = value9;
                                            let ptr10 = vec10.as_ptr() as i32;
                                            let len10 = vec10.len() as i32;
                                            *((base + 12) as *mut i32) = len10;
                                            *((base + 8) as *mut i32) = ptr10;
                                            *((base + 16) as *mut i64) = wit_bindgen::rt::as_i64(t8_1);
                                          },
                                        }
                                      }
                                    }
                                    *((base + 4) as *mut i32) = len11;
                                    *((base + 0) as *mut i32) = result11 as i32;
                                    cleanup_list.extend_from_slice(&[(result11, layout11),]);
                                  }
                                }
                                let ptr13 = ret_area.as_mut_ptr() as i32;
                                #[cfg(target_arch = "wasm32")]
                                #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
                                extern "C" {
                                  #[link_name = "[method]wasm-rpc.invoke"]
                                  fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, );
                                }
                                
                                #[cfg(not(target_arch = "wasm32"))]
                                fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
                                wit_import((self).handle() as i32, ptr0, len0, result12 as i32, len12, ptr13);
                                let l14 = i32::from(*((ptr13 + 0) as *const u8));
                                if layout12.size() != 0 {
                                  alloc::dealloc(result12, layout12);
                                }
                                for (ptr, layout) in cleanup_list {
                                  
                                  if layout.size() != 0 {
                                    
                                    alloc::dealloc(ptr, layout);
                                    
                                  }
                                  
                                }
                                match l14 {
                                  0 => {
                                    let e = ();
                                    Ok(e)
                                  }
                                  1 => {
                                    let e = {
                                      let l15 = i32::from(*((ptr13 + 4) as *const u8));
                                      let v28 = match l15 {
                                        0 => {
                                          let e28 = {
                                            let l16 = *((ptr13 + 8) as *const i32);
                                            let l17 = *((ptr13 + 12) as *const i32);
                                            let len18 = l17 as usize;
                                            let bytes18 = Vec::from_raw_parts(l16 as *mut _, len18, len18);
                                            
                                            wit_bindgen::rt::string_lift(bytes18)
                                          };
                                          RpcError::ProtocolError(e28)
                                        }
                                        1 => {
                                          let e28 = {
                                            let l19 = *((ptr13 + 8) as *const i32);
                                            let l20 = *((ptr13 + 12) as *const i32);
                                            let len21 = l20 as usize;
                                            let bytes21 = Vec::from_raw_parts(l19 as *mut _, len21, len21);
                                            
                                            wit_bindgen::rt::string_lift(bytes21)
                                          };
                                          RpcError::Denied(e28)
                                        }
                                        2 => {
                                          let e28 = {
                                            let l22 = *((ptr13 + 8) as *const i32);
                                            let l23 = *((ptr13 + 12) as *const i32);
                                            let len24 = l23 as usize;
                                            let bytes24 = Vec::from_raw_parts(l22 as *mut _, len24, len24);
                                            
                                            wit_bindgen::rt::string_lift(bytes24)
                                          };
                                          RpcError::NotFound(e28)
                                        }
                                        n => {
                                          debug_assert_eq!(n, 3, "invalid enum discriminant");
                                          let e28 = {
                                            let l25 = *((ptr13 + 8) as *const i32);
                                            let l26 = *((ptr13 + 12) as *const i32);
                                            let len27 = l26 as usize;
                                            let bytes27 = Vec::from_raw_parts(l25 as *mut _, len27, len27);
                                            
                                            wit_bindgen::rt::string_lift(bytes27)
                                          };
                                          RpcError::RemoteInternalError(e28)
                                        }
                                      };
                                      
                                      v28
                                    };
                                    Err(e)
                                  }
                                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                }
                              }
                            }
                          }
                          
                        }
                        
                      }
                    }
                    pub mod exports {
                      pub mod auction {
                        pub mod auction_stub {
                          
                          #[allow(clippy::all)]
                          pub mod stub_auction {
                            #[used]
                            #[doc(hidden)]
                            #[cfg(target_arch = "wasm32")]
                            static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
                            pub type Uri = super::super::super::super::golem::rpc::types::Uri;
                            pub type BidderId = super::super::super::super::auction::auction::api::BidderId;
                            pub type Auction = super::super::super::super::auction::auction::api::Auction;
                            pub type BidResult = super::super::super::super::auction::auction::api::BidResult;
                            
                            pub use super::super::super::super::super::Api as Api;
                            const _: () = {
                              #[doc(hidden)]
                              #[export_name = "auction:auction-stub/stub-auction#[dtor]api"]
                              #[allow(non_snake_case)]
                              unsafe extern "C" fn dtor(rep: usize) {
                                wit_bindgen::rt::Resource::<Api>::dtor(rep)
                              }
                            };
                            unsafe impl wit_bindgen::rt::RustResource for Api{
                              unsafe fn new(_rep: usize) -> u32 {
                                #[cfg(not(target_arch = "wasm32"))]
                                unreachable!();
                                
                                #[cfg(target_arch = "wasm32")]
                                {
                                  #[link(wasm_import_module = "[export]auction:auction-stub/stub-auction")]
                                  extern "C" {
                                    #[link_name = "[resource-new]api"]
                                    fn new(_: usize) -> u32;
                                  }
                                  new(_rep)
                                }
                              }
                              
                              unsafe fn rep(_handle: u32) -> usize {
                                #[cfg(not(target_arch = "wasm32"))]
                                unreachable!();
                                
                                #[cfg(target_arch = "wasm32")]
                                {
                                  #[link(wasm_import_module = "[export]auction:auction-stub/stub-auction")]
                                  extern "C" {
                                    #[link_name = "[resource-rep]api"]
                                    fn rep(_: u32) -> usize;
                                  }
                                  rep(_handle)
                                }
                              }
                            }
                            pub type OwnApi = wit_bindgen::rt::Resource<Api>;
                            
                            
                            unsafe impl wit_bindgen::rt::WasmResource for Api{
                              #[inline]
                              unsafe fn drop(_handle: u32) {
                                #[cfg(not(target_arch = "wasm32"))]
                                unreachable!();
                                
                                #[cfg(target_arch = "wasm32")]
                                {
                                  #[link(wasm_import_module = "[export]auction:auction-stub/stub-auction")]
                                  extern "C" {
                                    #[link_name = "[resource-drop]api"]
                                    fn drop(_: u32);
                                  }
                                  
                                  drop(_handle);
                                }
                              }
                            }
                            
                            
                            pub use super::super::super::super::super::RunningAuction as RunningAuction;
                            const _: () = {
                              #[doc(hidden)]
                              #[export_name = "auction:auction-stub/stub-auction#[dtor]running-auction"]
                              #[allow(non_snake_case)]
                              unsafe extern "C" fn dtor(rep: usize) {
                                wit_bindgen::rt::Resource::<RunningAuction>::dtor(rep)
                              }
                            };
                            unsafe impl wit_bindgen::rt::RustResource for RunningAuction{
                              unsafe fn new(_rep: usize) -> u32 {
                                #[cfg(not(target_arch = "wasm32"))]
                                unreachable!();
                                
                                #[cfg(target_arch = "wasm32")]
                                {
                                  #[link(wasm_import_module = "[export]auction:auction-stub/stub-auction")]
                                  extern "C" {
                                    #[link_name = "[resource-new]running-auction"]
                                    fn new(_: usize) -> u32;
                                  }
                                  new(_rep)
                                }
                              }
                              
                              unsafe fn rep(_handle: u32) -> usize {
                                #[cfg(not(target_arch = "wasm32"))]
                                unreachable!();
                                
                                #[cfg(target_arch = "wasm32")]
                                {
                                  #[link(wasm_import_module = "[export]auction:auction-stub/stub-auction")]
                                  extern "C" {
                                    #[link_name = "[resource-rep]running-auction"]
                                    fn rep(_: u32) -> usize;
                                  }
                                  rep(_handle)
                                }
                              }
                            }
                            pub type OwnRunningAuction = wit_bindgen::rt::Resource<RunningAuction>;
                            
                            
                            unsafe impl wit_bindgen::rt::WasmResource for RunningAuction{
                              #[inline]
                              unsafe fn drop(_handle: u32) {
                                #[cfg(not(target_arch = "wasm32"))]
                                unreachable!();
                                
                                #[cfg(target_arch = "wasm32")]
                                {
                                  #[link(wasm_import_module = "[export]auction:auction-stub/stub-auction")]
                                  extern "C" {
                                    #[link_name = "[resource-drop]running-auction"]
                                    fn drop(_: u32);
                                  }
                                  
                                  drop(_handle);
                                }
                              }
                            }
                            
                            const _: () = {
                              
                              #[doc(hidden)]
                              #[export_name = "auction:auction-stub/stub-auction#[constructor]api"]
                              #[allow(non_snake_case)]
                              unsafe extern "C" fn __export_constructor_api(arg0: i32,arg1: i32,) -> i32 {
                                #[allow(unused_imports)]
                                use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                                
                                // Before executing any other code, use this function to run all static
                                // constructors, if they have not yet been run. This is a hack required
                                // to work around wasi-libc ctors calling import functions to initialize
                                // the environment.
                                //
                                // This functionality will be removed once rust 1.69.0 is stable, at which
                                // point wasi-libc will no longer have this behavior.
                                //
                                // See
                                // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                                // for more details.
                                #[cfg(target_arch="wasm32")]
                                wit_bindgen::rt::run_ctors_once();
                                
                                let len0 = arg1 as usize;
                                let bytes0 = Vec::from_raw_parts(arg0 as *mut _, len0, len0);
                                let result1 = OwnApi::new(<_ApiImpl as GuestApi>::new(super::super::super::super::golem::rpc::types::Uri{
                                  value: wit_bindgen::rt::string_lift(bytes0),
                                }));
                                wit_bindgen::rt::Resource::into_handle(result1) as i32
                              }
                            };
                            const _: () = {
                              
                              #[doc(hidden)]
                              #[export_name = "auction:auction-stub/stub-auction#[method]api.initialize"]
                              #[allow(non_snake_case)]
                              unsafe extern "C" fn __export_method_api_initialize(arg0: i32,arg1: i32,arg2: i32,arg3: i32,arg4: i32,arg5: i32,arg6: i32,arg7: f32,arg8: i64,) {
                                #[allow(unused_imports)]
                                use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                                
                                // Before executing any other code, use this function to run all static
                                // constructors, if they have not yet been run. This is a hack required
                                // to work around wasi-libc ctors calling import functions to initialize
                                // the environment.
                                //
                                // This functionality will be removed once rust 1.69.0 is stable, at which
                                // point wasi-libc will no longer have this behavior.
                                //
                                // See
                                // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                                // for more details.
                                #[cfg(target_arch="wasm32")]
                                wit_bindgen::rt::run_ctors_once();
                                
                                let len0 = arg2 as usize;
                                let bytes0 = Vec::from_raw_parts(arg1 as *mut _, len0, len0);
                                let len1 = arg4 as usize;
                                let bytes1 = Vec::from_raw_parts(arg3 as *mut _, len1, len1);
                                let len2 = arg6 as usize;
                                let bytes2 = Vec::from_raw_parts(arg5 as *mut _, len2, len2);
                                <_ApiImpl as GuestApi>::initialize(wit_bindgen::rt::Resource::<Api>::lift_borrow(arg0 as u32 as usize), super::super::super::super::auction::auction::api::Auction{
                                  auction_id: super::super::super::super::auction::auction::api::AuctionId{
                                    auction_id: wit_bindgen::rt::string_lift(bytes0),
                                  },
                                  name: wit_bindgen::rt::string_lift(bytes1),
                                  description: wit_bindgen::rt::string_lift(bytes2),
                                  limit_price: arg7,
                                  expiration: arg8 as u64,
                                });
                              }
                            };
                            const _: () = {
                              
                              #[doc(hidden)]
                              #[export_name = "auction:auction-stub/stub-auction#[method]api.bid"]
                              #[allow(non_snake_case)]
                              unsafe extern "C" fn __export_method_api_bid(arg0: i32,arg1: i32,arg2: i32,arg3: f32,) -> i32 {
                                #[allow(unused_imports)]
                                use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                                
                                // Before executing any other code, use this function to run all static
                                // constructors, if they have not yet been run. This is a hack required
                                // to work around wasi-libc ctors calling import functions to initialize
                                // the environment.
                                //
                                // This functionality will be removed once rust 1.69.0 is stable, at which
                                // point wasi-libc will no longer have this behavior.
                                //
                                // See
                                // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                                // for more details.
                                #[cfg(target_arch="wasm32")]
                                wit_bindgen::rt::run_ctors_once();
                                
                                let len0 = arg2 as usize;
                                let bytes0 = Vec::from_raw_parts(arg1 as *mut _, len0, len0);
                                let result1 = <_ApiImpl as GuestApi>::bid(wit_bindgen::rt::Resource::<Api>::lift_borrow(arg0 as u32 as usize), super::super::super::super::auction::auction::api::BidderId{
                                  bidder_id: wit_bindgen::rt::string_lift(bytes0),
                                }, arg3);
                                use super::super::super::super::auction::auction::api::BidResult as V2;
                                let result3 = match result1 {
                                  V2::AuctionExpired=> {
                                    0i32
                                  }
                                  V2::PriceTooLow=> {
                                    1i32
                                  }
                                  V2::Success=> {
                                    2i32
                                  }
                                };
                                result3
                              }
                            };
                            const _: () = {
                              
                              #[doc(hidden)]
                              #[export_name = "auction:auction-stub/stub-auction#[method]api.close-auction"]
                              #[allow(non_snake_case)]
                              unsafe extern "C" fn __export_method_api_close_auction(arg0: i32,) -> i32 {
                                #[allow(unused_imports)]
                                use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                                
                                // Before executing any other code, use this function to run all static
                                // constructors, if they have not yet been run. This is a hack required
                                // to work around wasi-libc ctors calling import functions to initialize
                                // the environment.
                                //
                                // This functionality will be removed once rust 1.69.0 is stable, at which
                                // point wasi-libc will no longer have this behavior.
                                //
                                // See
                                // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                                // for more details.
                                #[cfg(target_arch="wasm32")]
                                wit_bindgen::rt::run_ctors_once();
                                
                                let result0 = <_ApiImpl as GuestApi>::close_auction(wit_bindgen::rt::Resource::<Api>::lift_borrow(arg0 as u32 as usize));
                                let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
                                match result0 {
                                  Some(e) => {
                                    *((ptr1 + 0) as *mut u8) = (1i32) as u8;
                                    let super::super::super::super::auction::auction::api::BidderId{ bidder_id:bidder_id2, } = e;
                                    let vec3 = (bidder_id2.into_bytes()).into_boxed_slice();
                                    let ptr3 = vec3.as_ptr() as i32;
                                    let len3 = vec3.len() as i32;
                                    ::core::mem::forget(vec3);
                                    *((ptr1 + 8) as *mut i32) = len3;
                                    *((ptr1 + 4) as *mut i32) = ptr3;
                                  },
                                  None => {
                                    {
                                      *((ptr1 + 0) as *mut u8) = (0i32) as u8;
                                    }
                                  },
                                };ptr1
                              }
                              
                              const _: () = {
                                #[doc(hidden)]
                                #[export_name = "cabi_post_auction:auction-stub/stub-auction#[method]api.close-auction"]
                                #[allow(non_snake_case)]
                                unsafe extern "C" fn __post_return_method_api_close_auction(arg0: i32,) {
                                  let l0 = i32::from(*((arg0 + 0) as *const u8));
                                  match l0 {
                                    0 => (),
                                    _ => {
                                      let l1 = *((arg0 + 4) as *const i32);
                                      let l2 = *((arg0 + 8) as *const i32);
                                      wit_bindgen::rt::dealloc(l1, (l2) as usize, 1);
                                    },
                                  }
                                }
                              };
                            };
                            const _: () = {
                              
                              #[doc(hidden)]
                              #[export_name = "auction:auction-stub/stub-auction#[constructor]running-auction"]
                              #[allow(non_snake_case)]
                              unsafe extern "C" fn __export_constructor_running_auction(arg0: i32,arg1: i32,arg2: i32,arg3: i32,arg4: i32,arg5: i32,arg6: i32,arg7: i32,arg8: f32,arg9: i64,) -> i32 {
                                #[allow(unused_imports)]
                                use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                                
                                // Before executing any other code, use this function to run all static
                                // constructors, if they have not yet been run. This is a hack required
                                // to work around wasi-libc ctors calling import functions to initialize
                                // the environment.
                                //
                                // This functionality will be removed once rust 1.69.0 is stable, at which
                                // point wasi-libc will no longer have this behavior.
                                //
                                // See
                                // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                                // for more details.
                                #[cfg(target_arch="wasm32")]
                                wit_bindgen::rt::run_ctors_once();
                                
                                let len0 = arg1 as usize;
                                let bytes0 = Vec::from_raw_parts(arg0 as *mut _, len0, len0);
                                let len1 = arg3 as usize;
                                let bytes1 = Vec::from_raw_parts(arg2 as *mut _, len1, len1);
                                let len2 = arg5 as usize;
                                let bytes2 = Vec::from_raw_parts(arg4 as *mut _, len2, len2);
                                let len3 = arg7 as usize;
                                let bytes3 = Vec::from_raw_parts(arg6 as *mut _, len3, len3);
                                let result4 = OwnRunningAuction::new(<_RunningAuctionImpl as GuestRunningAuction>::new(super::super::super::super::golem::rpc::types::Uri{
                                  value: wit_bindgen::rt::string_lift(bytes0),
                                }, super::super::super::super::auction::auction::api::Auction{
                                  auction_id: super::super::super::super::auction::auction::api::AuctionId{
                                    auction_id: wit_bindgen::rt::string_lift(bytes1),
                                  },
                                  name: wit_bindgen::rt::string_lift(bytes2),
                                  description: wit_bindgen::rt::string_lift(bytes3),
                                  limit_price: arg8,
                                  expiration: arg9 as u64,
                                }));
                                wit_bindgen::rt::Resource::into_handle(result4) as i32
                              }
                            };
                            const _: () = {
                              
                              #[doc(hidden)]
                              #[export_name = "auction:auction-stub/stub-auction#[method]running-auction.bid"]
                              #[allow(non_snake_case)]
                              unsafe extern "C" fn __export_method_running_auction_bid(arg0: i32,arg1: i32,arg2: i32,arg3: f32,) -> i32 {
                                #[allow(unused_imports)]
                                use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                                
                                // Before executing any other code, use this function to run all static
                                // constructors, if they have not yet been run. This is a hack required
                                // to work around wasi-libc ctors calling import functions to initialize
                                // the environment.
                                //
                                // This functionality will be removed once rust 1.69.0 is stable, at which
                                // point wasi-libc will no longer have this behavior.
                                //
                                // See
                                // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                                // for more details.
                                #[cfg(target_arch="wasm32")]
                                wit_bindgen::rt::run_ctors_once();
                                
                                let len0 = arg2 as usize;
                                let bytes0 = Vec::from_raw_parts(arg1 as *mut _, len0, len0);
                                let result1 = <_RunningAuctionImpl as GuestRunningAuction>::bid(wit_bindgen::rt::Resource::<RunningAuction>::lift_borrow(arg0 as u32 as usize), super::super::super::super::auction::auction::api::BidderId{
                                  bidder_id: wit_bindgen::rt::string_lift(bytes0),
                                }, arg3);
                                use super::super::super::super::auction::auction::api::BidResult as V2;
                                let result3 = match result1 {
                                  V2::AuctionExpired=> {
                                    0i32
                                  }
                                  V2::PriceTooLow=> {
                                    1i32
                                  }
                                  V2::Success=> {
                                    2i32
                                  }
                                };
                                result3
                              }
                            };
                            const _: () = {
                              
                              #[doc(hidden)]
                              #[export_name = "auction:auction-stub/stub-auction#[method]running-auction.close"]
                              #[allow(non_snake_case)]
                              unsafe extern "C" fn __export_method_running_auction_close(arg0: i32,) -> i32 {
                                #[allow(unused_imports)]
                                use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                                
                                // Before executing any other code, use this function to run all static
                                // constructors, if they have not yet been run. This is a hack required
                                // to work around wasi-libc ctors calling import functions to initialize
                                // the environment.
                                //
                                // This functionality will be removed once rust 1.69.0 is stable, at which
                                // point wasi-libc will no longer have this behavior.
                                //
                                // See
                                // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                                // for more details.
                                #[cfg(target_arch="wasm32")]
                                wit_bindgen::rt::run_ctors_once();
                                
                                let result0 = <_RunningAuctionImpl as GuestRunningAuction>::close(wit_bindgen::rt::Resource::<RunningAuction>::lift_borrow(arg0 as u32 as usize));
                                let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
                                match result0 {
                                  Some(e) => {
                                    *((ptr1 + 0) as *mut u8) = (1i32) as u8;
                                    let super::super::super::super::auction::auction::api::BidderId{ bidder_id:bidder_id2, } = e;
                                    let vec3 = (bidder_id2.into_bytes()).into_boxed_slice();
                                    let ptr3 = vec3.as_ptr() as i32;
                                    let len3 = vec3.len() as i32;
                                    ::core::mem::forget(vec3);
                                    *((ptr1 + 8) as *mut i32) = len3;
                                    *((ptr1 + 4) as *mut i32) = ptr3;
                                  },
                                  None => {
                                    {
                                      *((ptr1 + 0) as *mut u8) = (0i32) as u8;
                                    }
                                  },
                                };ptr1
                              }
                              
                              const _: () = {
                                #[doc(hidden)]
                                #[export_name = "cabi_post_auction:auction-stub/stub-auction#[method]running-auction.close"]
                                #[allow(non_snake_case)]
                                unsafe extern "C" fn __post_return_method_running_auction_close(arg0: i32,) {
                                  let l0 = i32::from(*((arg0 + 0) as *const u8));
                                  match l0 {
                                    0 => (),
                                    _ => {
                                      let l1 = *((arg0 + 4) as *const i32);
                                      let l2 = *((arg0 + 8) as *const i32);
                                      wit_bindgen::rt::dealloc(l1, (l2) as usize, 1);
                                    },
                                  }
                                }
                              };
                            };
                            use super::super::super::super::super::Api as _ApiImpl;
                            pub trait GuestApi {
                              fn new(location: Uri,) -> Self;
                              fn initialize(&self,auction: Auction,);
                              fn bid(&self,bidder_id: BidderId,price: f32,) -> BidResult;
                              fn close_auction(&self,) -> Option<BidderId>;
                            }
                            use super::super::super::super::super::RunningAuction as _RunningAuctionImpl;
                            pub trait GuestRunningAuction {
                              fn new(location: Uri,auction: Auction,) -> Self;
                              fn bid(&self,bidder_id: BidderId,price: f32,) -> BidResult;
                              fn close(&self,) -> Option<BidderId>;
                            }
                            
                            #[allow(unused_imports)]
                            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                            
                            #[repr(align(4))]
                            struct _RetArea([u8; 12]);
                            static mut _RET_AREA: _RetArea = _RetArea([0; 12]);
                            
                          }
                          
                        }
                      }
                    }
                    
                    #[cfg(target_arch = "wasm32")]
                    #[link_section = "component-type:wasm-rpc-stub-auction"]
                    #[doc(hidden)]
                    pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 3493] = [3, 0, 21, 119, 97, 115, 109, 45, 114, 112, 99, 45, 115, 116, 117, 98, 45, 97, 117, 99, 116, 105, 111, 110, 0, 97, 115, 109, 13, 0, 1, 0, 7, 252, 10, 1, 65, 12, 1, 66, 18, 1, 122, 4, 0, 10, 110, 111, 100, 101, 45, 105, 110, 100, 101, 120, 3, 0, 0, 1, 114, 1, 5, 118, 97, 108, 117, 101, 115, 4, 0, 3, 117, 114, 105, 3, 0, 2, 1, 112, 1, 1, 107, 1, 1, 111, 2, 121, 5, 1, 112, 127, 1, 106, 1, 5, 1, 5, 1, 111, 2, 3, 119, 1, 113, 22, 12, 114, 101, 99, 111, 114, 100, 45, 118, 97, 108, 117, 101, 1, 4, 0, 13, 118, 97, 114, 105, 97, 110, 116, 45, 118, 97, 108, 117, 101, 1, 6, 0, 10, 101, 110, 117, 109, 45, 118, 97, 108, 117, 101, 1, 121, 0, 11, 102, 108, 97, 103, 115, 45, 118, 97, 108, 117, 101, 1, 7, 0, 11, 116, 117, 112, 108, 101, 45, 118, 97, 108, 117, 101, 1, 4, 0, 10, 108, 105, 115, 116, 45, 118, 97, 108, 117, 101, 1, 4, 0, 12, 111, 112, 116, 105, 111, 110, 45, 118, 97, 108, 117, 101, 1, 5, 0, 12, 114, 101, 115, 117, 108, 116, 45, 118, 97, 108, 117, 101, 1, 8, 0, 7, 112, 114, 105, 109, 45, 117, 56, 1, 125, 0, 8, 112, 114, 105, 109, 45, 117, 49, 54, 1, 123, 0, 8, 112, 114, 105, 109, 45, 117, 51, 50, 1, 121, 0, 8, 112, 114, 105, 109, 45, 117, 54, 52, 1, 119, 0, 7, 112, 114, 105, 109, 45, 115, 56, 1, 126, 0, 8, 112, 114, 105, 109, 45, 115, 49, 54, 1, 124, 0, 8, 112, 114, 105, 109, 45, 115, 51, 50, 1, 122, 0, 8, 112, 114, 105, 109, 45, 115, 54, 52, 1, 120, 0, 12, 112, 114, 105, 109, 45, 102, 108, 111, 97, 116, 51, 50, 1, 118, 0, 12, 112, 114, 105, 109, 45, 102, 108, 111, 97, 116, 54, 52, 1, 117, 0, 9, 112, 114, 105, 109, 45, 99, 104, 97, 114, 1, 116, 0, 9, 112, 114, 105, 109, 45, 98, 111, 111, 108, 1, 127, 0, 11, 112, 114, 105, 109, 45, 115, 116, 114, 105, 110, 103, 1, 115, 0, 6, 104, 97, 110, 100, 108, 101, 1, 9, 0, 4, 0, 8, 119, 105, 116, 45, 110, 111, 100, 101, 3, 0, 10, 1, 112, 11, 1, 114, 1, 5, 110, 111, 100, 101, 115, 12, 4, 0, 9, 119, 105, 116, 45, 118, 97, 108, 117, 101, 3, 0, 13, 1, 113, 4, 14, 112, 114, 111, 116, 111, 99, 111, 108, 45, 101, 114, 114, 111, 114, 1, 115, 0, 6, 100, 101, 110, 105, 101, 100, 1, 115, 0, 9, 110, 111, 116, 45, 102, 111, 117, 110, 100, 1, 115, 0, 21, 114, 101, 109, 111, 116, 101, 45, 105, 110, 116, 101, 114, 110, 97, 108, 45, 101, 114, 114, 111, 114, 1, 115, 0, 4, 0, 9, 114, 112, 99, 45, 101, 114, 114, 111, 114, 3, 0, 15, 4, 0, 8, 119, 97, 115, 109, 45, 114, 112, 99, 3, 1, 3, 1, 21, 103, 111, 108, 101, 109, 58, 114, 112, 99, 47, 116, 121, 112, 101, 115, 64, 48, 46, 49, 46, 48, 5, 0, 1, 66, 11, 1, 114, 1, 9, 98, 105, 100, 100, 101, 114, 45, 105, 100, 115, 4, 0, 9, 98, 105, 100, 100, 101, 114, 45, 105, 100, 3, 0, 0, 1, 114, 1, 10, 97, 117, 99, 116, 105, 111, 110, 45, 105, 100, 115, 4, 0, 10, 97, 117, 99, 116, 105, 111, 110, 45, 105, 100, 3, 0, 2, 1, 119, 4, 0, 8, 100, 101, 97, 100, 108, 105, 110, 101, 3, 0, 4, 1, 114, 5, 10, 97, 117, 99, 116, 105, 111, 110, 45, 105, 100, 3, 4, 110, 97, 109, 101, 115, 11, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 115, 11, 108, 105, 109, 105, 116, 45, 112, 114, 105, 99, 101, 118, 10, 101, 120, 112, 105, 114, 97, 116, 105, 111, 110, 5, 4, 0, 7, 97, 117, 99, 116, 105, 111, 110, 3, 0, 6, 1, 113, 3, 15, 97, 117, 99, 116, 105, 111, 110, 45, 101, 120, 112, 105, 114, 101, 100, 0, 0, 13, 112, 114, 105, 99, 101, 45, 116, 111, 111, 45, 108, 111, 119, 0, 0, 7, 115, 117, 99, 99, 101, 115, 115, 0, 0, 4, 0, 10, 98, 105, 100, 45, 114, 101, 115, 117, 108, 116, 3, 0, 8, 4, 0, 15, 114, 117, 110, 110, 105, 110, 103, 45, 97, 117, 99, 116, 105, 111, 110, 3, 1, 3, 1, 19, 97, 117, 99, 116, 105, 111, 110, 58, 97, 117, 99, 116, 105, 111, 110, 47, 97, 112, 105, 5, 1, 2, 3, 0, 0, 3, 117, 114, 105, 2, 3, 0, 1, 9, 98, 105, 100, 100, 101, 114, 45, 105, 100, 2, 3, 0, 1, 10, 97, 117, 99, 116, 105, 111, 110, 45, 105, 100, 2, 3, 0, 1, 8, 100, 101, 97, 100, 108, 105, 110, 101, 2, 3, 0, 1, 7, 97, 117, 99, 116, 105, 111, 110, 2, 3, 0, 1, 10, 98, 105, 100, 45, 114, 101, 115, 117, 108, 116, 1, 66, 33, 2, 3, 2, 1, 2, 4, 0, 3, 117, 114, 105, 3, 0, 0, 2, 3, 2, 1, 3, 4, 0, 9, 98, 105, 100, 100, 101, 114, 45, 105, 100, 3, 0, 2, 2, 3, 2, 1, 4, 4, 0, 10, 97, 117, 99, 116, 105, 111, 110, 45, 105, 100, 3, 0, 4, 2, 3, 2, 1, 5, 4, 0, 8, 100, 101, 97, 100, 108, 105, 110, 101, 3, 0, 6, 2, 3, 2, 1, 6, 4, 0, 7, 97, 117, 99, 116, 105, 111, 110, 3, 0, 8, 2, 3, 2, 1, 7, 4, 0, 10, 98, 105, 100, 45, 114, 101, 115, 117, 108, 116, 3, 0, 10, 4, 0, 3, 97, 112, 105, 3, 1, 4, 0, 15, 114, 117, 110, 110, 105, 110, 103, 45, 97, 117, 99, 116, 105, 111, 110, 3, 1, 1, 105, 12, 1, 64, 1, 8, 108, 111, 99, 97, 116, 105, 111, 110, 1, 0, 14, 4, 0, 16, 91, 99, 111, 110, 115, 116, 114, 117, 99, 116, 111, 114, 93, 97, 112, 105, 1, 15, 1, 104, 12, 1, 64, 2, 4, 115, 101, 108, 102, 16, 7, 97, 117, 99, 116, 105, 111, 110, 9, 1, 0, 4, 0, 22, 91, 109, 101, 116, 104, 111, 100, 93, 97, 112, 105, 46, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 1, 17, 1, 64, 3, 4, 115, 101, 108, 102, 16, 9, 98, 105, 100, 100, 101, 114, 45, 105, 100, 3, 5, 112, 114, 105, 99, 101, 118, 0, 11, 4, 0, 15, 91, 109, 101, 116, 104, 111, 100, 93, 97, 112, 105, 46, 98, 105, 100, 1, 18, 1, 107, 3, 1, 64, 1, 4, 115, 101, 108, 102, 16, 0, 19, 4, 0, 25, 91, 109, 101, 116, 104, 111, 100, 93, 97, 112, 105, 46, 99, 108, 111, 115, 101, 45, 97, 117, 99, 116, 105, 111, 110, 1, 20, 1, 105, 13, 1, 64, 2, 8, 108, 111, 99, 97, 116, 105, 111, 110, 1, 7, 97, 117, 99, 116, 105, 111, 110, 9, 0, 21, 4, 0, 28, 91, 99, 111, 110, 115, 116, 114, 117, 99, 116, 111, 114, 93, 114, 117, 110, 110, 105, 110, 103, 45, 97, 117, 99, 116, 105, 111, 110, 1, 22, 1, 104, 13, 1, 64, 3, 4, 115, 101, 108, 102, 23, 9, 98, 105, 100, 100, 101, 114, 45, 105, 100, 3, 5, 112, 114, 105, 99, 101, 118, 0, 11, 4, 0, 27, 91, 109, 101, 116, 104, 111, 100, 93, 114, 117, 110, 110, 105, 110, 103, 45, 97, 117, 99, 116, 105, 111, 110, 46, 98, 105, 100, 1, 24, 1, 64, 1, 4, 115, 101, 108, 102, 23, 0, 19, 4, 0, 29, 91, 109, 101, 116, 104, 111, 100, 93, 114, 117, 110, 110, 105, 110, 103, 45, 97, 117, 99, 116, 105, 111, 110, 46, 99, 108, 111, 115, 101, 1, 25, 4, 1, 33, 97, 117, 99, 116, 105, 111, 110, 58, 97, 117, 99, 116, 105, 111, 110, 45, 115, 116, 117, 98, 47, 115, 116, 117, 98, 45, 97, 117, 99, 116, 105, 111, 110, 5, 8, 11, 18, 1, 0, 12, 115, 116, 117, 98, 45, 97, 117, 99, 116, 105, 111, 110, 3, 0, 0, 7, 248, 14, 1, 65, 2, 1, 65, 12, 1, 66, 29, 1, 122, 4, 0, 10, 110, 111, 100, 101, 45, 105, 110, 100, 101, 120, 3, 0, 0, 1, 114, 1, 5, 118, 97, 108, 117, 101, 115, 4, 0, 3, 117, 114, 105, 3, 0, 2, 1, 112, 1, 1, 107, 1, 1, 111, 2, 121, 5, 1, 112, 127, 1, 106, 1, 5, 1, 5, 1, 111, 2, 3, 119, 1, 113, 22, 12, 114, 101, 99, 111, 114, 100, 45, 118, 97, 108, 117, 101, 1, 4, 0, 13, 118, 97, 114, 105, 97, 110, 116, 45, 118, 97, 108, 117, 101, 1, 6, 0, 10, 101, 110, 117, 109, 45, 118, 97, 108, 117, 101, 1, 121, 0, 11, 102, 108, 97, 103, 115, 45, 118, 97, 108, 117, 101, 1, 7, 0, 11, 116, 117, 112, 108, 101, 45, 118, 97, 108, 117, 101, 1, 4, 0, 10, 108, 105, 115, 116, 45, 118, 97, 108, 117, 101, 1, 4, 0, 12, 111, 112, 116, 105, 111, 110, 45, 118, 97, 108, 117, 101, 1, 5, 0, 12, 114, 101, 115, 117, 108, 116, 45, 118, 97, 108, 117, 101, 1, 8, 0, 7, 112, 114, 105, 109, 45, 117, 56, 1, 125, 0, 8, 112, 114, 105, 109, 45, 117, 49, 54, 1, 123, 0, 8, 112, 114, 105, 109, 45, 117, 51, 50, 1, 121, 0, 8, 112, 114, 105, 109, 45, 117, 54, 52, 1, 119, 0, 7, 112, 114, 105, 109, 45, 115, 56, 1, 126, 0, 8, 112, 114, 105, 109, 45, 115, 49, 54, 1, 124, 0, 8, 112, 114, 105, 109, 45, 115, 51, 50, 1, 122, 0, 8, 112, 114, 105, 109, 45, 115, 54, 52, 1, 120, 0, 12, 112, 114, 105, 109, 45, 102, 108, 111, 97, 116, 51, 50, 1, 118, 0, 12, 112, 114, 105, 109, 45, 102, 108, 111, 97, 116, 54, 52, 1, 117, 0, 9, 112, 114, 105, 109, 45, 99, 104, 97, 114, 1, 116, 0, 9, 112, 114, 105, 109, 45, 98, 111, 111, 108, 1, 127, 0, 11, 112, 114, 105, 109, 45, 115, 116, 114, 105, 110, 103, 1, 115, 0, 6, 104, 97, 110, 100, 108, 101, 1, 9, 0, 4, 0, 8, 119, 105, 116, 45, 110, 111, 100, 101, 3, 0, 10, 1, 112, 11, 1, 114, 1, 5, 110, 111, 100, 101, 115, 12, 4, 0, 9, 119, 105, 116, 45, 118, 97, 108, 117, 101, 3, 0, 13, 1, 113, 4, 14, 112, 114, 111, 116, 111, 99, 111, 108, 45, 101, 114, 114, 111, 114, 1, 115, 0, 6, 100, 101, 110, 105, 101, 100, 1, 115, 0, 9, 110, 111, 116, 45, 102, 111, 117, 110, 100, 1, 115, 0, 21, 114, 101, 109, 111, 116, 101, 45, 105, 110, 116, 101, 114, 110, 97, 108, 45, 101, 114, 114, 111, 114, 1, 115, 0, 4, 0, 9, 114, 112, 99, 45, 101, 114, 114, 111, 114, 3, 0, 15, 4, 0, 8, 119, 97, 115, 109, 45, 114, 112, 99, 3, 1, 1, 105, 17, 1, 64, 1, 8, 108, 111, 99, 97, 116, 105, 111, 110, 3, 0, 18, 4, 0, 21, 91, 99, 111, 110, 115, 116, 114, 117, 99, 116, 111, 114, 93, 119, 97, 115, 109, 45, 114, 112, 99, 1, 19, 1, 104, 17, 1, 112, 14, 1, 106, 1, 14, 1, 16, 1, 64, 3, 4, 115, 101, 108, 102, 20, 13, 102, 117, 110, 99, 116, 105, 111, 110, 45, 110, 97, 109, 101, 115, 15, 102, 117, 110, 99, 116, 105, 111, 110, 45, 112, 97, 114, 97, 109, 115, 21, 0, 22, 4, 0, 33, 91, 109, 101, 116, 104, 111, 100, 93, 119, 97, 115, 109, 45, 114, 112, 99, 46, 105, 110, 118, 111, 107, 101, 45, 97, 110, 100, 45, 97, 119, 97, 105, 116, 1, 23, 1, 106, 0, 1, 16, 1, 64, 3, 4, 115, 101, 108, 102, 20, 13, 102, 117, 110, 99, 116, 105, 111, 110, 45, 110, 97, 109, 101, 115, 15, 102, 117, 110, 99, 116, 105, 111, 110, 45, 112, 97, 114, 97, 109, 115, 21, 0, 24, 4, 0, 23, 91, 109, 101, 116, 104, 111, 100, 93, 119, 97, 115, 109, 45, 114, 112, 99, 46, 105, 110, 118, 111, 107, 101, 1, 25, 3, 1, 21, 103, 111, 108, 101, 109, 58, 114, 112, 99, 47, 116, 121, 112, 101, 115, 64, 48, 46, 49, 46, 48, 5, 0, 1, 66, 26, 1, 114, 1, 9, 98, 105, 100, 100, 101, 114, 45, 105, 100, 115, 4, 0, 9, 98, 105, 100, 100, 101, 114, 45, 105, 100, 3, 0, 0, 1, 114, 1, 10, 97, 117, 99, 116, 105, 111, 110, 45, 105, 100, 115, 4, 0, 10, 97, 117, 99, 116, 105, 111, 110, 45, 105, 100, 3, 0, 2, 1, 119, 4, 0, 8, 100, 101, 97, 100, 108, 105, 110, 101, 3, 0, 4, 1, 114, 5, 10, 97, 117, 99, 116, 105, 111, 110, 45, 105, 100, 3, 4, 110, 97, 109, 101, 115, 11, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 115, 11, 108, 105, 109, 105, 116, 45, 112, 114, 105, 99, 101, 118, 10, 101, 120, 112, 105, 114, 97, 116, 105, 111, 110, 5, 4, 0, 7, 97, 117, 99, 116, 105, 111, 110, 3, 0, 6, 1, 113, 3, 15, 97, 117, 99, 116, 105, 111, 110, 45, 101, 120, 112, 105, 114, 101, 100, 0, 0, 13, 112, 114, 105, 99, 101, 45, 116, 111, 111, 45, 108, 111, 119, 0, 0, 7, 115, 117, 99, 99, 101, 115, 115, 0, 0, 4, 0, 10, 98, 105, 100, 45, 114, 101, 115, 117, 108, 116, 3, 0, 8, 4, 0, 15, 114, 117, 110, 110, 105, 110, 103, 45, 97, 117, 99, 116, 105, 111, 110, 3, 1, 1, 105, 10, 1, 64, 1, 7, 97, 117, 99, 116, 105, 111, 110, 7, 0, 11, 4, 0, 28, 91, 99, 111, 110, 115, 116, 114, 117, 99, 116, 111, 114, 93, 114, 117, 110, 110, 105, 110, 103, 45, 97, 117, 99, 116, 105, 111, 110, 1, 12, 1, 104, 10, 1, 64, 3, 4, 115, 101, 108, 102, 13, 9, 98, 105, 100, 100, 101, 114, 45, 105, 100, 1, 5, 112, 114, 105, 99, 101, 118, 0, 9, 4, 0, 27, 91, 109, 101, 116, 104, 111, 100, 93, 114, 117, 110, 110, 105, 110, 103, 45, 97, 117, 99, 116, 105, 111, 110, 46, 98, 105, 100, 1, 14, 1, 107, 1, 1, 64, 1, 4, 115, 101, 108, 102, 13, 0, 15, 4, 0, 29, 91, 109, 101, 116, 104, 111, 100, 93, 114, 117, 110, 110, 105, 110, 103, 45, 97, 117, 99, 116, 105, 111, 110, 46, 99, 108, 111, 115, 101, 1, 16, 1, 64, 1, 7, 97, 117, 99, 116, 105, 111, 110, 7, 1, 0, 4, 0, 10, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 1, 17, 1, 64, 2, 9, 98, 105, 100, 100, 101, 114, 45, 105, 100, 1, 5, 112, 114, 105, 99, 101, 118, 0, 9, 4, 0, 3, 98, 105, 100, 1, 18, 1, 64, 0, 0, 15, 4, 0, 13, 99, 108, 111, 115, 101, 45, 97, 117, 99, 116, 105, 111, 110, 1, 19, 3, 1, 19, 97, 117, 99, 116, 105, 111, 110, 58, 97, 117, 99, 116, 105, 111, 110, 47, 97, 112, 105, 5, 1, 2, 3, 0, 0, 3, 117, 114, 105, 2, 3, 0, 1, 9, 98, 105, 100, 100, 101, 114, 45, 105, 100, 2, 3, 0, 1, 10, 97, 117, 99, 116, 105, 111, 110, 45, 105, 100, 2, 3, 0, 1, 8, 100, 101, 97, 100, 108, 105, 110, 101, 2, 3, 0, 1, 7, 97, 117, 99, 116, 105, 111, 110, 2, 3, 0, 1, 10, 98, 105, 100, 45, 114, 101, 115, 117, 108, 116, 1, 66, 33, 2, 3, 2, 1, 2, 4, 0, 3, 117, 114, 105, 3, 0, 0, 2, 3, 2, 1, 3, 4, 0, 9, 98, 105, 100, 100, 101, 114, 45, 105, 100, 3, 0, 2, 2, 3, 2, 1, 4, 4, 0, 10, 97, 117, 99, 116, 105, 111, 110, 45, 105, 100, 3, 0, 4, 2, 3, 2, 1, 5, 4, 0, 8, 100, 101, 97, 100, 108, 105, 110, 101, 3, 0, 6, 2, 3, 2, 1, 6, 4, 0, 7, 97, 117, 99, 116, 105, 111, 110, 3, 0, 8, 2, 3, 2, 1, 7, 4, 0, 10, 98, 105, 100, 45, 114, 101, 115, 117, 108, 116, 3, 0, 10, 4, 0, 3, 97, 112, 105, 3, 1, 4, 0, 15, 114, 117, 110, 110, 105, 110, 103, 45, 97, 117, 99, 116, 105, 111, 110, 3, 1, 1, 105, 12, 1, 64, 1, 8, 108, 111, 99, 97, 116, 105, 111, 110, 1, 0, 14, 4, 0, 16, 91, 99, 111, 110, 115, 116, 114, 117, 99, 116, 111, 114, 93, 97, 112, 105, 1, 15, 1, 104, 12, 1, 64, 2, 4, 115, 101, 108, 102, 16, 7, 97, 117, 99, 116, 105, 111, 110, 9, 1, 0, 4, 0, 22, 91, 109, 101, 116, 104, 111, 100, 93, 97, 112, 105, 46, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 1, 17, 1, 64, 3, 4, 115, 101, 108, 102, 16, 9, 98, 105, 100, 100, 101, 114, 45, 105, 100, 3, 5, 112, 114, 105, 99, 101, 118, 0, 11, 4, 0, 15, 91, 109, 101, 116, 104, 111, 100, 93, 97, 112, 105, 46, 98, 105, 100, 1, 18, 1, 107, 3, 1, 64, 1, 4, 115, 101, 108, 102, 16, 0, 19, 4, 0, 25, 91, 109, 101, 116, 104, 111, 100, 93, 97, 112, 105, 46, 99, 108, 111, 115, 101, 45, 97, 117, 99, 116, 105, 111, 110, 1, 20, 1, 105, 13, 1, 64, 2, 8, 108, 111, 99, 97, 116, 105, 111, 110, 1, 7, 97, 117, 99, 116, 105, 111, 110, 9, 0, 21, 4, 0, 28, 91, 99, 111, 110, 115, 116, 114, 117, 99, 116, 111, 114, 93, 114, 117, 110, 110, 105, 110, 103, 45, 97, 117, 99, 116, 105, 111, 110, 1, 22, 1, 104, 13, 1, 64, 3, 4, 115, 101, 108, 102, 23, 9, 98, 105, 100, 100, 101, 114, 45, 105, 100, 3, 5, 112, 114, 105, 99, 101, 118, 0, 11, 4, 0, 27, 91, 109, 101, 116, 104, 111, 100, 93, 114, 117, 110, 110, 105, 110, 103, 45, 97, 117, 99, 116, 105, 111, 110, 46, 98, 105, 100, 1, 24, 1, 64, 1, 4, 115, 101, 108, 102, 23, 0, 19, 4, 0, 29, 91, 109, 101, 116, 104, 111, 100, 93, 114, 117, 110, 110, 105, 110, 103, 45, 97, 117, 99, 116, 105, 111, 110, 46, 99, 108, 111, 115, 101, 1, 25, 4, 1, 33, 97, 117, 99, 116, 105, 111, 110, 58, 97, 117, 99, 116, 105, 111, 110, 45, 115, 116, 117, 98, 47, 115, 116, 117, 98, 45, 97, 117, 99, 116, 105, 111, 110, 5, 8, 4, 1, 42, 97, 117, 99, 116, 105, 111, 110, 58, 97, 117, 99, 116, 105, 111, 110, 45, 115, 116, 117, 98, 47, 119, 97, 115, 109, 45, 114, 112, 99, 45, 115, 116, 117, 98, 45, 97, 117, 99, 116, 105, 111, 110, 4, 0, 11, 27, 1, 0, 21, 119, 97, 115, 109, 45, 114, 112, 99, 45, 115, 116, 117, 98, 45, 97, 117, 99, 116, 105, 111, 110, 3, 2, 0, 0, 16, 12, 112, 97, 99, 107, 97, 103, 101, 45, 100, 111, 99, 115, 0, 123, 125, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 49, 56, 46, 50, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 54, 46, 48];
                    
                    #[inline(never)]
                    #[doc(hidden)]
                    #[cfg(target_arch = "wasm32")]
                    pub fn __link_section() {}
                    