/// NOTE: NOT FINALIZED YET
package golem:durability@1.2.0;

interface durability {
    use golem:api/host@1.1.2.{persistence-level};
    use golem:api/oplog@1.1.2.{oplog-index, wrapped-function-type};
    use wasi:clocks/wall-clock@0.2.0.{datetime};
    use golem:rpc/types@0.1.2.{value-and-type};

    type durable-function-type = wrapped-function-type;

    record durable-execution-state {
        is-live: bool,
        persistence-level: persistence-level,
    }

    enum oplog-entry-version {
        v1,
        v2
    }

    record persisted-durable-function-invocation {
        timestamp: datetime,
        function-name: string,
        response: list<u8>,
        function-type: durable-function-type,
        entry-version: oplog-entry-version
    }

    /// Observes a function call (produces logs and metrics)
    observe-function-call: func(iface: string, function: string);

    /// Marks the beginning of a durable function.
    ///
    /// There must be a corresponding call to `end-durable-function` after the function has
    /// performed its work (it can be ended in a different context, for example after an async
    /// pollable operation has been completed)
    begin-durable-function: func(function-type: durable-function-type) -> oplog-index;

    /// Marks the end of a durable function
    ///
    /// This is a pair of `begin-durable-function` and should be called after the durable function
    /// has performed and persisted or replayed its work. The `begin-index` should be the index
    /// returned by `begin-durable-function`.
    ///
    /// Normally commit behavior is decided by the executor based on the `function-type`. However, in special
    /// cases the `forced-commit` parameter can be used to force commit the oplog in an efficient way.
    end-durable-function: func(function-type: durable-function-type, begin-index: oplog-index, forced-commit: bool);

    /// Gets the current durable execution state
    current-durable-execution-state: func() -> durable-execution-state;

    /// Writes a record to the worker's oplog representing a durable function invocation
    persist-durable-function-invocation: func(
        function-name: string,
        request: list<u8>,
        response: list<u8>,
        function-type: durable-function-type,
    );

    /// Writes a record to the worker's oplog representing a durable function invocation
    ///
    /// The request and response are defined as pairs of value and type, which makes it
    /// self-describing for observers of oplogs. This is the recommended way to persist
    /// third-party function invocations.
    persist-typed-durable-function-invocation: func(
        function-name: string,
        request: value-and-type,
        response: value-and-type,
        function-type: durable-function-type,
    );

    /// Reads the next persisted durable function invocation from the oplog during replay
    read-persisted-durable-function-invocation: func() -> persisted-durable-function-invocation;
}
