// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod golem {
    pub mod api {
        /// The Golem host API provides low level access to Golem specific features such as promises and control over
        /// the durability and transactional guarantees the executor provides.
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod host {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Duration = super::super::super::wasi::clocks::monotonic_clock::Duration;
            pub type ComponentId = super::super::super::golem::rpc::types::ComponentId;
            pub type Uuid = super::super::super::golem::rpc::types::Uuid;
            pub type AgentId = super::super::super::golem::rpc::types::AgentId;
            pub type Pollable = super::super::super::wasi::io::poll::Pollable;
            /// An index into the persistent log storing all performed operations of an agent
            pub type OplogIndex = u64;
            /// A promise ID is a value that can be passed to an external Golem API to complete that promise
            /// from an arbitrary external source, while Golem agents can await for this completion.
            #[derive(Clone)]
            pub struct PromiseId {
                pub agent_id: AgentId,
                pub oplog_idx: OplogIndex,
            }
            impl ::core::fmt::Debug for PromiseId {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("PromiseId")
                        .field("agent-id", &self.agent_id)
                        .field("oplog-idx", &self.oplog_idx)
                        .finish()
                }
            }
            /// Represents a Golem component's version
            pub type ComponentVersion = u64;
            /// Configures how the executor retries failures
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct RetryPolicy {
                /// The maximum number of retries before the agent becomes permanently failed
                pub max_attempts: u32,
                /// The minimum delay between retries (applied to the first retry)
                pub min_delay: Duration,
                /// The maximum delay between retries
                pub max_delay: Duration,
                /// Multiplier applied to the delay on each retry to implement exponential backoff
                pub multiplier: f64,
                /// The maximum amount of jitter to add to the delay
                pub max_jitter_factor: Option<f64>,
            }
            impl ::core::fmt::Debug for RetryPolicy {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("RetryPolicy")
                        .field("max-attempts", &self.max_attempts)
                        .field("min-delay", &self.min_delay)
                        .field("max-delay", &self.max_delay)
                        .field("multiplier", &self.multiplier)
                        .field("max-jitter-factor", &self.max_jitter_factor)
                        .finish()
                }
            }
            /// Configurable persistence level for agents
            #[derive(Clone, Copy)]
            pub enum PersistenceLevel {
                PersistNothing,
                PersistRemoteSideEffects,
                Smart,
            }
            impl ::core::fmt::Debug for PersistenceLevel {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        PersistenceLevel::PersistNothing => {
                            f.debug_tuple("PersistenceLevel::PersistNothing").finish()
                        }
                        PersistenceLevel::PersistRemoteSideEffects => {
                            f.debug_tuple("PersistenceLevel::PersistRemoteSideEffects")
                                .finish()
                        }
                        PersistenceLevel::Smart => {
                            f.debug_tuple("PersistenceLevel::Smart").finish()
                        }
                    }
                }
            }
            /// Describes how to update an agent to a different component version
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum UpdateMode {
                /// Automatic update tries to recover the agent using the new component version
                /// and may fail if there is a divergence.
                Automatic,
                /// Manual, snapshot-based update uses a user-defined implementation of the `save-snapshot` interface
                /// to store the agent's state, and a user-defined implementation of the `load-snapshot` interface to
                /// load it into the new version.
                SnapshotBased,
            }
            impl ::core::fmt::Debug for UpdateMode {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        UpdateMode::Automatic => {
                            f.debug_tuple("UpdateMode::Automatic").finish()
                        }
                        UpdateMode::SnapshotBased => {
                            f.debug_tuple("UpdateMode::SnapshotBased").finish()
                        }
                    }
                }
            }
            impl UpdateMode {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> UpdateMode {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => UpdateMode::Automatic,
                        1 => UpdateMode::SnapshotBased,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            /// Operators used in filtering enumerated agents
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum FilterComparator {
                Equal,
                NotEqual,
                GreaterEqual,
                Greater,
                LessEqual,
                Less,
            }
            impl ::core::fmt::Debug for FilterComparator {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        FilterComparator::Equal => {
                            f.debug_tuple("FilterComparator::Equal").finish()
                        }
                        FilterComparator::NotEqual => {
                            f.debug_tuple("FilterComparator::NotEqual").finish()
                        }
                        FilterComparator::GreaterEqual => {
                            f.debug_tuple("FilterComparator::GreaterEqual").finish()
                        }
                        FilterComparator::Greater => {
                            f.debug_tuple("FilterComparator::Greater").finish()
                        }
                        FilterComparator::LessEqual => {
                            f.debug_tuple("FilterComparator::LessEqual").finish()
                        }
                        FilterComparator::Less => {
                            f.debug_tuple("FilterComparator::Less").finish()
                        }
                    }
                }
            }
            impl FilterComparator {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> FilterComparator {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => FilterComparator::Equal,
                        1 => FilterComparator::NotEqual,
                        2 => FilterComparator::GreaterEqual,
                        3 => FilterComparator::Greater,
                        4 => FilterComparator::LessEqual,
                        5 => FilterComparator::Less,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            /// Operators used on strings in filtering enumerated agents
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum StringFilterComparator {
                Equal,
                NotEqual,
                Like,
                NotLike,
                StartsWith,
            }
            impl ::core::fmt::Debug for StringFilterComparator {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        StringFilterComparator::Equal => {
                            f.debug_tuple("StringFilterComparator::Equal").finish()
                        }
                        StringFilterComparator::NotEqual => {
                            f.debug_tuple("StringFilterComparator::NotEqual").finish()
                        }
                        StringFilterComparator::Like => {
                            f.debug_tuple("StringFilterComparator::Like").finish()
                        }
                        StringFilterComparator::NotLike => {
                            f.debug_tuple("StringFilterComparator::NotLike").finish()
                        }
                        StringFilterComparator::StartsWith => {
                            f.debug_tuple("StringFilterComparator::StartsWith").finish()
                        }
                    }
                }
            }
            impl StringFilterComparator {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> StringFilterComparator {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => StringFilterComparator::Equal,
                        1 => StringFilterComparator::NotEqual,
                        2 => StringFilterComparator::Like,
                        3 => StringFilterComparator::NotLike,
                        4 => StringFilterComparator::StartsWith,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            /// The current status of an agent
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum AgentStatus {
                /// The agent is running an invoked function
                Running,
                /// The agent is ready to run an invoked function
                Idle,
                /// An invocation is active but waiting for something (sleeping, waiting for a promise)
                Suspended,
                /// The last invocation was interrupted but will be resumed
                Interrupted,
                /// The last invocation failed and a retry was scheduled
                Retrying,
                /// The last invocation failed and the agent can no longer be used
                Failed,
                /// The agent exited after a successful invocation and can no longer be invoked
                Exited,
            }
            impl ::core::fmt::Debug for AgentStatus {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        AgentStatus::Running => {
                            f.debug_tuple("AgentStatus::Running").finish()
                        }
                        AgentStatus::Idle => f.debug_tuple("AgentStatus::Idle").finish(),
                        AgentStatus::Suspended => {
                            f.debug_tuple("AgentStatus::Suspended").finish()
                        }
                        AgentStatus::Interrupted => {
                            f.debug_tuple("AgentStatus::Interrupted").finish()
                        }
                        AgentStatus::Retrying => {
                            f.debug_tuple("AgentStatus::Retrying").finish()
                        }
                        AgentStatus::Failed => {
                            f.debug_tuple("AgentStatus::Failed").finish()
                        }
                        AgentStatus::Exited => {
                            f.debug_tuple("AgentStatus::Exited").finish()
                        }
                    }
                }
            }
            impl AgentStatus {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> AgentStatus {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => AgentStatus::Running,
                        1 => AgentStatus::Idle,
                        2 => AgentStatus::Suspended,
                        3 => AgentStatus::Interrupted,
                        4 => AgentStatus::Retrying,
                        5 => AgentStatus::Failed,
                        6 => AgentStatus::Exited,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            /// Describes a filter condition on agent IDs when enumerating agents
            #[derive(Clone)]
            pub struct AgentNameFilter {
                pub comparator: StringFilterComparator,
                pub value: _rt::String,
            }
            impl ::core::fmt::Debug for AgentNameFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AgentNameFilter")
                        .field("comparator", &self.comparator)
                        .field("value", &self.value)
                        .finish()
                }
            }
            /// Describes a filter condition on the agent status when enumerating agents
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct AgentStatusFilter {
                pub comparator: FilterComparator,
                pub value: AgentStatus,
            }
            impl ::core::fmt::Debug for AgentStatusFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AgentStatusFilter")
                        .field("comparator", &self.comparator)
                        .field("value", &self.value)
                        .finish()
                }
            }
            /// Describes a filter condition on the component version when enumerating agents
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct AgentVersionFilter {
                pub comparator: FilterComparator,
                pub value: u64,
            }
            impl ::core::fmt::Debug for AgentVersionFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AgentVersionFilter")
                        .field("comparator", &self.comparator)
                        .field("value", &self.value)
                        .finish()
                }
            }
            /// Describes a filter condition on the agent's creation time when enumerating agents
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct AgentCreatedAtFilter {
                pub comparator: FilterComparator,
                pub value: u64,
            }
            impl ::core::fmt::Debug for AgentCreatedAtFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AgentCreatedAtFilter")
                        .field("comparator", &self.comparator)
                        .field("value", &self.value)
                        .finish()
                }
            }
            /// Describes a filter condition on the agent's environment variables when enumerating agents
            #[derive(Clone)]
            pub struct AgentEnvFilter {
                pub name: _rt::String,
                pub comparator: StringFilterComparator,
                pub value: _rt::String,
            }
            impl ::core::fmt::Debug for AgentEnvFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AgentEnvFilter")
                        .field("name", &self.name)
                        .field("comparator", &self.comparator)
                        .field("value", &self.value)
                        .finish()
                }
            }
            /// Describes a filter condition on the agent's configuration variables when enumerating agents
            #[derive(Clone)]
            pub struct AgentConfigVarsFilter {
                pub name: _rt::String,
                pub comparator: StringFilterComparator,
                pub value: _rt::String,
            }
            impl ::core::fmt::Debug for AgentConfigVarsFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AgentConfigVarsFilter")
                        .field("name", &self.name)
                        .field("comparator", &self.comparator)
                        .field("value", &self.value)
                        .finish()
                }
            }
            /// Describes one filter condition for enumerating agents
            #[derive(Clone)]
            pub enum AgentPropertyFilter {
                Name(AgentNameFilter),
                Status(AgentStatusFilter),
                Version(AgentVersionFilter),
                CreatedAt(AgentCreatedAtFilter),
                Env(AgentEnvFilter),
                WasiConfigVars(AgentConfigVarsFilter),
            }
            impl ::core::fmt::Debug for AgentPropertyFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        AgentPropertyFilter::Name(e) => {
                            f.debug_tuple("AgentPropertyFilter::Name").field(e).finish()
                        }
                        AgentPropertyFilter::Status(e) => {
                            f.debug_tuple("AgentPropertyFilter::Status")
                                .field(e)
                                .finish()
                        }
                        AgentPropertyFilter::Version(e) => {
                            f.debug_tuple("AgentPropertyFilter::Version")
                                .field(e)
                                .finish()
                        }
                        AgentPropertyFilter::CreatedAt(e) => {
                            f.debug_tuple("AgentPropertyFilter::CreatedAt")
                                .field(e)
                                .finish()
                        }
                        AgentPropertyFilter::Env(e) => {
                            f.debug_tuple("AgentPropertyFilter::Env").field(e).finish()
                        }
                        AgentPropertyFilter::WasiConfigVars(e) => {
                            f.debug_tuple("AgentPropertyFilter::WasiConfigVars")
                                .field(e)
                                .finish()
                        }
                    }
                }
            }
            /// Combines multiple filter conditions with an `AND` relationship for enumerating agents
            #[derive(Clone)]
            pub struct AgentAllFilter {
                pub filters: _rt::Vec<AgentPropertyFilter>,
            }
            impl ::core::fmt::Debug for AgentAllFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AgentAllFilter")
                        .field("filters", &self.filters)
                        .finish()
                }
            }
            /// Combines multiple groups of filter conditions with an `OR` relationship for enumerating agents
            #[derive(Clone)]
            pub struct AgentAnyFilter {
                pub filters: _rt::Vec<AgentAllFilter>,
            }
            impl ::core::fmt::Debug for AgentAnyFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AgentAnyFilter")
                        .field("filters", &self.filters)
                        .finish()
                }
            }
            /// Metadata about an agent
            #[derive(Clone)]
            pub struct AgentMetadata {
                /// The agent ID, consists of the component ID, agent type and agent parameters
                pub agent_id: AgentId,
                /// Command line arguments seen by the agent
                pub args: _rt::Vec<_rt::String>,
                /// Environment variables seen by the agent
                pub env: _rt::Vec<(_rt::String, _rt::String)>,
                /// Configuration variables seen by the agent
                pub config_vars: _rt::Vec<(_rt::String, _rt::String)>,
                /// The current agent status
                pub status: AgentStatus,
                /// The component version the agent is running with
                pub component_version: u64,
                /// The agent's current retry count
                pub retry_count: u64,
            }
            impl ::core::fmt::Debug for AgentMetadata {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AgentMetadata")
                        .field("agent-id", &self.agent_id)
                        .field("args", &self.args)
                        .field("env", &self.env)
                        .field("config-vars", &self.config_vars)
                        .field("status", &self.status)
                        .field("component-version", &self.component_version)
                        .field("retry-count", &self.retry_count)
                        .finish()
                }
            }
            /// Creates an agent enumeration
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct GetAgents {
                handle: _rt::Resource<GetAgents>,
            }
            impl GetAgents {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for GetAgents {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:api/host@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]get-agents"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            /// Target parameter for the `revert-agent` operation
            #[derive(Clone, Copy)]
            pub enum RevertAgentTarget {
                /// Revert to a specific oplog index. The given index will be the last one to be kept.
                RevertToOplogIndex(OplogIndex),
                /// Revert the last N invocations.
                RevertLastInvocations(u64),
            }
            impl ::core::fmt::Debug for RevertAgentTarget {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        RevertAgentTarget::RevertToOplogIndex(e) => {
                            f.debug_tuple("RevertAgentTarget::RevertToOplogIndex")
                                .field(e)
                                .finish()
                        }
                        RevertAgentTarget::RevertLastInvocations(e) => {
                            f.debug_tuple("RevertAgentTarget::RevertLastInvocations")
                                .field(e)
                                .finish()
                        }
                    }
                }
            }
            /// Indicates which agent the code is running on after `fork`
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum ForkResult {
                /// The original agent that called `fork`
                Original,
                /// The new agent
                Forked,
            }
            impl ::core::fmt::Debug for ForkResult {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ForkResult::Original => {
                            f.debug_tuple("ForkResult::Original").finish()
                        }
                        ForkResult::Forked => {
                            f.debug_tuple("ForkResult::Forked").finish()
                        }
                    }
                }
            }
            impl ForkResult {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> ForkResult {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => ForkResult::Original,
                        1 => ForkResult::Forked,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct GetPromiseResult {
                handle: _rt::Resource<GetPromiseResult>,
            }
            impl GetPromiseResult {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for GetPromiseResult {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:api/host@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]get-promise-result"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            impl GetAgents {
                #[allow(unused_unsafe, clippy::all)]
                /// Creates an agent enumeration request. It is going to enumerate all agents of all the agent types
                /// defined in `component-id`, filtered by the conditions given by `filter`. If `precise` is true,
                /// the server will calculate the most recent state of all the returned agents, otherwise the returned
                /// metadata will be not guaranteed to be up-to-date.
                pub fn new(
                    component_id: ComponentId,
                    filter: Option<&AgentAnyFilter>,
                    precise: bool,
                ) -> Self {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        let super::super::super::golem::rpc::types::ComponentId {
                            uuid: uuid0,
                        } = component_id;
                        let super::super::super::golem::rpc::types::Uuid {
                            high_bits: high_bits1,
                            low_bits: low_bits1,
                        } = uuid0;
                        let (result17_0, result17_1, result17_2) = match filter {
                            Some(e) => {
                                let AgentAnyFilter { filters: filters2 } = e;
                                let vec16 = filters2;
                                let len16 = vec16.len();
                                let layout16 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec16.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                let result16 = if layout16.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout16).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout16);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec16.into_iter().enumerate() {
                                    let base = result16
                                        .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                    {
                                        let AgentAllFilter { filters: filters3 } = e;
                                        let vec15 = filters3;
                                        let len15 = vec15.len();
                                        let layout15 = _rt::alloc::Layout::from_size_align_unchecked(
                                            vec15.len()
                                                * (16 + 4 * ::core::mem::size_of::<*const u8>()),
                                            8,
                                        );
                                        let result15 = if layout15.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout15).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout15);
                                            }
                                            ptr
                                        } else {
                                            ::core::ptr::null_mut()
                                        };
                                        for (i, e) in vec15.into_iter().enumerate() {
                                            let base = result15
                                                .add(i * (16 + 4 * ::core::mem::size_of::<*const u8>()));
                                            {
                                                match e {
                                                    AgentPropertyFilter::Name(e) => {
                                                        *base.add(0).cast::<u8>() = (0i32) as u8;
                                                        let AgentNameFilter {
                                                            comparator: comparator4,
                                                            value: value4,
                                                        } = e;
                                                        *base.add(8).cast::<u8>() = (comparator4.clone() as i32)
                                                            as u8;
                                                        let vec5 = value4;
                                                        let ptr5 = vec5.as_ptr().cast::<u8>();
                                                        let len5 = vec5.len();
                                                        *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>() = len5;
                                                        *base
                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>() = ptr5.cast_mut();
                                                    }
                                                    AgentPropertyFilter::Status(e) => {
                                                        *base.add(0).cast::<u8>() = (1i32) as u8;
                                                        let AgentStatusFilter {
                                                            comparator: comparator6,
                                                            value: value6,
                                                        } = e;
                                                        *base.add(8).cast::<u8>() = (comparator6.clone() as i32)
                                                            as u8;
                                                        *base.add(9).cast::<u8>() = (value6.clone() as i32) as u8;
                                                    }
                                                    AgentPropertyFilter::Version(e) => {
                                                        *base.add(0).cast::<u8>() = (2i32) as u8;
                                                        let AgentVersionFilter {
                                                            comparator: comparator7,
                                                            value: value7,
                                                        } = e;
                                                        *base.add(8).cast::<u8>() = (comparator7.clone() as i32)
                                                            as u8;
                                                        *base.add(16).cast::<i64>() = _rt::as_i64(value7);
                                                    }
                                                    AgentPropertyFilter::CreatedAt(e) => {
                                                        *base.add(0).cast::<u8>() = (3i32) as u8;
                                                        let AgentCreatedAtFilter {
                                                            comparator: comparator8,
                                                            value: value8,
                                                        } = e;
                                                        *base.add(8).cast::<u8>() = (comparator8.clone() as i32)
                                                            as u8;
                                                        *base.add(16).cast::<i64>() = _rt::as_i64(value8);
                                                    }
                                                    AgentPropertyFilter::Env(e) => {
                                                        *base.add(0).cast::<u8>() = (4i32) as u8;
                                                        let AgentEnvFilter {
                                                            name: name9,
                                                            comparator: comparator9,
                                                            value: value9,
                                                        } = e;
                                                        let vec10 = name9;
                                                        let ptr10 = vec10.as_ptr().cast::<u8>();
                                                        let len10 = vec10.len();
                                                        *base
                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>() = len10;
                                                        *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                                        *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>() = (comparator9.clone() as i32) as u8;
                                                        let vec11 = value9;
                                                        let ptr11 = vec11.as_ptr().cast::<u8>();
                                                        let len11 = vec11.len();
                                                        *base
                                                            .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>() = len11;
                                                        *base
                                                            .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>() = ptr11.cast_mut();
                                                    }
                                                    AgentPropertyFilter::WasiConfigVars(e) => {
                                                        *base.add(0).cast::<u8>() = (5i32) as u8;
                                                        let AgentConfigVarsFilter {
                                                            name: name12,
                                                            comparator: comparator12,
                                                            value: value12,
                                                        } = e;
                                                        let vec13 = name12;
                                                        let ptr13 = vec13.as_ptr().cast::<u8>();
                                                        let len13 = vec13.len();
                                                        *base
                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>() = len13;
                                                        *base.add(8).cast::<*mut u8>() = ptr13.cast_mut();
                                                        *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>() = (comparator12.clone() as i32) as u8;
                                                        let vec14 = value12;
                                                        let ptr14 = vec14.as_ptr().cast::<u8>();
                                                        let len14 = vec14.len();
                                                        *base
                                                            .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>() = len14;
                                                        *base
                                                            .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>() = ptr14.cast_mut();
                                                    }
                                                }
                                            }
                                        }
                                        *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>() = len15;
                                        *base.add(0).cast::<*mut u8>() = result15;
                                        cleanup_list.extend_from_slice(&[(result15, layout15)]);
                                    }
                                }
                                cleanup_list.extend_from_slice(&[(result16, layout16)]);
                                (1i32, result16, len16)
                            }
                            None => (0i32, ::core::ptr::null_mut(), 0usize),
                        };
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/host@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[constructor]get-agents"]
                            fn wit_import18(
                                _: i64,
                                _: i64,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                            ) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import18(
                            _: i64,
                            _: i64,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe {
                            wit_import18(
                                _rt::as_i64(high_bits1),
                                _rt::as_i64(low_bits1),
                                result17_0,
                                result17_1,
                                result17_2,
                                match &precise {
                                    true => 1,
                                    false => 0,
                                },
                            )
                        };
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        unsafe { GetAgents::from_handle(ret as u32) }
                    }
                }
            }
            impl GetAgents {
                #[allow(unused_unsafe, clippy::all)]
                /// Retrieves the next batch of agent metadata.
                pub fn get_next(&self) -> Option<_rt::Vec<AgentMetadata>> {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 3 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 3
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/host@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[method]get-agents.get-next"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result38 = match l2 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l3 = *ptr0
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l4 = *ptr0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base37 = l3;
                                    let len37 = l4;
                                    let mut result37 = _rt::Vec::with_capacity(len37);
                                    for i in 0..len37 {
                                        let base = base37
                                            .add(i * (40 + 8 * ::core::mem::size_of::<*const u8>()));
                                        let e37 = {
                                            let l5 = *base.add(0).cast::<i64>();
                                            let l6 = *base.add(8).cast::<i64>();
                                            let l7 = *base.add(16).cast::<*mut u8>();
                                            let l8 = *base
                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len9 = l8;
                                            let bytes9 = _rt::Vec::from_raw_parts(
                                                l7.cast(),
                                                len9,
                                                len9,
                                            );
                                            let l10 = *base
                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l11 = *base
                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base15 = l10;
                                            let len15 = l11;
                                            let mut result15 = _rt::Vec::with_capacity(len15);
                                            for i in 0..len15 {
                                                let base = base15
                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                let e15 = {
                                                    let l12 = *base.add(0).cast::<*mut u8>();
                                                    let l13 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len14 = l13;
                                                    let bytes14 = _rt::Vec::from_raw_parts(
                                                        l12.cast(),
                                                        len14,
                                                        len14,
                                                    );
                                                    _rt::string_lift(bytes14)
                                                };
                                                result15.push(e15);
                                            }
                                            _rt::cabi_dealloc(
                                                base15,
                                                len15 * (2 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let l16 = *base
                                                .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l17 = *base
                                                .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base24 = l16;
                                            let len24 = l17;
                                            let mut result24 = _rt::Vec::with_capacity(len24);
                                            for i in 0..len24 {
                                                let base = base24
                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                let e24 = {
                                                    let l18 = *base.add(0).cast::<*mut u8>();
                                                    let l19 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len20 = l19;
                                                    let bytes20 = _rt::Vec::from_raw_parts(
                                                        l18.cast(),
                                                        len20,
                                                        len20,
                                                    );
                                                    let l21 = *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l22 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len23 = l22;
                                                    let bytes23 = _rt::Vec::from_raw_parts(
                                                        l21.cast(),
                                                        len23,
                                                        len23,
                                                    );
                                                    (_rt::string_lift(bytes20), _rt::string_lift(bytes23))
                                                };
                                                result24.push(e24);
                                            }
                                            _rt::cabi_dealloc(
                                                base24,
                                                len24 * (4 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let l25 = *base
                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l26 = *base
                                                .add(16 + 7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base33 = l25;
                                            let len33 = l26;
                                            let mut result33 = _rt::Vec::with_capacity(len33);
                                            for i in 0..len33 {
                                                let base = base33
                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                let e33 = {
                                                    let l27 = *base.add(0).cast::<*mut u8>();
                                                    let l28 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len29 = l28;
                                                    let bytes29 = _rt::Vec::from_raw_parts(
                                                        l27.cast(),
                                                        len29,
                                                        len29,
                                                    );
                                                    let l30 = *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l31 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len32 = l31;
                                                    let bytes32 = _rt::Vec::from_raw_parts(
                                                        l30.cast(),
                                                        len32,
                                                        len32,
                                                    );
                                                    (_rt::string_lift(bytes29), _rt::string_lift(bytes32))
                                                };
                                                result33.push(e33);
                                            }
                                            _rt::cabi_dealloc(
                                                base33,
                                                len33 * (4 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let l34 = i32::from(
                                                *base
                                                    .add(16 + 8 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            let l35 = *base
                                                .add(24 + 8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i64>();
                                            let l36 = *base
                                                .add(32 + 8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i64>();
                                            AgentMetadata {
                                                agent_id: super::super::super::golem::rpc::types::AgentId {
                                                    component_id: super::super::super::golem::rpc::types::ComponentId {
                                                        uuid: super::super::super::golem::rpc::types::Uuid {
                                                            high_bits: l5 as u64,
                                                            low_bits: l6 as u64,
                                                        },
                                                    },
                                                    agent_id: _rt::string_lift(bytes9),
                                                },
                                                args: result15,
                                                env: result24,
                                                config_vars: result33,
                                                status: AgentStatus::_lift(l34 as u8),
                                                component_version: l35 as u64,
                                                retry_count: l36 as u64,
                                            }
                                        };
                                        result37.push(e37);
                                    }
                                    _rt::cabi_dealloc(
                                        base37,
                                        len37 * (40 + 8 * ::core::mem::size_of::<*const u8>()),
                                        8,
                                    );
                                    result37
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result38
                    }
                }
            }
            impl GetPromiseResult {
                #[allow(unused_unsafe, clippy::all)]
                /// Returns a pollable that can be used to wait for the promise to become ready.j
                pub fn subscribe(&self) -> Pollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/host@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[method]get-promise-result.subscribe"]
                            fn wit_import0(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe { wit_import0((self).handle() as i32) };
                        unsafe {
                            super::super::super::wasi::io::poll::Pollable::from_handle(
                                ret as u32,
                            )
                        }
                    }
                }
            }
            impl GetPromiseResult {
                #[allow(unused_unsafe, clippy::all)]
                /// Poll the result of the promise, returning none if it is not yet ready.
                pub fn get(&self) -> Option<_rt::Vec<u8>> {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 3 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 3
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/host@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[method]get-promise-result.get"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result6 = match l2 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l3 = *ptr0
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l4 = *ptr0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let len5 = l4;
                                    _rt::Vec::from_raw_parts(l3.cast(), len5, len5)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result6
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Create a new promise
            pub fn create_promise() -> PromiseId {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 24 + 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 24
                            + 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "create-promise"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = *ptr0.add(0).cast::<i64>();
                    let l3 = *ptr0.add(8).cast::<i64>();
                    let l4 = *ptr0.add(16).cast::<*mut u8>();
                    let l5 = *ptr0
                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len6 = l5;
                    let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);
                    let l7 = *ptr0
                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                        .cast::<i64>();
                    let result8 = PromiseId {
                        agent_id: super::super::super::golem::rpc::types::AgentId {
                            component_id: super::super::super::golem::rpc::types::ComponentId {
                                uuid: super::super::super::golem::rpc::types::Uuid {
                                    high_bits: l2 as u64,
                                    low_bits: l3 as u64,
                                },
                            },
                            agent_id: _rt::string_lift(bytes6),
                        },
                        oplog_idx: l7 as u64,
                    };
                    result8
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Gets a handle to the result of the promise. Can only be called in the same agent that orignally created the promise.
            pub fn get_promise(promise_id: &PromiseId) -> GetPromiseResult {
                unsafe {
                    let PromiseId { agent_id: agent_id0, oplog_idx: oplog_idx0 } = promise_id;
                    let super::super::super::golem::rpc::types::AgentId {
                        component_id: component_id1,
                        agent_id: agent_id1,
                    } = agent_id0;
                    let super::super::super::golem::rpc::types::ComponentId {
                        uuid: uuid2,
                    } = component_id1;
                    let super::super::super::golem::rpc::types::Uuid {
                        high_bits: high_bits3,
                        low_bits: low_bits3,
                    } = uuid2;
                    let vec4 = agent_id1;
                    let ptr4 = vec4.as_ptr().cast::<u8>();
                    let len4 = vec4.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "get-promise"]
                        fn wit_import5(
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                            _: i64,
                        ) -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import5(
                        _: i64,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                        _: i64,
                    ) -> i32 {
                        unreachable!()
                    }
                    let ret = unsafe {
                        wit_import5(
                            _rt::as_i64(high_bits3),
                            _rt::as_i64(low_bits3),
                            ptr4.cast_mut(),
                            len4,
                            _rt::as_i64(oplog_idx0),
                        )
                    };
                    unsafe { GetPromiseResult::from_handle(ret as u32) }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Completes the given promise with the given payload. Returns true if the promise was completed, false
            /// if the promise was already completed. The payload is passed to the agent that is awaiting the promise.
            pub fn complete_promise(promise_id: &PromiseId, data: &[u8]) -> bool {
                unsafe {
                    let PromiseId { agent_id: agent_id0, oplog_idx: oplog_idx0 } = promise_id;
                    let super::super::super::golem::rpc::types::AgentId {
                        component_id: component_id1,
                        agent_id: agent_id1,
                    } = agent_id0;
                    let super::super::super::golem::rpc::types::ComponentId {
                        uuid: uuid2,
                    } = component_id1;
                    let super::super::super::golem::rpc::types::Uuid {
                        high_bits: high_bits3,
                        low_bits: low_bits3,
                    } = uuid2;
                    let vec4 = agent_id1;
                    let ptr4 = vec4.as_ptr().cast::<u8>();
                    let len4 = vec4.len();
                    let vec5 = data;
                    let ptr5 = vec5.as_ptr().cast::<u8>();
                    let len5 = vec5.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "complete-promise"]
                        fn wit_import6(
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                        ) -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import6(
                        _: i64,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                    ) -> i32 {
                        unreachable!()
                    }
                    let ret = unsafe {
                        wit_import6(
                            _rt::as_i64(high_bits3),
                            _rt::as_i64(low_bits3),
                            ptr4.cast_mut(),
                            len4,
                            _rt::as_i64(oplog_idx0),
                            ptr5.cast_mut(),
                            len5,
                        )
                    };
                    _rt::bool_lift(ret as u8)
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Returns the current position in the persistent op log
            pub fn get_oplog_index() -> OplogIndex {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "get-oplog-index"]
                        fn wit_import0() -> i64;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0() -> i64 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0() };
                    ret as u64
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Makes the current agent travel back in time and continue execution from the given position in the persistent
            /// op log.
            pub fn set_oplog_index(oplog_idx: OplogIndex) -> () {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "set-oplog-index"]
                        fn wit_import0(_: i64);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: i64) {
                        unreachable!()
                    }
                    unsafe { wit_import0(_rt::as_i64(oplog_idx)) };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Blocks the execution until the oplog has been written to at least the specified number of replicas,
            /// or the maximum number of replicas if the requested number is higher.
            pub fn oplog_commit(replicas: u8) -> () {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "oplog-commit"]
                        fn wit_import0(_: i32);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: i32) {
                        unreachable!()
                    }
                    unsafe { wit_import0(_rt::as_i32(&replicas)) };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Marks the beginning of an atomic operation.
            /// In case of a failure within the region selected by `mark-begin-operation` and `mark-end-operation`
            /// the whole region will be reexecuted on retry.
            /// The end of the region is when `mark-end-operation` is called with the returned oplog-index.
            pub fn mark_begin_operation() -> OplogIndex {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "mark-begin-operation"]
                        fn wit_import0() -> i64;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0() -> i64 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0() };
                    ret as u64
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Commits this atomic operation. After `mark-end-operation` is called for a given index, further calls
            /// with the same parameter will do nothing.
            pub fn mark_end_operation(begin: OplogIndex) -> () {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "mark-end-operation"]
                        fn wit_import0(_: i64);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: i64) {
                        unreachable!()
                    }
                    unsafe { wit_import0(_rt::as_i64(begin)) };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Gets the current retry policy associated with the agent
            pub fn get_retry_policy() -> RetryPolicy {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 48]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 48]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "get-retry-policy"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = *ptr0.add(0).cast::<i32>();
                    let l3 = *ptr0.add(8).cast::<i64>();
                    let l4 = *ptr0.add(16).cast::<i64>();
                    let l5 = *ptr0.add(24).cast::<f64>();
                    let l6 = i32::from(*ptr0.add(32).cast::<u8>());
                    let result8 = RetryPolicy {
                        max_attempts: l2 as u32,
                        min_delay: l3 as u64,
                        max_delay: l4 as u64,
                        multiplier: l5,
                        max_jitter_factor: match l6 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l7 = *ptr0.add(40).cast::<f64>();
                                    l7
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    };
                    result8
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Overrides the current retry policy associated with the agent. Following this call, `get-retry-policy` will return the
            /// new retry policy.
            pub fn set_retry_policy(new_retry_policy: RetryPolicy) -> () {
                unsafe {
                    let RetryPolicy {
                        max_attempts: max_attempts0,
                        min_delay: min_delay0,
                        max_delay: max_delay0,
                        multiplier: multiplier0,
                        max_jitter_factor: max_jitter_factor0,
                    } = new_retry_policy;
                    let (result1_0, result1_1) = match max_jitter_factor0 {
                        Some(e) => (1i32, _rt::as_f64(e)),
                        None => (0i32, 0.0f64),
                    };
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "set-retry-policy"]
                        fn wit_import2(_: i32, _: i64, _: i64, _: f64, _: i32, _: f64);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(
                        _: i32,
                        _: i64,
                        _: i64,
                        _: f64,
                        _: i32,
                        _: f64,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import2(
                            _rt::as_i32(max_attempts0),
                            _rt::as_i64(min_delay0),
                            _rt::as_i64(max_delay0),
                            _rt::as_f64(multiplier0),
                            result1_0,
                            result1_1,
                        )
                    };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Gets the agent's current persistence level.
            pub fn get_oplog_persistence_level() -> PersistenceLevel {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "get-oplog-persistence-level"]
                        fn wit_import0() -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0() -> i32 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0() };
                    let v1 = match ret {
                        0 => PersistenceLevel::PersistNothing,
                        1 => PersistenceLevel::PersistRemoteSideEffects,
                        n => {
                            debug_assert_eq!(n, 2, "invalid enum discriminant");
                            PersistenceLevel::Smart
                        }
                    };
                    v1
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Sets the agent's current persistence level. This can increase the performance of execution in cases where durable
            /// execution is not required.
            pub fn set_oplog_persistence_level(
                new_persistence_level: PersistenceLevel,
            ) -> () {
                unsafe {
                    let result0 = match new_persistence_level {
                        PersistenceLevel::PersistNothing => 0i32,
                        PersistenceLevel::PersistRemoteSideEffects => 1i32,
                        PersistenceLevel::Smart => 2i32,
                    };
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "set-oplog-persistence-level"]
                        fn wit_import1(_: i32);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: i32) {
                        unreachable!()
                    }
                    unsafe { wit_import1(result0) };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Gets the current idempotence mode. See `set-idempotence-mode` for details.
            pub fn get_idempotence_mode() -> bool {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "get-idempotence-mode"]
                        fn wit_import0() -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0() -> i32 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0() };
                    _rt::bool_lift(ret as u8)
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Sets the current idempotence mode. The default is true.
            /// True means side-effects are treated idempotent and Golem guarantees at-least-once semantics.
            /// In case of false the executor provides at-most-once semantics, failing the agent in case it is
            /// not known if the side effect was already executed.
            pub fn set_idempotence_mode(idempotent: bool) -> () {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "set-idempotence-mode"]
                        fn wit_import0(_: i32);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: i32) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import0(
                            match &idempotent {
                                true => 1,
                                false => 0,
                            },
                        )
                    };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Generates an idempotency key. This operation will never be replayed —
            /// i.e. not only is this key generated, but it is persisted and committed, such that the key can be used in third-party systems (e.g. payment processing)
            /// to introduce idempotence.
            pub fn generate_idempotency_key() -> Uuid {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "generate-idempotency-key"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = *ptr0.add(0).cast::<i64>();
                    let l3 = *ptr0.add(8).cast::<i64>();
                    let result4 = super::super::super::golem::rpc::types::Uuid {
                        high_bits: l2 as u64,
                        low_bits: l3 as u64,
                    };
                    result4
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Initiates an update attempt for the given agent. The function returns immediately once the request has been processed,
            /// not waiting for the agent to get updated.
            pub fn update_agent(
                agent_id: &AgentId,
                target_version: ComponentVersion,
                mode: UpdateMode,
            ) -> () {
                unsafe {
                    let super::super::super::golem::rpc::types::AgentId {
                        component_id: component_id0,
                        agent_id: agent_id0,
                    } = agent_id;
                    let super::super::super::golem::rpc::types::ComponentId {
                        uuid: uuid1,
                    } = component_id0;
                    let super::super::super::golem::rpc::types::Uuid {
                        high_bits: high_bits2,
                        low_bits: low_bits2,
                    } = uuid1;
                    let vec3 = agent_id0;
                    let ptr3 = vec3.as_ptr().cast::<u8>();
                    let len3 = vec3.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "update-agent"]
                        fn wit_import4(
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                            _: i64,
                            _: i32,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import4(
                        _: i64,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                        _: i64,
                        _: i32,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import4(
                            _rt::as_i64(high_bits2),
                            _rt::as_i64(low_bits2),
                            ptr3.cast_mut(),
                            len3,
                            _rt::as_i64(target_version),
                            mode.clone() as i32,
                        )
                    };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Get the current agent's metadata
            pub fn get_self_metadata() -> AgentMetadata {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 40 + 8 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 40
                            + 8 * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "get-self-metadata"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = *ptr0.add(0).cast::<i64>();
                    let l3 = *ptr0.add(8).cast::<i64>();
                    let l4 = *ptr0.add(16).cast::<*mut u8>();
                    let l5 = *ptr0
                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len6 = l5;
                    let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);
                    let l7 = *ptr0
                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l8 = *ptr0
                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base12 = l7;
                    let len12 = l8;
                    let mut result12 = _rt::Vec::with_capacity(len12);
                    for i in 0..len12 {
                        let base = base12
                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                        let e12 = {
                            let l9 = *base.add(0).cast::<*mut u8>();
                            let l10 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len11 = l10;
                            let bytes11 = _rt::Vec::from_raw_parts(
                                l9.cast(),
                                len11,
                                len11,
                            );
                            _rt::string_lift(bytes11)
                        };
                        result12.push(e12);
                    }
                    _rt::cabi_dealloc(
                        base12,
                        len12 * (2 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let l13 = *ptr0
                        .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l14 = *ptr0
                        .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base21 = l13;
                    let len21 = l14;
                    let mut result21 = _rt::Vec::with_capacity(len21);
                    for i in 0..len21 {
                        let base = base21
                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                        let e21 = {
                            let l15 = *base.add(0).cast::<*mut u8>();
                            let l16 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len17 = l16;
                            let bytes17 = _rt::Vec::from_raw_parts(
                                l15.cast(),
                                len17,
                                len17,
                            );
                            let l18 = *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l19 = *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len20 = l19;
                            let bytes20 = _rt::Vec::from_raw_parts(
                                l18.cast(),
                                len20,
                                len20,
                            );
                            (_rt::string_lift(bytes17), _rt::string_lift(bytes20))
                        };
                        result21.push(e21);
                    }
                    _rt::cabi_dealloc(
                        base21,
                        len21 * (4 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let l22 = *ptr0
                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l23 = *ptr0
                        .add(16 + 7 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base30 = l22;
                    let len30 = l23;
                    let mut result30 = _rt::Vec::with_capacity(len30);
                    for i in 0..len30 {
                        let base = base30
                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                        let e30 = {
                            let l24 = *base.add(0).cast::<*mut u8>();
                            let l25 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len26 = l25;
                            let bytes26 = _rt::Vec::from_raw_parts(
                                l24.cast(),
                                len26,
                                len26,
                            );
                            let l27 = *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l28 = *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len29 = l28;
                            let bytes29 = _rt::Vec::from_raw_parts(
                                l27.cast(),
                                len29,
                                len29,
                            );
                            (_rt::string_lift(bytes26), _rt::string_lift(bytes29))
                        };
                        result30.push(e30);
                    }
                    _rt::cabi_dealloc(
                        base30,
                        len30 * (4 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let l31 = i32::from(
                        *ptr0
                            .add(16 + 8 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let l32 = *ptr0
                        .add(24 + 8 * ::core::mem::size_of::<*const u8>())
                        .cast::<i64>();
                    let l33 = *ptr0
                        .add(32 + 8 * ::core::mem::size_of::<*const u8>())
                        .cast::<i64>();
                    let result34 = AgentMetadata {
                        agent_id: super::super::super::golem::rpc::types::AgentId {
                            component_id: super::super::super::golem::rpc::types::ComponentId {
                                uuid: super::super::super::golem::rpc::types::Uuid {
                                    high_bits: l2 as u64,
                                    low_bits: l3 as u64,
                                },
                            },
                            agent_id: _rt::string_lift(bytes6),
                        },
                        args: result12,
                        env: result21,
                        config_vars: result30,
                        status: AgentStatus::_lift(l31 as u8),
                        component_version: l32 as u64,
                        retry_count: l33 as u64,
                    };
                    result34
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Get agent metadata
            pub fn get_agent_metadata(agent_id: &AgentId) -> Option<AgentMetadata> {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 48 + 8 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 48
                            + 8 * ::core::mem::size_of::<*const u8>()],
                    );
                    let super::super::super::golem::rpc::types::AgentId {
                        component_id: component_id0,
                        agent_id: agent_id0,
                    } = agent_id;
                    let super::super::super::golem::rpc::types::ComponentId {
                        uuid: uuid1,
                    } = component_id0;
                    let super::super::super::golem::rpc::types::Uuid {
                        high_bits: high_bits2,
                        low_bits: low_bits2,
                    } = uuid1;
                    let vec3 = agent_id0;
                    let ptr3 = vec3.as_ptr().cast::<u8>();
                    let len3 = vec3.len();
                    let ptr4 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "get-agent-metadata"]
                        fn wit_import5(_: i64, _: i64, _: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import5(
                        _: i64,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import5(
                            _rt::as_i64(high_bits2),
                            _rt::as_i64(low_bits2),
                            ptr3.cast_mut(),
                            len3,
                            ptr4,
                        )
                    };
                    let l6 = i32::from(*ptr4.add(0).cast::<u8>());
                    let result39 = match l6 {
                        0 => None,
                        1 => {
                            let e = {
                                let l7 = *ptr4.add(8).cast::<i64>();
                                let l8 = *ptr4.add(16).cast::<i64>();
                                let l9 = *ptr4.add(24).cast::<*mut u8>();
                                let l10 = *ptr4
                                    .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len11 = l10;
                                let bytes11 = _rt::Vec::from_raw_parts(
                                    l9.cast(),
                                    len11,
                                    len11,
                                );
                                let l12 = *ptr4
                                    .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l13 = *ptr4
                                    .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let base17 = l12;
                                let len17 = l13;
                                let mut result17 = _rt::Vec::with_capacity(len17);
                                for i in 0..len17 {
                                    let base = base17
                                        .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                    let e17 = {
                                        let l14 = *base.add(0).cast::<*mut u8>();
                                        let l15 = *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len16 = l15;
                                        let bytes16 = _rt::Vec::from_raw_parts(
                                            l14.cast(),
                                            len16,
                                            len16,
                                        );
                                        _rt::string_lift(bytes16)
                                    };
                                    result17.push(e17);
                                }
                                _rt::cabi_dealloc(
                                    base17,
                                    len17 * (2 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                let l18 = *ptr4
                                    .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l19 = *ptr4
                                    .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let base26 = l18;
                                let len26 = l19;
                                let mut result26 = _rt::Vec::with_capacity(len26);
                                for i in 0..len26 {
                                    let base = base26
                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                    let e26 = {
                                        let l20 = *base.add(0).cast::<*mut u8>();
                                        let l21 = *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len22 = l21;
                                        let bytes22 = _rt::Vec::from_raw_parts(
                                            l20.cast(),
                                            len22,
                                            len22,
                                        );
                                        let l23 = *base
                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l24 = *base
                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len25 = l24;
                                        let bytes25 = _rt::Vec::from_raw_parts(
                                            l23.cast(),
                                            len25,
                                            len25,
                                        );
                                        (_rt::string_lift(bytes22), _rt::string_lift(bytes25))
                                    };
                                    result26.push(e26);
                                }
                                _rt::cabi_dealloc(
                                    base26,
                                    len26 * (4 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                let l27 = *ptr4
                                    .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l28 = *ptr4
                                    .add(24 + 7 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let base35 = l27;
                                let len35 = l28;
                                let mut result35 = _rt::Vec::with_capacity(len35);
                                for i in 0..len35 {
                                    let base = base35
                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                    let e35 = {
                                        let l29 = *base.add(0).cast::<*mut u8>();
                                        let l30 = *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len31 = l30;
                                        let bytes31 = _rt::Vec::from_raw_parts(
                                            l29.cast(),
                                            len31,
                                            len31,
                                        );
                                        let l32 = *base
                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l33 = *base
                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len34 = l33;
                                        let bytes34 = _rt::Vec::from_raw_parts(
                                            l32.cast(),
                                            len34,
                                            len34,
                                        );
                                        (_rt::string_lift(bytes31), _rt::string_lift(bytes34))
                                    };
                                    result35.push(e35);
                                }
                                _rt::cabi_dealloc(
                                    base35,
                                    len35 * (4 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                let l36 = i32::from(
                                    *ptr4
                                        .add(24 + 8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l37 = *ptr4
                                    .add(32 + 8 * ::core::mem::size_of::<*const u8>())
                                    .cast::<i64>();
                                let l38 = *ptr4
                                    .add(40 + 8 * ::core::mem::size_of::<*const u8>())
                                    .cast::<i64>();
                                AgentMetadata {
                                    agent_id: super::super::super::golem::rpc::types::AgentId {
                                        component_id: super::super::super::golem::rpc::types::ComponentId {
                                            uuid: super::super::super::golem::rpc::types::Uuid {
                                                high_bits: l7 as u64,
                                                low_bits: l8 as u64,
                                            },
                                        },
                                        agent_id: _rt::string_lift(bytes11),
                                    },
                                    args: result17,
                                    env: result26,
                                    config_vars: result35,
                                    status: AgentStatus::_lift(l36 as u8),
                                    component_version: l37 as u64,
                                    retry_count: l38 as u64,
                                }
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result39
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Fork an agent to another agent at a given oplog index
            pub fn fork_agent(
                source_agent_id: &AgentId,
                target_agent_id: &AgentId,
                oplog_idx_cut_off: OplogIndex,
            ) -> () {
                unsafe {
                    let super::super::super::golem::rpc::types::AgentId {
                        component_id: component_id0,
                        agent_id: agent_id0,
                    } = source_agent_id;
                    let super::super::super::golem::rpc::types::ComponentId {
                        uuid: uuid1,
                    } = component_id0;
                    let super::super::super::golem::rpc::types::Uuid {
                        high_bits: high_bits2,
                        low_bits: low_bits2,
                    } = uuid1;
                    let vec3 = agent_id0;
                    let ptr3 = vec3.as_ptr().cast::<u8>();
                    let len3 = vec3.len();
                    let super::super::super::golem::rpc::types::AgentId {
                        component_id: component_id4,
                        agent_id: agent_id4,
                    } = target_agent_id;
                    let super::super::super::golem::rpc::types::ComponentId {
                        uuid: uuid5,
                    } = component_id4;
                    let super::super::super::golem::rpc::types::Uuid {
                        high_bits: high_bits6,
                        low_bits: low_bits6,
                    } = uuid5;
                    let vec7 = agent_id4;
                    let ptr7 = vec7.as_ptr().cast::<u8>();
                    let len7 = vec7.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "fork-agent"]
                        fn wit_import8(
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                            _: i64,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import8(
                        _: i64,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                        _: i64,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                        _: i64,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import8(
                            _rt::as_i64(high_bits2),
                            _rt::as_i64(low_bits2),
                            ptr3.cast_mut(),
                            len3,
                            _rt::as_i64(high_bits6),
                            _rt::as_i64(low_bits6),
                            ptr7.cast_mut(),
                            len7,
                            _rt::as_i64(oplog_idx_cut_off),
                        )
                    };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Revert an agent to a previous state
            pub fn revert_agent(
                agent_id: &AgentId,
                revert_target: RevertAgentTarget,
            ) -> () {
                unsafe {
                    let super::super::super::golem::rpc::types::AgentId {
                        component_id: component_id0,
                        agent_id: agent_id0,
                    } = agent_id;
                    let super::super::super::golem::rpc::types::ComponentId {
                        uuid: uuid1,
                    } = component_id0;
                    let super::super::super::golem::rpc::types::Uuid {
                        high_bits: high_bits2,
                        low_bits: low_bits2,
                    } = uuid1;
                    let vec3 = agent_id0;
                    let ptr3 = vec3.as_ptr().cast::<u8>();
                    let len3 = vec3.len();
                    let (result4_0, result4_1) = match revert_target {
                        RevertAgentTarget::RevertToOplogIndex(e) => {
                            (0i32, _rt::as_i64(e))
                        }
                        RevertAgentTarget::RevertLastInvocations(e) => {
                            (1i32, _rt::as_i64(e))
                        }
                    };
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "revert-agent"]
                        fn wit_import5(
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: i64,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import5(
                        _: i64,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: i64,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import5(
                            _rt::as_i64(high_bits2),
                            _rt::as_i64(low_bits2),
                            ptr3.cast_mut(),
                            len3,
                            result4_0,
                            result4_1,
                        )
                    };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Get the component-id for a given component reference.
            /// Returns none when no component with the specified reference exists.
            /// The syntax of the component reference is implementation dependent.
            ///
            /// Golem OSS: "{component_name}"
            /// Golem Cloud:
            ///     1: "{component_name}" -> will resolve in current account and project
            ///     2: "{project_name}/{component_name}" -> will resolve in current account
            ///     3: "{account_id}/{project_name}/{component_name}"
            pub fn resolve_component_id(
                component_reference: &str,
            ) -> Option<ComponentId> {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 24]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 24]);
                    let vec0 = component_reference;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "resolve-component-id"]
                        fn wit_import2(_: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import2(ptr0.cast_mut(), len0, ptr1) };
                    let l3 = i32::from(*ptr1.add(0).cast::<u8>());
                    let result6 = match l3 {
                        0 => None,
                        1 => {
                            let e = {
                                let l4 = *ptr1.add(8).cast::<i64>();
                                let l5 = *ptr1.add(16).cast::<i64>();
                                super::super::super::golem::rpc::types::ComponentId {
                                    uuid: super::super::super::golem::rpc::types::Uuid {
                                        high_bits: l4 as u64,
                                        low_bits: l5 as u64,
                                    },
                                }
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result6
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Get the agent-id for a given component and agent name.
            /// Returns none when no component for the specified reference exists.
            pub fn resolve_agent_id(
                component_reference: &str,
                agent_name: &str,
            ) -> Option<AgentId> {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 24 + 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 24
                            + 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let vec0 = component_reference;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let vec1 = agent_name;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let ptr2 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "resolve-agent-id"]
                        fn wit_import3(
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import3(
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import3(ptr0.cast_mut(), len0, ptr1.cast_mut(), len1, ptr2)
                    };
                    let l4 = i32::from(*ptr2.add(0).cast::<u8>());
                    let result10 = match l4 {
                        0 => None,
                        1 => {
                            let e = {
                                let l5 = *ptr2.add(8).cast::<i64>();
                                let l6 = *ptr2.add(16).cast::<i64>();
                                let l7 = *ptr2.add(24).cast::<*mut u8>();
                                let l8 = *ptr2
                                    .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len9 = l8;
                                let bytes9 = _rt::Vec::from_raw_parts(
                                    l7.cast(),
                                    len9,
                                    len9,
                                );
                                super::super::super::golem::rpc::types::AgentId {
                                    component_id: super::super::super::golem::rpc::types::ComponentId {
                                        uuid: super::super::super::golem::rpc::types::Uuid {
                                            high_bits: l5 as u64,
                                            low_bits: l6 as u64,
                                        },
                                    },
                                    agent_id: _rt::string_lift(bytes9),
                                }
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result10
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Get the agent-id for a given component and agent-name.
            /// Returns none when no component for the specified component-reference or no agent with the specified agent-name exists.
            pub fn resolve_agent_id_strict(
                component_reference: &str,
                agent_name: &str,
            ) -> Option<AgentId> {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 24 + 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 24
                            + 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let vec0 = component_reference;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let vec1 = agent_name;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let ptr2 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "resolve-agent-id-strict"]
                        fn wit_import3(
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import3(
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import3(ptr0.cast_mut(), len0, ptr1.cast_mut(), len1, ptr2)
                    };
                    let l4 = i32::from(*ptr2.add(0).cast::<u8>());
                    let result10 = match l4 {
                        0 => None,
                        1 => {
                            let e = {
                                let l5 = *ptr2.add(8).cast::<i64>();
                                let l6 = *ptr2.add(16).cast::<i64>();
                                let l7 = *ptr2.add(24).cast::<*mut u8>();
                                let l8 = *ptr2
                                    .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len9 = l8;
                                let bytes9 = _rt::Vec::from_raw_parts(
                                    l7.cast(),
                                    len9,
                                    len9,
                                );
                                super::super::super::golem::rpc::types::AgentId {
                                    component_id: super::super::super::golem::rpc::types::ComponentId {
                                        uuid: super::super::super::golem::rpc::types::Uuid {
                                            high_bits: l5 as u64,
                                            low_bits: l6 as u64,
                                        },
                                    },
                                    agent_id: _rt::string_lift(bytes9),
                                }
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result10
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Forks the current agent at the current execution point. The new agent gets the `new-name` agent ID,
            /// and this agent continues running as well. The return value is going to be different in this agent and
            /// the forked agent.
            pub fn fork(new_name: &str) -> ForkResult {
                unsafe {
                    let vec0 = new_name;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "fork"]
                        fn wit_import1(_: *mut u8, _: usize) -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8, _: usize) -> i32 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import1(ptr0.cast_mut(), len0) };
                    ForkResult::_lift(ret as u8)
                }
            }
        }
    }
    pub mod rpc {
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Datetime = super::super::super::wasi::clocks::wall_clock::Datetime;
            pub type Pollable = super::super::super::wasi::io::poll::Pollable;
            /// UUID
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Uuid {
                pub high_bits: u64,
                pub low_bits: u64,
            }
            impl ::core::fmt::Debug for Uuid {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Uuid")
                        .field("high-bits", &self.high_bits)
                        .field("low-bits", &self.low_bits)
                        .finish()
                }
            }
            /// Represents a Golem component
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct ComponentId {
                pub uuid: Uuid,
            }
            impl ::core::fmt::Debug for ComponentId {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ComponentId").field("uuid", &self.uuid).finish()
                }
            }
            /// Represents a Golem agent
            #[derive(Clone)]
            pub struct AgentId {
                /// Identifies the component the agent belongs to
                pub component_id: ComponentId,
                /// String representation of the agent ID (agent type and constructor parameters)
                pub agent_id: _rt::String,
            }
            impl ::core::fmt::Debug for AgentId {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AgentId")
                        .field("component-id", &self.component_id)
                        .field("agent-id", &self.agent_id)
                        .finish()
                }
            }
            /// The index type used in `wit-value` and `wit-type` to identify nodes
            pub type NodeIndex = i32;
            /// Resource handle modes
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum ResourceMode {
                /// The resource is owned by this handle
                Owned,
                /// The resource is owned by someone else, and this handle is just a borrow
                Borrowed,
            }
            impl ::core::fmt::Debug for ResourceMode {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ResourceMode::Owned => {
                            f.debug_tuple("ResourceMode::Owned").finish()
                        }
                        ResourceMode::Borrowed => {
                            f.debug_tuple("ResourceMode::Borrowed").finish()
                        }
                    }
                }
            }
            impl ResourceMode {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> ResourceMode {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => ResourceMode::Owned,
                        1 => ResourceMode::Borrowed,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            /// URI value
            #[derive(Clone)]
            pub struct Uri {
                pub value: _rt::String,
            }
            impl ::core::fmt::Debug for Uri {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Uri").field("value", &self.value).finish()
                }
            }
            /// One node of a `wit-value`
            #[derive(Clone)]
            pub enum WitNode {
                /// A record value defined by a list of its field values
                RecordValue(_rt::Vec<NodeIndex>),
                /// A variant value defined by a pair of the case index and its inner value
                VariantValue((u32, Option<NodeIndex>)),
                /// An enum value defined by a case index
                EnumValue(u32),
                /// A flags value defined by a list of its flag states
                FlagsValue(_rt::Vec<bool>),
                /// A tuple value defined by a list of its item values
                TupleValue(_rt::Vec<NodeIndex>),
                /// A list value defined by a list of its item values
                ListValue(_rt::Vec<NodeIndex>),
                /// An option value defined by an optional inner value
                OptionValue(Option<NodeIndex>),
                /// A result value defined by either an ok value or an error value. Both values are optional,
                /// where the `none` case represents the absence of a value.
                ResultValue(Result<Option<NodeIndex>, Option<NodeIndex>>),
                /// Primitive unsigned 8-bit integer
                PrimU8(u8),
                /// Primitive unsigned 16-bit integer
                PrimU16(u16),
                /// Primitive unsigned 32-bit integer
                PrimU32(u32),
                /// Primitive unsigned 64-bit integer
                PrimU64(u64),
                /// Primitive signed 8-bit integer
                PrimS8(i8),
                /// Primitive signed 16-bit integer
                PrimS16(i16),
                /// Primitive signed 32-bit integer
                PrimS32(i32),
                /// Primitive signed 64-bit integer
                PrimS64(i64),
                /// Primitive 32-bit floating point number
                PrimFloat32(f32),
                /// Primitive 64-bit floating point number
                PrimFloat64(f64),
                /// Primitive character
                PrimChar(char),
                /// Primitive boolean
                PrimBool(bool),
                /// Primitive string
                PrimString(_rt::String),
                /// Resource handle pointing to a URI and a resource ID
                Handle((Uri, u64)),
            }
            impl ::core::fmt::Debug for WitNode {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        WitNode::RecordValue(e) => {
                            f.debug_tuple("WitNode::RecordValue").field(e).finish()
                        }
                        WitNode::VariantValue(e) => {
                            f.debug_tuple("WitNode::VariantValue").field(e).finish()
                        }
                        WitNode::EnumValue(e) => {
                            f.debug_tuple("WitNode::EnumValue").field(e).finish()
                        }
                        WitNode::FlagsValue(e) => {
                            f.debug_tuple("WitNode::FlagsValue").field(e).finish()
                        }
                        WitNode::TupleValue(e) => {
                            f.debug_tuple("WitNode::TupleValue").field(e).finish()
                        }
                        WitNode::ListValue(e) => {
                            f.debug_tuple("WitNode::ListValue").field(e).finish()
                        }
                        WitNode::OptionValue(e) => {
                            f.debug_tuple("WitNode::OptionValue").field(e).finish()
                        }
                        WitNode::ResultValue(e) => {
                            f.debug_tuple("WitNode::ResultValue").field(e).finish()
                        }
                        WitNode::PrimU8(e) => {
                            f.debug_tuple("WitNode::PrimU8").field(e).finish()
                        }
                        WitNode::PrimU16(e) => {
                            f.debug_tuple("WitNode::PrimU16").field(e).finish()
                        }
                        WitNode::PrimU32(e) => {
                            f.debug_tuple("WitNode::PrimU32").field(e).finish()
                        }
                        WitNode::PrimU64(e) => {
                            f.debug_tuple("WitNode::PrimU64").field(e).finish()
                        }
                        WitNode::PrimS8(e) => {
                            f.debug_tuple("WitNode::PrimS8").field(e).finish()
                        }
                        WitNode::PrimS16(e) => {
                            f.debug_tuple("WitNode::PrimS16").field(e).finish()
                        }
                        WitNode::PrimS32(e) => {
                            f.debug_tuple("WitNode::PrimS32").field(e).finish()
                        }
                        WitNode::PrimS64(e) => {
                            f.debug_tuple("WitNode::PrimS64").field(e).finish()
                        }
                        WitNode::PrimFloat32(e) => {
                            f.debug_tuple("WitNode::PrimFloat32").field(e).finish()
                        }
                        WitNode::PrimFloat64(e) => {
                            f.debug_tuple("WitNode::PrimFloat64").field(e).finish()
                        }
                        WitNode::PrimChar(e) => {
                            f.debug_tuple("WitNode::PrimChar").field(e).finish()
                        }
                        WitNode::PrimBool(e) => {
                            f.debug_tuple("WitNode::PrimBool").field(e).finish()
                        }
                        WitNode::PrimString(e) => {
                            f.debug_tuple("WitNode::PrimString").field(e).finish()
                        }
                        WitNode::Handle(e) => {
                            f.debug_tuple("WitNode::Handle").field(e).finish()
                        }
                    }
                }
            }
            /// Describes an arbitrary value
            #[derive(Clone)]
            pub struct WitValue {
                /// The list of `wit-node` values that make up the value. The list is always non-empty,
                /// and the first element is the root node describing the value. Because WIT does not support
                /// recursive types, further nodes are pushed into this list, and referenced by index from their parent node.
                pub nodes: _rt::Vec<WitNode>,
            }
            impl ::core::fmt::Debug for WitValue {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WitValue").field("nodes", &self.nodes).finish()
                }
            }
            /// Possible failures of an RPC call
            #[derive(Clone)]
            pub enum RpcError {
                /// Protocol level error
                ProtocolError(_rt::String),
                /// Access denied
                Denied(_rt::String),
                /// Target agent or function not found
                NotFound(_rt::String),
                /// Internal error on the remote side
                RemoteInternalError(_rt::String),
            }
            impl ::core::fmt::Debug for RpcError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        RpcError::ProtocolError(e) => {
                            f.debug_tuple("RpcError::ProtocolError").field(e).finish()
                        }
                        RpcError::Denied(e) => {
                            f.debug_tuple("RpcError::Denied").field(e).finish()
                        }
                        RpcError::NotFound(e) => {
                            f.debug_tuple("RpcError::NotFound").field(e).finish()
                        }
                        RpcError::RemoteInternalError(e) => {
                            f.debug_tuple("RpcError::RemoteInternalError")
                                .field(e)
                                .finish()
                        }
                    }
                }
            }
            impl ::core::fmt::Display for RpcError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }
            impl std::error::Error for RpcError {}
            /// An RPC client
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct WasmRpc {
                handle: _rt::Resource<WasmRpc>,
            }
            impl WasmRpc {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for WasmRpc {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]wasm-rpc"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            /// Represents a pollable invocation result
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct FutureInvokeResult {
                handle: _rt::Resource<FutureInvokeResult>,
            }
            impl FutureInvokeResult {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for FutureInvokeResult {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]future-invoke-result"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            /// Cancellation token for scheduled invocations
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct CancellationToken {
                handle: _rt::Resource<CancellationToken>,
            }
            impl CancellationToken {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for CancellationToken {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]cancellation-token"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Parses a UUID from a string
            pub fn parse_uuid(uuid: &str) -> Result<Uuid, _rt::String> {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 24]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 24]);
                    let vec0 = uuid;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                    unsafe extern "C" {
                        #[link_name = "parse-uuid"]
                        fn wit_import2(_: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import2(ptr0.cast_mut(), len0, ptr1) };
                    let l3 = i32::from(*ptr1.add(0).cast::<u8>());
                    let result9 = match l3 {
                        0 => {
                            let e = {
                                let l4 = *ptr1.add(8).cast::<i64>();
                                let l5 = *ptr1.add(16).cast::<i64>();
                                Uuid {
                                    high_bits: l4 as u64,
                                    low_bits: l5 as u64,
                                }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l6 = *ptr1.add(8).cast::<*mut u8>();
                                let l7 = *ptr1
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len8 = l7;
                                let bytes8 = _rt::Vec::from_raw_parts(
                                    l6.cast(),
                                    len8,
                                    len8,
                                );
                                _rt::string_lift(bytes8)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result9
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Converts a UUID to a string
            pub fn uuid_to_string(uuid: Uuid) -> _rt::String {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 2
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let Uuid { high_bits: high_bits0, low_bits: low_bits0 } = uuid;
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                    unsafe extern "C" {
                        #[link_name = "uuid-to-string"]
                        fn wit_import2(_: i64, _: i64, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(_: i64, _: i64, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import2(
                            _rt::as_i64(high_bits0),
                            _rt::as_i64(low_bits0),
                            ptr1,
                        )
                    };
                    let l3 = *ptr1.add(0).cast::<*mut u8>();
                    let l4 = *ptr1
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len5 = l4;
                    let bytes5 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);
                    let result6 = _rt::string_lift(bytes5);
                    result6
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                /// Constructs the RPC client connecting to the given target agent
                pub fn new(agent_id: &AgentId) -> Self {
                    unsafe {
                        let AgentId {
                            component_id: component_id0,
                            agent_id: agent_id0,
                        } = agent_id;
                        let ComponentId { uuid: uuid1 } = component_id0;
                        let Uuid { high_bits: high_bits2, low_bits: low_bits2 } = uuid1;
                        let vec3 = agent_id0;
                        let ptr3 = vec3.as_ptr().cast::<u8>();
                        let len3 = vec3.len();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[constructor]wasm-rpc"]
                            fn wit_import4(_: i64, _: i64, _: *mut u8, _: usize) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import4(
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe {
                            wit_import4(
                                _rt::as_i64(high_bits2),
                                _rt::as_i64(low_bits2),
                                ptr3.cast_mut(),
                                len3,
                            )
                        };
                        unsafe { WasmRpc::from_handle(ret as u32) }
                    }
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                /// Invokes a remote function with the given parameters, and awaits the result
                pub fn invoke_and_await(
                    &self,
                    function_name: &str,
                    function_params: &[WitValue],
                ) -> Result<WitValue, RpcError> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 4 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 4
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let vec0 = function_name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec12 = function_params;
                        let len12 = vec12.len();
                        let layout12 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec12.len() * (2 * ::core::mem::size_of::<*const u8>()),
                            ::core::mem::size_of::<*const u8>(),
                        );
                        let result12 = if layout12.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout12);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec12.into_iter().enumerate() {
                            let base = result12
                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                            {
                                let WitValue { nodes: nodes1 } = e;
                                let vec11 = nodes1;
                                let len11 = vec11.len();
                                let layout11 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec11.len()
                                        * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                    8,
                                );
                                let result11 = if layout11.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout11);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec11.into_iter().enumerate() {
                                    let base = result11
                                        .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                    {
                                        match e {
                                            WitNode::RecordValue(e) => {
                                                *base.add(0).cast::<u8>() = (0i32) as u8;
                                                let vec2 = e;
                                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                                let len2 = vec2.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len2;
                                                *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                            }
                                            WitNode::VariantValue(e) => {
                                                *base.add(0).cast::<u8>() = (1i32) as u8;
                                                let (t3_0, t3_1) = e;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(t3_0);
                                                match t3_1 {
                                                    Some(e) => {
                                                        *base.add(12).cast::<u8>() = (1i32) as u8;
                                                        *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(12).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::EnumValue(e) => {
                                                *base.add(0).cast::<u8>() = (2i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::FlagsValue(e) => {
                                                *base.add(0).cast::<u8>() = (3i32) as u8;
                                                let vec4 = e;
                                                let len4 = vec4.len();
                                                let layout4 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec4.len() * 1,
                                                    1,
                                                );
                                                let result4 = if layout4.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout4).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout4);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec4.into_iter().enumerate() {
                                                    let base = result4.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        }) as u8;
                                                    }
                                                }
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len4;
                                                *base.add(8).cast::<*mut u8>() = result4;
                                                cleanup_list.extend_from_slice(&[(result4, layout4)]);
                                            }
                                            WitNode::TupleValue(e) => {
                                                *base.add(0).cast::<u8>() = (4i32) as u8;
                                                let vec5 = e;
                                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                                let len5 = vec5.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len5;
                                                *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                            }
                                            WitNode::ListValue(e) => {
                                                *base.add(0).cast::<u8>() = (5i32) as u8;
                                                let vec6 = e;
                                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                                let len6 = vec6.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len6;
                                                *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                            }
                                            WitNode::OptionValue(e) => {
                                                *base.add(0).cast::<u8>() = (6i32) as u8;
                                                match e {
                                                    Some(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::ResultValue(e) => {
                                                *base.add(0).cast::<u8>() = (7i32) as u8;
                                                match e {
                                                    Ok(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    Err(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                };
                                            }
                                            WitNode::PrimU8(e) => {
                                                *base.add(0).cast::<u8>() = (8i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimU16(e) => {
                                                *base.add(0).cast::<u8>() = (9i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimU32(e) => {
                                                *base.add(0).cast::<u8>() = (10i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimU64(e) => {
                                                *base.add(0).cast::<u8>() = (11i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimS8(e) => {
                                                *base.add(0).cast::<u8>() = (12i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimS16(e) => {
                                                *base.add(0).cast::<u8>() = (13i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimS32(e) => {
                                                *base.add(0).cast::<u8>() = (14i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimS64(e) => {
                                                *base.add(0).cast::<u8>() = (15i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimFloat32(e) => {
                                                *base.add(0).cast::<u8>() = (16i32) as u8;
                                                *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            WitNode::PrimFloat64(e) => {
                                                *base.add(0).cast::<u8>() = (17i32) as u8;
                                                *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            WitNode::PrimChar(e) => {
                                                *base.add(0).cast::<u8>() = (18i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimBool(e) => {
                                                *base.add(0).cast::<u8>() = (19i32) as u8;
                                                *base.add(8).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                            WitNode::PrimString(e) => {
                                                *base.add(0).cast::<u8>() = (20i32) as u8;
                                                let vec7 = e;
                                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                                let len7 = vec7.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len7;
                                                *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                            }
                                            WitNode::Handle(e) => {
                                                *base.add(0).cast::<u8>() = (21i32) as u8;
                                                let (t8_0, t8_1) = e;
                                                let Uri { value: value9 } = t8_0;
                                                let vec10 = value9;
                                                let ptr10 = vec10.as_ptr().cast::<u8>();
                                                let len10 = vec10.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len10;
                                                *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                                *base
                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<i64>() = _rt::as_i64(t8_1);
                                            }
                                        }
                                    }
                                }
                                *base
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<usize>() = len11;
                                *base.add(0).cast::<*mut u8>() = result11;
                                cleanup_list.extend_from_slice(&[(result11, layout11)]);
                            }
                        }
                        let ptr13 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[method]wasm-rpc.invoke-and-await"]
                            fn wit_import14(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import14(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import14(
                                (self).handle() as i32,
                                ptr0.cast_mut(),
                                len0,
                                result12,
                                len12,
                                ptr13,
                            )
                        };
                        let l15 = i32::from(*ptr13.add(0).cast::<u8>());
                        let result78 = match l15 {
                            0 => {
                                let e = {
                                    let l16 = *ptr13
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l17 = *ptr13
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base63 = l16;
                                    let len63 = l17;
                                    let mut result63 = _rt::Vec::with_capacity(len63);
                                    for i in 0..len63 {
                                        let base = base63
                                            .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                        let e63 = {
                                            let l18 = i32::from(*base.add(0).cast::<u8>());
                                            let v62 = match l18 {
                                                0 => {
                                                    let e62 = {
                                                        let l19 = *base.add(8).cast::<*mut u8>();
                                                        let l20 = *base
                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len21 = l20;
                                                        _rt::Vec::from_raw_parts(l19.cast(), len21, len21)
                                                    };
                                                    WitNode::RecordValue(e62)
                                                }
                                                1 => {
                                                    let e62 = {
                                                        let l22 = *base.add(8).cast::<i32>();
                                                        let l23 = i32::from(*base.add(12).cast::<u8>());
                                                        (
                                                            l22 as u32,
                                                            match l23 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l24 = *base.add(16).cast::<i32>();
                                                                        l24
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        )
                                                    };
                                                    WitNode::VariantValue(e62)
                                                }
                                                2 => {
                                                    let e62 = {
                                                        let l25 = *base.add(8).cast::<i32>();
                                                        l25 as u32
                                                    };
                                                    WitNode::EnumValue(e62)
                                                }
                                                3 => {
                                                    let e62 = {
                                                        let l26 = *base.add(8).cast::<*mut u8>();
                                                        let l27 = *base
                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base29 = l26;
                                                        let len29 = l27;
                                                        let mut result29 = _rt::Vec::with_capacity(len29);
                                                        for i in 0..len29 {
                                                            let base = base29.add(i * 1);
                                                            let e29 = {
                                                                let l28 = i32::from(*base.add(0).cast::<u8>());
                                                                _rt::bool_lift(l28 as u8)
                                                            };
                                                            result29.push(e29);
                                                        }
                                                        _rt::cabi_dealloc(base29, len29 * 1, 1);
                                                        result29
                                                    };
                                                    WitNode::FlagsValue(e62)
                                                }
                                                4 => {
                                                    let e62 = {
                                                        let l30 = *base.add(8).cast::<*mut u8>();
                                                        let l31 = *base
                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len32 = l31;
                                                        _rt::Vec::from_raw_parts(l30.cast(), len32, len32)
                                                    };
                                                    WitNode::TupleValue(e62)
                                                }
                                                5 => {
                                                    let e62 = {
                                                        let l33 = *base.add(8).cast::<*mut u8>();
                                                        let l34 = *base
                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len35 = l34;
                                                        _rt::Vec::from_raw_parts(l33.cast(), len35, len35)
                                                    };
                                                    WitNode::ListValue(e62)
                                                }
                                                6 => {
                                                    let e62 = {
                                                        let l36 = i32::from(*base.add(8).cast::<u8>());
                                                        match l36 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l37 = *base.add(12).cast::<i32>();
                                                                    l37
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        }
                                                    };
                                                    WitNode::OptionValue(e62)
                                                }
                                                7 => {
                                                    let e62 = {
                                                        let l38 = i32::from(*base.add(8).cast::<u8>());
                                                        match l38 {
                                                            0 => {
                                                                let e = {
                                                                    let l39 = i32::from(*base.add(12).cast::<u8>());
                                                                    match l39 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l40 = *base.add(16).cast::<i32>();
                                                                                l40
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                Ok(e)
                                                            }
                                                            1 => {
                                                                let e = {
                                                                    let l41 = i32::from(*base.add(12).cast::<u8>());
                                                                    match l41 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l42 = *base.add(16).cast::<i32>();
                                                                                l42
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                Err(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        }
                                                    };
                                                    WitNode::ResultValue(e62)
                                                }
                                                8 => {
                                                    let e62 = {
                                                        let l43 = i32::from(*base.add(8).cast::<u8>());
                                                        l43 as u8
                                                    };
                                                    WitNode::PrimU8(e62)
                                                }
                                                9 => {
                                                    let e62 = {
                                                        let l44 = i32::from(*base.add(8).cast::<u16>());
                                                        l44 as u16
                                                    };
                                                    WitNode::PrimU16(e62)
                                                }
                                                10 => {
                                                    let e62 = {
                                                        let l45 = *base.add(8).cast::<i32>();
                                                        l45 as u32
                                                    };
                                                    WitNode::PrimU32(e62)
                                                }
                                                11 => {
                                                    let e62 = {
                                                        let l46 = *base.add(8).cast::<i64>();
                                                        l46 as u64
                                                    };
                                                    WitNode::PrimU64(e62)
                                                }
                                                12 => {
                                                    let e62 = {
                                                        let l47 = i32::from(*base.add(8).cast::<i8>());
                                                        l47 as i8
                                                    };
                                                    WitNode::PrimS8(e62)
                                                }
                                                13 => {
                                                    let e62 = {
                                                        let l48 = i32::from(*base.add(8).cast::<i16>());
                                                        l48 as i16
                                                    };
                                                    WitNode::PrimS16(e62)
                                                }
                                                14 => {
                                                    let e62 = {
                                                        let l49 = *base.add(8).cast::<i32>();
                                                        l49
                                                    };
                                                    WitNode::PrimS32(e62)
                                                }
                                                15 => {
                                                    let e62 = {
                                                        let l50 = *base.add(8).cast::<i64>();
                                                        l50
                                                    };
                                                    WitNode::PrimS64(e62)
                                                }
                                                16 => {
                                                    let e62 = {
                                                        let l51 = *base.add(8).cast::<f32>();
                                                        l51
                                                    };
                                                    WitNode::PrimFloat32(e62)
                                                }
                                                17 => {
                                                    let e62 = {
                                                        let l52 = *base.add(8).cast::<f64>();
                                                        l52
                                                    };
                                                    WitNode::PrimFloat64(e62)
                                                }
                                                18 => {
                                                    let e62 = {
                                                        let l53 = *base.add(8).cast::<i32>();
                                                        _rt::char_lift(l53 as u32)
                                                    };
                                                    WitNode::PrimChar(e62)
                                                }
                                                19 => {
                                                    let e62 = {
                                                        let l54 = i32::from(*base.add(8).cast::<u8>());
                                                        _rt::bool_lift(l54 as u8)
                                                    };
                                                    WitNode::PrimBool(e62)
                                                }
                                                20 => {
                                                    let e62 = {
                                                        let l55 = *base.add(8).cast::<*mut u8>();
                                                        let l56 = *base
                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len57 = l56;
                                                        let bytes57 = _rt::Vec::from_raw_parts(
                                                            l55.cast(),
                                                            len57,
                                                            len57,
                                                        );
                                                        _rt::string_lift(bytes57)
                                                    };
                                                    WitNode::PrimString(e62)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                    let e62 = {
                                                        let l58 = *base.add(8).cast::<*mut u8>();
                                                        let l59 = *base
                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len60 = l59;
                                                        let bytes60 = _rt::Vec::from_raw_parts(
                                                            l58.cast(),
                                                            len60,
                                                            len60,
                                                        );
                                                        let l61 = *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i64>();
                                                        (
                                                            Uri {
                                                                value: _rt::string_lift(bytes60),
                                                            },
                                                            l61 as u64,
                                                        )
                                                    };
                                                    WitNode::Handle(e62)
                                                }
                                            };
                                            v62
                                        };
                                        result63.push(e63);
                                    }
                                    _rt::cabi_dealloc(
                                        base63,
                                        len63 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                        8,
                                    );
                                    WitValue { nodes: result63 }
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l64 = i32::from(
                                        *ptr13.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                    );
                                    let v77 = match l64 {
                                        0 => {
                                            let e77 = {
                                                let l65 = *ptr13
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l66 = *ptr13
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len67 = l66;
                                                let bytes67 = _rt::Vec::from_raw_parts(
                                                    l65.cast(),
                                                    len67,
                                                    len67,
                                                );
                                                _rt::string_lift(bytes67)
                                            };
                                            RpcError::ProtocolError(e77)
                                        }
                                        1 => {
                                            let e77 = {
                                                let l68 = *ptr13
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l69 = *ptr13
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len70 = l69;
                                                let bytes70 = _rt::Vec::from_raw_parts(
                                                    l68.cast(),
                                                    len70,
                                                    len70,
                                                );
                                                _rt::string_lift(bytes70)
                                            };
                                            RpcError::Denied(e77)
                                        }
                                        2 => {
                                            let e77 = {
                                                let l71 = *ptr13
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l72 = *ptr13
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len73 = l72;
                                                let bytes73 = _rt::Vec::from_raw_parts(
                                                    l71.cast(),
                                                    len73,
                                                    len73,
                                                );
                                                _rt::string_lift(bytes73)
                                            };
                                            RpcError::NotFound(e77)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 3, "invalid enum discriminant");
                                            let e77 = {
                                                let l74 = *ptr13
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l75 = *ptr13
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len76 = l75;
                                                let bytes76 = _rt::Vec::from_raw_parts(
                                                    l74.cast(),
                                                    len76,
                                                    len76,
                                                );
                                                _rt::string_lift(bytes76)
                                            };
                                            RpcError::RemoteInternalError(e77)
                                        }
                                    };
                                    v77
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        if layout12.size() != 0 {
                            _rt::alloc::dealloc(result12.cast(), layout12);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        result78
                    }
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                /// Triggers the invocation of a remote function with the given parameters, and returns immediately.
                pub fn invoke(
                    &self,
                    function_name: &str,
                    function_params: &[WitValue],
                ) -> Result<(), RpcError> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 4 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 4
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let vec0 = function_name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec12 = function_params;
                        let len12 = vec12.len();
                        let layout12 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec12.len() * (2 * ::core::mem::size_of::<*const u8>()),
                            ::core::mem::size_of::<*const u8>(),
                        );
                        let result12 = if layout12.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout12);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec12.into_iter().enumerate() {
                            let base = result12
                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                            {
                                let WitValue { nodes: nodes1 } = e;
                                let vec11 = nodes1;
                                let len11 = vec11.len();
                                let layout11 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec11.len()
                                        * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                    8,
                                );
                                let result11 = if layout11.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout11);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec11.into_iter().enumerate() {
                                    let base = result11
                                        .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                    {
                                        match e {
                                            WitNode::RecordValue(e) => {
                                                *base.add(0).cast::<u8>() = (0i32) as u8;
                                                let vec2 = e;
                                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                                let len2 = vec2.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len2;
                                                *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                            }
                                            WitNode::VariantValue(e) => {
                                                *base.add(0).cast::<u8>() = (1i32) as u8;
                                                let (t3_0, t3_1) = e;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(t3_0);
                                                match t3_1 {
                                                    Some(e) => {
                                                        *base.add(12).cast::<u8>() = (1i32) as u8;
                                                        *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(12).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::EnumValue(e) => {
                                                *base.add(0).cast::<u8>() = (2i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::FlagsValue(e) => {
                                                *base.add(0).cast::<u8>() = (3i32) as u8;
                                                let vec4 = e;
                                                let len4 = vec4.len();
                                                let layout4 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec4.len() * 1,
                                                    1,
                                                );
                                                let result4 = if layout4.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout4).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout4);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec4.into_iter().enumerate() {
                                                    let base = result4.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        }) as u8;
                                                    }
                                                }
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len4;
                                                *base.add(8).cast::<*mut u8>() = result4;
                                                cleanup_list.extend_from_slice(&[(result4, layout4)]);
                                            }
                                            WitNode::TupleValue(e) => {
                                                *base.add(0).cast::<u8>() = (4i32) as u8;
                                                let vec5 = e;
                                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                                let len5 = vec5.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len5;
                                                *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                            }
                                            WitNode::ListValue(e) => {
                                                *base.add(0).cast::<u8>() = (5i32) as u8;
                                                let vec6 = e;
                                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                                let len6 = vec6.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len6;
                                                *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                            }
                                            WitNode::OptionValue(e) => {
                                                *base.add(0).cast::<u8>() = (6i32) as u8;
                                                match e {
                                                    Some(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::ResultValue(e) => {
                                                *base.add(0).cast::<u8>() = (7i32) as u8;
                                                match e {
                                                    Ok(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    Err(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                };
                                            }
                                            WitNode::PrimU8(e) => {
                                                *base.add(0).cast::<u8>() = (8i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimU16(e) => {
                                                *base.add(0).cast::<u8>() = (9i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimU32(e) => {
                                                *base.add(0).cast::<u8>() = (10i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimU64(e) => {
                                                *base.add(0).cast::<u8>() = (11i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimS8(e) => {
                                                *base.add(0).cast::<u8>() = (12i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimS16(e) => {
                                                *base.add(0).cast::<u8>() = (13i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimS32(e) => {
                                                *base.add(0).cast::<u8>() = (14i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimS64(e) => {
                                                *base.add(0).cast::<u8>() = (15i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimFloat32(e) => {
                                                *base.add(0).cast::<u8>() = (16i32) as u8;
                                                *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            WitNode::PrimFloat64(e) => {
                                                *base.add(0).cast::<u8>() = (17i32) as u8;
                                                *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            WitNode::PrimChar(e) => {
                                                *base.add(0).cast::<u8>() = (18i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimBool(e) => {
                                                *base.add(0).cast::<u8>() = (19i32) as u8;
                                                *base.add(8).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                            WitNode::PrimString(e) => {
                                                *base.add(0).cast::<u8>() = (20i32) as u8;
                                                let vec7 = e;
                                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                                let len7 = vec7.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len7;
                                                *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                            }
                                            WitNode::Handle(e) => {
                                                *base.add(0).cast::<u8>() = (21i32) as u8;
                                                let (t8_0, t8_1) = e;
                                                let Uri { value: value9 } = t8_0;
                                                let vec10 = value9;
                                                let ptr10 = vec10.as_ptr().cast::<u8>();
                                                let len10 = vec10.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len10;
                                                *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                                *base
                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<i64>() = _rt::as_i64(t8_1);
                                            }
                                        }
                                    }
                                }
                                *base
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<usize>() = len11;
                                *base.add(0).cast::<*mut u8>() = result11;
                                cleanup_list.extend_from_slice(&[(result11, layout11)]);
                            }
                        }
                        let ptr13 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[method]wasm-rpc.invoke"]
                            fn wit_import14(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import14(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import14(
                                (self).handle() as i32,
                                ptr0.cast_mut(),
                                len0,
                                result12,
                                len12,
                                ptr13,
                            )
                        };
                        let l15 = i32::from(*ptr13.add(0).cast::<u8>());
                        let result30 = match l15 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l16 = i32::from(
                                        *ptr13.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                    );
                                    let v29 = match l16 {
                                        0 => {
                                            let e29 = {
                                                let l17 = *ptr13
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l18 = *ptr13
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len19 = l18;
                                                let bytes19 = _rt::Vec::from_raw_parts(
                                                    l17.cast(),
                                                    len19,
                                                    len19,
                                                );
                                                _rt::string_lift(bytes19)
                                            };
                                            RpcError::ProtocolError(e29)
                                        }
                                        1 => {
                                            let e29 = {
                                                let l20 = *ptr13
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l21 = *ptr13
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len22 = l21;
                                                let bytes22 = _rt::Vec::from_raw_parts(
                                                    l20.cast(),
                                                    len22,
                                                    len22,
                                                );
                                                _rt::string_lift(bytes22)
                                            };
                                            RpcError::Denied(e29)
                                        }
                                        2 => {
                                            let e29 = {
                                                let l23 = *ptr13
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l24 = *ptr13
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len25 = l24;
                                                let bytes25 = _rt::Vec::from_raw_parts(
                                                    l23.cast(),
                                                    len25,
                                                    len25,
                                                );
                                                _rt::string_lift(bytes25)
                                            };
                                            RpcError::NotFound(e29)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 3, "invalid enum discriminant");
                                            let e29 = {
                                                let l26 = *ptr13
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l27 = *ptr13
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len28 = l27;
                                                let bytes28 = _rt::Vec::from_raw_parts(
                                                    l26.cast(),
                                                    len28,
                                                    len28,
                                                );
                                                _rt::string_lift(bytes28)
                                            };
                                            RpcError::RemoteInternalError(e29)
                                        }
                                    };
                                    v29
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        if layout12.size() != 0 {
                            _rt::alloc::dealloc(result12.cast(), layout12);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        result30
                    }
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                /// Invokes a remote function with the given parameters, and returns a `future-invoke-result` value which can
                /// be polled for the result.
                ///
                /// With this function it is possible to call multiple (different) agents simultaneously.
                pub fn async_invoke_and_await(
                    &self,
                    function_name: &str,
                    function_params: &[WitValue],
                ) -> FutureInvokeResult {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        let vec0 = function_name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec12 = function_params;
                        let len12 = vec12.len();
                        let layout12 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec12.len() * (2 * ::core::mem::size_of::<*const u8>()),
                            ::core::mem::size_of::<*const u8>(),
                        );
                        let result12 = if layout12.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout12);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec12.into_iter().enumerate() {
                            let base = result12
                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                            {
                                let WitValue { nodes: nodes1 } = e;
                                let vec11 = nodes1;
                                let len11 = vec11.len();
                                let layout11 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec11.len()
                                        * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                    8,
                                );
                                let result11 = if layout11.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout11);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec11.into_iter().enumerate() {
                                    let base = result11
                                        .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                    {
                                        match e {
                                            WitNode::RecordValue(e) => {
                                                *base.add(0).cast::<u8>() = (0i32) as u8;
                                                let vec2 = e;
                                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                                let len2 = vec2.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len2;
                                                *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                            }
                                            WitNode::VariantValue(e) => {
                                                *base.add(0).cast::<u8>() = (1i32) as u8;
                                                let (t3_0, t3_1) = e;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(t3_0);
                                                match t3_1 {
                                                    Some(e) => {
                                                        *base.add(12).cast::<u8>() = (1i32) as u8;
                                                        *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(12).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::EnumValue(e) => {
                                                *base.add(0).cast::<u8>() = (2i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::FlagsValue(e) => {
                                                *base.add(0).cast::<u8>() = (3i32) as u8;
                                                let vec4 = e;
                                                let len4 = vec4.len();
                                                let layout4 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec4.len() * 1,
                                                    1,
                                                );
                                                let result4 = if layout4.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout4).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout4);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec4.into_iter().enumerate() {
                                                    let base = result4.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        }) as u8;
                                                    }
                                                }
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len4;
                                                *base.add(8).cast::<*mut u8>() = result4;
                                                cleanup_list.extend_from_slice(&[(result4, layout4)]);
                                            }
                                            WitNode::TupleValue(e) => {
                                                *base.add(0).cast::<u8>() = (4i32) as u8;
                                                let vec5 = e;
                                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                                let len5 = vec5.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len5;
                                                *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                            }
                                            WitNode::ListValue(e) => {
                                                *base.add(0).cast::<u8>() = (5i32) as u8;
                                                let vec6 = e;
                                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                                let len6 = vec6.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len6;
                                                *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                            }
                                            WitNode::OptionValue(e) => {
                                                *base.add(0).cast::<u8>() = (6i32) as u8;
                                                match e {
                                                    Some(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::ResultValue(e) => {
                                                *base.add(0).cast::<u8>() = (7i32) as u8;
                                                match e {
                                                    Ok(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    Err(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                };
                                            }
                                            WitNode::PrimU8(e) => {
                                                *base.add(0).cast::<u8>() = (8i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimU16(e) => {
                                                *base.add(0).cast::<u8>() = (9i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimU32(e) => {
                                                *base.add(0).cast::<u8>() = (10i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimU64(e) => {
                                                *base.add(0).cast::<u8>() = (11i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimS8(e) => {
                                                *base.add(0).cast::<u8>() = (12i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimS16(e) => {
                                                *base.add(0).cast::<u8>() = (13i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimS32(e) => {
                                                *base.add(0).cast::<u8>() = (14i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimS64(e) => {
                                                *base.add(0).cast::<u8>() = (15i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimFloat32(e) => {
                                                *base.add(0).cast::<u8>() = (16i32) as u8;
                                                *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            WitNode::PrimFloat64(e) => {
                                                *base.add(0).cast::<u8>() = (17i32) as u8;
                                                *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            WitNode::PrimChar(e) => {
                                                *base.add(0).cast::<u8>() = (18i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimBool(e) => {
                                                *base.add(0).cast::<u8>() = (19i32) as u8;
                                                *base.add(8).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                            WitNode::PrimString(e) => {
                                                *base.add(0).cast::<u8>() = (20i32) as u8;
                                                let vec7 = e;
                                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                                let len7 = vec7.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len7;
                                                *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                            }
                                            WitNode::Handle(e) => {
                                                *base.add(0).cast::<u8>() = (21i32) as u8;
                                                let (t8_0, t8_1) = e;
                                                let Uri { value: value9 } = t8_0;
                                                let vec10 = value9;
                                                let ptr10 = vec10.as_ptr().cast::<u8>();
                                                let len10 = vec10.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len10;
                                                *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                                *base
                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<i64>() = _rt::as_i64(t8_1);
                                            }
                                        }
                                    }
                                }
                                *base
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<usize>() = len11;
                                *base.add(0).cast::<*mut u8>() = result11;
                                cleanup_list.extend_from_slice(&[(result11, layout11)]);
                            }
                        }
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[method]wasm-rpc.async-invoke-and-await"]
                            fn wit_import13(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                            ) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import13(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe {
                            wit_import13(
                                (self).handle() as i32,
                                ptr0.cast_mut(),
                                len0,
                                result12,
                                len12,
                            )
                        };
                        if layout12.size() != 0 {
                            _rt::alloc::dealloc(result12.cast(), layout12);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        unsafe { FutureInvokeResult::from_handle(ret as u32) }
                    }
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                /// Schedule invocation for later
                pub fn schedule_invocation(
                    &self,
                    scheduled_time: Datetime,
                    function_name: &str,
                    function_params: &[WitValue],
                ) -> () {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        let super::super::super::wasi::clocks::wall_clock::Datetime {
                            seconds: seconds0,
                            nanoseconds: nanoseconds0,
                        } = scheduled_time;
                        let vec1 = function_name;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        let vec13 = function_params;
                        let len13 = vec13.len();
                        let layout13 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec13.len() * (2 * ::core::mem::size_of::<*const u8>()),
                            ::core::mem::size_of::<*const u8>(),
                        );
                        let result13 = if layout13.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout13).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout13);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec13.into_iter().enumerate() {
                            let base = result13
                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                            {
                                let WitValue { nodes: nodes2 } = e;
                                let vec12 = nodes2;
                                let len12 = vec12.len();
                                let layout12 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec12.len()
                                        * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                    8,
                                );
                                let result12 = if layout12.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout12);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec12.into_iter().enumerate() {
                                    let base = result12
                                        .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                    {
                                        match e {
                                            WitNode::RecordValue(e) => {
                                                *base.add(0).cast::<u8>() = (0i32) as u8;
                                                let vec3 = e;
                                                let ptr3 = vec3.as_ptr().cast::<u8>();
                                                let len3 = vec3.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len3;
                                                *base.add(8).cast::<*mut u8>() = ptr3.cast_mut();
                                            }
                                            WitNode::VariantValue(e) => {
                                                *base.add(0).cast::<u8>() = (1i32) as u8;
                                                let (t4_0, t4_1) = e;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(t4_0);
                                                match t4_1 {
                                                    Some(e) => {
                                                        *base.add(12).cast::<u8>() = (1i32) as u8;
                                                        *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(12).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::EnumValue(e) => {
                                                *base.add(0).cast::<u8>() = (2i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::FlagsValue(e) => {
                                                *base.add(0).cast::<u8>() = (3i32) as u8;
                                                let vec5 = e;
                                                let len5 = vec5.len();
                                                let layout5 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec5.len() * 1,
                                                    1,
                                                );
                                                let result5 = if layout5.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout5).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout5);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec5.into_iter().enumerate() {
                                                    let base = result5.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        }) as u8;
                                                    }
                                                }
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len5;
                                                *base.add(8).cast::<*mut u8>() = result5;
                                                cleanup_list.extend_from_slice(&[(result5, layout5)]);
                                            }
                                            WitNode::TupleValue(e) => {
                                                *base.add(0).cast::<u8>() = (4i32) as u8;
                                                let vec6 = e;
                                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                                let len6 = vec6.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len6;
                                                *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                            }
                                            WitNode::ListValue(e) => {
                                                *base.add(0).cast::<u8>() = (5i32) as u8;
                                                let vec7 = e;
                                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                                let len7 = vec7.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len7;
                                                *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                            }
                                            WitNode::OptionValue(e) => {
                                                *base.add(0).cast::<u8>() = (6i32) as u8;
                                                match e {
                                                    Some(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::ResultValue(e) => {
                                                *base.add(0).cast::<u8>() = (7i32) as u8;
                                                match e {
                                                    Ok(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    Err(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                };
                                            }
                                            WitNode::PrimU8(e) => {
                                                *base.add(0).cast::<u8>() = (8i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimU16(e) => {
                                                *base.add(0).cast::<u8>() = (9i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimU32(e) => {
                                                *base.add(0).cast::<u8>() = (10i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimU64(e) => {
                                                *base.add(0).cast::<u8>() = (11i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimS8(e) => {
                                                *base.add(0).cast::<u8>() = (12i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimS16(e) => {
                                                *base.add(0).cast::<u8>() = (13i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimS32(e) => {
                                                *base.add(0).cast::<u8>() = (14i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimS64(e) => {
                                                *base.add(0).cast::<u8>() = (15i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimFloat32(e) => {
                                                *base.add(0).cast::<u8>() = (16i32) as u8;
                                                *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            WitNode::PrimFloat64(e) => {
                                                *base.add(0).cast::<u8>() = (17i32) as u8;
                                                *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            WitNode::PrimChar(e) => {
                                                *base.add(0).cast::<u8>() = (18i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimBool(e) => {
                                                *base.add(0).cast::<u8>() = (19i32) as u8;
                                                *base.add(8).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                            WitNode::PrimString(e) => {
                                                *base.add(0).cast::<u8>() = (20i32) as u8;
                                                let vec8 = e;
                                                let ptr8 = vec8.as_ptr().cast::<u8>();
                                                let len8 = vec8.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len8;
                                                *base.add(8).cast::<*mut u8>() = ptr8.cast_mut();
                                            }
                                            WitNode::Handle(e) => {
                                                *base.add(0).cast::<u8>() = (21i32) as u8;
                                                let (t9_0, t9_1) = e;
                                                let Uri { value: value10 } = t9_0;
                                                let vec11 = value10;
                                                let ptr11 = vec11.as_ptr().cast::<u8>();
                                                let len11 = vec11.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len11;
                                                *base.add(8).cast::<*mut u8>() = ptr11.cast_mut();
                                                *base
                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<i64>() = _rt::as_i64(t9_1);
                                            }
                                        }
                                    }
                                }
                                *base
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<usize>() = len12;
                                *base.add(0).cast::<*mut u8>() = result12;
                                cleanup_list.extend_from_slice(&[(result12, layout12)]);
                            }
                        }
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[method]wasm-rpc.schedule-invocation"]
                            fn wit_import14(
                                _: i32,
                                _: i64,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import14(
                            _: i32,
                            _: i64,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                        ) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import14(
                                (self).handle() as i32,
                                _rt::as_i64(seconds0),
                                _rt::as_i32(nanoseconds0),
                                ptr1.cast_mut(),
                                len1,
                                result13,
                                len13,
                            )
                        };
                        if layout13.size() != 0 {
                            _rt::alloc::dealloc(result13.cast(), layout13);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                    }
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                /// Schedule invocation for later. Call cancel on the returned resource to cancel the invocation before the scheduled time.
                pub fn schedule_cancelable_invocation(
                    &self,
                    scheduled_time: Datetime,
                    function_name: &str,
                    function_params: &[WitValue],
                ) -> CancellationToken {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        let super::super::super::wasi::clocks::wall_clock::Datetime {
                            seconds: seconds0,
                            nanoseconds: nanoseconds0,
                        } = scheduled_time;
                        let vec1 = function_name;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        let vec13 = function_params;
                        let len13 = vec13.len();
                        let layout13 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec13.len() * (2 * ::core::mem::size_of::<*const u8>()),
                            ::core::mem::size_of::<*const u8>(),
                        );
                        let result13 = if layout13.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout13).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout13);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec13.into_iter().enumerate() {
                            let base = result13
                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                            {
                                let WitValue { nodes: nodes2 } = e;
                                let vec12 = nodes2;
                                let len12 = vec12.len();
                                let layout12 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec12.len()
                                        * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                    8,
                                );
                                let result12 = if layout12.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout12);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec12.into_iter().enumerate() {
                                    let base = result12
                                        .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                    {
                                        match e {
                                            WitNode::RecordValue(e) => {
                                                *base.add(0).cast::<u8>() = (0i32) as u8;
                                                let vec3 = e;
                                                let ptr3 = vec3.as_ptr().cast::<u8>();
                                                let len3 = vec3.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len3;
                                                *base.add(8).cast::<*mut u8>() = ptr3.cast_mut();
                                            }
                                            WitNode::VariantValue(e) => {
                                                *base.add(0).cast::<u8>() = (1i32) as u8;
                                                let (t4_0, t4_1) = e;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(t4_0);
                                                match t4_1 {
                                                    Some(e) => {
                                                        *base.add(12).cast::<u8>() = (1i32) as u8;
                                                        *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(12).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::EnumValue(e) => {
                                                *base.add(0).cast::<u8>() = (2i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::FlagsValue(e) => {
                                                *base.add(0).cast::<u8>() = (3i32) as u8;
                                                let vec5 = e;
                                                let len5 = vec5.len();
                                                let layout5 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec5.len() * 1,
                                                    1,
                                                );
                                                let result5 = if layout5.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout5).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout5);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec5.into_iter().enumerate() {
                                                    let base = result5.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        }) as u8;
                                                    }
                                                }
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len5;
                                                *base.add(8).cast::<*mut u8>() = result5;
                                                cleanup_list.extend_from_slice(&[(result5, layout5)]);
                                            }
                                            WitNode::TupleValue(e) => {
                                                *base.add(0).cast::<u8>() = (4i32) as u8;
                                                let vec6 = e;
                                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                                let len6 = vec6.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len6;
                                                *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                            }
                                            WitNode::ListValue(e) => {
                                                *base.add(0).cast::<u8>() = (5i32) as u8;
                                                let vec7 = e;
                                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                                let len7 = vec7.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len7;
                                                *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                            }
                                            WitNode::OptionValue(e) => {
                                                *base.add(0).cast::<u8>() = (6i32) as u8;
                                                match e {
                                                    Some(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::ResultValue(e) => {
                                                *base.add(0).cast::<u8>() = (7i32) as u8;
                                                match e {
                                                    Ok(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    Err(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                };
                                            }
                                            WitNode::PrimU8(e) => {
                                                *base.add(0).cast::<u8>() = (8i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimU16(e) => {
                                                *base.add(0).cast::<u8>() = (9i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimU32(e) => {
                                                *base.add(0).cast::<u8>() = (10i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimU64(e) => {
                                                *base.add(0).cast::<u8>() = (11i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimS8(e) => {
                                                *base.add(0).cast::<u8>() = (12i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimS16(e) => {
                                                *base.add(0).cast::<u8>() = (13i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimS32(e) => {
                                                *base.add(0).cast::<u8>() = (14i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimS64(e) => {
                                                *base.add(0).cast::<u8>() = (15i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimFloat32(e) => {
                                                *base.add(0).cast::<u8>() = (16i32) as u8;
                                                *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            WitNode::PrimFloat64(e) => {
                                                *base.add(0).cast::<u8>() = (17i32) as u8;
                                                *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            WitNode::PrimChar(e) => {
                                                *base.add(0).cast::<u8>() = (18i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimBool(e) => {
                                                *base.add(0).cast::<u8>() = (19i32) as u8;
                                                *base.add(8).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                            WitNode::PrimString(e) => {
                                                *base.add(0).cast::<u8>() = (20i32) as u8;
                                                let vec8 = e;
                                                let ptr8 = vec8.as_ptr().cast::<u8>();
                                                let len8 = vec8.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len8;
                                                *base.add(8).cast::<*mut u8>() = ptr8.cast_mut();
                                            }
                                            WitNode::Handle(e) => {
                                                *base.add(0).cast::<u8>() = (21i32) as u8;
                                                let (t9_0, t9_1) = e;
                                                let Uri { value: value10 } = t9_0;
                                                let vec11 = value10;
                                                let ptr11 = vec11.as_ptr().cast::<u8>();
                                                let len11 = vec11.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len11;
                                                *base.add(8).cast::<*mut u8>() = ptr11.cast_mut();
                                                *base
                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<i64>() = _rt::as_i64(t9_1);
                                            }
                                        }
                                    }
                                }
                                *base
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<usize>() = len12;
                                *base.add(0).cast::<*mut u8>() = result12;
                                cleanup_list.extend_from_slice(&[(result12, layout12)]);
                            }
                        }
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[method]wasm-rpc.schedule-cancelable-invocation"]
                            fn wit_import14(
                                _: i32,
                                _: i64,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                            ) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import14(
                            _: i32,
                            _: i64,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe {
                            wit_import14(
                                (self).handle() as i32,
                                _rt::as_i64(seconds0),
                                _rt::as_i32(nanoseconds0),
                                ptr1.cast_mut(),
                                len1,
                                result13,
                                len13,
                            )
                        };
                        if layout13.size() != 0 {
                            _rt::alloc::dealloc(result13.cast(), layout13);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        unsafe { CancellationToken::from_handle(ret as u32) }
                    }
                }
            }
            impl FutureInvokeResult {
                #[allow(unused_unsafe, clippy::all)]
                /// Subscribes to the result of the invocation
                pub fn subscribe(&self) -> Pollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[method]future-invoke-result.subscribe"]
                            fn wit_import0(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe { wit_import0((self).handle() as i32) };
                        unsafe {
                            super::super::super::wasi::io::poll::Pollable::from_handle(
                                ret as u32,
                            )
                        }
                    }
                }
            }
            impl FutureInvokeResult {
                #[allow(unused_unsafe, clippy::all)]
                /// Poll for the invocation. If the invocation has not completed yet, returns `none`.
                pub fn get(&self) -> Option<Result<WitValue, RpcError>> {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 5 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 5
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[method]future-invoke-result.get"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result66 = match l2 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l3 = i32::from(
                                        *ptr0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                    );
                                    match l3 {
                                        0 => {
                                            let e = {
                                                let l4 = *ptr0
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l5 = *ptr0
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let base51 = l4;
                                                let len51 = l5;
                                                let mut result51 = _rt::Vec::with_capacity(len51);
                                                for i in 0..len51 {
                                                    let base = base51
                                                        .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                    let e51 = {
                                                        let l6 = i32::from(*base.add(0).cast::<u8>());
                                                        let v50 = match l6 {
                                                            0 => {
                                                                let e50 = {
                                                                    let l7 = *base.add(8).cast::<*mut u8>();
                                                                    let l8 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len9 = l8;
                                                                    _rt::Vec::from_raw_parts(l7.cast(), len9, len9)
                                                                };
                                                                WitNode::RecordValue(e50)
                                                            }
                                                            1 => {
                                                                let e50 = {
                                                                    let l10 = *base.add(8).cast::<i32>();
                                                                    let l11 = i32::from(*base.add(12).cast::<u8>());
                                                                    (
                                                                        l10 as u32,
                                                                        match l11 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l12 = *base.add(16).cast::<i32>();
                                                                                    l12
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    )
                                                                };
                                                                WitNode::VariantValue(e50)
                                                            }
                                                            2 => {
                                                                let e50 = {
                                                                    let l13 = *base.add(8).cast::<i32>();
                                                                    l13 as u32
                                                                };
                                                                WitNode::EnumValue(e50)
                                                            }
                                                            3 => {
                                                                let e50 = {
                                                                    let l14 = *base.add(8).cast::<*mut u8>();
                                                                    let l15 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base17 = l14;
                                                                    let len17 = l15;
                                                                    let mut result17 = _rt::Vec::with_capacity(len17);
                                                                    for i in 0..len17 {
                                                                        let base = base17.add(i * 1);
                                                                        let e17 = {
                                                                            let l16 = i32::from(*base.add(0).cast::<u8>());
                                                                            _rt::bool_lift(l16 as u8)
                                                                        };
                                                                        result17.push(e17);
                                                                    }
                                                                    _rt::cabi_dealloc(base17, len17 * 1, 1);
                                                                    result17
                                                                };
                                                                WitNode::FlagsValue(e50)
                                                            }
                                                            4 => {
                                                                let e50 = {
                                                                    let l18 = *base.add(8).cast::<*mut u8>();
                                                                    let l19 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len20 = l19;
                                                                    _rt::Vec::from_raw_parts(l18.cast(), len20, len20)
                                                                };
                                                                WitNode::TupleValue(e50)
                                                            }
                                                            5 => {
                                                                let e50 = {
                                                                    let l21 = *base.add(8).cast::<*mut u8>();
                                                                    let l22 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len23 = l22;
                                                                    _rt::Vec::from_raw_parts(l21.cast(), len23, len23)
                                                                };
                                                                WitNode::ListValue(e50)
                                                            }
                                                            6 => {
                                                                let e50 = {
                                                                    let l24 = i32::from(*base.add(8).cast::<u8>());
                                                                    match l24 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l25 = *base.add(12).cast::<i32>();
                                                                                l25
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                WitNode::OptionValue(e50)
                                                            }
                                                            7 => {
                                                                let e50 = {
                                                                    let l26 = i32::from(*base.add(8).cast::<u8>());
                                                                    match l26 {
                                                                        0 => {
                                                                            let e = {
                                                                                let l27 = i32::from(*base.add(12).cast::<u8>());
                                                                                match l27 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l28 = *base.add(16).cast::<i32>();
                                                                                            l28
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                }
                                                                            };
                                                                            Ok(e)
                                                                        }
                                                                        1 => {
                                                                            let e = {
                                                                                let l29 = i32::from(*base.add(12).cast::<u8>());
                                                                                match l29 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l30 = *base.add(16).cast::<i32>();
                                                                                            l30
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                }
                                                                            };
                                                                            Err(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                WitNode::ResultValue(e50)
                                                            }
                                                            8 => {
                                                                let e50 = {
                                                                    let l31 = i32::from(*base.add(8).cast::<u8>());
                                                                    l31 as u8
                                                                };
                                                                WitNode::PrimU8(e50)
                                                            }
                                                            9 => {
                                                                let e50 = {
                                                                    let l32 = i32::from(*base.add(8).cast::<u16>());
                                                                    l32 as u16
                                                                };
                                                                WitNode::PrimU16(e50)
                                                            }
                                                            10 => {
                                                                let e50 = {
                                                                    let l33 = *base.add(8).cast::<i32>();
                                                                    l33 as u32
                                                                };
                                                                WitNode::PrimU32(e50)
                                                            }
                                                            11 => {
                                                                let e50 = {
                                                                    let l34 = *base.add(8).cast::<i64>();
                                                                    l34 as u64
                                                                };
                                                                WitNode::PrimU64(e50)
                                                            }
                                                            12 => {
                                                                let e50 = {
                                                                    let l35 = i32::from(*base.add(8).cast::<i8>());
                                                                    l35 as i8
                                                                };
                                                                WitNode::PrimS8(e50)
                                                            }
                                                            13 => {
                                                                let e50 = {
                                                                    let l36 = i32::from(*base.add(8).cast::<i16>());
                                                                    l36 as i16
                                                                };
                                                                WitNode::PrimS16(e50)
                                                            }
                                                            14 => {
                                                                let e50 = {
                                                                    let l37 = *base.add(8).cast::<i32>();
                                                                    l37
                                                                };
                                                                WitNode::PrimS32(e50)
                                                            }
                                                            15 => {
                                                                let e50 = {
                                                                    let l38 = *base.add(8).cast::<i64>();
                                                                    l38
                                                                };
                                                                WitNode::PrimS64(e50)
                                                            }
                                                            16 => {
                                                                let e50 = {
                                                                    let l39 = *base.add(8).cast::<f32>();
                                                                    l39
                                                                };
                                                                WitNode::PrimFloat32(e50)
                                                            }
                                                            17 => {
                                                                let e50 = {
                                                                    let l40 = *base.add(8).cast::<f64>();
                                                                    l40
                                                                };
                                                                WitNode::PrimFloat64(e50)
                                                            }
                                                            18 => {
                                                                let e50 = {
                                                                    let l41 = *base.add(8).cast::<i32>();
                                                                    _rt::char_lift(l41 as u32)
                                                                };
                                                                WitNode::PrimChar(e50)
                                                            }
                                                            19 => {
                                                                let e50 = {
                                                                    let l42 = i32::from(*base.add(8).cast::<u8>());
                                                                    _rt::bool_lift(l42 as u8)
                                                                };
                                                                WitNode::PrimBool(e50)
                                                            }
                                                            20 => {
                                                                let e50 = {
                                                                    let l43 = *base.add(8).cast::<*mut u8>();
                                                                    let l44 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len45 = l44;
                                                                    let bytes45 = _rt::Vec::from_raw_parts(
                                                                        l43.cast(),
                                                                        len45,
                                                                        len45,
                                                                    );
                                                                    _rt::string_lift(bytes45)
                                                                };
                                                                WitNode::PrimString(e50)
                                                            }
                                                            n => {
                                                                debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                let e50 = {
                                                                    let l46 = *base.add(8).cast::<*mut u8>();
                                                                    let l47 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len48 = l47;
                                                                    let bytes48 = _rt::Vec::from_raw_parts(
                                                                        l46.cast(),
                                                                        len48,
                                                                        len48,
                                                                    );
                                                                    let l49 = *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i64>();
                                                                    (
                                                                        Uri {
                                                                            value: _rt::string_lift(bytes48),
                                                                        },
                                                                        l49 as u64,
                                                                    )
                                                                };
                                                                WitNode::Handle(e50)
                                                            }
                                                        };
                                                        v50
                                                    };
                                                    result51.push(e51);
                                                }
                                                _rt::cabi_dealloc(
                                                    base51,
                                                    len51 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                    8,
                                                );
                                                WitValue { nodes: result51 }
                                            };
                                            Ok(e)
                                        }
                                        1 => {
                                            let e = {
                                                let l52 = i32::from(
                                                    *ptr0
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                let v65 = match l52 {
                                                    0 => {
                                                        let e65 = {
                                                            let l53 = *ptr0
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l54 = *ptr0
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len55 = l54;
                                                            let bytes55 = _rt::Vec::from_raw_parts(
                                                                l53.cast(),
                                                                len55,
                                                                len55,
                                                            );
                                                            _rt::string_lift(bytes55)
                                                        };
                                                        RpcError::ProtocolError(e65)
                                                    }
                                                    1 => {
                                                        let e65 = {
                                                            let l56 = *ptr0
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l57 = *ptr0
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len58 = l57;
                                                            let bytes58 = _rt::Vec::from_raw_parts(
                                                                l56.cast(),
                                                                len58,
                                                                len58,
                                                            );
                                                            _rt::string_lift(bytes58)
                                                        };
                                                        RpcError::Denied(e65)
                                                    }
                                                    2 => {
                                                        let e65 = {
                                                            let l59 = *ptr0
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l60 = *ptr0
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len61 = l60;
                                                            let bytes61 = _rt::Vec::from_raw_parts(
                                                                l59.cast(),
                                                                len61,
                                                                len61,
                                                            );
                                                            _rt::string_lift(bytes61)
                                                        };
                                                        RpcError::NotFound(e65)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 3, "invalid enum discriminant");
                                                        let e65 = {
                                                            let l62 = *ptr0
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l63 = *ptr0
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len64 = l63;
                                                            let bytes64 = _rt::Vec::from_raw_parts(
                                                                l62.cast(),
                                                                len64,
                                                                len64,
                                                            );
                                                            _rt::string_lift(bytes64)
                                                        };
                                                        RpcError::RemoteInternalError(e65)
                                                    }
                                                };
                                                v65
                                            };
                                            Err(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result66
                    }
                }
            }
            impl CancellationToken {
                #[allow(unused_unsafe, clippy::all)]
                /// Cancel the scheduled invocation
                pub fn cancel(&self) -> () {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[method]cancellation-token.cancel"]
                            fn wit_import0(_: i32);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) {
                            unreachable!()
                        }
                        unsafe { wit_import0((self).handle() as i32) };
                    }
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod wasi {
    pub mod clocks {
        /// WASI Monotonic Clock is a clock API intended to let users measure elapsed
        /// time.
        ///
        /// It is intended to be portable at least between Unix-family platforms and
        /// Windows.
        ///
        /// A monotonic clock is a clock which has an unspecified initial value, and
        /// successive reads of the clock will produce non-decreasing values.
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod monotonic_clock {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Pollable = super::super::super::wasi::io::poll::Pollable;
            /// An instant in time, in nanoseconds. An instant is relative to an
            /// unspecified initial value, and can only be compared to instances from
            /// the same monotonic-clock.
            pub type Instant = u64;
            /// A duration of time, in nanoseconds.
            pub type Duration = u64;
            #[allow(unused_unsafe, clippy::all)]
            /// Read the current value of the clock.
            ///
            /// The clock is monotonic, therefore calling this function repeatedly will
            /// produce a sequence of non-decreasing values.
            pub fn now() -> Instant {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/monotonic-clock@0.2.3")]
                    unsafe extern "C" {
                        #[link_name = "now"]
                        fn wit_import0() -> i64;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0() -> i64 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0() };
                    ret as u64
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Query the resolution of the clock. Returns the duration of time
            /// corresponding to a clock tick.
            pub fn resolution() -> Duration {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/monotonic-clock@0.2.3")]
                    unsafe extern "C" {
                        #[link_name = "resolution"]
                        fn wit_import0() -> i64;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0() -> i64 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0() };
                    ret as u64
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Create a `pollable` which will resolve once the specified instant
            /// has occurred.
            pub fn subscribe_instant(when: Instant) -> Pollable {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/monotonic-clock@0.2.3")]
                    unsafe extern "C" {
                        #[link_name = "subscribe-instant"]
                        fn wit_import0(_: i64) -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: i64) -> i32 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0(_rt::as_i64(when)) };
                    unsafe {
                        super::super::super::wasi::io::poll::Pollable::from_handle(
                            ret as u32,
                        )
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Create a `pollable` that will resolve after the specified duration has
            /// elapsed from the time this function is invoked.
            pub fn subscribe_duration(when: Duration) -> Pollable {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/monotonic-clock@0.2.3")]
                    unsafe extern "C" {
                        #[link_name = "subscribe-duration"]
                        fn wit_import0(_: i64) -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: i64) -> i32 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0(_rt::as_i64(when)) };
                    unsafe {
                        super::super::super::wasi::io::poll::Pollable::from_handle(
                            ret as u32,
                        )
                    }
                }
            }
        }
        /// WASI Wall Clock is a clock API intended to let users query the current
        /// time. The name "wall" makes an analogy to a "clock on the wall", which
        /// is not necessarily monotonic as it may be reset.
        ///
        /// It is intended to be portable at least between Unix-family platforms and
        /// Windows.
        ///
        /// A wall clock is a clock which measures the date and time according to
        /// some external reference.
        ///
        /// External references may be reset, so this clock is not necessarily
        /// monotonic, making it unsuitable for measuring elapsed time.
        ///
        /// It is intended for reporting the current date and time for humans.
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod wall_clock {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            /// A time and date in seconds plus nanoseconds.
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Datetime {
                pub seconds: u64,
                pub nanoseconds: u32,
            }
            impl ::core::fmt::Debug for Datetime {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Datetime")
                        .field("seconds", &self.seconds)
                        .field("nanoseconds", &self.nanoseconds)
                        .finish()
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Read the current value of the clock.
            ///
            /// This clock is not monotonic, therefore calling this function repeatedly
            /// will not necessarily produce a sequence of non-decreasing values.
            ///
            /// The returned timestamps represent the number of seconds since
            /// 1970-01-01T00:00:00Z, also known as [POSIX's Seconds Since the Epoch],
            /// also known as [Unix Time].
            ///
            /// The nanoseconds field of the output is always less than 1000000000.
            ///
            /// [POSIX's Seconds Since the Epoch]: https://pubs.opengroup.org/onlinepubs/9699919799/xrat/V4_xbd_chap04.html#tag_21_04_16
            /// [Unix Time]: https://en.wikipedia.org/wiki/Unix_time
            pub fn now() -> Datetime {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/wall-clock@0.2.3")]
                    unsafe extern "C" {
                        #[link_name = "now"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = *ptr0.add(0).cast::<i64>();
                    let l3 = *ptr0.add(8).cast::<i32>();
                    let result4 = Datetime {
                        seconds: l2 as u64,
                        nanoseconds: l3 as u32,
                    };
                    result4
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Query the resolution of the clock.
            ///
            /// The nanoseconds field of the output is always less than 1000000000.
            pub fn resolution() -> Datetime {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/wall-clock@0.2.3")]
                    unsafe extern "C" {
                        #[link_name = "resolution"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = *ptr0.add(0).cast::<i64>();
                    let l3 = *ptr0.add(8).cast::<i32>();
                    let result4 = Datetime {
                        seconds: l2 as u64,
                        nanoseconds: l3 as u32,
                    };
                    result4
                }
            }
        }
    }
    pub mod io {
        /// A poll API intended to let users wait for I/O events on multiple handles
        /// at once.
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod poll {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// `pollable` represents a single I/O event which may be ready, or not.
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Pollable {
                handle: _rt::Resource<Pollable>,
            }
            impl Pollable {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for Pollable {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:io/poll@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]pollable"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            impl Pollable {
                #[allow(unused_unsafe, clippy::all)]
                /// Return the readiness of a pollable. This function never blocks.
                ///
                /// Returns `true` when the pollable is ready, and `false` otherwise.
                pub fn ready(&self) -> bool {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/poll@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]pollable.ready"]
                            fn wit_import0(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe { wit_import0((self).handle() as i32) };
                        _rt::bool_lift(ret as u8)
                    }
                }
            }
            impl Pollable {
                #[allow(unused_unsafe, clippy::all)]
                /// `block` returns immediately if the pollable is ready, and otherwise
                /// blocks until ready.
                ///
                /// This function is equivalent to calling `poll.poll` on a list
                /// containing only this pollable.
                pub fn block(&self) -> () {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/poll@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]pollable.block"]
                            fn wit_import0(_: i32);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) {
                            unreachable!()
                        }
                        unsafe { wit_import0((self).handle() as i32) };
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Poll for completion on a set of pollables.
            ///
            /// This function takes a list of pollables, which identify I/O sources of
            /// interest, and waits until one or more of the events is ready for I/O.
            ///
            /// The result `list<u32>` contains one or more indices of handles in the
            /// argument list that is ready for I/O.
            ///
            /// This function traps if either:
            /// - the list is empty, or:
            /// - the list contains more elements than can be indexed with a `u32` value.
            ///
            /// A timeout can be implemented by adding a pollable from the
            /// wasi-clocks API to the list.
            ///
            /// This function does not return a `result`; polling in itself does not
            /// do any I/O so it doesn't fail. If any of the I/O sources identified by
            /// the pollables has an error, it is indicated by marking the source as
            /// being ready for I/O.
            pub fn poll(in_: &[&Pollable]) -> _rt::Vec<u32> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 2
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let vec0 = in_;
                    let len0 = vec0.len();
                    let layout0 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec0.len() * 4,
                        4,
                    );
                    let result0 = if layout0.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout0).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout0);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec0.into_iter().enumerate() {
                        let base = result0.add(i * 4);
                        {
                            *base.add(0).cast::<i32>() = (e).handle() as i32;
                        }
                    }
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:io/poll@0.2.3")]
                    unsafe extern "C" {
                        #[link_name = "poll"]
                        fn wit_import2(_: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import2(result0, len0, ptr1) };
                    let l3 = *ptr1.add(0).cast::<*mut u8>();
                    let l4 = *ptr1
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len5 = l4;
                    let result6 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);
                    if layout0.size() != 0 {
                        _rt::alloc::dealloc(result0.cast(), layout0);
                    }
                    result6
                }
            }
        }
    }
    pub mod sockets {
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod network {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// An opaque resource that represents access to (a subset of) the network.
            /// This enables context-based security for networking.
            /// There is no need for this to map 1:1 to a physical network interface.
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Network {
                handle: _rt::Resource<Network>,
            }
            impl Network {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for Network {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:sockets/network@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]network"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            /// Error codes.
            ///
            /// In theory, every API can return any error code.
            /// In practice, API's typically only return the errors documented per API
            /// combined with a couple of errors that are always possible:
            /// - `unknown`
            /// - `access-denied`
            /// - `not-supported`
            /// - `out-of-memory`
            /// - `concurrency-conflict`
            ///
            /// See each individual API for what the POSIX equivalents are. They sometimes differ per API.
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum ErrorCode {
                /// Unknown error
                Unknown,
                /// Access denied.
                ///
                /// POSIX equivalent: EACCES, EPERM
                AccessDenied,
                /// The operation is not supported.
                ///
                /// POSIX equivalent: EOPNOTSUPP
                NotSupported,
                /// One of the arguments is invalid.
                ///
                /// POSIX equivalent: EINVAL
                InvalidArgument,
                /// Not enough memory to complete the operation.
                ///
                /// POSIX equivalent: ENOMEM, ENOBUFS, EAI_MEMORY
                OutOfMemory,
                /// The operation timed out before it could finish completely.
                Timeout,
                /// This operation is incompatible with another asynchronous operation that is already in progress.
                ///
                /// POSIX equivalent: EALREADY
                ConcurrencyConflict,
                /// Trying to finish an asynchronous operation that:
                /// - has not been started yet, or:
                /// - was already finished by a previous `finish-*` call.
                ///
                /// Note: this is scheduled to be removed when `future`s are natively supported.
                NotInProgress,
                /// The operation has been aborted because it could not be completed immediately.
                ///
                /// Note: this is scheduled to be removed when `future`s are natively supported.
                WouldBlock,
                /// The operation is not valid in the socket's current state.
                InvalidState,
                /// A new socket resource could not be created because of a system limit.
                NewSocketLimit,
                /// A bind operation failed because the provided address is not an address that the `network` can bind to.
                AddressNotBindable,
                /// A bind operation failed because the provided address is already in use or because there are no ephemeral ports available.
                AddressInUse,
                /// The remote address is not reachable
                RemoteUnreachable,
                /// The TCP connection was forcefully rejected
                ConnectionRefused,
                /// The TCP connection was reset.
                ConnectionReset,
                /// A TCP connection was aborted.
                ConnectionAborted,
                /// The size of a datagram sent to a UDP socket exceeded the maximum
                /// supported size.
                DatagramTooLarge,
                /// Name does not exist or has no suitable associated IP addresses.
                NameUnresolvable,
                /// A temporary failure in name resolution occurred.
                TemporaryResolverFailure,
                /// A permanent failure in name resolution occurred.
                PermanentResolverFailure,
            }
            impl ErrorCode {
                pub fn name(&self) -> &'static str {
                    match self {
                        ErrorCode::Unknown => "unknown",
                        ErrorCode::AccessDenied => "access-denied",
                        ErrorCode::NotSupported => "not-supported",
                        ErrorCode::InvalidArgument => "invalid-argument",
                        ErrorCode::OutOfMemory => "out-of-memory",
                        ErrorCode::Timeout => "timeout",
                        ErrorCode::ConcurrencyConflict => "concurrency-conflict",
                        ErrorCode::NotInProgress => "not-in-progress",
                        ErrorCode::WouldBlock => "would-block",
                        ErrorCode::InvalidState => "invalid-state",
                        ErrorCode::NewSocketLimit => "new-socket-limit",
                        ErrorCode::AddressNotBindable => "address-not-bindable",
                        ErrorCode::AddressInUse => "address-in-use",
                        ErrorCode::RemoteUnreachable => "remote-unreachable",
                        ErrorCode::ConnectionRefused => "connection-refused",
                        ErrorCode::ConnectionReset => "connection-reset",
                        ErrorCode::ConnectionAborted => "connection-aborted",
                        ErrorCode::DatagramTooLarge => "datagram-too-large",
                        ErrorCode::NameUnresolvable => "name-unresolvable",
                        ErrorCode::TemporaryResolverFailure => {
                            "temporary-resolver-failure"
                        }
                        ErrorCode::PermanentResolverFailure => {
                            "permanent-resolver-failure"
                        }
                    }
                }
                pub fn message(&self) -> &'static str {
                    match self {
                        ErrorCode::Unknown => "Unknown error",
                        ErrorCode::AccessDenied => {
                            "Access denied.

                                                              POSIX equivalent: EACCES, EPERM"
                        }
                        ErrorCode::NotSupported => {
                            "The operation is not supported.

                                                              POSIX equivalent: EOPNOTSUPP"
                        }
                        ErrorCode::InvalidArgument => {
                            "One of the arguments is invalid.

                                                              POSIX equivalent: EINVAL"
                        }
                        ErrorCode::OutOfMemory => {
                            "Not enough memory to complete the operation.

                                                              POSIX equivalent: ENOMEM, ENOBUFS, EAI_MEMORY"
                        }
                        ErrorCode::Timeout => {
                            "The operation timed out before it could finish completely."
                        }
                        ErrorCode::ConcurrencyConflict => {
                            "This operation is incompatible with another asynchronous operation that is already in progress.

                                                              POSIX equivalent: EALREADY"
                        }
                        ErrorCode::NotInProgress => {
                            "Trying to finish an asynchronous operation that:
                                                              - has not been started yet, or:
                                                              - was already finished by a previous `finish-*` call.

                                                              Note: this is scheduled to be removed when `future`s are natively supported."
                        }
                        ErrorCode::WouldBlock => {
                            "The operation has been aborted because it could not be completed immediately.

                                                              Note: this is scheduled to be removed when `future`s are natively supported."
                        }
                        ErrorCode::InvalidState => {
                            "The operation is not valid in the socket's current state."
                        }
                        ErrorCode::NewSocketLimit => {
                            "A new socket resource could not be created because of a system limit."
                        }
                        ErrorCode::AddressNotBindable => {
                            "A bind operation failed because the provided address is not an address that the `network` can bind to."
                        }
                        ErrorCode::AddressInUse => {
                            "A bind operation failed because the provided address is already in use or because there are no ephemeral ports available."
                        }
                        ErrorCode::RemoteUnreachable => {
                            "The remote address is not reachable"
                        }
                        ErrorCode::ConnectionRefused => {
                            "The TCP connection was forcefully rejected"
                        }
                        ErrorCode::ConnectionReset => "The TCP connection was reset.",
                        ErrorCode::ConnectionAborted => "A TCP connection was aborted.",
                        ErrorCode::DatagramTooLarge => {
                            "The size of a datagram sent to a UDP socket exceeded the maximum
                                                              supported size."
                        }
                        ErrorCode::NameUnresolvable => {
                            "Name does not exist or has no suitable associated IP addresses."
                        }
                        ErrorCode::TemporaryResolverFailure => {
                            "A temporary failure in name resolution occurred."
                        }
                        ErrorCode::PermanentResolverFailure => {
                            "A permanent failure in name resolution occurred."
                        }
                    }
                }
            }
            impl ::core::fmt::Debug for ErrorCode {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ErrorCode")
                        .field("code", &(*self as i32))
                        .field("name", &self.name())
                        .field("message", &self.message())
                        .finish()
                }
            }
            impl ::core::fmt::Display for ErrorCode {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    write!(f, "{} (error {})", self.name(), * self as i32)
                }
            }
            impl std::error::Error for ErrorCode {}
            impl ErrorCode {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> ErrorCode {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => ErrorCode::Unknown,
                        1 => ErrorCode::AccessDenied,
                        2 => ErrorCode::NotSupported,
                        3 => ErrorCode::InvalidArgument,
                        4 => ErrorCode::OutOfMemory,
                        5 => ErrorCode::Timeout,
                        6 => ErrorCode::ConcurrencyConflict,
                        7 => ErrorCode::NotInProgress,
                        8 => ErrorCode::WouldBlock,
                        9 => ErrorCode::InvalidState,
                        10 => ErrorCode::NewSocketLimit,
                        11 => ErrorCode::AddressNotBindable,
                        12 => ErrorCode::AddressInUse,
                        13 => ErrorCode::RemoteUnreachable,
                        14 => ErrorCode::ConnectionRefused,
                        15 => ErrorCode::ConnectionReset,
                        16 => ErrorCode::ConnectionAborted,
                        17 => ErrorCode::DatagramTooLarge,
                        18 => ErrorCode::NameUnresolvable,
                        19 => ErrorCode::TemporaryResolverFailure,
                        20 => ErrorCode::PermanentResolverFailure,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum IpAddressFamily {
                /// Similar to `AF_INET` in POSIX.
                Ipv4,
                /// Similar to `AF_INET6` in POSIX.
                Ipv6,
            }
            impl ::core::fmt::Debug for IpAddressFamily {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        IpAddressFamily::Ipv4 => {
                            f.debug_tuple("IpAddressFamily::Ipv4").finish()
                        }
                        IpAddressFamily::Ipv6 => {
                            f.debug_tuple("IpAddressFamily::Ipv6").finish()
                        }
                    }
                }
            }
            impl IpAddressFamily {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> IpAddressFamily {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => IpAddressFamily::Ipv4,
                        1 => IpAddressFamily::Ipv6,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            pub type Ipv4Address = (u8, u8, u8, u8);
            pub type Ipv6Address = (u16, u16, u16, u16, u16, u16, u16, u16);
            #[derive(Clone, Copy)]
            pub enum IpAddress {
                Ipv4(Ipv4Address),
                Ipv6(Ipv6Address),
            }
            impl ::core::fmt::Debug for IpAddress {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        IpAddress::Ipv4(e) => {
                            f.debug_tuple("IpAddress::Ipv4").field(e).finish()
                        }
                        IpAddress::Ipv6(e) => {
                            f.debug_tuple("IpAddress::Ipv6").field(e).finish()
                        }
                    }
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Ipv4SocketAddress {
                /// sin_port
                pub port: u16,
                /// sin_addr
                pub address: Ipv4Address,
            }
            impl ::core::fmt::Debug for Ipv4SocketAddress {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Ipv4SocketAddress")
                        .field("port", &self.port)
                        .field("address", &self.address)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Ipv6SocketAddress {
                /// sin6_port
                pub port: u16,
                /// sin6_flowinfo
                pub flow_info: u32,
                /// sin6_addr
                pub address: Ipv6Address,
                /// sin6_scope_id
                pub scope_id: u32,
            }
            impl ::core::fmt::Debug for Ipv6SocketAddress {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Ipv6SocketAddress")
                        .field("port", &self.port)
                        .field("flow-info", &self.flow_info)
                        .field("address", &self.address)
                        .field("scope-id", &self.scope_id)
                        .finish()
                }
            }
            #[derive(Clone, Copy)]
            pub enum IpSocketAddress {
                Ipv4(Ipv4SocketAddress),
                Ipv6(Ipv6SocketAddress),
            }
            impl ::core::fmt::Debug for IpSocketAddress {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        IpSocketAddress::Ipv4(e) => {
                            f.debug_tuple("IpSocketAddress::Ipv4").field(e).finish()
                        }
                        IpSocketAddress::Ipv6(e) => {
                            f.debug_tuple("IpSocketAddress::Ipv6").field(e).finish()
                        }
                    }
                }
            }
        }
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod ip_name_lookup {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Pollable = super::super::super::wasi::io::poll::Pollable;
            pub type Network = super::super::super::wasi::sockets::network::Network;
            pub type ErrorCode = super::super::super::wasi::sockets::network::ErrorCode;
            pub type IpAddress = super::super::super::wasi::sockets::network::IpAddress;
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct ResolveAddressStream {
                handle: _rt::Resource<ResolveAddressStream>,
            }
            impl ResolveAddressStream {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for ResolveAddressStream {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:sockets/ip-name-lookup@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]resolve-address-stream"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Resolve an internet host name to a list of IP addresses.
            ///
            /// Unicode domain names are automatically converted to ASCII using IDNA encoding.
            /// If the input is an IP address string, the address is parsed and returned
            /// as-is without making any external requests.
            ///
            /// See the wasi-socket proposal README.md for a comparison with getaddrinfo.
            ///
            /// This function never blocks. It either immediately fails or immediately
            /// returns successfully with a `resolve-address-stream` that can be used
            /// to (asynchronously) fetch the results.
            ///
            /// # Typical errors
            /// - `invalid-argument`: `name` is a syntactically invalid domain name or IP address.
            ///
            /// # References:
            /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/getaddrinfo.html>
            /// - <https://man7.org/linux/man-pages/man3/getaddrinfo.3.html>
            /// - <https://learn.microsoft.com/en-us/windows/win32/api/ws2tcpip/nf-ws2tcpip-getaddrinfo>
            /// - <https://man.freebsd.org/cgi/man.cgi?query=getaddrinfo&sektion=3>
            pub fn resolve_addresses(
                network: &Network,
                name: &str,
            ) -> Result<ResolveAddressStream, ErrorCode> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                    let vec0 = name;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:sockets/ip-name-lookup@0.2.3")]
                    unsafe extern "C" {
                        #[link_name = "resolve-addresses"]
                        fn wit_import2(_: i32, _: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import2(
                            (network).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            ptr1,
                        )
                    };
                    let l3 = i32::from(*ptr1.add(0).cast::<u8>());
                    let result6 = match l3 {
                        0 => {
                            let e = {
                                let l4 = *ptr1.add(4).cast::<i32>();
                                unsafe { ResolveAddressStream::from_handle(l4 as u32) }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l5 = i32::from(*ptr1.add(4).cast::<u8>());
                                super::super::super::wasi::sockets::network::ErrorCode::_lift(
                                    l5 as u8,
                                )
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result6
                }
            }
            impl ResolveAddressStream {
                #[allow(unused_unsafe, clippy::all)]
                /// Returns the next address from the resolver.
                ///
                /// This function should be called multiple times. On each call, it will
                /// return the next address in connection order preference. If all
                /// addresses have been exhausted, this function returns `none`.
                ///
                /// This function never returns IPv4-mapped IPv6 addresses.
                ///
                /// # Typical errors
                /// - `name-unresolvable`:          Name does not exist or has no suitable associated IP addresses. (EAI_NONAME, EAI_NODATA, EAI_ADDRFAMILY)
                /// - `temporary-resolver-failure`: A temporary failure in name resolution occurred. (EAI_AGAIN)
                /// - `permanent-resolver-failure`: A permanent failure in name resolution occurred. (EAI_FAIL)
                /// - `would-block`:                A result is not available yet. (EWOULDBLOCK, EAGAIN)
                pub fn resolve_next_address(
                    &self,
                ) -> Result<Option<IpAddress>, ErrorCode> {
                    unsafe {
                        #[repr(align(2))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 22]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 22],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:sockets/ip-name-lookup@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]resolve-address-stream.resolve-next-address"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result19 = match l2 {
                            0 => {
                                let e = {
                                    let l3 = i32::from(*ptr0.add(2).cast::<u8>());
                                    match l3 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l4 = i32::from(*ptr0.add(4).cast::<u8>());
                                                use super::super::super::wasi::sockets::network::IpAddress as V17;
                                                let v17 = match l4 {
                                                    0 => {
                                                        let e17 = {
                                                            let l5 = i32::from(*ptr0.add(6).cast::<u8>());
                                                            let l6 = i32::from(*ptr0.add(7).cast::<u8>());
                                                            let l7 = i32::from(*ptr0.add(8).cast::<u8>());
                                                            let l8 = i32::from(*ptr0.add(9).cast::<u8>());
                                                            (l5 as u8, l6 as u8, l7 as u8, l8 as u8)
                                                        };
                                                        V17::Ipv4(e17)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                        let e17 = {
                                                            let l9 = i32::from(*ptr0.add(6).cast::<u16>());
                                                            let l10 = i32::from(*ptr0.add(8).cast::<u16>());
                                                            let l11 = i32::from(*ptr0.add(10).cast::<u16>());
                                                            let l12 = i32::from(*ptr0.add(12).cast::<u16>());
                                                            let l13 = i32::from(*ptr0.add(14).cast::<u16>());
                                                            let l14 = i32::from(*ptr0.add(16).cast::<u16>());
                                                            let l15 = i32::from(*ptr0.add(18).cast::<u16>());
                                                            let l16 = i32::from(*ptr0.add(20).cast::<u16>());
                                                            (
                                                                l9 as u16,
                                                                l10 as u16,
                                                                l11 as u16,
                                                                l12 as u16,
                                                                l13 as u16,
                                                                l14 as u16,
                                                                l15 as u16,
                                                                l16 as u16,
                                                            )
                                                        };
                                                        V17::Ipv6(e17)
                                                    }
                                                };
                                                v17
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    }
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l18 = i32::from(*ptr0.add(2).cast::<u8>());
                                    super::super::super::wasi::sockets::network::ErrorCode::_lift(
                                        l18 as u8,
                                    )
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result19
                    }
                }
            }
            impl ResolveAddressStream {
                #[allow(unused_unsafe, clippy::all)]
                /// Create a `pollable` which will resolve once the stream is ready for I/O.
                ///
                /// Note: this function is here for WASI 0.2 only.
                /// It's planned to be removed when `future` is natively supported in Preview3.
                pub fn subscribe(&self) -> Pollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:sockets/ip-name-lookup@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]resolve-address-stream.subscribe"]
                            fn wit_import0(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe { wit_import0((self).handle() as i32) };
                        unsafe {
                            super::super::super::wasi::io::poll::Pollable::from_handle(
                                ret as u32,
                            )
                        }
                    }
                }
            }
        }
        /// This interface provides a value-export of the default network handle..
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod instance_network {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            pub type Network = super::super::super::wasi::sockets::network::Network;
            #[allow(unused_unsafe, clippy::all)]
            /// Get a handle to the default network.
            pub fn instance_network() -> Network {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:sockets/instance-network@0.2.3")]
                    unsafe extern "C" {
                        #[link_name = "instance-network"]
                        fn wit_import0() -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0() -> i32 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0() };
                    unsafe {
                        super::super::super::wasi::sockets::network::Network::from_handle(
                            ret as u32,
                        )
                    }
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod golem {
        pub mod it {
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod api {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_get_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::get();
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    let vec3 = result0;
                    let len3 = vec3.len();
                    let layout3 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec3.len() * (2 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result3 = if layout3.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout3).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout3);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec3.into_iter().enumerate() {
                        let base = result3
                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                        {
                            let vec2 = (e.into_bytes()).into_boxed_slice();
                            let ptr2 = vec2.as_ptr().cast::<u8>();
                            let len2 = vec2.len();
                            ::core::mem::forget(vec2);
                            *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len2;
                            *base.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                        }
                    }
                    *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len3;
                    *ptr1.add(0).cast::<*mut u8>() = result3;
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_get<T: Guest>(arg0: *mut u8) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base4 = l0;
                    let len4 = l1;
                    for i in 0..len4 {
                        let base = base4
                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                        {
                            let l2 = *base.add(0).cast::<*mut u8>();
                            let l3 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l2, l3, 1);
                        }
                    }
                    _rt::cabi_dealloc(
                        base4,
                        len4 * (2 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                }
                pub trait Guest {
                    fn get() -> _rt::Vec<_rt::String>;
                }
                #[doc(hidden)]
                macro_rules! __export_golem_it_api_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name = "golem:it/api#get")]
                        unsafe extern "C" fn export_get() -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_get_cabi::<$ty > () } } #[unsafe
                        (export_name = "cabi_post_golem:it/api#get")] unsafe extern "C"
                        fn _post_return_get(arg0 : * mut u8,) { unsafe {
                        $($path_to_types)*:: __post_return_get::<$ty > (arg0) } } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_golem_it_api_cabi;
                #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 2 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 2
                        * ::core::mem::size_of::<*const u8>()],
                );
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};
    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }
    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }
    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }
        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }
        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }
    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource").field("handle", &self.handle).finish()
        }
    }
    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    u32::MAX => {}
                    other => T::drop(other),
                }
            }
        }
    }
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }
    pub use alloc_crate::vec::Vec;
    pub use alloc_crate::alloc;
    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }
    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }
    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }
    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    pub use alloc_crate::string::String;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            unsafe { core::hint::unreachable_unchecked() }
        }
    }
    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }
    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }
    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }
    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub fn as_f32<T: AsF32>(t: T) -> f32 {
        t.as_f32()
    }
    pub trait AsF32 {
        fn as_f32(self) -> f32;
    }
    impl<'a, T: Copy + AsF32> AsF32 for &'a T {
        fn as_f32(self) -> f32 {
            (*self).as_f32()
        }
    }
    impl AsF32 for f32 {
        #[inline]
        fn as_f32(self) -> f32 {
            self as f32
        }
    }
    pub fn as_f64<T: AsF64>(t: T) -> f64 {
        t.as_f64()
    }
    pub trait AsF64 {
        fn as_f64(self) -> f64;
    }
    impl<'a, T: Copy + AsF64> AsF64 for &'a T {
        fn as_f64(self) -> f64 {
            (*self).as_f64()
        }
    }
    impl AsF64 for f64 {
        #[inline]
        fn as_f64(self) -> f64 {
            self as f64
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    pub unsafe fn char_lift(val: u32) -> char {
        if cfg!(debug_assertions) {
            core::char::from_u32(val).unwrap()
        } else {
            core::char::from_u32_unchecked(val)
        }
    }
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    extern crate alloc as alloc_crate;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_networking_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::golem::it::api::__export_golem_it_api_cabi!($ty with_types_in
        $($path_to_types_root)*:: exports::golem::it::api);
    };
}
#[doc(inline)]
pub(crate) use __export_networking_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:golem:it:networking:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 6588] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xbb2\x01A\x02\x01A\x1c\
\x01B\x0a\x04\0\x08pollable\x03\x01\x01h\0\x01@\x01\x04self\x01\0\x7f\x04\0\x16[\
method]pollable.ready\x01\x02\x01@\x01\x04self\x01\x01\0\x04\0\x16[method]pollab\
le.block\x01\x03\x01p\x01\x01py\x01@\x01\x02in\x04\0\x05\x04\0\x04poll\x01\x06\x03\
\0\x12wasi:io/poll@0.2.3\x05\0\x02\x03\0\0\x08pollable\x01B\x0f\x02\x03\x02\x01\x01\
\x04\0\x08pollable\x03\0\0\x01w\x04\0\x07instant\x03\0\x02\x01w\x04\0\x08duratio\
n\x03\0\x04\x01@\0\0\x03\x04\0\x03now\x01\x06\x01@\0\0\x05\x04\0\x0aresolution\x01\
\x07\x01i\x01\x01@\x01\x04when\x03\0\x08\x04\0\x11subscribe-instant\x01\x09\x01@\
\x01\x04when\x05\0\x08\x04\0\x12subscribe-duration\x01\x0a\x03\0!wasi:clocks/mon\
otonic-clock@0.2.3\x05\x02\x01B\x05\x01r\x02\x07secondsw\x0bnanosecondsy\x04\0\x08\
datetime\x03\0\0\x01@\0\0\x01\x04\0\x03now\x01\x02\x04\0\x0aresolution\x01\x02\x03\
\0\x1cwasi:clocks/wall-clock@0.2.3\x05\x03\x02\x03\0\x02\x08datetime\x01BU\x02\x03\
\x02\x01\x04\x04\0\x08datetime\x03\0\0\x02\x03\x02\x01\x01\x04\0\x08pollable\x03\
\0\x02\x01r\x02\x09high-bitsw\x08low-bitsw\x04\0\x04uuid\x03\0\x04\x01r\x01\x04u\
uid\x05\x04\0\x0ccomponent-id\x03\0\x06\x01r\x02\x0ccomponent-id\x07\x08agent-id\
s\x04\0\x08agent-id\x03\0\x08\x01z\x04\0\x0anode-index\x03\0\x0a\x01w\x04\0\x0br\
esource-id\x03\0\x0c\x01m\x02\x05owned\x08borrowed\x04\0\x0dresource-mode\x03\0\x0e\
\x01o\x02s\x0b\x01p\x10\x01k\x0b\x01o\x02s\x12\x01p\x13\x01ps\x01p\x0b\x01o\x02\x12\
\x12\x01o\x02\x0d\x0f\x01q\x16\x0brecord-type\x01\x11\0\x0cvariant-type\x01\x14\0\
\x09enum-type\x01\x15\0\x0aflags-type\x01\x15\0\x0atuple-type\x01\x16\0\x09list-\
type\x01\x0b\0\x0boption-type\x01\x0b\0\x0bresult-type\x01\x17\0\x0cprim-u8-type\
\0\0\x0dprim-u16-type\0\0\x0dprim-u32-type\0\0\x0dprim-u64-type\0\0\x0cprim-s8-t\
ype\0\0\x0dprim-s16-type\0\0\x0dprim-s32-type\0\0\x0dprim-s64-type\0\0\x0dprim-f\
32-type\0\0\x0dprim-f64-type\0\0\x0eprim-char-type\0\0\x0eprim-bool-type\0\0\x10\
prim-string-type\0\0\x0bhandle-type\x01\x18\0\x04\0\x0dwit-type-node\x03\0\x19\x01\
ks\x01r\x03\x04name\x1b\x05owner\x1b\x04type\x1a\x04\0\x13named-wit-type-node\x03\
\0\x1c\x01p\x1d\x01r\x01\x05nodes\x1e\x04\0\x08wit-type\x03\0\x1f\x01r\x01\x05va\
lues\x04\0\x03uri\x03\0!\x01o\x02y\x12\x01p\x7f\x01j\x01\x12\x01\x12\x01o\x02\"w\
\x01q\x16\x0crecord-value\x01\x16\0\x0dvariant-value\x01#\0\x0aenum-value\x01y\0\
\x0bflags-value\x01$\0\x0btuple-value\x01\x16\0\x0alist-value\x01\x16\0\x0coptio\
n-value\x01\x12\0\x0cresult-value\x01%\0\x07prim-u8\x01}\0\x08prim-u16\x01{\0\x08\
prim-u32\x01y\0\x08prim-u64\x01w\0\x07prim-s8\x01~\0\x08prim-s16\x01|\0\x08prim-\
s32\x01z\0\x08prim-s64\x01x\0\x0cprim-float32\x01v\0\x0cprim-float64\x01u\0\x09p\
rim-char\x01t\0\x09prim-bool\x01\x7f\0\x0bprim-string\x01s\0\x06handle\x01&\0\x04\
\0\x08wit-node\x03\0'\x01p(\x01r\x01\x05nodes)\x04\0\x09wit-value\x03\0*\x01r\x02\
\x05value+\x03typ\x20\x04\0\x0evalue-and-type\x03\0,\x01q\x04\x0eprotocol-error\x01\
s\0\x06denied\x01s\0\x09not-found\x01s\0\x15remote-internal-error\x01s\0\x04\0\x09\
rpc-error\x03\0.\x04\0\x08wasm-rpc\x03\x01\x04\0\x14future-invoke-result\x03\x01\
\x04\0\x12cancellation-token\x03\x01\x01i0\x01@\x01\x08agent-id\x09\03\x04\0\x15\
[constructor]wasm-rpc\x014\x01h0\x01p+\x01j\x01+\x01/\x01@\x03\x04self5\x0dfunct\
ion-names\x0ffunction-params6\07\x04\0![method]wasm-rpc.invoke-and-await\x018\x01\
j\0\x01/\x01@\x03\x04self5\x0dfunction-names\x0ffunction-params6\09\x04\0\x17[me\
thod]wasm-rpc.invoke\x01:\x01i1\x01@\x03\x04self5\x0dfunction-names\x0ffunction-\
params6\0;\x04\0'[method]wasm-rpc.async-invoke-and-await\x01<\x01@\x04\x04self5\x0e\
scheduled-time\x01\x0dfunction-names\x0ffunction-params6\x01\0\x04\0$[method]was\
m-rpc.schedule-invocation\x01=\x01i2\x01@\x04\x04self5\x0escheduled-time\x01\x0d\
function-names\x0ffunction-params6\0>\x04\0/[method]wasm-rpc.schedule-cancelable\
-invocation\x01?\x01h1\x01i\x03\x01@\x01\x04self\xc0\0\0\xc1\0\x04\0&[method]fut\
ure-invoke-result.subscribe\x01B\x01k7\x01@\x01\x04self\xc0\0\0\xc3\0\x04\0\x20[\
method]future-invoke-result.get\x01D\x01h2\x01@\x01\x04self\xc5\0\x01\0\x04\0![m\
ethod]cancellation-token.cancel\x01F\x01j\x01\x05\x01s\x01@\x01\x04uuids\0\xc7\0\
\x04\0\x0aparse-uuid\x01H\x01@\x01\x04uuid\x05\0s\x04\0\x0euuid-to-string\x01I\x03\
\0\x15golem:rpc/types@0.2.2\x05\x05\x02\x03\0\x01\x08duration\x02\x03\0\x03\x0cc\
omponent-id\x02\x03\0\x03\x04uuid\x02\x03\0\x03\x0evalue-and-type\x02\x03\0\x03\x08\
agent-id\x01B\x85\x01\x02\x03\x02\x01\x06\x04\0\x08duration\x03\0\0\x02\x03\x02\x01\
\x07\x04\0\x0ccomponent-id\x03\0\x02\x02\x03\x02\x01\x08\x04\0\x04uuid\x03\0\x04\
\x02\x03\x02\x01\x09\x04\0\x0evalue-and-type\x03\0\x06\x02\x03\x02\x01\x0a\x04\0\
\x08agent-id\x03\0\x08\x02\x03\x02\x01\x01\x04\0\x08pollable\x03\0\x0a\x01w\x04\0\
\x0boplog-index\x03\0\x0c\x01r\x02\x08agent-id\x09\x09oplog-idx\x0d\x04\0\x0apro\
mise-id\x03\0\x0e\x01w\x04\0\x11component-version\x03\0\x10\x01r\x01\x04uuid\x05\
\x04\0\x0aaccount-id\x03\0\x12\x01r\x01\x04uuid\x05\x04\0\x0eenvironment-id\x03\0\
\x14\x01ku\x01r\x05\x0cmax-attemptsy\x09min-delay\x01\x09max-delay\x01\x0amultip\
lieru\x11max-jitter-factor\x16\x04\0\x0cretry-policy\x03\0\x17\x01q\x03\x0fpersi\
st-nothing\0\0\x1bpersist-remote-side-effects\0\0\x05smart\0\0\x04\0\x11persiste\
nce-level\x03\0\x19\x01m\x02\x09automatic\x0esnapshot-based\x04\0\x0bupdate-mode\
\x03\0\x1b\x01m\x06\x05equal\x09not-equal\x0dgreater-equal\x07greater\x0aless-eq\
ual\x04less\x04\0\x11filter-comparator\x03\0\x1d\x01m\x05\x05equal\x09not-equal\x04\
like\x08not-like\x0bstarts-with\x04\0\x18string-filter-comparator\x03\0\x1f\x01m\
\x07\x07running\x04idle\x09suspended\x0binterrupted\x08retrying\x06failed\x06exi\
ted\x04\0\x0cagent-status\x03\0!\x01r\x02\x0acomparator\x20\x05values\x04\0\x11a\
gent-name-filter\x03\0#\x01r\x02\x0acomparator\x1e\x05value\"\x04\0\x13agent-sta\
tus-filter\x03\0%\x01r\x02\x0acomparator\x1e\x05valuew\x04\0\x14agent-version-fi\
lter\x03\0'\x01r\x02\x0acomparator\x1e\x05valuew\x04\0\x17agent-created-at-filte\
r\x03\0)\x01r\x03\x04names\x0acomparator\x20\x05values\x04\0\x10agent-env-filter\
\x03\0+\x01r\x03\x04names\x0acomparator\x20\x05values\x04\0\x18agent-config-vars\
-filter\x03\0-\x01q\x06\x04name\x01$\0\x06status\x01&\0\x07version\x01(\0\x0acre\
ated-at\x01*\0\x03env\x01,\0\x10wasi-config-vars\x01.\0\x04\0\x15agent-property-\
filter\x03\0/\x01p0\x01r\x01\x07filters1\x04\0\x10agent-all-filter\x03\02\x01p3\x01\
r\x01\x07filters4\x04\0\x10agent-any-filter\x03\05\x01ps\x01o\x02ss\x01p8\x01r\x07\
\x08agent-id\x09\x04args7\x03env9\x0bconfig-vars9\x06status\"\x11component-versi\
onw\x0bretry-countw\x04\0\x0eagent-metadata\x03\0:\x04\0\x0aget-agents\x03\x01\x01\
q\x02\x15revert-to-oplog-index\x01\x0d\0\x17revert-last-invocations\x01w\0\x04\0\
\x13revert-agent-target\x03\0=\x01m\x02\x08original\x06forked\x04\0\x0bfork-resu\
lt\x03\0?\x04\0\x12get-promise-result\x03\x01\x01k6\x01i<\x01@\x03\x0ccomponent-\
id\x03\x06filter\xc2\0\x07precise\x7f\0\xc3\0\x04\0\x17[constructor]get-agents\x01\
D\x01h<\x01p;\x01k\xc6\0\x01@\x01\x04self\xc5\0\0\xc7\0\x04\0\x1b[method]get-age\
nts.get-next\x01H\x01hA\x01i\x0b\x01@\x01\x04self\xc9\0\0\xca\0\x04\0$[method]ge\
t-promise-result.subscribe\x01K\x01p}\x01k\xcc\0\x01@\x01\x04self\xc9\0\0\xcd\0\x04\
\0\x1e[method]get-promise-result.get\x01N\x01@\0\0\x0f\x04\0\x0ecreate-promise\x01\
O\x01iA\x01@\x01\x0apromise-id\x0f\0\xd0\0\x04\0\x0bget-promise\x01Q\x01@\x02\x0a\
promise-id\x0f\x04data\xcc\0\0\x7f\x04\0\x10complete-promise\x01R\x01@\0\0\x0d\x04\
\0\x0fget-oplog-index\x01S\x01@\x01\x09oplog-idx\x0d\x01\0\x04\0\x0fset-oplog-in\
dex\x01T\x01@\x01\x08replicas}\x01\0\x04\0\x0coplog-commit\x01U\x04\0\x14mark-be\
gin-operation\x01S\x01@\x01\x05begin\x0d\x01\0\x04\0\x12mark-end-operation\x01V\x01\
@\0\0\x18\x04\0\x10get-retry-policy\x01W\x01@\x01\x10new-retry-policy\x18\x01\0\x04\
\0\x10set-retry-policy\x01X\x01@\0\0\x1a\x04\0\x1bget-oplog-persistence-level\x01\
Y\x01@\x01\x15new-persistence-level\x1a\x01\0\x04\0\x1bset-oplog-persistence-lev\
el\x01Z\x01@\0\0\x7f\x04\0\x14get-idempotence-mode\x01[\x01@\x01\x0aidempotent\x7f\
\x01\0\x04\0\x14set-idempotence-mode\x01\\\x01@\0\0\x05\x04\0\x18generate-idempo\
tency-key\x01]\x01@\x03\x08agent-id\x09\x0etarget-version\x11\x04mode\x1c\x01\0\x04\
\0\x0cupdate-agent\x01^\x01@\0\0;\x04\0\x11get-self-metadata\x01_\x01k;\x01@\x01\
\x08agent-id\x09\0\xe0\0\x04\0\x12get-agent-metadata\x01a\x01@\x03\x0fsource-age\
nt-id\x09\x0ftarget-agent-id\x09\x11oplog-idx-cut-off\x0d\x01\0\x04\0\x0afork-ag\
ent\x01b\x01@\x02\x08agent-id\x09\x0drevert-target>\x01\0\x04\0\x0crevert-agent\x01\
c\x01k\x03\x01@\x01\x13component-references\0\xe4\0\x04\0\x14resolve-component-i\
d\x01e\x01k\x09\x01@\x02\x13component-references\x0aagent-names\0\xe6\0\x04\0\x10\
resolve-agent-id\x01g\x04\0\x17resolve-agent-id-strict\x01g\x01@\x01\x08new-name\
s\0\xc0\0\x04\0\x04fork\x01h\x03\0\x14golem:api/host@1.1.7\x05\x0b\x01B\x11\x04\0\
\x07network\x03\x01\x01m\x15\x07unknown\x0daccess-denied\x0dnot-supported\x10inv\
alid-argument\x0dout-of-memory\x07timeout\x14concurrency-conflict\x0fnot-in-prog\
ress\x0bwould-block\x0dinvalid-state\x10new-socket-limit\x14address-not-bindable\
\x0eaddress-in-use\x12remote-unreachable\x12connection-refused\x10connection-res\
et\x12connection-aborted\x12datagram-too-large\x11name-unresolvable\x1atemporary\
-resolver-failure\x1apermanent-resolver-failure\x04\0\x0aerror-code\x03\0\x01\x01\
m\x02\x04ipv4\x04ipv6\x04\0\x11ip-address-family\x03\0\x03\x01o\x04}}}}\x04\0\x0c\
ipv4-address\x03\0\x05\x01o\x08{{{{{{{{\x04\0\x0cipv6-address\x03\0\x07\x01q\x02\
\x04ipv4\x01\x06\0\x04ipv6\x01\x08\0\x04\0\x0aip-address\x03\0\x09\x01r\x02\x04p\
ort{\x07address\x06\x04\0\x13ipv4-socket-address\x03\0\x0b\x01r\x04\x04port{\x09\
flow-infoy\x07address\x08\x08scope-idy\x04\0\x13ipv6-socket-address\x03\0\x0d\x01\
q\x02\x04ipv4\x01\x0c\0\x04ipv6\x01\x0e\0\x04\0\x11ip-socket-address\x03\0\x0f\x03\
\0\x1awasi:sockets/network@0.2.3\x05\x0c\x02\x03\0\x05\x07network\x02\x03\0\x05\x0a\
error-code\x02\x03\0\x05\x0aip-address\x01B\x16\x02\x03\x02\x01\x01\x04\0\x08pol\
lable\x03\0\0\x02\x03\x02\x01\x0d\x04\0\x07network\x03\0\x02\x02\x03\x02\x01\x0e\
\x04\0\x0aerror-code\x03\0\x04\x02\x03\x02\x01\x0f\x04\0\x0aip-address\x03\0\x06\
\x04\0\x16resolve-address-stream\x03\x01\x01h\x08\x01k\x07\x01j\x01\x0a\x01\x05\x01\
@\x01\x04self\x09\0\x0b\x04\03[method]resolve-address-stream.resolve-next-addres\
s\x01\x0c\x01i\x01\x01@\x01\x04self\x09\0\x0d\x04\0([method]resolve-address-stre\
am.subscribe\x01\x0e\x01h\x03\x01i\x08\x01j\x01\x10\x01\x05\x01@\x02\x07network\x0f\
\x04names\0\x11\x04\0\x11resolve-addresses\x01\x12\x03\0!wasi:sockets/ip-name-lo\
okup@0.2.3\x05\x10\x01B\x05\x02\x03\x02\x01\x0d\x04\0\x07network\x03\0\0\x01i\x01\
\x01@\0\0\x02\x04\0\x10instance-network\x01\x03\x03\0#wasi:sockets/instance-netw\
ork@0.2.3\x05\x11\x01B\x03\x01ps\x01@\0\0\0\x04\0\x03get\x01\x01\x04\0\x0cgolem:\
it/api\x05\x12\x04\0\x13golem:it/networking\x04\0\x0b\x10\x01\0\x0anetworking\x03\
\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.227.1\x10wit-\
bindgen-rust\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
