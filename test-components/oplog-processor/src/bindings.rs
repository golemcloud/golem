// Generated by `wit-bindgen` 0.36.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod golem {
    pub mod api {
        /// The Golem host API provides low level access to Golem specific features such as promises and control over
        /// the durability and transactional guarantees the executor provides.
        #[allow(dead_code, clippy::all)]
        pub mod host {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Uri = super::super::super::golem::rpc::types::Uri;
            pub type Duration = super::super::super::wasi::clocks::monotonic_clock::Duration;
            /// An index into the persistent log storing all performed operations of a worker
            pub type OplogIndex = u64;
            /// Represents a Golem component's version
            pub type ComponentVersion = u64;
            /// UUID
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Uuid {
                pub high_bits: u64,
                pub low_bits: u64,
            }
            impl ::core::fmt::Debug for Uuid {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Uuid")
                        .field("high-bits", &self.high_bits)
                        .field("low-bits", &self.low_bits)
                        .finish()
                }
            }
            /// Represents a Golem component
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct ComponentId {
                pub uuid: Uuid,
            }
            impl ::core::fmt::Debug for ComponentId {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ComponentId").field("uuid", &self.uuid).finish()
                }
            }
            /// Represents a Golem worker
            #[derive(Clone)]
            pub struct WorkerId {
                pub component_id: ComponentId,
                pub worker_name: _rt::String,
            }
            impl ::core::fmt::Debug for WorkerId {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WorkerId")
                        .field("component-id", &self.component_id)
                        .field("worker-name", &self.worker_name)
                        .finish()
                }
            }
            /// A promise ID is a value that can be passed to an external Golem API to complete that promise
            /// from an arbitrary external source, while Golem workers can await for this completion.
            #[derive(Clone)]
            pub struct PromiseId {
                pub worker_id: WorkerId,
                pub oplog_idx: OplogIndex,
            }
            impl ::core::fmt::Debug for PromiseId {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("PromiseId")
                        .field("worker-id", &self.worker_id)
                        .field("oplog-idx", &self.oplog_idx)
                        .finish()
                }
            }
            /// Represents a Golem Cloud account
            #[derive(Clone)]
            pub struct AccountId {
                pub value: _rt::String,
            }
            impl ::core::fmt::Debug for AccountId {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AccountId").field("value", &self.value).finish()
                }
            }
            /// Configures how the executor retries failures
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct RetryPolicy {
                /// The maximum number of retries before the worker becomes permanently failed
                pub max_attempts: u32,
                /// The minimum delay between retries (applied to the first retry)
                pub min_delay: Duration,
                /// The maximum delay between retries
                pub max_delay: Duration,
                /// Multiplier applied to the delay on each retry to implement exponential backoff
                pub multiplier: f64,
                /// The maximum amount of jitter to add to the delay
                pub max_jitter_factor: Option<f64>,
            }
            impl ::core::fmt::Debug for RetryPolicy {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("RetryPolicy")
                        .field("max-attempts", &self.max_attempts)
                        .field("min-delay", &self.min_delay)
                        .field("max-delay", &self.max_delay)
                        .field("multiplier", &self.multiplier)
                        .field("max-jitter-factor", &self.max_jitter_factor)
                        .finish()
                }
            }
            /// Configurable persistence level for workers
            #[derive(Clone, Copy)]
            pub enum PersistenceLevel {
                PersistNothing,
                PersistRemoteSideEffects,
                Smart,
            }
            impl ::core::fmt::Debug for PersistenceLevel {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        PersistenceLevel::PersistNothing => {
                            f.debug_tuple("PersistenceLevel::PersistNothing").finish()
                        }
                        PersistenceLevel::PersistRemoteSideEffects => {
                            f.debug_tuple("PersistenceLevel::PersistRemoteSideEffects")
                                .finish()
                        }
                        PersistenceLevel::Smart => {
                            f.debug_tuple("PersistenceLevel::Smart").finish()
                        }
                    }
                }
            }
            /// Describes how to update a worker to a different component version
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum UpdateMode {
                /// Automatic update tries to recover the worker using the new component version
                /// and may fail if there is a divergence.
                Automatic,
                /// Manual, snapshot-based update uses a user-defined implementation of the `save-snapshot` interface
                /// to store the worker's state, and a user-defined implementation of the `load-snapshot` interface to
                /// load it into the new version.
                SnapshotBased,
            }
            impl ::core::fmt::Debug for UpdateMode {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        UpdateMode::Automatic => {
                            f.debug_tuple("UpdateMode::Automatic").finish()
                        }
                        UpdateMode::SnapshotBased => {
                            f.debug_tuple("UpdateMode::SnapshotBased").finish()
                        }
                    }
                }
            }
            impl UpdateMode {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> UpdateMode {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => UpdateMode::Automatic,
                        1 => UpdateMode::SnapshotBased,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum FilterComparator {
                Equal,
                NotEqual,
                GreaterEqual,
                Greater,
                LessEqual,
                Less,
            }
            impl ::core::fmt::Debug for FilterComparator {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        FilterComparator::Equal => {
                            f.debug_tuple("FilterComparator::Equal").finish()
                        }
                        FilterComparator::NotEqual => {
                            f.debug_tuple("FilterComparator::NotEqual").finish()
                        }
                        FilterComparator::GreaterEqual => {
                            f.debug_tuple("FilterComparator::GreaterEqual").finish()
                        }
                        FilterComparator::Greater => {
                            f.debug_tuple("FilterComparator::Greater").finish()
                        }
                        FilterComparator::LessEqual => {
                            f.debug_tuple("FilterComparator::LessEqual").finish()
                        }
                        FilterComparator::Less => {
                            f.debug_tuple("FilterComparator::Less").finish()
                        }
                    }
                }
            }
            impl FilterComparator {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> FilterComparator {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => FilterComparator::Equal,
                        1 => FilterComparator::NotEqual,
                        2 => FilterComparator::GreaterEqual,
                        3 => FilterComparator::Greater,
                        4 => FilterComparator::LessEqual,
                        5 => FilterComparator::Less,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum StringFilterComparator {
                Equal,
                NotEqual,
                Like,
                NotLike,
            }
            impl ::core::fmt::Debug for StringFilterComparator {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        StringFilterComparator::Equal => {
                            f.debug_tuple("StringFilterComparator::Equal").finish()
                        }
                        StringFilterComparator::NotEqual => {
                            f.debug_tuple("StringFilterComparator::NotEqual").finish()
                        }
                        StringFilterComparator::Like => {
                            f.debug_tuple("StringFilterComparator::Like").finish()
                        }
                        StringFilterComparator::NotLike => {
                            f.debug_tuple("StringFilterComparator::NotLike").finish()
                        }
                    }
                }
            }
            impl StringFilterComparator {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> StringFilterComparator {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => StringFilterComparator::Equal,
                        1 => StringFilterComparator::NotEqual,
                        2 => StringFilterComparator::Like,
                        3 => StringFilterComparator::NotLike,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum WorkerStatus {
                /// The worker is running an invoked function
                Running,
                /// The worker is ready to run an invoked function
                Idle,
                /// An invocation is active but waiting for something (sleeping, waiting for a promise)
                Suspended,
                /// The last invocation was interrupted but will be resumed
                Interrupted,
                /// The last invocation failed and a retry was scheduled
                Retrying,
                /// The last invocation failed and the worker can no longer be used
                Failed,
                /// The worker exited after a successful invocation and can no longer be invoked
                Exited,
            }
            impl ::core::fmt::Debug for WorkerStatus {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        WorkerStatus::Running => {
                            f.debug_tuple("WorkerStatus::Running").finish()
                        }
                        WorkerStatus::Idle => {
                            f.debug_tuple("WorkerStatus::Idle").finish()
                        }
                        WorkerStatus::Suspended => {
                            f.debug_tuple("WorkerStatus::Suspended").finish()
                        }
                        WorkerStatus::Interrupted => {
                            f.debug_tuple("WorkerStatus::Interrupted").finish()
                        }
                        WorkerStatus::Retrying => {
                            f.debug_tuple("WorkerStatus::Retrying").finish()
                        }
                        WorkerStatus::Failed => {
                            f.debug_tuple("WorkerStatus::Failed").finish()
                        }
                        WorkerStatus::Exited => {
                            f.debug_tuple("WorkerStatus::Exited").finish()
                        }
                    }
                }
            }
            impl WorkerStatus {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> WorkerStatus {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => WorkerStatus::Running,
                        1 => WorkerStatus::Idle,
                        2 => WorkerStatus::Suspended,
                        3 => WorkerStatus::Interrupted,
                        4 => WorkerStatus::Retrying,
                        5 => WorkerStatus::Failed,
                        6 => WorkerStatus::Exited,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            #[derive(Clone)]
            pub struct WorkerNameFilter {
                pub comparator: StringFilterComparator,
                pub value: _rt::String,
            }
            impl ::core::fmt::Debug for WorkerNameFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WorkerNameFilter")
                        .field("comparator", &self.comparator)
                        .field("value", &self.value)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct WorkerStatusFilter {
                pub comparator: FilterComparator,
                pub value: WorkerStatus,
            }
            impl ::core::fmt::Debug for WorkerStatusFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WorkerStatusFilter")
                        .field("comparator", &self.comparator)
                        .field("value", &self.value)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct WorkerVersionFilter {
                pub comparator: FilterComparator,
                pub value: u64,
            }
            impl ::core::fmt::Debug for WorkerVersionFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WorkerVersionFilter")
                        .field("comparator", &self.comparator)
                        .field("value", &self.value)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct WorkerCreatedAtFilter {
                pub comparator: FilterComparator,
                pub value: u64,
            }
            impl ::core::fmt::Debug for WorkerCreatedAtFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WorkerCreatedAtFilter")
                        .field("comparator", &self.comparator)
                        .field("value", &self.value)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct WorkerEnvFilter {
                pub name: _rt::String,
                pub comparator: StringFilterComparator,
                pub value: _rt::String,
            }
            impl ::core::fmt::Debug for WorkerEnvFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WorkerEnvFilter")
                        .field("name", &self.name)
                        .field("comparator", &self.comparator)
                        .field("value", &self.value)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub enum WorkerPropertyFilter {
                Name(WorkerNameFilter),
                Status(WorkerStatusFilter),
                Version(WorkerVersionFilter),
                CreatedAt(WorkerCreatedAtFilter),
                Env(WorkerEnvFilter),
            }
            impl ::core::fmt::Debug for WorkerPropertyFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        WorkerPropertyFilter::Name(e) => {
                            f.debug_tuple("WorkerPropertyFilter::Name").field(e).finish()
                        }
                        WorkerPropertyFilter::Status(e) => {
                            f.debug_tuple("WorkerPropertyFilter::Status")
                                .field(e)
                                .finish()
                        }
                        WorkerPropertyFilter::Version(e) => {
                            f.debug_tuple("WorkerPropertyFilter::Version")
                                .field(e)
                                .finish()
                        }
                        WorkerPropertyFilter::CreatedAt(e) => {
                            f.debug_tuple("WorkerPropertyFilter::CreatedAt")
                                .field(e)
                                .finish()
                        }
                        WorkerPropertyFilter::Env(e) => {
                            f.debug_tuple("WorkerPropertyFilter::Env").field(e).finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub struct WorkerAllFilter {
                pub filters: _rt::Vec<WorkerPropertyFilter>,
            }
            impl ::core::fmt::Debug for WorkerAllFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WorkerAllFilter")
                        .field("filters", &self.filters)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct WorkerAnyFilter {
                pub filters: _rt::Vec<WorkerAllFilter>,
            }
            impl ::core::fmt::Debug for WorkerAnyFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WorkerAnyFilter")
                        .field("filters", &self.filters)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct WorkerMetadata {
                pub worker_id: WorkerId,
                pub args: _rt::Vec<_rt::String>,
                pub env: _rt::Vec<(_rt::String, _rt::String)>,
                pub status: WorkerStatus,
                pub component_version: u64,
                pub retry_count: u64,
            }
            impl ::core::fmt::Debug for WorkerMetadata {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WorkerMetadata")
                        .field("worker-id", &self.worker_id)
                        .field("args", &self.args)
                        .field("env", &self.env)
                        .field("status", &self.status)
                        .field("component-version", &self.component_version)
                        .field("retry-count", &self.retry_count)
                        .finish()
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct GetWorkers {
                handle: _rt::Resource<GetWorkers>,
            }
            impl GetWorkers {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for GetWorkers {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:api/host@1.1.5")]
                        extern "C" {
                            #[link_name = "[resource-drop]get-workers"]
                            fn drop(_: u32);
                        }
                        drop(_handle);
                    }
                }
            }
            /// Target parameter for the `revert-worker` operation
            #[derive(Clone, Copy)]
            pub enum RevertWorkerTarget {
                /// Revert to a specific oplog index. The given index will be the last one to be kept.
                RevertToOplogIndex(OplogIndex),
                /// Revert the last N invocations.
                RevertLastInvocations(u64),
            }
            impl ::core::fmt::Debug for RevertWorkerTarget {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        RevertWorkerTarget::RevertToOplogIndex(e) => {
                            f.debug_tuple("RevertWorkerTarget::RevertToOplogIndex")
                                .field(e)
                                .finish()
                        }
                        RevertWorkerTarget::RevertLastInvocations(e) => {
                            f.debug_tuple("RevertWorkerTarget::RevertLastInvocations")
                                .field(e)
                                .finish()
                        }
                    }
                }
            }
            impl GetWorkers {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(
                    component_id: ComponentId,
                    filter: Option<&WorkerAnyFilter>,
                    precise: bool,
                ) -> Self {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        let ComponentId { uuid: uuid0 } = component_id;
                        let Uuid { high_bits: high_bits1, low_bits: low_bits1 } = uuid0;
                        let (result14_0, result14_1, result14_2) = match filter {
                            Some(e) => {
                                let WorkerAnyFilter { filters: filters2 } = e;
                                let vec13 = filters2;
                                let len13 = vec13.len();
                                let layout13 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec13.len() * 8,
                                    4,
                                );
                                let result13 = if layout13.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout13).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout13);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec13.into_iter().enumerate() {
                                    let base = result13.add(i * 8);
                                    {
                                        let WorkerAllFilter { filters: filters3 } = e;
                                        let vec12 = filters3;
                                        let len12 = vec12.len();
                                        let layout12 = _rt::alloc::Layout::from_size_align_unchecked(
                                            vec12.len() * 32,
                                            8,
                                        );
                                        let result12 = if layout12.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout12);
                                            }
                                            ptr
                                        } else {
                                            ::core::ptr::null_mut()
                                        };
                                        for (i, e) in vec12.into_iter().enumerate() {
                                            let base = result12.add(i * 32);
                                            {
                                                match e {
                                                    WorkerPropertyFilter::Name(e) => {
                                                        *base.add(0).cast::<u8>() = (0i32) as u8;
                                                        let WorkerNameFilter {
                                                            comparator: comparator4,
                                                            value: value4,
                                                        } = e;
                                                        *base.add(8).cast::<u8>() = (comparator4.clone() as i32)
                                                            as u8;
                                                        let vec5 = value4;
                                                        let ptr5 = vec5.as_ptr().cast::<u8>();
                                                        let len5 = vec5.len();
                                                        *base.add(16).cast::<usize>() = len5;
                                                        *base.add(12).cast::<*mut u8>() = ptr5.cast_mut();
                                                    }
                                                    WorkerPropertyFilter::Status(e) => {
                                                        *base.add(0).cast::<u8>() = (1i32) as u8;
                                                        let WorkerStatusFilter {
                                                            comparator: comparator6,
                                                            value: value6,
                                                        } = e;
                                                        *base.add(8).cast::<u8>() = (comparator6.clone() as i32)
                                                            as u8;
                                                        *base.add(9).cast::<u8>() = (value6.clone() as i32) as u8;
                                                    }
                                                    WorkerPropertyFilter::Version(e) => {
                                                        *base.add(0).cast::<u8>() = (2i32) as u8;
                                                        let WorkerVersionFilter {
                                                            comparator: comparator7,
                                                            value: value7,
                                                        } = e;
                                                        *base.add(8).cast::<u8>() = (comparator7.clone() as i32)
                                                            as u8;
                                                        *base.add(16).cast::<i64>() = _rt::as_i64(value7);
                                                    }
                                                    WorkerPropertyFilter::CreatedAt(e) => {
                                                        *base.add(0).cast::<u8>() = (3i32) as u8;
                                                        let WorkerCreatedAtFilter {
                                                            comparator: comparator8,
                                                            value: value8,
                                                        } = e;
                                                        *base.add(8).cast::<u8>() = (comparator8.clone() as i32)
                                                            as u8;
                                                        *base.add(16).cast::<i64>() = _rt::as_i64(value8);
                                                    }
                                                    WorkerPropertyFilter::Env(e) => {
                                                        *base.add(0).cast::<u8>() = (4i32) as u8;
                                                        let WorkerEnvFilter {
                                                            name: name9,
                                                            comparator: comparator9,
                                                            value: value9,
                                                        } = e;
                                                        let vec10 = name9;
                                                        let ptr10 = vec10.as_ptr().cast::<u8>();
                                                        let len10 = vec10.len();
                                                        *base.add(12).cast::<usize>() = len10;
                                                        *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                                        *base.add(16).cast::<u8>() = (comparator9.clone() as i32)
                                                            as u8;
                                                        let vec11 = value9;
                                                        let ptr11 = vec11.as_ptr().cast::<u8>();
                                                        let len11 = vec11.len();
                                                        *base.add(24).cast::<usize>() = len11;
                                                        *base.add(20).cast::<*mut u8>() = ptr11.cast_mut();
                                                    }
                                                }
                                            }
                                        }
                                        *base.add(4).cast::<usize>() = len12;
                                        *base.add(0).cast::<*mut u8>() = result12;
                                        cleanup_list.extend_from_slice(&[(result12, layout12)]);
                                    }
                                }
                                cleanup_list.extend_from_slice(&[(result13, layout13)]);
                                (1i32, result13, len13)
                            }
                            None => (0i32, ::core::ptr::null_mut(), 0usize),
                        };
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/host@1.1.5")]
                        extern "C" {
                            #[link_name = "[constructor]get-workers"]
                            fn wit_import(
                                _: i64,
                                _: i64,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                            ) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i64,
                            _: i64,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            _rt::as_i64(high_bits1),
                            _rt::as_i64(low_bits1),
                            result14_0,
                            result14_1,
                            result14_2,
                            match &precise {
                                true => 1,
                                false => 0,
                            },
                        );
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        GetWorkers::from_handle(ret as u32)
                    }
                }
            }
            impl GetWorkers {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_next(&self) -> Option<_rt::Vec<WorkerMetadata>> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 12],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/host@1.1.5")]
                        extern "C" {
                            #[link_name = "[method]get-workers.get-next"]
                            fn wit_import(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<*mut u8>();
                                    let l3 = *ptr0.add(8).cast::<usize>();
                                    let base27 = l2;
                                    let len27 = l3;
                                    let mut result27 = _rt::Vec::with_capacity(len27);
                                    for i in 0..len27 {
                                        let base = base27.add(i * 64);
                                        let e27 = {
                                            let l4 = *base.add(0).cast::<i64>();
                                            let l5 = *base.add(8).cast::<i64>();
                                            let l6 = *base.add(16).cast::<*mut u8>();
                                            let l7 = *base.add(20).cast::<usize>();
                                            let len8 = l7;
                                            let bytes8 = _rt::Vec::from_raw_parts(
                                                l6.cast(),
                                                len8,
                                                len8,
                                            );
                                            let l9 = *base.add(24).cast::<*mut u8>();
                                            let l10 = *base.add(28).cast::<usize>();
                                            let base14 = l9;
                                            let len14 = l10;
                                            let mut result14 = _rt::Vec::with_capacity(len14);
                                            for i in 0..len14 {
                                                let base = base14.add(i * 8);
                                                let e14 = {
                                                    let l11 = *base.add(0).cast::<*mut u8>();
                                                    let l12 = *base.add(4).cast::<usize>();
                                                    let len13 = l12;
                                                    let bytes13 = _rt::Vec::from_raw_parts(
                                                        l11.cast(),
                                                        len13,
                                                        len13,
                                                    );
                                                    _rt::string_lift(bytes13)
                                                };
                                                result14.push(e14);
                                            }
                                            _rt::cabi_dealloc(base14, len14 * 8, 4);
                                            let l15 = *base.add(32).cast::<*mut u8>();
                                            let l16 = *base.add(36).cast::<usize>();
                                            let base23 = l15;
                                            let len23 = l16;
                                            let mut result23 = _rt::Vec::with_capacity(len23);
                                            for i in 0..len23 {
                                                let base = base23.add(i * 16);
                                                let e23 = {
                                                    let l17 = *base.add(0).cast::<*mut u8>();
                                                    let l18 = *base.add(4).cast::<usize>();
                                                    let len19 = l18;
                                                    let bytes19 = _rt::Vec::from_raw_parts(
                                                        l17.cast(),
                                                        len19,
                                                        len19,
                                                    );
                                                    let l20 = *base.add(8).cast::<*mut u8>();
                                                    let l21 = *base.add(12).cast::<usize>();
                                                    let len22 = l21;
                                                    let bytes22 = _rt::Vec::from_raw_parts(
                                                        l20.cast(),
                                                        len22,
                                                        len22,
                                                    );
                                                    (_rt::string_lift(bytes19), _rt::string_lift(bytes22))
                                                };
                                                result23.push(e23);
                                            }
                                            _rt::cabi_dealloc(base23, len23 * 16, 4);
                                            let l24 = i32::from(*base.add(40).cast::<u8>());
                                            let l25 = *base.add(48).cast::<i64>();
                                            let l26 = *base.add(56).cast::<i64>();
                                            WorkerMetadata {
                                                worker_id: WorkerId {
                                                    component_id: ComponentId {
                                                        uuid: Uuid {
                                                            high_bits: l4 as u64,
                                                            low_bits: l5 as u64,
                                                        },
                                                    },
                                                    worker_name: _rt::string_lift(bytes8),
                                                },
                                                args: result14,
                                                env: result23,
                                                status: WorkerStatus::_lift(l24 as u8),
                                                component_version: l25 as u64,
                                                retry_count: l26 as u64,
                                            }
                                        };
                                        result27.push(e27);
                                    }
                                    _rt::cabi_dealloc(base27, len27 * 64, 8);
                                    result27
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Create a new promise
            pub fn create_promise() -> PromiseId {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 32]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 32]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.5")]
                    extern "C" {
                        #[link_name = "create-promise"]
                        fn wit_import(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0);
                    let l1 = *ptr0.add(0).cast::<i64>();
                    let l2 = *ptr0.add(8).cast::<i64>();
                    let l3 = *ptr0.add(16).cast::<*mut u8>();
                    let l4 = *ptr0.add(20).cast::<usize>();
                    let len5 = l4;
                    let bytes5 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);
                    let l6 = *ptr0.add(24).cast::<i64>();
                    PromiseId {
                        worker_id: WorkerId {
                            component_id: ComponentId {
                                uuid: Uuid {
                                    high_bits: l1 as u64,
                                    low_bits: l2 as u64,
                                },
                            },
                            worker_name: _rt::string_lift(bytes5),
                        },
                        oplog_idx: l6 as u64,
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Suspends execution until the given promise gets completed, and returns the payload passed to
            /// the promise completion.
            pub fn await_promise(promise_id: &PromiseId) -> _rt::Vec<u8> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                    let PromiseId { worker_id: worker_id0, oplog_idx: oplog_idx0 } = promise_id;
                    let WorkerId {
                        component_id: component_id1,
                        worker_name: worker_name1,
                    } = worker_id0;
                    let ComponentId { uuid: uuid2 } = component_id1;
                    let Uuid { high_bits: high_bits3, low_bits: low_bits3 } = uuid2;
                    let vec4 = worker_name1;
                    let ptr4 = vec4.as_ptr().cast::<u8>();
                    let len4 = vec4.len();
                    let ptr5 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.5")]
                    extern "C" {
                        #[link_name = "await-promise"]
                        fn wit_import(
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                            _: i64,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(
                        _: i64,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                        _: i64,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    wit_import(
                        _rt::as_i64(high_bits3),
                        _rt::as_i64(low_bits3),
                        ptr4.cast_mut(),
                        len4,
                        _rt::as_i64(oplog_idx0),
                        ptr5,
                    );
                    let l6 = *ptr5.add(0).cast::<*mut u8>();
                    let l7 = *ptr5.add(4).cast::<usize>();
                    let len8 = l7;
                    _rt::Vec::from_raw_parts(l6.cast(), len8, len8)
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Checks whether the given promise is completed. If not, it returns None. If the promise is completed,
            /// it returns the payload passed to the promise completion.
            pub fn poll_promise(promise_id: &PromiseId) -> Option<_rt::Vec<u8>> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                    let PromiseId { worker_id: worker_id0, oplog_idx: oplog_idx0 } = promise_id;
                    let WorkerId {
                        component_id: component_id1,
                        worker_name: worker_name1,
                    } = worker_id0;
                    let ComponentId { uuid: uuid2 } = component_id1;
                    let Uuid { high_bits: high_bits3, low_bits: low_bits3 } = uuid2;
                    let vec4 = worker_name1;
                    let ptr4 = vec4.as_ptr().cast::<u8>();
                    let len4 = vec4.len();
                    let ptr5 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.5")]
                    extern "C" {
                        #[link_name = "poll-promise"]
                        fn wit_import(
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                            _: i64,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(
                        _: i64,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                        _: i64,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    wit_import(
                        _rt::as_i64(high_bits3),
                        _rt::as_i64(low_bits3),
                        ptr4.cast_mut(),
                        len4,
                        _rt::as_i64(oplog_idx0),
                        ptr5,
                    );
                    let l6 = i32::from(*ptr5.add(0).cast::<u8>());
                    match l6 {
                        0 => None,
                        1 => {
                            let e = {
                                let l7 = *ptr5.add(4).cast::<*mut u8>();
                                let l8 = *ptr5.add(8).cast::<usize>();
                                let len9 = l8;
                                _rt::Vec::from_raw_parts(l7.cast(), len9, len9)
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Completes the given promise with the given payload. Returns true if the promise was completed, false
            /// if the promise was already completed. The payload is passed to the worker that is awaiting the promise.
            pub fn complete_promise(promise_id: &PromiseId, data: &[u8]) -> bool {
                unsafe {
                    let PromiseId { worker_id: worker_id0, oplog_idx: oplog_idx0 } = promise_id;
                    let WorkerId {
                        component_id: component_id1,
                        worker_name: worker_name1,
                    } = worker_id0;
                    let ComponentId { uuid: uuid2 } = component_id1;
                    let Uuid { high_bits: high_bits3, low_bits: low_bits3 } = uuid2;
                    let vec4 = worker_name1;
                    let ptr4 = vec4.as_ptr().cast::<u8>();
                    let len4 = vec4.len();
                    let vec5 = data;
                    let ptr5 = vec5.as_ptr().cast::<u8>();
                    let len5 = vec5.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.5")]
                    extern "C" {
                        #[link_name = "complete-promise"]
                        fn wit_import(
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                        ) -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(
                        _: i64,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                    ) -> i32 {
                        unreachable!()
                    }
                    let ret = wit_import(
                        _rt::as_i64(high_bits3),
                        _rt::as_i64(low_bits3),
                        ptr4.cast_mut(),
                        len4,
                        _rt::as_i64(oplog_idx0),
                        ptr5.cast_mut(),
                        len5,
                    );
                    _rt::bool_lift(ret as u8)
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Deletes the given promise
            pub fn delete_promise(promise_id: &PromiseId) {
                unsafe {
                    let PromiseId { worker_id: worker_id0, oplog_idx: oplog_idx0 } = promise_id;
                    let WorkerId {
                        component_id: component_id1,
                        worker_name: worker_name1,
                    } = worker_id0;
                    let ComponentId { uuid: uuid2 } = component_id1;
                    let Uuid { high_bits: high_bits3, low_bits: low_bits3 } = uuid2;
                    let vec4 = worker_name1;
                    let ptr4 = vec4.as_ptr().cast::<u8>();
                    let len4 = vec4.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.5")]
                    extern "C" {
                        #[link_name = "delete-promise"]
                        fn wit_import(_: i64, _: i64, _: *mut u8, _: usize, _: i64);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i64, _: i64, _: *mut u8, _: usize, _: i64) {
                        unreachable!()
                    }
                    wit_import(
                        _rt::as_i64(high_bits3),
                        _rt::as_i64(low_bits3),
                        ptr4.cast_mut(),
                        len4,
                        _rt::as_i64(oplog_idx0),
                    );
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Returns the current position in the persistent op log
            pub fn get_oplog_index() -> OplogIndex {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.5")]
                    extern "C" {
                        #[link_name = "get-oplog-index"]
                        fn wit_import() -> i64;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import() -> i64 {
                        unreachable!()
                    }
                    let ret = wit_import();
                    ret as u64
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Makes the current worker travel back in time and continue execution from the given position in the persistent
            /// op log.
            pub fn set_oplog_index(oplog_idx: OplogIndex) {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.5")]
                    extern "C" {
                        #[link_name = "set-oplog-index"]
                        fn wit_import(_: i64);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i64) {
                        unreachable!()
                    }
                    wit_import(_rt::as_i64(oplog_idx));
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Blocks the execution until the oplog has been written to at least the specified number of replicas,
            /// or the maximum number of replicas if the requested number is higher.
            pub fn oplog_commit(replicas: u8) {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.5")]
                    extern "C" {
                        #[link_name = "oplog-commit"]
                        fn wit_import(_: i32);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i32) {
                        unreachable!()
                    }
                    wit_import(_rt::as_i32(&replicas));
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Marks the beginning of an atomic operation.
            /// In case of a failure within the region selected by `mark-begin-operation` and `mark-end-operation`
            /// the whole region will be reexecuted on retry.
            /// The end of the region is when `mark-end-operation` is called with the returned oplog-index.
            pub fn mark_begin_operation() -> OplogIndex {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.5")]
                    extern "C" {
                        #[link_name = "mark-begin-operation"]
                        fn wit_import() -> i64;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import() -> i64 {
                        unreachable!()
                    }
                    let ret = wit_import();
                    ret as u64
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Commits this atomic operation. After `mark-end-operation` is called for a given index, further calls
            /// with the same parameter will do nothing.
            pub fn mark_end_operation(begin: OplogIndex) {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.5")]
                    extern "C" {
                        #[link_name = "mark-end-operation"]
                        fn wit_import(_: i64);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i64) {
                        unreachable!()
                    }
                    wit_import(_rt::as_i64(begin));
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Gets the current retry policy associated with the worker
            pub fn get_retry_policy() -> RetryPolicy {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 48]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 48]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.5")]
                    extern "C" {
                        #[link_name = "get-retry-policy"]
                        fn wit_import(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0);
                    let l1 = *ptr0.add(0).cast::<i32>();
                    let l2 = *ptr0.add(8).cast::<i64>();
                    let l3 = *ptr0.add(16).cast::<i64>();
                    let l4 = *ptr0.add(24).cast::<f64>();
                    let l5 = i32::from(*ptr0.add(32).cast::<u8>());
                    RetryPolicy {
                        max_attempts: l1 as u32,
                        min_delay: l2 as u64,
                        max_delay: l3 as u64,
                        multiplier: l4,
                        max_jitter_factor: match l5 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l6 = *ptr0.add(40).cast::<f64>();
                                    l6
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Overrides the current retry policy associated with the worker. Following this call, `get-retry-policy` will return the
            /// new retry policy.
            pub fn set_retry_policy(new_retry_policy: RetryPolicy) {
                unsafe {
                    let RetryPolicy {
                        max_attempts: max_attempts0,
                        min_delay: min_delay0,
                        max_delay: max_delay0,
                        multiplier: multiplier0,
                        max_jitter_factor: max_jitter_factor0,
                    } = new_retry_policy;
                    let (result1_0, result1_1) = match max_jitter_factor0 {
                        Some(e) => (1i32, _rt::as_f64(e)),
                        None => (0i32, 0.0f64),
                    };
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.5")]
                    extern "C" {
                        #[link_name = "set-retry-policy"]
                        fn wit_import(_: i32, _: i64, _: i64, _: f64, _: i32, _: f64);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i32, _: i64, _: i64, _: f64, _: i32, _: f64) {
                        unreachable!()
                    }
                    wit_import(
                        _rt::as_i32(max_attempts0),
                        _rt::as_i64(min_delay0),
                        _rt::as_i64(max_delay0),
                        _rt::as_f64(multiplier0),
                        result1_0,
                        result1_1,
                    );
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Gets the worker's current persistence level.
            pub fn get_oplog_persistence_level() -> PersistenceLevel {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.5")]
                    extern "C" {
                        #[link_name = "get-oplog-persistence-level"]
                        fn wit_import() -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import() -> i32 {
                        unreachable!()
                    }
                    let ret = wit_import();
                    let v0 = match ret {
                        0 => PersistenceLevel::PersistNothing,
                        1 => PersistenceLevel::PersistRemoteSideEffects,
                        n => {
                            debug_assert_eq!(n, 2, "invalid enum discriminant");
                            PersistenceLevel::Smart
                        }
                    };
                    v0
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Sets the worker's current persistence level. This can increase the performance of execution in cases where durable
            /// execution is not required.
            pub fn set_oplog_persistence_level(new_persistence_level: PersistenceLevel) {
                unsafe {
                    let result0 = match new_persistence_level {
                        PersistenceLevel::PersistNothing => 0i32,
                        PersistenceLevel::PersistRemoteSideEffects => 1i32,
                        PersistenceLevel::Smart => 2i32,
                    };
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.5")]
                    extern "C" {
                        #[link_name = "set-oplog-persistence-level"]
                        fn wit_import(_: i32);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i32) {
                        unreachable!()
                    }
                    wit_import(result0);
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Gets the current idempotence mode. See `set-idempotence-mode` for details.
            pub fn get_idempotence_mode() -> bool {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.5")]
                    extern "C" {
                        #[link_name = "get-idempotence-mode"]
                        fn wit_import() -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import() -> i32 {
                        unreachable!()
                    }
                    let ret = wit_import();
                    _rt::bool_lift(ret as u8)
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Sets the current idempotence mode. The default is true.
            /// True means side-effects are treated idempotent and Golem guarantees at-least-once semantics.
            /// In case of false the executor provides at-most-once semantics, failing the worker in case it is
            /// not known if the side effect was already executed.
            pub fn set_idempotence_mode(idempotent: bool) {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.5")]
                    extern "C" {
                        #[link_name = "set-idempotence-mode"]
                        fn wit_import(_: i32);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i32) {
                        unreachable!()
                    }
                    wit_import(
                        match &idempotent {
                            true => 1,
                            false => 0,
                        },
                    );
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Generates an idempotency key. This operation will never be replayed —
            /// i.e. not only is this key generated, but it is persisted and committed, such that the key can be used in third-party systems (e.g. payment processing)
            /// to introduce idempotence.
            pub fn generate_idempotency_key() -> Uuid {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.5")]
                    extern "C" {
                        #[link_name = "generate-idempotency-key"]
                        fn wit_import(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0);
                    let l1 = *ptr0.add(0).cast::<i64>();
                    let l2 = *ptr0.add(8).cast::<i64>();
                    Uuid {
                        high_bits: l1 as u64,
                        low_bits: l2 as u64,
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Initiates an update attempt for the given worker. The function returns immediately once the request has been processed,
            /// not waiting for the worker to get updated.
            pub fn update_worker(
                worker_id: &WorkerId,
                target_version: ComponentVersion,
                mode: UpdateMode,
            ) {
                unsafe {
                    let WorkerId {
                        component_id: component_id0,
                        worker_name: worker_name0,
                    } = worker_id;
                    let ComponentId { uuid: uuid1 } = component_id0;
                    let Uuid { high_bits: high_bits2, low_bits: low_bits2 } = uuid1;
                    let vec3 = worker_name0;
                    let ptr3 = vec3.as_ptr().cast::<u8>();
                    let len3 = vec3.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.5")]
                    extern "C" {
                        #[link_name = "update-worker"]
                        fn wit_import(
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                            _: i64,
                            _: i32,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i64, _: i64, _: *mut u8, _: usize, _: i64, _: i32) {
                        unreachable!()
                    }
                    wit_import(
                        _rt::as_i64(high_bits2),
                        _rt::as_i64(low_bits2),
                        ptr3.cast_mut(),
                        len3,
                        _rt::as_i64(target_version),
                        mode.clone() as i32,
                    );
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Get current worker metadata
            pub fn get_self_metadata() -> WorkerMetadata {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 64]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 64]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.5")]
                    extern "C" {
                        #[link_name = "get-self-metadata"]
                        fn wit_import(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0);
                    let l1 = *ptr0.add(0).cast::<i64>();
                    let l2 = *ptr0.add(8).cast::<i64>();
                    let l3 = *ptr0.add(16).cast::<*mut u8>();
                    let l4 = *ptr0.add(20).cast::<usize>();
                    let len5 = l4;
                    let bytes5 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);
                    let l6 = *ptr0.add(24).cast::<*mut u8>();
                    let l7 = *ptr0.add(28).cast::<usize>();
                    let base11 = l6;
                    let len11 = l7;
                    let mut result11 = _rt::Vec::with_capacity(len11);
                    for i in 0..len11 {
                        let base = base11.add(i * 8);
                        let e11 = {
                            let l8 = *base.add(0).cast::<*mut u8>();
                            let l9 = *base.add(4).cast::<usize>();
                            let len10 = l9;
                            let bytes10 = _rt::Vec::from_raw_parts(
                                l8.cast(),
                                len10,
                                len10,
                            );
                            _rt::string_lift(bytes10)
                        };
                        result11.push(e11);
                    }
                    _rt::cabi_dealloc(base11, len11 * 8, 4);
                    let l12 = *ptr0.add(32).cast::<*mut u8>();
                    let l13 = *ptr0.add(36).cast::<usize>();
                    let base20 = l12;
                    let len20 = l13;
                    let mut result20 = _rt::Vec::with_capacity(len20);
                    for i in 0..len20 {
                        let base = base20.add(i * 16);
                        let e20 = {
                            let l14 = *base.add(0).cast::<*mut u8>();
                            let l15 = *base.add(4).cast::<usize>();
                            let len16 = l15;
                            let bytes16 = _rt::Vec::from_raw_parts(
                                l14.cast(),
                                len16,
                                len16,
                            );
                            let l17 = *base.add(8).cast::<*mut u8>();
                            let l18 = *base.add(12).cast::<usize>();
                            let len19 = l18;
                            let bytes19 = _rt::Vec::from_raw_parts(
                                l17.cast(),
                                len19,
                                len19,
                            );
                            (_rt::string_lift(bytes16), _rt::string_lift(bytes19))
                        };
                        result20.push(e20);
                    }
                    _rt::cabi_dealloc(base20, len20 * 16, 4);
                    let l21 = i32::from(*ptr0.add(40).cast::<u8>());
                    let l22 = *ptr0.add(48).cast::<i64>();
                    let l23 = *ptr0.add(56).cast::<i64>();
                    WorkerMetadata {
                        worker_id: WorkerId {
                            component_id: ComponentId {
                                uuid: Uuid {
                                    high_bits: l1 as u64,
                                    low_bits: l2 as u64,
                                },
                            },
                            worker_name: _rt::string_lift(bytes5),
                        },
                        args: result11,
                        env: result20,
                        status: WorkerStatus::_lift(l21 as u8),
                        component_version: l22 as u64,
                        retry_count: l23 as u64,
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Get worker metadata
            pub fn get_worker_metadata(worker_id: &WorkerId) -> Option<WorkerMetadata> {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 72]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 72]);
                    let WorkerId {
                        component_id: component_id0,
                        worker_name: worker_name0,
                    } = worker_id;
                    let ComponentId { uuid: uuid1 } = component_id0;
                    let Uuid { high_bits: high_bits2, low_bits: low_bits2 } = uuid1;
                    let vec3 = worker_name0;
                    let ptr3 = vec3.as_ptr().cast::<u8>();
                    let len3 = vec3.len();
                    let ptr4 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.5")]
                    extern "C" {
                        #[link_name = "get-worker-metadata"]
                        fn wit_import(_: i64, _: i64, _: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i64, _: i64, _: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(
                        _rt::as_i64(high_bits2),
                        _rt::as_i64(low_bits2),
                        ptr3.cast_mut(),
                        len3,
                        ptr4,
                    );
                    let l5 = i32::from(*ptr4.add(0).cast::<u8>());
                    match l5 {
                        0 => None,
                        1 => {
                            let e = {
                                let l6 = *ptr4.add(8).cast::<i64>();
                                let l7 = *ptr4.add(16).cast::<i64>();
                                let l8 = *ptr4.add(24).cast::<*mut u8>();
                                let l9 = *ptr4.add(28).cast::<usize>();
                                let len10 = l9;
                                let bytes10 = _rt::Vec::from_raw_parts(
                                    l8.cast(),
                                    len10,
                                    len10,
                                );
                                let l11 = *ptr4.add(32).cast::<*mut u8>();
                                let l12 = *ptr4.add(36).cast::<usize>();
                                let base16 = l11;
                                let len16 = l12;
                                let mut result16 = _rt::Vec::with_capacity(len16);
                                for i in 0..len16 {
                                    let base = base16.add(i * 8);
                                    let e16 = {
                                        let l13 = *base.add(0).cast::<*mut u8>();
                                        let l14 = *base.add(4).cast::<usize>();
                                        let len15 = l14;
                                        let bytes15 = _rt::Vec::from_raw_parts(
                                            l13.cast(),
                                            len15,
                                            len15,
                                        );
                                        _rt::string_lift(bytes15)
                                    };
                                    result16.push(e16);
                                }
                                _rt::cabi_dealloc(base16, len16 * 8, 4);
                                let l17 = *ptr4.add(40).cast::<*mut u8>();
                                let l18 = *ptr4.add(44).cast::<usize>();
                                let base25 = l17;
                                let len25 = l18;
                                let mut result25 = _rt::Vec::with_capacity(len25);
                                for i in 0..len25 {
                                    let base = base25.add(i * 16);
                                    let e25 = {
                                        let l19 = *base.add(0).cast::<*mut u8>();
                                        let l20 = *base.add(4).cast::<usize>();
                                        let len21 = l20;
                                        let bytes21 = _rt::Vec::from_raw_parts(
                                            l19.cast(),
                                            len21,
                                            len21,
                                        );
                                        let l22 = *base.add(8).cast::<*mut u8>();
                                        let l23 = *base.add(12).cast::<usize>();
                                        let len24 = l23;
                                        let bytes24 = _rt::Vec::from_raw_parts(
                                            l22.cast(),
                                            len24,
                                            len24,
                                        );
                                        (_rt::string_lift(bytes21), _rt::string_lift(bytes24))
                                    };
                                    result25.push(e25);
                                }
                                _rt::cabi_dealloc(base25, len25 * 16, 4);
                                let l26 = i32::from(*ptr4.add(48).cast::<u8>());
                                let l27 = *ptr4.add(56).cast::<i64>();
                                let l28 = *ptr4.add(64).cast::<i64>();
                                WorkerMetadata {
                                    worker_id: WorkerId {
                                        component_id: ComponentId {
                                            uuid: Uuid {
                                                high_bits: l6 as u64,
                                                low_bits: l7 as u64,
                                            },
                                        },
                                        worker_name: _rt::string_lift(bytes10),
                                    },
                                    args: result16,
                                    env: result25,
                                    status: WorkerStatus::_lift(l26 as u8),
                                    component_version: l27 as u64,
                                    retry_count: l28 as u64,
                                }
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Fork a worker to another worker at a given oplog index
            pub fn fork_worker(
                source_worker_id: &WorkerId,
                target_worker_id: &WorkerId,
                oplog_idx_cut_off: OplogIndex,
            ) {
                unsafe {
                    let WorkerId {
                        component_id: component_id0,
                        worker_name: worker_name0,
                    } = source_worker_id;
                    let ComponentId { uuid: uuid1 } = component_id0;
                    let Uuid { high_bits: high_bits2, low_bits: low_bits2 } = uuid1;
                    let vec3 = worker_name0;
                    let ptr3 = vec3.as_ptr().cast::<u8>();
                    let len3 = vec3.len();
                    let WorkerId {
                        component_id: component_id4,
                        worker_name: worker_name4,
                    } = target_worker_id;
                    let ComponentId { uuid: uuid5 } = component_id4;
                    let Uuid { high_bits: high_bits6, low_bits: low_bits6 } = uuid5;
                    let vec7 = worker_name4;
                    let ptr7 = vec7.as_ptr().cast::<u8>();
                    let len7 = vec7.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.5")]
                    extern "C" {
                        #[link_name = "fork-worker"]
                        fn wit_import(
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                            _: i64,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(
                        _: i64,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                        _: i64,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                        _: i64,
                    ) {
                        unreachable!()
                    }
                    wit_import(
                        _rt::as_i64(high_bits2),
                        _rt::as_i64(low_bits2),
                        ptr3.cast_mut(),
                        len3,
                        _rt::as_i64(high_bits6),
                        _rt::as_i64(low_bits6),
                        ptr7.cast_mut(),
                        len7,
                        _rt::as_i64(oplog_idx_cut_off),
                    );
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Revert a worker to a previous state
            pub fn revert_worker(
                worker_id: &WorkerId,
                revert_target: RevertWorkerTarget,
            ) {
                unsafe {
                    let WorkerId {
                        component_id: component_id0,
                        worker_name: worker_name0,
                    } = worker_id;
                    let ComponentId { uuid: uuid1 } = component_id0;
                    let Uuid { high_bits: high_bits2, low_bits: low_bits2 } = uuid1;
                    let vec3 = worker_name0;
                    let ptr3 = vec3.as_ptr().cast::<u8>();
                    let len3 = vec3.len();
                    let (result4_0, result4_1) = match revert_target {
                        RevertWorkerTarget::RevertToOplogIndex(e) => {
                            (0i32, _rt::as_i64(e))
                        }
                        RevertWorkerTarget::RevertLastInvocations(e) => {
                            (1i32, _rt::as_i64(e))
                        }
                    };
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.5")]
                    extern "C" {
                        #[link_name = "revert-worker"]
                        fn wit_import(
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: i64,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i64, _: i64, _: *mut u8, _: usize, _: i32, _: i64) {
                        unreachable!()
                    }
                    wit_import(
                        _rt::as_i64(high_bits2),
                        _rt::as_i64(low_bits2),
                        ptr3.cast_mut(),
                        len3,
                        result4_0,
                        result4_1,
                    );
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Get the component-id for a given component reference.
            /// Returns none when no component with the specified reference exists.
            /// The syntax of the component reference is implementation dependent.
            ///
            /// Golem OSS: "{component_name}"
            /// Golem Cloud:
            /// 1: "{component_name}" -> will resolve in current account and project
            /// 2: "{project_name}/{component_name}" -> will resolve in current account
            /// 3: "{account_id}/{project_name}/{component_name}"
            pub fn resolve_component_id(
                component_reference: &str,
            ) -> Option<ComponentId> {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 24]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 24]);
                    let vec0 = component_reference;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.5")]
                    extern "C" {
                        #[link_name = "resolve-component-id"]
                        fn wit_import(_: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0.cast_mut(), len0, ptr1);
                    let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                    match l2 {
                        0 => None,
                        1 => {
                            let e = {
                                let l3 = *ptr1.add(8).cast::<i64>();
                                let l4 = *ptr1.add(16).cast::<i64>();
                                ComponentId {
                                    uuid: Uuid {
                                        high_bits: l3 as u64,
                                        low_bits: l4 as u64,
                                    },
                                }
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Get the worker-id for a given component and worker name.
            /// Returns none when no component for the specified reference exists.
            pub fn resolve_worker_id(
                component_reference: &str,
                worker_name: &str,
            ) -> Option<WorkerId> {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 32]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 32]);
                    let vec0 = component_reference;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let vec1 = worker_name;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let ptr2 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.5")]
                    extern "C" {
                        #[link_name = "resolve-worker-id"]
                        fn wit_import(
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    wit_import(ptr0.cast_mut(), len0, ptr1.cast_mut(), len1, ptr2);
                    let l3 = i32::from(*ptr2.add(0).cast::<u8>());
                    match l3 {
                        0 => None,
                        1 => {
                            let e = {
                                let l4 = *ptr2.add(8).cast::<i64>();
                                let l5 = *ptr2.add(16).cast::<i64>();
                                let l6 = *ptr2.add(24).cast::<*mut u8>();
                                let l7 = *ptr2.add(28).cast::<usize>();
                                let len8 = l7;
                                let bytes8 = _rt::Vec::from_raw_parts(
                                    l6.cast(),
                                    len8,
                                    len8,
                                );
                                WorkerId {
                                    component_id: ComponentId {
                                        uuid: Uuid {
                                            high_bits: l4 as u64,
                                            low_bits: l5 as u64,
                                        },
                                    },
                                    worker_name: _rt::string_lift(bytes8),
                                }
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Get the worker-id for a given component and worker name.
            /// Returns none when no component for the specified component-reference or no worker with the specified worker-name exists.
            pub fn resolve_worker_id_strict(
                component_reference: &str,
                worker_name: &str,
            ) -> Option<WorkerId> {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 32]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 32]);
                    let vec0 = component_reference;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let vec1 = worker_name;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let ptr2 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.5")]
                    extern "C" {
                        #[link_name = "resolve-worker-id-strict"]
                        fn wit_import(
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    wit_import(ptr0.cast_mut(), len0, ptr1.cast_mut(), len1, ptr2);
                    let l3 = i32::from(*ptr2.add(0).cast::<u8>());
                    match l3 {
                        0 => None,
                        1 => {
                            let e = {
                                let l4 = *ptr2.add(8).cast::<i64>();
                                let l5 = *ptr2.add(16).cast::<i64>();
                                let l6 = *ptr2.add(24).cast::<*mut u8>();
                                let l7 = *ptr2.add(28).cast::<usize>();
                                let len8 = l7;
                                let bytes8 = _rt::Vec::from_raw_parts(
                                    l6.cast(),
                                    len8,
                                    len8,
                                );
                                WorkerId {
                                    component_id: ComponentId {
                                        uuid: Uuid {
                                            high_bits: l4 as u64,
                                            low_bits: l5 as u64,
                                        },
                                    },
                                    worker_name: _rt::string_lift(bytes8),
                                }
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Construct an uri for a given worker id.
            pub fn worker_uri(worker_id: &WorkerId) -> Uri {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                    let WorkerId {
                        component_id: component_id0,
                        worker_name: worker_name0,
                    } = worker_id;
                    let ComponentId { uuid: uuid1 } = component_id0;
                    let Uuid { high_bits: high_bits2, low_bits: low_bits2 } = uuid1;
                    let vec3 = worker_name0;
                    let ptr3 = vec3.as_ptr().cast::<u8>();
                    let len3 = vec3.len();
                    let ptr4 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.5")]
                    extern "C" {
                        #[link_name = "worker-uri"]
                        fn wit_import(_: i64, _: i64, _: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i64, _: i64, _: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(
                        _rt::as_i64(high_bits2),
                        _rt::as_i64(low_bits2),
                        ptr3.cast_mut(),
                        len3,
                        ptr4,
                    );
                    let l5 = *ptr4.add(0).cast::<*mut u8>();
                    let l6 = *ptr4.add(4).cast::<usize>();
                    let len7 = l6;
                    let bytes7 = _rt::Vec::from_raw_parts(l5.cast(), len7, len7);
                    super::super::super::golem::rpc::types::Uri {
                        value: _rt::string_lift(bytes7),
                    }
                }
            }
        }
        /// Invocation context support
        #[allow(dead_code, clippy::all)]
        pub mod context {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Datetime = super::super::super::wasi::clocks::wall_clock::Datetime;
            /// Represents a unit of work or operation
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Span {
                handle: _rt::Resource<Span>,
            }
            impl Span {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for Span {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:api/context@1.1.5")]
                        extern "C" {
                            #[link_name = "[resource-drop]span"]
                            fn drop(_: u32);
                        }
                        drop(_handle);
                    }
                }
            }
            /// Represents an invocation context wich allows querying the stack of attributes
            /// created by automatic and user-defined spans.
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct InvocationContext {
                handle: _rt::Resource<InvocationContext>,
            }
            impl InvocationContext {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for InvocationContext {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:api/context@1.1.5")]
                        extern "C" {
                            #[link_name = "[resource-drop]invocation-context"]
                            fn drop(_: u32);
                        }
                        drop(_handle);
                    }
                }
            }
            /// Possible span attribute value types
            #[derive(Clone)]
            pub enum AttributeValue {
                /// A string value
                String(_rt::String),
            }
            impl ::core::fmt::Debug for AttributeValue {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        AttributeValue::String(e) => {
                            f.debug_tuple("AttributeValue::String").field(e).finish()
                        }
                    }
                }
            }
            /// An attribute of a span
            #[derive(Clone)]
            pub struct Attribute {
                pub key: _rt::String,
                pub value: AttributeValue,
            }
            impl ::core::fmt::Debug for Attribute {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Attribute")
                        .field("key", &self.key)
                        .field("value", &self.value)
                        .finish()
                }
            }
            /// A chain of attribute values, the first element representing the most recent value
            #[derive(Clone)]
            pub struct AttributeChain {
                pub key: _rt::String,
                pub values: _rt::Vec<AttributeValue>,
            }
            impl ::core::fmt::Debug for AttributeChain {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AttributeChain")
                        .field("key", &self.key)
                        .field("values", &self.values)
                        .finish()
                }
            }
            /// The trace represented by a 16 bytes hexadecimal string
            pub type TraceId = _rt::String;
            /// The span represented by a 8 bytes hexadecimal string
            pub type SpanId = _rt::String;
            #[allow(unused_unsafe, clippy::all)]
            /// Starts a new `span` with the given name, as a child of the current invocation context
            pub fn start_span(name: &str) -> Span {
                unsafe {
                    let vec0 = name;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/context@1.1.5")]
                    extern "C" {
                        #[link_name = "start-span"]
                        fn wit_import(_: *mut u8, _: usize) -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize) -> i32 {
                        unreachable!()
                    }
                    let ret = wit_import(ptr0.cast_mut(), len0);
                    Span::from_handle(ret as u32)
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Gets the current invocation context
            ///
            /// The function call captures the current context; if new spans are started, the returned `invocation-context` instance will not
            /// reflect that.
            pub fn current_context() -> InvocationContext {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/context@1.1.5")]
                    extern "C" {
                        #[link_name = "current-context"]
                        fn wit_import() -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import() -> i32 {
                        unreachable!()
                    }
                    let ret = wit_import();
                    InvocationContext::from_handle(ret as u32)
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Allows or disallows forwarding of trace context headers in outgoing HTTP requests
            ///
            /// Returns the previous value of the setting
            pub fn allow_forwarding_trace_context_headers(allow: bool) -> bool {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/context@1.1.5")]
                    extern "C" {
                        #[link_name = "allow-forwarding-trace-context-headers"]
                        fn wit_import(_: i32) -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i32) -> i32 {
                        unreachable!()
                    }
                    let ret = wit_import(
                        match &allow {
                            true => 1,
                            false => 0,
                        },
                    );
                    _rt::bool_lift(ret as u8)
                }
            }
            impl Span {
                #[allow(unused_unsafe, clippy::all)]
                /// Gets the starting time of the span
                pub fn started_at(&self) -> Datetime {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 16],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/context@1.1.5")]
                        extern "C" {
                            #[link_name = "[method]span.started-at"]
                            fn wit_import(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<i64>();
                        let l2 = *ptr0.add(8).cast::<i32>();
                        super::super::super::wasi::clocks::wall_clock::Datetime {
                            seconds: l1 as u64,
                            nanoseconds: l2 as u32,
                        }
                    }
                }
            }
            impl Span {
                #[allow(unused_unsafe, clippy::all)]
                /// Set an attribute on the span
                pub fn set_attribute(&self, name: &str, value: &AttributeValue) {
                    unsafe {
                        let vec0 = name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let (result2_0, result2_1, result2_2) = match value {
                            AttributeValue::String(e) => {
                                let vec1 = e;
                                let ptr1 = vec1.as_ptr().cast::<u8>();
                                let len1 = vec1.len();
                                (0i32, ptr1.cast_mut(), len1)
                            }
                        };
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/context@1.1.5")]
                        extern "C" {
                            #[link_name = "[method]span.set-attribute"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            result2_0,
                            result2_1,
                            result2_2,
                        );
                    }
                }
            }
            impl Span {
                #[allow(unused_unsafe, clippy::all)]
                /// Set multiple attributes on the span
                pub fn set_attributes(&self, attributes: &[Attribute]) {
                    unsafe {
                        let vec3 = attributes;
                        let len3 = vec3.len();
                        let layout3 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec3.len() * 20,
                            4,
                        );
                        let result3 = if layout3.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout3).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout3);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec3.into_iter().enumerate() {
                            let base = result3.add(i * 20);
                            {
                                let Attribute { key: key0, value: value0 } = e;
                                let vec1 = key0;
                                let ptr1 = vec1.as_ptr().cast::<u8>();
                                let len1 = vec1.len();
                                *base.add(4).cast::<usize>() = len1;
                                *base.add(0).cast::<*mut u8>() = ptr1.cast_mut();
                                match value0 {
                                    AttributeValue::String(e) => {
                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                        let vec2 = e;
                                        let ptr2 = vec2.as_ptr().cast::<u8>();
                                        let len2 = vec2.len();
                                        *base.add(16).cast::<usize>() = len2;
                                        *base.add(12).cast::<*mut u8>() = ptr2.cast_mut();
                                    }
                                }
                            }
                        }
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/context@1.1.5")]
                        extern "C" {
                            #[link_name = "[method]span.set-attributes"]
                            fn wit_import(_: i32, _: *mut u8, _: usize);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, result3, len3);
                        if layout3.size() != 0 {
                            _rt::alloc::dealloc(result3.cast(), layout3);
                        }
                    }
                }
            }
            impl Span {
                #[allow(unused_unsafe, clippy::all)]
                /// Early finishes the span; otherwise it will be finished when the resource is dropped
                pub fn finish(&self) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/context@1.1.5")]
                        extern "C" {
                            #[link_name = "[method]span.finish"]
                            fn wit_import(_: i32);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32);
                    }
                }
            }
            impl InvocationContext {
                #[allow(unused_unsafe, clippy::all)]
                /// Gets the current trace id
                pub fn trace_id(&self) -> TraceId {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 8],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/context@1.1.5")]
                        extern "C" {
                            #[link_name = "[method]invocation-context.trace-id"]
                            fn wit_import(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let len3 = l2;
                        let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);
                        _rt::string_lift(bytes3)
                    }
                }
            }
            impl InvocationContext {
                #[allow(unused_unsafe, clippy::all)]
                /// Gets the current span id
                pub fn span_id(&self) -> SpanId {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 8],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/context@1.1.5")]
                        extern "C" {
                            #[link_name = "[method]invocation-context.span-id"]
                            fn wit_import(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let len3 = l2;
                        let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);
                        _rt::string_lift(bytes3)
                    }
                }
            }
            impl InvocationContext {
                #[allow(unused_unsafe, clippy::all)]
                /// Gets the parent context, if any; allows recursive processing of the invocation context.
                ///
                /// Alternatively, the attribute query methods can return inherited values without having to
                /// traverse the stack manually.
                pub fn parent(&self) -> Option<InvocationContext> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 8],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/context@1.1.5")]
                        extern "C" {
                            #[link_name = "[method]invocation-context.parent"]
                            fn wit_import(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<i32>();
                                    InvocationContext::from_handle(l2 as u32)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl InvocationContext {
                #[allow(unused_unsafe, clippy::all)]
                /// Gets the value of an attribute `key`. If `inherited` is true, the value is searched in the stack of spans,
                /// otherwise only in the current span.
                pub fn get_attribute(
                    &self,
                    key: &str,
                    inherited: bool,
                ) -> Option<AttributeValue> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 16],
                        );
                        let vec0 = key;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/context@1.1.5")]
                        extern "C" {
                            #[link_name = "[method]invocation-context.get-attribute"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            match &inherited {
                                true => 1,
                                false => 0,
                            },
                            ptr1,
                        );
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l3 = i32::from(*ptr1.add(4).cast::<u8>());
                                    let v7 = match l3 {
                                        n => {
                                            debug_assert_eq!(n, 0, "invalid enum discriminant");
                                            let e7 = {
                                                let l4 = *ptr1.add(8).cast::<*mut u8>();
                                                let l5 = *ptr1.add(12).cast::<usize>();
                                                let len6 = l5;
                                                let bytes6 = _rt::Vec::from_raw_parts(
                                                    l4.cast(),
                                                    len6,
                                                    len6,
                                                );
                                                _rt::string_lift(bytes6)
                                            };
                                            AttributeValue::String(e7)
                                        }
                                    };
                                    v7
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl InvocationContext {
                #[allow(unused_unsafe, clippy::all)]
                /// Gets all attributes of the current invocation context. If `inherited` is true, it returns the merged set of attributes, each
                /// key associated with the latest value found in the stack of spans.
                pub fn get_attributes(&self, inherited: bool) -> _rt::Vec<Attribute> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 8],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/context@1.1.5")]
                        extern "C" {
                            #[link_name = "[method]invocation-context.get-attributes"]
                            fn wit_import(_: i32, _: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            match &inherited {
                                true => 1,
                                false => 0,
                            },
                            ptr0,
                        );
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let base11 = l1;
                        let len11 = l2;
                        let mut result11 = _rt::Vec::with_capacity(len11);
                        for i in 0..len11 {
                            let base = base11.add(i * 20);
                            let e11 = {
                                let l3 = *base.add(0).cast::<*mut u8>();
                                let l4 = *base.add(4).cast::<usize>();
                                let len5 = l4;
                                let bytes5 = _rt::Vec::from_raw_parts(
                                    l3.cast(),
                                    len5,
                                    len5,
                                );
                                let l6 = i32::from(*base.add(8).cast::<u8>());
                                let v10 = match l6 {
                                    n => {
                                        debug_assert_eq!(n, 0, "invalid enum discriminant");
                                        let e10 = {
                                            let l7 = *base.add(12).cast::<*mut u8>();
                                            let l8 = *base.add(16).cast::<usize>();
                                            let len9 = l8;
                                            let bytes9 = _rt::Vec::from_raw_parts(
                                                l7.cast(),
                                                len9,
                                                len9,
                                            );
                                            _rt::string_lift(bytes9)
                                        };
                                        AttributeValue::String(e10)
                                    }
                                };
                                Attribute {
                                    key: _rt::string_lift(bytes5),
                                    value: v10,
                                }
                            };
                            result11.push(e11);
                        }
                        _rt::cabi_dealloc(base11, len11 * 20, 4);
                        result11
                    }
                }
            }
            impl InvocationContext {
                #[allow(unused_unsafe, clippy::all)]
                /// Gets the chain of attribute values associated with the given `key`. If the key does not exist in any of the
                /// spans in the invocation context, the list is empty. The chain's first element contains the most recent (innermost) value.
                pub fn get_attribute_chain(
                    &self,
                    key: &str,
                ) -> _rt::Vec<AttributeValue> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 8],
                        );
                        let vec0 = key;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/context@1.1.5")]
                        extern "C" {
                            #[link_name = "[method]invocation-context.get-attribute-chain"]
                            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0, ptr1);
                        let l2 = *ptr1.add(0).cast::<*mut u8>();
                        let l3 = *ptr1.add(4).cast::<usize>();
                        let base9 = l2;
                        let len9 = l3;
                        let mut result9 = _rt::Vec::with_capacity(len9);
                        for i in 0..len9 {
                            let base = base9.add(i * 12);
                            let e9 = {
                                let l4 = i32::from(*base.add(0).cast::<u8>());
                                let v8 = match l4 {
                                    n => {
                                        debug_assert_eq!(n, 0, "invalid enum discriminant");
                                        let e8 = {
                                            let l5 = *base.add(4).cast::<*mut u8>();
                                            let l6 = *base.add(8).cast::<usize>();
                                            let len7 = l6;
                                            let bytes7 = _rt::Vec::from_raw_parts(
                                                l5.cast(),
                                                len7,
                                                len7,
                                            );
                                            _rt::string_lift(bytes7)
                                        };
                                        AttributeValue::String(e8)
                                    }
                                };
                                v8
                            };
                            result9.push(e9);
                        }
                        _rt::cabi_dealloc(base9, len9 * 12, 4);
                        result9
                    }
                }
            }
            impl InvocationContext {
                #[allow(unused_unsafe, clippy::all)]
                /// Gets all values of all attributes of the current invocation context.
                pub fn get_attribute_chains(&self) -> _rt::Vec<AttributeChain> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 8],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/context@1.1.5")]
                        extern "C" {
                            #[link_name = "[method]invocation-context.get-attribute-chains"]
                            fn wit_import(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let base14 = l1;
                        let len14 = l2;
                        let mut result14 = _rt::Vec::with_capacity(len14);
                        for i in 0..len14 {
                            let base = base14.add(i * 16);
                            let e14 = {
                                let l3 = *base.add(0).cast::<*mut u8>();
                                let l4 = *base.add(4).cast::<usize>();
                                let len5 = l4;
                                let bytes5 = _rt::Vec::from_raw_parts(
                                    l3.cast(),
                                    len5,
                                    len5,
                                );
                                let l6 = *base.add(8).cast::<*mut u8>();
                                let l7 = *base.add(12).cast::<usize>();
                                let base13 = l6;
                                let len13 = l7;
                                let mut result13 = _rt::Vec::with_capacity(len13);
                                for i in 0..len13 {
                                    let base = base13.add(i * 12);
                                    let e13 = {
                                        let l8 = i32::from(*base.add(0).cast::<u8>());
                                        let v12 = match l8 {
                                            n => {
                                                debug_assert_eq!(n, 0, "invalid enum discriminant");
                                                let e12 = {
                                                    let l9 = *base.add(4).cast::<*mut u8>();
                                                    let l10 = *base.add(8).cast::<usize>();
                                                    let len11 = l10;
                                                    let bytes11 = _rt::Vec::from_raw_parts(
                                                        l9.cast(),
                                                        len11,
                                                        len11,
                                                    );
                                                    _rt::string_lift(bytes11)
                                                };
                                                AttributeValue::String(e12)
                                            }
                                        };
                                        v12
                                    };
                                    result13.push(e13);
                                }
                                _rt::cabi_dealloc(base13, len13 * 12, 4);
                                AttributeChain {
                                    key: _rt::string_lift(bytes5),
                                    values: result13,
                                }
                            };
                            result14.push(e14);
                        }
                        _rt::cabi_dealloc(base14, len14 * 16, 4);
                        result14
                    }
                }
            }
            impl InvocationContext {
                #[allow(unused_unsafe, clippy::all)]
                /// Gets the W3C Trace Context headers associated with the current invocation context
                pub fn trace_context_headers(
                    &self,
                ) -> _rt::Vec<(_rt::String, _rt::String)> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 8],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/context@1.1.5")]
                        extern "C" {
                            #[link_name = "[method]invocation-context.trace-context-headers"]
                            fn wit_import(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let base9 = l1;
                        let len9 = l2;
                        let mut result9 = _rt::Vec::with_capacity(len9);
                        for i in 0..len9 {
                            let base = base9.add(i * 16);
                            let e9 = {
                                let l3 = *base.add(0).cast::<*mut u8>();
                                let l4 = *base.add(4).cast::<usize>();
                                let len5 = l4;
                                let bytes5 = _rt::Vec::from_raw_parts(
                                    l3.cast(),
                                    len5,
                                    len5,
                                );
                                let l6 = *base.add(8).cast::<*mut u8>();
                                let l7 = *base.add(12).cast::<usize>();
                                let len8 = l7;
                                let bytes8 = _rt::Vec::from_raw_parts(
                                    l6.cast(),
                                    len8,
                                    len8,
                                );
                                (_rt::string_lift(bytes5), _rt::string_lift(bytes8))
                            };
                            result9.push(e9);
                        }
                        _rt::cabi_dealloc(base9, len9 * 16, 4);
                        result9
                    }
                }
            }
        }
        /// Host interface for enumerating and searching for worker oplogs
        #[allow(dead_code, clippy::all)]
        pub mod oplog {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Datetime = super::super::super::wasi::clocks::wall_clock::Datetime;
            pub type WitValue = super::super::super::golem::rpc::types::WitValue;
            pub type AccountId = super::super::super::golem::api::host::AccountId;
            pub type ComponentVersion = super::super::super::golem::api::host::ComponentVersion;
            pub type OplogIndex = super::super::super::golem::api::host::OplogIndex;
            pub type RetryPolicy = super::super::super::golem::api::host::RetryPolicy;
            pub type Uuid = super::super::super::golem::api::host::Uuid;
            pub type WorkerId = super::super::super::golem::api::host::WorkerId;
            pub type Attribute = super::super::super::golem::api::context::Attribute;
            pub type AttributeValue = super::super::super::golem::api::context::AttributeValue;
            pub type SpanId = super::super::super::golem::api::context::SpanId;
            pub type TraceId = super::super::super::golem::api::context::TraceId;
            #[derive(Clone, Copy)]
            pub enum WrappedFunctionType {
                /// The side-effect reads from the worker's local state (for example local file system,
                /// random generator, etc.)
                ReadLocal,
                /// The side-effect writes to the worker's local state (for example local file system)
                WriteLocal,
                /// The side-effect reads from external state (for example a key-value store)
                ReadRemote,
                /// The side-effect manipulates external state (for example an RPC call)
                WriteRemote,
                /// The side-effect manipulates external state through multiple invoked functions (for example
                /// a HTTP request where reading the response involves multiple host function calls)
                ///
                /// On the first invocation of the batch, the parameter should be `None` - this triggers
                /// writing a `BeginRemoteWrite` entry in the oplog. Followup invocations should contain
                /// this entry's index as the parameter. In batched remote writes it is the caller's responsibility
                /// to manually write an `EndRemoteWrite` entry (using `end_function`) when the operation is completed.
                WriteRemoteBatched(Option<OplogIndex>),
            }
            impl ::core::fmt::Debug for WrappedFunctionType {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        WrappedFunctionType::ReadLocal => {
                            f.debug_tuple("WrappedFunctionType::ReadLocal").finish()
                        }
                        WrappedFunctionType::WriteLocal => {
                            f.debug_tuple("WrappedFunctionType::WriteLocal").finish()
                        }
                        WrappedFunctionType::ReadRemote => {
                            f.debug_tuple("WrappedFunctionType::ReadRemote").finish()
                        }
                        WrappedFunctionType::WriteRemote => {
                            f.debug_tuple("WrappedFunctionType::WriteRemote").finish()
                        }
                        WrappedFunctionType::WriteRemoteBatched(e) => {
                            f.debug_tuple("WrappedFunctionType::WriteRemoteBatched")
                                .field(e)
                                .finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub struct PluginInstallationDescription {
                pub installation_id: Uuid,
                pub name: _rt::String,
                pub version: _rt::String,
                pub parameters: _rt::Vec<(_rt::String, _rt::String)>,
            }
            impl ::core::fmt::Debug for PluginInstallationDescription {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("PluginInstallationDescription")
                        .field("installation-id", &self.installation_id)
                        .field("name", &self.name)
                        .field("version", &self.version)
                        .field("parameters", &self.parameters)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct CreateParameters {
                pub timestamp: Datetime,
                pub worker_id: WorkerId,
                pub component_version: ComponentVersion,
                pub args: _rt::Vec<_rt::String>,
                pub env: _rt::Vec<(_rt::String, _rt::String)>,
                pub account_id: AccountId,
                pub parent: Option<WorkerId>,
                pub component_size: u64,
                pub initial_total_linear_memory_size: u64,
                pub initial_active_plugins: _rt::Vec<PluginInstallationDescription>,
            }
            impl ::core::fmt::Debug for CreateParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("CreateParameters")
                        .field("timestamp", &self.timestamp)
                        .field("worker-id", &self.worker_id)
                        .field("component-version", &self.component_version)
                        .field("args", &self.args)
                        .field("env", &self.env)
                        .field("account-id", &self.account_id)
                        .field("parent", &self.parent)
                        .field("component-size", &self.component_size)
                        .field(
                            "initial-total-linear-memory-size",
                            &self.initial_total_linear_memory_size,
                        )
                        .field("initial-active-plugins", &self.initial_active_plugins)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct ImportedFunctionInvokedParameters {
                pub timestamp: Datetime,
                pub function_name: _rt::String,
                pub request: WitValue,
                pub response: WitValue,
                pub wrapped_function_type: WrappedFunctionType,
            }
            impl ::core::fmt::Debug for ImportedFunctionInvokedParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ImportedFunctionInvokedParameters")
                        .field("timestamp", &self.timestamp)
                        .field("function-name", &self.function_name)
                        .field("request", &self.request)
                        .field("response", &self.response)
                        .field("wrapped-function-type", &self.wrapped_function_type)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct LocalSpanData {
                pub span_id: SpanId,
                pub start: Datetime,
                pub parent: Option<SpanId>,
                /// Optionally an index of the exported-function-invoked-parameters's invocation-context field
                pub linked_context: Option<u64>,
                pub attributes: _rt::Vec<Attribute>,
                pub inherited: bool,
            }
            impl ::core::fmt::Debug for LocalSpanData {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("LocalSpanData")
                        .field("span-id", &self.span_id)
                        .field("start", &self.start)
                        .field("parent", &self.parent)
                        .field("linked-context", &self.linked_context)
                        .field("attributes", &self.attributes)
                        .field("inherited", &self.inherited)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct ExternalSpanData {
                pub span_id: SpanId,
            }
            impl ::core::fmt::Debug for ExternalSpanData {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ExternalSpanData")
                        .field("span-id", &self.span_id)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub enum SpanData {
                LocalSpan(LocalSpanData),
                ExternalSpan(ExternalSpanData),
            }
            impl ::core::fmt::Debug for SpanData {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        SpanData::LocalSpan(e) => {
                            f.debug_tuple("SpanData::LocalSpan").field(e).finish()
                        }
                        SpanData::ExternalSpan(e) => {
                            f.debug_tuple("SpanData::ExternalSpan").field(e).finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub struct ExportedFunctionInvokedParameters {
                pub timestamp: Datetime,
                pub function_name: _rt::String,
                pub request: _rt::Vec<WitValue>,
                pub idempotency_key: _rt::String,
                pub trace_id: TraceId,
                pub trace_states: _rt::Vec<_rt::String>,
                /// The first one is the invocation context stack associated with the exported function invocation,
                /// and further stacks can be added that are referenced by the `linked-context` field of `local-span-data`
                pub invocation_context: _rt::Vec<_rt::Vec<SpanData>>,
            }
            impl ::core::fmt::Debug for ExportedFunctionInvokedParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ExportedFunctionInvokedParameters")
                        .field("timestamp", &self.timestamp)
                        .field("function-name", &self.function_name)
                        .field("request", &self.request)
                        .field("idempotency-key", &self.idempotency_key)
                        .field("trace-id", &self.trace_id)
                        .field("trace-states", &self.trace_states)
                        .field("invocation-context", &self.invocation_context)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct ExportedFunctionCompletedParameters {
                pub timestamp: Datetime,
                pub response: WitValue,
                pub consumed_fuel: i64,
            }
            impl ::core::fmt::Debug for ExportedFunctionCompletedParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ExportedFunctionCompletedParameters")
                        .field("timestamp", &self.timestamp)
                        .field("response", &self.response)
                        .field("consumed-fuel", &self.consumed_fuel)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct ErrorParameters {
                pub timestamp: Datetime,
                pub error: _rt::String,
            }
            impl ::core::fmt::Debug for ErrorParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ErrorParameters")
                        .field("timestamp", &self.timestamp)
                        .field("error", &self.error)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct JumpParameters {
                pub timestamp: Datetime,
                pub start: OplogIndex,
                pub end: OplogIndex,
            }
            impl ::core::fmt::Debug for JumpParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("JumpParameters")
                        .field("timestamp", &self.timestamp)
                        .field("start", &self.start)
                        .field("end", &self.end)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct ChangeRetryPolicyParameters {
                pub timestamp: Datetime,
                pub retry_policy: RetryPolicy,
            }
            impl ::core::fmt::Debug for ChangeRetryPolicyParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ChangeRetryPolicyParameters")
                        .field("timestamp", &self.timestamp)
                        .field("retry-policy", &self.retry_policy)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct EndAtomicRegionParameters {
                pub timestamp: Datetime,
                pub begin_index: OplogIndex,
            }
            impl ::core::fmt::Debug for EndAtomicRegionParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("EndAtomicRegionParameters")
                        .field("timestamp", &self.timestamp)
                        .field("begin-index", &self.begin_index)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct EndRemoteWriteParameters {
                pub timestamp: Datetime,
                pub begin_index: OplogIndex,
            }
            impl ::core::fmt::Debug for EndRemoteWriteParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("EndRemoteWriteParameters")
                        .field("timestamp", &self.timestamp)
                        .field("begin-index", &self.begin_index)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct ExportedFunctionInvocationParameters {
                pub idempotency_key: _rt::String,
                pub function_name: _rt::String,
                pub input: Option<_rt::Vec<WitValue>>,
            }
            impl ::core::fmt::Debug for ExportedFunctionInvocationParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ExportedFunctionInvocationParameters")
                        .field("idempotency-key", &self.idempotency_key)
                        .field("function-name", &self.function_name)
                        .field("input", &self.input)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub enum WorkerInvocation {
                ExportedFunction(ExportedFunctionInvocationParameters),
                ManualUpdate(ComponentVersion),
            }
            impl ::core::fmt::Debug for WorkerInvocation {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        WorkerInvocation::ExportedFunction(e) => {
                            f.debug_tuple("WorkerInvocation::ExportedFunction")
                                .field(e)
                                .finish()
                        }
                        WorkerInvocation::ManualUpdate(e) => {
                            f.debug_tuple("WorkerInvocation::ManualUpdate")
                                .field(e)
                                .finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub struct PendingWorkerInvocationParameters {
                pub timestamp: Datetime,
                pub invocation: WorkerInvocation,
            }
            impl ::core::fmt::Debug for PendingWorkerInvocationParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("PendingWorkerInvocationParameters")
                        .field("timestamp", &self.timestamp)
                        .field("invocation", &self.invocation)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub enum UpdateDescription {
                /// Automatic update by replaying the oplog on the new version
                AutoUpdate,
                /// Custom update by loading a given snapshot on the new version
                SnapshotBased(_rt::Vec<u8>),
            }
            impl ::core::fmt::Debug for UpdateDescription {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        UpdateDescription::AutoUpdate => {
                            f.debug_tuple("UpdateDescription::AutoUpdate").finish()
                        }
                        UpdateDescription::SnapshotBased(e) => {
                            f.debug_tuple("UpdateDescription::SnapshotBased")
                                .field(e)
                                .finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub struct PendingUpdateParameters {
                pub timestamp: Datetime,
                pub target_version: ComponentVersion,
                pub update_description: UpdateDescription,
            }
            impl ::core::fmt::Debug for PendingUpdateParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("PendingUpdateParameters")
                        .field("timestamp", &self.timestamp)
                        .field("target-version", &self.target_version)
                        .field("update-description", &self.update_description)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct SuccessfulUpdateParameters {
                pub timestamp: Datetime,
                pub target_version: ComponentVersion,
                pub new_component_size: u64,
                pub new_active_plugins: _rt::Vec<PluginInstallationDescription>,
            }
            impl ::core::fmt::Debug for SuccessfulUpdateParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("SuccessfulUpdateParameters")
                        .field("timestamp", &self.timestamp)
                        .field("target-version", &self.target_version)
                        .field("new-component-size", &self.new_component_size)
                        .field("new-active-plugins", &self.new_active_plugins)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct FailedUpdateParameters {
                pub timestamp: Datetime,
                pub target_version: ComponentVersion,
                pub details: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for FailedUpdateParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("FailedUpdateParameters")
                        .field("timestamp", &self.timestamp)
                        .field("target-version", &self.target_version)
                        .field("details", &self.details)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct GrowMemoryParameters {
                pub timestamp: Datetime,
                pub delta: u64,
            }
            impl ::core::fmt::Debug for GrowMemoryParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("GrowMemoryParameters")
                        .field("timestamp", &self.timestamp)
                        .field("delta", &self.delta)
                        .finish()
                }
            }
            pub type WorkerResourceId = u64;
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct CreateResourceParameters {
                pub timestamp: Datetime,
                pub resource_id: WorkerResourceId,
            }
            impl ::core::fmt::Debug for CreateResourceParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("CreateResourceParameters")
                        .field("timestamp", &self.timestamp)
                        .field("resource-id", &self.resource_id)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct DropResourceParameters {
                pub timestamp: Datetime,
                pub resource_id: WorkerResourceId,
            }
            impl ::core::fmt::Debug for DropResourceParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("DropResourceParameters")
                        .field("timestamp", &self.timestamp)
                        .field("resource-id", &self.resource_id)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct DescribeResourceParameters {
                pub timestamp: Datetime,
                pub resource_id: WorkerResourceId,
                pub resource_name: _rt::String,
                pub resource_params: _rt::Vec<WitValue>,
            }
            impl ::core::fmt::Debug for DescribeResourceParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("DescribeResourceParameters")
                        .field("timestamp", &self.timestamp)
                        .field("resource-id", &self.resource_id)
                        .field("resource-name", &self.resource_name)
                        .field("resource-params", &self.resource_params)
                        .finish()
                }
            }
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum LogLevel {
                Stdout,
                Stderr,
                Trace,
                Debug,
                Info,
                Warn,
                Error,
                Critical,
            }
            impl ::core::fmt::Debug for LogLevel {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        LogLevel::Stdout => f.debug_tuple("LogLevel::Stdout").finish(),
                        LogLevel::Stderr => f.debug_tuple("LogLevel::Stderr").finish(),
                        LogLevel::Trace => f.debug_tuple("LogLevel::Trace").finish(),
                        LogLevel::Debug => f.debug_tuple("LogLevel::Debug").finish(),
                        LogLevel::Info => f.debug_tuple("LogLevel::Info").finish(),
                        LogLevel::Warn => f.debug_tuple("LogLevel::Warn").finish(),
                        LogLevel::Error => f.debug_tuple("LogLevel::Error").finish(),
                        LogLevel::Critical => {
                            f.debug_tuple("LogLevel::Critical").finish()
                        }
                    }
                }
            }
            impl LogLevel {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> LogLevel {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => LogLevel::Stdout,
                        1 => LogLevel::Stderr,
                        2 => LogLevel::Trace,
                        3 => LogLevel::Debug,
                        4 => LogLevel::Info,
                        5 => LogLevel::Warn,
                        6 => LogLevel::Error,
                        7 => LogLevel::Critical,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            #[derive(Clone)]
            pub struct LogParameters {
                pub timestamp: Datetime,
                pub level: LogLevel,
                pub context: _rt::String,
                pub message: _rt::String,
            }
            impl ::core::fmt::Debug for LogParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("LogParameters")
                        .field("timestamp", &self.timestamp)
                        .field("level", &self.level)
                        .field("context", &self.context)
                        .field("message", &self.message)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct ActivatePluginParameters {
                pub timestamp: Datetime,
                pub plugin: PluginInstallationDescription,
            }
            impl ::core::fmt::Debug for ActivatePluginParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ActivatePluginParameters")
                        .field("timestamp", &self.timestamp)
                        .field("plugin", &self.plugin)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct DeactivatePluginParameters {
                pub timestamp: Datetime,
                pub plugin: PluginInstallationDescription,
            }
            impl ::core::fmt::Debug for DeactivatePluginParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("DeactivatePluginParameters")
                        .field("timestamp", &self.timestamp)
                        .field("plugin", &self.plugin)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct RevertParameters {
                pub timestamp: Datetime,
                pub start: OplogIndex,
                pub end: OplogIndex,
            }
            impl ::core::fmt::Debug for RevertParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("RevertParameters")
                        .field("timestamp", &self.timestamp)
                        .field("start", &self.start)
                        .field("end", &self.end)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct CancelInvocationParameters {
                pub timestamp: Datetime,
                pub idempotency_key: _rt::String,
            }
            impl ::core::fmt::Debug for CancelInvocationParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("CancelInvocationParameters")
                        .field("timestamp", &self.timestamp)
                        .field("idempotency-key", &self.idempotency_key)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct StartSpanParameters {
                pub timestamp: Datetime,
                pub span_id: SpanId,
                pub parent: Option<SpanId>,
                pub linked_context: Option<SpanId>,
                pub attributes: _rt::Vec<Attribute>,
            }
            impl ::core::fmt::Debug for StartSpanParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("StartSpanParameters")
                        .field("timestamp", &self.timestamp)
                        .field("span-id", &self.span_id)
                        .field("parent", &self.parent)
                        .field("linked-context", &self.linked_context)
                        .field("attributes", &self.attributes)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct FinishSpanParameters {
                pub timestamp: Datetime,
                pub span_id: SpanId,
            }
            impl ::core::fmt::Debug for FinishSpanParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("FinishSpanParameters")
                        .field("timestamp", &self.timestamp)
                        .field("span-id", &self.span_id)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct SetSpanAttributeParameters {
                pub timestamp: Datetime,
                pub span_id: SpanId,
                pub key: _rt::String,
                pub value: AttributeValue,
            }
            impl ::core::fmt::Debug for SetSpanAttributeParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("SetSpanAttributeParameters")
                        .field("timestamp", &self.timestamp)
                        .field("span-id", &self.span_id)
                        .field("key", &self.key)
                        .field("value", &self.value)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub enum OplogEntry {
                /// The initial worker oplog entry
                Create(CreateParameters),
                /// The worker invoked a host function
                ImportedFunctionInvoked(ImportedFunctionInvokedParameters),
                /// The worker has been invoked
                ExportedFunctionInvoked(ExportedFunctionInvokedParameters),
                /// The worker has completed an invocation
                ExportedFunctionCompleted(ExportedFunctionCompletedParameters),
                /// Worker suspended
                Suspend(Datetime),
                /// Worker failed
                Error(ErrorParameters),
                /// Marker entry added when get-oplog-index is called from the worker, to make the jumping behavior
                /// more predictable.
                NoOp(Datetime),
                /// The worker needs to recover up to the given target oplog index and continue running from
                /// the source oplog index from there
                /// `jump` is an oplog region representing that from the end of that region we want to go back to the start and
                /// ignore all recorded operations in between.
                Jump(JumpParameters),
                /// Indicates that the worker has been interrupted at this point.
                /// Only used to recompute the worker's (cached) status, has no effect on execution.
                Interrupted(Datetime),
                /// Indicates that the worker has been exited using WASI's exit function.
                Exited(Datetime),
                /// Overrides the worker's retry policy
                ChangeRetryPolicy(ChangeRetryPolicyParameters),
                /// Begins an atomic region. All oplog entries after `BeginAtomicRegion` are to be ignored during
                /// recovery except if there is a corresponding `EndAtomicRegion` entry.
                BeginAtomicRegion(Datetime),
                /// Ends an atomic region. All oplog entries between the corresponding `BeginAtomicRegion` and this
                /// entry are to be considered during recovery, and the begin/end markers can be removed during oplog
                /// compaction.
                EndAtomicRegion(EndAtomicRegionParameters),
                /// Begins a remote write operation. Only used when idempotence mode is off. In this case each
                /// remote write must be surrounded by a `BeginRemoteWrite` and `EndRemoteWrite` log pair and
                /// unfinished remote writes cannot be recovered.
                BeginRemoteWrite(Datetime),
                /// Marks the end of a remote write operation. Only used when idempotence mode is off.
                EndRemoteWrite(EndRemoteWriteParameters),
                /// An invocation request arrived while the worker was busy
                PendingWorkerInvocation(PendingWorkerInvocationParameters),
                /// An update request arrived and will be applied as soon the worker restarts
                PendingUpdate(PendingUpdateParameters),
                /// An update was successfully applied
                SuccessfulUpdate(SuccessfulUpdateParameters),
                /// An update failed to be applied
                FailedUpdate(FailedUpdateParameters),
                /// Increased total linear memory size
                GrowMemory(GrowMemoryParameters),
                /// Created a resource instance
                CreateResource(CreateResourceParameters),
                /// Dropped a resource instance
                DropResource(DropResourceParameters),
                /// Adds additional information for a created resource instance
                DescribeResource(DescribeResourceParameters),
                /// The worker emitted a log message
                Log(LogParameters),
                /// The worker's has been restarted, forgetting all its history
                Restart(Datetime),
                /// Activates a plugin
                ActivatePlugin(ActivatePluginParameters),
                /// Deactivates a plugin
                DeactivatePlugin(DeactivatePluginParameters),
                /// Revert a worker to a previous state
                Revert(RevertParameters),
                /// Cancel a pending invocation
                CancelInvocation(CancelInvocationParameters),
                /// Start a new span in the invocation context
                StartSpan(StartSpanParameters),
                /// Finish an open span in the invocation context
                FinishSpan(FinishSpanParameters),
                /// Set an attribute on an open span in the invocation context
                SetSpanAttribute(SetSpanAttributeParameters),
            }
            impl ::core::fmt::Debug for OplogEntry {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        OplogEntry::Create(e) => {
                            f.debug_tuple("OplogEntry::Create").field(e).finish()
                        }
                        OplogEntry::ImportedFunctionInvoked(e) => {
                            f.debug_tuple("OplogEntry::ImportedFunctionInvoked")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::ExportedFunctionInvoked(e) => {
                            f.debug_tuple("OplogEntry::ExportedFunctionInvoked")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::ExportedFunctionCompleted(e) => {
                            f.debug_tuple("OplogEntry::ExportedFunctionCompleted")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::Suspend(e) => {
                            f.debug_tuple("OplogEntry::Suspend").field(e).finish()
                        }
                        OplogEntry::Error(e) => {
                            f.debug_tuple("OplogEntry::Error").field(e).finish()
                        }
                        OplogEntry::NoOp(e) => {
                            f.debug_tuple("OplogEntry::NoOp").field(e).finish()
                        }
                        OplogEntry::Jump(e) => {
                            f.debug_tuple("OplogEntry::Jump").field(e).finish()
                        }
                        OplogEntry::Interrupted(e) => {
                            f.debug_tuple("OplogEntry::Interrupted").field(e).finish()
                        }
                        OplogEntry::Exited(e) => {
                            f.debug_tuple("OplogEntry::Exited").field(e).finish()
                        }
                        OplogEntry::ChangeRetryPolicy(e) => {
                            f.debug_tuple("OplogEntry::ChangeRetryPolicy")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::BeginAtomicRegion(e) => {
                            f.debug_tuple("OplogEntry::BeginAtomicRegion")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::EndAtomicRegion(e) => {
                            f.debug_tuple("OplogEntry::EndAtomicRegion")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::BeginRemoteWrite(e) => {
                            f.debug_tuple("OplogEntry::BeginRemoteWrite")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::EndRemoteWrite(e) => {
                            f.debug_tuple("OplogEntry::EndRemoteWrite").field(e).finish()
                        }
                        OplogEntry::PendingWorkerInvocation(e) => {
                            f.debug_tuple("OplogEntry::PendingWorkerInvocation")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::PendingUpdate(e) => {
                            f.debug_tuple("OplogEntry::PendingUpdate").field(e).finish()
                        }
                        OplogEntry::SuccessfulUpdate(e) => {
                            f.debug_tuple("OplogEntry::SuccessfulUpdate")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::FailedUpdate(e) => {
                            f.debug_tuple("OplogEntry::FailedUpdate").field(e).finish()
                        }
                        OplogEntry::GrowMemory(e) => {
                            f.debug_tuple("OplogEntry::GrowMemory").field(e).finish()
                        }
                        OplogEntry::CreateResource(e) => {
                            f.debug_tuple("OplogEntry::CreateResource").field(e).finish()
                        }
                        OplogEntry::DropResource(e) => {
                            f.debug_tuple("OplogEntry::DropResource").field(e).finish()
                        }
                        OplogEntry::DescribeResource(e) => {
                            f.debug_tuple("OplogEntry::DescribeResource")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::Log(e) => {
                            f.debug_tuple("OplogEntry::Log").field(e).finish()
                        }
                        OplogEntry::Restart(e) => {
                            f.debug_tuple("OplogEntry::Restart").field(e).finish()
                        }
                        OplogEntry::ActivatePlugin(e) => {
                            f.debug_tuple("OplogEntry::ActivatePlugin").field(e).finish()
                        }
                        OplogEntry::DeactivatePlugin(e) => {
                            f.debug_tuple("OplogEntry::DeactivatePlugin")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::Revert(e) => {
                            f.debug_tuple("OplogEntry::Revert").field(e).finish()
                        }
                        OplogEntry::CancelInvocation(e) => {
                            f.debug_tuple("OplogEntry::CancelInvocation")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::StartSpan(e) => {
                            f.debug_tuple("OplogEntry::StartSpan").field(e).finish()
                        }
                        OplogEntry::FinishSpan(e) => {
                            f.debug_tuple("OplogEntry::FinishSpan").field(e).finish()
                        }
                        OplogEntry::SetSpanAttribute(e) => {
                            f.debug_tuple("OplogEntry::SetSpanAttribute")
                                .field(e)
                                .finish()
                        }
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct GetOplog {
                handle: _rt::Resource<GetOplog>,
            }
            impl GetOplog {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for GetOplog {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:api/oplog@1.1.5")]
                        extern "C" {
                            #[link_name = "[resource-drop]get-oplog"]
                            fn drop(_: u32);
                        }
                        drop(_handle);
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct SearchOplog {
                handle: _rt::Resource<SearchOplog>,
            }
            impl SearchOplog {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for SearchOplog {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:api/oplog@1.1.5")]
                        extern "C" {
                            #[link_name = "[resource-drop]search-oplog"]
                            fn drop(_: u32);
                        }
                        drop(_handle);
                    }
                }
            }
            impl GetOplog {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(worker_id: &WorkerId, start: OplogIndex) -> Self {
                    unsafe {
                        let super::super::super::golem::api::host::WorkerId {
                            component_id: component_id0,
                            worker_name: worker_name0,
                        } = worker_id;
                        let super::super::super::golem::api::host::ComponentId {
                            uuid: uuid1,
                        } = component_id0;
                        let super::super::super::golem::api::host::Uuid {
                            high_bits: high_bits2,
                            low_bits: low_bits2,
                        } = uuid1;
                        let vec3 = worker_name0;
                        let ptr3 = vec3.as_ptr().cast::<u8>();
                        let len3 = vec3.len();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/oplog@1.1.5")]
                        extern "C" {
                            #[link_name = "[constructor]get-oplog"]
                            fn wit_import(
                                _: i64,
                                _: i64,
                                _: *mut u8,
                                _: usize,
                                _: i64,
                            ) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                            _: i64,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            _rt::as_i64(high_bits2),
                            _rt::as_i64(low_bits2),
                            ptr3.cast_mut(),
                            len3,
                            _rt::as_i64(start),
                        );
                        GetOplog::from_handle(ret as u32)
                    }
                }
            }
            impl GetOplog {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_next(&self) -> Option<_rt::Vec<OplogEntry>> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 12],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/oplog@1.1.5")]
                        extern "C" {
                            #[link_name = "[method]get-oplog.get-next"]
                            fn wit_import(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<*mut u8>();
                                    let l3 = *ptr0.add(8).cast::<usize>();
                                    let base621 = l2;
                                    let len621 = l3;
                                    let mut result621 = _rt::Vec::with_capacity(len621);
                                    for i in 0..len621 {
                                        let base = base621.add(i * 136);
                                        let e621 = {
                                            let l4 = i32::from(*base.add(0).cast::<u8>());
                                            let v620 = match l4 {
                                                0 => {
                                                    let e620 = {
                                                        let l5 = *base.add(8).cast::<i64>();
                                                        let l6 = *base.add(16).cast::<i32>();
                                                        let l7 = *base.add(24).cast::<i64>();
                                                        let l8 = *base.add(32).cast::<i64>();
                                                        let l9 = *base.add(40).cast::<*mut u8>();
                                                        let l10 = *base.add(44).cast::<usize>();
                                                        let len11 = l10;
                                                        let bytes11 = _rt::Vec::from_raw_parts(
                                                            l9.cast(),
                                                            len11,
                                                            len11,
                                                        );
                                                        let l12 = *base.add(48).cast::<i64>();
                                                        let l13 = *base.add(56).cast::<*mut u8>();
                                                        let l14 = *base.add(60).cast::<usize>();
                                                        let base18 = l13;
                                                        let len18 = l14;
                                                        let mut result18 = _rt::Vec::with_capacity(len18);
                                                        for i in 0..len18 {
                                                            let base = base18.add(i * 8);
                                                            let e18 = {
                                                                let l15 = *base.add(0).cast::<*mut u8>();
                                                                let l16 = *base.add(4).cast::<usize>();
                                                                let len17 = l16;
                                                                let bytes17 = _rt::Vec::from_raw_parts(
                                                                    l15.cast(),
                                                                    len17,
                                                                    len17,
                                                                );
                                                                _rt::string_lift(bytes17)
                                                            };
                                                            result18.push(e18);
                                                        }
                                                        _rt::cabi_dealloc(base18, len18 * 8, 4);
                                                        let l19 = *base.add(64).cast::<*mut u8>();
                                                        let l20 = *base.add(68).cast::<usize>();
                                                        let base27 = l19;
                                                        let len27 = l20;
                                                        let mut result27 = _rt::Vec::with_capacity(len27);
                                                        for i in 0..len27 {
                                                            let base = base27.add(i * 16);
                                                            let e27 = {
                                                                let l21 = *base.add(0).cast::<*mut u8>();
                                                                let l22 = *base.add(4).cast::<usize>();
                                                                let len23 = l22;
                                                                let bytes23 = _rt::Vec::from_raw_parts(
                                                                    l21.cast(),
                                                                    len23,
                                                                    len23,
                                                                );
                                                                let l24 = *base.add(8).cast::<*mut u8>();
                                                                let l25 = *base.add(12).cast::<usize>();
                                                                let len26 = l25;
                                                                let bytes26 = _rt::Vec::from_raw_parts(
                                                                    l24.cast(),
                                                                    len26,
                                                                    len26,
                                                                );
                                                                (_rt::string_lift(bytes23), _rt::string_lift(bytes26))
                                                            };
                                                            result27.push(e27);
                                                        }
                                                        _rt::cabi_dealloc(base27, len27 * 16, 4);
                                                        let l28 = *base.add(72).cast::<*mut u8>();
                                                        let l29 = *base.add(76).cast::<usize>();
                                                        let len30 = l29;
                                                        let bytes30 = _rt::Vec::from_raw_parts(
                                                            l28.cast(),
                                                            len30,
                                                            len30,
                                                        );
                                                        let l31 = i32::from(*base.add(80).cast::<u8>());
                                                        let l37 = *base.add(112).cast::<i64>();
                                                        let l38 = *base.add(120).cast::<i64>();
                                                        let l39 = *base.add(128).cast::<*mut u8>();
                                                        let l40 = *base.add(132).cast::<usize>();
                                                        let base58 = l39;
                                                        let len58 = l40;
                                                        let mut result58 = _rt::Vec::with_capacity(len58);
                                                        for i in 0..len58 {
                                                            let base = base58.add(i * 40);
                                                            let e58 = {
                                                                let l41 = *base.add(0).cast::<i64>();
                                                                let l42 = *base.add(8).cast::<i64>();
                                                                let l43 = *base.add(16).cast::<*mut u8>();
                                                                let l44 = *base.add(20).cast::<usize>();
                                                                let len45 = l44;
                                                                let bytes45 = _rt::Vec::from_raw_parts(
                                                                    l43.cast(),
                                                                    len45,
                                                                    len45,
                                                                );
                                                                let l46 = *base.add(24).cast::<*mut u8>();
                                                                let l47 = *base.add(28).cast::<usize>();
                                                                let len48 = l47;
                                                                let bytes48 = _rt::Vec::from_raw_parts(
                                                                    l46.cast(),
                                                                    len48,
                                                                    len48,
                                                                );
                                                                let l49 = *base.add(32).cast::<*mut u8>();
                                                                let l50 = *base.add(36).cast::<usize>();
                                                                let base57 = l49;
                                                                let len57 = l50;
                                                                let mut result57 = _rt::Vec::with_capacity(len57);
                                                                for i in 0..len57 {
                                                                    let base = base57.add(i * 16);
                                                                    let e57 = {
                                                                        let l51 = *base.add(0).cast::<*mut u8>();
                                                                        let l52 = *base.add(4).cast::<usize>();
                                                                        let len53 = l52;
                                                                        let bytes53 = _rt::Vec::from_raw_parts(
                                                                            l51.cast(),
                                                                            len53,
                                                                            len53,
                                                                        );
                                                                        let l54 = *base.add(8).cast::<*mut u8>();
                                                                        let l55 = *base.add(12).cast::<usize>();
                                                                        let len56 = l55;
                                                                        let bytes56 = _rt::Vec::from_raw_parts(
                                                                            l54.cast(),
                                                                            len56,
                                                                            len56,
                                                                        );
                                                                        (_rt::string_lift(bytes53), _rt::string_lift(bytes56))
                                                                    };
                                                                    result57.push(e57);
                                                                }
                                                                _rt::cabi_dealloc(base57, len57 * 16, 4);
                                                                PluginInstallationDescription {
                                                                    installation_id: super::super::super::golem::api::host::Uuid {
                                                                        high_bits: l41 as u64,
                                                                        low_bits: l42 as u64,
                                                                    },
                                                                    name: _rt::string_lift(bytes45),
                                                                    version: _rt::string_lift(bytes48),
                                                                    parameters: result57,
                                                                }
                                                            };
                                                            result58.push(e58);
                                                        }
                                                        _rt::cabi_dealloc(base58, len58 * 40, 8);
                                                        CreateParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l5 as u64,
                                                                nanoseconds: l6 as u32,
                                                            },
                                                            worker_id: super::super::super::golem::api::host::WorkerId {
                                                                component_id: super::super::super::golem::api::host::ComponentId {
                                                                    uuid: super::super::super::golem::api::host::Uuid {
                                                                        high_bits: l7 as u64,
                                                                        low_bits: l8 as u64,
                                                                    },
                                                                },
                                                                worker_name: _rt::string_lift(bytes11),
                                                            },
                                                            component_version: l12 as u64,
                                                            args: result18,
                                                            env: result27,
                                                            account_id: super::super::super::golem::api::host::AccountId {
                                                                value: _rt::string_lift(bytes30),
                                                            },
                                                            parent: match l31 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l32 = *base.add(88).cast::<i64>();
                                                                        let l33 = *base.add(96).cast::<i64>();
                                                                        let l34 = *base.add(104).cast::<*mut u8>();
                                                                        let l35 = *base.add(108).cast::<usize>();
                                                                        let len36 = l35;
                                                                        let bytes36 = _rt::Vec::from_raw_parts(
                                                                            l34.cast(),
                                                                            len36,
                                                                            len36,
                                                                        );
                                                                        super::super::super::golem::api::host::WorkerId {
                                                                            component_id: super::super::super::golem::api::host::ComponentId {
                                                                                uuid: super::super::super::golem::api::host::Uuid {
                                                                                    high_bits: l32 as u64,
                                                                                    low_bits: l33 as u64,
                                                                                },
                                                                            },
                                                                            worker_name: _rt::string_lift(bytes36),
                                                                        }
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            component_size: l37 as u64,
                                                            initial_total_linear_memory_size: l38 as u64,
                                                            initial_active_plugins: result58,
                                                        }
                                                    };
                                                    OplogEntry::Create(e620)
                                                }
                                                1 => {
                                                    let e620 = {
                                                        let l59 = *base.add(8).cast::<i64>();
                                                        let l60 = *base.add(16).cast::<i32>();
                                                        let l61 = *base.add(24).cast::<*mut u8>();
                                                        let l62 = *base.add(28).cast::<usize>();
                                                        let len63 = l62;
                                                        let bytes63 = _rt::Vec::from_raw_parts(
                                                            l61.cast(),
                                                            len63,
                                                            len63,
                                                        );
                                                        let l64 = *base.add(32).cast::<*mut u8>();
                                                        let l65 = *base.add(36).cast::<usize>();
                                                        let base111 = l64;
                                                        let len111 = l65;
                                                        let mut result111 = _rt::Vec::with_capacity(len111);
                                                        for i in 0..len111 {
                                                            let base = base111.add(i * 24);
                                                            let e111 = {
                                                                let l66 = i32::from(*base.add(0).cast::<u8>());
                                                                use super::super::super::golem::rpc::types::WitNode as V110;
                                                                let v110 = match l66 {
                                                                    0 => {
                                                                        let e110 = {
                                                                            let l67 = *base.add(8).cast::<*mut u8>();
                                                                            let l68 = *base.add(12).cast::<usize>();
                                                                            let len69 = l68;
                                                                            _rt::Vec::from_raw_parts(l67.cast(), len69, len69)
                                                                        };
                                                                        V110::RecordValue(e110)
                                                                    }
                                                                    1 => {
                                                                        let e110 = {
                                                                            let l70 = *base.add(8).cast::<i32>();
                                                                            let l71 = i32::from(*base.add(12).cast::<u8>());
                                                                            (
                                                                                l70 as u32,
                                                                                match l71 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l72 = *base.add(16).cast::<i32>();
                                                                                            l72
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                },
                                                                            )
                                                                        };
                                                                        V110::VariantValue(e110)
                                                                    }
                                                                    2 => {
                                                                        let e110 = {
                                                                            let l73 = *base.add(8).cast::<i32>();
                                                                            l73 as u32
                                                                        };
                                                                        V110::EnumValue(e110)
                                                                    }
                                                                    3 => {
                                                                        let e110 = {
                                                                            let l74 = *base.add(8).cast::<*mut u8>();
                                                                            let l75 = *base.add(12).cast::<usize>();
                                                                            let base77 = l74;
                                                                            let len77 = l75;
                                                                            let mut result77 = _rt::Vec::with_capacity(len77);
                                                                            for i in 0..len77 {
                                                                                let base = base77.add(i * 1);
                                                                                let e77 = {
                                                                                    let l76 = i32::from(*base.add(0).cast::<u8>());
                                                                                    _rt::bool_lift(l76 as u8)
                                                                                };
                                                                                result77.push(e77);
                                                                            }
                                                                            _rt::cabi_dealloc(base77, len77 * 1, 1);
                                                                            result77
                                                                        };
                                                                        V110::FlagsValue(e110)
                                                                    }
                                                                    4 => {
                                                                        let e110 = {
                                                                            let l78 = *base.add(8).cast::<*mut u8>();
                                                                            let l79 = *base.add(12).cast::<usize>();
                                                                            let len80 = l79;
                                                                            _rt::Vec::from_raw_parts(l78.cast(), len80, len80)
                                                                        };
                                                                        V110::TupleValue(e110)
                                                                    }
                                                                    5 => {
                                                                        let e110 = {
                                                                            let l81 = *base.add(8).cast::<*mut u8>();
                                                                            let l82 = *base.add(12).cast::<usize>();
                                                                            let len83 = l82;
                                                                            _rt::Vec::from_raw_parts(l81.cast(), len83, len83)
                                                                        };
                                                                        V110::ListValue(e110)
                                                                    }
                                                                    6 => {
                                                                        let e110 = {
                                                                            let l84 = i32::from(*base.add(8).cast::<u8>());
                                                                            match l84 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l85 = *base.add(12).cast::<i32>();
                                                                                        l85
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            }
                                                                        };
                                                                        V110::OptionValue(e110)
                                                                    }
                                                                    7 => {
                                                                        let e110 = {
                                                                            let l86 = i32::from(*base.add(8).cast::<u8>());
                                                                            match l86 {
                                                                                0 => {
                                                                                    let e = {
                                                                                        let l87 = i32::from(*base.add(12).cast::<u8>());
                                                                                        match l87 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l88 = *base.add(16).cast::<i32>();
                                                                                                    l88
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        }
                                                                                    };
                                                                                    Ok(e)
                                                                                }
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l89 = i32::from(*base.add(12).cast::<u8>());
                                                                                        match l89 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l90 = *base.add(16).cast::<i32>();
                                                                                                    l90
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        }
                                                                                    };
                                                                                    Err(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            }
                                                                        };
                                                                        V110::ResultValue(e110)
                                                                    }
                                                                    8 => {
                                                                        let e110 = {
                                                                            let l91 = i32::from(*base.add(8).cast::<u8>());
                                                                            l91 as u8
                                                                        };
                                                                        V110::PrimU8(e110)
                                                                    }
                                                                    9 => {
                                                                        let e110 = {
                                                                            let l92 = i32::from(*base.add(8).cast::<u16>());
                                                                            l92 as u16
                                                                        };
                                                                        V110::PrimU16(e110)
                                                                    }
                                                                    10 => {
                                                                        let e110 = {
                                                                            let l93 = *base.add(8).cast::<i32>();
                                                                            l93 as u32
                                                                        };
                                                                        V110::PrimU32(e110)
                                                                    }
                                                                    11 => {
                                                                        let e110 = {
                                                                            let l94 = *base.add(8).cast::<i64>();
                                                                            l94 as u64
                                                                        };
                                                                        V110::PrimU64(e110)
                                                                    }
                                                                    12 => {
                                                                        let e110 = {
                                                                            let l95 = i32::from(*base.add(8).cast::<i8>());
                                                                            l95 as i8
                                                                        };
                                                                        V110::PrimS8(e110)
                                                                    }
                                                                    13 => {
                                                                        let e110 = {
                                                                            let l96 = i32::from(*base.add(8).cast::<i16>());
                                                                            l96 as i16
                                                                        };
                                                                        V110::PrimS16(e110)
                                                                    }
                                                                    14 => {
                                                                        let e110 = {
                                                                            let l97 = *base.add(8).cast::<i32>();
                                                                            l97
                                                                        };
                                                                        V110::PrimS32(e110)
                                                                    }
                                                                    15 => {
                                                                        let e110 = {
                                                                            let l98 = *base.add(8).cast::<i64>();
                                                                            l98
                                                                        };
                                                                        V110::PrimS64(e110)
                                                                    }
                                                                    16 => {
                                                                        let e110 = {
                                                                            let l99 = *base.add(8).cast::<f32>();
                                                                            l99
                                                                        };
                                                                        V110::PrimFloat32(e110)
                                                                    }
                                                                    17 => {
                                                                        let e110 = {
                                                                            let l100 = *base.add(8).cast::<f64>();
                                                                            l100
                                                                        };
                                                                        V110::PrimFloat64(e110)
                                                                    }
                                                                    18 => {
                                                                        let e110 = {
                                                                            let l101 = *base.add(8).cast::<i32>();
                                                                            _rt::char_lift(l101 as u32)
                                                                        };
                                                                        V110::PrimChar(e110)
                                                                    }
                                                                    19 => {
                                                                        let e110 = {
                                                                            let l102 = i32::from(*base.add(8).cast::<u8>());
                                                                            _rt::bool_lift(l102 as u8)
                                                                        };
                                                                        V110::PrimBool(e110)
                                                                    }
                                                                    20 => {
                                                                        let e110 = {
                                                                            let l103 = *base.add(8).cast::<*mut u8>();
                                                                            let l104 = *base.add(12).cast::<usize>();
                                                                            let len105 = l104;
                                                                            let bytes105 = _rt::Vec::from_raw_parts(
                                                                                l103.cast(),
                                                                                len105,
                                                                                len105,
                                                                            );
                                                                            _rt::string_lift(bytes105)
                                                                        };
                                                                        V110::PrimString(e110)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                        let e110 = {
                                                                            let l106 = *base.add(8).cast::<*mut u8>();
                                                                            let l107 = *base.add(12).cast::<usize>();
                                                                            let len108 = l107;
                                                                            let bytes108 = _rt::Vec::from_raw_parts(
                                                                                l106.cast(),
                                                                                len108,
                                                                                len108,
                                                                            );
                                                                            let l109 = *base.add(16).cast::<i64>();
                                                                            (
                                                                                super::super::super::golem::rpc::types::Uri {
                                                                                    value: _rt::string_lift(bytes108),
                                                                                },
                                                                                l109 as u64,
                                                                            )
                                                                        };
                                                                        V110::Handle(e110)
                                                                    }
                                                                };
                                                                v110
                                                            };
                                                            result111.push(e111);
                                                        }
                                                        _rt::cabi_dealloc(base111, len111 * 24, 8);
                                                        let l112 = *base.add(40).cast::<*mut u8>();
                                                        let l113 = *base.add(44).cast::<usize>();
                                                        let base159 = l112;
                                                        let len159 = l113;
                                                        let mut result159 = _rt::Vec::with_capacity(len159);
                                                        for i in 0..len159 {
                                                            let base = base159.add(i * 24);
                                                            let e159 = {
                                                                let l114 = i32::from(*base.add(0).cast::<u8>());
                                                                use super::super::super::golem::rpc::types::WitNode as V158;
                                                                let v158 = match l114 {
                                                                    0 => {
                                                                        let e158 = {
                                                                            let l115 = *base.add(8).cast::<*mut u8>();
                                                                            let l116 = *base.add(12).cast::<usize>();
                                                                            let len117 = l116;
                                                                            _rt::Vec::from_raw_parts(l115.cast(), len117, len117)
                                                                        };
                                                                        V158::RecordValue(e158)
                                                                    }
                                                                    1 => {
                                                                        let e158 = {
                                                                            let l118 = *base.add(8).cast::<i32>();
                                                                            let l119 = i32::from(*base.add(12).cast::<u8>());
                                                                            (
                                                                                l118 as u32,
                                                                                match l119 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l120 = *base.add(16).cast::<i32>();
                                                                                            l120
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                },
                                                                            )
                                                                        };
                                                                        V158::VariantValue(e158)
                                                                    }
                                                                    2 => {
                                                                        let e158 = {
                                                                            let l121 = *base.add(8).cast::<i32>();
                                                                            l121 as u32
                                                                        };
                                                                        V158::EnumValue(e158)
                                                                    }
                                                                    3 => {
                                                                        let e158 = {
                                                                            let l122 = *base.add(8).cast::<*mut u8>();
                                                                            let l123 = *base.add(12).cast::<usize>();
                                                                            let base125 = l122;
                                                                            let len125 = l123;
                                                                            let mut result125 = _rt::Vec::with_capacity(len125);
                                                                            for i in 0..len125 {
                                                                                let base = base125.add(i * 1);
                                                                                let e125 = {
                                                                                    let l124 = i32::from(*base.add(0).cast::<u8>());
                                                                                    _rt::bool_lift(l124 as u8)
                                                                                };
                                                                                result125.push(e125);
                                                                            }
                                                                            _rt::cabi_dealloc(base125, len125 * 1, 1);
                                                                            result125
                                                                        };
                                                                        V158::FlagsValue(e158)
                                                                    }
                                                                    4 => {
                                                                        let e158 = {
                                                                            let l126 = *base.add(8).cast::<*mut u8>();
                                                                            let l127 = *base.add(12).cast::<usize>();
                                                                            let len128 = l127;
                                                                            _rt::Vec::from_raw_parts(l126.cast(), len128, len128)
                                                                        };
                                                                        V158::TupleValue(e158)
                                                                    }
                                                                    5 => {
                                                                        let e158 = {
                                                                            let l129 = *base.add(8).cast::<*mut u8>();
                                                                            let l130 = *base.add(12).cast::<usize>();
                                                                            let len131 = l130;
                                                                            _rt::Vec::from_raw_parts(l129.cast(), len131, len131)
                                                                        };
                                                                        V158::ListValue(e158)
                                                                    }
                                                                    6 => {
                                                                        let e158 = {
                                                                            let l132 = i32::from(*base.add(8).cast::<u8>());
                                                                            match l132 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l133 = *base.add(12).cast::<i32>();
                                                                                        l133
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            }
                                                                        };
                                                                        V158::OptionValue(e158)
                                                                    }
                                                                    7 => {
                                                                        let e158 = {
                                                                            let l134 = i32::from(*base.add(8).cast::<u8>());
                                                                            match l134 {
                                                                                0 => {
                                                                                    let e = {
                                                                                        let l135 = i32::from(*base.add(12).cast::<u8>());
                                                                                        match l135 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l136 = *base.add(16).cast::<i32>();
                                                                                                    l136
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        }
                                                                                    };
                                                                                    Ok(e)
                                                                                }
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l137 = i32::from(*base.add(12).cast::<u8>());
                                                                                        match l137 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l138 = *base.add(16).cast::<i32>();
                                                                                                    l138
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        }
                                                                                    };
                                                                                    Err(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            }
                                                                        };
                                                                        V158::ResultValue(e158)
                                                                    }
                                                                    8 => {
                                                                        let e158 = {
                                                                            let l139 = i32::from(*base.add(8).cast::<u8>());
                                                                            l139 as u8
                                                                        };
                                                                        V158::PrimU8(e158)
                                                                    }
                                                                    9 => {
                                                                        let e158 = {
                                                                            let l140 = i32::from(*base.add(8).cast::<u16>());
                                                                            l140 as u16
                                                                        };
                                                                        V158::PrimU16(e158)
                                                                    }
                                                                    10 => {
                                                                        let e158 = {
                                                                            let l141 = *base.add(8).cast::<i32>();
                                                                            l141 as u32
                                                                        };
                                                                        V158::PrimU32(e158)
                                                                    }
                                                                    11 => {
                                                                        let e158 = {
                                                                            let l142 = *base.add(8).cast::<i64>();
                                                                            l142 as u64
                                                                        };
                                                                        V158::PrimU64(e158)
                                                                    }
                                                                    12 => {
                                                                        let e158 = {
                                                                            let l143 = i32::from(*base.add(8).cast::<i8>());
                                                                            l143 as i8
                                                                        };
                                                                        V158::PrimS8(e158)
                                                                    }
                                                                    13 => {
                                                                        let e158 = {
                                                                            let l144 = i32::from(*base.add(8).cast::<i16>());
                                                                            l144 as i16
                                                                        };
                                                                        V158::PrimS16(e158)
                                                                    }
                                                                    14 => {
                                                                        let e158 = {
                                                                            let l145 = *base.add(8).cast::<i32>();
                                                                            l145
                                                                        };
                                                                        V158::PrimS32(e158)
                                                                    }
                                                                    15 => {
                                                                        let e158 = {
                                                                            let l146 = *base.add(8).cast::<i64>();
                                                                            l146
                                                                        };
                                                                        V158::PrimS64(e158)
                                                                    }
                                                                    16 => {
                                                                        let e158 = {
                                                                            let l147 = *base.add(8).cast::<f32>();
                                                                            l147
                                                                        };
                                                                        V158::PrimFloat32(e158)
                                                                    }
                                                                    17 => {
                                                                        let e158 = {
                                                                            let l148 = *base.add(8).cast::<f64>();
                                                                            l148
                                                                        };
                                                                        V158::PrimFloat64(e158)
                                                                    }
                                                                    18 => {
                                                                        let e158 = {
                                                                            let l149 = *base.add(8).cast::<i32>();
                                                                            _rt::char_lift(l149 as u32)
                                                                        };
                                                                        V158::PrimChar(e158)
                                                                    }
                                                                    19 => {
                                                                        let e158 = {
                                                                            let l150 = i32::from(*base.add(8).cast::<u8>());
                                                                            _rt::bool_lift(l150 as u8)
                                                                        };
                                                                        V158::PrimBool(e158)
                                                                    }
                                                                    20 => {
                                                                        let e158 = {
                                                                            let l151 = *base.add(8).cast::<*mut u8>();
                                                                            let l152 = *base.add(12).cast::<usize>();
                                                                            let len153 = l152;
                                                                            let bytes153 = _rt::Vec::from_raw_parts(
                                                                                l151.cast(),
                                                                                len153,
                                                                                len153,
                                                                            );
                                                                            _rt::string_lift(bytes153)
                                                                        };
                                                                        V158::PrimString(e158)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                        let e158 = {
                                                                            let l154 = *base.add(8).cast::<*mut u8>();
                                                                            let l155 = *base.add(12).cast::<usize>();
                                                                            let len156 = l155;
                                                                            let bytes156 = _rt::Vec::from_raw_parts(
                                                                                l154.cast(),
                                                                                len156,
                                                                                len156,
                                                                            );
                                                                            let l157 = *base.add(16).cast::<i64>();
                                                                            (
                                                                                super::super::super::golem::rpc::types::Uri {
                                                                                    value: _rt::string_lift(bytes156),
                                                                                },
                                                                                l157 as u64,
                                                                            )
                                                                        };
                                                                        V158::Handle(e158)
                                                                    }
                                                                };
                                                                v158
                                                            };
                                                            result159.push(e159);
                                                        }
                                                        _rt::cabi_dealloc(base159, len159 * 24, 8);
                                                        let l160 = i32::from(*base.add(48).cast::<u8>());
                                                        let v163 = match l160 {
                                                            0 => WrappedFunctionType::ReadLocal,
                                                            1 => WrappedFunctionType::WriteLocal,
                                                            2 => WrappedFunctionType::ReadRemote,
                                                            3 => WrappedFunctionType::WriteRemote,
                                                            n => {
                                                                debug_assert_eq!(n, 4, "invalid enum discriminant");
                                                                let e163 = {
                                                                    let l161 = i32::from(*base.add(56).cast::<u8>());
                                                                    match l161 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l162 = *base.add(64).cast::<i64>();
                                                                                l162 as u64
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                WrappedFunctionType::WriteRemoteBatched(e163)
                                                            }
                                                        };
                                                        ImportedFunctionInvokedParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l59 as u64,
                                                                nanoseconds: l60 as u32,
                                                            },
                                                            function_name: _rt::string_lift(bytes63),
                                                            request: super::super::super::golem::rpc::types::WitValue {
                                                                nodes: result111,
                                                            },
                                                            response: super::super::super::golem::rpc::types::WitValue {
                                                                nodes: result159,
                                                            },
                                                            wrapped_function_type: v163,
                                                        }
                                                    };
                                                    OplogEntry::ImportedFunctionInvoked(e620)
                                                }
                                                2 => {
                                                    let e620 = {
                                                        let l164 = *base.add(8).cast::<i64>();
                                                        let l165 = *base.add(16).cast::<i32>();
                                                        let l166 = *base.add(24).cast::<*mut u8>();
                                                        let l167 = *base.add(28).cast::<usize>();
                                                        let len168 = l167;
                                                        let bytes168 = _rt::Vec::from_raw_parts(
                                                            l166.cast(),
                                                            len168,
                                                            len168,
                                                        );
                                                        let l169 = *base.add(32).cast::<*mut u8>();
                                                        let l170 = *base.add(36).cast::<usize>();
                                                        let base219 = l169;
                                                        let len219 = l170;
                                                        let mut result219 = _rt::Vec::with_capacity(len219);
                                                        for i in 0..len219 {
                                                            let base = base219.add(i * 8);
                                                            let e219 = {
                                                                let l171 = *base.add(0).cast::<*mut u8>();
                                                                let l172 = *base.add(4).cast::<usize>();
                                                                let base218 = l171;
                                                                let len218 = l172;
                                                                let mut result218 = _rt::Vec::with_capacity(len218);
                                                                for i in 0..len218 {
                                                                    let base = base218.add(i * 24);
                                                                    let e218 = {
                                                                        let l173 = i32::from(*base.add(0).cast::<u8>());
                                                                        use super::super::super::golem::rpc::types::WitNode as V217;
                                                                        let v217 = match l173 {
                                                                            0 => {
                                                                                let e217 = {
                                                                                    let l174 = *base.add(8).cast::<*mut u8>();
                                                                                    let l175 = *base.add(12).cast::<usize>();
                                                                                    let len176 = l175;
                                                                                    _rt::Vec::from_raw_parts(l174.cast(), len176, len176)
                                                                                };
                                                                                V217::RecordValue(e217)
                                                                            }
                                                                            1 => {
                                                                                let e217 = {
                                                                                    let l177 = *base.add(8).cast::<i32>();
                                                                                    let l178 = i32::from(*base.add(12).cast::<u8>());
                                                                                    (
                                                                                        l177 as u32,
                                                                                        match l178 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l179 = *base.add(16).cast::<i32>();
                                                                                                    l179
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        },
                                                                                    )
                                                                                };
                                                                                V217::VariantValue(e217)
                                                                            }
                                                                            2 => {
                                                                                let e217 = {
                                                                                    let l180 = *base.add(8).cast::<i32>();
                                                                                    l180 as u32
                                                                                };
                                                                                V217::EnumValue(e217)
                                                                            }
                                                                            3 => {
                                                                                let e217 = {
                                                                                    let l181 = *base.add(8).cast::<*mut u8>();
                                                                                    let l182 = *base.add(12).cast::<usize>();
                                                                                    let base184 = l181;
                                                                                    let len184 = l182;
                                                                                    let mut result184 = _rt::Vec::with_capacity(len184);
                                                                                    for i in 0..len184 {
                                                                                        let base = base184.add(i * 1);
                                                                                        let e184 = {
                                                                                            let l183 = i32::from(*base.add(0).cast::<u8>());
                                                                                            _rt::bool_lift(l183 as u8)
                                                                                        };
                                                                                        result184.push(e184);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base184, len184 * 1, 1);
                                                                                    result184
                                                                                };
                                                                                V217::FlagsValue(e217)
                                                                            }
                                                                            4 => {
                                                                                let e217 = {
                                                                                    let l185 = *base.add(8).cast::<*mut u8>();
                                                                                    let l186 = *base.add(12).cast::<usize>();
                                                                                    let len187 = l186;
                                                                                    _rt::Vec::from_raw_parts(l185.cast(), len187, len187)
                                                                                };
                                                                                V217::TupleValue(e217)
                                                                            }
                                                                            5 => {
                                                                                let e217 = {
                                                                                    let l188 = *base.add(8).cast::<*mut u8>();
                                                                                    let l189 = *base.add(12).cast::<usize>();
                                                                                    let len190 = l189;
                                                                                    _rt::Vec::from_raw_parts(l188.cast(), len190, len190)
                                                                                };
                                                                                V217::ListValue(e217)
                                                                            }
                                                                            6 => {
                                                                                let e217 = {
                                                                                    let l191 = i32::from(*base.add(8).cast::<u8>());
                                                                                    match l191 {
                                                                                        0 => None,
                                                                                        1 => {
                                                                                            let e = {
                                                                                                let l192 = *base.add(12).cast::<i32>();
                                                                                                l192
                                                                                            };
                                                                                            Some(e)
                                                                                        }
                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                    }
                                                                                };
                                                                                V217::OptionValue(e217)
                                                                            }
                                                                            7 => {
                                                                                let e217 = {
                                                                                    let l193 = i32::from(*base.add(8).cast::<u8>());
                                                                                    match l193 {
                                                                                        0 => {
                                                                                            let e = {
                                                                                                let l194 = i32::from(*base.add(12).cast::<u8>());
                                                                                                match l194 {
                                                                                                    0 => None,
                                                                                                    1 => {
                                                                                                        let e = {
                                                                                                            let l195 = *base.add(16).cast::<i32>();
                                                                                                            l195
                                                                                                        };
                                                                                                        Some(e)
                                                                                                    }
                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                }
                                                                                            };
                                                                                            Ok(e)
                                                                                        }
                                                                                        1 => {
                                                                                            let e = {
                                                                                                let l196 = i32::from(*base.add(12).cast::<u8>());
                                                                                                match l196 {
                                                                                                    0 => None,
                                                                                                    1 => {
                                                                                                        let e = {
                                                                                                            let l197 = *base.add(16).cast::<i32>();
                                                                                                            l197
                                                                                                        };
                                                                                                        Some(e)
                                                                                                    }
                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                }
                                                                                            };
                                                                                            Err(e)
                                                                                        }
                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                    }
                                                                                };
                                                                                V217::ResultValue(e217)
                                                                            }
                                                                            8 => {
                                                                                let e217 = {
                                                                                    let l198 = i32::from(*base.add(8).cast::<u8>());
                                                                                    l198 as u8
                                                                                };
                                                                                V217::PrimU8(e217)
                                                                            }
                                                                            9 => {
                                                                                let e217 = {
                                                                                    let l199 = i32::from(*base.add(8).cast::<u16>());
                                                                                    l199 as u16
                                                                                };
                                                                                V217::PrimU16(e217)
                                                                            }
                                                                            10 => {
                                                                                let e217 = {
                                                                                    let l200 = *base.add(8).cast::<i32>();
                                                                                    l200 as u32
                                                                                };
                                                                                V217::PrimU32(e217)
                                                                            }
                                                                            11 => {
                                                                                let e217 = {
                                                                                    let l201 = *base.add(8).cast::<i64>();
                                                                                    l201 as u64
                                                                                };
                                                                                V217::PrimU64(e217)
                                                                            }
                                                                            12 => {
                                                                                let e217 = {
                                                                                    let l202 = i32::from(*base.add(8).cast::<i8>());
                                                                                    l202 as i8
                                                                                };
                                                                                V217::PrimS8(e217)
                                                                            }
                                                                            13 => {
                                                                                let e217 = {
                                                                                    let l203 = i32::from(*base.add(8).cast::<i16>());
                                                                                    l203 as i16
                                                                                };
                                                                                V217::PrimS16(e217)
                                                                            }
                                                                            14 => {
                                                                                let e217 = {
                                                                                    let l204 = *base.add(8).cast::<i32>();
                                                                                    l204
                                                                                };
                                                                                V217::PrimS32(e217)
                                                                            }
                                                                            15 => {
                                                                                let e217 = {
                                                                                    let l205 = *base.add(8).cast::<i64>();
                                                                                    l205
                                                                                };
                                                                                V217::PrimS64(e217)
                                                                            }
                                                                            16 => {
                                                                                let e217 = {
                                                                                    let l206 = *base.add(8).cast::<f32>();
                                                                                    l206
                                                                                };
                                                                                V217::PrimFloat32(e217)
                                                                            }
                                                                            17 => {
                                                                                let e217 = {
                                                                                    let l207 = *base.add(8).cast::<f64>();
                                                                                    l207
                                                                                };
                                                                                V217::PrimFloat64(e217)
                                                                            }
                                                                            18 => {
                                                                                let e217 = {
                                                                                    let l208 = *base.add(8).cast::<i32>();
                                                                                    _rt::char_lift(l208 as u32)
                                                                                };
                                                                                V217::PrimChar(e217)
                                                                            }
                                                                            19 => {
                                                                                let e217 = {
                                                                                    let l209 = i32::from(*base.add(8).cast::<u8>());
                                                                                    _rt::bool_lift(l209 as u8)
                                                                                };
                                                                                V217::PrimBool(e217)
                                                                            }
                                                                            20 => {
                                                                                let e217 = {
                                                                                    let l210 = *base.add(8).cast::<*mut u8>();
                                                                                    let l211 = *base.add(12).cast::<usize>();
                                                                                    let len212 = l211;
                                                                                    let bytes212 = _rt::Vec::from_raw_parts(
                                                                                        l210.cast(),
                                                                                        len212,
                                                                                        len212,
                                                                                    );
                                                                                    _rt::string_lift(bytes212)
                                                                                };
                                                                                V217::PrimString(e217)
                                                                            }
                                                                            n => {
                                                                                debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                                let e217 = {
                                                                                    let l213 = *base.add(8).cast::<*mut u8>();
                                                                                    let l214 = *base.add(12).cast::<usize>();
                                                                                    let len215 = l214;
                                                                                    let bytes215 = _rt::Vec::from_raw_parts(
                                                                                        l213.cast(),
                                                                                        len215,
                                                                                        len215,
                                                                                    );
                                                                                    let l216 = *base.add(16).cast::<i64>();
                                                                                    (
                                                                                        super::super::super::golem::rpc::types::Uri {
                                                                                            value: _rt::string_lift(bytes215),
                                                                                        },
                                                                                        l216 as u64,
                                                                                    )
                                                                                };
                                                                                V217::Handle(e217)
                                                                            }
                                                                        };
                                                                        v217
                                                                    };
                                                                    result218.push(e218);
                                                                }
                                                                _rt::cabi_dealloc(base218, len218 * 24, 8);
                                                                super::super::super::golem::rpc::types::WitValue {
                                                                    nodes: result218,
                                                                }
                                                            };
                                                            result219.push(e219);
                                                        }
                                                        _rt::cabi_dealloc(base219, len219 * 8, 4);
                                                        let l220 = *base.add(40).cast::<*mut u8>();
                                                        let l221 = *base.add(44).cast::<usize>();
                                                        let len222 = l221;
                                                        let bytes222 = _rt::Vec::from_raw_parts(
                                                            l220.cast(),
                                                            len222,
                                                            len222,
                                                        );
                                                        let l223 = *base.add(48).cast::<*mut u8>();
                                                        let l224 = *base.add(52).cast::<usize>();
                                                        let len225 = l224;
                                                        let bytes225 = _rt::Vec::from_raw_parts(
                                                            l223.cast(),
                                                            len225,
                                                            len225,
                                                        );
                                                        let l226 = *base.add(56).cast::<*mut u8>();
                                                        let l227 = *base.add(60).cast::<usize>();
                                                        let base231 = l226;
                                                        let len231 = l227;
                                                        let mut result231 = _rt::Vec::with_capacity(len231);
                                                        for i in 0..len231 {
                                                            let base = base231.add(i * 8);
                                                            let e231 = {
                                                                let l228 = *base.add(0).cast::<*mut u8>();
                                                                let l229 = *base.add(4).cast::<usize>();
                                                                let len230 = l229;
                                                                let bytes230 = _rt::Vec::from_raw_parts(
                                                                    l228.cast(),
                                                                    len230,
                                                                    len230,
                                                                );
                                                                _rt::string_lift(bytes230)
                                                            };
                                                            result231.push(e231);
                                                        }
                                                        _rt::cabi_dealloc(base231, len231 * 8, 4);
                                                        let l232 = *base.add(64).cast::<*mut u8>();
                                                        let l233 = *base.add(68).cast::<usize>();
                                                        let base265 = l232;
                                                        let len265 = l233;
                                                        let mut result265 = _rt::Vec::with_capacity(len265);
                                                        for i in 0..len265 {
                                                            let base = base265.add(i * 8);
                                                            let e265 = {
                                                                let l234 = *base.add(0).cast::<*mut u8>();
                                                                let l235 = *base.add(4).cast::<usize>();
                                                                let base264 = l234;
                                                                let len264 = l235;
                                                                let mut result264 = _rt::Vec::with_capacity(len264);
                                                                for i in 0..len264 {
                                                                    let base = base264.add(i * 80);
                                                                    let e264 = {
                                                                        let l236 = i32::from(*base.add(0).cast::<u8>());
                                                                        let v263 = match l236 {
                                                                            0 => {
                                                                                let e263 = {
                                                                                    let l237 = *base.add(8).cast::<*mut u8>();
                                                                                    let l238 = *base.add(12).cast::<usize>();
                                                                                    let len239 = l238;
                                                                                    let bytes239 = _rt::Vec::from_raw_parts(
                                                                                        l237.cast(),
                                                                                        len239,
                                                                                        len239,
                                                                                    );
                                                                                    let l240 = *base.add(16).cast::<i64>();
                                                                                    let l241 = *base.add(24).cast::<i32>();
                                                                                    let l242 = i32::from(*base.add(32).cast::<u8>());
                                                                                    let l246 = i32::from(*base.add(48).cast::<u8>());
                                                                                    let l248 = *base.add(64).cast::<*mut u8>();
                                                                                    let l249 = *base.add(68).cast::<usize>();
                                                                                    let base258 = l248;
                                                                                    let len258 = l249;
                                                                                    let mut result258 = _rt::Vec::with_capacity(len258);
                                                                                    for i in 0..len258 {
                                                                                        let base = base258.add(i * 20);
                                                                                        let e258 = {
                                                                                            let l250 = *base.add(0).cast::<*mut u8>();
                                                                                            let l251 = *base.add(4).cast::<usize>();
                                                                                            let len252 = l251;
                                                                                            let bytes252 = _rt::Vec::from_raw_parts(
                                                                                                l250.cast(),
                                                                                                len252,
                                                                                                len252,
                                                                                            );
                                                                                            let l253 = i32::from(*base.add(8).cast::<u8>());
                                                                                            use super::super::super::golem::api::context::AttributeValue as V257;
                                                                                            let v257 = match l253 {
                                                                                                n => {
                                                                                                    debug_assert_eq!(n, 0, "invalid enum discriminant");
                                                                                                    let e257 = {
                                                                                                        let l254 = *base.add(12).cast::<*mut u8>();
                                                                                                        let l255 = *base.add(16).cast::<usize>();
                                                                                                        let len256 = l255;
                                                                                                        let bytes256 = _rt::Vec::from_raw_parts(
                                                                                                            l254.cast(),
                                                                                                            len256,
                                                                                                            len256,
                                                                                                        );
                                                                                                        _rt::string_lift(bytes256)
                                                                                                    };
                                                                                                    V257::String(e257)
                                                                                                }
                                                                                            };
                                                                                            super::super::super::golem::api::context::Attribute {
                                                                                                key: _rt::string_lift(bytes252),
                                                                                                value: v257,
                                                                                            }
                                                                                        };
                                                                                        result258.push(e258);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base258, len258 * 20, 4);
                                                                                    let l259 = i32::from(*base.add(72).cast::<u8>());
                                                                                    LocalSpanData {
                                                                                        span_id: _rt::string_lift(bytes239),
                                                                                        start: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                                            seconds: l240 as u64,
                                                                                            nanoseconds: l241 as u32,
                                                                                        },
                                                                                        parent: match l242 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l243 = *base.add(36).cast::<*mut u8>();
                                                                                                    let l244 = *base.add(40).cast::<usize>();
                                                                                                    let len245 = l244;
                                                                                                    let bytes245 = _rt::Vec::from_raw_parts(
                                                                                                        l243.cast(),
                                                                                                        len245,
                                                                                                        len245,
                                                                                                    );
                                                                                                    _rt::string_lift(bytes245)
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        },
                                                                                        linked_context: match l246 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l247 = *base.add(56).cast::<i64>();
                                                                                                    l247 as u64
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        },
                                                                                        attributes: result258,
                                                                                        inherited: _rt::bool_lift(l259 as u8),
                                                                                    }
                                                                                };
                                                                                SpanData::LocalSpan(e263)
                                                                            }
                                                                            n => {
                                                                                debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                                                let e263 = {
                                                                                    let l260 = *base.add(8).cast::<*mut u8>();
                                                                                    let l261 = *base.add(12).cast::<usize>();
                                                                                    let len262 = l261;
                                                                                    let bytes262 = _rt::Vec::from_raw_parts(
                                                                                        l260.cast(),
                                                                                        len262,
                                                                                        len262,
                                                                                    );
                                                                                    ExternalSpanData {
                                                                                        span_id: _rt::string_lift(bytes262),
                                                                                    }
                                                                                };
                                                                                SpanData::ExternalSpan(e263)
                                                                            }
                                                                        };
                                                                        v263
                                                                    };
                                                                    result264.push(e264);
                                                                }
                                                                _rt::cabi_dealloc(base264, len264 * 80, 8);
                                                                result264
                                                            };
                                                            result265.push(e265);
                                                        }
                                                        _rt::cabi_dealloc(base265, len265 * 8, 4);
                                                        ExportedFunctionInvokedParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l164 as u64,
                                                                nanoseconds: l165 as u32,
                                                            },
                                                            function_name: _rt::string_lift(bytes168),
                                                            request: result219,
                                                            idempotency_key: _rt::string_lift(bytes222),
                                                            trace_id: _rt::string_lift(bytes225),
                                                            trace_states: result231,
                                                            invocation_context: result265,
                                                        }
                                                    };
                                                    OplogEntry::ExportedFunctionInvoked(e620)
                                                }
                                                3 => {
                                                    let e620 = {
                                                        let l266 = *base.add(8).cast::<i64>();
                                                        let l267 = *base.add(16).cast::<i32>();
                                                        let l268 = *base.add(24).cast::<*mut u8>();
                                                        let l269 = *base.add(28).cast::<usize>();
                                                        let base315 = l268;
                                                        let len315 = l269;
                                                        let mut result315 = _rt::Vec::with_capacity(len315);
                                                        for i in 0..len315 {
                                                            let base = base315.add(i * 24);
                                                            let e315 = {
                                                                let l270 = i32::from(*base.add(0).cast::<u8>());
                                                                use super::super::super::golem::rpc::types::WitNode as V314;
                                                                let v314 = match l270 {
                                                                    0 => {
                                                                        let e314 = {
                                                                            let l271 = *base.add(8).cast::<*mut u8>();
                                                                            let l272 = *base.add(12).cast::<usize>();
                                                                            let len273 = l272;
                                                                            _rt::Vec::from_raw_parts(l271.cast(), len273, len273)
                                                                        };
                                                                        V314::RecordValue(e314)
                                                                    }
                                                                    1 => {
                                                                        let e314 = {
                                                                            let l274 = *base.add(8).cast::<i32>();
                                                                            let l275 = i32::from(*base.add(12).cast::<u8>());
                                                                            (
                                                                                l274 as u32,
                                                                                match l275 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l276 = *base.add(16).cast::<i32>();
                                                                                            l276
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                },
                                                                            )
                                                                        };
                                                                        V314::VariantValue(e314)
                                                                    }
                                                                    2 => {
                                                                        let e314 = {
                                                                            let l277 = *base.add(8).cast::<i32>();
                                                                            l277 as u32
                                                                        };
                                                                        V314::EnumValue(e314)
                                                                    }
                                                                    3 => {
                                                                        let e314 = {
                                                                            let l278 = *base.add(8).cast::<*mut u8>();
                                                                            let l279 = *base.add(12).cast::<usize>();
                                                                            let base281 = l278;
                                                                            let len281 = l279;
                                                                            let mut result281 = _rt::Vec::with_capacity(len281);
                                                                            for i in 0..len281 {
                                                                                let base = base281.add(i * 1);
                                                                                let e281 = {
                                                                                    let l280 = i32::from(*base.add(0).cast::<u8>());
                                                                                    _rt::bool_lift(l280 as u8)
                                                                                };
                                                                                result281.push(e281);
                                                                            }
                                                                            _rt::cabi_dealloc(base281, len281 * 1, 1);
                                                                            result281
                                                                        };
                                                                        V314::FlagsValue(e314)
                                                                    }
                                                                    4 => {
                                                                        let e314 = {
                                                                            let l282 = *base.add(8).cast::<*mut u8>();
                                                                            let l283 = *base.add(12).cast::<usize>();
                                                                            let len284 = l283;
                                                                            _rt::Vec::from_raw_parts(l282.cast(), len284, len284)
                                                                        };
                                                                        V314::TupleValue(e314)
                                                                    }
                                                                    5 => {
                                                                        let e314 = {
                                                                            let l285 = *base.add(8).cast::<*mut u8>();
                                                                            let l286 = *base.add(12).cast::<usize>();
                                                                            let len287 = l286;
                                                                            _rt::Vec::from_raw_parts(l285.cast(), len287, len287)
                                                                        };
                                                                        V314::ListValue(e314)
                                                                    }
                                                                    6 => {
                                                                        let e314 = {
                                                                            let l288 = i32::from(*base.add(8).cast::<u8>());
                                                                            match l288 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l289 = *base.add(12).cast::<i32>();
                                                                                        l289
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            }
                                                                        };
                                                                        V314::OptionValue(e314)
                                                                    }
                                                                    7 => {
                                                                        let e314 = {
                                                                            let l290 = i32::from(*base.add(8).cast::<u8>());
                                                                            match l290 {
                                                                                0 => {
                                                                                    let e = {
                                                                                        let l291 = i32::from(*base.add(12).cast::<u8>());
                                                                                        match l291 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l292 = *base.add(16).cast::<i32>();
                                                                                                    l292
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        }
                                                                                    };
                                                                                    Ok(e)
                                                                                }
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l293 = i32::from(*base.add(12).cast::<u8>());
                                                                                        match l293 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l294 = *base.add(16).cast::<i32>();
                                                                                                    l294
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        }
                                                                                    };
                                                                                    Err(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            }
                                                                        };
                                                                        V314::ResultValue(e314)
                                                                    }
                                                                    8 => {
                                                                        let e314 = {
                                                                            let l295 = i32::from(*base.add(8).cast::<u8>());
                                                                            l295 as u8
                                                                        };
                                                                        V314::PrimU8(e314)
                                                                    }
                                                                    9 => {
                                                                        let e314 = {
                                                                            let l296 = i32::from(*base.add(8).cast::<u16>());
                                                                            l296 as u16
                                                                        };
                                                                        V314::PrimU16(e314)
                                                                    }
                                                                    10 => {
                                                                        let e314 = {
                                                                            let l297 = *base.add(8).cast::<i32>();
                                                                            l297 as u32
                                                                        };
                                                                        V314::PrimU32(e314)
                                                                    }
                                                                    11 => {
                                                                        let e314 = {
                                                                            let l298 = *base.add(8).cast::<i64>();
                                                                            l298 as u64
                                                                        };
                                                                        V314::PrimU64(e314)
                                                                    }
                                                                    12 => {
                                                                        let e314 = {
                                                                            let l299 = i32::from(*base.add(8).cast::<i8>());
                                                                            l299 as i8
                                                                        };
                                                                        V314::PrimS8(e314)
                                                                    }
                                                                    13 => {
                                                                        let e314 = {
                                                                            let l300 = i32::from(*base.add(8).cast::<i16>());
                                                                            l300 as i16
                                                                        };
                                                                        V314::PrimS16(e314)
                                                                    }
                                                                    14 => {
                                                                        let e314 = {
                                                                            let l301 = *base.add(8).cast::<i32>();
                                                                            l301
                                                                        };
                                                                        V314::PrimS32(e314)
                                                                    }
                                                                    15 => {
                                                                        let e314 = {
                                                                            let l302 = *base.add(8).cast::<i64>();
                                                                            l302
                                                                        };
                                                                        V314::PrimS64(e314)
                                                                    }
                                                                    16 => {
                                                                        let e314 = {
                                                                            let l303 = *base.add(8).cast::<f32>();
                                                                            l303
                                                                        };
                                                                        V314::PrimFloat32(e314)
                                                                    }
                                                                    17 => {
                                                                        let e314 = {
                                                                            let l304 = *base.add(8).cast::<f64>();
                                                                            l304
                                                                        };
                                                                        V314::PrimFloat64(e314)
                                                                    }
                                                                    18 => {
                                                                        let e314 = {
                                                                            let l305 = *base.add(8).cast::<i32>();
                                                                            _rt::char_lift(l305 as u32)
                                                                        };
                                                                        V314::PrimChar(e314)
                                                                    }
                                                                    19 => {
                                                                        let e314 = {
                                                                            let l306 = i32::from(*base.add(8).cast::<u8>());
                                                                            _rt::bool_lift(l306 as u8)
                                                                        };
                                                                        V314::PrimBool(e314)
                                                                    }
                                                                    20 => {
                                                                        let e314 = {
                                                                            let l307 = *base.add(8).cast::<*mut u8>();
                                                                            let l308 = *base.add(12).cast::<usize>();
                                                                            let len309 = l308;
                                                                            let bytes309 = _rt::Vec::from_raw_parts(
                                                                                l307.cast(),
                                                                                len309,
                                                                                len309,
                                                                            );
                                                                            _rt::string_lift(bytes309)
                                                                        };
                                                                        V314::PrimString(e314)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                        let e314 = {
                                                                            let l310 = *base.add(8).cast::<*mut u8>();
                                                                            let l311 = *base.add(12).cast::<usize>();
                                                                            let len312 = l311;
                                                                            let bytes312 = _rt::Vec::from_raw_parts(
                                                                                l310.cast(),
                                                                                len312,
                                                                                len312,
                                                                            );
                                                                            let l313 = *base.add(16).cast::<i64>();
                                                                            (
                                                                                super::super::super::golem::rpc::types::Uri {
                                                                                    value: _rt::string_lift(bytes312),
                                                                                },
                                                                                l313 as u64,
                                                                            )
                                                                        };
                                                                        V314::Handle(e314)
                                                                    }
                                                                };
                                                                v314
                                                            };
                                                            result315.push(e315);
                                                        }
                                                        _rt::cabi_dealloc(base315, len315 * 24, 8);
                                                        let l316 = *base.add(32).cast::<i64>();
                                                        ExportedFunctionCompletedParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l266 as u64,
                                                                nanoseconds: l267 as u32,
                                                            },
                                                            response: super::super::super::golem::rpc::types::WitValue {
                                                                nodes: result315,
                                                            },
                                                            consumed_fuel: l316,
                                                        }
                                                    };
                                                    OplogEntry::ExportedFunctionCompleted(e620)
                                                }
                                                4 => {
                                                    let e620 = {
                                                        let l317 = *base.add(8).cast::<i64>();
                                                        let l318 = *base.add(16).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l317 as u64,
                                                            nanoseconds: l318 as u32,
                                                        }
                                                    };
                                                    OplogEntry::Suspend(e620)
                                                }
                                                5 => {
                                                    let e620 = {
                                                        let l319 = *base.add(8).cast::<i64>();
                                                        let l320 = *base.add(16).cast::<i32>();
                                                        let l321 = *base.add(24).cast::<*mut u8>();
                                                        let l322 = *base.add(28).cast::<usize>();
                                                        let len323 = l322;
                                                        let bytes323 = _rt::Vec::from_raw_parts(
                                                            l321.cast(),
                                                            len323,
                                                            len323,
                                                        );
                                                        ErrorParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l319 as u64,
                                                                nanoseconds: l320 as u32,
                                                            },
                                                            error: _rt::string_lift(bytes323),
                                                        }
                                                    };
                                                    OplogEntry::Error(e620)
                                                }
                                                6 => {
                                                    let e620 = {
                                                        let l324 = *base.add(8).cast::<i64>();
                                                        let l325 = *base.add(16).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l324 as u64,
                                                            nanoseconds: l325 as u32,
                                                        }
                                                    };
                                                    OplogEntry::NoOp(e620)
                                                }
                                                7 => {
                                                    let e620 = {
                                                        let l326 = *base.add(8).cast::<i64>();
                                                        let l327 = *base.add(16).cast::<i32>();
                                                        let l328 = *base.add(24).cast::<i64>();
                                                        let l329 = *base.add(32).cast::<i64>();
                                                        JumpParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l326 as u64,
                                                                nanoseconds: l327 as u32,
                                                            },
                                                            start: l328 as u64,
                                                            end: l329 as u64,
                                                        }
                                                    };
                                                    OplogEntry::Jump(e620)
                                                }
                                                8 => {
                                                    let e620 = {
                                                        let l330 = *base.add(8).cast::<i64>();
                                                        let l331 = *base.add(16).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l330 as u64,
                                                            nanoseconds: l331 as u32,
                                                        }
                                                    };
                                                    OplogEntry::Interrupted(e620)
                                                }
                                                9 => {
                                                    let e620 = {
                                                        let l332 = *base.add(8).cast::<i64>();
                                                        let l333 = *base.add(16).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l332 as u64,
                                                            nanoseconds: l333 as u32,
                                                        }
                                                    };
                                                    OplogEntry::Exited(e620)
                                                }
                                                10 => {
                                                    let e620 = {
                                                        let l334 = *base.add(8).cast::<i64>();
                                                        let l335 = *base.add(16).cast::<i32>();
                                                        let l336 = *base.add(24).cast::<i32>();
                                                        let l337 = *base.add(32).cast::<i64>();
                                                        let l338 = *base.add(40).cast::<i64>();
                                                        let l339 = *base.add(48).cast::<f64>();
                                                        let l340 = i32::from(*base.add(56).cast::<u8>());
                                                        ChangeRetryPolicyParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l334 as u64,
                                                                nanoseconds: l335 as u32,
                                                            },
                                                            retry_policy: super::super::super::golem::api::host::RetryPolicy {
                                                                max_attempts: l336 as u32,
                                                                min_delay: l337 as u64,
                                                                max_delay: l338 as u64,
                                                                multiplier: l339,
                                                                max_jitter_factor: match l340 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l341 = *base.add(64).cast::<f64>();
                                                                            l341
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                            },
                                                        }
                                                    };
                                                    OplogEntry::ChangeRetryPolicy(e620)
                                                }
                                                11 => {
                                                    let e620 = {
                                                        let l342 = *base.add(8).cast::<i64>();
                                                        let l343 = *base.add(16).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l342 as u64,
                                                            nanoseconds: l343 as u32,
                                                        }
                                                    };
                                                    OplogEntry::BeginAtomicRegion(e620)
                                                }
                                                12 => {
                                                    let e620 = {
                                                        let l344 = *base.add(8).cast::<i64>();
                                                        let l345 = *base.add(16).cast::<i32>();
                                                        let l346 = *base.add(24).cast::<i64>();
                                                        EndAtomicRegionParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l344 as u64,
                                                                nanoseconds: l345 as u32,
                                                            },
                                                            begin_index: l346 as u64,
                                                        }
                                                    };
                                                    OplogEntry::EndAtomicRegion(e620)
                                                }
                                                13 => {
                                                    let e620 = {
                                                        let l347 = *base.add(8).cast::<i64>();
                                                        let l348 = *base.add(16).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l347 as u64,
                                                            nanoseconds: l348 as u32,
                                                        }
                                                    };
                                                    OplogEntry::BeginRemoteWrite(e620)
                                                }
                                                14 => {
                                                    let e620 = {
                                                        let l349 = *base.add(8).cast::<i64>();
                                                        let l350 = *base.add(16).cast::<i32>();
                                                        let l351 = *base.add(24).cast::<i64>();
                                                        EndRemoteWriteParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l349 as u64,
                                                                nanoseconds: l350 as u32,
                                                            },
                                                            begin_index: l351 as u64,
                                                        }
                                                    };
                                                    OplogEntry::EndRemoteWrite(e620)
                                                }
                                                15 => {
                                                    let e620 = {
                                                        let l352 = *base.add(8).cast::<i64>();
                                                        let l353 = *base.add(16).cast::<i32>();
                                                        let l354 = i32::from(*base.add(24).cast::<u8>());
                                                        let v414 = match l354 {
                                                            0 => {
                                                                let e414 = {
                                                                    let l355 = *base.add(32).cast::<*mut u8>();
                                                                    let l356 = *base.add(36).cast::<usize>();
                                                                    let len357 = l356;
                                                                    let bytes357 = _rt::Vec::from_raw_parts(
                                                                        l355.cast(),
                                                                        len357,
                                                                        len357,
                                                                    );
                                                                    let l358 = *base.add(40).cast::<*mut u8>();
                                                                    let l359 = *base.add(44).cast::<usize>();
                                                                    let len360 = l359;
                                                                    let bytes360 = _rt::Vec::from_raw_parts(
                                                                        l358.cast(),
                                                                        len360,
                                                                        len360,
                                                                    );
                                                                    let l361 = i32::from(*base.add(48).cast::<u8>());
                                                                    ExportedFunctionInvocationParameters {
                                                                        idempotency_key: _rt::string_lift(bytes357),
                                                                        function_name: _rt::string_lift(bytes360),
                                                                        input: match l361 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l362 = *base.add(52).cast::<*mut u8>();
                                                                                    let l363 = *base.add(56).cast::<usize>();
                                                                                    let base412 = l362;
                                                                                    let len412 = l363;
                                                                                    let mut result412 = _rt::Vec::with_capacity(len412);
                                                                                    for i in 0..len412 {
                                                                                        let base = base412.add(i * 8);
                                                                                        let e412 = {
                                                                                            let l364 = *base.add(0).cast::<*mut u8>();
                                                                                            let l365 = *base.add(4).cast::<usize>();
                                                                                            let base411 = l364;
                                                                                            let len411 = l365;
                                                                                            let mut result411 = _rt::Vec::with_capacity(len411);
                                                                                            for i in 0..len411 {
                                                                                                let base = base411.add(i * 24);
                                                                                                let e411 = {
                                                                                                    let l366 = i32::from(*base.add(0).cast::<u8>());
                                                                                                    use super::super::super::golem::rpc::types::WitNode as V410;
                                                                                                    let v410 = match l366 {
                                                                                                        0 => {
                                                                                                            let e410 = {
                                                                                                                let l367 = *base.add(8).cast::<*mut u8>();
                                                                                                                let l368 = *base.add(12).cast::<usize>();
                                                                                                                let len369 = l368;
                                                                                                                _rt::Vec::from_raw_parts(l367.cast(), len369, len369)
                                                                                                            };
                                                                                                            V410::RecordValue(e410)
                                                                                                        }
                                                                                                        1 => {
                                                                                                            let e410 = {
                                                                                                                let l370 = *base.add(8).cast::<i32>();
                                                                                                                let l371 = i32::from(*base.add(12).cast::<u8>());
                                                                                                                (
                                                                                                                    l370 as u32,
                                                                                                                    match l371 {
                                                                                                                        0 => None,
                                                                                                                        1 => {
                                                                                                                            let e = {
                                                                                                                                let l372 = *base.add(16).cast::<i32>();
                                                                                                                                l372
                                                                                                                            };
                                                                                                                            Some(e)
                                                                                                                        }
                                                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                                                    },
                                                                                                                )
                                                                                                            };
                                                                                                            V410::VariantValue(e410)
                                                                                                        }
                                                                                                        2 => {
                                                                                                            let e410 = {
                                                                                                                let l373 = *base.add(8).cast::<i32>();
                                                                                                                l373 as u32
                                                                                                            };
                                                                                                            V410::EnumValue(e410)
                                                                                                        }
                                                                                                        3 => {
                                                                                                            let e410 = {
                                                                                                                let l374 = *base.add(8).cast::<*mut u8>();
                                                                                                                let l375 = *base.add(12).cast::<usize>();
                                                                                                                let base377 = l374;
                                                                                                                let len377 = l375;
                                                                                                                let mut result377 = _rt::Vec::with_capacity(len377);
                                                                                                                for i in 0..len377 {
                                                                                                                    let base = base377.add(i * 1);
                                                                                                                    let e377 = {
                                                                                                                        let l376 = i32::from(*base.add(0).cast::<u8>());
                                                                                                                        _rt::bool_lift(l376 as u8)
                                                                                                                    };
                                                                                                                    result377.push(e377);
                                                                                                                }
                                                                                                                _rt::cabi_dealloc(base377, len377 * 1, 1);
                                                                                                                result377
                                                                                                            };
                                                                                                            V410::FlagsValue(e410)
                                                                                                        }
                                                                                                        4 => {
                                                                                                            let e410 = {
                                                                                                                let l378 = *base.add(8).cast::<*mut u8>();
                                                                                                                let l379 = *base.add(12).cast::<usize>();
                                                                                                                let len380 = l379;
                                                                                                                _rt::Vec::from_raw_parts(l378.cast(), len380, len380)
                                                                                                            };
                                                                                                            V410::TupleValue(e410)
                                                                                                        }
                                                                                                        5 => {
                                                                                                            let e410 = {
                                                                                                                let l381 = *base.add(8).cast::<*mut u8>();
                                                                                                                let l382 = *base.add(12).cast::<usize>();
                                                                                                                let len383 = l382;
                                                                                                                _rt::Vec::from_raw_parts(l381.cast(), len383, len383)
                                                                                                            };
                                                                                                            V410::ListValue(e410)
                                                                                                        }
                                                                                                        6 => {
                                                                                                            let e410 = {
                                                                                                                let l384 = i32::from(*base.add(8).cast::<u8>());
                                                                                                                match l384 {
                                                                                                                    0 => None,
                                                                                                                    1 => {
                                                                                                                        let e = {
                                                                                                                            let l385 = *base.add(12).cast::<i32>();
                                                                                                                            l385
                                                                                                                        };
                                                                                                                        Some(e)
                                                                                                                    }
                                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                                }
                                                                                                            };
                                                                                                            V410::OptionValue(e410)
                                                                                                        }
                                                                                                        7 => {
                                                                                                            let e410 = {
                                                                                                                let l386 = i32::from(*base.add(8).cast::<u8>());
                                                                                                                match l386 {
                                                                                                                    0 => {
                                                                                                                        let e = {
                                                                                                                            let l387 = i32::from(*base.add(12).cast::<u8>());
                                                                                                                            match l387 {
                                                                                                                                0 => None,
                                                                                                                                1 => {
                                                                                                                                    let e = {
                                                                                                                                        let l388 = *base.add(16).cast::<i32>();
                                                                                                                                        l388
                                                                                                                                    };
                                                                                                                                    Some(e)
                                                                                                                                }
                                                                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                                                                            }
                                                                                                                        };
                                                                                                                        Ok(e)
                                                                                                                    }
                                                                                                                    1 => {
                                                                                                                        let e = {
                                                                                                                            let l389 = i32::from(*base.add(12).cast::<u8>());
                                                                                                                            match l389 {
                                                                                                                                0 => None,
                                                                                                                                1 => {
                                                                                                                                    let e = {
                                                                                                                                        let l390 = *base.add(16).cast::<i32>();
                                                                                                                                        l390
                                                                                                                                    };
                                                                                                                                    Some(e)
                                                                                                                                }
                                                                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                                                                            }
                                                                                                                        };
                                                                                                                        Err(e)
                                                                                                                    }
                                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                                }
                                                                                                            };
                                                                                                            V410::ResultValue(e410)
                                                                                                        }
                                                                                                        8 => {
                                                                                                            let e410 = {
                                                                                                                let l391 = i32::from(*base.add(8).cast::<u8>());
                                                                                                                l391 as u8
                                                                                                            };
                                                                                                            V410::PrimU8(e410)
                                                                                                        }
                                                                                                        9 => {
                                                                                                            let e410 = {
                                                                                                                let l392 = i32::from(*base.add(8).cast::<u16>());
                                                                                                                l392 as u16
                                                                                                            };
                                                                                                            V410::PrimU16(e410)
                                                                                                        }
                                                                                                        10 => {
                                                                                                            let e410 = {
                                                                                                                let l393 = *base.add(8).cast::<i32>();
                                                                                                                l393 as u32
                                                                                                            };
                                                                                                            V410::PrimU32(e410)
                                                                                                        }
                                                                                                        11 => {
                                                                                                            let e410 = {
                                                                                                                let l394 = *base.add(8).cast::<i64>();
                                                                                                                l394 as u64
                                                                                                            };
                                                                                                            V410::PrimU64(e410)
                                                                                                        }
                                                                                                        12 => {
                                                                                                            let e410 = {
                                                                                                                let l395 = i32::from(*base.add(8).cast::<i8>());
                                                                                                                l395 as i8
                                                                                                            };
                                                                                                            V410::PrimS8(e410)
                                                                                                        }
                                                                                                        13 => {
                                                                                                            let e410 = {
                                                                                                                let l396 = i32::from(*base.add(8).cast::<i16>());
                                                                                                                l396 as i16
                                                                                                            };
                                                                                                            V410::PrimS16(e410)
                                                                                                        }
                                                                                                        14 => {
                                                                                                            let e410 = {
                                                                                                                let l397 = *base.add(8).cast::<i32>();
                                                                                                                l397
                                                                                                            };
                                                                                                            V410::PrimS32(e410)
                                                                                                        }
                                                                                                        15 => {
                                                                                                            let e410 = {
                                                                                                                let l398 = *base.add(8).cast::<i64>();
                                                                                                                l398
                                                                                                            };
                                                                                                            V410::PrimS64(e410)
                                                                                                        }
                                                                                                        16 => {
                                                                                                            let e410 = {
                                                                                                                let l399 = *base.add(8).cast::<f32>();
                                                                                                                l399
                                                                                                            };
                                                                                                            V410::PrimFloat32(e410)
                                                                                                        }
                                                                                                        17 => {
                                                                                                            let e410 = {
                                                                                                                let l400 = *base.add(8).cast::<f64>();
                                                                                                                l400
                                                                                                            };
                                                                                                            V410::PrimFloat64(e410)
                                                                                                        }
                                                                                                        18 => {
                                                                                                            let e410 = {
                                                                                                                let l401 = *base.add(8).cast::<i32>();
                                                                                                                _rt::char_lift(l401 as u32)
                                                                                                            };
                                                                                                            V410::PrimChar(e410)
                                                                                                        }
                                                                                                        19 => {
                                                                                                            let e410 = {
                                                                                                                let l402 = i32::from(*base.add(8).cast::<u8>());
                                                                                                                _rt::bool_lift(l402 as u8)
                                                                                                            };
                                                                                                            V410::PrimBool(e410)
                                                                                                        }
                                                                                                        20 => {
                                                                                                            let e410 = {
                                                                                                                let l403 = *base.add(8).cast::<*mut u8>();
                                                                                                                let l404 = *base.add(12).cast::<usize>();
                                                                                                                let len405 = l404;
                                                                                                                let bytes405 = _rt::Vec::from_raw_parts(
                                                                                                                    l403.cast(),
                                                                                                                    len405,
                                                                                                                    len405,
                                                                                                                );
                                                                                                                _rt::string_lift(bytes405)
                                                                                                            };
                                                                                                            V410::PrimString(e410)
                                                                                                        }
                                                                                                        n => {
                                                                                                            debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                                                            let e410 = {
                                                                                                                let l406 = *base.add(8).cast::<*mut u8>();
                                                                                                                let l407 = *base.add(12).cast::<usize>();
                                                                                                                let len408 = l407;
                                                                                                                let bytes408 = _rt::Vec::from_raw_parts(
                                                                                                                    l406.cast(),
                                                                                                                    len408,
                                                                                                                    len408,
                                                                                                                );
                                                                                                                let l409 = *base.add(16).cast::<i64>();
                                                                                                                (
                                                                                                                    super::super::super::golem::rpc::types::Uri {
                                                                                                                        value: _rt::string_lift(bytes408),
                                                                                                                    },
                                                                                                                    l409 as u64,
                                                                                                                )
                                                                                                            };
                                                                                                            V410::Handle(e410)
                                                                                                        }
                                                                                                    };
                                                                                                    v410
                                                                                                };
                                                                                                result411.push(e411);
                                                                                            }
                                                                                            _rt::cabi_dealloc(base411, len411 * 24, 8);
                                                                                            super::super::super::golem::rpc::types::WitValue {
                                                                                                nodes: result411,
                                                                                            }
                                                                                        };
                                                                                        result412.push(e412);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base412, len412 * 8, 4);
                                                                                    result412
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                WorkerInvocation::ExportedFunction(e414)
                                                            }
                                                            n => {
                                                                debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                                let e414 = {
                                                                    let l413 = *base.add(32).cast::<i64>();
                                                                    l413 as u64
                                                                };
                                                                WorkerInvocation::ManualUpdate(e414)
                                                            }
                                                        };
                                                        PendingWorkerInvocationParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l352 as u64,
                                                                nanoseconds: l353 as u32,
                                                            },
                                                            invocation: v414,
                                                        }
                                                    };
                                                    OplogEntry::PendingWorkerInvocation(e620)
                                                }
                                                16 => {
                                                    let e620 = {
                                                        let l415 = *base.add(8).cast::<i64>();
                                                        let l416 = *base.add(16).cast::<i32>();
                                                        let l417 = *base.add(24).cast::<i64>();
                                                        let l418 = i32::from(*base.add(32).cast::<u8>());
                                                        let v422 = match l418 {
                                                            0 => UpdateDescription::AutoUpdate,
                                                            n => {
                                                                debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                                let e422 = {
                                                                    let l419 = *base.add(36).cast::<*mut u8>();
                                                                    let l420 = *base.add(40).cast::<usize>();
                                                                    let len421 = l420;
                                                                    _rt::Vec::from_raw_parts(l419.cast(), len421, len421)
                                                                };
                                                                UpdateDescription::SnapshotBased(e422)
                                                            }
                                                        };
                                                        PendingUpdateParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l415 as u64,
                                                                nanoseconds: l416 as u32,
                                                            },
                                                            target_version: l417 as u64,
                                                            update_description: v422,
                                                        }
                                                    };
                                                    OplogEntry::PendingUpdate(e620)
                                                }
                                                17 => {
                                                    let e620 = {
                                                        let l423 = *base.add(8).cast::<i64>();
                                                        let l424 = *base.add(16).cast::<i32>();
                                                        let l425 = *base.add(24).cast::<i64>();
                                                        let l426 = *base.add(32).cast::<i64>();
                                                        let l427 = *base.add(40).cast::<*mut u8>();
                                                        let l428 = *base.add(44).cast::<usize>();
                                                        let base446 = l427;
                                                        let len446 = l428;
                                                        let mut result446 = _rt::Vec::with_capacity(len446);
                                                        for i in 0..len446 {
                                                            let base = base446.add(i * 40);
                                                            let e446 = {
                                                                let l429 = *base.add(0).cast::<i64>();
                                                                let l430 = *base.add(8).cast::<i64>();
                                                                let l431 = *base.add(16).cast::<*mut u8>();
                                                                let l432 = *base.add(20).cast::<usize>();
                                                                let len433 = l432;
                                                                let bytes433 = _rt::Vec::from_raw_parts(
                                                                    l431.cast(),
                                                                    len433,
                                                                    len433,
                                                                );
                                                                let l434 = *base.add(24).cast::<*mut u8>();
                                                                let l435 = *base.add(28).cast::<usize>();
                                                                let len436 = l435;
                                                                let bytes436 = _rt::Vec::from_raw_parts(
                                                                    l434.cast(),
                                                                    len436,
                                                                    len436,
                                                                );
                                                                let l437 = *base.add(32).cast::<*mut u8>();
                                                                let l438 = *base.add(36).cast::<usize>();
                                                                let base445 = l437;
                                                                let len445 = l438;
                                                                let mut result445 = _rt::Vec::with_capacity(len445);
                                                                for i in 0..len445 {
                                                                    let base = base445.add(i * 16);
                                                                    let e445 = {
                                                                        let l439 = *base.add(0).cast::<*mut u8>();
                                                                        let l440 = *base.add(4).cast::<usize>();
                                                                        let len441 = l440;
                                                                        let bytes441 = _rt::Vec::from_raw_parts(
                                                                            l439.cast(),
                                                                            len441,
                                                                            len441,
                                                                        );
                                                                        let l442 = *base.add(8).cast::<*mut u8>();
                                                                        let l443 = *base.add(12).cast::<usize>();
                                                                        let len444 = l443;
                                                                        let bytes444 = _rt::Vec::from_raw_parts(
                                                                            l442.cast(),
                                                                            len444,
                                                                            len444,
                                                                        );
                                                                        (_rt::string_lift(bytes441), _rt::string_lift(bytes444))
                                                                    };
                                                                    result445.push(e445);
                                                                }
                                                                _rt::cabi_dealloc(base445, len445 * 16, 4);
                                                                PluginInstallationDescription {
                                                                    installation_id: super::super::super::golem::api::host::Uuid {
                                                                        high_bits: l429 as u64,
                                                                        low_bits: l430 as u64,
                                                                    },
                                                                    name: _rt::string_lift(bytes433),
                                                                    version: _rt::string_lift(bytes436),
                                                                    parameters: result445,
                                                                }
                                                            };
                                                            result446.push(e446);
                                                        }
                                                        _rt::cabi_dealloc(base446, len446 * 40, 8);
                                                        SuccessfulUpdateParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l423 as u64,
                                                                nanoseconds: l424 as u32,
                                                            },
                                                            target_version: l425 as u64,
                                                            new_component_size: l426 as u64,
                                                            new_active_plugins: result446,
                                                        }
                                                    };
                                                    OplogEntry::SuccessfulUpdate(e620)
                                                }
                                                18 => {
                                                    let e620 = {
                                                        let l447 = *base.add(8).cast::<i64>();
                                                        let l448 = *base.add(16).cast::<i32>();
                                                        let l449 = *base.add(24).cast::<i64>();
                                                        let l450 = i32::from(*base.add(32).cast::<u8>());
                                                        FailedUpdateParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l447 as u64,
                                                                nanoseconds: l448 as u32,
                                                            },
                                                            target_version: l449 as u64,
                                                            details: match l450 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l451 = *base.add(36).cast::<*mut u8>();
                                                                        let l452 = *base.add(40).cast::<usize>();
                                                                        let len453 = l452;
                                                                        let bytes453 = _rt::Vec::from_raw_parts(
                                                                            l451.cast(),
                                                                            len453,
                                                                            len453,
                                                                        );
                                                                        _rt::string_lift(bytes453)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        }
                                                    };
                                                    OplogEntry::FailedUpdate(e620)
                                                }
                                                19 => {
                                                    let e620 = {
                                                        let l454 = *base.add(8).cast::<i64>();
                                                        let l455 = *base.add(16).cast::<i32>();
                                                        let l456 = *base.add(24).cast::<i64>();
                                                        GrowMemoryParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l454 as u64,
                                                                nanoseconds: l455 as u32,
                                                            },
                                                            delta: l456 as u64,
                                                        }
                                                    };
                                                    OplogEntry::GrowMemory(e620)
                                                }
                                                20 => {
                                                    let e620 = {
                                                        let l457 = *base.add(8).cast::<i64>();
                                                        let l458 = *base.add(16).cast::<i32>();
                                                        let l459 = *base.add(24).cast::<i64>();
                                                        CreateResourceParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l457 as u64,
                                                                nanoseconds: l458 as u32,
                                                            },
                                                            resource_id: l459 as u64,
                                                        }
                                                    };
                                                    OplogEntry::CreateResource(e620)
                                                }
                                                21 => {
                                                    let e620 = {
                                                        let l460 = *base.add(8).cast::<i64>();
                                                        let l461 = *base.add(16).cast::<i32>();
                                                        let l462 = *base.add(24).cast::<i64>();
                                                        DropResourceParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l460 as u64,
                                                                nanoseconds: l461 as u32,
                                                            },
                                                            resource_id: l462 as u64,
                                                        }
                                                    };
                                                    OplogEntry::DropResource(e620)
                                                }
                                                22 => {
                                                    let e620 = {
                                                        let l463 = *base.add(8).cast::<i64>();
                                                        let l464 = *base.add(16).cast::<i32>();
                                                        let l465 = *base.add(24).cast::<i64>();
                                                        let l466 = *base.add(32).cast::<*mut u8>();
                                                        let l467 = *base.add(36).cast::<usize>();
                                                        let len468 = l467;
                                                        let bytes468 = _rt::Vec::from_raw_parts(
                                                            l466.cast(),
                                                            len468,
                                                            len468,
                                                        );
                                                        let l469 = *base.add(40).cast::<*mut u8>();
                                                        let l470 = *base.add(44).cast::<usize>();
                                                        let base519 = l469;
                                                        let len519 = l470;
                                                        let mut result519 = _rt::Vec::with_capacity(len519);
                                                        for i in 0..len519 {
                                                            let base = base519.add(i * 8);
                                                            let e519 = {
                                                                let l471 = *base.add(0).cast::<*mut u8>();
                                                                let l472 = *base.add(4).cast::<usize>();
                                                                let base518 = l471;
                                                                let len518 = l472;
                                                                let mut result518 = _rt::Vec::with_capacity(len518);
                                                                for i in 0..len518 {
                                                                    let base = base518.add(i * 24);
                                                                    let e518 = {
                                                                        let l473 = i32::from(*base.add(0).cast::<u8>());
                                                                        use super::super::super::golem::rpc::types::WitNode as V517;
                                                                        let v517 = match l473 {
                                                                            0 => {
                                                                                let e517 = {
                                                                                    let l474 = *base.add(8).cast::<*mut u8>();
                                                                                    let l475 = *base.add(12).cast::<usize>();
                                                                                    let len476 = l475;
                                                                                    _rt::Vec::from_raw_parts(l474.cast(), len476, len476)
                                                                                };
                                                                                V517::RecordValue(e517)
                                                                            }
                                                                            1 => {
                                                                                let e517 = {
                                                                                    let l477 = *base.add(8).cast::<i32>();
                                                                                    let l478 = i32::from(*base.add(12).cast::<u8>());
                                                                                    (
                                                                                        l477 as u32,
                                                                                        match l478 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l479 = *base.add(16).cast::<i32>();
                                                                                                    l479
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        },
                                                                                    )
                                                                                };
                                                                                V517::VariantValue(e517)
                                                                            }
                                                                            2 => {
                                                                                let e517 = {
                                                                                    let l480 = *base.add(8).cast::<i32>();
                                                                                    l480 as u32
                                                                                };
                                                                                V517::EnumValue(e517)
                                                                            }
                                                                            3 => {
                                                                                let e517 = {
                                                                                    let l481 = *base.add(8).cast::<*mut u8>();
                                                                                    let l482 = *base.add(12).cast::<usize>();
                                                                                    let base484 = l481;
                                                                                    let len484 = l482;
                                                                                    let mut result484 = _rt::Vec::with_capacity(len484);
                                                                                    for i in 0..len484 {
                                                                                        let base = base484.add(i * 1);
                                                                                        let e484 = {
                                                                                            let l483 = i32::from(*base.add(0).cast::<u8>());
                                                                                            _rt::bool_lift(l483 as u8)
                                                                                        };
                                                                                        result484.push(e484);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base484, len484 * 1, 1);
                                                                                    result484
                                                                                };
                                                                                V517::FlagsValue(e517)
                                                                            }
                                                                            4 => {
                                                                                let e517 = {
                                                                                    let l485 = *base.add(8).cast::<*mut u8>();
                                                                                    let l486 = *base.add(12).cast::<usize>();
                                                                                    let len487 = l486;
                                                                                    _rt::Vec::from_raw_parts(l485.cast(), len487, len487)
                                                                                };
                                                                                V517::TupleValue(e517)
                                                                            }
                                                                            5 => {
                                                                                let e517 = {
                                                                                    let l488 = *base.add(8).cast::<*mut u8>();
                                                                                    let l489 = *base.add(12).cast::<usize>();
                                                                                    let len490 = l489;
                                                                                    _rt::Vec::from_raw_parts(l488.cast(), len490, len490)
                                                                                };
                                                                                V517::ListValue(e517)
                                                                            }
                                                                            6 => {
                                                                                let e517 = {
                                                                                    let l491 = i32::from(*base.add(8).cast::<u8>());
                                                                                    match l491 {
                                                                                        0 => None,
                                                                                        1 => {
                                                                                            let e = {
                                                                                                let l492 = *base.add(12).cast::<i32>();
                                                                                                l492
                                                                                            };
                                                                                            Some(e)
                                                                                        }
                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                    }
                                                                                };
                                                                                V517::OptionValue(e517)
                                                                            }
                                                                            7 => {
                                                                                let e517 = {
                                                                                    let l493 = i32::from(*base.add(8).cast::<u8>());
                                                                                    match l493 {
                                                                                        0 => {
                                                                                            let e = {
                                                                                                let l494 = i32::from(*base.add(12).cast::<u8>());
                                                                                                match l494 {
                                                                                                    0 => None,
                                                                                                    1 => {
                                                                                                        let e = {
                                                                                                            let l495 = *base.add(16).cast::<i32>();
                                                                                                            l495
                                                                                                        };
                                                                                                        Some(e)
                                                                                                    }
                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                }
                                                                                            };
                                                                                            Ok(e)
                                                                                        }
                                                                                        1 => {
                                                                                            let e = {
                                                                                                let l496 = i32::from(*base.add(12).cast::<u8>());
                                                                                                match l496 {
                                                                                                    0 => None,
                                                                                                    1 => {
                                                                                                        let e = {
                                                                                                            let l497 = *base.add(16).cast::<i32>();
                                                                                                            l497
                                                                                                        };
                                                                                                        Some(e)
                                                                                                    }
                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                }
                                                                                            };
                                                                                            Err(e)
                                                                                        }
                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                    }
                                                                                };
                                                                                V517::ResultValue(e517)
                                                                            }
                                                                            8 => {
                                                                                let e517 = {
                                                                                    let l498 = i32::from(*base.add(8).cast::<u8>());
                                                                                    l498 as u8
                                                                                };
                                                                                V517::PrimU8(e517)
                                                                            }
                                                                            9 => {
                                                                                let e517 = {
                                                                                    let l499 = i32::from(*base.add(8).cast::<u16>());
                                                                                    l499 as u16
                                                                                };
                                                                                V517::PrimU16(e517)
                                                                            }
                                                                            10 => {
                                                                                let e517 = {
                                                                                    let l500 = *base.add(8).cast::<i32>();
                                                                                    l500 as u32
                                                                                };
                                                                                V517::PrimU32(e517)
                                                                            }
                                                                            11 => {
                                                                                let e517 = {
                                                                                    let l501 = *base.add(8).cast::<i64>();
                                                                                    l501 as u64
                                                                                };
                                                                                V517::PrimU64(e517)
                                                                            }
                                                                            12 => {
                                                                                let e517 = {
                                                                                    let l502 = i32::from(*base.add(8).cast::<i8>());
                                                                                    l502 as i8
                                                                                };
                                                                                V517::PrimS8(e517)
                                                                            }
                                                                            13 => {
                                                                                let e517 = {
                                                                                    let l503 = i32::from(*base.add(8).cast::<i16>());
                                                                                    l503 as i16
                                                                                };
                                                                                V517::PrimS16(e517)
                                                                            }
                                                                            14 => {
                                                                                let e517 = {
                                                                                    let l504 = *base.add(8).cast::<i32>();
                                                                                    l504
                                                                                };
                                                                                V517::PrimS32(e517)
                                                                            }
                                                                            15 => {
                                                                                let e517 = {
                                                                                    let l505 = *base.add(8).cast::<i64>();
                                                                                    l505
                                                                                };
                                                                                V517::PrimS64(e517)
                                                                            }
                                                                            16 => {
                                                                                let e517 = {
                                                                                    let l506 = *base.add(8).cast::<f32>();
                                                                                    l506
                                                                                };
                                                                                V517::PrimFloat32(e517)
                                                                            }
                                                                            17 => {
                                                                                let e517 = {
                                                                                    let l507 = *base.add(8).cast::<f64>();
                                                                                    l507
                                                                                };
                                                                                V517::PrimFloat64(e517)
                                                                            }
                                                                            18 => {
                                                                                let e517 = {
                                                                                    let l508 = *base.add(8).cast::<i32>();
                                                                                    _rt::char_lift(l508 as u32)
                                                                                };
                                                                                V517::PrimChar(e517)
                                                                            }
                                                                            19 => {
                                                                                let e517 = {
                                                                                    let l509 = i32::from(*base.add(8).cast::<u8>());
                                                                                    _rt::bool_lift(l509 as u8)
                                                                                };
                                                                                V517::PrimBool(e517)
                                                                            }
                                                                            20 => {
                                                                                let e517 = {
                                                                                    let l510 = *base.add(8).cast::<*mut u8>();
                                                                                    let l511 = *base.add(12).cast::<usize>();
                                                                                    let len512 = l511;
                                                                                    let bytes512 = _rt::Vec::from_raw_parts(
                                                                                        l510.cast(),
                                                                                        len512,
                                                                                        len512,
                                                                                    );
                                                                                    _rt::string_lift(bytes512)
                                                                                };
                                                                                V517::PrimString(e517)
                                                                            }
                                                                            n => {
                                                                                debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                                let e517 = {
                                                                                    let l513 = *base.add(8).cast::<*mut u8>();
                                                                                    let l514 = *base.add(12).cast::<usize>();
                                                                                    let len515 = l514;
                                                                                    let bytes515 = _rt::Vec::from_raw_parts(
                                                                                        l513.cast(),
                                                                                        len515,
                                                                                        len515,
                                                                                    );
                                                                                    let l516 = *base.add(16).cast::<i64>();
                                                                                    (
                                                                                        super::super::super::golem::rpc::types::Uri {
                                                                                            value: _rt::string_lift(bytes515),
                                                                                        },
                                                                                        l516 as u64,
                                                                                    )
                                                                                };
                                                                                V517::Handle(e517)
                                                                            }
                                                                        };
                                                                        v517
                                                                    };
                                                                    result518.push(e518);
                                                                }
                                                                _rt::cabi_dealloc(base518, len518 * 24, 8);
                                                                super::super::super::golem::rpc::types::WitValue {
                                                                    nodes: result518,
                                                                }
                                                            };
                                                            result519.push(e519);
                                                        }
                                                        _rt::cabi_dealloc(base519, len519 * 8, 4);
                                                        DescribeResourceParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l463 as u64,
                                                                nanoseconds: l464 as u32,
                                                            },
                                                            resource_id: l465 as u64,
                                                            resource_name: _rt::string_lift(bytes468),
                                                            resource_params: result519,
                                                        }
                                                    };
                                                    OplogEntry::DescribeResource(e620)
                                                }
                                                23 => {
                                                    let e620 = {
                                                        let l520 = *base.add(8).cast::<i64>();
                                                        let l521 = *base.add(16).cast::<i32>();
                                                        let l522 = i32::from(*base.add(24).cast::<u8>());
                                                        let l523 = *base.add(28).cast::<*mut u8>();
                                                        let l524 = *base.add(32).cast::<usize>();
                                                        let len525 = l524;
                                                        let bytes525 = _rt::Vec::from_raw_parts(
                                                            l523.cast(),
                                                            len525,
                                                            len525,
                                                        );
                                                        let l526 = *base.add(36).cast::<*mut u8>();
                                                        let l527 = *base.add(40).cast::<usize>();
                                                        let len528 = l527;
                                                        let bytes528 = _rt::Vec::from_raw_parts(
                                                            l526.cast(),
                                                            len528,
                                                            len528,
                                                        );
                                                        LogParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l520 as u64,
                                                                nanoseconds: l521 as u32,
                                                            },
                                                            level: LogLevel::_lift(l522 as u8),
                                                            context: _rt::string_lift(bytes525),
                                                            message: _rt::string_lift(bytes528),
                                                        }
                                                    };
                                                    OplogEntry::Log(e620)
                                                }
                                                24 => {
                                                    let e620 = {
                                                        let l529 = *base.add(8).cast::<i64>();
                                                        let l530 = *base.add(16).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l529 as u64,
                                                            nanoseconds: l530 as u32,
                                                        }
                                                    };
                                                    OplogEntry::Restart(e620)
                                                }
                                                25 => {
                                                    let e620 = {
                                                        let l531 = *base.add(8).cast::<i64>();
                                                        let l532 = *base.add(16).cast::<i32>();
                                                        let l533 = *base.add(24).cast::<i64>();
                                                        let l534 = *base.add(32).cast::<i64>();
                                                        let l535 = *base.add(40).cast::<*mut u8>();
                                                        let l536 = *base.add(44).cast::<usize>();
                                                        let len537 = l536;
                                                        let bytes537 = _rt::Vec::from_raw_parts(
                                                            l535.cast(),
                                                            len537,
                                                            len537,
                                                        );
                                                        let l538 = *base.add(48).cast::<*mut u8>();
                                                        let l539 = *base.add(52).cast::<usize>();
                                                        let len540 = l539;
                                                        let bytes540 = _rt::Vec::from_raw_parts(
                                                            l538.cast(),
                                                            len540,
                                                            len540,
                                                        );
                                                        let l541 = *base.add(56).cast::<*mut u8>();
                                                        let l542 = *base.add(60).cast::<usize>();
                                                        let base549 = l541;
                                                        let len549 = l542;
                                                        let mut result549 = _rt::Vec::with_capacity(len549);
                                                        for i in 0..len549 {
                                                            let base = base549.add(i * 16);
                                                            let e549 = {
                                                                let l543 = *base.add(0).cast::<*mut u8>();
                                                                let l544 = *base.add(4).cast::<usize>();
                                                                let len545 = l544;
                                                                let bytes545 = _rt::Vec::from_raw_parts(
                                                                    l543.cast(),
                                                                    len545,
                                                                    len545,
                                                                );
                                                                let l546 = *base.add(8).cast::<*mut u8>();
                                                                let l547 = *base.add(12).cast::<usize>();
                                                                let len548 = l547;
                                                                let bytes548 = _rt::Vec::from_raw_parts(
                                                                    l546.cast(),
                                                                    len548,
                                                                    len548,
                                                                );
                                                                (_rt::string_lift(bytes545), _rt::string_lift(bytes548))
                                                            };
                                                            result549.push(e549);
                                                        }
                                                        _rt::cabi_dealloc(base549, len549 * 16, 4);
                                                        ActivatePluginParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l531 as u64,
                                                                nanoseconds: l532 as u32,
                                                            },
                                                            plugin: PluginInstallationDescription {
                                                                installation_id: super::super::super::golem::api::host::Uuid {
                                                                    high_bits: l533 as u64,
                                                                    low_bits: l534 as u64,
                                                                },
                                                                name: _rt::string_lift(bytes537),
                                                                version: _rt::string_lift(bytes540),
                                                                parameters: result549,
                                                            },
                                                        }
                                                    };
                                                    OplogEntry::ActivatePlugin(e620)
                                                }
                                                26 => {
                                                    let e620 = {
                                                        let l550 = *base.add(8).cast::<i64>();
                                                        let l551 = *base.add(16).cast::<i32>();
                                                        let l552 = *base.add(24).cast::<i64>();
                                                        let l553 = *base.add(32).cast::<i64>();
                                                        let l554 = *base.add(40).cast::<*mut u8>();
                                                        let l555 = *base.add(44).cast::<usize>();
                                                        let len556 = l555;
                                                        let bytes556 = _rt::Vec::from_raw_parts(
                                                            l554.cast(),
                                                            len556,
                                                            len556,
                                                        );
                                                        let l557 = *base.add(48).cast::<*mut u8>();
                                                        let l558 = *base.add(52).cast::<usize>();
                                                        let len559 = l558;
                                                        let bytes559 = _rt::Vec::from_raw_parts(
                                                            l557.cast(),
                                                            len559,
                                                            len559,
                                                        );
                                                        let l560 = *base.add(56).cast::<*mut u8>();
                                                        let l561 = *base.add(60).cast::<usize>();
                                                        let base568 = l560;
                                                        let len568 = l561;
                                                        let mut result568 = _rt::Vec::with_capacity(len568);
                                                        for i in 0..len568 {
                                                            let base = base568.add(i * 16);
                                                            let e568 = {
                                                                let l562 = *base.add(0).cast::<*mut u8>();
                                                                let l563 = *base.add(4).cast::<usize>();
                                                                let len564 = l563;
                                                                let bytes564 = _rt::Vec::from_raw_parts(
                                                                    l562.cast(),
                                                                    len564,
                                                                    len564,
                                                                );
                                                                let l565 = *base.add(8).cast::<*mut u8>();
                                                                let l566 = *base.add(12).cast::<usize>();
                                                                let len567 = l566;
                                                                let bytes567 = _rt::Vec::from_raw_parts(
                                                                    l565.cast(),
                                                                    len567,
                                                                    len567,
                                                                );
                                                                (_rt::string_lift(bytes564), _rt::string_lift(bytes567))
                                                            };
                                                            result568.push(e568);
                                                        }
                                                        _rt::cabi_dealloc(base568, len568 * 16, 4);
                                                        DeactivatePluginParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l550 as u64,
                                                                nanoseconds: l551 as u32,
                                                            },
                                                            plugin: PluginInstallationDescription {
                                                                installation_id: super::super::super::golem::api::host::Uuid {
                                                                    high_bits: l552 as u64,
                                                                    low_bits: l553 as u64,
                                                                },
                                                                name: _rt::string_lift(bytes556),
                                                                version: _rt::string_lift(bytes559),
                                                                parameters: result568,
                                                            },
                                                        }
                                                    };
                                                    OplogEntry::DeactivatePlugin(e620)
                                                }
                                                27 => {
                                                    let e620 = {
                                                        let l569 = *base.add(8).cast::<i64>();
                                                        let l570 = *base.add(16).cast::<i32>();
                                                        let l571 = *base.add(24).cast::<i64>();
                                                        let l572 = *base.add(32).cast::<i64>();
                                                        RevertParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l569 as u64,
                                                                nanoseconds: l570 as u32,
                                                            },
                                                            start: l571 as u64,
                                                            end: l572 as u64,
                                                        }
                                                    };
                                                    OplogEntry::Revert(e620)
                                                }
                                                28 => {
                                                    let e620 = {
                                                        let l573 = *base.add(8).cast::<i64>();
                                                        let l574 = *base.add(16).cast::<i32>();
                                                        let l575 = *base.add(24).cast::<*mut u8>();
                                                        let l576 = *base.add(28).cast::<usize>();
                                                        let len577 = l576;
                                                        let bytes577 = _rt::Vec::from_raw_parts(
                                                            l575.cast(),
                                                            len577,
                                                            len577,
                                                        );
                                                        CancelInvocationParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l573 as u64,
                                                                nanoseconds: l574 as u32,
                                                            },
                                                            idempotency_key: _rt::string_lift(bytes577),
                                                        }
                                                    };
                                                    OplogEntry::CancelInvocation(e620)
                                                }
                                                29 => {
                                                    let e620 = {
                                                        let l578 = *base.add(8).cast::<i64>();
                                                        let l579 = *base.add(16).cast::<i32>();
                                                        let l580 = *base.add(24).cast::<*mut u8>();
                                                        let l581 = *base.add(28).cast::<usize>();
                                                        let len582 = l581;
                                                        let bytes582 = _rt::Vec::from_raw_parts(
                                                            l580.cast(),
                                                            len582,
                                                            len582,
                                                        );
                                                        let l583 = i32::from(*base.add(32).cast::<u8>());
                                                        let l587 = i32::from(*base.add(44).cast::<u8>());
                                                        let l591 = *base.add(56).cast::<*mut u8>();
                                                        let l592 = *base.add(60).cast::<usize>();
                                                        let base601 = l591;
                                                        let len601 = l592;
                                                        let mut result601 = _rt::Vec::with_capacity(len601);
                                                        for i in 0..len601 {
                                                            let base = base601.add(i * 20);
                                                            let e601 = {
                                                                let l593 = *base.add(0).cast::<*mut u8>();
                                                                let l594 = *base.add(4).cast::<usize>();
                                                                let len595 = l594;
                                                                let bytes595 = _rt::Vec::from_raw_parts(
                                                                    l593.cast(),
                                                                    len595,
                                                                    len595,
                                                                );
                                                                let l596 = i32::from(*base.add(8).cast::<u8>());
                                                                use super::super::super::golem::api::context::AttributeValue as V600;
                                                                let v600 = match l596 {
                                                                    n => {
                                                                        debug_assert_eq!(n, 0, "invalid enum discriminant");
                                                                        let e600 = {
                                                                            let l597 = *base.add(12).cast::<*mut u8>();
                                                                            let l598 = *base.add(16).cast::<usize>();
                                                                            let len599 = l598;
                                                                            let bytes599 = _rt::Vec::from_raw_parts(
                                                                                l597.cast(),
                                                                                len599,
                                                                                len599,
                                                                            );
                                                                            _rt::string_lift(bytes599)
                                                                        };
                                                                        V600::String(e600)
                                                                    }
                                                                };
                                                                super::super::super::golem::api::context::Attribute {
                                                                    key: _rt::string_lift(bytes595),
                                                                    value: v600,
                                                                }
                                                            };
                                                            result601.push(e601);
                                                        }
                                                        _rt::cabi_dealloc(base601, len601 * 20, 4);
                                                        StartSpanParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l578 as u64,
                                                                nanoseconds: l579 as u32,
                                                            },
                                                            span_id: _rt::string_lift(bytes582),
                                                            parent: match l583 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l584 = *base.add(36).cast::<*mut u8>();
                                                                        let l585 = *base.add(40).cast::<usize>();
                                                                        let len586 = l585;
                                                                        let bytes586 = _rt::Vec::from_raw_parts(
                                                                            l584.cast(),
                                                                            len586,
                                                                            len586,
                                                                        );
                                                                        _rt::string_lift(bytes586)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            linked_context: match l587 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l588 = *base.add(48).cast::<*mut u8>();
                                                                        let l589 = *base.add(52).cast::<usize>();
                                                                        let len590 = l589;
                                                                        let bytes590 = _rt::Vec::from_raw_parts(
                                                                            l588.cast(),
                                                                            len590,
                                                                            len590,
                                                                        );
                                                                        _rt::string_lift(bytes590)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            attributes: result601,
                                                        }
                                                    };
                                                    OplogEntry::StartSpan(e620)
                                                }
                                                30 => {
                                                    let e620 = {
                                                        let l602 = *base.add(8).cast::<i64>();
                                                        let l603 = *base.add(16).cast::<i32>();
                                                        let l604 = *base.add(24).cast::<*mut u8>();
                                                        let l605 = *base.add(28).cast::<usize>();
                                                        let len606 = l605;
                                                        let bytes606 = _rt::Vec::from_raw_parts(
                                                            l604.cast(),
                                                            len606,
                                                            len606,
                                                        );
                                                        FinishSpanParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l602 as u64,
                                                                nanoseconds: l603 as u32,
                                                            },
                                                            span_id: _rt::string_lift(bytes606),
                                                        }
                                                    };
                                                    OplogEntry::FinishSpan(e620)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 31, "invalid enum discriminant");
                                                    let e620 = {
                                                        let l607 = *base.add(8).cast::<i64>();
                                                        let l608 = *base.add(16).cast::<i32>();
                                                        let l609 = *base.add(24).cast::<*mut u8>();
                                                        let l610 = *base.add(28).cast::<usize>();
                                                        let len611 = l610;
                                                        let bytes611 = _rt::Vec::from_raw_parts(
                                                            l609.cast(),
                                                            len611,
                                                            len611,
                                                        );
                                                        let l612 = *base.add(32).cast::<*mut u8>();
                                                        let l613 = *base.add(36).cast::<usize>();
                                                        let len614 = l613;
                                                        let bytes614 = _rt::Vec::from_raw_parts(
                                                            l612.cast(),
                                                            len614,
                                                            len614,
                                                        );
                                                        let l615 = i32::from(*base.add(40).cast::<u8>());
                                                        use super::super::super::golem::api::context::AttributeValue as V619;
                                                        let v619 = match l615 {
                                                            n => {
                                                                debug_assert_eq!(n, 0, "invalid enum discriminant");
                                                                let e619 = {
                                                                    let l616 = *base.add(44).cast::<*mut u8>();
                                                                    let l617 = *base.add(48).cast::<usize>();
                                                                    let len618 = l617;
                                                                    let bytes618 = _rt::Vec::from_raw_parts(
                                                                        l616.cast(),
                                                                        len618,
                                                                        len618,
                                                                    );
                                                                    _rt::string_lift(bytes618)
                                                                };
                                                                V619::String(e619)
                                                            }
                                                        };
                                                        SetSpanAttributeParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l607 as u64,
                                                                nanoseconds: l608 as u32,
                                                            },
                                                            span_id: _rt::string_lift(bytes611),
                                                            key: _rt::string_lift(bytes614),
                                                            value: v619,
                                                        }
                                                    };
                                                    OplogEntry::SetSpanAttribute(e620)
                                                }
                                            };
                                            v620
                                        };
                                        result621.push(e621);
                                    }
                                    _rt::cabi_dealloc(base621, len621 * 136, 8);
                                    result621
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl SearchOplog {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(worker_id: &WorkerId, text: &str) -> Self {
                    unsafe {
                        let super::super::super::golem::api::host::WorkerId {
                            component_id: component_id0,
                            worker_name: worker_name0,
                        } = worker_id;
                        let super::super::super::golem::api::host::ComponentId {
                            uuid: uuid1,
                        } = component_id0;
                        let super::super::super::golem::api::host::Uuid {
                            high_bits: high_bits2,
                            low_bits: low_bits2,
                        } = uuid1;
                        let vec3 = worker_name0;
                        let ptr3 = vec3.as_ptr().cast::<u8>();
                        let len3 = vec3.len();
                        let vec4 = text;
                        let ptr4 = vec4.as_ptr().cast::<u8>();
                        let len4 = vec4.len();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/oplog@1.1.5")]
                        extern "C" {
                            #[link_name = "[constructor]search-oplog"]
                            fn wit_import(
                                _: i64,
                                _: i64,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                            ) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            _rt::as_i64(high_bits2),
                            _rt::as_i64(low_bits2),
                            ptr3.cast_mut(),
                            len3,
                            ptr4.cast_mut(),
                            len4,
                        );
                        SearchOplog::from_handle(ret as u32)
                    }
                }
            }
            impl SearchOplog {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_next(&self) -> Option<_rt::Vec<(OplogIndex, OplogEntry)>> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 12],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/oplog@1.1.5")]
                        extern "C" {
                            #[link_name = "[method]search-oplog.get-next"]
                            fn wit_import(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<*mut u8>();
                                    let l3 = *ptr0.add(8).cast::<usize>();
                                    let base622 = l2;
                                    let len622 = l3;
                                    let mut result622 = _rt::Vec::with_capacity(len622);
                                    for i in 0..len622 {
                                        let base = base622.add(i * 144);
                                        let e622 = {
                                            let l4 = *base.add(0).cast::<i64>();
                                            let l5 = i32::from(*base.add(8).cast::<u8>());
                                            let v621 = match l5 {
                                                0 => {
                                                    let e621 = {
                                                        let l6 = *base.add(16).cast::<i64>();
                                                        let l7 = *base.add(24).cast::<i32>();
                                                        let l8 = *base.add(32).cast::<i64>();
                                                        let l9 = *base.add(40).cast::<i64>();
                                                        let l10 = *base.add(48).cast::<*mut u8>();
                                                        let l11 = *base.add(52).cast::<usize>();
                                                        let len12 = l11;
                                                        let bytes12 = _rt::Vec::from_raw_parts(
                                                            l10.cast(),
                                                            len12,
                                                            len12,
                                                        );
                                                        let l13 = *base.add(56).cast::<i64>();
                                                        let l14 = *base.add(64).cast::<*mut u8>();
                                                        let l15 = *base.add(68).cast::<usize>();
                                                        let base19 = l14;
                                                        let len19 = l15;
                                                        let mut result19 = _rt::Vec::with_capacity(len19);
                                                        for i in 0..len19 {
                                                            let base = base19.add(i * 8);
                                                            let e19 = {
                                                                let l16 = *base.add(0).cast::<*mut u8>();
                                                                let l17 = *base.add(4).cast::<usize>();
                                                                let len18 = l17;
                                                                let bytes18 = _rt::Vec::from_raw_parts(
                                                                    l16.cast(),
                                                                    len18,
                                                                    len18,
                                                                );
                                                                _rt::string_lift(bytes18)
                                                            };
                                                            result19.push(e19);
                                                        }
                                                        _rt::cabi_dealloc(base19, len19 * 8, 4);
                                                        let l20 = *base.add(72).cast::<*mut u8>();
                                                        let l21 = *base.add(76).cast::<usize>();
                                                        let base28 = l20;
                                                        let len28 = l21;
                                                        let mut result28 = _rt::Vec::with_capacity(len28);
                                                        for i in 0..len28 {
                                                            let base = base28.add(i * 16);
                                                            let e28 = {
                                                                let l22 = *base.add(0).cast::<*mut u8>();
                                                                let l23 = *base.add(4).cast::<usize>();
                                                                let len24 = l23;
                                                                let bytes24 = _rt::Vec::from_raw_parts(
                                                                    l22.cast(),
                                                                    len24,
                                                                    len24,
                                                                );
                                                                let l25 = *base.add(8).cast::<*mut u8>();
                                                                let l26 = *base.add(12).cast::<usize>();
                                                                let len27 = l26;
                                                                let bytes27 = _rt::Vec::from_raw_parts(
                                                                    l25.cast(),
                                                                    len27,
                                                                    len27,
                                                                );
                                                                (_rt::string_lift(bytes24), _rt::string_lift(bytes27))
                                                            };
                                                            result28.push(e28);
                                                        }
                                                        _rt::cabi_dealloc(base28, len28 * 16, 4);
                                                        let l29 = *base.add(80).cast::<*mut u8>();
                                                        let l30 = *base.add(84).cast::<usize>();
                                                        let len31 = l30;
                                                        let bytes31 = _rt::Vec::from_raw_parts(
                                                            l29.cast(),
                                                            len31,
                                                            len31,
                                                        );
                                                        let l32 = i32::from(*base.add(88).cast::<u8>());
                                                        let l38 = *base.add(120).cast::<i64>();
                                                        let l39 = *base.add(128).cast::<i64>();
                                                        let l40 = *base.add(136).cast::<*mut u8>();
                                                        let l41 = *base.add(140).cast::<usize>();
                                                        let base59 = l40;
                                                        let len59 = l41;
                                                        let mut result59 = _rt::Vec::with_capacity(len59);
                                                        for i in 0..len59 {
                                                            let base = base59.add(i * 40);
                                                            let e59 = {
                                                                let l42 = *base.add(0).cast::<i64>();
                                                                let l43 = *base.add(8).cast::<i64>();
                                                                let l44 = *base.add(16).cast::<*mut u8>();
                                                                let l45 = *base.add(20).cast::<usize>();
                                                                let len46 = l45;
                                                                let bytes46 = _rt::Vec::from_raw_parts(
                                                                    l44.cast(),
                                                                    len46,
                                                                    len46,
                                                                );
                                                                let l47 = *base.add(24).cast::<*mut u8>();
                                                                let l48 = *base.add(28).cast::<usize>();
                                                                let len49 = l48;
                                                                let bytes49 = _rt::Vec::from_raw_parts(
                                                                    l47.cast(),
                                                                    len49,
                                                                    len49,
                                                                );
                                                                let l50 = *base.add(32).cast::<*mut u8>();
                                                                let l51 = *base.add(36).cast::<usize>();
                                                                let base58 = l50;
                                                                let len58 = l51;
                                                                let mut result58 = _rt::Vec::with_capacity(len58);
                                                                for i in 0..len58 {
                                                                    let base = base58.add(i * 16);
                                                                    let e58 = {
                                                                        let l52 = *base.add(0).cast::<*mut u8>();
                                                                        let l53 = *base.add(4).cast::<usize>();
                                                                        let len54 = l53;
                                                                        let bytes54 = _rt::Vec::from_raw_parts(
                                                                            l52.cast(),
                                                                            len54,
                                                                            len54,
                                                                        );
                                                                        let l55 = *base.add(8).cast::<*mut u8>();
                                                                        let l56 = *base.add(12).cast::<usize>();
                                                                        let len57 = l56;
                                                                        let bytes57 = _rt::Vec::from_raw_parts(
                                                                            l55.cast(),
                                                                            len57,
                                                                            len57,
                                                                        );
                                                                        (_rt::string_lift(bytes54), _rt::string_lift(bytes57))
                                                                    };
                                                                    result58.push(e58);
                                                                }
                                                                _rt::cabi_dealloc(base58, len58 * 16, 4);
                                                                PluginInstallationDescription {
                                                                    installation_id: super::super::super::golem::api::host::Uuid {
                                                                        high_bits: l42 as u64,
                                                                        low_bits: l43 as u64,
                                                                    },
                                                                    name: _rt::string_lift(bytes46),
                                                                    version: _rt::string_lift(bytes49),
                                                                    parameters: result58,
                                                                }
                                                            };
                                                            result59.push(e59);
                                                        }
                                                        _rt::cabi_dealloc(base59, len59 * 40, 8);
                                                        CreateParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l6 as u64,
                                                                nanoseconds: l7 as u32,
                                                            },
                                                            worker_id: super::super::super::golem::api::host::WorkerId {
                                                                component_id: super::super::super::golem::api::host::ComponentId {
                                                                    uuid: super::super::super::golem::api::host::Uuid {
                                                                        high_bits: l8 as u64,
                                                                        low_bits: l9 as u64,
                                                                    },
                                                                },
                                                                worker_name: _rt::string_lift(bytes12),
                                                            },
                                                            component_version: l13 as u64,
                                                            args: result19,
                                                            env: result28,
                                                            account_id: super::super::super::golem::api::host::AccountId {
                                                                value: _rt::string_lift(bytes31),
                                                            },
                                                            parent: match l32 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l33 = *base.add(96).cast::<i64>();
                                                                        let l34 = *base.add(104).cast::<i64>();
                                                                        let l35 = *base.add(112).cast::<*mut u8>();
                                                                        let l36 = *base.add(116).cast::<usize>();
                                                                        let len37 = l36;
                                                                        let bytes37 = _rt::Vec::from_raw_parts(
                                                                            l35.cast(),
                                                                            len37,
                                                                            len37,
                                                                        );
                                                                        super::super::super::golem::api::host::WorkerId {
                                                                            component_id: super::super::super::golem::api::host::ComponentId {
                                                                                uuid: super::super::super::golem::api::host::Uuid {
                                                                                    high_bits: l33 as u64,
                                                                                    low_bits: l34 as u64,
                                                                                },
                                                                            },
                                                                            worker_name: _rt::string_lift(bytes37),
                                                                        }
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            component_size: l38 as u64,
                                                            initial_total_linear_memory_size: l39 as u64,
                                                            initial_active_plugins: result59,
                                                        }
                                                    };
                                                    OplogEntry::Create(e621)
                                                }
                                                1 => {
                                                    let e621 = {
                                                        let l60 = *base.add(16).cast::<i64>();
                                                        let l61 = *base.add(24).cast::<i32>();
                                                        let l62 = *base.add(32).cast::<*mut u8>();
                                                        let l63 = *base.add(36).cast::<usize>();
                                                        let len64 = l63;
                                                        let bytes64 = _rt::Vec::from_raw_parts(
                                                            l62.cast(),
                                                            len64,
                                                            len64,
                                                        );
                                                        let l65 = *base.add(40).cast::<*mut u8>();
                                                        let l66 = *base.add(44).cast::<usize>();
                                                        let base112 = l65;
                                                        let len112 = l66;
                                                        let mut result112 = _rt::Vec::with_capacity(len112);
                                                        for i in 0..len112 {
                                                            let base = base112.add(i * 24);
                                                            let e112 = {
                                                                let l67 = i32::from(*base.add(0).cast::<u8>());
                                                                use super::super::super::golem::rpc::types::WitNode as V111;
                                                                let v111 = match l67 {
                                                                    0 => {
                                                                        let e111 = {
                                                                            let l68 = *base.add(8).cast::<*mut u8>();
                                                                            let l69 = *base.add(12).cast::<usize>();
                                                                            let len70 = l69;
                                                                            _rt::Vec::from_raw_parts(l68.cast(), len70, len70)
                                                                        };
                                                                        V111::RecordValue(e111)
                                                                    }
                                                                    1 => {
                                                                        let e111 = {
                                                                            let l71 = *base.add(8).cast::<i32>();
                                                                            let l72 = i32::from(*base.add(12).cast::<u8>());
                                                                            (
                                                                                l71 as u32,
                                                                                match l72 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l73 = *base.add(16).cast::<i32>();
                                                                                            l73
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                },
                                                                            )
                                                                        };
                                                                        V111::VariantValue(e111)
                                                                    }
                                                                    2 => {
                                                                        let e111 = {
                                                                            let l74 = *base.add(8).cast::<i32>();
                                                                            l74 as u32
                                                                        };
                                                                        V111::EnumValue(e111)
                                                                    }
                                                                    3 => {
                                                                        let e111 = {
                                                                            let l75 = *base.add(8).cast::<*mut u8>();
                                                                            let l76 = *base.add(12).cast::<usize>();
                                                                            let base78 = l75;
                                                                            let len78 = l76;
                                                                            let mut result78 = _rt::Vec::with_capacity(len78);
                                                                            for i in 0..len78 {
                                                                                let base = base78.add(i * 1);
                                                                                let e78 = {
                                                                                    let l77 = i32::from(*base.add(0).cast::<u8>());
                                                                                    _rt::bool_lift(l77 as u8)
                                                                                };
                                                                                result78.push(e78);
                                                                            }
                                                                            _rt::cabi_dealloc(base78, len78 * 1, 1);
                                                                            result78
                                                                        };
                                                                        V111::FlagsValue(e111)
                                                                    }
                                                                    4 => {
                                                                        let e111 = {
                                                                            let l79 = *base.add(8).cast::<*mut u8>();
                                                                            let l80 = *base.add(12).cast::<usize>();
                                                                            let len81 = l80;
                                                                            _rt::Vec::from_raw_parts(l79.cast(), len81, len81)
                                                                        };
                                                                        V111::TupleValue(e111)
                                                                    }
                                                                    5 => {
                                                                        let e111 = {
                                                                            let l82 = *base.add(8).cast::<*mut u8>();
                                                                            let l83 = *base.add(12).cast::<usize>();
                                                                            let len84 = l83;
                                                                            _rt::Vec::from_raw_parts(l82.cast(), len84, len84)
                                                                        };
                                                                        V111::ListValue(e111)
                                                                    }
                                                                    6 => {
                                                                        let e111 = {
                                                                            let l85 = i32::from(*base.add(8).cast::<u8>());
                                                                            match l85 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l86 = *base.add(12).cast::<i32>();
                                                                                        l86
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            }
                                                                        };
                                                                        V111::OptionValue(e111)
                                                                    }
                                                                    7 => {
                                                                        let e111 = {
                                                                            let l87 = i32::from(*base.add(8).cast::<u8>());
                                                                            match l87 {
                                                                                0 => {
                                                                                    let e = {
                                                                                        let l88 = i32::from(*base.add(12).cast::<u8>());
                                                                                        match l88 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l89 = *base.add(16).cast::<i32>();
                                                                                                    l89
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        }
                                                                                    };
                                                                                    Ok(e)
                                                                                }
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l90 = i32::from(*base.add(12).cast::<u8>());
                                                                                        match l90 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l91 = *base.add(16).cast::<i32>();
                                                                                                    l91
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        }
                                                                                    };
                                                                                    Err(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            }
                                                                        };
                                                                        V111::ResultValue(e111)
                                                                    }
                                                                    8 => {
                                                                        let e111 = {
                                                                            let l92 = i32::from(*base.add(8).cast::<u8>());
                                                                            l92 as u8
                                                                        };
                                                                        V111::PrimU8(e111)
                                                                    }
                                                                    9 => {
                                                                        let e111 = {
                                                                            let l93 = i32::from(*base.add(8).cast::<u16>());
                                                                            l93 as u16
                                                                        };
                                                                        V111::PrimU16(e111)
                                                                    }
                                                                    10 => {
                                                                        let e111 = {
                                                                            let l94 = *base.add(8).cast::<i32>();
                                                                            l94 as u32
                                                                        };
                                                                        V111::PrimU32(e111)
                                                                    }
                                                                    11 => {
                                                                        let e111 = {
                                                                            let l95 = *base.add(8).cast::<i64>();
                                                                            l95 as u64
                                                                        };
                                                                        V111::PrimU64(e111)
                                                                    }
                                                                    12 => {
                                                                        let e111 = {
                                                                            let l96 = i32::from(*base.add(8).cast::<i8>());
                                                                            l96 as i8
                                                                        };
                                                                        V111::PrimS8(e111)
                                                                    }
                                                                    13 => {
                                                                        let e111 = {
                                                                            let l97 = i32::from(*base.add(8).cast::<i16>());
                                                                            l97 as i16
                                                                        };
                                                                        V111::PrimS16(e111)
                                                                    }
                                                                    14 => {
                                                                        let e111 = {
                                                                            let l98 = *base.add(8).cast::<i32>();
                                                                            l98
                                                                        };
                                                                        V111::PrimS32(e111)
                                                                    }
                                                                    15 => {
                                                                        let e111 = {
                                                                            let l99 = *base.add(8).cast::<i64>();
                                                                            l99
                                                                        };
                                                                        V111::PrimS64(e111)
                                                                    }
                                                                    16 => {
                                                                        let e111 = {
                                                                            let l100 = *base.add(8).cast::<f32>();
                                                                            l100
                                                                        };
                                                                        V111::PrimFloat32(e111)
                                                                    }
                                                                    17 => {
                                                                        let e111 = {
                                                                            let l101 = *base.add(8).cast::<f64>();
                                                                            l101
                                                                        };
                                                                        V111::PrimFloat64(e111)
                                                                    }
                                                                    18 => {
                                                                        let e111 = {
                                                                            let l102 = *base.add(8).cast::<i32>();
                                                                            _rt::char_lift(l102 as u32)
                                                                        };
                                                                        V111::PrimChar(e111)
                                                                    }
                                                                    19 => {
                                                                        let e111 = {
                                                                            let l103 = i32::from(*base.add(8).cast::<u8>());
                                                                            _rt::bool_lift(l103 as u8)
                                                                        };
                                                                        V111::PrimBool(e111)
                                                                    }
                                                                    20 => {
                                                                        let e111 = {
                                                                            let l104 = *base.add(8).cast::<*mut u8>();
                                                                            let l105 = *base.add(12).cast::<usize>();
                                                                            let len106 = l105;
                                                                            let bytes106 = _rt::Vec::from_raw_parts(
                                                                                l104.cast(),
                                                                                len106,
                                                                                len106,
                                                                            );
                                                                            _rt::string_lift(bytes106)
                                                                        };
                                                                        V111::PrimString(e111)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                        let e111 = {
                                                                            let l107 = *base.add(8).cast::<*mut u8>();
                                                                            let l108 = *base.add(12).cast::<usize>();
                                                                            let len109 = l108;
                                                                            let bytes109 = _rt::Vec::from_raw_parts(
                                                                                l107.cast(),
                                                                                len109,
                                                                                len109,
                                                                            );
                                                                            let l110 = *base.add(16).cast::<i64>();
                                                                            (
                                                                                super::super::super::golem::rpc::types::Uri {
                                                                                    value: _rt::string_lift(bytes109),
                                                                                },
                                                                                l110 as u64,
                                                                            )
                                                                        };
                                                                        V111::Handle(e111)
                                                                    }
                                                                };
                                                                v111
                                                            };
                                                            result112.push(e112);
                                                        }
                                                        _rt::cabi_dealloc(base112, len112 * 24, 8);
                                                        let l113 = *base.add(48).cast::<*mut u8>();
                                                        let l114 = *base.add(52).cast::<usize>();
                                                        let base160 = l113;
                                                        let len160 = l114;
                                                        let mut result160 = _rt::Vec::with_capacity(len160);
                                                        for i in 0..len160 {
                                                            let base = base160.add(i * 24);
                                                            let e160 = {
                                                                let l115 = i32::from(*base.add(0).cast::<u8>());
                                                                use super::super::super::golem::rpc::types::WitNode as V159;
                                                                let v159 = match l115 {
                                                                    0 => {
                                                                        let e159 = {
                                                                            let l116 = *base.add(8).cast::<*mut u8>();
                                                                            let l117 = *base.add(12).cast::<usize>();
                                                                            let len118 = l117;
                                                                            _rt::Vec::from_raw_parts(l116.cast(), len118, len118)
                                                                        };
                                                                        V159::RecordValue(e159)
                                                                    }
                                                                    1 => {
                                                                        let e159 = {
                                                                            let l119 = *base.add(8).cast::<i32>();
                                                                            let l120 = i32::from(*base.add(12).cast::<u8>());
                                                                            (
                                                                                l119 as u32,
                                                                                match l120 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l121 = *base.add(16).cast::<i32>();
                                                                                            l121
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                },
                                                                            )
                                                                        };
                                                                        V159::VariantValue(e159)
                                                                    }
                                                                    2 => {
                                                                        let e159 = {
                                                                            let l122 = *base.add(8).cast::<i32>();
                                                                            l122 as u32
                                                                        };
                                                                        V159::EnumValue(e159)
                                                                    }
                                                                    3 => {
                                                                        let e159 = {
                                                                            let l123 = *base.add(8).cast::<*mut u8>();
                                                                            let l124 = *base.add(12).cast::<usize>();
                                                                            let base126 = l123;
                                                                            let len126 = l124;
                                                                            let mut result126 = _rt::Vec::with_capacity(len126);
                                                                            for i in 0..len126 {
                                                                                let base = base126.add(i * 1);
                                                                                let e126 = {
                                                                                    let l125 = i32::from(*base.add(0).cast::<u8>());
                                                                                    _rt::bool_lift(l125 as u8)
                                                                                };
                                                                                result126.push(e126);
                                                                            }
                                                                            _rt::cabi_dealloc(base126, len126 * 1, 1);
                                                                            result126
                                                                        };
                                                                        V159::FlagsValue(e159)
                                                                    }
                                                                    4 => {
                                                                        let e159 = {
                                                                            let l127 = *base.add(8).cast::<*mut u8>();
                                                                            let l128 = *base.add(12).cast::<usize>();
                                                                            let len129 = l128;
                                                                            _rt::Vec::from_raw_parts(l127.cast(), len129, len129)
                                                                        };
                                                                        V159::TupleValue(e159)
                                                                    }
                                                                    5 => {
                                                                        let e159 = {
                                                                            let l130 = *base.add(8).cast::<*mut u8>();
                                                                            let l131 = *base.add(12).cast::<usize>();
                                                                            let len132 = l131;
                                                                            _rt::Vec::from_raw_parts(l130.cast(), len132, len132)
                                                                        };
                                                                        V159::ListValue(e159)
                                                                    }
                                                                    6 => {
                                                                        let e159 = {
                                                                            let l133 = i32::from(*base.add(8).cast::<u8>());
                                                                            match l133 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l134 = *base.add(12).cast::<i32>();
                                                                                        l134
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            }
                                                                        };
                                                                        V159::OptionValue(e159)
                                                                    }
                                                                    7 => {
                                                                        let e159 = {
                                                                            let l135 = i32::from(*base.add(8).cast::<u8>());
                                                                            match l135 {
                                                                                0 => {
                                                                                    let e = {
                                                                                        let l136 = i32::from(*base.add(12).cast::<u8>());
                                                                                        match l136 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l137 = *base.add(16).cast::<i32>();
                                                                                                    l137
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        }
                                                                                    };
                                                                                    Ok(e)
                                                                                }
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l138 = i32::from(*base.add(12).cast::<u8>());
                                                                                        match l138 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l139 = *base.add(16).cast::<i32>();
                                                                                                    l139
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        }
                                                                                    };
                                                                                    Err(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            }
                                                                        };
                                                                        V159::ResultValue(e159)
                                                                    }
                                                                    8 => {
                                                                        let e159 = {
                                                                            let l140 = i32::from(*base.add(8).cast::<u8>());
                                                                            l140 as u8
                                                                        };
                                                                        V159::PrimU8(e159)
                                                                    }
                                                                    9 => {
                                                                        let e159 = {
                                                                            let l141 = i32::from(*base.add(8).cast::<u16>());
                                                                            l141 as u16
                                                                        };
                                                                        V159::PrimU16(e159)
                                                                    }
                                                                    10 => {
                                                                        let e159 = {
                                                                            let l142 = *base.add(8).cast::<i32>();
                                                                            l142 as u32
                                                                        };
                                                                        V159::PrimU32(e159)
                                                                    }
                                                                    11 => {
                                                                        let e159 = {
                                                                            let l143 = *base.add(8).cast::<i64>();
                                                                            l143 as u64
                                                                        };
                                                                        V159::PrimU64(e159)
                                                                    }
                                                                    12 => {
                                                                        let e159 = {
                                                                            let l144 = i32::from(*base.add(8).cast::<i8>());
                                                                            l144 as i8
                                                                        };
                                                                        V159::PrimS8(e159)
                                                                    }
                                                                    13 => {
                                                                        let e159 = {
                                                                            let l145 = i32::from(*base.add(8).cast::<i16>());
                                                                            l145 as i16
                                                                        };
                                                                        V159::PrimS16(e159)
                                                                    }
                                                                    14 => {
                                                                        let e159 = {
                                                                            let l146 = *base.add(8).cast::<i32>();
                                                                            l146
                                                                        };
                                                                        V159::PrimS32(e159)
                                                                    }
                                                                    15 => {
                                                                        let e159 = {
                                                                            let l147 = *base.add(8).cast::<i64>();
                                                                            l147
                                                                        };
                                                                        V159::PrimS64(e159)
                                                                    }
                                                                    16 => {
                                                                        let e159 = {
                                                                            let l148 = *base.add(8).cast::<f32>();
                                                                            l148
                                                                        };
                                                                        V159::PrimFloat32(e159)
                                                                    }
                                                                    17 => {
                                                                        let e159 = {
                                                                            let l149 = *base.add(8).cast::<f64>();
                                                                            l149
                                                                        };
                                                                        V159::PrimFloat64(e159)
                                                                    }
                                                                    18 => {
                                                                        let e159 = {
                                                                            let l150 = *base.add(8).cast::<i32>();
                                                                            _rt::char_lift(l150 as u32)
                                                                        };
                                                                        V159::PrimChar(e159)
                                                                    }
                                                                    19 => {
                                                                        let e159 = {
                                                                            let l151 = i32::from(*base.add(8).cast::<u8>());
                                                                            _rt::bool_lift(l151 as u8)
                                                                        };
                                                                        V159::PrimBool(e159)
                                                                    }
                                                                    20 => {
                                                                        let e159 = {
                                                                            let l152 = *base.add(8).cast::<*mut u8>();
                                                                            let l153 = *base.add(12).cast::<usize>();
                                                                            let len154 = l153;
                                                                            let bytes154 = _rt::Vec::from_raw_parts(
                                                                                l152.cast(),
                                                                                len154,
                                                                                len154,
                                                                            );
                                                                            _rt::string_lift(bytes154)
                                                                        };
                                                                        V159::PrimString(e159)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                        let e159 = {
                                                                            let l155 = *base.add(8).cast::<*mut u8>();
                                                                            let l156 = *base.add(12).cast::<usize>();
                                                                            let len157 = l156;
                                                                            let bytes157 = _rt::Vec::from_raw_parts(
                                                                                l155.cast(),
                                                                                len157,
                                                                                len157,
                                                                            );
                                                                            let l158 = *base.add(16).cast::<i64>();
                                                                            (
                                                                                super::super::super::golem::rpc::types::Uri {
                                                                                    value: _rt::string_lift(bytes157),
                                                                                },
                                                                                l158 as u64,
                                                                            )
                                                                        };
                                                                        V159::Handle(e159)
                                                                    }
                                                                };
                                                                v159
                                                            };
                                                            result160.push(e160);
                                                        }
                                                        _rt::cabi_dealloc(base160, len160 * 24, 8);
                                                        let l161 = i32::from(*base.add(56).cast::<u8>());
                                                        let v164 = match l161 {
                                                            0 => WrappedFunctionType::ReadLocal,
                                                            1 => WrappedFunctionType::WriteLocal,
                                                            2 => WrappedFunctionType::ReadRemote,
                                                            3 => WrappedFunctionType::WriteRemote,
                                                            n => {
                                                                debug_assert_eq!(n, 4, "invalid enum discriminant");
                                                                let e164 = {
                                                                    let l162 = i32::from(*base.add(64).cast::<u8>());
                                                                    match l162 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l163 = *base.add(72).cast::<i64>();
                                                                                l163 as u64
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                WrappedFunctionType::WriteRemoteBatched(e164)
                                                            }
                                                        };
                                                        ImportedFunctionInvokedParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l60 as u64,
                                                                nanoseconds: l61 as u32,
                                                            },
                                                            function_name: _rt::string_lift(bytes64),
                                                            request: super::super::super::golem::rpc::types::WitValue {
                                                                nodes: result112,
                                                            },
                                                            response: super::super::super::golem::rpc::types::WitValue {
                                                                nodes: result160,
                                                            },
                                                            wrapped_function_type: v164,
                                                        }
                                                    };
                                                    OplogEntry::ImportedFunctionInvoked(e621)
                                                }
                                                2 => {
                                                    let e621 = {
                                                        let l165 = *base.add(16).cast::<i64>();
                                                        let l166 = *base.add(24).cast::<i32>();
                                                        let l167 = *base.add(32).cast::<*mut u8>();
                                                        let l168 = *base.add(36).cast::<usize>();
                                                        let len169 = l168;
                                                        let bytes169 = _rt::Vec::from_raw_parts(
                                                            l167.cast(),
                                                            len169,
                                                            len169,
                                                        );
                                                        let l170 = *base.add(40).cast::<*mut u8>();
                                                        let l171 = *base.add(44).cast::<usize>();
                                                        let base220 = l170;
                                                        let len220 = l171;
                                                        let mut result220 = _rt::Vec::with_capacity(len220);
                                                        for i in 0..len220 {
                                                            let base = base220.add(i * 8);
                                                            let e220 = {
                                                                let l172 = *base.add(0).cast::<*mut u8>();
                                                                let l173 = *base.add(4).cast::<usize>();
                                                                let base219 = l172;
                                                                let len219 = l173;
                                                                let mut result219 = _rt::Vec::with_capacity(len219);
                                                                for i in 0..len219 {
                                                                    let base = base219.add(i * 24);
                                                                    let e219 = {
                                                                        let l174 = i32::from(*base.add(0).cast::<u8>());
                                                                        use super::super::super::golem::rpc::types::WitNode as V218;
                                                                        let v218 = match l174 {
                                                                            0 => {
                                                                                let e218 = {
                                                                                    let l175 = *base.add(8).cast::<*mut u8>();
                                                                                    let l176 = *base.add(12).cast::<usize>();
                                                                                    let len177 = l176;
                                                                                    _rt::Vec::from_raw_parts(l175.cast(), len177, len177)
                                                                                };
                                                                                V218::RecordValue(e218)
                                                                            }
                                                                            1 => {
                                                                                let e218 = {
                                                                                    let l178 = *base.add(8).cast::<i32>();
                                                                                    let l179 = i32::from(*base.add(12).cast::<u8>());
                                                                                    (
                                                                                        l178 as u32,
                                                                                        match l179 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l180 = *base.add(16).cast::<i32>();
                                                                                                    l180
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        },
                                                                                    )
                                                                                };
                                                                                V218::VariantValue(e218)
                                                                            }
                                                                            2 => {
                                                                                let e218 = {
                                                                                    let l181 = *base.add(8).cast::<i32>();
                                                                                    l181 as u32
                                                                                };
                                                                                V218::EnumValue(e218)
                                                                            }
                                                                            3 => {
                                                                                let e218 = {
                                                                                    let l182 = *base.add(8).cast::<*mut u8>();
                                                                                    let l183 = *base.add(12).cast::<usize>();
                                                                                    let base185 = l182;
                                                                                    let len185 = l183;
                                                                                    let mut result185 = _rt::Vec::with_capacity(len185);
                                                                                    for i in 0..len185 {
                                                                                        let base = base185.add(i * 1);
                                                                                        let e185 = {
                                                                                            let l184 = i32::from(*base.add(0).cast::<u8>());
                                                                                            _rt::bool_lift(l184 as u8)
                                                                                        };
                                                                                        result185.push(e185);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base185, len185 * 1, 1);
                                                                                    result185
                                                                                };
                                                                                V218::FlagsValue(e218)
                                                                            }
                                                                            4 => {
                                                                                let e218 = {
                                                                                    let l186 = *base.add(8).cast::<*mut u8>();
                                                                                    let l187 = *base.add(12).cast::<usize>();
                                                                                    let len188 = l187;
                                                                                    _rt::Vec::from_raw_parts(l186.cast(), len188, len188)
                                                                                };
                                                                                V218::TupleValue(e218)
                                                                            }
                                                                            5 => {
                                                                                let e218 = {
                                                                                    let l189 = *base.add(8).cast::<*mut u8>();
                                                                                    let l190 = *base.add(12).cast::<usize>();
                                                                                    let len191 = l190;
                                                                                    _rt::Vec::from_raw_parts(l189.cast(), len191, len191)
                                                                                };
                                                                                V218::ListValue(e218)
                                                                            }
                                                                            6 => {
                                                                                let e218 = {
                                                                                    let l192 = i32::from(*base.add(8).cast::<u8>());
                                                                                    match l192 {
                                                                                        0 => None,
                                                                                        1 => {
                                                                                            let e = {
                                                                                                let l193 = *base.add(12).cast::<i32>();
                                                                                                l193
                                                                                            };
                                                                                            Some(e)
                                                                                        }
                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                    }
                                                                                };
                                                                                V218::OptionValue(e218)
                                                                            }
                                                                            7 => {
                                                                                let e218 = {
                                                                                    let l194 = i32::from(*base.add(8).cast::<u8>());
                                                                                    match l194 {
                                                                                        0 => {
                                                                                            let e = {
                                                                                                let l195 = i32::from(*base.add(12).cast::<u8>());
                                                                                                match l195 {
                                                                                                    0 => None,
                                                                                                    1 => {
                                                                                                        let e = {
                                                                                                            let l196 = *base.add(16).cast::<i32>();
                                                                                                            l196
                                                                                                        };
                                                                                                        Some(e)
                                                                                                    }
                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                }
                                                                                            };
                                                                                            Ok(e)
                                                                                        }
                                                                                        1 => {
                                                                                            let e = {
                                                                                                let l197 = i32::from(*base.add(12).cast::<u8>());
                                                                                                match l197 {
                                                                                                    0 => None,
                                                                                                    1 => {
                                                                                                        let e = {
                                                                                                            let l198 = *base.add(16).cast::<i32>();
                                                                                                            l198
                                                                                                        };
                                                                                                        Some(e)
                                                                                                    }
                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                }
                                                                                            };
                                                                                            Err(e)
                                                                                        }
                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                    }
                                                                                };
                                                                                V218::ResultValue(e218)
                                                                            }
                                                                            8 => {
                                                                                let e218 = {
                                                                                    let l199 = i32::from(*base.add(8).cast::<u8>());
                                                                                    l199 as u8
                                                                                };
                                                                                V218::PrimU8(e218)
                                                                            }
                                                                            9 => {
                                                                                let e218 = {
                                                                                    let l200 = i32::from(*base.add(8).cast::<u16>());
                                                                                    l200 as u16
                                                                                };
                                                                                V218::PrimU16(e218)
                                                                            }
                                                                            10 => {
                                                                                let e218 = {
                                                                                    let l201 = *base.add(8).cast::<i32>();
                                                                                    l201 as u32
                                                                                };
                                                                                V218::PrimU32(e218)
                                                                            }
                                                                            11 => {
                                                                                let e218 = {
                                                                                    let l202 = *base.add(8).cast::<i64>();
                                                                                    l202 as u64
                                                                                };
                                                                                V218::PrimU64(e218)
                                                                            }
                                                                            12 => {
                                                                                let e218 = {
                                                                                    let l203 = i32::from(*base.add(8).cast::<i8>());
                                                                                    l203 as i8
                                                                                };
                                                                                V218::PrimS8(e218)
                                                                            }
                                                                            13 => {
                                                                                let e218 = {
                                                                                    let l204 = i32::from(*base.add(8).cast::<i16>());
                                                                                    l204 as i16
                                                                                };
                                                                                V218::PrimS16(e218)
                                                                            }
                                                                            14 => {
                                                                                let e218 = {
                                                                                    let l205 = *base.add(8).cast::<i32>();
                                                                                    l205
                                                                                };
                                                                                V218::PrimS32(e218)
                                                                            }
                                                                            15 => {
                                                                                let e218 = {
                                                                                    let l206 = *base.add(8).cast::<i64>();
                                                                                    l206
                                                                                };
                                                                                V218::PrimS64(e218)
                                                                            }
                                                                            16 => {
                                                                                let e218 = {
                                                                                    let l207 = *base.add(8).cast::<f32>();
                                                                                    l207
                                                                                };
                                                                                V218::PrimFloat32(e218)
                                                                            }
                                                                            17 => {
                                                                                let e218 = {
                                                                                    let l208 = *base.add(8).cast::<f64>();
                                                                                    l208
                                                                                };
                                                                                V218::PrimFloat64(e218)
                                                                            }
                                                                            18 => {
                                                                                let e218 = {
                                                                                    let l209 = *base.add(8).cast::<i32>();
                                                                                    _rt::char_lift(l209 as u32)
                                                                                };
                                                                                V218::PrimChar(e218)
                                                                            }
                                                                            19 => {
                                                                                let e218 = {
                                                                                    let l210 = i32::from(*base.add(8).cast::<u8>());
                                                                                    _rt::bool_lift(l210 as u8)
                                                                                };
                                                                                V218::PrimBool(e218)
                                                                            }
                                                                            20 => {
                                                                                let e218 = {
                                                                                    let l211 = *base.add(8).cast::<*mut u8>();
                                                                                    let l212 = *base.add(12).cast::<usize>();
                                                                                    let len213 = l212;
                                                                                    let bytes213 = _rt::Vec::from_raw_parts(
                                                                                        l211.cast(),
                                                                                        len213,
                                                                                        len213,
                                                                                    );
                                                                                    _rt::string_lift(bytes213)
                                                                                };
                                                                                V218::PrimString(e218)
                                                                            }
                                                                            n => {
                                                                                debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                                let e218 = {
                                                                                    let l214 = *base.add(8).cast::<*mut u8>();
                                                                                    let l215 = *base.add(12).cast::<usize>();
                                                                                    let len216 = l215;
                                                                                    let bytes216 = _rt::Vec::from_raw_parts(
                                                                                        l214.cast(),
                                                                                        len216,
                                                                                        len216,
                                                                                    );
                                                                                    let l217 = *base.add(16).cast::<i64>();
                                                                                    (
                                                                                        super::super::super::golem::rpc::types::Uri {
                                                                                            value: _rt::string_lift(bytes216),
                                                                                        },
                                                                                        l217 as u64,
                                                                                    )
                                                                                };
                                                                                V218::Handle(e218)
                                                                            }
                                                                        };
                                                                        v218
                                                                    };
                                                                    result219.push(e219);
                                                                }
                                                                _rt::cabi_dealloc(base219, len219 * 24, 8);
                                                                super::super::super::golem::rpc::types::WitValue {
                                                                    nodes: result219,
                                                                }
                                                            };
                                                            result220.push(e220);
                                                        }
                                                        _rt::cabi_dealloc(base220, len220 * 8, 4);
                                                        let l221 = *base.add(48).cast::<*mut u8>();
                                                        let l222 = *base.add(52).cast::<usize>();
                                                        let len223 = l222;
                                                        let bytes223 = _rt::Vec::from_raw_parts(
                                                            l221.cast(),
                                                            len223,
                                                            len223,
                                                        );
                                                        let l224 = *base.add(56).cast::<*mut u8>();
                                                        let l225 = *base.add(60).cast::<usize>();
                                                        let len226 = l225;
                                                        let bytes226 = _rt::Vec::from_raw_parts(
                                                            l224.cast(),
                                                            len226,
                                                            len226,
                                                        );
                                                        let l227 = *base.add(64).cast::<*mut u8>();
                                                        let l228 = *base.add(68).cast::<usize>();
                                                        let base232 = l227;
                                                        let len232 = l228;
                                                        let mut result232 = _rt::Vec::with_capacity(len232);
                                                        for i in 0..len232 {
                                                            let base = base232.add(i * 8);
                                                            let e232 = {
                                                                let l229 = *base.add(0).cast::<*mut u8>();
                                                                let l230 = *base.add(4).cast::<usize>();
                                                                let len231 = l230;
                                                                let bytes231 = _rt::Vec::from_raw_parts(
                                                                    l229.cast(),
                                                                    len231,
                                                                    len231,
                                                                );
                                                                _rt::string_lift(bytes231)
                                                            };
                                                            result232.push(e232);
                                                        }
                                                        _rt::cabi_dealloc(base232, len232 * 8, 4);
                                                        let l233 = *base.add(72).cast::<*mut u8>();
                                                        let l234 = *base.add(76).cast::<usize>();
                                                        let base266 = l233;
                                                        let len266 = l234;
                                                        let mut result266 = _rt::Vec::with_capacity(len266);
                                                        for i in 0..len266 {
                                                            let base = base266.add(i * 8);
                                                            let e266 = {
                                                                let l235 = *base.add(0).cast::<*mut u8>();
                                                                let l236 = *base.add(4).cast::<usize>();
                                                                let base265 = l235;
                                                                let len265 = l236;
                                                                let mut result265 = _rt::Vec::with_capacity(len265);
                                                                for i in 0..len265 {
                                                                    let base = base265.add(i * 80);
                                                                    let e265 = {
                                                                        let l237 = i32::from(*base.add(0).cast::<u8>());
                                                                        let v264 = match l237 {
                                                                            0 => {
                                                                                let e264 = {
                                                                                    let l238 = *base.add(8).cast::<*mut u8>();
                                                                                    let l239 = *base.add(12).cast::<usize>();
                                                                                    let len240 = l239;
                                                                                    let bytes240 = _rt::Vec::from_raw_parts(
                                                                                        l238.cast(),
                                                                                        len240,
                                                                                        len240,
                                                                                    );
                                                                                    let l241 = *base.add(16).cast::<i64>();
                                                                                    let l242 = *base.add(24).cast::<i32>();
                                                                                    let l243 = i32::from(*base.add(32).cast::<u8>());
                                                                                    let l247 = i32::from(*base.add(48).cast::<u8>());
                                                                                    let l249 = *base.add(64).cast::<*mut u8>();
                                                                                    let l250 = *base.add(68).cast::<usize>();
                                                                                    let base259 = l249;
                                                                                    let len259 = l250;
                                                                                    let mut result259 = _rt::Vec::with_capacity(len259);
                                                                                    for i in 0..len259 {
                                                                                        let base = base259.add(i * 20);
                                                                                        let e259 = {
                                                                                            let l251 = *base.add(0).cast::<*mut u8>();
                                                                                            let l252 = *base.add(4).cast::<usize>();
                                                                                            let len253 = l252;
                                                                                            let bytes253 = _rt::Vec::from_raw_parts(
                                                                                                l251.cast(),
                                                                                                len253,
                                                                                                len253,
                                                                                            );
                                                                                            let l254 = i32::from(*base.add(8).cast::<u8>());
                                                                                            use super::super::super::golem::api::context::AttributeValue as V258;
                                                                                            let v258 = match l254 {
                                                                                                n => {
                                                                                                    debug_assert_eq!(n, 0, "invalid enum discriminant");
                                                                                                    let e258 = {
                                                                                                        let l255 = *base.add(12).cast::<*mut u8>();
                                                                                                        let l256 = *base.add(16).cast::<usize>();
                                                                                                        let len257 = l256;
                                                                                                        let bytes257 = _rt::Vec::from_raw_parts(
                                                                                                            l255.cast(),
                                                                                                            len257,
                                                                                                            len257,
                                                                                                        );
                                                                                                        _rt::string_lift(bytes257)
                                                                                                    };
                                                                                                    V258::String(e258)
                                                                                                }
                                                                                            };
                                                                                            super::super::super::golem::api::context::Attribute {
                                                                                                key: _rt::string_lift(bytes253),
                                                                                                value: v258,
                                                                                            }
                                                                                        };
                                                                                        result259.push(e259);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base259, len259 * 20, 4);
                                                                                    let l260 = i32::from(*base.add(72).cast::<u8>());
                                                                                    LocalSpanData {
                                                                                        span_id: _rt::string_lift(bytes240),
                                                                                        start: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                                            seconds: l241 as u64,
                                                                                            nanoseconds: l242 as u32,
                                                                                        },
                                                                                        parent: match l243 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l244 = *base.add(36).cast::<*mut u8>();
                                                                                                    let l245 = *base.add(40).cast::<usize>();
                                                                                                    let len246 = l245;
                                                                                                    let bytes246 = _rt::Vec::from_raw_parts(
                                                                                                        l244.cast(),
                                                                                                        len246,
                                                                                                        len246,
                                                                                                    );
                                                                                                    _rt::string_lift(bytes246)
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        },
                                                                                        linked_context: match l247 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l248 = *base.add(56).cast::<i64>();
                                                                                                    l248 as u64
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        },
                                                                                        attributes: result259,
                                                                                        inherited: _rt::bool_lift(l260 as u8),
                                                                                    }
                                                                                };
                                                                                SpanData::LocalSpan(e264)
                                                                            }
                                                                            n => {
                                                                                debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                                                let e264 = {
                                                                                    let l261 = *base.add(8).cast::<*mut u8>();
                                                                                    let l262 = *base.add(12).cast::<usize>();
                                                                                    let len263 = l262;
                                                                                    let bytes263 = _rt::Vec::from_raw_parts(
                                                                                        l261.cast(),
                                                                                        len263,
                                                                                        len263,
                                                                                    );
                                                                                    ExternalSpanData {
                                                                                        span_id: _rt::string_lift(bytes263),
                                                                                    }
                                                                                };
                                                                                SpanData::ExternalSpan(e264)
                                                                            }
                                                                        };
                                                                        v264
                                                                    };
                                                                    result265.push(e265);
                                                                }
                                                                _rt::cabi_dealloc(base265, len265 * 80, 8);
                                                                result265
                                                            };
                                                            result266.push(e266);
                                                        }
                                                        _rt::cabi_dealloc(base266, len266 * 8, 4);
                                                        ExportedFunctionInvokedParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l165 as u64,
                                                                nanoseconds: l166 as u32,
                                                            },
                                                            function_name: _rt::string_lift(bytes169),
                                                            request: result220,
                                                            idempotency_key: _rt::string_lift(bytes223),
                                                            trace_id: _rt::string_lift(bytes226),
                                                            trace_states: result232,
                                                            invocation_context: result266,
                                                        }
                                                    };
                                                    OplogEntry::ExportedFunctionInvoked(e621)
                                                }
                                                3 => {
                                                    let e621 = {
                                                        let l267 = *base.add(16).cast::<i64>();
                                                        let l268 = *base.add(24).cast::<i32>();
                                                        let l269 = *base.add(32).cast::<*mut u8>();
                                                        let l270 = *base.add(36).cast::<usize>();
                                                        let base316 = l269;
                                                        let len316 = l270;
                                                        let mut result316 = _rt::Vec::with_capacity(len316);
                                                        for i in 0..len316 {
                                                            let base = base316.add(i * 24);
                                                            let e316 = {
                                                                let l271 = i32::from(*base.add(0).cast::<u8>());
                                                                use super::super::super::golem::rpc::types::WitNode as V315;
                                                                let v315 = match l271 {
                                                                    0 => {
                                                                        let e315 = {
                                                                            let l272 = *base.add(8).cast::<*mut u8>();
                                                                            let l273 = *base.add(12).cast::<usize>();
                                                                            let len274 = l273;
                                                                            _rt::Vec::from_raw_parts(l272.cast(), len274, len274)
                                                                        };
                                                                        V315::RecordValue(e315)
                                                                    }
                                                                    1 => {
                                                                        let e315 = {
                                                                            let l275 = *base.add(8).cast::<i32>();
                                                                            let l276 = i32::from(*base.add(12).cast::<u8>());
                                                                            (
                                                                                l275 as u32,
                                                                                match l276 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l277 = *base.add(16).cast::<i32>();
                                                                                            l277
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                },
                                                                            )
                                                                        };
                                                                        V315::VariantValue(e315)
                                                                    }
                                                                    2 => {
                                                                        let e315 = {
                                                                            let l278 = *base.add(8).cast::<i32>();
                                                                            l278 as u32
                                                                        };
                                                                        V315::EnumValue(e315)
                                                                    }
                                                                    3 => {
                                                                        let e315 = {
                                                                            let l279 = *base.add(8).cast::<*mut u8>();
                                                                            let l280 = *base.add(12).cast::<usize>();
                                                                            let base282 = l279;
                                                                            let len282 = l280;
                                                                            let mut result282 = _rt::Vec::with_capacity(len282);
                                                                            for i in 0..len282 {
                                                                                let base = base282.add(i * 1);
                                                                                let e282 = {
                                                                                    let l281 = i32::from(*base.add(0).cast::<u8>());
                                                                                    _rt::bool_lift(l281 as u8)
                                                                                };
                                                                                result282.push(e282);
                                                                            }
                                                                            _rt::cabi_dealloc(base282, len282 * 1, 1);
                                                                            result282
                                                                        };
                                                                        V315::FlagsValue(e315)
                                                                    }
                                                                    4 => {
                                                                        let e315 = {
                                                                            let l283 = *base.add(8).cast::<*mut u8>();
                                                                            let l284 = *base.add(12).cast::<usize>();
                                                                            let len285 = l284;
                                                                            _rt::Vec::from_raw_parts(l283.cast(), len285, len285)
                                                                        };
                                                                        V315::TupleValue(e315)
                                                                    }
                                                                    5 => {
                                                                        let e315 = {
                                                                            let l286 = *base.add(8).cast::<*mut u8>();
                                                                            let l287 = *base.add(12).cast::<usize>();
                                                                            let len288 = l287;
                                                                            _rt::Vec::from_raw_parts(l286.cast(), len288, len288)
                                                                        };
                                                                        V315::ListValue(e315)
                                                                    }
                                                                    6 => {
                                                                        let e315 = {
                                                                            let l289 = i32::from(*base.add(8).cast::<u8>());
                                                                            match l289 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l290 = *base.add(12).cast::<i32>();
                                                                                        l290
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            }
                                                                        };
                                                                        V315::OptionValue(e315)
                                                                    }
                                                                    7 => {
                                                                        let e315 = {
                                                                            let l291 = i32::from(*base.add(8).cast::<u8>());
                                                                            match l291 {
                                                                                0 => {
                                                                                    let e = {
                                                                                        let l292 = i32::from(*base.add(12).cast::<u8>());
                                                                                        match l292 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l293 = *base.add(16).cast::<i32>();
                                                                                                    l293
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        }
                                                                                    };
                                                                                    Ok(e)
                                                                                }
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l294 = i32::from(*base.add(12).cast::<u8>());
                                                                                        match l294 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l295 = *base.add(16).cast::<i32>();
                                                                                                    l295
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        }
                                                                                    };
                                                                                    Err(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            }
                                                                        };
                                                                        V315::ResultValue(e315)
                                                                    }
                                                                    8 => {
                                                                        let e315 = {
                                                                            let l296 = i32::from(*base.add(8).cast::<u8>());
                                                                            l296 as u8
                                                                        };
                                                                        V315::PrimU8(e315)
                                                                    }
                                                                    9 => {
                                                                        let e315 = {
                                                                            let l297 = i32::from(*base.add(8).cast::<u16>());
                                                                            l297 as u16
                                                                        };
                                                                        V315::PrimU16(e315)
                                                                    }
                                                                    10 => {
                                                                        let e315 = {
                                                                            let l298 = *base.add(8).cast::<i32>();
                                                                            l298 as u32
                                                                        };
                                                                        V315::PrimU32(e315)
                                                                    }
                                                                    11 => {
                                                                        let e315 = {
                                                                            let l299 = *base.add(8).cast::<i64>();
                                                                            l299 as u64
                                                                        };
                                                                        V315::PrimU64(e315)
                                                                    }
                                                                    12 => {
                                                                        let e315 = {
                                                                            let l300 = i32::from(*base.add(8).cast::<i8>());
                                                                            l300 as i8
                                                                        };
                                                                        V315::PrimS8(e315)
                                                                    }
                                                                    13 => {
                                                                        let e315 = {
                                                                            let l301 = i32::from(*base.add(8).cast::<i16>());
                                                                            l301 as i16
                                                                        };
                                                                        V315::PrimS16(e315)
                                                                    }
                                                                    14 => {
                                                                        let e315 = {
                                                                            let l302 = *base.add(8).cast::<i32>();
                                                                            l302
                                                                        };
                                                                        V315::PrimS32(e315)
                                                                    }
                                                                    15 => {
                                                                        let e315 = {
                                                                            let l303 = *base.add(8).cast::<i64>();
                                                                            l303
                                                                        };
                                                                        V315::PrimS64(e315)
                                                                    }
                                                                    16 => {
                                                                        let e315 = {
                                                                            let l304 = *base.add(8).cast::<f32>();
                                                                            l304
                                                                        };
                                                                        V315::PrimFloat32(e315)
                                                                    }
                                                                    17 => {
                                                                        let e315 = {
                                                                            let l305 = *base.add(8).cast::<f64>();
                                                                            l305
                                                                        };
                                                                        V315::PrimFloat64(e315)
                                                                    }
                                                                    18 => {
                                                                        let e315 = {
                                                                            let l306 = *base.add(8).cast::<i32>();
                                                                            _rt::char_lift(l306 as u32)
                                                                        };
                                                                        V315::PrimChar(e315)
                                                                    }
                                                                    19 => {
                                                                        let e315 = {
                                                                            let l307 = i32::from(*base.add(8).cast::<u8>());
                                                                            _rt::bool_lift(l307 as u8)
                                                                        };
                                                                        V315::PrimBool(e315)
                                                                    }
                                                                    20 => {
                                                                        let e315 = {
                                                                            let l308 = *base.add(8).cast::<*mut u8>();
                                                                            let l309 = *base.add(12).cast::<usize>();
                                                                            let len310 = l309;
                                                                            let bytes310 = _rt::Vec::from_raw_parts(
                                                                                l308.cast(),
                                                                                len310,
                                                                                len310,
                                                                            );
                                                                            _rt::string_lift(bytes310)
                                                                        };
                                                                        V315::PrimString(e315)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                        let e315 = {
                                                                            let l311 = *base.add(8).cast::<*mut u8>();
                                                                            let l312 = *base.add(12).cast::<usize>();
                                                                            let len313 = l312;
                                                                            let bytes313 = _rt::Vec::from_raw_parts(
                                                                                l311.cast(),
                                                                                len313,
                                                                                len313,
                                                                            );
                                                                            let l314 = *base.add(16).cast::<i64>();
                                                                            (
                                                                                super::super::super::golem::rpc::types::Uri {
                                                                                    value: _rt::string_lift(bytes313),
                                                                                },
                                                                                l314 as u64,
                                                                            )
                                                                        };
                                                                        V315::Handle(e315)
                                                                    }
                                                                };
                                                                v315
                                                            };
                                                            result316.push(e316);
                                                        }
                                                        _rt::cabi_dealloc(base316, len316 * 24, 8);
                                                        let l317 = *base.add(40).cast::<i64>();
                                                        ExportedFunctionCompletedParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l267 as u64,
                                                                nanoseconds: l268 as u32,
                                                            },
                                                            response: super::super::super::golem::rpc::types::WitValue {
                                                                nodes: result316,
                                                            },
                                                            consumed_fuel: l317,
                                                        }
                                                    };
                                                    OplogEntry::ExportedFunctionCompleted(e621)
                                                }
                                                4 => {
                                                    let e621 = {
                                                        let l318 = *base.add(16).cast::<i64>();
                                                        let l319 = *base.add(24).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l318 as u64,
                                                            nanoseconds: l319 as u32,
                                                        }
                                                    };
                                                    OplogEntry::Suspend(e621)
                                                }
                                                5 => {
                                                    let e621 = {
                                                        let l320 = *base.add(16).cast::<i64>();
                                                        let l321 = *base.add(24).cast::<i32>();
                                                        let l322 = *base.add(32).cast::<*mut u8>();
                                                        let l323 = *base.add(36).cast::<usize>();
                                                        let len324 = l323;
                                                        let bytes324 = _rt::Vec::from_raw_parts(
                                                            l322.cast(),
                                                            len324,
                                                            len324,
                                                        );
                                                        ErrorParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l320 as u64,
                                                                nanoseconds: l321 as u32,
                                                            },
                                                            error: _rt::string_lift(bytes324),
                                                        }
                                                    };
                                                    OplogEntry::Error(e621)
                                                }
                                                6 => {
                                                    let e621 = {
                                                        let l325 = *base.add(16).cast::<i64>();
                                                        let l326 = *base.add(24).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l325 as u64,
                                                            nanoseconds: l326 as u32,
                                                        }
                                                    };
                                                    OplogEntry::NoOp(e621)
                                                }
                                                7 => {
                                                    let e621 = {
                                                        let l327 = *base.add(16).cast::<i64>();
                                                        let l328 = *base.add(24).cast::<i32>();
                                                        let l329 = *base.add(32).cast::<i64>();
                                                        let l330 = *base.add(40).cast::<i64>();
                                                        JumpParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l327 as u64,
                                                                nanoseconds: l328 as u32,
                                                            },
                                                            start: l329 as u64,
                                                            end: l330 as u64,
                                                        }
                                                    };
                                                    OplogEntry::Jump(e621)
                                                }
                                                8 => {
                                                    let e621 = {
                                                        let l331 = *base.add(16).cast::<i64>();
                                                        let l332 = *base.add(24).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l331 as u64,
                                                            nanoseconds: l332 as u32,
                                                        }
                                                    };
                                                    OplogEntry::Interrupted(e621)
                                                }
                                                9 => {
                                                    let e621 = {
                                                        let l333 = *base.add(16).cast::<i64>();
                                                        let l334 = *base.add(24).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l333 as u64,
                                                            nanoseconds: l334 as u32,
                                                        }
                                                    };
                                                    OplogEntry::Exited(e621)
                                                }
                                                10 => {
                                                    let e621 = {
                                                        let l335 = *base.add(16).cast::<i64>();
                                                        let l336 = *base.add(24).cast::<i32>();
                                                        let l337 = *base.add(32).cast::<i32>();
                                                        let l338 = *base.add(40).cast::<i64>();
                                                        let l339 = *base.add(48).cast::<i64>();
                                                        let l340 = *base.add(56).cast::<f64>();
                                                        let l341 = i32::from(*base.add(64).cast::<u8>());
                                                        ChangeRetryPolicyParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l335 as u64,
                                                                nanoseconds: l336 as u32,
                                                            },
                                                            retry_policy: super::super::super::golem::api::host::RetryPolicy {
                                                                max_attempts: l337 as u32,
                                                                min_delay: l338 as u64,
                                                                max_delay: l339 as u64,
                                                                multiplier: l340,
                                                                max_jitter_factor: match l341 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l342 = *base.add(72).cast::<f64>();
                                                                            l342
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                            },
                                                        }
                                                    };
                                                    OplogEntry::ChangeRetryPolicy(e621)
                                                }
                                                11 => {
                                                    let e621 = {
                                                        let l343 = *base.add(16).cast::<i64>();
                                                        let l344 = *base.add(24).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l343 as u64,
                                                            nanoseconds: l344 as u32,
                                                        }
                                                    };
                                                    OplogEntry::BeginAtomicRegion(e621)
                                                }
                                                12 => {
                                                    let e621 = {
                                                        let l345 = *base.add(16).cast::<i64>();
                                                        let l346 = *base.add(24).cast::<i32>();
                                                        let l347 = *base.add(32).cast::<i64>();
                                                        EndAtomicRegionParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l345 as u64,
                                                                nanoseconds: l346 as u32,
                                                            },
                                                            begin_index: l347 as u64,
                                                        }
                                                    };
                                                    OplogEntry::EndAtomicRegion(e621)
                                                }
                                                13 => {
                                                    let e621 = {
                                                        let l348 = *base.add(16).cast::<i64>();
                                                        let l349 = *base.add(24).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l348 as u64,
                                                            nanoseconds: l349 as u32,
                                                        }
                                                    };
                                                    OplogEntry::BeginRemoteWrite(e621)
                                                }
                                                14 => {
                                                    let e621 = {
                                                        let l350 = *base.add(16).cast::<i64>();
                                                        let l351 = *base.add(24).cast::<i32>();
                                                        let l352 = *base.add(32).cast::<i64>();
                                                        EndRemoteWriteParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l350 as u64,
                                                                nanoseconds: l351 as u32,
                                                            },
                                                            begin_index: l352 as u64,
                                                        }
                                                    };
                                                    OplogEntry::EndRemoteWrite(e621)
                                                }
                                                15 => {
                                                    let e621 = {
                                                        let l353 = *base.add(16).cast::<i64>();
                                                        let l354 = *base.add(24).cast::<i32>();
                                                        let l355 = i32::from(*base.add(32).cast::<u8>());
                                                        let v415 = match l355 {
                                                            0 => {
                                                                let e415 = {
                                                                    let l356 = *base.add(40).cast::<*mut u8>();
                                                                    let l357 = *base.add(44).cast::<usize>();
                                                                    let len358 = l357;
                                                                    let bytes358 = _rt::Vec::from_raw_parts(
                                                                        l356.cast(),
                                                                        len358,
                                                                        len358,
                                                                    );
                                                                    let l359 = *base.add(48).cast::<*mut u8>();
                                                                    let l360 = *base.add(52).cast::<usize>();
                                                                    let len361 = l360;
                                                                    let bytes361 = _rt::Vec::from_raw_parts(
                                                                        l359.cast(),
                                                                        len361,
                                                                        len361,
                                                                    );
                                                                    let l362 = i32::from(*base.add(56).cast::<u8>());
                                                                    ExportedFunctionInvocationParameters {
                                                                        idempotency_key: _rt::string_lift(bytes358),
                                                                        function_name: _rt::string_lift(bytes361),
                                                                        input: match l362 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l363 = *base.add(60).cast::<*mut u8>();
                                                                                    let l364 = *base.add(64).cast::<usize>();
                                                                                    let base413 = l363;
                                                                                    let len413 = l364;
                                                                                    let mut result413 = _rt::Vec::with_capacity(len413);
                                                                                    for i in 0..len413 {
                                                                                        let base = base413.add(i * 8);
                                                                                        let e413 = {
                                                                                            let l365 = *base.add(0).cast::<*mut u8>();
                                                                                            let l366 = *base.add(4).cast::<usize>();
                                                                                            let base412 = l365;
                                                                                            let len412 = l366;
                                                                                            let mut result412 = _rt::Vec::with_capacity(len412);
                                                                                            for i in 0..len412 {
                                                                                                let base = base412.add(i * 24);
                                                                                                let e412 = {
                                                                                                    let l367 = i32::from(*base.add(0).cast::<u8>());
                                                                                                    use super::super::super::golem::rpc::types::WitNode as V411;
                                                                                                    let v411 = match l367 {
                                                                                                        0 => {
                                                                                                            let e411 = {
                                                                                                                let l368 = *base.add(8).cast::<*mut u8>();
                                                                                                                let l369 = *base.add(12).cast::<usize>();
                                                                                                                let len370 = l369;
                                                                                                                _rt::Vec::from_raw_parts(l368.cast(), len370, len370)
                                                                                                            };
                                                                                                            V411::RecordValue(e411)
                                                                                                        }
                                                                                                        1 => {
                                                                                                            let e411 = {
                                                                                                                let l371 = *base.add(8).cast::<i32>();
                                                                                                                let l372 = i32::from(*base.add(12).cast::<u8>());
                                                                                                                (
                                                                                                                    l371 as u32,
                                                                                                                    match l372 {
                                                                                                                        0 => None,
                                                                                                                        1 => {
                                                                                                                            let e = {
                                                                                                                                let l373 = *base.add(16).cast::<i32>();
                                                                                                                                l373
                                                                                                                            };
                                                                                                                            Some(e)
                                                                                                                        }
                                                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                                                    },
                                                                                                                )
                                                                                                            };
                                                                                                            V411::VariantValue(e411)
                                                                                                        }
                                                                                                        2 => {
                                                                                                            let e411 = {
                                                                                                                let l374 = *base.add(8).cast::<i32>();
                                                                                                                l374 as u32
                                                                                                            };
                                                                                                            V411::EnumValue(e411)
                                                                                                        }
                                                                                                        3 => {
                                                                                                            let e411 = {
                                                                                                                let l375 = *base.add(8).cast::<*mut u8>();
                                                                                                                let l376 = *base.add(12).cast::<usize>();
                                                                                                                let base378 = l375;
                                                                                                                let len378 = l376;
                                                                                                                let mut result378 = _rt::Vec::with_capacity(len378);
                                                                                                                for i in 0..len378 {
                                                                                                                    let base = base378.add(i * 1);
                                                                                                                    let e378 = {
                                                                                                                        let l377 = i32::from(*base.add(0).cast::<u8>());
                                                                                                                        _rt::bool_lift(l377 as u8)
                                                                                                                    };
                                                                                                                    result378.push(e378);
                                                                                                                }
                                                                                                                _rt::cabi_dealloc(base378, len378 * 1, 1);
                                                                                                                result378
                                                                                                            };
                                                                                                            V411::FlagsValue(e411)
                                                                                                        }
                                                                                                        4 => {
                                                                                                            let e411 = {
                                                                                                                let l379 = *base.add(8).cast::<*mut u8>();
                                                                                                                let l380 = *base.add(12).cast::<usize>();
                                                                                                                let len381 = l380;
                                                                                                                _rt::Vec::from_raw_parts(l379.cast(), len381, len381)
                                                                                                            };
                                                                                                            V411::TupleValue(e411)
                                                                                                        }
                                                                                                        5 => {
                                                                                                            let e411 = {
                                                                                                                let l382 = *base.add(8).cast::<*mut u8>();
                                                                                                                let l383 = *base.add(12).cast::<usize>();
                                                                                                                let len384 = l383;
                                                                                                                _rt::Vec::from_raw_parts(l382.cast(), len384, len384)
                                                                                                            };
                                                                                                            V411::ListValue(e411)
                                                                                                        }
                                                                                                        6 => {
                                                                                                            let e411 = {
                                                                                                                let l385 = i32::from(*base.add(8).cast::<u8>());
                                                                                                                match l385 {
                                                                                                                    0 => None,
                                                                                                                    1 => {
                                                                                                                        let e = {
                                                                                                                            let l386 = *base.add(12).cast::<i32>();
                                                                                                                            l386
                                                                                                                        };
                                                                                                                        Some(e)
                                                                                                                    }
                                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                                }
                                                                                                            };
                                                                                                            V411::OptionValue(e411)
                                                                                                        }
                                                                                                        7 => {
                                                                                                            let e411 = {
                                                                                                                let l387 = i32::from(*base.add(8).cast::<u8>());
                                                                                                                match l387 {
                                                                                                                    0 => {
                                                                                                                        let e = {
                                                                                                                            let l388 = i32::from(*base.add(12).cast::<u8>());
                                                                                                                            match l388 {
                                                                                                                                0 => None,
                                                                                                                                1 => {
                                                                                                                                    let e = {
                                                                                                                                        let l389 = *base.add(16).cast::<i32>();
                                                                                                                                        l389
                                                                                                                                    };
                                                                                                                                    Some(e)
                                                                                                                                }
                                                                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                                                                            }
                                                                                                                        };
                                                                                                                        Ok(e)
                                                                                                                    }
                                                                                                                    1 => {
                                                                                                                        let e = {
                                                                                                                            let l390 = i32::from(*base.add(12).cast::<u8>());
                                                                                                                            match l390 {
                                                                                                                                0 => None,
                                                                                                                                1 => {
                                                                                                                                    let e = {
                                                                                                                                        let l391 = *base.add(16).cast::<i32>();
                                                                                                                                        l391
                                                                                                                                    };
                                                                                                                                    Some(e)
                                                                                                                                }
                                                                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                                                                            }
                                                                                                                        };
                                                                                                                        Err(e)
                                                                                                                    }
                                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                                }
                                                                                                            };
                                                                                                            V411::ResultValue(e411)
                                                                                                        }
                                                                                                        8 => {
                                                                                                            let e411 = {
                                                                                                                let l392 = i32::from(*base.add(8).cast::<u8>());
                                                                                                                l392 as u8
                                                                                                            };
                                                                                                            V411::PrimU8(e411)
                                                                                                        }
                                                                                                        9 => {
                                                                                                            let e411 = {
                                                                                                                let l393 = i32::from(*base.add(8).cast::<u16>());
                                                                                                                l393 as u16
                                                                                                            };
                                                                                                            V411::PrimU16(e411)
                                                                                                        }
                                                                                                        10 => {
                                                                                                            let e411 = {
                                                                                                                let l394 = *base.add(8).cast::<i32>();
                                                                                                                l394 as u32
                                                                                                            };
                                                                                                            V411::PrimU32(e411)
                                                                                                        }
                                                                                                        11 => {
                                                                                                            let e411 = {
                                                                                                                let l395 = *base.add(8).cast::<i64>();
                                                                                                                l395 as u64
                                                                                                            };
                                                                                                            V411::PrimU64(e411)
                                                                                                        }
                                                                                                        12 => {
                                                                                                            let e411 = {
                                                                                                                let l396 = i32::from(*base.add(8).cast::<i8>());
                                                                                                                l396 as i8
                                                                                                            };
                                                                                                            V411::PrimS8(e411)
                                                                                                        }
                                                                                                        13 => {
                                                                                                            let e411 = {
                                                                                                                let l397 = i32::from(*base.add(8).cast::<i16>());
                                                                                                                l397 as i16
                                                                                                            };
                                                                                                            V411::PrimS16(e411)
                                                                                                        }
                                                                                                        14 => {
                                                                                                            let e411 = {
                                                                                                                let l398 = *base.add(8).cast::<i32>();
                                                                                                                l398
                                                                                                            };
                                                                                                            V411::PrimS32(e411)
                                                                                                        }
                                                                                                        15 => {
                                                                                                            let e411 = {
                                                                                                                let l399 = *base.add(8).cast::<i64>();
                                                                                                                l399
                                                                                                            };
                                                                                                            V411::PrimS64(e411)
                                                                                                        }
                                                                                                        16 => {
                                                                                                            let e411 = {
                                                                                                                let l400 = *base.add(8).cast::<f32>();
                                                                                                                l400
                                                                                                            };
                                                                                                            V411::PrimFloat32(e411)
                                                                                                        }
                                                                                                        17 => {
                                                                                                            let e411 = {
                                                                                                                let l401 = *base.add(8).cast::<f64>();
                                                                                                                l401
                                                                                                            };
                                                                                                            V411::PrimFloat64(e411)
                                                                                                        }
                                                                                                        18 => {
                                                                                                            let e411 = {
                                                                                                                let l402 = *base.add(8).cast::<i32>();
                                                                                                                _rt::char_lift(l402 as u32)
                                                                                                            };
                                                                                                            V411::PrimChar(e411)
                                                                                                        }
                                                                                                        19 => {
                                                                                                            let e411 = {
                                                                                                                let l403 = i32::from(*base.add(8).cast::<u8>());
                                                                                                                _rt::bool_lift(l403 as u8)
                                                                                                            };
                                                                                                            V411::PrimBool(e411)
                                                                                                        }
                                                                                                        20 => {
                                                                                                            let e411 = {
                                                                                                                let l404 = *base.add(8).cast::<*mut u8>();
                                                                                                                let l405 = *base.add(12).cast::<usize>();
                                                                                                                let len406 = l405;
                                                                                                                let bytes406 = _rt::Vec::from_raw_parts(
                                                                                                                    l404.cast(),
                                                                                                                    len406,
                                                                                                                    len406,
                                                                                                                );
                                                                                                                _rt::string_lift(bytes406)
                                                                                                            };
                                                                                                            V411::PrimString(e411)
                                                                                                        }
                                                                                                        n => {
                                                                                                            debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                                                            let e411 = {
                                                                                                                let l407 = *base.add(8).cast::<*mut u8>();
                                                                                                                let l408 = *base.add(12).cast::<usize>();
                                                                                                                let len409 = l408;
                                                                                                                let bytes409 = _rt::Vec::from_raw_parts(
                                                                                                                    l407.cast(),
                                                                                                                    len409,
                                                                                                                    len409,
                                                                                                                );
                                                                                                                let l410 = *base.add(16).cast::<i64>();
                                                                                                                (
                                                                                                                    super::super::super::golem::rpc::types::Uri {
                                                                                                                        value: _rt::string_lift(bytes409),
                                                                                                                    },
                                                                                                                    l410 as u64,
                                                                                                                )
                                                                                                            };
                                                                                                            V411::Handle(e411)
                                                                                                        }
                                                                                                    };
                                                                                                    v411
                                                                                                };
                                                                                                result412.push(e412);
                                                                                            }
                                                                                            _rt::cabi_dealloc(base412, len412 * 24, 8);
                                                                                            super::super::super::golem::rpc::types::WitValue {
                                                                                                nodes: result412,
                                                                                            }
                                                                                        };
                                                                                        result413.push(e413);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base413, len413 * 8, 4);
                                                                                    result413
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                WorkerInvocation::ExportedFunction(e415)
                                                            }
                                                            n => {
                                                                debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                                let e415 = {
                                                                    let l414 = *base.add(40).cast::<i64>();
                                                                    l414 as u64
                                                                };
                                                                WorkerInvocation::ManualUpdate(e415)
                                                            }
                                                        };
                                                        PendingWorkerInvocationParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l353 as u64,
                                                                nanoseconds: l354 as u32,
                                                            },
                                                            invocation: v415,
                                                        }
                                                    };
                                                    OplogEntry::PendingWorkerInvocation(e621)
                                                }
                                                16 => {
                                                    let e621 = {
                                                        let l416 = *base.add(16).cast::<i64>();
                                                        let l417 = *base.add(24).cast::<i32>();
                                                        let l418 = *base.add(32).cast::<i64>();
                                                        let l419 = i32::from(*base.add(40).cast::<u8>());
                                                        let v423 = match l419 {
                                                            0 => UpdateDescription::AutoUpdate,
                                                            n => {
                                                                debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                                let e423 = {
                                                                    let l420 = *base.add(44).cast::<*mut u8>();
                                                                    let l421 = *base.add(48).cast::<usize>();
                                                                    let len422 = l421;
                                                                    _rt::Vec::from_raw_parts(l420.cast(), len422, len422)
                                                                };
                                                                UpdateDescription::SnapshotBased(e423)
                                                            }
                                                        };
                                                        PendingUpdateParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l416 as u64,
                                                                nanoseconds: l417 as u32,
                                                            },
                                                            target_version: l418 as u64,
                                                            update_description: v423,
                                                        }
                                                    };
                                                    OplogEntry::PendingUpdate(e621)
                                                }
                                                17 => {
                                                    let e621 = {
                                                        let l424 = *base.add(16).cast::<i64>();
                                                        let l425 = *base.add(24).cast::<i32>();
                                                        let l426 = *base.add(32).cast::<i64>();
                                                        let l427 = *base.add(40).cast::<i64>();
                                                        let l428 = *base.add(48).cast::<*mut u8>();
                                                        let l429 = *base.add(52).cast::<usize>();
                                                        let base447 = l428;
                                                        let len447 = l429;
                                                        let mut result447 = _rt::Vec::with_capacity(len447);
                                                        for i in 0..len447 {
                                                            let base = base447.add(i * 40);
                                                            let e447 = {
                                                                let l430 = *base.add(0).cast::<i64>();
                                                                let l431 = *base.add(8).cast::<i64>();
                                                                let l432 = *base.add(16).cast::<*mut u8>();
                                                                let l433 = *base.add(20).cast::<usize>();
                                                                let len434 = l433;
                                                                let bytes434 = _rt::Vec::from_raw_parts(
                                                                    l432.cast(),
                                                                    len434,
                                                                    len434,
                                                                );
                                                                let l435 = *base.add(24).cast::<*mut u8>();
                                                                let l436 = *base.add(28).cast::<usize>();
                                                                let len437 = l436;
                                                                let bytes437 = _rt::Vec::from_raw_parts(
                                                                    l435.cast(),
                                                                    len437,
                                                                    len437,
                                                                );
                                                                let l438 = *base.add(32).cast::<*mut u8>();
                                                                let l439 = *base.add(36).cast::<usize>();
                                                                let base446 = l438;
                                                                let len446 = l439;
                                                                let mut result446 = _rt::Vec::with_capacity(len446);
                                                                for i in 0..len446 {
                                                                    let base = base446.add(i * 16);
                                                                    let e446 = {
                                                                        let l440 = *base.add(0).cast::<*mut u8>();
                                                                        let l441 = *base.add(4).cast::<usize>();
                                                                        let len442 = l441;
                                                                        let bytes442 = _rt::Vec::from_raw_parts(
                                                                            l440.cast(),
                                                                            len442,
                                                                            len442,
                                                                        );
                                                                        let l443 = *base.add(8).cast::<*mut u8>();
                                                                        let l444 = *base.add(12).cast::<usize>();
                                                                        let len445 = l444;
                                                                        let bytes445 = _rt::Vec::from_raw_parts(
                                                                            l443.cast(),
                                                                            len445,
                                                                            len445,
                                                                        );
                                                                        (_rt::string_lift(bytes442), _rt::string_lift(bytes445))
                                                                    };
                                                                    result446.push(e446);
                                                                }
                                                                _rt::cabi_dealloc(base446, len446 * 16, 4);
                                                                PluginInstallationDescription {
                                                                    installation_id: super::super::super::golem::api::host::Uuid {
                                                                        high_bits: l430 as u64,
                                                                        low_bits: l431 as u64,
                                                                    },
                                                                    name: _rt::string_lift(bytes434),
                                                                    version: _rt::string_lift(bytes437),
                                                                    parameters: result446,
                                                                }
                                                            };
                                                            result447.push(e447);
                                                        }
                                                        _rt::cabi_dealloc(base447, len447 * 40, 8);
                                                        SuccessfulUpdateParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l424 as u64,
                                                                nanoseconds: l425 as u32,
                                                            },
                                                            target_version: l426 as u64,
                                                            new_component_size: l427 as u64,
                                                            new_active_plugins: result447,
                                                        }
                                                    };
                                                    OplogEntry::SuccessfulUpdate(e621)
                                                }
                                                18 => {
                                                    let e621 = {
                                                        let l448 = *base.add(16).cast::<i64>();
                                                        let l449 = *base.add(24).cast::<i32>();
                                                        let l450 = *base.add(32).cast::<i64>();
                                                        let l451 = i32::from(*base.add(40).cast::<u8>());
                                                        FailedUpdateParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l448 as u64,
                                                                nanoseconds: l449 as u32,
                                                            },
                                                            target_version: l450 as u64,
                                                            details: match l451 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l452 = *base.add(44).cast::<*mut u8>();
                                                                        let l453 = *base.add(48).cast::<usize>();
                                                                        let len454 = l453;
                                                                        let bytes454 = _rt::Vec::from_raw_parts(
                                                                            l452.cast(),
                                                                            len454,
                                                                            len454,
                                                                        );
                                                                        _rt::string_lift(bytes454)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        }
                                                    };
                                                    OplogEntry::FailedUpdate(e621)
                                                }
                                                19 => {
                                                    let e621 = {
                                                        let l455 = *base.add(16).cast::<i64>();
                                                        let l456 = *base.add(24).cast::<i32>();
                                                        let l457 = *base.add(32).cast::<i64>();
                                                        GrowMemoryParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l455 as u64,
                                                                nanoseconds: l456 as u32,
                                                            },
                                                            delta: l457 as u64,
                                                        }
                                                    };
                                                    OplogEntry::GrowMemory(e621)
                                                }
                                                20 => {
                                                    let e621 = {
                                                        let l458 = *base.add(16).cast::<i64>();
                                                        let l459 = *base.add(24).cast::<i32>();
                                                        let l460 = *base.add(32).cast::<i64>();
                                                        CreateResourceParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l458 as u64,
                                                                nanoseconds: l459 as u32,
                                                            },
                                                            resource_id: l460 as u64,
                                                        }
                                                    };
                                                    OplogEntry::CreateResource(e621)
                                                }
                                                21 => {
                                                    let e621 = {
                                                        let l461 = *base.add(16).cast::<i64>();
                                                        let l462 = *base.add(24).cast::<i32>();
                                                        let l463 = *base.add(32).cast::<i64>();
                                                        DropResourceParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l461 as u64,
                                                                nanoseconds: l462 as u32,
                                                            },
                                                            resource_id: l463 as u64,
                                                        }
                                                    };
                                                    OplogEntry::DropResource(e621)
                                                }
                                                22 => {
                                                    let e621 = {
                                                        let l464 = *base.add(16).cast::<i64>();
                                                        let l465 = *base.add(24).cast::<i32>();
                                                        let l466 = *base.add(32).cast::<i64>();
                                                        let l467 = *base.add(40).cast::<*mut u8>();
                                                        let l468 = *base.add(44).cast::<usize>();
                                                        let len469 = l468;
                                                        let bytes469 = _rt::Vec::from_raw_parts(
                                                            l467.cast(),
                                                            len469,
                                                            len469,
                                                        );
                                                        let l470 = *base.add(48).cast::<*mut u8>();
                                                        let l471 = *base.add(52).cast::<usize>();
                                                        let base520 = l470;
                                                        let len520 = l471;
                                                        let mut result520 = _rt::Vec::with_capacity(len520);
                                                        for i in 0..len520 {
                                                            let base = base520.add(i * 8);
                                                            let e520 = {
                                                                let l472 = *base.add(0).cast::<*mut u8>();
                                                                let l473 = *base.add(4).cast::<usize>();
                                                                let base519 = l472;
                                                                let len519 = l473;
                                                                let mut result519 = _rt::Vec::with_capacity(len519);
                                                                for i in 0..len519 {
                                                                    let base = base519.add(i * 24);
                                                                    let e519 = {
                                                                        let l474 = i32::from(*base.add(0).cast::<u8>());
                                                                        use super::super::super::golem::rpc::types::WitNode as V518;
                                                                        let v518 = match l474 {
                                                                            0 => {
                                                                                let e518 = {
                                                                                    let l475 = *base.add(8).cast::<*mut u8>();
                                                                                    let l476 = *base.add(12).cast::<usize>();
                                                                                    let len477 = l476;
                                                                                    _rt::Vec::from_raw_parts(l475.cast(), len477, len477)
                                                                                };
                                                                                V518::RecordValue(e518)
                                                                            }
                                                                            1 => {
                                                                                let e518 = {
                                                                                    let l478 = *base.add(8).cast::<i32>();
                                                                                    let l479 = i32::from(*base.add(12).cast::<u8>());
                                                                                    (
                                                                                        l478 as u32,
                                                                                        match l479 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l480 = *base.add(16).cast::<i32>();
                                                                                                    l480
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        },
                                                                                    )
                                                                                };
                                                                                V518::VariantValue(e518)
                                                                            }
                                                                            2 => {
                                                                                let e518 = {
                                                                                    let l481 = *base.add(8).cast::<i32>();
                                                                                    l481 as u32
                                                                                };
                                                                                V518::EnumValue(e518)
                                                                            }
                                                                            3 => {
                                                                                let e518 = {
                                                                                    let l482 = *base.add(8).cast::<*mut u8>();
                                                                                    let l483 = *base.add(12).cast::<usize>();
                                                                                    let base485 = l482;
                                                                                    let len485 = l483;
                                                                                    let mut result485 = _rt::Vec::with_capacity(len485);
                                                                                    for i in 0..len485 {
                                                                                        let base = base485.add(i * 1);
                                                                                        let e485 = {
                                                                                            let l484 = i32::from(*base.add(0).cast::<u8>());
                                                                                            _rt::bool_lift(l484 as u8)
                                                                                        };
                                                                                        result485.push(e485);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base485, len485 * 1, 1);
                                                                                    result485
                                                                                };
                                                                                V518::FlagsValue(e518)
                                                                            }
                                                                            4 => {
                                                                                let e518 = {
                                                                                    let l486 = *base.add(8).cast::<*mut u8>();
                                                                                    let l487 = *base.add(12).cast::<usize>();
                                                                                    let len488 = l487;
                                                                                    _rt::Vec::from_raw_parts(l486.cast(), len488, len488)
                                                                                };
                                                                                V518::TupleValue(e518)
                                                                            }
                                                                            5 => {
                                                                                let e518 = {
                                                                                    let l489 = *base.add(8).cast::<*mut u8>();
                                                                                    let l490 = *base.add(12).cast::<usize>();
                                                                                    let len491 = l490;
                                                                                    _rt::Vec::from_raw_parts(l489.cast(), len491, len491)
                                                                                };
                                                                                V518::ListValue(e518)
                                                                            }
                                                                            6 => {
                                                                                let e518 = {
                                                                                    let l492 = i32::from(*base.add(8).cast::<u8>());
                                                                                    match l492 {
                                                                                        0 => None,
                                                                                        1 => {
                                                                                            let e = {
                                                                                                let l493 = *base.add(12).cast::<i32>();
                                                                                                l493
                                                                                            };
                                                                                            Some(e)
                                                                                        }
                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                    }
                                                                                };
                                                                                V518::OptionValue(e518)
                                                                            }
                                                                            7 => {
                                                                                let e518 = {
                                                                                    let l494 = i32::from(*base.add(8).cast::<u8>());
                                                                                    match l494 {
                                                                                        0 => {
                                                                                            let e = {
                                                                                                let l495 = i32::from(*base.add(12).cast::<u8>());
                                                                                                match l495 {
                                                                                                    0 => None,
                                                                                                    1 => {
                                                                                                        let e = {
                                                                                                            let l496 = *base.add(16).cast::<i32>();
                                                                                                            l496
                                                                                                        };
                                                                                                        Some(e)
                                                                                                    }
                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                }
                                                                                            };
                                                                                            Ok(e)
                                                                                        }
                                                                                        1 => {
                                                                                            let e = {
                                                                                                let l497 = i32::from(*base.add(12).cast::<u8>());
                                                                                                match l497 {
                                                                                                    0 => None,
                                                                                                    1 => {
                                                                                                        let e = {
                                                                                                            let l498 = *base.add(16).cast::<i32>();
                                                                                                            l498
                                                                                                        };
                                                                                                        Some(e)
                                                                                                    }
                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                }
                                                                                            };
                                                                                            Err(e)
                                                                                        }
                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                    }
                                                                                };
                                                                                V518::ResultValue(e518)
                                                                            }
                                                                            8 => {
                                                                                let e518 = {
                                                                                    let l499 = i32::from(*base.add(8).cast::<u8>());
                                                                                    l499 as u8
                                                                                };
                                                                                V518::PrimU8(e518)
                                                                            }
                                                                            9 => {
                                                                                let e518 = {
                                                                                    let l500 = i32::from(*base.add(8).cast::<u16>());
                                                                                    l500 as u16
                                                                                };
                                                                                V518::PrimU16(e518)
                                                                            }
                                                                            10 => {
                                                                                let e518 = {
                                                                                    let l501 = *base.add(8).cast::<i32>();
                                                                                    l501 as u32
                                                                                };
                                                                                V518::PrimU32(e518)
                                                                            }
                                                                            11 => {
                                                                                let e518 = {
                                                                                    let l502 = *base.add(8).cast::<i64>();
                                                                                    l502 as u64
                                                                                };
                                                                                V518::PrimU64(e518)
                                                                            }
                                                                            12 => {
                                                                                let e518 = {
                                                                                    let l503 = i32::from(*base.add(8).cast::<i8>());
                                                                                    l503 as i8
                                                                                };
                                                                                V518::PrimS8(e518)
                                                                            }
                                                                            13 => {
                                                                                let e518 = {
                                                                                    let l504 = i32::from(*base.add(8).cast::<i16>());
                                                                                    l504 as i16
                                                                                };
                                                                                V518::PrimS16(e518)
                                                                            }
                                                                            14 => {
                                                                                let e518 = {
                                                                                    let l505 = *base.add(8).cast::<i32>();
                                                                                    l505
                                                                                };
                                                                                V518::PrimS32(e518)
                                                                            }
                                                                            15 => {
                                                                                let e518 = {
                                                                                    let l506 = *base.add(8).cast::<i64>();
                                                                                    l506
                                                                                };
                                                                                V518::PrimS64(e518)
                                                                            }
                                                                            16 => {
                                                                                let e518 = {
                                                                                    let l507 = *base.add(8).cast::<f32>();
                                                                                    l507
                                                                                };
                                                                                V518::PrimFloat32(e518)
                                                                            }
                                                                            17 => {
                                                                                let e518 = {
                                                                                    let l508 = *base.add(8).cast::<f64>();
                                                                                    l508
                                                                                };
                                                                                V518::PrimFloat64(e518)
                                                                            }
                                                                            18 => {
                                                                                let e518 = {
                                                                                    let l509 = *base.add(8).cast::<i32>();
                                                                                    _rt::char_lift(l509 as u32)
                                                                                };
                                                                                V518::PrimChar(e518)
                                                                            }
                                                                            19 => {
                                                                                let e518 = {
                                                                                    let l510 = i32::from(*base.add(8).cast::<u8>());
                                                                                    _rt::bool_lift(l510 as u8)
                                                                                };
                                                                                V518::PrimBool(e518)
                                                                            }
                                                                            20 => {
                                                                                let e518 = {
                                                                                    let l511 = *base.add(8).cast::<*mut u8>();
                                                                                    let l512 = *base.add(12).cast::<usize>();
                                                                                    let len513 = l512;
                                                                                    let bytes513 = _rt::Vec::from_raw_parts(
                                                                                        l511.cast(),
                                                                                        len513,
                                                                                        len513,
                                                                                    );
                                                                                    _rt::string_lift(bytes513)
                                                                                };
                                                                                V518::PrimString(e518)
                                                                            }
                                                                            n => {
                                                                                debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                                let e518 = {
                                                                                    let l514 = *base.add(8).cast::<*mut u8>();
                                                                                    let l515 = *base.add(12).cast::<usize>();
                                                                                    let len516 = l515;
                                                                                    let bytes516 = _rt::Vec::from_raw_parts(
                                                                                        l514.cast(),
                                                                                        len516,
                                                                                        len516,
                                                                                    );
                                                                                    let l517 = *base.add(16).cast::<i64>();
                                                                                    (
                                                                                        super::super::super::golem::rpc::types::Uri {
                                                                                            value: _rt::string_lift(bytes516),
                                                                                        },
                                                                                        l517 as u64,
                                                                                    )
                                                                                };
                                                                                V518::Handle(e518)
                                                                            }
                                                                        };
                                                                        v518
                                                                    };
                                                                    result519.push(e519);
                                                                }
                                                                _rt::cabi_dealloc(base519, len519 * 24, 8);
                                                                super::super::super::golem::rpc::types::WitValue {
                                                                    nodes: result519,
                                                                }
                                                            };
                                                            result520.push(e520);
                                                        }
                                                        _rt::cabi_dealloc(base520, len520 * 8, 4);
                                                        DescribeResourceParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l464 as u64,
                                                                nanoseconds: l465 as u32,
                                                            },
                                                            resource_id: l466 as u64,
                                                            resource_name: _rt::string_lift(bytes469),
                                                            resource_params: result520,
                                                        }
                                                    };
                                                    OplogEntry::DescribeResource(e621)
                                                }
                                                23 => {
                                                    let e621 = {
                                                        let l521 = *base.add(16).cast::<i64>();
                                                        let l522 = *base.add(24).cast::<i32>();
                                                        let l523 = i32::from(*base.add(32).cast::<u8>());
                                                        let l524 = *base.add(36).cast::<*mut u8>();
                                                        let l525 = *base.add(40).cast::<usize>();
                                                        let len526 = l525;
                                                        let bytes526 = _rt::Vec::from_raw_parts(
                                                            l524.cast(),
                                                            len526,
                                                            len526,
                                                        );
                                                        let l527 = *base.add(44).cast::<*mut u8>();
                                                        let l528 = *base.add(48).cast::<usize>();
                                                        let len529 = l528;
                                                        let bytes529 = _rt::Vec::from_raw_parts(
                                                            l527.cast(),
                                                            len529,
                                                            len529,
                                                        );
                                                        LogParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l521 as u64,
                                                                nanoseconds: l522 as u32,
                                                            },
                                                            level: LogLevel::_lift(l523 as u8),
                                                            context: _rt::string_lift(bytes526),
                                                            message: _rt::string_lift(bytes529),
                                                        }
                                                    };
                                                    OplogEntry::Log(e621)
                                                }
                                                24 => {
                                                    let e621 = {
                                                        let l530 = *base.add(16).cast::<i64>();
                                                        let l531 = *base.add(24).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l530 as u64,
                                                            nanoseconds: l531 as u32,
                                                        }
                                                    };
                                                    OplogEntry::Restart(e621)
                                                }
                                                25 => {
                                                    let e621 = {
                                                        let l532 = *base.add(16).cast::<i64>();
                                                        let l533 = *base.add(24).cast::<i32>();
                                                        let l534 = *base.add(32).cast::<i64>();
                                                        let l535 = *base.add(40).cast::<i64>();
                                                        let l536 = *base.add(48).cast::<*mut u8>();
                                                        let l537 = *base.add(52).cast::<usize>();
                                                        let len538 = l537;
                                                        let bytes538 = _rt::Vec::from_raw_parts(
                                                            l536.cast(),
                                                            len538,
                                                            len538,
                                                        );
                                                        let l539 = *base.add(56).cast::<*mut u8>();
                                                        let l540 = *base.add(60).cast::<usize>();
                                                        let len541 = l540;
                                                        let bytes541 = _rt::Vec::from_raw_parts(
                                                            l539.cast(),
                                                            len541,
                                                            len541,
                                                        );
                                                        let l542 = *base.add(64).cast::<*mut u8>();
                                                        let l543 = *base.add(68).cast::<usize>();
                                                        let base550 = l542;
                                                        let len550 = l543;
                                                        let mut result550 = _rt::Vec::with_capacity(len550);
                                                        for i in 0..len550 {
                                                            let base = base550.add(i * 16);
                                                            let e550 = {
                                                                let l544 = *base.add(0).cast::<*mut u8>();
                                                                let l545 = *base.add(4).cast::<usize>();
                                                                let len546 = l545;
                                                                let bytes546 = _rt::Vec::from_raw_parts(
                                                                    l544.cast(),
                                                                    len546,
                                                                    len546,
                                                                );
                                                                let l547 = *base.add(8).cast::<*mut u8>();
                                                                let l548 = *base.add(12).cast::<usize>();
                                                                let len549 = l548;
                                                                let bytes549 = _rt::Vec::from_raw_parts(
                                                                    l547.cast(),
                                                                    len549,
                                                                    len549,
                                                                );
                                                                (_rt::string_lift(bytes546), _rt::string_lift(bytes549))
                                                            };
                                                            result550.push(e550);
                                                        }
                                                        _rt::cabi_dealloc(base550, len550 * 16, 4);
                                                        ActivatePluginParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l532 as u64,
                                                                nanoseconds: l533 as u32,
                                                            },
                                                            plugin: PluginInstallationDescription {
                                                                installation_id: super::super::super::golem::api::host::Uuid {
                                                                    high_bits: l534 as u64,
                                                                    low_bits: l535 as u64,
                                                                },
                                                                name: _rt::string_lift(bytes538),
                                                                version: _rt::string_lift(bytes541),
                                                                parameters: result550,
                                                            },
                                                        }
                                                    };
                                                    OplogEntry::ActivatePlugin(e621)
                                                }
                                                26 => {
                                                    let e621 = {
                                                        let l551 = *base.add(16).cast::<i64>();
                                                        let l552 = *base.add(24).cast::<i32>();
                                                        let l553 = *base.add(32).cast::<i64>();
                                                        let l554 = *base.add(40).cast::<i64>();
                                                        let l555 = *base.add(48).cast::<*mut u8>();
                                                        let l556 = *base.add(52).cast::<usize>();
                                                        let len557 = l556;
                                                        let bytes557 = _rt::Vec::from_raw_parts(
                                                            l555.cast(),
                                                            len557,
                                                            len557,
                                                        );
                                                        let l558 = *base.add(56).cast::<*mut u8>();
                                                        let l559 = *base.add(60).cast::<usize>();
                                                        let len560 = l559;
                                                        let bytes560 = _rt::Vec::from_raw_parts(
                                                            l558.cast(),
                                                            len560,
                                                            len560,
                                                        );
                                                        let l561 = *base.add(64).cast::<*mut u8>();
                                                        let l562 = *base.add(68).cast::<usize>();
                                                        let base569 = l561;
                                                        let len569 = l562;
                                                        let mut result569 = _rt::Vec::with_capacity(len569);
                                                        for i in 0..len569 {
                                                            let base = base569.add(i * 16);
                                                            let e569 = {
                                                                let l563 = *base.add(0).cast::<*mut u8>();
                                                                let l564 = *base.add(4).cast::<usize>();
                                                                let len565 = l564;
                                                                let bytes565 = _rt::Vec::from_raw_parts(
                                                                    l563.cast(),
                                                                    len565,
                                                                    len565,
                                                                );
                                                                let l566 = *base.add(8).cast::<*mut u8>();
                                                                let l567 = *base.add(12).cast::<usize>();
                                                                let len568 = l567;
                                                                let bytes568 = _rt::Vec::from_raw_parts(
                                                                    l566.cast(),
                                                                    len568,
                                                                    len568,
                                                                );
                                                                (_rt::string_lift(bytes565), _rt::string_lift(bytes568))
                                                            };
                                                            result569.push(e569);
                                                        }
                                                        _rt::cabi_dealloc(base569, len569 * 16, 4);
                                                        DeactivatePluginParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l551 as u64,
                                                                nanoseconds: l552 as u32,
                                                            },
                                                            plugin: PluginInstallationDescription {
                                                                installation_id: super::super::super::golem::api::host::Uuid {
                                                                    high_bits: l553 as u64,
                                                                    low_bits: l554 as u64,
                                                                },
                                                                name: _rt::string_lift(bytes557),
                                                                version: _rt::string_lift(bytes560),
                                                                parameters: result569,
                                                            },
                                                        }
                                                    };
                                                    OplogEntry::DeactivatePlugin(e621)
                                                }
                                                27 => {
                                                    let e621 = {
                                                        let l570 = *base.add(16).cast::<i64>();
                                                        let l571 = *base.add(24).cast::<i32>();
                                                        let l572 = *base.add(32).cast::<i64>();
                                                        let l573 = *base.add(40).cast::<i64>();
                                                        RevertParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l570 as u64,
                                                                nanoseconds: l571 as u32,
                                                            },
                                                            start: l572 as u64,
                                                            end: l573 as u64,
                                                        }
                                                    };
                                                    OplogEntry::Revert(e621)
                                                }
                                                28 => {
                                                    let e621 = {
                                                        let l574 = *base.add(16).cast::<i64>();
                                                        let l575 = *base.add(24).cast::<i32>();
                                                        let l576 = *base.add(32).cast::<*mut u8>();
                                                        let l577 = *base.add(36).cast::<usize>();
                                                        let len578 = l577;
                                                        let bytes578 = _rt::Vec::from_raw_parts(
                                                            l576.cast(),
                                                            len578,
                                                            len578,
                                                        );
                                                        CancelInvocationParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l574 as u64,
                                                                nanoseconds: l575 as u32,
                                                            },
                                                            idempotency_key: _rt::string_lift(bytes578),
                                                        }
                                                    };
                                                    OplogEntry::CancelInvocation(e621)
                                                }
                                                29 => {
                                                    let e621 = {
                                                        let l579 = *base.add(16).cast::<i64>();
                                                        let l580 = *base.add(24).cast::<i32>();
                                                        let l581 = *base.add(32).cast::<*mut u8>();
                                                        let l582 = *base.add(36).cast::<usize>();
                                                        let len583 = l582;
                                                        let bytes583 = _rt::Vec::from_raw_parts(
                                                            l581.cast(),
                                                            len583,
                                                            len583,
                                                        );
                                                        let l584 = i32::from(*base.add(40).cast::<u8>());
                                                        let l588 = i32::from(*base.add(52).cast::<u8>());
                                                        let l592 = *base.add(64).cast::<*mut u8>();
                                                        let l593 = *base.add(68).cast::<usize>();
                                                        let base602 = l592;
                                                        let len602 = l593;
                                                        let mut result602 = _rt::Vec::with_capacity(len602);
                                                        for i in 0..len602 {
                                                            let base = base602.add(i * 20);
                                                            let e602 = {
                                                                let l594 = *base.add(0).cast::<*mut u8>();
                                                                let l595 = *base.add(4).cast::<usize>();
                                                                let len596 = l595;
                                                                let bytes596 = _rt::Vec::from_raw_parts(
                                                                    l594.cast(),
                                                                    len596,
                                                                    len596,
                                                                );
                                                                let l597 = i32::from(*base.add(8).cast::<u8>());
                                                                use super::super::super::golem::api::context::AttributeValue as V601;
                                                                let v601 = match l597 {
                                                                    n => {
                                                                        debug_assert_eq!(n, 0, "invalid enum discriminant");
                                                                        let e601 = {
                                                                            let l598 = *base.add(12).cast::<*mut u8>();
                                                                            let l599 = *base.add(16).cast::<usize>();
                                                                            let len600 = l599;
                                                                            let bytes600 = _rt::Vec::from_raw_parts(
                                                                                l598.cast(),
                                                                                len600,
                                                                                len600,
                                                                            );
                                                                            _rt::string_lift(bytes600)
                                                                        };
                                                                        V601::String(e601)
                                                                    }
                                                                };
                                                                super::super::super::golem::api::context::Attribute {
                                                                    key: _rt::string_lift(bytes596),
                                                                    value: v601,
                                                                }
                                                            };
                                                            result602.push(e602);
                                                        }
                                                        _rt::cabi_dealloc(base602, len602 * 20, 4);
                                                        StartSpanParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l579 as u64,
                                                                nanoseconds: l580 as u32,
                                                            },
                                                            span_id: _rt::string_lift(bytes583),
                                                            parent: match l584 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l585 = *base.add(44).cast::<*mut u8>();
                                                                        let l586 = *base.add(48).cast::<usize>();
                                                                        let len587 = l586;
                                                                        let bytes587 = _rt::Vec::from_raw_parts(
                                                                            l585.cast(),
                                                                            len587,
                                                                            len587,
                                                                        );
                                                                        _rt::string_lift(bytes587)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            linked_context: match l588 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l589 = *base.add(56).cast::<*mut u8>();
                                                                        let l590 = *base.add(60).cast::<usize>();
                                                                        let len591 = l590;
                                                                        let bytes591 = _rt::Vec::from_raw_parts(
                                                                            l589.cast(),
                                                                            len591,
                                                                            len591,
                                                                        );
                                                                        _rt::string_lift(bytes591)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            attributes: result602,
                                                        }
                                                    };
                                                    OplogEntry::StartSpan(e621)
                                                }
                                                30 => {
                                                    let e621 = {
                                                        let l603 = *base.add(16).cast::<i64>();
                                                        let l604 = *base.add(24).cast::<i32>();
                                                        let l605 = *base.add(32).cast::<*mut u8>();
                                                        let l606 = *base.add(36).cast::<usize>();
                                                        let len607 = l606;
                                                        let bytes607 = _rt::Vec::from_raw_parts(
                                                            l605.cast(),
                                                            len607,
                                                            len607,
                                                        );
                                                        FinishSpanParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l603 as u64,
                                                                nanoseconds: l604 as u32,
                                                            },
                                                            span_id: _rt::string_lift(bytes607),
                                                        }
                                                    };
                                                    OplogEntry::FinishSpan(e621)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 31, "invalid enum discriminant");
                                                    let e621 = {
                                                        let l608 = *base.add(16).cast::<i64>();
                                                        let l609 = *base.add(24).cast::<i32>();
                                                        let l610 = *base.add(32).cast::<*mut u8>();
                                                        let l611 = *base.add(36).cast::<usize>();
                                                        let len612 = l611;
                                                        let bytes612 = _rt::Vec::from_raw_parts(
                                                            l610.cast(),
                                                            len612,
                                                            len612,
                                                        );
                                                        let l613 = *base.add(40).cast::<*mut u8>();
                                                        let l614 = *base.add(44).cast::<usize>();
                                                        let len615 = l614;
                                                        let bytes615 = _rt::Vec::from_raw_parts(
                                                            l613.cast(),
                                                            len615,
                                                            len615,
                                                        );
                                                        let l616 = i32::from(*base.add(48).cast::<u8>());
                                                        use super::super::super::golem::api::context::AttributeValue as V620;
                                                        let v620 = match l616 {
                                                            n => {
                                                                debug_assert_eq!(n, 0, "invalid enum discriminant");
                                                                let e620 = {
                                                                    let l617 = *base.add(52).cast::<*mut u8>();
                                                                    let l618 = *base.add(56).cast::<usize>();
                                                                    let len619 = l618;
                                                                    let bytes619 = _rt::Vec::from_raw_parts(
                                                                        l617.cast(),
                                                                        len619,
                                                                        len619,
                                                                    );
                                                                    _rt::string_lift(bytes619)
                                                                };
                                                                V620::String(e620)
                                                            }
                                                        };
                                                        SetSpanAttributeParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l608 as u64,
                                                                nanoseconds: l609 as u32,
                                                            },
                                                            span_id: _rt::string_lift(bytes612),
                                                            key: _rt::string_lift(bytes615),
                                                            value: v620,
                                                        }
                                                    };
                                                    OplogEntry::SetSpanAttribute(e621)
                                                }
                                            };
                                            (l4 as u64, v621)
                                        };
                                        result622.push(e622);
                                    }
                                    _rt::cabi_dealloc(base622, len622 * 144, 8);
                                    result622
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
        }
    }
    pub mod rpc {
        #[allow(dead_code, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Datetime = super::super::super::wasi::clocks::wall_clock::Datetime;
            pub type Pollable = super::super::super::wasi::io::poll::Pollable;
            pub type NodeIndex = i32;
            pub type ResourceId = u64;
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum ResourceMode {
                Owned,
                Borrowed,
            }
            impl ::core::fmt::Debug for ResourceMode {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ResourceMode::Owned => {
                            f.debug_tuple("ResourceMode::Owned").finish()
                        }
                        ResourceMode::Borrowed => {
                            f.debug_tuple("ResourceMode::Borrowed").finish()
                        }
                    }
                }
            }
            impl ResourceMode {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> ResourceMode {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => ResourceMode::Owned,
                        1 => ResourceMode::Borrowed,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            #[derive(Clone)]
            pub enum WitTypeNode {
                RecordType(_rt::Vec<(_rt::String, NodeIndex)>),
                VariantType(_rt::Vec<(_rt::String, Option<NodeIndex>)>),
                EnumType(_rt::Vec<_rt::String>),
                FlagsType(_rt::Vec<_rt::String>),
                TupleType(_rt::Vec<NodeIndex>),
                ListType(NodeIndex),
                OptionType(NodeIndex),
                ResultType((Option<NodeIndex>, Option<NodeIndex>)),
                PrimU8Type,
                PrimU16Type,
                PrimU32Type,
                PrimU64Type,
                PrimS8Type,
                PrimS16Type,
                PrimS32Type,
                PrimS64Type,
                PrimF32Type,
                PrimF64Type,
                PrimCharType,
                PrimBoolType,
                PrimStringType,
                HandleType((ResourceId, ResourceMode)),
            }
            impl ::core::fmt::Debug for WitTypeNode {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        WitTypeNode::RecordType(e) => {
                            f.debug_tuple("WitTypeNode::RecordType").field(e).finish()
                        }
                        WitTypeNode::VariantType(e) => {
                            f.debug_tuple("WitTypeNode::VariantType").field(e).finish()
                        }
                        WitTypeNode::EnumType(e) => {
                            f.debug_tuple("WitTypeNode::EnumType").field(e).finish()
                        }
                        WitTypeNode::FlagsType(e) => {
                            f.debug_tuple("WitTypeNode::FlagsType").field(e).finish()
                        }
                        WitTypeNode::TupleType(e) => {
                            f.debug_tuple("WitTypeNode::TupleType").field(e).finish()
                        }
                        WitTypeNode::ListType(e) => {
                            f.debug_tuple("WitTypeNode::ListType").field(e).finish()
                        }
                        WitTypeNode::OptionType(e) => {
                            f.debug_tuple("WitTypeNode::OptionType").field(e).finish()
                        }
                        WitTypeNode::ResultType(e) => {
                            f.debug_tuple("WitTypeNode::ResultType").field(e).finish()
                        }
                        WitTypeNode::PrimU8Type => {
                            f.debug_tuple("WitTypeNode::PrimU8Type").finish()
                        }
                        WitTypeNode::PrimU16Type => {
                            f.debug_tuple("WitTypeNode::PrimU16Type").finish()
                        }
                        WitTypeNode::PrimU32Type => {
                            f.debug_tuple("WitTypeNode::PrimU32Type").finish()
                        }
                        WitTypeNode::PrimU64Type => {
                            f.debug_tuple("WitTypeNode::PrimU64Type").finish()
                        }
                        WitTypeNode::PrimS8Type => {
                            f.debug_tuple("WitTypeNode::PrimS8Type").finish()
                        }
                        WitTypeNode::PrimS16Type => {
                            f.debug_tuple("WitTypeNode::PrimS16Type").finish()
                        }
                        WitTypeNode::PrimS32Type => {
                            f.debug_tuple("WitTypeNode::PrimS32Type").finish()
                        }
                        WitTypeNode::PrimS64Type => {
                            f.debug_tuple("WitTypeNode::PrimS64Type").finish()
                        }
                        WitTypeNode::PrimF32Type => {
                            f.debug_tuple("WitTypeNode::PrimF32Type").finish()
                        }
                        WitTypeNode::PrimF64Type => {
                            f.debug_tuple("WitTypeNode::PrimF64Type").finish()
                        }
                        WitTypeNode::PrimCharType => {
                            f.debug_tuple("WitTypeNode::PrimCharType").finish()
                        }
                        WitTypeNode::PrimBoolType => {
                            f.debug_tuple("WitTypeNode::PrimBoolType").finish()
                        }
                        WitTypeNode::PrimStringType => {
                            f.debug_tuple("WitTypeNode::PrimStringType").finish()
                        }
                        WitTypeNode::HandleType(e) => {
                            f.debug_tuple("WitTypeNode::HandleType").field(e).finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub struct WitType {
                pub nodes: _rt::Vec<WitTypeNode>,
            }
            impl ::core::fmt::Debug for WitType {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WitType").field("nodes", &self.nodes).finish()
                }
            }
            #[derive(Clone)]
            pub struct Uri {
                pub value: _rt::String,
            }
            impl ::core::fmt::Debug for Uri {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Uri").field("value", &self.value).finish()
                }
            }
            #[derive(Clone)]
            pub enum WitNode {
                RecordValue(_rt::Vec<NodeIndex>),
                VariantValue((u32, Option<NodeIndex>)),
                EnumValue(u32),
                FlagsValue(_rt::Vec<bool>),
                TupleValue(_rt::Vec<NodeIndex>),
                ListValue(_rt::Vec<NodeIndex>),
                OptionValue(Option<NodeIndex>),
                ResultValue(Result<Option<NodeIndex>, Option<NodeIndex>>),
                PrimU8(u8),
                PrimU16(u16),
                PrimU32(u32),
                PrimU64(u64),
                PrimS8(i8),
                PrimS16(i16),
                PrimS32(i32),
                PrimS64(i64),
                PrimFloat32(f32),
                PrimFloat64(f64),
                PrimChar(char),
                PrimBool(bool),
                PrimString(_rt::String),
                Handle((Uri, u64)),
            }
            impl ::core::fmt::Debug for WitNode {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        WitNode::RecordValue(e) => {
                            f.debug_tuple("WitNode::RecordValue").field(e).finish()
                        }
                        WitNode::VariantValue(e) => {
                            f.debug_tuple("WitNode::VariantValue").field(e).finish()
                        }
                        WitNode::EnumValue(e) => {
                            f.debug_tuple("WitNode::EnumValue").field(e).finish()
                        }
                        WitNode::FlagsValue(e) => {
                            f.debug_tuple("WitNode::FlagsValue").field(e).finish()
                        }
                        WitNode::TupleValue(e) => {
                            f.debug_tuple("WitNode::TupleValue").field(e).finish()
                        }
                        WitNode::ListValue(e) => {
                            f.debug_tuple("WitNode::ListValue").field(e).finish()
                        }
                        WitNode::OptionValue(e) => {
                            f.debug_tuple("WitNode::OptionValue").field(e).finish()
                        }
                        WitNode::ResultValue(e) => {
                            f.debug_tuple("WitNode::ResultValue").field(e).finish()
                        }
                        WitNode::PrimU8(e) => {
                            f.debug_tuple("WitNode::PrimU8").field(e).finish()
                        }
                        WitNode::PrimU16(e) => {
                            f.debug_tuple("WitNode::PrimU16").field(e).finish()
                        }
                        WitNode::PrimU32(e) => {
                            f.debug_tuple("WitNode::PrimU32").field(e).finish()
                        }
                        WitNode::PrimU64(e) => {
                            f.debug_tuple("WitNode::PrimU64").field(e).finish()
                        }
                        WitNode::PrimS8(e) => {
                            f.debug_tuple("WitNode::PrimS8").field(e).finish()
                        }
                        WitNode::PrimS16(e) => {
                            f.debug_tuple("WitNode::PrimS16").field(e).finish()
                        }
                        WitNode::PrimS32(e) => {
                            f.debug_tuple("WitNode::PrimS32").field(e).finish()
                        }
                        WitNode::PrimS64(e) => {
                            f.debug_tuple("WitNode::PrimS64").field(e).finish()
                        }
                        WitNode::PrimFloat32(e) => {
                            f.debug_tuple("WitNode::PrimFloat32").field(e).finish()
                        }
                        WitNode::PrimFloat64(e) => {
                            f.debug_tuple("WitNode::PrimFloat64").field(e).finish()
                        }
                        WitNode::PrimChar(e) => {
                            f.debug_tuple("WitNode::PrimChar").field(e).finish()
                        }
                        WitNode::PrimBool(e) => {
                            f.debug_tuple("WitNode::PrimBool").field(e).finish()
                        }
                        WitNode::PrimString(e) => {
                            f.debug_tuple("WitNode::PrimString").field(e).finish()
                        }
                        WitNode::Handle(e) => {
                            f.debug_tuple("WitNode::Handle").field(e).finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub struct WitValue {
                pub nodes: _rt::Vec<WitNode>,
            }
            impl ::core::fmt::Debug for WitValue {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WitValue").field("nodes", &self.nodes).finish()
                }
            }
            #[derive(Clone)]
            pub struct ValueAndType {
                pub value: WitValue,
                pub typ: WitType,
            }
            impl ::core::fmt::Debug for ValueAndType {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ValueAndType")
                        .field("value", &self.value)
                        .field("typ", &self.typ)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub enum RpcError {
                ProtocolError(_rt::String),
                Denied(_rt::String),
                NotFound(_rt::String),
                RemoteInternalError(_rt::String),
            }
            impl ::core::fmt::Debug for RpcError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        RpcError::ProtocolError(e) => {
                            f.debug_tuple("RpcError::ProtocolError").field(e).finish()
                        }
                        RpcError::Denied(e) => {
                            f.debug_tuple("RpcError::Denied").field(e).finish()
                        }
                        RpcError::NotFound(e) => {
                            f.debug_tuple("RpcError::NotFound").field(e).finish()
                        }
                        RpcError::RemoteInternalError(e) => {
                            f.debug_tuple("RpcError::RemoteInternalError")
                                .field(e)
                                .finish()
                        }
                    }
                }
            }
            impl ::core::fmt::Display for RpcError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }
            impl std::error::Error for RpcError {}
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct WasmRpc {
                handle: _rt::Resource<WasmRpc>,
            }
            impl WasmRpc {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for WasmRpc {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:rpc/types@0.1.3")]
                        extern "C" {
                            #[link_name = "[resource-drop]wasm-rpc"]
                            fn drop(_: u32);
                        }
                        drop(_handle);
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct FutureInvokeResult {
                handle: _rt::Resource<FutureInvokeResult>,
            }
            impl FutureInvokeResult {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for FutureInvokeResult {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:rpc/types@0.1.3")]
                        extern "C" {
                            #[link_name = "[resource-drop]future-invoke-result"]
                            fn drop(_: u32);
                        }
                        drop(_handle);
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct CancellationToken {
                handle: _rt::Resource<CancellationToken>,
            }
            impl CancellationToken {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for CancellationToken {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:rpc/types@0.1.3")]
                        extern "C" {
                            #[link_name = "[resource-drop]cancellation-token"]
                            fn drop(_: u32);
                        }
                        drop(_handle);
                    }
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(location: &Uri) -> Self {
                    unsafe {
                        let Uri { value: value0 } = location;
                        let vec1 = value0;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.1.3")]
                        extern "C" {
                            #[link_name = "[constructor]wasm-rpc"]
                            fn wit_import(_: *mut u8, _: usize) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: *mut u8, _: usize) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(ptr1.cast_mut(), len1);
                        WasmRpc::from_handle(ret as u32)
                    }
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                pub fn invoke_and_await(
                    &self,
                    function_name: &str,
                    function_params: &[WitValue],
                ) -> Result<WitValue, RpcError> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 16],
                        );
                        let vec0 = function_name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec12 = function_params;
                        let len12 = vec12.len();
                        let layout12 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec12.len() * 8,
                            4,
                        );
                        let result12 = if layout12.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout12);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec12.into_iter().enumerate() {
                            let base = result12.add(i * 8);
                            {
                                let WitValue { nodes: nodes1 } = e;
                                let vec11 = nodes1;
                                let len11 = vec11.len();
                                let layout11 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec11.len() * 24,
                                    8,
                                );
                                let result11 = if layout11.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout11);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec11.into_iter().enumerate() {
                                    let base = result11.add(i * 24);
                                    {
                                        match e {
                                            WitNode::RecordValue(e) => {
                                                *base.add(0).cast::<u8>() = (0i32) as u8;
                                                let vec2 = e;
                                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                                let len2 = vec2.len();
                                                *base.add(12).cast::<usize>() = len2;
                                                *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                            }
                                            WitNode::VariantValue(e) => {
                                                *base.add(0).cast::<u8>() = (1i32) as u8;
                                                let (t3_0, t3_1) = e;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(t3_0);
                                                match t3_1 {
                                                    Some(e) => {
                                                        *base.add(12).cast::<u8>() = (1i32) as u8;
                                                        *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(12).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::EnumValue(e) => {
                                                *base.add(0).cast::<u8>() = (2i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::FlagsValue(e) => {
                                                *base.add(0).cast::<u8>() = (3i32) as u8;
                                                let vec4 = e;
                                                let len4 = vec4.len();
                                                let layout4 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec4.len() * 1,
                                                    1,
                                                );
                                                let result4 = if layout4.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout4).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout4);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec4.into_iter().enumerate() {
                                                    let base = result4.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        }) as u8;
                                                    }
                                                }
                                                *base.add(12).cast::<usize>() = len4;
                                                *base.add(8).cast::<*mut u8>() = result4;
                                                cleanup_list.extend_from_slice(&[(result4, layout4)]);
                                            }
                                            WitNode::TupleValue(e) => {
                                                *base.add(0).cast::<u8>() = (4i32) as u8;
                                                let vec5 = e;
                                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                                let len5 = vec5.len();
                                                *base.add(12).cast::<usize>() = len5;
                                                *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                            }
                                            WitNode::ListValue(e) => {
                                                *base.add(0).cast::<u8>() = (5i32) as u8;
                                                let vec6 = e;
                                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                                let len6 = vec6.len();
                                                *base.add(12).cast::<usize>() = len6;
                                                *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                            }
                                            WitNode::OptionValue(e) => {
                                                *base.add(0).cast::<u8>() = (6i32) as u8;
                                                match e {
                                                    Some(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::ResultValue(e) => {
                                                *base.add(0).cast::<u8>() = (7i32) as u8;
                                                match e {
                                                    Ok(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    Err(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                };
                                            }
                                            WitNode::PrimU8(e) => {
                                                *base.add(0).cast::<u8>() = (8i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimU16(e) => {
                                                *base.add(0).cast::<u8>() = (9i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimU32(e) => {
                                                *base.add(0).cast::<u8>() = (10i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimU64(e) => {
                                                *base.add(0).cast::<u8>() = (11i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimS8(e) => {
                                                *base.add(0).cast::<u8>() = (12i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimS16(e) => {
                                                *base.add(0).cast::<u8>() = (13i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimS32(e) => {
                                                *base.add(0).cast::<u8>() = (14i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimS64(e) => {
                                                *base.add(0).cast::<u8>() = (15i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimFloat32(e) => {
                                                *base.add(0).cast::<u8>() = (16i32) as u8;
                                                *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            WitNode::PrimFloat64(e) => {
                                                *base.add(0).cast::<u8>() = (17i32) as u8;
                                                *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            WitNode::PrimChar(e) => {
                                                *base.add(0).cast::<u8>() = (18i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimBool(e) => {
                                                *base.add(0).cast::<u8>() = (19i32) as u8;
                                                *base.add(8).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                            WitNode::PrimString(e) => {
                                                *base.add(0).cast::<u8>() = (20i32) as u8;
                                                let vec7 = e;
                                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                                let len7 = vec7.len();
                                                *base.add(12).cast::<usize>() = len7;
                                                *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                            }
                                            WitNode::Handle(e) => {
                                                *base.add(0).cast::<u8>() = (21i32) as u8;
                                                let (t8_0, t8_1) = e;
                                                let Uri { value: value9 } = t8_0;
                                                let vec10 = value9;
                                                let ptr10 = vec10.as_ptr().cast::<u8>();
                                                let len10 = vec10.len();
                                                *base.add(12).cast::<usize>() = len10;
                                                *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                                *base.add(16).cast::<i64>() = _rt::as_i64(t8_1);
                                            }
                                        }
                                    }
                                }
                                *base.add(4).cast::<usize>() = len11;
                                *base.add(0).cast::<*mut u8>() = result11;
                                cleanup_list.extend_from_slice(&[(result11, layout11)]);
                            }
                        }
                        let ptr13 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.1.3")]
                        extern "C" {
                            #[link_name = "[method]wasm-rpc.invoke-and-await"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            result12,
                            len12,
                            ptr13,
                        );
                        let l14 = i32::from(*ptr13.add(0).cast::<u8>());
                        if layout12.size() != 0 {
                            _rt::alloc::dealloc(result12.cast(), layout12);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l14 {
                            0 => {
                                let e = {
                                    let l15 = *ptr13.add(4).cast::<*mut u8>();
                                    let l16 = *ptr13.add(8).cast::<usize>();
                                    let base62 = l15;
                                    let len62 = l16;
                                    let mut result62 = _rt::Vec::with_capacity(len62);
                                    for i in 0..len62 {
                                        let base = base62.add(i * 24);
                                        let e62 = {
                                            let l17 = i32::from(*base.add(0).cast::<u8>());
                                            let v61 = match l17 {
                                                0 => {
                                                    let e61 = {
                                                        let l18 = *base.add(8).cast::<*mut u8>();
                                                        let l19 = *base.add(12).cast::<usize>();
                                                        let len20 = l19;
                                                        _rt::Vec::from_raw_parts(l18.cast(), len20, len20)
                                                    };
                                                    WitNode::RecordValue(e61)
                                                }
                                                1 => {
                                                    let e61 = {
                                                        let l21 = *base.add(8).cast::<i32>();
                                                        let l22 = i32::from(*base.add(12).cast::<u8>());
                                                        (
                                                            l21 as u32,
                                                            match l22 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l23 = *base.add(16).cast::<i32>();
                                                                        l23
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        )
                                                    };
                                                    WitNode::VariantValue(e61)
                                                }
                                                2 => {
                                                    let e61 = {
                                                        let l24 = *base.add(8).cast::<i32>();
                                                        l24 as u32
                                                    };
                                                    WitNode::EnumValue(e61)
                                                }
                                                3 => {
                                                    let e61 = {
                                                        let l25 = *base.add(8).cast::<*mut u8>();
                                                        let l26 = *base.add(12).cast::<usize>();
                                                        let base28 = l25;
                                                        let len28 = l26;
                                                        let mut result28 = _rt::Vec::with_capacity(len28);
                                                        for i in 0..len28 {
                                                            let base = base28.add(i * 1);
                                                            let e28 = {
                                                                let l27 = i32::from(*base.add(0).cast::<u8>());
                                                                _rt::bool_lift(l27 as u8)
                                                            };
                                                            result28.push(e28);
                                                        }
                                                        _rt::cabi_dealloc(base28, len28 * 1, 1);
                                                        result28
                                                    };
                                                    WitNode::FlagsValue(e61)
                                                }
                                                4 => {
                                                    let e61 = {
                                                        let l29 = *base.add(8).cast::<*mut u8>();
                                                        let l30 = *base.add(12).cast::<usize>();
                                                        let len31 = l30;
                                                        _rt::Vec::from_raw_parts(l29.cast(), len31, len31)
                                                    };
                                                    WitNode::TupleValue(e61)
                                                }
                                                5 => {
                                                    let e61 = {
                                                        let l32 = *base.add(8).cast::<*mut u8>();
                                                        let l33 = *base.add(12).cast::<usize>();
                                                        let len34 = l33;
                                                        _rt::Vec::from_raw_parts(l32.cast(), len34, len34)
                                                    };
                                                    WitNode::ListValue(e61)
                                                }
                                                6 => {
                                                    let e61 = {
                                                        let l35 = i32::from(*base.add(8).cast::<u8>());
                                                        match l35 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l36 = *base.add(12).cast::<i32>();
                                                                    l36
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        }
                                                    };
                                                    WitNode::OptionValue(e61)
                                                }
                                                7 => {
                                                    let e61 = {
                                                        let l37 = i32::from(*base.add(8).cast::<u8>());
                                                        match l37 {
                                                            0 => {
                                                                let e = {
                                                                    let l38 = i32::from(*base.add(12).cast::<u8>());
                                                                    match l38 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l39 = *base.add(16).cast::<i32>();
                                                                                l39
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                Ok(e)
                                                            }
                                                            1 => {
                                                                let e = {
                                                                    let l40 = i32::from(*base.add(12).cast::<u8>());
                                                                    match l40 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l41 = *base.add(16).cast::<i32>();
                                                                                l41
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                Err(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        }
                                                    };
                                                    WitNode::ResultValue(e61)
                                                }
                                                8 => {
                                                    let e61 = {
                                                        let l42 = i32::from(*base.add(8).cast::<u8>());
                                                        l42 as u8
                                                    };
                                                    WitNode::PrimU8(e61)
                                                }
                                                9 => {
                                                    let e61 = {
                                                        let l43 = i32::from(*base.add(8).cast::<u16>());
                                                        l43 as u16
                                                    };
                                                    WitNode::PrimU16(e61)
                                                }
                                                10 => {
                                                    let e61 = {
                                                        let l44 = *base.add(8).cast::<i32>();
                                                        l44 as u32
                                                    };
                                                    WitNode::PrimU32(e61)
                                                }
                                                11 => {
                                                    let e61 = {
                                                        let l45 = *base.add(8).cast::<i64>();
                                                        l45 as u64
                                                    };
                                                    WitNode::PrimU64(e61)
                                                }
                                                12 => {
                                                    let e61 = {
                                                        let l46 = i32::from(*base.add(8).cast::<i8>());
                                                        l46 as i8
                                                    };
                                                    WitNode::PrimS8(e61)
                                                }
                                                13 => {
                                                    let e61 = {
                                                        let l47 = i32::from(*base.add(8).cast::<i16>());
                                                        l47 as i16
                                                    };
                                                    WitNode::PrimS16(e61)
                                                }
                                                14 => {
                                                    let e61 = {
                                                        let l48 = *base.add(8).cast::<i32>();
                                                        l48
                                                    };
                                                    WitNode::PrimS32(e61)
                                                }
                                                15 => {
                                                    let e61 = {
                                                        let l49 = *base.add(8).cast::<i64>();
                                                        l49
                                                    };
                                                    WitNode::PrimS64(e61)
                                                }
                                                16 => {
                                                    let e61 = {
                                                        let l50 = *base.add(8).cast::<f32>();
                                                        l50
                                                    };
                                                    WitNode::PrimFloat32(e61)
                                                }
                                                17 => {
                                                    let e61 = {
                                                        let l51 = *base.add(8).cast::<f64>();
                                                        l51
                                                    };
                                                    WitNode::PrimFloat64(e61)
                                                }
                                                18 => {
                                                    let e61 = {
                                                        let l52 = *base.add(8).cast::<i32>();
                                                        _rt::char_lift(l52 as u32)
                                                    };
                                                    WitNode::PrimChar(e61)
                                                }
                                                19 => {
                                                    let e61 = {
                                                        let l53 = i32::from(*base.add(8).cast::<u8>());
                                                        _rt::bool_lift(l53 as u8)
                                                    };
                                                    WitNode::PrimBool(e61)
                                                }
                                                20 => {
                                                    let e61 = {
                                                        let l54 = *base.add(8).cast::<*mut u8>();
                                                        let l55 = *base.add(12).cast::<usize>();
                                                        let len56 = l55;
                                                        let bytes56 = _rt::Vec::from_raw_parts(
                                                            l54.cast(),
                                                            len56,
                                                            len56,
                                                        );
                                                        _rt::string_lift(bytes56)
                                                    };
                                                    WitNode::PrimString(e61)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                    let e61 = {
                                                        let l57 = *base.add(8).cast::<*mut u8>();
                                                        let l58 = *base.add(12).cast::<usize>();
                                                        let len59 = l58;
                                                        let bytes59 = _rt::Vec::from_raw_parts(
                                                            l57.cast(),
                                                            len59,
                                                            len59,
                                                        );
                                                        let l60 = *base.add(16).cast::<i64>();
                                                        (
                                                            Uri {
                                                                value: _rt::string_lift(bytes59),
                                                            },
                                                            l60 as u64,
                                                        )
                                                    };
                                                    WitNode::Handle(e61)
                                                }
                                            };
                                            v61
                                        };
                                        result62.push(e62);
                                    }
                                    _rt::cabi_dealloc(base62, len62 * 24, 8);
                                    WitValue { nodes: result62 }
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l63 = i32::from(*ptr13.add(4).cast::<u8>());
                                    let v76 = match l63 {
                                        0 => {
                                            let e76 = {
                                                let l64 = *ptr13.add(8).cast::<*mut u8>();
                                                let l65 = *ptr13.add(12).cast::<usize>();
                                                let len66 = l65;
                                                let bytes66 = _rt::Vec::from_raw_parts(
                                                    l64.cast(),
                                                    len66,
                                                    len66,
                                                );
                                                _rt::string_lift(bytes66)
                                            };
                                            RpcError::ProtocolError(e76)
                                        }
                                        1 => {
                                            let e76 = {
                                                let l67 = *ptr13.add(8).cast::<*mut u8>();
                                                let l68 = *ptr13.add(12).cast::<usize>();
                                                let len69 = l68;
                                                let bytes69 = _rt::Vec::from_raw_parts(
                                                    l67.cast(),
                                                    len69,
                                                    len69,
                                                );
                                                _rt::string_lift(bytes69)
                                            };
                                            RpcError::Denied(e76)
                                        }
                                        2 => {
                                            let e76 = {
                                                let l70 = *ptr13.add(8).cast::<*mut u8>();
                                                let l71 = *ptr13.add(12).cast::<usize>();
                                                let len72 = l71;
                                                let bytes72 = _rt::Vec::from_raw_parts(
                                                    l70.cast(),
                                                    len72,
                                                    len72,
                                                );
                                                _rt::string_lift(bytes72)
                                            };
                                            RpcError::NotFound(e76)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 3, "invalid enum discriminant");
                                            let e76 = {
                                                let l73 = *ptr13.add(8).cast::<*mut u8>();
                                                let l74 = *ptr13.add(12).cast::<usize>();
                                                let len75 = l74;
                                                let bytes75 = _rt::Vec::from_raw_parts(
                                                    l73.cast(),
                                                    len75,
                                                    len75,
                                                );
                                                _rt::string_lift(bytes75)
                                            };
                                            RpcError::RemoteInternalError(e76)
                                        }
                                    };
                                    v76
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                pub fn invoke(
                    &self,
                    function_name: &str,
                    function_params: &[WitValue],
                ) -> Result<(), RpcError> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 16],
                        );
                        let vec0 = function_name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec12 = function_params;
                        let len12 = vec12.len();
                        let layout12 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec12.len() * 8,
                            4,
                        );
                        let result12 = if layout12.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout12);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec12.into_iter().enumerate() {
                            let base = result12.add(i * 8);
                            {
                                let WitValue { nodes: nodes1 } = e;
                                let vec11 = nodes1;
                                let len11 = vec11.len();
                                let layout11 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec11.len() * 24,
                                    8,
                                );
                                let result11 = if layout11.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout11);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec11.into_iter().enumerate() {
                                    let base = result11.add(i * 24);
                                    {
                                        match e {
                                            WitNode::RecordValue(e) => {
                                                *base.add(0).cast::<u8>() = (0i32) as u8;
                                                let vec2 = e;
                                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                                let len2 = vec2.len();
                                                *base.add(12).cast::<usize>() = len2;
                                                *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                            }
                                            WitNode::VariantValue(e) => {
                                                *base.add(0).cast::<u8>() = (1i32) as u8;
                                                let (t3_0, t3_1) = e;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(t3_0);
                                                match t3_1 {
                                                    Some(e) => {
                                                        *base.add(12).cast::<u8>() = (1i32) as u8;
                                                        *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(12).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::EnumValue(e) => {
                                                *base.add(0).cast::<u8>() = (2i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::FlagsValue(e) => {
                                                *base.add(0).cast::<u8>() = (3i32) as u8;
                                                let vec4 = e;
                                                let len4 = vec4.len();
                                                let layout4 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec4.len() * 1,
                                                    1,
                                                );
                                                let result4 = if layout4.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout4).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout4);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec4.into_iter().enumerate() {
                                                    let base = result4.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        }) as u8;
                                                    }
                                                }
                                                *base.add(12).cast::<usize>() = len4;
                                                *base.add(8).cast::<*mut u8>() = result4;
                                                cleanup_list.extend_from_slice(&[(result4, layout4)]);
                                            }
                                            WitNode::TupleValue(e) => {
                                                *base.add(0).cast::<u8>() = (4i32) as u8;
                                                let vec5 = e;
                                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                                let len5 = vec5.len();
                                                *base.add(12).cast::<usize>() = len5;
                                                *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                            }
                                            WitNode::ListValue(e) => {
                                                *base.add(0).cast::<u8>() = (5i32) as u8;
                                                let vec6 = e;
                                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                                let len6 = vec6.len();
                                                *base.add(12).cast::<usize>() = len6;
                                                *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                            }
                                            WitNode::OptionValue(e) => {
                                                *base.add(0).cast::<u8>() = (6i32) as u8;
                                                match e {
                                                    Some(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::ResultValue(e) => {
                                                *base.add(0).cast::<u8>() = (7i32) as u8;
                                                match e {
                                                    Ok(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    Err(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                };
                                            }
                                            WitNode::PrimU8(e) => {
                                                *base.add(0).cast::<u8>() = (8i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimU16(e) => {
                                                *base.add(0).cast::<u8>() = (9i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimU32(e) => {
                                                *base.add(0).cast::<u8>() = (10i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimU64(e) => {
                                                *base.add(0).cast::<u8>() = (11i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimS8(e) => {
                                                *base.add(0).cast::<u8>() = (12i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimS16(e) => {
                                                *base.add(0).cast::<u8>() = (13i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimS32(e) => {
                                                *base.add(0).cast::<u8>() = (14i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimS64(e) => {
                                                *base.add(0).cast::<u8>() = (15i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimFloat32(e) => {
                                                *base.add(0).cast::<u8>() = (16i32) as u8;
                                                *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            WitNode::PrimFloat64(e) => {
                                                *base.add(0).cast::<u8>() = (17i32) as u8;
                                                *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            WitNode::PrimChar(e) => {
                                                *base.add(0).cast::<u8>() = (18i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimBool(e) => {
                                                *base.add(0).cast::<u8>() = (19i32) as u8;
                                                *base.add(8).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                            WitNode::PrimString(e) => {
                                                *base.add(0).cast::<u8>() = (20i32) as u8;
                                                let vec7 = e;
                                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                                let len7 = vec7.len();
                                                *base.add(12).cast::<usize>() = len7;
                                                *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                            }
                                            WitNode::Handle(e) => {
                                                *base.add(0).cast::<u8>() = (21i32) as u8;
                                                let (t8_0, t8_1) = e;
                                                let Uri { value: value9 } = t8_0;
                                                let vec10 = value9;
                                                let ptr10 = vec10.as_ptr().cast::<u8>();
                                                let len10 = vec10.len();
                                                *base.add(12).cast::<usize>() = len10;
                                                *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                                *base.add(16).cast::<i64>() = _rt::as_i64(t8_1);
                                            }
                                        }
                                    }
                                }
                                *base.add(4).cast::<usize>() = len11;
                                *base.add(0).cast::<*mut u8>() = result11;
                                cleanup_list.extend_from_slice(&[(result11, layout11)]);
                            }
                        }
                        let ptr13 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.1.3")]
                        extern "C" {
                            #[link_name = "[method]wasm-rpc.invoke"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            result12,
                            len12,
                            ptr13,
                        );
                        let l14 = i32::from(*ptr13.add(0).cast::<u8>());
                        if layout12.size() != 0 {
                            _rt::alloc::dealloc(result12.cast(), layout12);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l14 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l15 = i32::from(*ptr13.add(4).cast::<u8>());
                                    let v28 = match l15 {
                                        0 => {
                                            let e28 = {
                                                let l16 = *ptr13.add(8).cast::<*mut u8>();
                                                let l17 = *ptr13.add(12).cast::<usize>();
                                                let len18 = l17;
                                                let bytes18 = _rt::Vec::from_raw_parts(
                                                    l16.cast(),
                                                    len18,
                                                    len18,
                                                );
                                                _rt::string_lift(bytes18)
                                            };
                                            RpcError::ProtocolError(e28)
                                        }
                                        1 => {
                                            let e28 = {
                                                let l19 = *ptr13.add(8).cast::<*mut u8>();
                                                let l20 = *ptr13.add(12).cast::<usize>();
                                                let len21 = l20;
                                                let bytes21 = _rt::Vec::from_raw_parts(
                                                    l19.cast(),
                                                    len21,
                                                    len21,
                                                );
                                                _rt::string_lift(bytes21)
                                            };
                                            RpcError::Denied(e28)
                                        }
                                        2 => {
                                            let e28 = {
                                                let l22 = *ptr13.add(8).cast::<*mut u8>();
                                                let l23 = *ptr13.add(12).cast::<usize>();
                                                let len24 = l23;
                                                let bytes24 = _rt::Vec::from_raw_parts(
                                                    l22.cast(),
                                                    len24,
                                                    len24,
                                                );
                                                _rt::string_lift(bytes24)
                                            };
                                            RpcError::NotFound(e28)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 3, "invalid enum discriminant");
                                            let e28 = {
                                                let l25 = *ptr13.add(8).cast::<*mut u8>();
                                                let l26 = *ptr13.add(12).cast::<usize>();
                                                let len27 = l26;
                                                let bytes27 = _rt::Vec::from_raw_parts(
                                                    l25.cast(),
                                                    len27,
                                                    len27,
                                                );
                                                _rt::string_lift(bytes27)
                                            };
                                            RpcError::RemoteInternalError(e28)
                                        }
                                    };
                                    v28
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                pub fn async_invoke_and_await(
                    &self,
                    function_name: &str,
                    function_params: &[WitValue],
                ) -> FutureInvokeResult {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        let vec0 = function_name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec12 = function_params;
                        let len12 = vec12.len();
                        let layout12 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec12.len() * 8,
                            4,
                        );
                        let result12 = if layout12.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout12);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec12.into_iter().enumerate() {
                            let base = result12.add(i * 8);
                            {
                                let WitValue { nodes: nodes1 } = e;
                                let vec11 = nodes1;
                                let len11 = vec11.len();
                                let layout11 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec11.len() * 24,
                                    8,
                                );
                                let result11 = if layout11.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout11);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec11.into_iter().enumerate() {
                                    let base = result11.add(i * 24);
                                    {
                                        match e {
                                            WitNode::RecordValue(e) => {
                                                *base.add(0).cast::<u8>() = (0i32) as u8;
                                                let vec2 = e;
                                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                                let len2 = vec2.len();
                                                *base.add(12).cast::<usize>() = len2;
                                                *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                            }
                                            WitNode::VariantValue(e) => {
                                                *base.add(0).cast::<u8>() = (1i32) as u8;
                                                let (t3_0, t3_1) = e;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(t3_0);
                                                match t3_1 {
                                                    Some(e) => {
                                                        *base.add(12).cast::<u8>() = (1i32) as u8;
                                                        *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(12).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::EnumValue(e) => {
                                                *base.add(0).cast::<u8>() = (2i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::FlagsValue(e) => {
                                                *base.add(0).cast::<u8>() = (3i32) as u8;
                                                let vec4 = e;
                                                let len4 = vec4.len();
                                                let layout4 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec4.len() * 1,
                                                    1,
                                                );
                                                let result4 = if layout4.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout4).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout4);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec4.into_iter().enumerate() {
                                                    let base = result4.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        }) as u8;
                                                    }
                                                }
                                                *base.add(12).cast::<usize>() = len4;
                                                *base.add(8).cast::<*mut u8>() = result4;
                                                cleanup_list.extend_from_slice(&[(result4, layout4)]);
                                            }
                                            WitNode::TupleValue(e) => {
                                                *base.add(0).cast::<u8>() = (4i32) as u8;
                                                let vec5 = e;
                                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                                let len5 = vec5.len();
                                                *base.add(12).cast::<usize>() = len5;
                                                *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                            }
                                            WitNode::ListValue(e) => {
                                                *base.add(0).cast::<u8>() = (5i32) as u8;
                                                let vec6 = e;
                                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                                let len6 = vec6.len();
                                                *base.add(12).cast::<usize>() = len6;
                                                *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                            }
                                            WitNode::OptionValue(e) => {
                                                *base.add(0).cast::<u8>() = (6i32) as u8;
                                                match e {
                                                    Some(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::ResultValue(e) => {
                                                *base.add(0).cast::<u8>() = (7i32) as u8;
                                                match e {
                                                    Ok(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    Err(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                };
                                            }
                                            WitNode::PrimU8(e) => {
                                                *base.add(0).cast::<u8>() = (8i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimU16(e) => {
                                                *base.add(0).cast::<u8>() = (9i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimU32(e) => {
                                                *base.add(0).cast::<u8>() = (10i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimU64(e) => {
                                                *base.add(0).cast::<u8>() = (11i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimS8(e) => {
                                                *base.add(0).cast::<u8>() = (12i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimS16(e) => {
                                                *base.add(0).cast::<u8>() = (13i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimS32(e) => {
                                                *base.add(0).cast::<u8>() = (14i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimS64(e) => {
                                                *base.add(0).cast::<u8>() = (15i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimFloat32(e) => {
                                                *base.add(0).cast::<u8>() = (16i32) as u8;
                                                *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            WitNode::PrimFloat64(e) => {
                                                *base.add(0).cast::<u8>() = (17i32) as u8;
                                                *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            WitNode::PrimChar(e) => {
                                                *base.add(0).cast::<u8>() = (18i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimBool(e) => {
                                                *base.add(0).cast::<u8>() = (19i32) as u8;
                                                *base.add(8).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                            WitNode::PrimString(e) => {
                                                *base.add(0).cast::<u8>() = (20i32) as u8;
                                                let vec7 = e;
                                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                                let len7 = vec7.len();
                                                *base.add(12).cast::<usize>() = len7;
                                                *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                            }
                                            WitNode::Handle(e) => {
                                                *base.add(0).cast::<u8>() = (21i32) as u8;
                                                let (t8_0, t8_1) = e;
                                                let Uri { value: value9 } = t8_0;
                                                let vec10 = value9;
                                                let ptr10 = vec10.as_ptr().cast::<u8>();
                                                let len10 = vec10.len();
                                                *base.add(12).cast::<usize>() = len10;
                                                *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                                *base.add(16).cast::<i64>() = _rt::as_i64(t8_1);
                                            }
                                        }
                                    }
                                }
                                *base.add(4).cast::<usize>() = len11;
                                *base.add(0).cast::<*mut u8>() = result11;
                                cleanup_list.extend_from_slice(&[(result11, layout11)]);
                            }
                        }
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.1.3")]
                        extern "C" {
                            #[link_name = "[method]wasm-rpc.async-invoke-and-await"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                            ) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            result12,
                            len12,
                        );
                        if layout12.size() != 0 {
                            _rt::alloc::dealloc(result12.cast(), layout12);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        FutureInvokeResult::from_handle(ret as u32)
                    }
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                /// Schedule invocation for later
                pub fn schedule_invocation(
                    &self,
                    scheduled_time: Datetime,
                    function_name: &str,
                    function_params: &[WitValue],
                ) {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        let super::super::super::wasi::clocks::wall_clock::Datetime {
                            seconds: seconds0,
                            nanoseconds: nanoseconds0,
                        } = scheduled_time;
                        let vec1 = function_name;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        let vec13 = function_params;
                        let len13 = vec13.len();
                        let layout13 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec13.len() * 8,
                            4,
                        );
                        let result13 = if layout13.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout13).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout13);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec13.into_iter().enumerate() {
                            let base = result13.add(i * 8);
                            {
                                let WitValue { nodes: nodes2 } = e;
                                let vec12 = nodes2;
                                let len12 = vec12.len();
                                let layout12 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec12.len() * 24,
                                    8,
                                );
                                let result12 = if layout12.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout12);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec12.into_iter().enumerate() {
                                    let base = result12.add(i * 24);
                                    {
                                        match e {
                                            WitNode::RecordValue(e) => {
                                                *base.add(0).cast::<u8>() = (0i32) as u8;
                                                let vec3 = e;
                                                let ptr3 = vec3.as_ptr().cast::<u8>();
                                                let len3 = vec3.len();
                                                *base.add(12).cast::<usize>() = len3;
                                                *base.add(8).cast::<*mut u8>() = ptr3.cast_mut();
                                            }
                                            WitNode::VariantValue(e) => {
                                                *base.add(0).cast::<u8>() = (1i32) as u8;
                                                let (t4_0, t4_1) = e;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(t4_0);
                                                match t4_1 {
                                                    Some(e) => {
                                                        *base.add(12).cast::<u8>() = (1i32) as u8;
                                                        *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(12).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::EnumValue(e) => {
                                                *base.add(0).cast::<u8>() = (2i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::FlagsValue(e) => {
                                                *base.add(0).cast::<u8>() = (3i32) as u8;
                                                let vec5 = e;
                                                let len5 = vec5.len();
                                                let layout5 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec5.len() * 1,
                                                    1,
                                                );
                                                let result5 = if layout5.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout5).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout5);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec5.into_iter().enumerate() {
                                                    let base = result5.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        }) as u8;
                                                    }
                                                }
                                                *base.add(12).cast::<usize>() = len5;
                                                *base.add(8).cast::<*mut u8>() = result5;
                                                cleanup_list.extend_from_slice(&[(result5, layout5)]);
                                            }
                                            WitNode::TupleValue(e) => {
                                                *base.add(0).cast::<u8>() = (4i32) as u8;
                                                let vec6 = e;
                                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                                let len6 = vec6.len();
                                                *base.add(12).cast::<usize>() = len6;
                                                *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                            }
                                            WitNode::ListValue(e) => {
                                                *base.add(0).cast::<u8>() = (5i32) as u8;
                                                let vec7 = e;
                                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                                let len7 = vec7.len();
                                                *base.add(12).cast::<usize>() = len7;
                                                *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                            }
                                            WitNode::OptionValue(e) => {
                                                *base.add(0).cast::<u8>() = (6i32) as u8;
                                                match e {
                                                    Some(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::ResultValue(e) => {
                                                *base.add(0).cast::<u8>() = (7i32) as u8;
                                                match e {
                                                    Ok(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    Err(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                };
                                            }
                                            WitNode::PrimU8(e) => {
                                                *base.add(0).cast::<u8>() = (8i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimU16(e) => {
                                                *base.add(0).cast::<u8>() = (9i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimU32(e) => {
                                                *base.add(0).cast::<u8>() = (10i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimU64(e) => {
                                                *base.add(0).cast::<u8>() = (11i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimS8(e) => {
                                                *base.add(0).cast::<u8>() = (12i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimS16(e) => {
                                                *base.add(0).cast::<u8>() = (13i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimS32(e) => {
                                                *base.add(0).cast::<u8>() = (14i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimS64(e) => {
                                                *base.add(0).cast::<u8>() = (15i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimFloat32(e) => {
                                                *base.add(0).cast::<u8>() = (16i32) as u8;
                                                *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            WitNode::PrimFloat64(e) => {
                                                *base.add(0).cast::<u8>() = (17i32) as u8;
                                                *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            WitNode::PrimChar(e) => {
                                                *base.add(0).cast::<u8>() = (18i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimBool(e) => {
                                                *base.add(0).cast::<u8>() = (19i32) as u8;
                                                *base.add(8).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                            WitNode::PrimString(e) => {
                                                *base.add(0).cast::<u8>() = (20i32) as u8;
                                                let vec8 = e;
                                                let ptr8 = vec8.as_ptr().cast::<u8>();
                                                let len8 = vec8.len();
                                                *base.add(12).cast::<usize>() = len8;
                                                *base.add(8).cast::<*mut u8>() = ptr8.cast_mut();
                                            }
                                            WitNode::Handle(e) => {
                                                *base.add(0).cast::<u8>() = (21i32) as u8;
                                                let (t9_0, t9_1) = e;
                                                let Uri { value: value10 } = t9_0;
                                                let vec11 = value10;
                                                let ptr11 = vec11.as_ptr().cast::<u8>();
                                                let len11 = vec11.len();
                                                *base.add(12).cast::<usize>() = len11;
                                                *base.add(8).cast::<*mut u8>() = ptr11.cast_mut();
                                                *base.add(16).cast::<i64>() = _rt::as_i64(t9_1);
                                            }
                                        }
                                    }
                                }
                                *base.add(4).cast::<usize>() = len12;
                                *base.add(0).cast::<*mut u8>() = result12;
                                cleanup_list.extend_from_slice(&[(result12, layout12)]);
                            }
                        }
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.1.3")]
                        extern "C" {
                            #[link_name = "[method]wasm-rpc.schedule-invocation"]
                            fn wit_import(
                                _: i32,
                                _: i64,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: i64,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            _rt::as_i64(seconds0),
                            _rt::as_i32(nanoseconds0),
                            ptr1.cast_mut(),
                            len1,
                            result13,
                            len13,
                        );
                        if layout13.size() != 0 {
                            _rt::alloc::dealloc(result13.cast(), layout13);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                    }
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                /// Schedule invocation for later. Call cancel on the returned resource to cancel the invocation before the scheduled time.
                pub fn schedule_cancelable_invocation(
                    &self,
                    scheduled_time: Datetime,
                    function_name: &str,
                    function_params: &[WitValue],
                ) -> CancellationToken {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        let super::super::super::wasi::clocks::wall_clock::Datetime {
                            seconds: seconds0,
                            nanoseconds: nanoseconds0,
                        } = scheduled_time;
                        let vec1 = function_name;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        let vec13 = function_params;
                        let len13 = vec13.len();
                        let layout13 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec13.len() * 8,
                            4,
                        );
                        let result13 = if layout13.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout13).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout13);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec13.into_iter().enumerate() {
                            let base = result13.add(i * 8);
                            {
                                let WitValue { nodes: nodes2 } = e;
                                let vec12 = nodes2;
                                let len12 = vec12.len();
                                let layout12 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec12.len() * 24,
                                    8,
                                );
                                let result12 = if layout12.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout12);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec12.into_iter().enumerate() {
                                    let base = result12.add(i * 24);
                                    {
                                        match e {
                                            WitNode::RecordValue(e) => {
                                                *base.add(0).cast::<u8>() = (0i32) as u8;
                                                let vec3 = e;
                                                let ptr3 = vec3.as_ptr().cast::<u8>();
                                                let len3 = vec3.len();
                                                *base.add(12).cast::<usize>() = len3;
                                                *base.add(8).cast::<*mut u8>() = ptr3.cast_mut();
                                            }
                                            WitNode::VariantValue(e) => {
                                                *base.add(0).cast::<u8>() = (1i32) as u8;
                                                let (t4_0, t4_1) = e;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(t4_0);
                                                match t4_1 {
                                                    Some(e) => {
                                                        *base.add(12).cast::<u8>() = (1i32) as u8;
                                                        *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(12).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::EnumValue(e) => {
                                                *base.add(0).cast::<u8>() = (2i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::FlagsValue(e) => {
                                                *base.add(0).cast::<u8>() = (3i32) as u8;
                                                let vec5 = e;
                                                let len5 = vec5.len();
                                                let layout5 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec5.len() * 1,
                                                    1,
                                                );
                                                let result5 = if layout5.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout5).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout5);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec5.into_iter().enumerate() {
                                                    let base = result5.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        }) as u8;
                                                    }
                                                }
                                                *base.add(12).cast::<usize>() = len5;
                                                *base.add(8).cast::<*mut u8>() = result5;
                                                cleanup_list.extend_from_slice(&[(result5, layout5)]);
                                            }
                                            WitNode::TupleValue(e) => {
                                                *base.add(0).cast::<u8>() = (4i32) as u8;
                                                let vec6 = e;
                                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                                let len6 = vec6.len();
                                                *base.add(12).cast::<usize>() = len6;
                                                *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                            }
                                            WitNode::ListValue(e) => {
                                                *base.add(0).cast::<u8>() = (5i32) as u8;
                                                let vec7 = e;
                                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                                let len7 = vec7.len();
                                                *base.add(12).cast::<usize>() = len7;
                                                *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                            }
                                            WitNode::OptionValue(e) => {
                                                *base.add(0).cast::<u8>() = (6i32) as u8;
                                                match e {
                                                    Some(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::ResultValue(e) => {
                                                *base.add(0).cast::<u8>() = (7i32) as u8;
                                                match e {
                                                    Ok(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    Err(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                };
                                            }
                                            WitNode::PrimU8(e) => {
                                                *base.add(0).cast::<u8>() = (8i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimU16(e) => {
                                                *base.add(0).cast::<u8>() = (9i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimU32(e) => {
                                                *base.add(0).cast::<u8>() = (10i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimU64(e) => {
                                                *base.add(0).cast::<u8>() = (11i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimS8(e) => {
                                                *base.add(0).cast::<u8>() = (12i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimS16(e) => {
                                                *base.add(0).cast::<u8>() = (13i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimS32(e) => {
                                                *base.add(0).cast::<u8>() = (14i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimS64(e) => {
                                                *base.add(0).cast::<u8>() = (15i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimFloat32(e) => {
                                                *base.add(0).cast::<u8>() = (16i32) as u8;
                                                *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            WitNode::PrimFloat64(e) => {
                                                *base.add(0).cast::<u8>() = (17i32) as u8;
                                                *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            WitNode::PrimChar(e) => {
                                                *base.add(0).cast::<u8>() = (18i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimBool(e) => {
                                                *base.add(0).cast::<u8>() = (19i32) as u8;
                                                *base.add(8).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                            WitNode::PrimString(e) => {
                                                *base.add(0).cast::<u8>() = (20i32) as u8;
                                                let vec8 = e;
                                                let ptr8 = vec8.as_ptr().cast::<u8>();
                                                let len8 = vec8.len();
                                                *base.add(12).cast::<usize>() = len8;
                                                *base.add(8).cast::<*mut u8>() = ptr8.cast_mut();
                                            }
                                            WitNode::Handle(e) => {
                                                *base.add(0).cast::<u8>() = (21i32) as u8;
                                                let (t9_0, t9_1) = e;
                                                let Uri { value: value10 } = t9_0;
                                                let vec11 = value10;
                                                let ptr11 = vec11.as_ptr().cast::<u8>();
                                                let len11 = vec11.len();
                                                *base.add(12).cast::<usize>() = len11;
                                                *base.add(8).cast::<*mut u8>() = ptr11.cast_mut();
                                                *base.add(16).cast::<i64>() = _rt::as_i64(t9_1);
                                            }
                                        }
                                    }
                                }
                                *base.add(4).cast::<usize>() = len12;
                                *base.add(0).cast::<*mut u8>() = result12;
                                cleanup_list.extend_from_slice(&[(result12, layout12)]);
                            }
                        }
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.1.3")]
                        extern "C" {
                            #[link_name = "[method]wasm-rpc.schedule-cancelable-invocation"]
                            fn wit_import(
                                _: i32,
                                _: i64,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                            ) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: i64,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            (self).handle() as i32,
                            _rt::as_i64(seconds0),
                            _rt::as_i32(nanoseconds0),
                            ptr1.cast_mut(),
                            len1,
                            result13,
                            len13,
                        );
                        if layout13.size() != 0 {
                            _rt::alloc::dealloc(result13.cast(), layout13);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        CancellationToken::from_handle(ret as u32)
                    }
                }
            }
            impl FutureInvokeResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn subscribe(&self) -> Pollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.1.3")]
                        extern "C" {
                            #[link_name = "[method]future-invoke-result.subscribe"]
                            fn wit_import(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        super::super::super::wasi::io::poll::Pollable::from_handle(
                            ret as u32,
                        )
                    }
                }
            }
            impl FutureInvokeResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get(&self) -> Option<Result<WitValue, RpcError>> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 20]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 20],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.1.3")]
                        extern "C" {
                            #[link_name = "[method]future-invoke-result.get"]
                            fn wit_import(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(4).cast::<u8>());
                                    match l2 {
                                        0 => {
                                            let e = {
                                                let l3 = *ptr0.add(8).cast::<*mut u8>();
                                                let l4 = *ptr0.add(12).cast::<usize>();
                                                let base50 = l3;
                                                let len50 = l4;
                                                let mut result50 = _rt::Vec::with_capacity(len50);
                                                for i in 0..len50 {
                                                    let base = base50.add(i * 24);
                                                    let e50 = {
                                                        let l5 = i32::from(*base.add(0).cast::<u8>());
                                                        let v49 = match l5 {
                                                            0 => {
                                                                let e49 = {
                                                                    let l6 = *base.add(8).cast::<*mut u8>();
                                                                    let l7 = *base.add(12).cast::<usize>();
                                                                    let len8 = l7;
                                                                    _rt::Vec::from_raw_parts(l6.cast(), len8, len8)
                                                                };
                                                                WitNode::RecordValue(e49)
                                                            }
                                                            1 => {
                                                                let e49 = {
                                                                    let l9 = *base.add(8).cast::<i32>();
                                                                    let l10 = i32::from(*base.add(12).cast::<u8>());
                                                                    (
                                                                        l9 as u32,
                                                                        match l10 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l11 = *base.add(16).cast::<i32>();
                                                                                    l11
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    )
                                                                };
                                                                WitNode::VariantValue(e49)
                                                            }
                                                            2 => {
                                                                let e49 = {
                                                                    let l12 = *base.add(8).cast::<i32>();
                                                                    l12 as u32
                                                                };
                                                                WitNode::EnumValue(e49)
                                                            }
                                                            3 => {
                                                                let e49 = {
                                                                    let l13 = *base.add(8).cast::<*mut u8>();
                                                                    let l14 = *base.add(12).cast::<usize>();
                                                                    let base16 = l13;
                                                                    let len16 = l14;
                                                                    let mut result16 = _rt::Vec::with_capacity(len16);
                                                                    for i in 0..len16 {
                                                                        let base = base16.add(i * 1);
                                                                        let e16 = {
                                                                            let l15 = i32::from(*base.add(0).cast::<u8>());
                                                                            _rt::bool_lift(l15 as u8)
                                                                        };
                                                                        result16.push(e16);
                                                                    }
                                                                    _rt::cabi_dealloc(base16, len16 * 1, 1);
                                                                    result16
                                                                };
                                                                WitNode::FlagsValue(e49)
                                                            }
                                                            4 => {
                                                                let e49 = {
                                                                    let l17 = *base.add(8).cast::<*mut u8>();
                                                                    let l18 = *base.add(12).cast::<usize>();
                                                                    let len19 = l18;
                                                                    _rt::Vec::from_raw_parts(l17.cast(), len19, len19)
                                                                };
                                                                WitNode::TupleValue(e49)
                                                            }
                                                            5 => {
                                                                let e49 = {
                                                                    let l20 = *base.add(8).cast::<*mut u8>();
                                                                    let l21 = *base.add(12).cast::<usize>();
                                                                    let len22 = l21;
                                                                    _rt::Vec::from_raw_parts(l20.cast(), len22, len22)
                                                                };
                                                                WitNode::ListValue(e49)
                                                            }
                                                            6 => {
                                                                let e49 = {
                                                                    let l23 = i32::from(*base.add(8).cast::<u8>());
                                                                    match l23 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l24 = *base.add(12).cast::<i32>();
                                                                                l24
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                WitNode::OptionValue(e49)
                                                            }
                                                            7 => {
                                                                let e49 = {
                                                                    let l25 = i32::from(*base.add(8).cast::<u8>());
                                                                    match l25 {
                                                                        0 => {
                                                                            let e = {
                                                                                let l26 = i32::from(*base.add(12).cast::<u8>());
                                                                                match l26 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l27 = *base.add(16).cast::<i32>();
                                                                                            l27
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                }
                                                                            };
                                                                            Ok(e)
                                                                        }
                                                                        1 => {
                                                                            let e = {
                                                                                let l28 = i32::from(*base.add(12).cast::<u8>());
                                                                                match l28 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l29 = *base.add(16).cast::<i32>();
                                                                                            l29
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                }
                                                                            };
                                                                            Err(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                WitNode::ResultValue(e49)
                                                            }
                                                            8 => {
                                                                let e49 = {
                                                                    let l30 = i32::from(*base.add(8).cast::<u8>());
                                                                    l30 as u8
                                                                };
                                                                WitNode::PrimU8(e49)
                                                            }
                                                            9 => {
                                                                let e49 = {
                                                                    let l31 = i32::from(*base.add(8).cast::<u16>());
                                                                    l31 as u16
                                                                };
                                                                WitNode::PrimU16(e49)
                                                            }
                                                            10 => {
                                                                let e49 = {
                                                                    let l32 = *base.add(8).cast::<i32>();
                                                                    l32 as u32
                                                                };
                                                                WitNode::PrimU32(e49)
                                                            }
                                                            11 => {
                                                                let e49 = {
                                                                    let l33 = *base.add(8).cast::<i64>();
                                                                    l33 as u64
                                                                };
                                                                WitNode::PrimU64(e49)
                                                            }
                                                            12 => {
                                                                let e49 = {
                                                                    let l34 = i32::from(*base.add(8).cast::<i8>());
                                                                    l34 as i8
                                                                };
                                                                WitNode::PrimS8(e49)
                                                            }
                                                            13 => {
                                                                let e49 = {
                                                                    let l35 = i32::from(*base.add(8).cast::<i16>());
                                                                    l35 as i16
                                                                };
                                                                WitNode::PrimS16(e49)
                                                            }
                                                            14 => {
                                                                let e49 = {
                                                                    let l36 = *base.add(8).cast::<i32>();
                                                                    l36
                                                                };
                                                                WitNode::PrimS32(e49)
                                                            }
                                                            15 => {
                                                                let e49 = {
                                                                    let l37 = *base.add(8).cast::<i64>();
                                                                    l37
                                                                };
                                                                WitNode::PrimS64(e49)
                                                            }
                                                            16 => {
                                                                let e49 = {
                                                                    let l38 = *base.add(8).cast::<f32>();
                                                                    l38
                                                                };
                                                                WitNode::PrimFloat32(e49)
                                                            }
                                                            17 => {
                                                                let e49 = {
                                                                    let l39 = *base.add(8).cast::<f64>();
                                                                    l39
                                                                };
                                                                WitNode::PrimFloat64(e49)
                                                            }
                                                            18 => {
                                                                let e49 = {
                                                                    let l40 = *base.add(8).cast::<i32>();
                                                                    _rt::char_lift(l40 as u32)
                                                                };
                                                                WitNode::PrimChar(e49)
                                                            }
                                                            19 => {
                                                                let e49 = {
                                                                    let l41 = i32::from(*base.add(8).cast::<u8>());
                                                                    _rt::bool_lift(l41 as u8)
                                                                };
                                                                WitNode::PrimBool(e49)
                                                            }
                                                            20 => {
                                                                let e49 = {
                                                                    let l42 = *base.add(8).cast::<*mut u8>();
                                                                    let l43 = *base.add(12).cast::<usize>();
                                                                    let len44 = l43;
                                                                    let bytes44 = _rt::Vec::from_raw_parts(
                                                                        l42.cast(),
                                                                        len44,
                                                                        len44,
                                                                    );
                                                                    _rt::string_lift(bytes44)
                                                                };
                                                                WitNode::PrimString(e49)
                                                            }
                                                            n => {
                                                                debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                let e49 = {
                                                                    let l45 = *base.add(8).cast::<*mut u8>();
                                                                    let l46 = *base.add(12).cast::<usize>();
                                                                    let len47 = l46;
                                                                    let bytes47 = _rt::Vec::from_raw_parts(
                                                                        l45.cast(),
                                                                        len47,
                                                                        len47,
                                                                    );
                                                                    let l48 = *base.add(16).cast::<i64>();
                                                                    (
                                                                        Uri {
                                                                            value: _rt::string_lift(bytes47),
                                                                        },
                                                                        l48 as u64,
                                                                    )
                                                                };
                                                                WitNode::Handle(e49)
                                                            }
                                                        };
                                                        v49
                                                    };
                                                    result50.push(e50);
                                                }
                                                _rt::cabi_dealloc(base50, len50 * 24, 8);
                                                WitValue { nodes: result50 }
                                            };
                                            Ok(e)
                                        }
                                        1 => {
                                            let e = {
                                                let l51 = i32::from(*ptr0.add(8).cast::<u8>());
                                                let v64 = match l51 {
                                                    0 => {
                                                        let e64 = {
                                                            let l52 = *ptr0.add(12).cast::<*mut u8>();
                                                            let l53 = *ptr0.add(16).cast::<usize>();
                                                            let len54 = l53;
                                                            let bytes54 = _rt::Vec::from_raw_parts(
                                                                l52.cast(),
                                                                len54,
                                                                len54,
                                                            );
                                                            _rt::string_lift(bytes54)
                                                        };
                                                        RpcError::ProtocolError(e64)
                                                    }
                                                    1 => {
                                                        let e64 = {
                                                            let l55 = *ptr0.add(12).cast::<*mut u8>();
                                                            let l56 = *ptr0.add(16).cast::<usize>();
                                                            let len57 = l56;
                                                            let bytes57 = _rt::Vec::from_raw_parts(
                                                                l55.cast(),
                                                                len57,
                                                                len57,
                                                            );
                                                            _rt::string_lift(bytes57)
                                                        };
                                                        RpcError::Denied(e64)
                                                    }
                                                    2 => {
                                                        let e64 = {
                                                            let l58 = *ptr0.add(12).cast::<*mut u8>();
                                                            let l59 = *ptr0.add(16).cast::<usize>();
                                                            let len60 = l59;
                                                            let bytes60 = _rt::Vec::from_raw_parts(
                                                                l58.cast(),
                                                                len60,
                                                                len60,
                                                            );
                                                            _rt::string_lift(bytes60)
                                                        };
                                                        RpcError::NotFound(e64)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 3, "invalid enum discriminant");
                                                        let e64 = {
                                                            let l61 = *ptr0.add(12).cast::<*mut u8>();
                                                            let l62 = *ptr0.add(16).cast::<usize>();
                                                            let len63 = l62;
                                                            let bytes63 = _rt::Vec::from_raw_parts(
                                                                l61.cast(),
                                                                len63,
                                                                len63,
                                                            );
                                                            _rt::string_lift(bytes63)
                                                        };
                                                        RpcError::RemoteInternalError(e64)
                                                    }
                                                };
                                                v64
                                            };
                                            Err(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl CancellationToken {
                #[allow(unused_unsafe, clippy::all)]
                pub fn cancel(&self) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.1.3")]
                        extern "C" {
                            #[link_name = "[method]cancellation-token.cancel"]
                            fn wit_import(_: i32);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32);
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn extract_value(vnt: &ValueAndType) -> WitValue {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                    let ValueAndType { value: value0, typ: typ0 } = vnt;
                    let WitValue { nodes: nodes1 } = value0;
                    let vec11 = nodes1;
                    let len11 = vec11.len();
                    let layout11 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec11.len() * 24,
                        8,
                    );
                    let result11 = if layout11.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout11);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec11.into_iter().enumerate() {
                        let base = result11.add(i * 24);
                        {
                            match e {
                                WitNode::RecordValue(e) => {
                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                    let vec2 = e;
                                    let ptr2 = vec2.as_ptr().cast::<u8>();
                                    let len2 = vec2.len();
                                    *base.add(12).cast::<usize>() = len2;
                                    *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                }
                                WitNode::VariantValue(e) => {
                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                    let (t3_0, t3_1) = e;
                                    *base.add(8).cast::<i32>() = _rt::as_i32(t3_0);
                                    match t3_1 {
                                        Some(e) => {
                                            *base.add(12).cast::<u8>() = (1i32) as u8;
                                            *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                        }
                                        None => {
                                            *base.add(12).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                WitNode::EnumValue(e) => {
                                    *base.add(0).cast::<u8>() = (2i32) as u8;
                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                }
                                WitNode::FlagsValue(e) => {
                                    *base.add(0).cast::<u8>() = (3i32) as u8;
                                    let vec4 = e;
                                    let len4 = vec4.len();
                                    let layout4 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec4.len() * 1,
                                        1,
                                    );
                                    let result4 = if layout4.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout4).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout4);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec4.into_iter().enumerate() {
                                        let base = result4.add(i * 1);
                                        {
                                            *base.add(0).cast::<u8>() = (match e {
                                                true => 1,
                                                false => 0,
                                            }) as u8;
                                        }
                                    }
                                    *base.add(12).cast::<usize>() = len4;
                                    *base.add(8).cast::<*mut u8>() = result4;
                                    cleanup_list.extend_from_slice(&[(result4, layout4)]);
                                }
                                WitNode::TupleValue(e) => {
                                    *base.add(0).cast::<u8>() = (4i32) as u8;
                                    let vec5 = e;
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    *base.add(12).cast::<usize>() = len5;
                                    *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                }
                                WitNode::ListValue(e) => {
                                    *base.add(0).cast::<u8>() = (5i32) as u8;
                                    let vec6 = e;
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    *base.add(12).cast::<usize>() = len6;
                                    *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                }
                                WitNode::OptionValue(e) => {
                                    *base.add(0).cast::<u8>() = (6i32) as u8;
                                    match e {
                                        Some(e) => {
                                            *base.add(8).cast::<u8>() = (1i32) as u8;
                                            *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                        }
                                        None => {
                                            *base.add(8).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                WitNode::ResultValue(e) => {
                                    *base.add(0).cast::<u8>() = (7i32) as u8;
                                    match e {
                                        Ok(e) => {
                                            *base.add(8).cast::<u8>() = (0i32) as u8;
                                            match e {
                                                Some(e) => {
                                                    *base.add(12).cast::<u8>() = (1i32) as u8;
                                                    *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                }
                                                None => {
                                                    *base.add(12).cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                        Err(e) => {
                                            *base.add(8).cast::<u8>() = (1i32) as u8;
                                            match e {
                                                Some(e) => {
                                                    *base.add(12).cast::<u8>() = (1i32) as u8;
                                                    *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                }
                                                None => {
                                                    *base.add(12).cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                    };
                                }
                                WitNode::PrimU8(e) => {
                                    *base.add(0).cast::<u8>() = (8i32) as u8;
                                    *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                }
                                WitNode::PrimU16(e) => {
                                    *base.add(0).cast::<u8>() = (9i32) as u8;
                                    *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                }
                                WitNode::PrimU32(e) => {
                                    *base.add(0).cast::<u8>() = (10i32) as u8;
                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                }
                                WitNode::PrimU64(e) => {
                                    *base.add(0).cast::<u8>() = (11i32) as u8;
                                    *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                }
                                WitNode::PrimS8(e) => {
                                    *base.add(0).cast::<u8>() = (12i32) as u8;
                                    *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                }
                                WitNode::PrimS16(e) => {
                                    *base.add(0).cast::<u8>() = (13i32) as u8;
                                    *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                }
                                WitNode::PrimS32(e) => {
                                    *base.add(0).cast::<u8>() = (14i32) as u8;
                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                }
                                WitNode::PrimS64(e) => {
                                    *base.add(0).cast::<u8>() = (15i32) as u8;
                                    *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                }
                                WitNode::PrimFloat32(e) => {
                                    *base.add(0).cast::<u8>() = (16i32) as u8;
                                    *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                }
                                WitNode::PrimFloat64(e) => {
                                    *base.add(0).cast::<u8>() = (17i32) as u8;
                                    *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                }
                                WitNode::PrimChar(e) => {
                                    *base.add(0).cast::<u8>() = (18i32) as u8;
                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                }
                                WitNode::PrimBool(e) => {
                                    *base.add(0).cast::<u8>() = (19i32) as u8;
                                    *base.add(8).cast::<u8>() = (match e {
                                        true => 1,
                                        false => 0,
                                    }) as u8;
                                }
                                WitNode::PrimString(e) => {
                                    *base.add(0).cast::<u8>() = (20i32) as u8;
                                    let vec7 = e;
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    *base.add(12).cast::<usize>() = len7;
                                    *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                }
                                WitNode::Handle(e) => {
                                    *base.add(0).cast::<u8>() = (21i32) as u8;
                                    let (t8_0, t8_1) = e;
                                    let Uri { value: value9 } = t8_0;
                                    let vec10 = value9;
                                    let ptr10 = vec10.as_ptr().cast::<u8>();
                                    let len10 = vec10.len();
                                    *base.add(12).cast::<usize>() = len10;
                                    *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                    *base.add(16).cast::<i64>() = _rt::as_i64(t8_1);
                                }
                            }
                        }
                    }
                    let WitType { nodes: nodes12 } = typ0;
                    let vec26 = nodes12;
                    let len26 = vec26.len();
                    let layout26 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec26.len() * 24,
                        8,
                    );
                    let result26 = if layout26.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout26).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout26);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec26.into_iter().enumerate() {
                        let base = result26.add(i * 24);
                        {
                            match e {
                                WitTypeNode::RecordType(e) => {
                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                    let vec15 = e;
                                    let len15 = vec15.len();
                                    let layout15 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec15.len() * 12,
                                        4,
                                    );
                                    let result15 = if layout15.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout15).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout15);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec15.into_iter().enumerate() {
                                        let base = result15.add(i * 12);
                                        {
                                            let (t13_0, t13_1) = e;
                                            let vec14 = t13_0;
                                            let ptr14 = vec14.as_ptr().cast::<u8>();
                                            let len14 = vec14.len();
                                            *base.add(4).cast::<usize>() = len14;
                                            *base.add(0).cast::<*mut u8>() = ptr14.cast_mut();
                                            *base.add(8).cast::<i32>() = _rt::as_i32(t13_1);
                                        }
                                    }
                                    *base.add(12).cast::<usize>() = len15;
                                    *base.add(8).cast::<*mut u8>() = result15;
                                    cleanup_list.extend_from_slice(&[(result15, layout15)]);
                                }
                                WitTypeNode::VariantType(e) => {
                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                    let vec18 = e;
                                    let len18 = vec18.len();
                                    let layout18 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec18.len() * 16,
                                        4,
                                    );
                                    let result18 = if layout18.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout18).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout18);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec18.into_iter().enumerate() {
                                        let base = result18.add(i * 16);
                                        {
                                            let (t16_0, t16_1) = e;
                                            let vec17 = t16_0;
                                            let ptr17 = vec17.as_ptr().cast::<u8>();
                                            let len17 = vec17.len();
                                            *base.add(4).cast::<usize>() = len17;
                                            *base.add(0).cast::<*mut u8>() = ptr17.cast_mut();
                                            match t16_1 {
                                                Some(e) => {
                                                    *base.add(8).cast::<u8>() = (1i32) as u8;
                                                    *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                                }
                                                None => {
                                                    *base.add(8).cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                    }
                                    *base.add(12).cast::<usize>() = len18;
                                    *base.add(8).cast::<*mut u8>() = result18;
                                    cleanup_list.extend_from_slice(&[(result18, layout18)]);
                                }
                                WitTypeNode::EnumType(e) => {
                                    *base.add(0).cast::<u8>() = (2i32) as u8;
                                    let vec20 = e;
                                    let len20 = vec20.len();
                                    let layout20 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec20.len() * 8,
                                        4,
                                    );
                                    let result20 = if layout20.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout20).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout20);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec20.into_iter().enumerate() {
                                        let base = result20.add(i * 8);
                                        {
                                            let vec19 = e;
                                            let ptr19 = vec19.as_ptr().cast::<u8>();
                                            let len19 = vec19.len();
                                            *base.add(4).cast::<usize>() = len19;
                                            *base.add(0).cast::<*mut u8>() = ptr19.cast_mut();
                                        }
                                    }
                                    *base.add(12).cast::<usize>() = len20;
                                    *base.add(8).cast::<*mut u8>() = result20;
                                    cleanup_list.extend_from_slice(&[(result20, layout20)]);
                                }
                                WitTypeNode::FlagsType(e) => {
                                    *base.add(0).cast::<u8>() = (3i32) as u8;
                                    let vec22 = e;
                                    let len22 = vec22.len();
                                    let layout22 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec22.len() * 8,
                                        4,
                                    );
                                    let result22 = if layout22.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout22).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout22);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec22.into_iter().enumerate() {
                                        let base = result22.add(i * 8);
                                        {
                                            let vec21 = e;
                                            let ptr21 = vec21.as_ptr().cast::<u8>();
                                            let len21 = vec21.len();
                                            *base.add(4).cast::<usize>() = len21;
                                            *base.add(0).cast::<*mut u8>() = ptr21.cast_mut();
                                        }
                                    }
                                    *base.add(12).cast::<usize>() = len22;
                                    *base.add(8).cast::<*mut u8>() = result22;
                                    cleanup_list.extend_from_slice(&[(result22, layout22)]);
                                }
                                WitTypeNode::TupleType(e) => {
                                    *base.add(0).cast::<u8>() = (4i32) as u8;
                                    let vec23 = e;
                                    let ptr23 = vec23.as_ptr().cast::<u8>();
                                    let len23 = vec23.len();
                                    *base.add(12).cast::<usize>() = len23;
                                    *base.add(8).cast::<*mut u8>() = ptr23.cast_mut();
                                }
                                WitTypeNode::ListType(e) => {
                                    *base.add(0).cast::<u8>() = (5i32) as u8;
                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                }
                                WitTypeNode::OptionType(e) => {
                                    *base.add(0).cast::<u8>() = (6i32) as u8;
                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                }
                                WitTypeNode::ResultType(e) => {
                                    *base.add(0).cast::<u8>() = (7i32) as u8;
                                    let (t24_0, t24_1) = e;
                                    match t24_0 {
                                        Some(e) => {
                                            *base.add(8).cast::<u8>() = (1i32) as u8;
                                            *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                        }
                                        None => {
                                            *base.add(8).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match t24_1 {
                                        Some(e) => {
                                            *base.add(16).cast::<u8>() = (1i32) as u8;
                                            *base.add(20).cast::<i32>() = _rt::as_i32(e);
                                        }
                                        None => {
                                            *base.add(16).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                WitTypeNode::PrimU8Type => {
                                    *base.add(0).cast::<u8>() = (8i32) as u8;
                                }
                                WitTypeNode::PrimU16Type => {
                                    *base.add(0).cast::<u8>() = (9i32) as u8;
                                }
                                WitTypeNode::PrimU32Type => {
                                    *base.add(0).cast::<u8>() = (10i32) as u8;
                                }
                                WitTypeNode::PrimU64Type => {
                                    *base.add(0).cast::<u8>() = (11i32) as u8;
                                }
                                WitTypeNode::PrimS8Type => {
                                    *base.add(0).cast::<u8>() = (12i32) as u8;
                                }
                                WitTypeNode::PrimS16Type => {
                                    *base.add(0).cast::<u8>() = (13i32) as u8;
                                }
                                WitTypeNode::PrimS32Type => {
                                    *base.add(0).cast::<u8>() = (14i32) as u8;
                                }
                                WitTypeNode::PrimS64Type => {
                                    *base.add(0).cast::<u8>() = (15i32) as u8;
                                }
                                WitTypeNode::PrimF32Type => {
                                    *base.add(0).cast::<u8>() = (16i32) as u8;
                                }
                                WitTypeNode::PrimF64Type => {
                                    *base.add(0).cast::<u8>() = (17i32) as u8;
                                }
                                WitTypeNode::PrimCharType => {
                                    *base.add(0).cast::<u8>() = (18i32) as u8;
                                }
                                WitTypeNode::PrimBoolType => {
                                    *base.add(0).cast::<u8>() = (19i32) as u8;
                                }
                                WitTypeNode::PrimStringType => {
                                    *base.add(0).cast::<u8>() = (20i32) as u8;
                                }
                                WitTypeNode::HandleType(e) => {
                                    *base.add(0).cast::<u8>() = (21i32) as u8;
                                    let (t25_0, t25_1) = e;
                                    *base.add(8).cast::<i64>() = _rt::as_i64(t25_0);
                                    *base.add(16).cast::<u8>() = (t25_1.clone() as i32) as u8;
                                }
                            }
                        }
                    }
                    let ptr27 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:rpc/types@0.1.3")]
                    extern "C" {
                        #[link_name = "extract-value"]
                        fn wit_import(
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    wit_import(result11, len11, result26, len26, ptr27);
                    let l28 = *ptr27.add(0).cast::<*mut u8>();
                    let l29 = *ptr27.add(4).cast::<usize>();
                    let base75 = l28;
                    let len75 = l29;
                    let mut result75 = _rt::Vec::with_capacity(len75);
                    for i in 0..len75 {
                        let base = base75.add(i * 24);
                        let e75 = {
                            let l30 = i32::from(*base.add(0).cast::<u8>());
                            let v74 = match l30 {
                                0 => {
                                    let e74 = {
                                        let l31 = *base.add(8).cast::<*mut u8>();
                                        let l32 = *base.add(12).cast::<usize>();
                                        let len33 = l32;
                                        _rt::Vec::from_raw_parts(l31.cast(), len33, len33)
                                    };
                                    WitNode::RecordValue(e74)
                                }
                                1 => {
                                    let e74 = {
                                        let l34 = *base.add(8).cast::<i32>();
                                        let l35 = i32::from(*base.add(12).cast::<u8>());
                                        (
                                            l34 as u32,
                                            match l35 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l36 = *base.add(16).cast::<i32>();
                                                        l36
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                        )
                                    };
                                    WitNode::VariantValue(e74)
                                }
                                2 => {
                                    let e74 = {
                                        let l37 = *base.add(8).cast::<i32>();
                                        l37 as u32
                                    };
                                    WitNode::EnumValue(e74)
                                }
                                3 => {
                                    let e74 = {
                                        let l38 = *base.add(8).cast::<*mut u8>();
                                        let l39 = *base.add(12).cast::<usize>();
                                        let base41 = l38;
                                        let len41 = l39;
                                        let mut result41 = _rt::Vec::with_capacity(len41);
                                        for i in 0..len41 {
                                            let base = base41.add(i * 1);
                                            let e41 = {
                                                let l40 = i32::from(*base.add(0).cast::<u8>());
                                                _rt::bool_lift(l40 as u8)
                                            };
                                            result41.push(e41);
                                        }
                                        _rt::cabi_dealloc(base41, len41 * 1, 1);
                                        result41
                                    };
                                    WitNode::FlagsValue(e74)
                                }
                                4 => {
                                    let e74 = {
                                        let l42 = *base.add(8).cast::<*mut u8>();
                                        let l43 = *base.add(12).cast::<usize>();
                                        let len44 = l43;
                                        _rt::Vec::from_raw_parts(l42.cast(), len44, len44)
                                    };
                                    WitNode::TupleValue(e74)
                                }
                                5 => {
                                    let e74 = {
                                        let l45 = *base.add(8).cast::<*mut u8>();
                                        let l46 = *base.add(12).cast::<usize>();
                                        let len47 = l46;
                                        _rt::Vec::from_raw_parts(l45.cast(), len47, len47)
                                    };
                                    WitNode::ListValue(e74)
                                }
                                6 => {
                                    let e74 = {
                                        let l48 = i32::from(*base.add(8).cast::<u8>());
                                        match l48 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l49 = *base.add(12).cast::<i32>();
                                                    l49
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        }
                                    };
                                    WitNode::OptionValue(e74)
                                }
                                7 => {
                                    let e74 = {
                                        let l50 = i32::from(*base.add(8).cast::<u8>());
                                        match l50 {
                                            0 => {
                                                let e = {
                                                    let l51 = i32::from(*base.add(12).cast::<u8>());
                                                    match l51 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l52 = *base.add(16).cast::<i32>();
                                                                l52
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    }
                                                };
                                                Ok(e)
                                            }
                                            1 => {
                                                let e = {
                                                    let l53 = i32::from(*base.add(12).cast::<u8>());
                                                    match l53 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l54 = *base.add(16).cast::<i32>();
                                                                l54
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    }
                                                };
                                                Err(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        }
                                    };
                                    WitNode::ResultValue(e74)
                                }
                                8 => {
                                    let e74 = {
                                        let l55 = i32::from(*base.add(8).cast::<u8>());
                                        l55 as u8
                                    };
                                    WitNode::PrimU8(e74)
                                }
                                9 => {
                                    let e74 = {
                                        let l56 = i32::from(*base.add(8).cast::<u16>());
                                        l56 as u16
                                    };
                                    WitNode::PrimU16(e74)
                                }
                                10 => {
                                    let e74 = {
                                        let l57 = *base.add(8).cast::<i32>();
                                        l57 as u32
                                    };
                                    WitNode::PrimU32(e74)
                                }
                                11 => {
                                    let e74 = {
                                        let l58 = *base.add(8).cast::<i64>();
                                        l58 as u64
                                    };
                                    WitNode::PrimU64(e74)
                                }
                                12 => {
                                    let e74 = {
                                        let l59 = i32::from(*base.add(8).cast::<i8>());
                                        l59 as i8
                                    };
                                    WitNode::PrimS8(e74)
                                }
                                13 => {
                                    let e74 = {
                                        let l60 = i32::from(*base.add(8).cast::<i16>());
                                        l60 as i16
                                    };
                                    WitNode::PrimS16(e74)
                                }
                                14 => {
                                    let e74 = {
                                        let l61 = *base.add(8).cast::<i32>();
                                        l61
                                    };
                                    WitNode::PrimS32(e74)
                                }
                                15 => {
                                    let e74 = {
                                        let l62 = *base.add(8).cast::<i64>();
                                        l62
                                    };
                                    WitNode::PrimS64(e74)
                                }
                                16 => {
                                    let e74 = {
                                        let l63 = *base.add(8).cast::<f32>();
                                        l63
                                    };
                                    WitNode::PrimFloat32(e74)
                                }
                                17 => {
                                    let e74 = {
                                        let l64 = *base.add(8).cast::<f64>();
                                        l64
                                    };
                                    WitNode::PrimFloat64(e74)
                                }
                                18 => {
                                    let e74 = {
                                        let l65 = *base.add(8).cast::<i32>();
                                        _rt::char_lift(l65 as u32)
                                    };
                                    WitNode::PrimChar(e74)
                                }
                                19 => {
                                    let e74 = {
                                        let l66 = i32::from(*base.add(8).cast::<u8>());
                                        _rt::bool_lift(l66 as u8)
                                    };
                                    WitNode::PrimBool(e74)
                                }
                                20 => {
                                    let e74 = {
                                        let l67 = *base.add(8).cast::<*mut u8>();
                                        let l68 = *base.add(12).cast::<usize>();
                                        let len69 = l68;
                                        let bytes69 = _rt::Vec::from_raw_parts(
                                            l67.cast(),
                                            len69,
                                            len69,
                                        );
                                        _rt::string_lift(bytes69)
                                    };
                                    WitNode::PrimString(e74)
                                }
                                n => {
                                    debug_assert_eq!(n, 21, "invalid enum discriminant");
                                    let e74 = {
                                        let l70 = *base.add(8).cast::<*mut u8>();
                                        let l71 = *base.add(12).cast::<usize>();
                                        let len72 = l71;
                                        let bytes72 = _rt::Vec::from_raw_parts(
                                            l70.cast(),
                                            len72,
                                            len72,
                                        );
                                        let l73 = *base.add(16).cast::<i64>();
                                        (
                                            Uri {
                                                value: _rt::string_lift(bytes72),
                                            },
                                            l73 as u64,
                                        )
                                    };
                                    WitNode::Handle(e74)
                                }
                            };
                            v74
                        };
                        result75.push(e75);
                    }
                    _rt::cabi_dealloc(base75, len75 * 24, 8);
                    if layout11.size() != 0 {
                        _rt::alloc::dealloc(result11.cast(), layout11);
                    }
                    if layout26.size() != 0 {
                        _rt::alloc::dealloc(result26.cast(), layout26);
                    }
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                    WitValue { nodes: result75 }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn extract_type(vnt: &ValueAndType) -> WitType {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                    let ValueAndType { value: value0, typ: typ0 } = vnt;
                    let WitValue { nodes: nodes1 } = value0;
                    let vec11 = nodes1;
                    let len11 = vec11.len();
                    let layout11 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec11.len() * 24,
                        8,
                    );
                    let result11 = if layout11.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout11);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec11.into_iter().enumerate() {
                        let base = result11.add(i * 24);
                        {
                            match e {
                                WitNode::RecordValue(e) => {
                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                    let vec2 = e;
                                    let ptr2 = vec2.as_ptr().cast::<u8>();
                                    let len2 = vec2.len();
                                    *base.add(12).cast::<usize>() = len2;
                                    *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                }
                                WitNode::VariantValue(e) => {
                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                    let (t3_0, t3_1) = e;
                                    *base.add(8).cast::<i32>() = _rt::as_i32(t3_0);
                                    match t3_1 {
                                        Some(e) => {
                                            *base.add(12).cast::<u8>() = (1i32) as u8;
                                            *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                        }
                                        None => {
                                            *base.add(12).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                WitNode::EnumValue(e) => {
                                    *base.add(0).cast::<u8>() = (2i32) as u8;
                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                }
                                WitNode::FlagsValue(e) => {
                                    *base.add(0).cast::<u8>() = (3i32) as u8;
                                    let vec4 = e;
                                    let len4 = vec4.len();
                                    let layout4 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec4.len() * 1,
                                        1,
                                    );
                                    let result4 = if layout4.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout4).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout4);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec4.into_iter().enumerate() {
                                        let base = result4.add(i * 1);
                                        {
                                            *base.add(0).cast::<u8>() = (match e {
                                                true => 1,
                                                false => 0,
                                            }) as u8;
                                        }
                                    }
                                    *base.add(12).cast::<usize>() = len4;
                                    *base.add(8).cast::<*mut u8>() = result4;
                                    cleanup_list.extend_from_slice(&[(result4, layout4)]);
                                }
                                WitNode::TupleValue(e) => {
                                    *base.add(0).cast::<u8>() = (4i32) as u8;
                                    let vec5 = e;
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    *base.add(12).cast::<usize>() = len5;
                                    *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                }
                                WitNode::ListValue(e) => {
                                    *base.add(0).cast::<u8>() = (5i32) as u8;
                                    let vec6 = e;
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    *base.add(12).cast::<usize>() = len6;
                                    *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                }
                                WitNode::OptionValue(e) => {
                                    *base.add(0).cast::<u8>() = (6i32) as u8;
                                    match e {
                                        Some(e) => {
                                            *base.add(8).cast::<u8>() = (1i32) as u8;
                                            *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                        }
                                        None => {
                                            *base.add(8).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                WitNode::ResultValue(e) => {
                                    *base.add(0).cast::<u8>() = (7i32) as u8;
                                    match e {
                                        Ok(e) => {
                                            *base.add(8).cast::<u8>() = (0i32) as u8;
                                            match e {
                                                Some(e) => {
                                                    *base.add(12).cast::<u8>() = (1i32) as u8;
                                                    *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                }
                                                None => {
                                                    *base.add(12).cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                        Err(e) => {
                                            *base.add(8).cast::<u8>() = (1i32) as u8;
                                            match e {
                                                Some(e) => {
                                                    *base.add(12).cast::<u8>() = (1i32) as u8;
                                                    *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                }
                                                None => {
                                                    *base.add(12).cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                    };
                                }
                                WitNode::PrimU8(e) => {
                                    *base.add(0).cast::<u8>() = (8i32) as u8;
                                    *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                }
                                WitNode::PrimU16(e) => {
                                    *base.add(0).cast::<u8>() = (9i32) as u8;
                                    *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                }
                                WitNode::PrimU32(e) => {
                                    *base.add(0).cast::<u8>() = (10i32) as u8;
                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                }
                                WitNode::PrimU64(e) => {
                                    *base.add(0).cast::<u8>() = (11i32) as u8;
                                    *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                }
                                WitNode::PrimS8(e) => {
                                    *base.add(0).cast::<u8>() = (12i32) as u8;
                                    *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                }
                                WitNode::PrimS16(e) => {
                                    *base.add(0).cast::<u8>() = (13i32) as u8;
                                    *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                }
                                WitNode::PrimS32(e) => {
                                    *base.add(0).cast::<u8>() = (14i32) as u8;
                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                }
                                WitNode::PrimS64(e) => {
                                    *base.add(0).cast::<u8>() = (15i32) as u8;
                                    *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                }
                                WitNode::PrimFloat32(e) => {
                                    *base.add(0).cast::<u8>() = (16i32) as u8;
                                    *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                }
                                WitNode::PrimFloat64(e) => {
                                    *base.add(0).cast::<u8>() = (17i32) as u8;
                                    *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                }
                                WitNode::PrimChar(e) => {
                                    *base.add(0).cast::<u8>() = (18i32) as u8;
                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                }
                                WitNode::PrimBool(e) => {
                                    *base.add(0).cast::<u8>() = (19i32) as u8;
                                    *base.add(8).cast::<u8>() = (match e {
                                        true => 1,
                                        false => 0,
                                    }) as u8;
                                }
                                WitNode::PrimString(e) => {
                                    *base.add(0).cast::<u8>() = (20i32) as u8;
                                    let vec7 = e;
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    *base.add(12).cast::<usize>() = len7;
                                    *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                }
                                WitNode::Handle(e) => {
                                    *base.add(0).cast::<u8>() = (21i32) as u8;
                                    let (t8_0, t8_1) = e;
                                    let Uri { value: value9 } = t8_0;
                                    let vec10 = value9;
                                    let ptr10 = vec10.as_ptr().cast::<u8>();
                                    let len10 = vec10.len();
                                    *base.add(12).cast::<usize>() = len10;
                                    *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                    *base.add(16).cast::<i64>() = _rt::as_i64(t8_1);
                                }
                            }
                        }
                    }
                    let WitType { nodes: nodes12 } = typ0;
                    let vec26 = nodes12;
                    let len26 = vec26.len();
                    let layout26 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec26.len() * 24,
                        8,
                    );
                    let result26 = if layout26.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout26).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout26);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec26.into_iter().enumerate() {
                        let base = result26.add(i * 24);
                        {
                            match e {
                                WitTypeNode::RecordType(e) => {
                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                    let vec15 = e;
                                    let len15 = vec15.len();
                                    let layout15 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec15.len() * 12,
                                        4,
                                    );
                                    let result15 = if layout15.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout15).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout15);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec15.into_iter().enumerate() {
                                        let base = result15.add(i * 12);
                                        {
                                            let (t13_0, t13_1) = e;
                                            let vec14 = t13_0;
                                            let ptr14 = vec14.as_ptr().cast::<u8>();
                                            let len14 = vec14.len();
                                            *base.add(4).cast::<usize>() = len14;
                                            *base.add(0).cast::<*mut u8>() = ptr14.cast_mut();
                                            *base.add(8).cast::<i32>() = _rt::as_i32(t13_1);
                                        }
                                    }
                                    *base.add(12).cast::<usize>() = len15;
                                    *base.add(8).cast::<*mut u8>() = result15;
                                    cleanup_list.extend_from_slice(&[(result15, layout15)]);
                                }
                                WitTypeNode::VariantType(e) => {
                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                    let vec18 = e;
                                    let len18 = vec18.len();
                                    let layout18 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec18.len() * 16,
                                        4,
                                    );
                                    let result18 = if layout18.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout18).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout18);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec18.into_iter().enumerate() {
                                        let base = result18.add(i * 16);
                                        {
                                            let (t16_0, t16_1) = e;
                                            let vec17 = t16_0;
                                            let ptr17 = vec17.as_ptr().cast::<u8>();
                                            let len17 = vec17.len();
                                            *base.add(4).cast::<usize>() = len17;
                                            *base.add(0).cast::<*mut u8>() = ptr17.cast_mut();
                                            match t16_1 {
                                                Some(e) => {
                                                    *base.add(8).cast::<u8>() = (1i32) as u8;
                                                    *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                                }
                                                None => {
                                                    *base.add(8).cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                    }
                                    *base.add(12).cast::<usize>() = len18;
                                    *base.add(8).cast::<*mut u8>() = result18;
                                    cleanup_list.extend_from_slice(&[(result18, layout18)]);
                                }
                                WitTypeNode::EnumType(e) => {
                                    *base.add(0).cast::<u8>() = (2i32) as u8;
                                    let vec20 = e;
                                    let len20 = vec20.len();
                                    let layout20 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec20.len() * 8,
                                        4,
                                    );
                                    let result20 = if layout20.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout20).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout20);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec20.into_iter().enumerate() {
                                        let base = result20.add(i * 8);
                                        {
                                            let vec19 = e;
                                            let ptr19 = vec19.as_ptr().cast::<u8>();
                                            let len19 = vec19.len();
                                            *base.add(4).cast::<usize>() = len19;
                                            *base.add(0).cast::<*mut u8>() = ptr19.cast_mut();
                                        }
                                    }
                                    *base.add(12).cast::<usize>() = len20;
                                    *base.add(8).cast::<*mut u8>() = result20;
                                    cleanup_list.extend_from_slice(&[(result20, layout20)]);
                                }
                                WitTypeNode::FlagsType(e) => {
                                    *base.add(0).cast::<u8>() = (3i32) as u8;
                                    let vec22 = e;
                                    let len22 = vec22.len();
                                    let layout22 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec22.len() * 8,
                                        4,
                                    );
                                    let result22 = if layout22.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout22).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout22);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec22.into_iter().enumerate() {
                                        let base = result22.add(i * 8);
                                        {
                                            let vec21 = e;
                                            let ptr21 = vec21.as_ptr().cast::<u8>();
                                            let len21 = vec21.len();
                                            *base.add(4).cast::<usize>() = len21;
                                            *base.add(0).cast::<*mut u8>() = ptr21.cast_mut();
                                        }
                                    }
                                    *base.add(12).cast::<usize>() = len22;
                                    *base.add(8).cast::<*mut u8>() = result22;
                                    cleanup_list.extend_from_slice(&[(result22, layout22)]);
                                }
                                WitTypeNode::TupleType(e) => {
                                    *base.add(0).cast::<u8>() = (4i32) as u8;
                                    let vec23 = e;
                                    let ptr23 = vec23.as_ptr().cast::<u8>();
                                    let len23 = vec23.len();
                                    *base.add(12).cast::<usize>() = len23;
                                    *base.add(8).cast::<*mut u8>() = ptr23.cast_mut();
                                }
                                WitTypeNode::ListType(e) => {
                                    *base.add(0).cast::<u8>() = (5i32) as u8;
                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                }
                                WitTypeNode::OptionType(e) => {
                                    *base.add(0).cast::<u8>() = (6i32) as u8;
                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                }
                                WitTypeNode::ResultType(e) => {
                                    *base.add(0).cast::<u8>() = (7i32) as u8;
                                    let (t24_0, t24_1) = e;
                                    match t24_0 {
                                        Some(e) => {
                                            *base.add(8).cast::<u8>() = (1i32) as u8;
                                            *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                        }
                                        None => {
                                            *base.add(8).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match t24_1 {
                                        Some(e) => {
                                            *base.add(16).cast::<u8>() = (1i32) as u8;
                                            *base.add(20).cast::<i32>() = _rt::as_i32(e);
                                        }
                                        None => {
                                            *base.add(16).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                WitTypeNode::PrimU8Type => {
                                    *base.add(0).cast::<u8>() = (8i32) as u8;
                                }
                                WitTypeNode::PrimU16Type => {
                                    *base.add(0).cast::<u8>() = (9i32) as u8;
                                }
                                WitTypeNode::PrimU32Type => {
                                    *base.add(0).cast::<u8>() = (10i32) as u8;
                                }
                                WitTypeNode::PrimU64Type => {
                                    *base.add(0).cast::<u8>() = (11i32) as u8;
                                }
                                WitTypeNode::PrimS8Type => {
                                    *base.add(0).cast::<u8>() = (12i32) as u8;
                                }
                                WitTypeNode::PrimS16Type => {
                                    *base.add(0).cast::<u8>() = (13i32) as u8;
                                }
                                WitTypeNode::PrimS32Type => {
                                    *base.add(0).cast::<u8>() = (14i32) as u8;
                                }
                                WitTypeNode::PrimS64Type => {
                                    *base.add(0).cast::<u8>() = (15i32) as u8;
                                }
                                WitTypeNode::PrimF32Type => {
                                    *base.add(0).cast::<u8>() = (16i32) as u8;
                                }
                                WitTypeNode::PrimF64Type => {
                                    *base.add(0).cast::<u8>() = (17i32) as u8;
                                }
                                WitTypeNode::PrimCharType => {
                                    *base.add(0).cast::<u8>() = (18i32) as u8;
                                }
                                WitTypeNode::PrimBoolType => {
                                    *base.add(0).cast::<u8>() = (19i32) as u8;
                                }
                                WitTypeNode::PrimStringType => {
                                    *base.add(0).cast::<u8>() = (20i32) as u8;
                                }
                                WitTypeNode::HandleType(e) => {
                                    *base.add(0).cast::<u8>() = (21i32) as u8;
                                    let (t25_0, t25_1) = e;
                                    *base.add(8).cast::<i64>() = _rt::as_i64(t25_0);
                                    *base.add(16).cast::<u8>() = (t25_1.clone() as i32) as u8;
                                }
                            }
                        }
                    }
                    let ptr27 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:rpc/types@0.1.3")]
                    extern "C" {
                        #[link_name = "extract-type"]
                        fn wit_import(
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    wit_import(result11, len11, result26, len26, ptr27);
                    let l28 = *ptr27.add(0).cast::<*mut u8>();
                    let l29 = *ptr27.add(4).cast::<usize>();
                    let base70 = l28;
                    let len70 = l29;
                    let mut result70 = _rt::Vec::with_capacity(len70);
                    for i in 0..len70 {
                        let base = base70.add(i * 24);
                        let e70 = {
                            let l30 = i32::from(*base.add(0).cast::<u8>());
                            let v69 = match l30 {
                                0 => {
                                    let e69 = {
                                        let l31 = *base.add(8).cast::<*mut u8>();
                                        let l32 = *base.add(12).cast::<usize>();
                                        let base37 = l31;
                                        let len37 = l32;
                                        let mut result37 = _rt::Vec::with_capacity(len37);
                                        for i in 0..len37 {
                                            let base = base37.add(i * 12);
                                            let e37 = {
                                                let l33 = *base.add(0).cast::<*mut u8>();
                                                let l34 = *base.add(4).cast::<usize>();
                                                let len35 = l34;
                                                let bytes35 = _rt::Vec::from_raw_parts(
                                                    l33.cast(),
                                                    len35,
                                                    len35,
                                                );
                                                let l36 = *base.add(8).cast::<i32>();
                                                (_rt::string_lift(bytes35), l36)
                                            };
                                            result37.push(e37);
                                        }
                                        _rt::cabi_dealloc(base37, len37 * 12, 4);
                                        result37
                                    };
                                    WitTypeNode::RecordType(e69)
                                }
                                1 => {
                                    let e69 = {
                                        let l38 = *base.add(8).cast::<*mut u8>();
                                        let l39 = *base.add(12).cast::<usize>();
                                        let base45 = l38;
                                        let len45 = l39;
                                        let mut result45 = _rt::Vec::with_capacity(len45);
                                        for i in 0..len45 {
                                            let base = base45.add(i * 16);
                                            let e45 = {
                                                let l40 = *base.add(0).cast::<*mut u8>();
                                                let l41 = *base.add(4).cast::<usize>();
                                                let len42 = l41;
                                                let bytes42 = _rt::Vec::from_raw_parts(
                                                    l40.cast(),
                                                    len42,
                                                    len42,
                                                );
                                                let l43 = i32::from(*base.add(8).cast::<u8>());
                                                (
                                                    _rt::string_lift(bytes42),
                                                    match l43 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l44 = *base.add(12).cast::<i32>();
                                                                l44
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                )
                                            };
                                            result45.push(e45);
                                        }
                                        _rt::cabi_dealloc(base45, len45 * 16, 4);
                                        result45
                                    };
                                    WitTypeNode::VariantType(e69)
                                }
                                2 => {
                                    let e69 = {
                                        let l46 = *base.add(8).cast::<*mut u8>();
                                        let l47 = *base.add(12).cast::<usize>();
                                        let base51 = l46;
                                        let len51 = l47;
                                        let mut result51 = _rt::Vec::with_capacity(len51);
                                        for i in 0..len51 {
                                            let base = base51.add(i * 8);
                                            let e51 = {
                                                let l48 = *base.add(0).cast::<*mut u8>();
                                                let l49 = *base.add(4).cast::<usize>();
                                                let len50 = l49;
                                                let bytes50 = _rt::Vec::from_raw_parts(
                                                    l48.cast(),
                                                    len50,
                                                    len50,
                                                );
                                                _rt::string_lift(bytes50)
                                            };
                                            result51.push(e51);
                                        }
                                        _rt::cabi_dealloc(base51, len51 * 8, 4);
                                        result51
                                    };
                                    WitTypeNode::EnumType(e69)
                                }
                                3 => {
                                    let e69 = {
                                        let l52 = *base.add(8).cast::<*mut u8>();
                                        let l53 = *base.add(12).cast::<usize>();
                                        let base57 = l52;
                                        let len57 = l53;
                                        let mut result57 = _rt::Vec::with_capacity(len57);
                                        for i in 0..len57 {
                                            let base = base57.add(i * 8);
                                            let e57 = {
                                                let l54 = *base.add(0).cast::<*mut u8>();
                                                let l55 = *base.add(4).cast::<usize>();
                                                let len56 = l55;
                                                let bytes56 = _rt::Vec::from_raw_parts(
                                                    l54.cast(),
                                                    len56,
                                                    len56,
                                                );
                                                _rt::string_lift(bytes56)
                                            };
                                            result57.push(e57);
                                        }
                                        _rt::cabi_dealloc(base57, len57 * 8, 4);
                                        result57
                                    };
                                    WitTypeNode::FlagsType(e69)
                                }
                                4 => {
                                    let e69 = {
                                        let l58 = *base.add(8).cast::<*mut u8>();
                                        let l59 = *base.add(12).cast::<usize>();
                                        let len60 = l59;
                                        _rt::Vec::from_raw_parts(l58.cast(), len60, len60)
                                    };
                                    WitTypeNode::TupleType(e69)
                                }
                                5 => {
                                    let e69 = {
                                        let l61 = *base.add(8).cast::<i32>();
                                        l61
                                    };
                                    WitTypeNode::ListType(e69)
                                }
                                6 => {
                                    let e69 = {
                                        let l62 = *base.add(8).cast::<i32>();
                                        l62
                                    };
                                    WitTypeNode::OptionType(e69)
                                }
                                7 => {
                                    let e69 = {
                                        let l63 = i32::from(*base.add(8).cast::<u8>());
                                        let l65 = i32::from(*base.add(16).cast::<u8>());
                                        (
                                            match l63 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l64 = *base.add(12).cast::<i32>();
                                                        l64
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            match l65 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l66 = *base.add(20).cast::<i32>();
                                                        l66
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                        )
                                    };
                                    WitTypeNode::ResultType(e69)
                                }
                                8 => WitTypeNode::PrimU8Type,
                                9 => WitTypeNode::PrimU16Type,
                                10 => WitTypeNode::PrimU32Type,
                                11 => WitTypeNode::PrimU64Type,
                                12 => WitTypeNode::PrimS8Type,
                                13 => WitTypeNode::PrimS16Type,
                                14 => WitTypeNode::PrimS32Type,
                                15 => WitTypeNode::PrimS64Type,
                                16 => WitTypeNode::PrimF32Type,
                                17 => WitTypeNode::PrimF64Type,
                                18 => WitTypeNode::PrimCharType,
                                19 => WitTypeNode::PrimBoolType,
                                20 => WitTypeNode::PrimStringType,
                                n => {
                                    debug_assert_eq!(n, 21, "invalid enum discriminant");
                                    let e69 = {
                                        let l67 = *base.add(8).cast::<i64>();
                                        let l68 = i32::from(*base.add(16).cast::<u8>());
                                        (l67 as u64, ResourceMode::_lift(l68 as u8))
                                    };
                                    WitTypeNode::HandleType(e69)
                                }
                            };
                            v69
                        };
                        result70.push(e70);
                    }
                    _rt::cabi_dealloc(base70, len70 * 24, 8);
                    if layout11.size() != 0 {
                        _rt::alloc::dealloc(result11.cast(), layout11);
                    }
                    if layout26.size() != 0 {
                        _rt::alloc::dealloc(result26.cast(), layout26);
                    }
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                    WitType { nodes: result70 }
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod wasi {
    pub mod clocks {
        /// WASI Wall Clock is a clock API intended to let users query the current
        /// time. The name "wall" makes an analogy to a "clock on the wall", which
        /// is not necessarily monotonic as it may be reset.
        ///
        /// It is intended to be portable at least between Unix-family platforms and
        /// Windows.
        ///
        /// A wall clock is a clock which measures the date and time according to
        /// some external reference.
        ///
        /// External references may be reset, so this clock is not necessarily
        /// monotonic, making it unsuitable for measuring elapsed time.
        ///
        /// It is intended for reporting the current date and time for humans.
        #[allow(dead_code, clippy::all)]
        pub mod wall_clock {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            /// A time and date in seconds plus nanoseconds.
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Datetime {
                pub seconds: u64,
                pub nanoseconds: u32,
            }
            impl ::core::fmt::Debug for Datetime {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Datetime")
                        .field("seconds", &self.seconds)
                        .field("nanoseconds", &self.nanoseconds)
                        .finish()
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Read the current value of the clock.
            ///
            /// This clock is not monotonic, therefore calling this function repeatedly
            /// will not necessarily produce a sequence of non-decreasing values.
            ///
            /// The returned timestamps represent the number of seconds since
            /// 1970-01-01T00:00:00Z, also known as [POSIX's Seconds Since the Epoch],
            /// also known as [Unix Time].
            ///
            /// The nanoseconds field of the output is always less than 1000000000.
            ///
            /// [POSIX's Seconds Since the Epoch]: https://pubs.opengroup.org/onlinepubs/9699919799/xrat/V4_xbd_chap04.html#tag_21_04_16
            /// [Unix Time]: https://en.wikipedia.org/wiki/Unix_time
            pub fn now() -> Datetime {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/wall-clock@0.2.0")]
                    extern "C" {
                        #[link_name = "now"]
                        fn wit_import(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0);
                    let l1 = *ptr0.add(0).cast::<i64>();
                    let l2 = *ptr0.add(8).cast::<i32>();
                    Datetime {
                        seconds: l1 as u64,
                        nanoseconds: l2 as u32,
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Query the resolution of the clock.
            ///
            /// The nanoseconds field of the output is always less than 1000000000.
            pub fn resolution() -> Datetime {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/wall-clock@0.2.0")]
                    extern "C" {
                        #[link_name = "resolution"]
                        fn wit_import(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0);
                    let l1 = *ptr0.add(0).cast::<i64>();
                    let l2 = *ptr0.add(8).cast::<i32>();
                    Datetime {
                        seconds: l1 as u64,
                        nanoseconds: l2 as u32,
                    }
                }
            }
        }
        /// WASI Monotonic Clock is a clock API intended to let users measure elapsed
        /// time.
        ///
        /// It is intended to be portable at least between Unix-family platforms and
        /// Windows.
        ///
        /// A monotonic clock is a clock which has an unspecified initial value, and
        /// successive reads of the clock will produce non-decreasing values.
        ///
        /// It is intended for measuring elapsed time.
        #[allow(dead_code, clippy::all)]
        pub mod monotonic_clock {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Pollable = super::super::super::wasi::io::poll::Pollable;
            /// An instant in time, in nanoseconds. An instant is relative to an
            /// unspecified initial value, and can only be compared to instances from
            /// the same monotonic-clock.
            pub type Instant = u64;
            /// A duration of time, in nanoseconds.
            pub type Duration = u64;
            #[allow(unused_unsafe, clippy::all)]
            /// Read the current value of the clock.
            ///
            /// The clock is monotonic, therefore calling this function repeatedly will
            /// produce a sequence of non-decreasing values.
            pub fn now() -> Instant {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/monotonic-clock@0.2.0")]
                    extern "C" {
                        #[link_name = "now"]
                        fn wit_import() -> i64;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import() -> i64 {
                        unreachable!()
                    }
                    let ret = wit_import();
                    ret as u64
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Query the resolution of the clock. Returns the duration of time
            /// corresponding to a clock tick.
            pub fn resolution() -> Duration {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/monotonic-clock@0.2.0")]
                    extern "C" {
                        #[link_name = "resolution"]
                        fn wit_import() -> i64;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import() -> i64 {
                        unreachable!()
                    }
                    let ret = wit_import();
                    ret as u64
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Create a `pollable` which will resolve once the specified instant
            /// occured.
            pub fn subscribe_instant(when: Instant) -> Pollable {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/monotonic-clock@0.2.0")]
                    extern "C" {
                        #[link_name = "subscribe-instant"]
                        fn wit_import(_: i64) -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i64) -> i32 {
                        unreachable!()
                    }
                    let ret = wit_import(_rt::as_i64(when));
                    super::super::super::wasi::io::poll::Pollable::from_handle(
                        ret as u32,
                    )
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Create a `pollable` which will resolve once the given duration has
            /// elapsed, starting at the time at which this function was called.
            /// occured.
            pub fn subscribe_duration(when: Duration) -> Pollable {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/monotonic-clock@0.2.0")]
                    extern "C" {
                        #[link_name = "subscribe-duration"]
                        fn wit_import(_: i64) -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i64) -> i32 {
                        unreachable!()
                    }
                    let ret = wit_import(_rt::as_i64(when));
                    super::super::super::wasi::io::poll::Pollable::from_handle(
                        ret as u32,
                    )
                }
            }
        }
    }
    pub mod io {
        /// A poll API intended to let users wait for I/O events on multiple handles
        /// at once.
        #[allow(dead_code, clippy::all)]
        pub mod poll {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// `pollable` epresents a single I/O event which may be ready, or not.
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Pollable {
                handle: _rt::Resource<Pollable>,
            }
            impl Pollable {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for Pollable {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:io/poll@0.2.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]pollable"]
                            fn drop(_: u32);
                        }
                        drop(_handle);
                    }
                }
            }
            impl Pollable {
                #[allow(unused_unsafe, clippy::all)]
                /// Return the readiness of a pollable. This function never blocks.
                ///
                /// Returns `true` when the pollable is ready, and `false` otherwise.
                pub fn ready(&self) -> bool {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/poll@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]pollable.ready"]
                            fn wit_import(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        _rt::bool_lift(ret as u8)
                    }
                }
            }
            impl Pollable {
                #[allow(unused_unsafe, clippy::all)]
                /// `block` returns immediately if the pollable is ready, and otherwise
                /// blocks until ready.
                ///
                /// This function is equivalent to calling `poll.poll` on a list
                /// containing only this pollable.
                pub fn block(&self) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/poll@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]pollable.block"]
                            fn wit_import(_: i32);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32);
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Poll for completion on a set of pollables.
            ///
            /// This function takes a list of pollables, which identify I/O sources of
            /// interest, and waits until one or more of the events is ready for I/O.
            ///
            /// The result `list<u32>` contains one or more indices of handles in the
            /// argument list that is ready for I/O.
            ///
            /// If the list contains more elements than can be indexed with a `u32`
            /// value, this function traps.
            ///
            /// A timeout can be implemented by adding a pollable from the
            /// wasi-clocks API to the list.
            ///
            /// This function does not return a `result`; polling in itself does not
            /// do any I/O so it doesn't fail. If any of the I/O sources identified by
            /// the pollables has an error, it is indicated by marking the source as
            /// being reaedy for I/O.
            pub fn poll(in_: &[&Pollable]) -> _rt::Vec<u32> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                    let vec0 = in_;
                    let len0 = vec0.len();
                    let layout0 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec0.len() * 4,
                        4,
                    );
                    let result0 = if layout0.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout0).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout0);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec0.into_iter().enumerate() {
                        let base = result0.add(i * 4);
                        {
                            *base.add(0).cast::<i32>() = (e).handle() as i32;
                        }
                    }
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:io/poll@0.2.0")]
                    extern "C" {
                        #[link_name = "poll"]
                        fn wit_import(_: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(result0, len0, ptr1);
                    let l2 = *ptr1.add(0).cast::<*mut u8>();
                    let l3 = *ptr1.add(4).cast::<usize>();
                    let len4 = l3;
                    if layout0.size() != 0 {
                        _rt::alloc::dealloc(result0.cast(), layout0);
                    }
                    _rt::Vec::from_raw_parts(l2.cast(), len4, len4)
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod golem {
        pub mod api {
            #[allow(dead_code, clippy::all)]
            pub mod oplog_processor {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type AccountId = super::super::super::super::golem::api::host::AccountId;
                pub type ComponentId = super::super::super::super::golem::api::host::ComponentId;
                pub type OplogIndex = super::super::super::super::golem::api::host::OplogIndex;
                pub type WorkerId = super::super::super::super::golem::api::host::WorkerId;
                pub type WorkerMetadata = super::super::super::super::golem::api::host::WorkerMetadata;
                pub type OplogEntry = super::super::super::super::golem::api::oplog::OplogEntry;
                #[derive(Clone)]
                pub struct AccountInfo {
                    pub account_id: AccountId,
                }
                impl ::core::fmt::Debug for AccountInfo {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("AccountInfo")
                            .field("account-id", &self.account_id)
                            .finish()
                    }
                }
                /// A processor resource is instantiated for each account having activated this oplog processor plugin.
                /// There are no guarantees for the number of processors running at the same time, and different entries from the same worker
                /// may be sent to different processor instances.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct Processor {
                    handle: _rt::Resource<Processor>,
                }
                type _ProcessorRep<T> = Option<T>;
                impl Processor {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `Processor`.
                    pub fn new<T: GuestProcessor>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _ProcessorRep<T> = Some(val);
                        let ptr: *mut _ProcessorRep<T> = _rt::Box::into_raw(
                            _rt::Box::new(val),
                        );
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }
                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestProcessor>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestProcessor>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }
                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestProcessor>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }
                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: _rt::Resource::from_handle(handle),
                        }
                    }
                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }
                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(! cfg!(target_feature = "atomics"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => {
                                    assert!(
                                        ty == id, "cannot use two types with this resource type"
                                    )
                                }
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }
                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(handle as *mut _ProcessorRep<T>);
                    }
                    fn as_ptr<T: GuestProcessor>(&self) -> *mut _ProcessorRep<T> {
                        Processor::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }
                /// A borrowed version of [`Processor`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct ProcessorBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a Processor>,
                }
                impl<'a> ProcessorBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }
                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestProcessor>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    fn as_ptr<T: 'static>(&self) -> *mut _ProcessorRep<T> {
                        Processor::type_guard::<T>();
                        self.rep.cast()
                    }
                }
                unsafe impl _rt::WasmResource for Processor {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]golem:api/oplog-processor@1.1.5"
                            )]
                            extern "C" {
                                #[link_name = "[resource-drop]processor"]
                                fn drop(_: u32);
                            }
                            drop(_handle);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_constructor_processor_cabi<T: GuestProcessor>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: i64,
                    arg3: i64,
                    arg4: *mut u8,
                    arg5: usize,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let base7 = arg4;
                    let len7 = arg5;
                    let mut result7 = _rt::Vec::with_capacity(len7);
                    for i in 0..len7 {
                        let base = base7.add(i * 16);
                        let e7 = {
                            let l1 = *base.add(0).cast::<*mut u8>();
                            let l2 = *base.add(4).cast::<usize>();
                            let len3 = l2;
                            let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);
                            let l4 = *base.add(8).cast::<*mut u8>();
                            let l5 = *base.add(12).cast::<usize>();
                            let len6 = l5;
                            let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);
                            (_rt::string_lift(bytes3), _rt::string_lift(bytes6))
                        };
                        result7.push(e7);
                    }
                    _rt::cabi_dealloc(base7, len7 * 16, 4);
                    let result8 = Processor::new(
                        T::new(
                            AccountInfo {
                                account_id: super::super::super::super::golem::api::host::AccountId {
                                    value: _rt::string_lift(bytes0),
                                },
                            },
                            super::super::super::super::golem::api::host::ComponentId {
                                uuid: super::super::super::super::golem::api::host::Uuid {
                                    high_bits: arg2 as u64,
                                    low_bits: arg3 as u64,
                                },
                            },
                            result7,
                        ),
                    );
                    (result8).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_processor_process_cabi<T: GuestProcessor>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let l0 = *arg0.add(0).cast::<i32>();
                    let l1 = *arg0.add(8).cast::<i64>();
                    let l2 = *arg0.add(16).cast::<i64>();
                    let l3 = *arg0.add(24).cast::<*mut u8>();
                    let l4 = *arg0.add(28).cast::<usize>();
                    let len5 = l4;
                    let bytes5 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);
                    let l6 = *arg0.add(32).cast::<i64>();
                    let l7 = *arg0.add(40).cast::<i64>();
                    let l8 = *arg0.add(48).cast::<*mut u8>();
                    let l9 = *arg0.add(52).cast::<usize>();
                    let len10 = l9;
                    let bytes10 = _rt::Vec::from_raw_parts(l8.cast(), len10, len10);
                    let l11 = *arg0.add(56).cast::<*mut u8>();
                    let l12 = *arg0.add(60).cast::<usize>();
                    let base16 = l11;
                    let len16 = l12;
                    let mut result16 = _rt::Vec::with_capacity(len16);
                    for i in 0..len16 {
                        let base = base16.add(i * 8);
                        let e16 = {
                            let l13 = *base.add(0).cast::<*mut u8>();
                            let l14 = *base.add(4).cast::<usize>();
                            let len15 = l14;
                            let bytes15 = _rt::Vec::from_raw_parts(
                                l13.cast(),
                                len15,
                                len15,
                            );
                            _rt::string_lift(bytes15)
                        };
                        result16.push(e16);
                    }
                    _rt::cabi_dealloc(base16, len16 * 8, 4);
                    let l17 = *arg0.add(64).cast::<*mut u8>();
                    let l18 = *arg0.add(68).cast::<usize>();
                    let base25 = l17;
                    let len25 = l18;
                    let mut result25 = _rt::Vec::with_capacity(len25);
                    for i in 0..len25 {
                        let base = base25.add(i * 16);
                        let e25 = {
                            let l19 = *base.add(0).cast::<*mut u8>();
                            let l20 = *base.add(4).cast::<usize>();
                            let len21 = l20;
                            let bytes21 = _rt::Vec::from_raw_parts(
                                l19.cast(),
                                len21,
                                len21,
                            );
                            let l22 = *base.add(8).cast::<*mut u8>();
                            let l23 = *base.add(12).cast::<usize>();
                            let len24 = l23;
                            let bytes24 = _rt::Vec::from_raw_parts(
                                l22.cast(),
                                len24,
                                len24,
                            );
                            (_rt::string_lift(bytes21), _rt::string_lift(bytes24))
                        };
                        result25.push(e25);
                    }
                    _rt::cabi_dealloc(base25, len25 * 16, 4);
                    let l26 = i32::from(*arg0.add(72).cast::<u8>());
                    let l27 = *arg0.add(80).cast::<i64>();
                    let l28 = *arg0.add(88).cast::<i64>();
                    let l29 = *arg0.add(96).cast::<i64>();
                    let l30 = *arg0.add(104).cast::<*mut u8>();
                    let l31 = *arg0.add(108).cast::<usize>();
                    let base649 = l30;
                    let len649 = l31;
                    let mut result649 = _rt::Vec::with_capacity(len649);
                    for i in 0..len649 {
                        let base = base649.add(i * 136);
                        let e649 = {
                            let l32 = i32::from(*base.add(0).cast::<u8>());
                            use super::super::super::super::golem::api::oplog::OplogEntry as V648;
                            let v648 = match l32 {
                                0 => {
                                    let e648 = {
                                        let l33 = *base.add(8).cast::<i64>();
                                        let l34 = *base.add(16).cast::<i32>();
                                        let l35 = *base.add(24).cast::<i64>();
                                        let l36 = *base.add(32).cast::<i64>();
                                        let l37 = *base.add(40).cast::<*mut u8>();
                                        let l38 = *base.add(44).cast::<usize>();
                                        let len39 = l38;
                                        let bytes39 = _rt::Vec::from_raw_parts(
                                            l37.cast(),
                                            len39,
                                            len39,
                                        );
                                        let l40 = *base.add(48).cast::<i64>();
                                        let l41 = *base.add(56).cast::<*mut u8>();
                                        let l42 = *base.add(60).cast::<usize>();
                                        let base46 = l41;
                                        let len46 = l42;
                                        let mut result46 = _rt::Vec::with_capacity(len46);
                                        for i in 0..len46 {
                                            let base = base46.add(i * 8);
                                            let e46 = {
                                                let l43 = *base.add(0).cast::<*mut u8>();
                                                let l44 = *base.add(4).cast::<usize>();
                                                let len45 = l44;
                                                let bytes45 = _rt::Vec::from_raw_parts(
                                                    l43.cast(),
                                                    len45,
                                                    len45,
                                                );
                                                _rt::string_lift(bytes45)
                                            };
                                            result46.push(e46);
                                        }
                                        _rt::cabi_dealloc(base46, len46 * 8, 4);
                                        let l47 = *base.add(64).cast::<*mut u8>();
                                        let l48 = *base.add(68).cast::<usize>();
                                        let base55 = l47;
                                        let len55 = l48;
                                        let mut result55 = _rt::Vec::with_capacity(len55);
                                        for i in 0..len55 {
                                            let base = base55.add(i * 16);
                                            let e55 = {
                                                let l49 = *base.add(0).cast::<*mut u8>();
                                                let l50 = *base.add(4).cast::<usize>();
                                                let len51 = l50;
                                                let bytes51 = _rt::Vec::from_raw_parts(
                                                    l49.cast(),
                                                    len51,
                                                    len51,
                                                );
                                                let l52 = *base.add(8).cast::<*mut u8>();
                                                let l53 = *base.add(12).cast::<usize>();
                                                let len54 = l53;
                                                let bytes54 = _rt::Vec::from_raw_parts(
                                                    l52.cast(),
                                                    len54,
                                                    len54,
                                                );
                                                (_rt::string_lift(bytes51), _rt::string_lift(bytes54))
                                            };
                                            result55.push(e55);
                                        }
                                        _rt::cabi_dealloc(base55, len55 * 16, 4);
                                        let l56 = *base.add(72).cast::<*mut u8>();
                                        let l57 = *base.add(76).cast::<usize>();
                                        let len58 = l57;
                                        let bytes58 = _rt::Vec::from_raw_parts(
                                            l56.cast(),
                                            len58,
                                            len58,
                                        );
                                        let l59 = i32::from(*base.add(80).cast::<u8>());
                                        let l65 = *base.add(112).cast::<i64>();
                                        let l66 = *base.add(120).cast::<i64>();
                                        let l67 = *base.add(128).cast::<*mut u8>();
                                        let l68 = *base.add(132).cast::<usize>();
                                        let base86 = l67;
                                        let len86 = l68;
                                        let mut result86 = _rt::Vec::with_capacity(len86);
                                        for i in 0..len86 {
                                            let base = base86.add(i * 40);
                                            let e86 = {
                                                let l69 = *base.add(0).cast::<i64>();
                                                let l70 = *base.add(8).cast::<i64>();
                                                let l71 = *base.add(16).cast::<*mut u8>();
                                                let l72 = *base.add(20).cast::<usize>();
                                                let len73 = l72;
                                                let bytes73 = _rt::Vec::from_raw_parts(
                                                    l71.cast(),
                                                    len73,
                                                    len73,
                                                );
                                                let l74 = *base.add(24).cast::<*mut u8>();
                                                let l75 = *base.add(28).cast::<usize>();
                                                let len76 = l75;
                                                let bytes76 = _rt::Vec::from_raw_parts(
                                                    l74.cast(),
                                                    len76,
                                                    len76,
                                                );
                                                let l77 = *base.add(32).cast::<*mut u8>();
                                                let l78 = *base.add(36).cast::<usize>();
                                                let base85 = l77;
                                                let len85 = l78;
                                                let mut result85 = _rt::Vec::with_capacity(len85);
                                                for i in 0..len85 {
                                                    let base = base85.add(i * 16);
                                                    let e85 = {
                                                        let l79 = *base.add(0).cast::<*mut u8>();
                                                        let l80 = *base.add(4).cast::<usize>();
                                                        let len81 = l80;
                                                        let bytes81 = _rt::Vec::from_raw_parts(
                                                            l79.cast(),
                                                            len81,
                                                            len81,
                                                        );
                                                        let l82 = *base.add(8).cast::<*mut u8>();
                                                        let l83 = *base.add(12).cast::<usize>();
                                                        let len84 = l83;
                                                        let bytes84 = _rt::Vec::from_raw_parts(
                                                            l82.cast(),
                                                            len84,
                                                            len84,
                                                        );
                                                        (_rt::string_lift(bytes81), _rt::string_lift(bytes84))
                                                    };
                                                    result85.push(e85);
                                                }
                                                _rt::cabi_dealloc(base85, len85 * 16, 4);
                                                super::super::super::super::golem::api::oplog::PluginInstallationDescription {
                                                    installation_id: super::super::super::super::golem::api::host::Uuid {
                                                        high_bits: l69 as u64,
                                                        low_bits: l70 as u64,
                                                    },
                                                    name: _rt::string_lift(bytes73),
                                                    version: _rt::string_lift(bytes76),
                                                    parameters: result85,
                                                }
                                            };
                                            result86.push(e86);
                                        }
                                        _rt::cabi_dealloc(base86, len86 * 40, 8);
                                        super::super::super::super::golem::api::oplog::CreateParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l33 as u64,
                                                nanoseconds: l34 as u32,
                                            },
                                            worker_id: super::super::super::super::golem::api::host::WorkerId {
                                                component_id: super::super::super::super::golem::api::host::ComponentId {
                                                    uuid: super::super::super::super::golem::api::host::Uuid {
                                                        high_bits: l35 as u64,
                                                        low_bits: l36 as u64,
                                                    },
                                                },
                                                worker_name: _rt::string_lift(bytes39),
                                            },
                                            component_version: l40 as u64,
                                            args: result46,
                                            env: result55,
                                            account_id: super::super::super::super::golem::api::host::AccountId {
                                                value: _rt::string_lift(bytes58),
                                            },
                                            parent: match l59 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l60 = *base.add(88).cast::<i64>();
                                                        let l61 = *base.add(96).cast::<i64>();
                                                        let l62 = *base.add(104).cast::<*mut u8>();
                                                        let l63 = *base.add(108).cast::<usize>();
                                                        let len64 = l63;
                                                        let bytes64 = _rt::Vec::from_raw_parts(
                                                            l62.cast(),
                                                            len64,
                                                            len64,
                                                        );
                                                        super::super::super::super::golem::api::host::WorkerId {
                                                            component_id: super::super::super::super::golem::api::host::ComponentId {
                                                                uuid: super::super::super::super::golem::api::host::Uuid {
                                                                    high_bits: l60 as u64,
                                                                    low_bits: l61 as u64,
                                                                },
                                                            },
                                                            worker_name: _rt::string_lift(bytes64),
                                                        }
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            component_size: l65 as u64,
                                            initial_total_linear_memory_size: l66 as u64,
                                            initial_active_plugins: result86,
                                        }
                                    };
                                    V648::Create(e648)
                                }
                                1 => {
                                    let e648 = {
                                        let l87 = *base.add(8).cast::<i64>();
                                        let l88 = *base.add(16).cast::<i32>();
                                        let l89 = *base.add(24).cast::<*mut u8>();
                                        let l90 = *base.add(28).cast::<usize>();
                                        let len91 = l90;
                                        let bytes91 = _rt::Vec::from_raw_parts(
                                            l89.cast(),
                                            len91,
                                            len91,
                                        );
                                        let l92 = *base.add(32).cast::<*mut u8>();
                                        let l93 = *base.add(36).cast::<usize>();
                                        let base139 = l92;
                                        let len139 = l93;
                                        let mut result139 = _rt::Vec::with_capacity(len139);
                                        for i in 0..len139 {
                                            let base = base139.add(i * 24);
                                            let e139 = {
                                                let l94 = i32::from(*base.add(0).cast::<u8>());
                                                use super::super::super::super::golem::rpc::types::WitNode as V138;
                                                let v138 = match l94 {
                                                    0 => {
                                                        let e138 = {
                                                            let l95 = *base.add(8).cast::<*mut u8>();
                                                            let l96 = *base.add(12).cast::<usize>();
                                                            let len97 = l96;
                                                            _rt::Vec::from_raw_parts(l95.cast(), len97, len97)
                                                        };
                                                        V138::RecordValue(e138)
                                                    }
                                                    1 => {
                                                        let e138 = {
                                                            let l98 = *base.add(8).cast::<i32>();
                                                            let l99 = i32::from(*base.add(12).cast::<u8>());
                                                            (
                                                                l98 as u32,
                                                                match l99 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l100 = *base.add(16).cast::<i32>();
                                                                            l100
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                            )
                                                        };
                                                        V138::VariantValue(e138)
                                                    }
                                                    2 => {
                                                        let e138 = {
                                                            let l101 = *base.add(8).cast::<i32>();
                                                            l101 as u32
                                                        };
                                                        V138::EnumValue(e138)
                                                    }
                                                    3 => {
                                                        let e138 = {
                                                            let l102 = *base.add(8).cast::<*mut u8>();
                                                            let l103 = *base.add(12).cast::<usize>();
                                                            let base105 = l102;
                                                            let len105 = l103;
                                                            let mut result105 = _rt::Vec::with_capacity(len105);
                                                            for i in 0..len105 {
                                                                let base = base105.add(i * 1);
                                                                let e105 = {
                                                                    let l104 = i32::from(*base.add(0).cast::<u8>());
                                                                    _rt::bool_lift(l104 as u8)
                                                                };
                                                                result105.push(e105);
                                                            }
                                                            _rt::cabi_dealloc(base105, len105 * 1, 1);
                                                            result105
                                                        };
                                                        V138::FlagsValue(e138)
                                                    }
                                                    4 => {
                                                        let e138 = {
                                                            let l106 = *base.add(8).cast::<*mut u8>();
                                                            let l107 = *base.add(12).cast::<usize>();
                                                            let len108 = l107;
                                                            _rt::Vec::from_raw_parts(l106.cast(), len108, len108)
                                                        };
                                                        V138::TupleValue(e138)
                                                    }
                                                    5 => {
                                                        let e138 = {
                                                            let l109 = *base.add(8).cast::<*mut u8>();
                                                            let l110 = *base.add(12).cast::<usize>();
                                                            let len111 = l110;
                                                            _rt::Vec::from_raw_parts(l109.cast(), len111, len111)
                                                        };
                                                        V138::ListValue(e138)
                                                    }
                                                    6 => {
                                                        let e138 = {
                                                            let l112 = i32::from(*base.add(8).cast::<u8>());
                                                            match l112 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l113 = *base.add(12).cast::<i32>();
                                                                        l113
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            }
                                                        };
                                                        V138::OptionValue(e138)
                                                    }
                                                    7 => {
                                                        let e138 = {
                                                            let l114 = i32::from(*base.add(8).cast::<u8>());
                                                            match l114 {
                                                                0 => {
                                                                    let e = {
                                                                        let l115 = i32::from(*base.add(12).cast::<u8>());
                                                                        match l115 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l116 = *base.add(16).cast::<i32>();
                                                                                    l116
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        }
                                                                    };
                                                                    Ok(e)
                                                                }
                                                                1 => {
                                                                    let e = {
                                                                        let l117 = i32::from(*base.add(12).cast::<u8>());
                                                                        match l117 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l118 = *base.add(16).cast::<i32>();
                                                                                    l118
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        }
                                                                    };
                                                                    Err(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            }
                                                        };
                                                        V138::ResultValue(e138)
                                                    }
                                                    8 => {
                                                        let e138 = {
                                                            let l119 = i32::from(*base.add(8).cast::<u8>());
                                                            l119 as u8
                                                        };
                                                        V138::PrimU8(e138)
                                                    }
                                                    9 => {
                                                        let e138 = {
                                                            let l120 = i32::from(*base.add(8).cast::<u16>());
                                                            l120 as u16
                                                        };
                                                        V138::PrimU16(e138)
                                                    }
                                                    10 => {
                                                        let e138 = {
                                                            let l121 = *base.add(8).cast::<i32>();
                                                            l121 as u32
                                                        };
                                                        V138::PrimU32(e138)
                                                    }
                                                    11 => {
                                                        let e138 = {
                                                            let l122 = *base.add(8).cast::<i64>();
                                                            l122 as u64
                                                        };
                                                        V138::PrimU64(e138)
                                                    }
                                                    12 => {
                                                        let e138 = {
                                                            let l123 = i32::from(*base.add(8).cast::<i8>());
                                                            l123 as i8
                                                        };
                                                        V138::PrimS8(e138)
                                                    }
                                                    13 => {
                                                        let e138 = {
                                                            let l124 = i32::from(*base.add(8).cast::<i16>());
                                                            l124 as i16
                                                        };
                                                        V138::PrimS16(e138)
                                                    }
                                                    14 => {
                                                        let e138 = {
                                                            let l125 = *base.add(8).cast::<i32>();
                                                            l125
                                                        };
                                                        V138::PrimS32(e138)
                                                    }
                                                    15 => {
                                                        let e138 = {
                                                            let l126 = *base.add(8).cast::<i64>();
                                                            l126
                                                        };
                                                        V138::PrimS64(e138)
                                                    }
                                                    16 => {
                                                        let e138 = {
                                                            let l127 = *base.add(8).cast::<f32>();
                                                            l127
                                                        };
                                                        V138::PrimFloat32(e138)
                                                    }
                                                    17 => {
                                                        let e138 = {
                                                            let l128 = *base.add(8).cast::<f64>();
                                                            l128
                                                        };
                                                        V138::PrimFloat64(e138)
                                                    }
                                                    18 => {
                                                        let e138 = {
                                                            let l129 = *base.add(8).cast::<i32>();
                                                            _rt::char_lift(l129 as u32)
                                                        };
                                                        V138::PrimChar(e138)
                                                    }
                                                    19 => {
                                                        let e138 = {
                                                            let l130 = i32::from(*base.add(8).cast::<u8>());
                                                            _rt::bool_lift(l130 as u8)
                                                        };
                                                        V138::PrimBool(e138)
                                                    }
                                                    20 => {
                                                        let e138 = {
                                                            let l131 = *base.add(8).cast::<*mut u8>();
                                                            let l132 = *base.add(12).cast::<usize>();
                                                            let len133 = l132;
                                                            let bytes133 = _rt::Vec::from_raw_parts(
                                                                l131.cast(),
                                                                len133,
                                                                len133,
                                                            );
                                                            _rt::string_lift(bytes133)
                                                        };
                                                        V138::PrimString(e138)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                        let e138 = {
                                                            let l134 = *base.add(8).cast::<*mut u8>();
                                                            let l135 = *base.add(12).cast::<usize>();
                                                            let len136 = l135;
                                                            let bytes136 = _rt::Vec::from_raw_parts(
                                                                l134.cast(),
                                                                len136,
                                                                len136,
                                                            );
                                                            let l137 = *base.add(16).cast::<i64>();
                                                            (
                                                                super::super::super::super::golem::rpc::types::Uri {
                                                                    value: _rt::string_lift(bytes136),
                                                                },
                                                                l137 as u64,
                                                            )
                                                        };
                                                        V138::Handle(e138)
                                                    }
                                                };
                                                v138
                                            };
                                            result139.push(e139);
                                        }
                                        _rt::cabi_dealloc(base139, len139 * 24, 8);
                                        let l140 = *base.add(40).cast::<*mut u8>();
                                        let l141 = *base.add(44).cast::<usize>();
                                        let base187 = l140;
                                        let len187 = l141;
                                        let mut result187 = _rt::Vec::with_capacity(len187);
                                        for i in 0..len187 {
                                            let base = base187.add(i * 24);
                                            let e187 = {
                                                let l142 = i32::from(*base.add(0).cast::<u8>());
                                                use super::super::super::super::golem::rpc::types::WitNode as V186;
                                                let v186 = match l142 {
                                                    0 => {
                                                        let e186 = {
                                                            let l143 = *base.add(8).cast::<*mut u8>();
                                                            let l144 = *base.add(12).cast::<usize>();
                                                            let len145 = l144;
                                                            _rt::Vec::from_raw_parts(l143.cast(), len145, len145)
                                                        };
                                                        V186::RecordValue(e186)
                                                    }
                                                    1 => {
                                                        let e186 = {
                                                            let l146 = *base.add(8).cast::<i32>();
                                                            let l147 = i32::from(*base.add(12).cast::<u8>());
                                                            (
                                                                l146 as u32,
                                                                match l147 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l148 = *base.add(16).cast::<i32>();
                                                                            l148
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                            )
                                                        };
                                                        V186::VariantValue(e186)
                                                    }
                                                    2 => {
                                                        let e186 = {
                                                            let l149 = *base.add(8).cast::<i32>();
                                                            l149 as u32
                                                        };
                                                        V186::EnumValue(e186)
                                                    }
                                                    3 => {
                                                        let e186 = {
                                                            let l150 = *base.add(8).cast::<*mut u8>();
                                                            let l151 = *base.add(12).cast::<usize>();
                                                            let base153 = l150;
                                                            let len153 = l151;
                                                            let mut result153 = _rt::Vec::with_capacity(len153);
                                                            for i in 0..len153 {
                                                                let base = base153.add(i * 1);
                                                                let e153 = {
                                                                    let l152 = i32::from(*base.add(0).cast::<u8>());
                                                                    _rt::bool_lift(l152 as u8)
                                                                };
                                                                result153.push(e153);
                                                            }
                                                            _rt::cabi_dealloc(base153, len153 * 1, 1);
                                                            result153
                                                        };
                                                        V186::FlagsValue(e186)
                                                    }
                                                    4 => {
                                                        let e186 = {
                                                            let l154 = *base.add(8).cast::<*mut u8>();
                                                            let l155 = *base.add(12).cast::<usize>();
                                                            let len156 = l155;
                                                            _rt::Vec::from_raw_parts(l154.cast(), len156, len156)
                                                        };
                                                        V186::TupleValue(e186)
                                                    }
                                                    5 => {
                                                        let e186 = {
                                                            let l157 = *base.add(8).cast::<*mut u8>();
                                                            let l158 = *base.add(12).cast::<usize>();
                                                            let len159 = l158;
                                                            _rt::Vec::from_raw_parts(l157.cast(), len159, len159)
                                                        };
                                                        V186::ListValue(e186)
                                                    }
                                                    6 => {
                                                        let e186 = {
                                                            let l160 = i32::from(*base.add(8).cast::<u8>());
                                                            match l160 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l161 = *base.add(12).cast::<i32>();
                                                                        l161
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            }
                                                        };
                                                        V186::OptionValue(e186)
                                                    }
                                                    7 => {
                                                        let e186 = {
                                                            let l162 = i32::from(*base.add(8).cast::<u8>());
                                                            match l162 {
                                                                0 => {
                                                                    let e = {
                                                                        let l163 = i32::from(*base.add(12).cast::<u8>());
                                                                        match l163 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l164 = *base.add(16).cast::<i32>();
                                                                                    l164
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        }
                                                                    };
                                                                    Ok(e)
                                                                }
                                                                1 => {
                                                                    let e = {
                                                                        let l165 = i32::from(*base.add(12).cast::<u8>());
                                                                        match l165 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l166 = *base.add(16).cast::<i32>();
                                                                                    l166
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        }
                                                                    };
                                                                    Err(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            }
                                                        };
                                                        V186::ResultValue(e186)
                                                    }
                                                    8 => {
                                                        let e186 = {
                                                            let l167 = i32::from(*base.add(8).cast::<u8>());
                                                            l167 as u8
                                                        };
                                                        V186::PrimU8(e186)
                                                    }
                                                    9 => {
                                                        let e186 = {
                                                            let l168 = i32::from(*base.add(8).cast::<u16>());
                                                            l168 as u16
                                                        };
                                                        V186::PrimU16(e186)
                                                    }
                                                    10 => {
                                                        let e186 = {
                                                            let l169 = *base.add(8).cast::<i32>();
                                                            l169 as u32
                                                        };
                                                        V186::PrimU32(e186)
                                                    }
                                                    11 => {
                                                        let e186 = {
                                                            let l170 = *base.add(8).cast::<i64>();
                                                            l170 as u64
                                                        };
                                                        V186::PrimU64(e186)
                                                    }
                                                    12 => {
                                                        let e186 = {
                                                            let l171 = i32::from(*base.add(8).cast::<i8>());
                                                            l171 as i8
                                                        };
                                                        V186::PrimS8(e186)
                                                    }
                                                    13 => {
                                                        let e186 = {
                                                            let l172 = i32::from(*base.add(8).cast::<i16>());
                                                            l172 as i16
                                                        };
                                                        V186::PrimS16(e186)
                                                    }
                                                    14 => {
                                                        let e186 = {
                                                            let l173 = *base.add(8).cast::<i32>();
                                                            l173
                                                        };
                                                        V186::PrimS32(e186)
                                                    }
                                                    15 => {
                                                        let e186 = {
                                                            let l174 = *base.add(8).cast::<i64>();
                                                            l174
                                                        };
                                                        V186::PrimS64(e186)
                                                    }
                                                    16 => {
                                                        let e186 = {
                                                            let l175 = *base.add(8).cast::<f32>();
                                                            l175
                                                        };
                                                        V186::PrimFloat32(e186)
                                                    }
                                                    17 => {
                                                        let e186 = {
                                                            let l176 = *base.add(8).cast::<f64>();
                                                            l176
                                                        };
                                                        V186::PrimFloat64(e186)
                                                    }
                                                    18 => {
                                                        let e186 = {
                                                            let l177 = *base.add(8).cast::<i32>();
                                                            _rt::char_lift(l177 as u32)
                                                        };
                                                        V186::PrimChar(e186)
                                                    }
                                                    19 => {
                                                        let e186 = {
                                                            let l178 = i32::from(*base.add(8).cast::<u8>());
                                                            _rt::bool_lift(l178 as u8)
                                                        };
                                                        V186::PrimBool(e186)
                                                    }
                                                    20 => {
                                                        let e186 = {
                                                            let l179 = *base.add(8).cast::<*mut u8>();
                                                            let l180 = *base.add(12).cast::<usize>();
                                                            let len181 = l180;
                                                            let bytes181 = _rt::Vec::from_raw_parts(
                                                                l179.cast(),
                                                                len181,
                                                                len181,
                                                            );
                                                            _rt::string_lift(bytes181)
                                                        };
                                                        V186::PrimString(e186)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                        let e186 = {
                                                            let l182 = *base.add(8).cast::<*mut u8>();
                                                            let l183 = *base.add(12).cast::<usize>();
                                                            let len184 = l183;
                                                            let bytes184 = _rt::Vec::from_raw_parts(
                                                                l182.cast(),
                                                                len184,
                                                                len184,
                                                            );
                                                            let l185 = *base.add(16).cast::<i64>();
                                                            (
                                                                super::super::super::super::golem::rpc::types::Uri {
                                                                    value: _rt::string_lift(bytes184),
                                                                },
                                                                l185 as u64,
                                                            )
                                                        };
                                                        V186::Handle(e186)
                                                    }
                                                };
                                                v186
                                            };
                                            result187.push(e187);
                                        }
                                        _rt::cabi_dealloc(base187, len187 * 24, 8);
                                        let l188 = i32::from(*base.add(48).cast::<u8>());
                                        use super::super::super::super::golem::api::oplog::WrappedFunctionType as V191;
                                        let v191 = match l188 {
                                            0 => V191::ReadLocal,
                                            1 => V191::WriteLocal,
                                            2 => V191::ReadRemote,
                                            3 => V191::WriteRemote,
                                            n => {
                                                debug_assert_eq!(n, 4, "invalid enum discriminant");
                                                let e191 = {
                                                    let l189 = i32::from(*base.add(56).cast::<u8>());
                                                    match l189 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l190 = *base.add(64).cast::<i64>();
                                                                l190 as u64
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    }
                                                };
                                                V191::WriteRemoteBatched(e191)
                                            }
                                        };
                                        super::super::super::super::golem::api::oplog::ImportedFunctionInvokedParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l87 as u64,
                                                nanoseconds: l88 as u32,
                                            },
                                            function_name: _rt::string_lift(bytes91),
                                            request: super::super::super::super::golem::rpc::types::WitValue {
                                                nodes: result139,
                                            },
                                            response: super::super::super::super::golem::rpc::types::WitValue {
                                                nodes: result187,
                                            },
                                            wrapped_function_type: v191,
                                        }
                                    };
                                    V648::ImportedFunctionInvoked(e648)
                                }
                                2 => {
                                    let e648 = {
                                        let l192 = *base.add(8).cast::<i64>();
                                        let l193 = *base.add(16).cast::<i32>();
                                        let l194 = *base.add(24).cast::<*mut u8>();
                                        let l195 = *base.add(28).cast::<usize>();
                                        let len196 = l195;
                                        let bytes196 = _rt::Vec::from_raw_parts(
                                            l194.cast(),
                                            len196,
                                            len196,
                                        );
                                        let l197 = *base.add(32).cast::<*mut u8>();
                                        let l198 = *base.add(36).cast::<usize>();
                                        let base247 = l197;
                                        let len247 = l198;
                                        let mut result247 = _rt::Vec::with_capacity(len247);
                                        for i in 0..len247 {
                                            let base = base247.add(i * 8);
                                            let e247 = {
                                                let l199 = *base.add(0).cast::<*mut u8>();
                                                let l200 = *base.add(4).cast::<usize>();
                                                let base246 = l199;
                                                let len246 = l200;
                                                let mut result246 = _rt::Vec::with_capacity(len246);
                                                for i in 0..len246 {
                                                    let base = base246.add(i * 24);
                                                    let e246 = {
                                                        let l201 = i32::from(*base.add(0).cast::<u8>());
                                                        use super::super::super::super::golem::rpc::types::WitNode as V245;
                                                        let v245 = match l201 {
                                                            0 => {
                                                                let e245 = {
                                                                    let l202 = *base.add(8).cast::<*mut u8>();
                                                                    let l203 = *base.add(12).cast::<usize>();
                                                                    let len204 = l203;
                                                                    _rt::Vec::from_raw_parts(l202.cast(), len204, len204)
                                                                };
                                                                V245::RecordValue(e245)
                                                            }
                                                            1 => {
                                                                let e245 = {
                                                                    let l205 = *base.add(8).cast::<i32>();
                                                                    let l206 = i32::from(*base.add(12).cast::<u8>());
                                                                    (
                                                                        l205 as u32,
                                                                        match l206 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l207 = *base.add(16).cast::<i32>();
                                                                                    l207
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    )
                                                                };
                                                                V245::VariantValue(e245)
                                                            }
                                                            2 => {
                                                                let e245 = {
                                                                    let l208 = *base.add(8).cast::<i32>();
                                                                    l208 as u32
                                                                };
                                                                V245::EnumValue(e245)
                                                            }
                                                            3 => {
                                                                let e245 = {
                                                                    let l209 = *base.add(8).cast::<*mut u8>();
                                                                    let l210 = *base.add(12).cast::<usize>();
                                                                    let base212 = l209;
                                                                    let len212 = l210;
                                                                    let mut result212 = _rt::Vec::with_capacity(len212);
                                                                    for i in 0..len212 {
                                                                        let base = base212.add(i * 1);
                                                                        let e212 = {
                                                                            let l211 = i32::from(*base.add(0).cast::<u8>());
                                                                            _rt::bool_lift(l211 as u8)
                                                                        };
                                                                        result212.push(e212);
                                                                    }
                                                                    _rt::cabi_dealloc(base212, len212 * 1, 1);
                                                                    result212
                                                                };
                                                                V245::FlagsValue(e245)
                                                            }
                                                            4 => {
                                                                let e245 = {
                                                                    let l213 = *base.add(8).cast::<*mut u8>();
                                                                    let l214 = *base.add(12).cast::<usize>();
                                                                    let len215 = l214;
                                                                    _rt::Vec::from_raw_parts(l213.cast(), len215, len215)
                                                                };
                                                                V245::TupleValue(e245)
                                                            }
                                                            5 => {
                                                                let e245 = {
                                                                    let l216 = *base.add(8).cast::<*mut u8>();
                                                                    let l217 = *base.add(12).cast::<usize>();
                                                                    let len218 = l217;
                                                                    _rt::Vec::from_raw_parts(l216.cast(), len218, len218)
                                                                };
                                                                V245::ListValue(e245)
                                                            }
                                                            6 => {
                                                                let e245 = {
                                                                    let l219 = i32::from(*base.add(8).cast::<u8>());
                                                                    match l219 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l220 = *base.add(12).cast::<i32>();
                                                                                l220
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                V245::OptionValue(e245)
                                                            }
                                                            7 => {
                                                                let e245 = {
                                                                    let l221 = i32::from(*base.add(8).cast::<u8>());
                                                                    match l221 {
                                                                        0 => {
                                                                            let e = {
                                                                                let l222 = i32::from(*base.add(12).cast::<u8>());
                                                                                match l222 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l223 = *base.add(16).cast::<i32>();
                                                                                            l223
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                }
                                                                            };
                                                                            Ok(e)
                                                                        }
                                                                        1 => {
                                                                            let e = {
                                                                                let l224 = i32::from(*base.add(12).cast::<u8>());
                                                                                match l224 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l225 = *base.add(16).cast::<i32>();
                                                                                            l225
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                }
                                                                            };
                                                                            Err(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                V245::ResultValue(e245)
                                                            }
                                                            8 => {
                                                                let e245 = {
                                                                    let l226 = i32::from(*base.add(8).cast::<u8>());
                                                                    l226 as u8
                                                                };
                                                                V245::PrimU8(e245)
                                                            }
                                                            9 => {
                                                                let e245 = {
                                                                    let l227 = i32::from(*base.add(8).cast::<u16>());
                                                                    l227 as u16
                                                                };
                                                                V245::PrimU16(e245)
                                                            }
                                                            10 => {
                                                                let e245 = {
                                                                    let l228 = *base.add(8).cast::<i32>();
                                                                    l228 as u32
                                                                };
                                                                V245::PrimU32(e245)
                                                            }
                                                            11 => {
                                                                let e245 = {
                                                                    let l229 = *base.add(8).cast::<i64>();
                                                                    l229 as u64
                                                                };
                                                                V245::PrimU64(e245)
                                                            }
                                                            12 => {
                                                                let e245 = {
                                                                    let l230 = i32::from(*base.add(8).cast::<i8>());
                                                                    l230 as i8
                                                                };
                                                                V245::PrimS8(e245)
                                                            }
                                                            13 => {
                                                                let e245 = {
                                                                    let l231 = i32::from(*base.add(8).cast::<i16>());
                                                                    l231 as i16
                                                                };
                                                                V245::PrimS16(e245)
                                                            }
                                                            14 => {
                                                                let e245 = {
                                                                    let l232 = *base.add(8).cast::<i32>();
                                                                    l232
                                                                };
                                                                V245::PrimS32(e245)
                                                            }
                                                            15 => {
                                                                let e245 = {
                                                                    let l233 = *base.add(8).cast::<i64>();
                                                                    l233
                                                                };
                                                                V245::PrimS64(e245)
                                                            }
                                                            16 => {
                                                                let e245 = {
                                                                    let l234 = *base.add(8).cast::<f32>();
                                                                    l234
                                                                };
                                                                V245::PrimFloat32(e245)
                                                            }
                                                            17 => {
                                                                let e245 = {
                                                                    let l235 = *base.add(8).cast::<f64>();
                                                                    l235
                                                                };
                                                                V245::PrimFloat64(e245)
                                                            }
                                                            18 => {
                                                                let e245 = {
                                                                    let l236 = *base.add(8).cast::<i32>();
                                                                    _rt::char_lift(l236 as u32)
                                                                };
                                                                V245::PrimChar(e245)
                                                            }
                                                            19 => {
                                                                let e245 = {
                                                                    let l237 = i32::from(*base.add(8).cast::<u8>());
                                                                    _rt::bool_lift(l237 as u8)
                                                                };
                                                                V245::PrimBool(e245)
                                                            }
                                                            20 => {
                                                                let e245 = {
                                                                    let l238 = *base.add(8).cast::<*mut u8>();
                                                                    let l239 = *base.add(12).cast::<usize>();
                                                                    let len240 = l239;
                                                                    let bytes240 = _rt::Vec::from_raw_parts(
                                                                        l238.cast(),
                                                                        len240,
                                                                        len240,
                                                                    );
                                                                    _rt::string_lift(bytes240)
                                                                };
                                                                V245::PrimString(e245)
                                                            }
                                                            n => {
                                                                debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                let e245 = {
                                                                    let l241 = *base.add(8).cast::<*mut u8>();
                                                                    let l242 = *base.add(12).cast::<usize>();
                                                                    let len243 = l242;
                                                                    let bytes243 = _rt::Vec::from_raw_parts(
                                                                        l241.cast(),
                                                                        len243,
                                                                        len243,
                                                                    );
                                                                    let l244 = *base.add(16).cast::<i64>();
                                                                    (
                                                                        super::super::super::super::golem::rpc::types::Uri {
                                                                            value: _rt::string_lift(bytes243),
                                                                        },
                                                                        l244 as u64,
                                                                    )
                                                                };
                                                                V245::Handle(e245)
                                                            }
                                                        };
                                                        v245
                                                    };
                                                    result246.push(e246);
                                                }
                                                _rt::cabi_dealloc(base246, len246 * 24, 8);
                                                super::super::super::super::golem::rpc::types::WitValue {
                                                    nodes: result246,
                                                }
                                            };
                                            result247.push(e247);
                                        }
                                        _rt::cabi_dealloc(base247, len247 * 8, 4);
                                        let l248 = *base.add(40).cast::<*mut u8>();
                                        let l249 = *base.add(44).cast::<usize>();
                                        let len250 = l249;
                                        let bytes250 = _rt::Vec::from_raw_parts(
                                            l248.cast(),
                                            len250,
                                            len250,
                                        );
                                        let l251 = *base.add(48).cast::<*mut u8>();
                                        let l252 = *base.add(52).cast::<usize>();
                                        let len253 = l252;
                                        let bytes253 = _rt::Vec::from_raw_parts(
                                            l251.cast(),
                                            len253,
                                            len253,
                                        );
                                        let l254 = *base.add(56).cast::<*mut u8>();
                                        let l255 = *base.add(60).cast::<usize>();
                                        let base259 = l254;
                                        let len259 = l255;
                                        let mut result259 = _rt::Vec::with_capacity(len259);
                                        for i in 0..len259 {
                                            let base = base259.add(i * 8);
                                            let e259 = {
                                                let l256 = *base.add(0).cast::<*mut u8>();
                                                let l257 = *base.add(4).cast::<usize>();
                                                let len258 = l257;
                                                let bytes258 = _rt::Vec::from_raw_parts(
                                                    l256.cast(),
                                                    len258,
                                                    len258,
                                                );
                                                _rt::string_lift(bytes258)
                                            };
                                            result259.push(e259);
                                        }
                                        _rt::cabi_dealloc(base259, len259 * 8, 4);
                                        let l260 = *base.add(64).cast::<*mut u8>();
                                        let l261 = *base.add(68).cast::<usize>();
                                        let base293 = l260;
                                        let len293 = l261;
                                        let mut result293 = _rt::Vec::with_capacity(len293);
                                        for i in 0..len293 {
                                            let base = base293.add(i * 8);
                                            let e293 = {
                                                let l262 = *base.add(0).cast::<*mut u8>();
                                                let l263 = *base.add(4).cast::<usize>();
                                                let base292 = l262;
                                                let len292 = l263;
                                                let mut result292 = _rt::Vec::with_capacity(len292);
                                                for i in 0..len292 {
                                                    let base = base292.add(i * 80);
                                                    let e292 = {
                                                        let l264 = i32::from(*base.add(0).cast::<u8>());
                                                        use super::super::super::super::golem::api::oplog::SpanData as V291;
                                                        let v291 = match l264 {
                                                            0 => {
                                                                let e291 = {
                                                                    let l265 = *base.add(8).cast::<*mut u8>();
                                                                    let l266 = *base.add(12).cast::<usize>();
                                                                    let len267 = l266;
                                                                    let bytes267 = _rt::Vec::from_raw_parts(
                                                                        l265.cast(),
                                                                        len267,
                                                                        len267,
                                                                    );
                                                                    let l268 = *base.add(16).cast::<i64>();
                                                                    let l269 = *base.add(24).cast::<i32>();
                                                                    let l270 = i32::from(*base.add(32).cast::<u8>());
                                                                    let l274 = i32::from(*base.add(48).cast::<u8>());
                                                                    let l276 = *base.add(64).cast::<*mut u8>();
                                                                    let l277 = *base.add(68).cast::<usize>();
                                                                    let base286 = l276;
                                                                    let len286 = l277;
                                                                    let mut result286 = _rt::Vec::with_capacity(len286);
                                                                    for i in 0..len286 {
                                                                        let base = base286.add(i * 20);
                                                                        let e286 = {
                                                                            let l278 = *base.add(0).cast::<*mut u8>();
                                                                            let l279 = *base.add(4).cast::<usize>();
                                                                            let len280 = l279;
                                                                            let bytes280 = _rt::Vec::from_raw_parts(
                                                                                l278.cast(),
                                                                                len280,
                                                                                len280,
                                                                            );
                                                                            let l281 = i32::from(*base.add(8).cast::<u8>());
                                                                            use super::super::super::super::golem::api::context::AttributeValue as V285;
                                                                            let v285 = match l281 {
                                                                                n => {
                                                                                    debug_assert_eq!(n, 0, "invalid enum discriminant");
                                                                                    let e285 = {
                                                                                        let l282 = *base.add(12).cast::<*mut u8>();
                                                                                        let l283 = *base.add(16).cast::<usize>();
                                                                                        let len284 = l283;
                                                                                        let bytes284 = _rt::Vec::from_raw_parts(
                                                                                            l282.cast(),
                                                                                            len284,
                                                                                            len284,
                                                                                        );
                                                                                        _rt::string_lift(bytes284)
                                                                                    };
                                                                                    V285::String(e285)
                                                                                }
                                                                            };
                                                                            super::super::super::super::golem::api::context::Attribute {
                                                                                key: _rt::string_lift(bytes280),
                                                                                value: v285,
                                                                            }
                                                                        };
                                                                        result286.push(e286);
                                                                    }
                                                                    _rt::cabi_dealloc(base286, len286 * 20, 4);
                                                                    let l287 = i32::from(*base.add(72).cast::<u8>());
                                                                    super::super::super::super::golem::api::oplog::LocalSpanData {
                                                                        span_id: _rt::string_lift(bytes267),
                                                                        start: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                            seconds: l268 as u64,
                                                                            nanoseconds: l269 as u32,
                                                                        },
                                                                        parent: match l270 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l271 = *base.add(36).cast::<*mut u8>();
                                                                                    let l272 = *base.add(40).cast::<usize>();
                                                                                    let len273 = l272;
                                                                                    let bytes273 = _rt::Vec::from_raw_parts(
                                                                                        l271.cast(),
                                                                                        len273,
                                                                                        len273,
                                                                                    );
                                                                                    _rt::string_lift(bytes273)
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        linked_context: match l274 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l275 = *base.add(56).cast::<i64>();
                                                                                    l275 as u64
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        attributes: result286,
                                                                        inherited: _rt::bool_lift(l287 as u8),
                                                                    }
                                                                };
                                                                V291::LocalSpan(e291)
                                                            }
                                                            n => {
                                                                debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                                let e291 = {
                                                                    let l288 = *base.add(8).cast::<*mut u8>();
                                                                    let l289 = *base.add(12).cast::<usize>();
                                                                    let len290 = l289;
                                                                    let bytes290 = _rt::Vec::from_raw_parts(
                                                                        l288.cast(),
                                                                        len290,
                                                                        len290,
                                                                    );
                                                                    super::super::super::super::golem::api::oplog::ExternalSpanData {
                                                                        span_id: _rt::string_lift(bytes290),
                                                                    }
                                                                };
                                                                V291::ExternalSpan(e291)
                                                            }
                                                        };
                                                        v291
                                                    };
                                                    result292.push(e292);
                                                }
                                                _rt::cabi_dealloc(base292, len292 * 80, 8);
                                                result292
                                            };
                                            result293.push(e293);
                                        }
                                        _rt::cabi_dealloc(base293, len293 * 8, 4);
                                        super::super::super::super::golem::api::oplog::ExportedFunctionInvokedParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l192 as u64,
                                                nanoseconds: l193 as u32,
                                            },
                                            function_name: _rt::string_lift(bytes196),
                                            request: result247,
                                            idempotency_key: _rt::string_lift(bytes250),
                                            trace_id: _rt::string_lift(bytes253),
                                            trace_states: result259,
                                            invocation_context: result293,
                                        }
                                    };
                                    V648::ExportedFunctionInvoked(e648)
                                }
                                3 => {
                                    let e648 = {
                                        let l294 = *base.add(8).cast::<i64>();
                                        let l295 = *base.add(16).cast::<i32>();
                                        let l296 = *base.add(24).cast::<*mut u8>();
                                        let l297 = *base.add(28).cast::<usize>();
                                        let base343 = l296;
                                        let len343 = l297;
                                        let mut result343 = _rt::Vec::with_capacity(len343);
                                        for i in 0..len343 {
                                            let base = base343.add(i * 24);
                                            let e343 = {
                                                let l298 = i32::from(*base.add(0).cast::<u8>());
                                                use super::super::super::super::golem::rpc::types::WitNode as V342;
                                                let v342 = match l298 {
                                                    0 => {
                                                        let e342 = {
                                                            let l299 = *base.add(8).cast::<*mut u8>();
                                                            let l300 = *base.add(12).cast::<usize>();
                                                            let len301 = l300;
                                                            _rt::Vec::from_raw_parts(l299.cast(), len301, len301)
                                                        };
                                                        V342::RecordValue(e342)
                                                    }
                                                    1 => {
                                                        let e342 = {
                                                            let l302 = *base.add(8).cast::<i32>();
                                                            let l303 = i32::from(*base.add(12).cast::<u8>());
                                                            (
                                                                l302 as u32,
                                                                match l303 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l304 = *base.add(16).cast::<i32>();
                                                                            l304
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                            )
                                                        };
                                                        V342::VariantValue(e342)
                                                    }
                                                    2 => {
                                                        let e342 = {
                                                            let l305 = *base.add(8).cast::<i32>();
                                                            l305 as u32
                                                        };
                                                        V342::EnumValue(e342)
                                                    }
                                                    3 => {
                                                        let e342 = {
                                                            let l306 = *base.add(8).cast::<*mut u8>();
                                                            let l307 = *base.add(12).cast::<usize>();
                                                            let base309 = l306;
                                                            let len309 = l307;
                                                            let mut result309 = _rt::Vec::with_capacity(len309);
                                                            for i in 0..len309 {
                                                                let base = base309.add(i * 1);
                                                                let e309 = {
                                                                    let l308 = i32::from(*base.add(0).cast::<u8>());
                                                                    _rt::bool_lift(l308 as u8)
                                                                };
                                                                result309.push(e309);
                                                            }
                                                            _rt::cabi_dealloc(base309, len309 * 1, 1);
                                                            result309
                                                        };
                                                        V342::FlagsValue(e342)
                                                    }
                                                    4 => {
                                                        let e342 = {
                                                            let l310 = *base.add(8).cast::<*mut u8>();
                                                            let l311 = *base.add(12).cast::<usize>();
                                                            let len312 = l311;
                                                            _rt::Vec::from_raw_parts(l310.cast(), len312, len312)
                                                        };
                                                        V342::TupleValue(e342)
                                                    }
                                                    5 => {
                                                        let e342 = {
                                                            let l313 = *base.add(8).cast::<*mut u8>();
                                                            let l314 = *base.add(12).cast::<usize>();
                                                            let len315 = l314;
                                                            _rt::Vec::from_raw_parts(l313.cast(), len315, len315)
                                                        };
                                                        V342::ListValue(e342)
                                                    }
                                                    6 => {
                                                        let e342 = {
                                                            let l316 = i32::from(*base.add(8).cast::<u8>());
                                                            match l316 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l317 = *base.add(12).cast::<i32>();
                                                                        l317
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            }
                                                        };
                                                        V342::OptionValue(e342)
                                                    }
                                                    7 => {
                                                        let e342 = {
                                                            let l318 = i32::from(*base.add(8).cast::<u8>());
                                                            match l318 {
                                                                0 => {
                                                                    let e = {
                                                                        let l319 = i32::from(*base.add(12).cast::<u8>());
                                                                        match l319 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l320 = *base.add(16).cast::<i32>();
                                                                                    l320
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        }
                                                                    };
                                                                    Ok(e)
                                                                }
                                                                1 => {
                                                                    let e = {
                                                                        let l321 = i32::from(*base.add(12).cast::<u8>());
                                                                        match l321 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l322 = *base.add(16).cast::<i32>();
                                                                                    l322
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        }
                                                                    };
                                                                    Err(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            }
                                                        };
                                                        V342::ResultValue(e342)
                                                    }
                                                    8 => {
                                                        let e342 = {
                                                            let l323 = i32::from(*base.add(8).cast::<u8>());
                                                            l323 as u8
                                                        };
                                                        V342::PrimU8(e342)
                                                    }
                                                    9 => {
                                                        let e342 = {
                                                            let l324 = i32::from(*base.add(8).cast::<u16>());
                                                            l324 as u16
                                                        };
                                                        V342::PrimU16(e342)
                                                    }
                                                    10 => {
                                                        let e342 = {
                                                            let l325 = *base.add(8).cast::<i32>();
                                                            l325 as u32
                                                        };
                                                        V342::PrimU32(e342)
                                                    }
                                                    11 => {
                                                        let e342 = {
                                                            let l326 = *base.add(8).cast::<i64>();
                                                            l326 as u64
                                                        };
                                                        V342::PrimU64(e342)
                                                    }
                                                    12 => {
                                                        let e342 = {
                                                            let l327 = i32::from(*base.add(8).cast::<i8>());
                                                            l327 as i8
                                                        };
                                                        V342::PrimS8(e342)
                                                    }
                                                    13 => {
                                                        let e342 = {
                                                            let l328 = i32::from(*base.add(8).cast::<i16>());
                                                            l328 as i16
                                                        };
                                                        V342::PrimS16(e342)
                                                    }
                                                    14 => {
                                                        let e342 = {
                                                            let l329 = *base.add(8).cast::<i32>();
                                                            l329
                                                        };
                                                        V342::PrimS32(e342)
                                                    }
                                                    15 => {
                                                        let e342 = {
                                                            let l330 = *base.add(8).cast::<i64>();
                                                            l330
                                                        };
                                                        V342::PrimS64(e342)
                                                    }
                                                    16 => {
                                                        let e342 = {
                                                            let l331 = *base.add(8).cast::<f32>();
                                                            l331
                                                        };
                                                        V342::PrimFloat32(e342)
                                                    }
                                                    17 => {
                                                        let e342 = {
                                                            let l332 = *base.add(8).cast::<f64>();
                                                            l332
                                                        };
                                                        V342::PrimFloat64(e342)
                                                    }
                                                    18 => {
                                                        let e342 = {
                                                            let l333 = *base.add(8).cast::<i32>();
                                                            _rt::char_lift(l333 as u32)
                                                        };
                                                        V342::PrimChar(e342)
                                                    }
                                                    19 => {
                                                        let e342 = {
                                                            let l334 = i32::from(*base.add(8).cast::<u8>());
                                                            _rt::bool_lift(l334 as u8)
                                                        };
                                                        V342::PrimBool(e342)
                                                    }
                                                    20 => {
                                                        let e342 = {
                                                            let l335 = *base.add(8).cast::<*mut u8>();
                                                            let l336 = *base.add(12).cast::<usize>();
                                                            let len337 = l336;
                                                            let bytes337 = _rt::Vec::from_raw_parts(
                                                                l335.cast(),
                                                                len337,
                                                                len337,
                                                            );
                                                            _rt::string_lift(bytes337)
                                                        };
                                                        V342::PrimString(e342)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                        let e342 = {
                                                            let l338 = *base.add(8).cast::<*mut u8>();
                                                            let l339 = *base.add(12).cast::<usize>();
                                                            let len340 = l339;
                                                            let bytes340 = _rt::Vec::from_raw_parts(
                                                                l338.cast(),
                                                                len340,
                                                                len340,
                                                            );
                                                            let l341 = *base.add(16).cast::<i64>();
                                                            (
                                                                super::super::super::super::golem::rpc::types::Uri {
                                                                    value: _rt::string_lift(bytes340),
                                                                },
                                                                l341 as u64,
                                                            )
                                                        };
                                                        V342::Handle(e342)
                                                    }
                                                };
                                                v342
                                            };
                                            result343.push(e343);
                                        }
                                        _rt::cabi_dealloc(base343, len343 * 24, 8);
                                        let l344 = *base.add(32).cast::<i64>();
                                        super::super::super::super::golem::api::oplog::ExportedFunctionCompletedParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l294 as u64,
                                                nanoseconds: l295 as u32,
                                            },
                                            response: super::super::super::super::golem::rpc::types::WitValue {
                                                nodes: result343,
                                            },
                                            consumed_fuel: l344,
                                        }
                                    };
                                    V648::ExportedFunctionCompleted(e648)
                                }
                                4 => {
                                    let e648 = {
                                        let l345 = *base.add(8).cast::<i64>();
                                        let l346 = *base.add(16).cast::<i32>();
                                        super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                            seconds: l345 as u64,
                                            nanoseconds: l346 as u32,
                                        }
                                    };
                                    V648::Suspend(e648)
                                }
                                5 => {
                                    let e648 = {
                                        let l347 = *base.add(8).cast::<i64>();
                                        let l348 = *base.add(16).cast::<i32>();
                                        let l349 = *base.add(24).cast::<*mut u8>();
                                        let l350 = *base.add(28).cast::<usize>();
                                        let len351 = l350;
                                        let bytes351 = _rt::Vec::from_raw_parts(
                                            l349.cast(),
                                            len351,
                                            len351,
                                        );
                                        super::super::super::super::golem::api::oplog::ErrorParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l347 as u64,
                                                nanoseconds: l348 as u32,
                                            },
                                            error: _rt::string_lift(bytes351),
                                        }
                                    };
                                    V648::Error(e648)
                                }
                                6 => {
                                    let e648 = {
                                        let l352 = *base.add(8).cast::<i64>();
                                        let l353 = *base.add(16).cast::<i32>();
                                        super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                            seconds: l352 as u64,
                                            nanoseconds: l353 as u32,
                                        }
                                    };
                                    V648::NoOp(e648)
                                }
                                7 => {
                                    let e648 = {
                                        let l354 = *base.add(8).cast::<i64>();
                                        let l355 = *base.add(16).cast::<i32>();
                                        let l356 = *base.add(24).cast::<i64>();
                                        let l357 = *base.add(32).cast::<i64>();
                                        super::super::super::super::golem::api::oplog::JumpParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l354 as u64,
                                                nanoseconds: l355 as u32,
                                            },
                                            start: l356 as u64,
                                            end: l357 as u64,
                                        }
                                    };
                                    V648::Jump(e648)
                                }
                                8 => {
                                    let e648 = {
                                        let l358 = *base.add(8).cast::<i64>();
                                        let l359 = *base.add(16).cast::<i32>();
                                        super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                            seconds: l358 as u64,
                                            nanoseconds: l359 as u32,
                                        }
                                    };
                                    V648::Interrupted(e648)
                                }
                                9 => {
                                    let e648 = {
                                        let l360 = *base.add(8).cast::<i64>();
                                        let l361 = *base.add(16).cast::<i32>();
                                        super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                            seconds: l360 as u64,
                                            nanoseconds: l361 as u32,
                                        }
                                    };
                                    V648::Exited(e648)
                                }
                                10 => {
                                    let e648 = {
                                        let l362 = *base.add(8).cast::<i64>();
                                        let l363 = *base.add(16).cast::<i32>();
                                        let l364 = *base.add(24).cast::<i32>();
                                        let l365 = *base.add(32).cast::<i64>();
                                        let l366 = *base.add(40).cast::<i64>();
                                        let l367 = *base.add(48).cast::<f64>();
                                        let l368 = i32::from(*base.add(56).cast::<u8>());
                                        super::super::super::super::golem::api::oplog::ChangeRetryPolicyParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l362 as u64,
                                                nanoseconds: l363 as u32,
                                            },
                                            retry_policy: super::super::super::super::golem::api::host::RetryPolicy {
                                                max_attempts: l364 as u32,
                                                min_delay: l365 as u64,
                                                max_delay: l366 as u64,
                                                multiplier: l367,
                                                max_jitter_factor: match l368 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l369 = *base.add(64).cast::<f64>();
                                                            l369
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                            },
                                        }
                                    };
                                    V648::ChangeRetryPolicy(e648)
                                }
                                11 => {
                                    let e648 = {
                                        let l370 = *base.add(8).cast::<i64>();
                                        let l371 = *base.add(16).cast::<i32>();
                                        super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                            seconds: l370 as u64,
                                            nanoseconds: l371 as u32,
                                        }
                                    };
                                    V648::BeginAtomicRegion(e648)
                                }
                                12 => {
                                    let e648 = {
                                        let l372 = *base.add(8).cast::<i64>();
                                        let l373 = *base.add(16).cast::<i32>();
                                        let l374 = *base.add(24).cast::<i64>();
                                        super::super::super::super::golem::api::oplog::EndAtomicRegionParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l372 as u64,
                                                nanoseconds: l373 as u32,
                                            },
                                            begin_index: l374 as u64,
                                        }
                                    };
                                    V648::EndAtomicRegion(e648)
                                }
                                13 => {
                                    let e648 = {
                                        let l375 = *base.add(8).cast::<i64>();
                                        let l376 = *base.add(16).cast::<i32>();
                                        super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                            seconds: l375 as u64,
                                            nanoseconds: l376 as u32,
                                        }
                                    };
                                    V648::BeginRemoteWrite(e648)
                                }
                                14 => {
                                    let e648 = {
                                        let l377 = *base.add(8).cast::<i64>();
                                        let l378 = *base.add(16).cast::<i32>();
                                        let l379 = *base.add(24).cast::<i64>();
                                        super::super::super::super::golem::api::oplog::EndRemoteWriteParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l377 as u64,
                                                nanoseconds: l378 as u32,
                                            },
                                            begin_index: l379 as u64,
                                        }
                                    };
                                    V648::EndRemoteWrite(e648)
                                }
                                15 => {
                                    let e648 = {
                                        let l380 = *base.add(8).cast::<i64>();
                                        let l381 = *base.add(16).cast::<i32>();
                                        let l382 = i32::from(*base.add(24).cast::<u8>());
                                        use super::super::super::super::golem::api::oplog::WorkerInvocation as V442;
                                        let v442 = match l382 {
                                            0 => {
                                                let e442 = {
                                                    let l383 = *base.add(32).cast::<*mut u8>();
                                                    let l384 = *base.add(36).cast::<usize>();
                                                    let len385 = l384;
                                                    let bytes385 = _rt::Vec::from_raw_parts(
                                                        l383.cast(),
                                                        len385,
                                                        len385,
                                                    );
                                                    let l386 = *base.add(40).cast::<*mut u8>();
                                                    let l387 = *base.add(44).cast::<usize>();
                                                    let len388 = l387;
                                                    let bytes388 = _rt::Vec::from_raw_parts(
                                                        l386.cast(),
                                                        len388,
                                                        len388,
                                                    );
                                                    let l389 = i32::from(*base.add(48).cast::<u8>());
                                                    super::super::super::super::golem::api::oplog::ExportedFunctionInvocationParameters {
                                                        idempotency_key: _rt::string_lift(bytes385),
                                                        function_name: _rt::string_lift(bytes388),
                                                        input: match l389 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l390 = *base.add(52).cast::<*mut u8>();
                                                                    let l391 = *base.add(56).cast::<usize>();
                                                                    let base440 = l390;
                                                                    let len440 = l391;
                                                                    let mut result440 = _rt::Vec::with_capacity(len440);
                                                                    for i in 0..len440 {
                                                                        let base = base440.add(i * 8);
                                                                        let e440 = {
                                                                            let l392 = *base.add(0).cast::<*mut u8>();
                                                                            let l393 = *base.add(4).cast::<usize>();
                                                                            let base439 = l392;
                                                                            let len439 = l393;
                                                                            let mut result439 = _rt::Vec::with_capacity(len439);
                                                                            for i in 0..len439 {
                                                                                let base = base439.add(i * 24);
                                                                                let e439 = {
                                                                                    let l394 = i32::from(*base.add(0).cast::<u8>());
                                                                                    use super::super::super::super::golem::rpc::types::WitNode as V438;
                                                                                    let v438 = match l394 {
                                                                                        0 => {
                                                                                            let e438 = {
                                                                                                let l395 = *base.add(8).cast::<*mut u8>();
                                                                                                let l396 = *base.add(12).cast::<usize>();
                                                                                                let len397 = l396;
                                                                                                _rt::Vec::from_raw_parts(l395.cast(), len397, len397)
                                                                                            };
                                                                                            V438::RecordValue(e438)
                                                                                        }
                                                                                        1 => {
                                                                                            let e438 = {
                                                                                                let l398 = *base.add(8).cast::<i32>();
                                                                                                let l399 = i32::from(*base.add(12).cast::<u8>());
                                                                                                (
                                                                                                    l398 as u32,
                                                                                                    match l399 {
                                                                                                        0 => None,
                                                                                                        1 => {
                                                                                                            let e = {
                                                                                                                let l400 = *base.add(16).cast::<i32>();
                                                                                                                l400
                                                                                                            };
                                                                                                            Some(e)
                                                                                                        }
                                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                                    },
                                                                                                )
                                                                                            };
                                                                                            V438::VariantValue(e438)
                                                                                        }
                                                                                        2 => {
                                                                                            let e438 = {
                                                                                                let l401 = *base.add(8).cast::<i32>();
                                                                                                l401 as u32
                                                                                            };
                                                                                            V438::EnumValue(e438)
                                                                                        }
                                                                                        3 => {
                                                                                            let e438 = {
                                                                                                let l402 = *base.add(8).cast::<*mut u8>();
                                                                                                let l403 = *base.add(12).cast::<usize>();
                                                                                                let base405 = l402;
                                                                                                let len405 = l403;
                                                                                                let mut result405 = _rt::Vec::with_capacity(len405);
                                                                                                for i in 0..len405 {
                                                                                                    let base = base405.add(i * 1);
                                                                                                    let e405 = {
                                                                                                        let l404 = i32::from(*base.add(0).cast::<u8>());
                                                                                                        _rt::bool_lift(l404 as u8)
                                                                                                    };
                                                                                                    result405.push(e405);
                                                                                                }
                                                                                                _rt::cabi_dealloc(base405, len405 * 1, 1);
                                                                                                result405
                                                                                            };
                                                                                            V438::FlagsValue(e438)
                                                                                        }
                                                                                        4 => {
                                                                                            let e438 = {
                                                                                                let l406 = *base.add(8).cast::<*mut u8>();
                                                                                                let l407 = *base.add(12).cast::<usize>();
                                                                                                let len408 = l407;
                                                                                                _rt::Vec::from_raw_parts(l406.cast(), len408, len408)
                                                                                            };
                                                                                            V438::TupleValue(e438)
                                                                                        }
                                                                                        5 => {
                                                                                            let e438 = {
                                                                                                let l409 = *base.add(8).cast::<*mut u8>();
                                                                                                let l410 = *base.add(12).cast::<usize>();
                                                                                                let len411 = l410;
                                                                                                _rt::Vec::from_raw_parts(l409.cast(), len411, len411)
                                                                                            };
                                                                                            V438::ListValue(e438)
                                                                                        }
                                                                                        6 => {
                                                                                            let e438 = {
                                                                                                let l412 = i32::from(*base.add(8).cast::<u8>());
                                                                                                match l412 {
                                                                                                    0 => None,
                                                                                                    1 => {
                                                                                                        let e = {
                                                                                                            let l413 = *base.add(12).cast::<i32>();
                                                                                                            l413
                                                                                                        };
                                                                                                        Some(e)
                                                                                                    }
                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                }
                                                                                            };
                                                                                            V438::OptionValue(e438)
                                                                                        }
                                                                                        7 => {
                                                                                            let e438 = {
                                                                                                let l414 = i32::from(*base.add(8).cast::<u8>());
                                                                                                match l414 {
                                                                                                    0 => {
                                                                                                        let e = {
                                                                                                            let l415 = i32::from(*base.add(12).cast::<u8>());
                                                                                                            match l415 {
                                                                                                                0 => None,
                                                                                                                1 => {
                                                                                                                    let e = {
                                                                                                                        let l416 = *base.add(16).cast::<i32>();
                                                                                                                        l416
                                                                                                                    };
                                                                                                                    Some(e)
                                                                                                                }
                                                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                                                            }
                                                                                                        };
                                                                                                        Ok(e)
                                                                                                    }
                                                                                                    1 => {
                                                                                                        let e = {
                                                                                                            let l417 = i32::from(*base.add(12).cast::<u8>());
                                                                                                            match l417 {
                                                                                                                0 => None,
                                                                                                                1 => {
                                                                                                                    let e = {
                                                                                                                        let l418 = *base.add(16).cast::<i32>();
                                                                                                                        l418
                                                                                                                    };
                                                                                                                    Some(e)
                                                                                                                }
                                                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                                                            }
                                                                                                        };
                                                                                                        Err(e)
                                                                                                    }
                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                }
                                                                                            };
                                                                                            V438::ResultValue(e438)
                                                                                        }
                                                                                        8 => {
                                                                                            let e438 = {
                                                                                                let l419 = i32::from(*base.add(8).cast::<u8>());
                                                                                                l419 as u8
                                                                                            };
                                                                                            V438::PrimU8(e438)
                                                                                        }
                                                                                        9 => {
                                                                                            let e438 = {
                                                                                                let l420 = i32::from(*base.add(8).cast::<u16>());
                                                                                                l420 as u16
                                                                                            };
                                                                                            V438::PrimU16(e438)
                                                                                        }
                                                                                        10 => {
                                                                                            let e438 = {
                                                                                                let l421 = *base.add(8).cast::<i32>();
                                                                                                l421 as u32
                                                                                            };
                                                                                            V438::PrimU32(e438)
                                                                                        }
                                                                                        11 => {
                                                                                            let e438 = {
                                                                                                let l422 = *base.add(8).cast::<i64>();
                                                                                                l422 as u64
                                                                                            };
                                                                                            V438::PrimU64(e438)
                                                                                        }
                                                                                        12 => {
                                                                                            let e438 = {
                                                                                                let l423 = i32::from(*base.add(8).cast::<i8>());
                                                                                                l423 as i8
                                                                                            };
                                                                                            V438::PrimS8(e438)
                                                                                        }
                                                                                        13 => {
                                                                                            let e438 = {
                                                                                                let l424 = i32::from(*base.add(8).cast::<i16>());
                                                                                                l424 as i16
                                                                                            };
                                                                                            V438::PrimS16(e438)
                                                                                        }
                                                                                        14 => {
                                                                                            let e438 = {
                                                                                                let l425 = *base.add(8).cast::<i32>();
                                                                                                l425
                                                                                            };
                                                                                            V438::PrimS32(e438)
                                                                                        }
                                                                                        15 => {
                                                                                            let e438 = {
                                                                                                let l426 = *base.add(8).cast::<i64>();
                                                                                                l426
                                                                                            };
                                                                                            V438::PrimS64(e438)
                                                                                        }
                                                                                        16 => {
                                                                                            let e438 = {
                                                                                                let l427 = *base.add(8).cast::<f32>();
                                                                                                l427
                                                                                            };
                                                                                            V438::PrimFloat32(e438)
                                                                                        }
                                                                                        17 => {
                                                                                            let e438 = {
                                                                                                let l428 = *base.add(8).cast::<f64>();
                                                                                                l428
                                                                                            };
                                                                                            V438::PrimFloat64(e438)
                                                                                        }
                                                                                        18 => {
                                                                                            let e438 = {
                                                                                                let l429 = *base.add(8).cast::<i32>();
                                                                                                _rt::char_lift(l429 as u32)
                                                                                            };
                                                                                            V438::PrimChar(e438)
                                                                                        }
                                                                                        19 => {
                                                                                            let e438 = {
                                                                                                let l430 = i32::from(*base.add(8).cast::<u8>());
                                                                                                _rt::bool_lift(l430 as u8)
                                                                                            };
                                                                                            V438::PrimBool(e438)
                                                                                        }
                                                                                        20 => {
                                                                                            let e438 = {
                                                                                                let l431 = *base.add(8).cast::<*mut u8>();
                                                                                                let l432 = *base.add(12).cast::<usize>();
                                                                                                let len433 = l432;
                                                                                                let bytes433 = _rt::Vec::from_raw_parts(
                                                                                                    l431.cast(),
                                                                                                    len433,
                                                                                                    len433,
                                                                                                );
                                                                                                _rt::string_lift(bytes433)
                                                                                            };
                                                                                            V438::PrimString(e438)
                                                                                        }
                                                                                        n => {
                                                                                            debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                                            let e438 = {
                                                                                                let l434 = *base.add(8).cast::<*mut u8>();
                                                                                                let l435 = *base.add(12).cast::<usize>();
                                                                                                let len436 = l435;
                                                                                                let bytes436 = _rt::Vec::from_raw_parts(
                                                                                                    l434.cast(),
                                                                                                    len436,
                                                                                                    len436,
                                                                                                );
                                                                                                let l437 = *base.add(16).cast::<i64>();
                                                                                                (
                                                                                                    super::super::super::super::golem::rpc::types::Uri {
                                                                                                        value: _rt::string_lift(bytes436),
                                                                                                    },
                                                                                                    l437 as u64,
                                                                                                )
                                                                                            };
                                                                                            V438::Handle(e438)
                                                                                        }
                                                                                    };
                                                                                    v438
                                                                                };
                                                                                result439.push(e439);
                                                                            }
                                                                            _rt::cabi_dealloc(base439, len439 * 24, 8);
                                                                            super::super::super::super::golem::rpc::types::WitValue {
                                                                                nodes: result439,
                                                                            }
                                                                        };
                                                                        result440.push(e440);
                                                                    }
                                                                    _rt::cabi_dealloc(base440, len440 * 8, 4);
                                                                    result440
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                V442::ExportedFunction(e442)
                                            }
                                            n => {
                                                debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                let e442 = {
                                                    let l441 = *base.add(32).cast::<i64>();
                                                    l441 as u64
                                                };
                                                V442::ManualUpdate(e442)
                                            }
                                        };
                                        super::super::super::super::golem::api::oplog::PendingWorkerInvocationParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l380 as u64,
                                                nanoseconds: l381 as u32,
                                            },
                                            invocation: v442,
                                        }
                                    };
                                    V648::PendingWorkerInvocation(e648)
                                }
                                16 => {
                                    let e648 = {
                                        let l443 = *base.add(8).cast::<i64>();
                                        let l444 = *base.add(16).cast::<i32>();
                                        let l445 = *base.add(24).cast::<i64>();
                                        let l446 = i32::from(*base.add(32).cast::<u8>());
                                        use super::super::super::super::golem::api::oplog::UpdateDescription as V450;
                                        let v450 = match l446 {
                                            0 => V450::AutoUpdate,
                                            n => {
                                                debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                let e450 = {
                                                    let l447 = *base.add(36).cast::<*mut u8>();
                                                    let l448 = *base.add(40).cast::<usize>();
                                                    let len449 = l448;
                                                    _rt::Vec::from_raw_parts(l447.cast(), len449, len449)
                                                };
                                                V450::SnapshotBased(e450)
                                            }
                                        };
                                        super::super::super::super::golem::api::oplog::PendingUpdateParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l443 as u64,
                                                nanoseconds: l444 as u32,
                                            },
                                            target_version: l445 as u64,
                                            update_description: v450,
                                        }
                                    };
                                    V648::PendingUpdate(e648)
                                }
                                17 => {
                                    let e648 = {
                                        let l451 = *base.add(8).cast::<i64>();
                                        let l452 = *base.add(16).cast::<i32>();
                                        let l453 = *base.add(24).cast::<i64>();
                                        let l454 = *base.add(32).cast::<i64>();
                                        let l455 = *base.add(40).cast::<*mut u8>();
                                        let l456 = *base.add(44).cast::<usize>();
                                        let base474 = l455;
                                        let len474 = l456;
                                        let mut result474 = _rt::Vec::with_capacity(len474);
                                        for i in 0..len474 {
                                            let base = base474.add(i * 40);
                                            let e474 = {
                                                let l457 = *base.add(0).cast::<i64>();
                                                let l458 = *base.add(8).cast::<i64>();
                                                let l459 = *base.add(16).cast::<*mut u8>();
                                                let l460 = *base.add(20).cast::<usize>();
                                                let len461 = l460;
                                                let bytes461 = _rt::Vec::from_raw_parts(
                                                    l459.cast(),
                                                    len461,
                                                    len461,
                                                );
                                                let l462 = *base.add(24).cast::<*mut u8>();
                                                let l463 = *base.add(28).cast::<usize>();
                                                let len464 = l463;
                                                let bytes464 = _rt::Vec::from_raw_parts(
                                                    l462.cast(),
                                                    len464,
                                                    len464,
                                                );
                                                let l465 = *base.add(32).cast::<*mut u8>();
                                                let l466 = *base.add(36).cast::<usize>();
                                                let base473 = l465;
                                                let len473 = l466;
                                                let mut result473 = _rt::Vec::with_capacity(len473);
                                                for i in 0..len473 {
                                                    let base = base473.add(i * 16);
                                                    let e473 = {
                                                        let l467 = *base.add(0).cast::<*mut u8>();
                                                        let l468 = *base.add(4).cast::<usize>();
                                                        let len469 = l468;
                                                        let bytes469 = _rt::Vec::from_raw_parts(
                                                            l467.cast(),
                                                            len469,
                                                            len469,
                                                        );
                                                        let l470 = *base.add(8).cast::<*mut u8>();
                                                        let l471 = *base.add(12).cast::<usize>();
                                                        let len472 = l471;
                                                        let bytes472 = _rt::Vec::from_raw_parts(
                                                            l470.cast(),
                                                            len472,
                                                            len472,
                                                        );
                                                        (_rt::string_lift(bytes469), _rt::string_lift(bytes472))
                                                    };
                                                    result473.push(e473);
                                                }
                                                _rt::cabi_dealloc(base473, len473 * 16, 4);
                                                super::super::super::super::golem::api::oplog::PluginInstallationDescription {
                                                    installation_id: super::super::super::super::golem::api::host::Uuid {
                                                        high_bits: l457 as u64,
                                                        low_bits: l458 as u64,
                                                    },
                                                    name: _rt::string_lift(bytes461),
                                                    version: _rt::string_lift(bytes464),
                                                    parameters: result473,
                                                }
                                            };
                                            result474.push(e474);
                                        }
                                        _rt::cabi_dealloc(base474, len474 * 40, 8);
                                        super::super::super::super::golem::api::oplog::SuccessfulUpdateParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l451 as u64,
                                                nanoseconds: l452 as u32,
                                            },
                                            target_version: l453 as u64,
                                            new_component_size: l454 as u64,
                                            new_active_plugins: result474,
                                        }
                                    };
                                    V648::SuccessfulUpdate(e648)
                                }
                                18 => {
                                    let e648 = {
                                        let l475 = *base.add(8).cast::<i64>();
                                        let l476 = *base.add(16).cast::<i32>();
                                        let l477 = *base.add(24).cast::<i64>();
                                        let l478 = i32::from(*base.add(32).cast::<u8>());
                                        super::super::super::super::golem::api::oplog::FailedUpdateParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l475 as u64,
                                                nanoseconds: l476 as u32,
                                            },
                                            target_version: l477 as u64,
                                            details: match l478 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l479 = *base.add(36).cast::<*mut u8>();
                                                        let l480 = *base.add(40).cast::<usize>();
                                                        let len481 = l480;
                                                        let bytes481 = _rt::Vec::from_raw_parts(
                                                            l479.cast(),
                                                            len481,
                                                            len481,
                                                        );
                                                        _rt::string_lift(bytes481)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                        }
                                    };
                                    V648::FailedUpdate(e648)
                                }
                                19 => {
                                    let e648 = {
                                        let l482 = *base.add(8).cast::<i64>();
                                        let l483 = *base.add(16).cast::<i32>();
                                        let l484 = *base.add(24).cast::<i64>();
                                        super::super::super::super::golem::api::oplog::GrowMemoryParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l482 as u64,
                                                nanoseconds: l483 as u32,
                                            },
                                            delta: l484 as u64,
                                        }
                                    };
                                    V648::GrowMemory(e648)
                                }
                                20 => {
                                    let e648 = {
                                        let l485 = *base.add(8).cast::<i64>();
                                        let l486 = *base.add(16).cast::<i32>();
                                        let l487 = *base.add(24).cast::<i64>();
                                        super::super::super::super::golem::api::oplog::CreateResourceParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l485 as u64,
                                                nanoseconds: l486 as u32,
                                            },
                                            resource_id: l487 as u64,
                                        }
                                    };
                                    V648::CreateResource(e648)
                                }
                                21 => {
                                    let e648 = {
                                        let l488 = *base.add(8).cast::<i64>();
                                        let l489 = *base.add(16).cast::<i32>();
                                        let l490 = *base.add(24).cast::<i64>();
                                        super::super::super::super::golem::api::oplog::DropResourceParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l488 as u64,
                                                nanoseconds: l489 as u32,
                                            },
                                            resource_id: l490 as u64,
                                        }
                                    };
                                    V648::DropResource(e648)
                                }
                                22 => {
                                    let e648 = {
                                        let l491 = *base.add(8).cast::<i64>();
                                        let l492 = *base.add(16).cast::<i32>();
                                        let l493 = *base.add(24).cast::<i64>();
                                        let l494 = *base.add(32).cast::<*mut u8>();
                                        let l495 = *base.add(36).cast::<usize>();
                                        let len496 = l495;
                                        let bytes496 = _rt::Vec::from_raw_parts(
                                            l494.cast(),
                                            len496,
                                            len496,
                                        );
                                        let l497 = *base.add(40).cast::<*mut u8>();
                                        let l498 = *base.add(44).cast::<usize>();
                                        let base547 = l497;
                                        let len547 = l498;
                                        let mut result547 = _rt::Vec::with_capacity(len547);
                                        for i in 0..len547 {
                                            let base = base547.add(i * 8);
                                            let e547 = {
                                                let l499 = *base.add(0).cast::<*mut u8>();
                                                let l500 = *base.add(4).cast::<usize>();
                                                let base546 = l499;
                                                let len546 = l500;
                                                let mut result546 = _rt::Vec::with_capacity(len546);
                                                for i in 0..len546 {
                                                    let base = base546.add(i * 24);
                                                    let e546 = {
                                                        let l501 = i32::from(*base.add(0).cast::<u8>());
                                                        use super::super::super::super::golem::rpc::types::WitNode as V545;
                                                        let v545 = match l501 {
                                                            0 => {
                                                                let e545 = {
                                                                    let l502 = *base.add(8).cast::<*mut u8>();
                                                                    let l503 = *base.add(12).cast::<usize>();
                                                                    let len504 = l503;
                                                                    _rt::Vec::from_raw_parts(l502.cast(), len504, len504)
                                                                };
                                                                V545::RecordValue(e545)
                                                            }
                                                            1 => {
                                                                let e545 = {
                                                                    let l505 = *base.add(8).cast::<i32>();
                                                                    let l506 = i32::from(*base.add(12).cast::<u8>());
                                                                    (
                                                                        l505 as u32,
                                                                        match l506 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l507 = *base.add(16).cast::<i32>();
                                                                                    l507
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    )
                                                                };
                                                                V545::VariantValue(e545)
                                                            }
                                                            2 => {
                                                                let e545 = {
                                                                    let l508 = *base.add(8).cast::<i32>();
                                                                    l508 as u32
                                                                };
                                                                V545::EnumValue(e545)
                                                            }
                                                            3 => {
                                                                let e545 = {
                                                                    let l509 = *base.add(8).cast::<*mut u8>();
                                                                    let l510 = *base.add(12).cast::<usize>();
                                                                    let base512 = l509;
                                                                    let len512 = l510;
                                                                    let mut result512 = _rt::Vec::with_capacity(len512);
                                                                    for i in 0..len512 {
                                                                        let base = base512.add(i * 1);
                                                                        let e512 = {
                                                                            let l511 = i32::from(*base.add(0).cast::<u8>());
                                                                            _rt::bool_lift(l511 as u8)
                                                                        };
                                                                        result512.push(e512);
                                                                    }
                                                                    _rt::cabi_dealloc(base512, len512 * 1, 1);
                                                                    result512
                                                                };
                                                                V545::FlagsValue(e545)
                                                            }
                                                            4 => {
                                                                let e545 = {
                                                                    let l513 = *base.add(8).cast::<*mut u8>();
                                                                    let l514 = *base.add(12).cast::<usize>();
                                                                    let len515 = l514;
                                                                    _rt::Vec::from_raw_parts(l513.cast(), len515, len515)
                                                                };
                                                                V545::TupleValue(e545)
                                                            }
                                                            5 => {
                                                                let e545 = {
                                                                    let l516 = *base.add(8).cast::<*mut u8>();
                                                                    let l517 = *base.add(12).cast::<usize>();
                                                                    let len518 = l517;
                                                                    _rt::Vec::from_raw_parts(l516.cast(), len518, len518)
                                                                };
                                                                V545::ListValue(e545)
                                                            }
                                                            6 => {
                                                                let e545 = {
                                                                    let l519 = i32::from(*base.add(8).cast::<u8>());
                                                                    match l519 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l520 = *base.add(12).cast::<i32>();
                                                                                l520
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                V545::OptionValue(e545)
                                                            }
                                                            7 => {
                                                                let e545 = {
                                                                    let l521 = i32::from(*base.add(8).cast::<u8>());
                                                                    match l521 {
                                                                        0 => {
                                                                            let e = {
                                                                                let l522 = i32::from(*base.add(12).cast::<u8>());
                                                                                match l522 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l523 = *base.add(16).cast::<i32>();
                                                                                            l523
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                }
                                                                            };
                                                                            Ok(e)
                                                                        }
                                                                        1 => {
                                                                            let e = {
                                                                                let l524 = i32::from(*base.add(12).cast::<u8>());
                                                                                match l524 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l525 = *base.add(16).cast::<i32>();
                                                                                            l525
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                }
                                                                            };
                                                                            Err(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                V545::ResultValue(e545)
                                                            }
                                                            8 => {
                                                                let e545 = {
                                                                    let l526 = i32::from(*base.add(8).cast::<u8>());
                                                                    l526 as u8
                                                                };
                                                                V545::PrimU8(e545)
                                                            }
                                                            9 => {
                                                                let e545 = {
                                                                    let l527 = i32::from(*base.add(8).cast::<u16>());
                                                                    l527 as u16
                                                                };
                                                                V545::PrimU16(e545)
                                                            }
                                                            10 => {
                                                                let e545 = {
                                                                    let l528 = *base.add(8).cast::<i32>();
                                                                    l528 as u32
                                                                };
                                                                V545::PrimU32(e545)
                                                            }
                                                            11 => {
                                                                let e545 = {
                                                                    let l529 = *base.add(8).cast::<i64>();
                                                                    l529 as u64
                                                                };
                                                                V545::PrimU64(e545)
                                                            }
                                                            12 => {
                                                                let e545 = {
                                                                    let l530 = i32::from(*base.add(8).cast::<i8>());
                                                                    l530 as i8
                                                                };
                                                                V545::PrimS8(e545)
                                                            }
                                                            13 => {
                                                                let e545 = {
                                                                    let l531 = i32::from(*base.add(8).cast::<i16>());
                                                                    l531 as i16
                                                                };
                                                                V545::PrimS16(e545)
                                                            }
                                                            14 => {
                                                                let e545 = {
                                                                    let l532 = *base.add(8).cast::<i32>();
                                                                    l532
                                                                };
                                                                V545::PrimS32(e545)
                                                            }
                                                            15 => {
                                                                let e545 = {
                                                                    let l533 = *base.add(8).cast::<i64>();
                                                                    l533
                                                                };
                                                                V545::PrimS64(e545)
                                                            }
                                                            16 => {
                                                                let e545 = {
                                                                    let l534 = *base.add(8).cast::<f32>();
                                                                    l534
                                                                };
                                                                V545::PrimFloat32(e545)
                                                            }
                                                            17 => {
                                                                let e545 = {
                                                                    let l535 = *base.add(8).cast::<f64>();
                                                                    l535
                                                                };
                                                                V545::PrimFloat64(e545)
                                                            }
                                                            18 => {
                                                                let e545 = {
                                                                    let l536 = *base.add(8).cast::<i32>();
                                                                    _rt::char_lift(l536 as u32)
                                                                };
                                                                V545::PrimChar(e545)
                                                            }
                                                            19 => {
                                                                let e545 = {
                                                                    let l537 = i32::from(*base.add(8).cast::<u8>());
                                                                    _rt::bool_lift(l537 as u8)
                                                                };
                                                                V545::PrimBool(e545)
                                                            }
                                                            20 => {
                                                                let e545 = {
                                                                    let l538 = *base.add(8).cast::<*mut u8>();
                                                                    let l539 = *base.add(12).cast::<usize>();
                                                                    let len540 = l539;
                                                                    let bytes540 = _rt::Vec::from_raw_parts(
                                                                        l538.cast(),
                                                                        len540,
                                                                        len540,
                                                                    );
                                                                    _rt::string_lift(bytes540)
                                                                };
                                                                V545::PrimString(e545)
                                                            }
                                                            n => {
                                                                debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                let e545 = {
                                                                    let l541 = *base.add(8).cast::<*mut u8>();
                                                                    let l542 = *base.add(12).cast::<usize>();
                                                                    let len543 = l542;
                                                                    let bytes543 = _rt::Vec::from_raw_parts(
                                                                        l541.cast(),
                                                                        len543,
                                                                        len543,
                                                                    );
                                                                    let l544 = *base.add(16).cast::<i64>();
                                                                    (
                                                                        super::super::super::super::golem::rpc::types::Uri {
                                                                            value: _rt::string_lift(bytes543),
                                                                        },
                                                                        l544 as u64,
                                                                    )
                                                                };
                                                                V545::Handle(e545)
                                                            }
                                                        };
                                                        v545
                                                    };
                                                    result546.push(e546);
                                                }
                                                _rt::cabi_dealloc(base546, len546 * 24, 8);
                                                super::super::super::super::golem::rpc::types::WitValue {
                                                    nodes: result546,
                                                }
                                            };
                                            result547.push(e547);
                                        }
                                        _rt::cabi_dealloc(base547, len547 * 8, 4);
                                        super::super::super::super::golem::api::oplog::DescribeResourceParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l491 as u64,
                                                nanoseconds: l492 as u32,
                                            },
                                            resource_id: l493 as u64,
                                            resource_name: _rt::string_lift(bytes496),
                                            resource_params: result547,
                                        }
                                    };
                                    V648::DescribeResource(e648)
                                }
                                23 => {
                                    let e648 = {
                                        let l548 = *base.add(8).cast::<i64>();
                                        let l549 = *base.add(16).cast::<i32>();
                                        let l550 = i32::from(*base.add(24).cast::<u8>());
                                        let l551 = *base.add(28).cast::<*mut u8>();
                                        let l552 = *base.add(32).cast::<usize>();
                                        let len553 = l552;
                                        let bytes553 = _rt::Vec::from_raw_parts(
                                            l551.cast(),
                                            len553,
                                            len553,
                                        );
                                        let l554 = *base.add(36).cast::<*mut u8>();
                                        let l555 = *base.add(40).cast::<usize>();
                                        let len556 = l555;
                                        let bytes556 = _rt::Vec::from_raw_parts(
                                            l554.cast(),
                                            len556,
                                            len556,
                                        );
                                        super::super::super::super::golem::api::oplog::LogParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l548 as u64,
                                                nanoseconds: l549 as u32,
                                            },
                                            level: super::super::super::super::golem::api::oplog::LogLevel::_lift(
                                                l550 as u8,
                                            ),
                                            context: _rt::string_lift(bytes553),
                                            message: _rt::string_lift(bytes556),
                                        }
                                    };
                                    V648::Log(e648)
                                }
                                24 => {
                                    let e648 = {
                                        let l557 = *base.add(8).cast::<i64>();
                                        let l558 = *base.add(16).cast::<i32>();
                                        super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                            seconds: l557 as u64,
                                            nanoseconds: l558 as u32,
                                        }
                                    };
                                    V648::Restart(e648)
                                }
                                25 => {
                                    let e648 = {
                                        let l559 = *base.add(8).cast::<i64>();
                                        let l560 = *base.add(16).cast::<i32>();
                                        let l561 = *base.add(24).cast::<i64>();
                                        let l562 = *base.add(32).cast::<i64>();
                                        let l563 = *base.add(40).cast::<*mut u8>();
                                        let l564 = *base.add(44).cast::<usize>();
                                        let len565 = l564;
                                        let bytes565 = _rt::Vec::from_raw_parts(
                                            l563.cast(),
                                            len565,
                                            len565,
                                        );
                                        let l566 = *base.add(48).cast::<*mut u8>();
                                        let l567 = *base.add(52).cast::<usize>();
                                        let len568 = l567;
                                        let bytes568 = _rt::Vec::from_raw_parts(
                                            l566.cast(),
                                            len568,
                                            len568,
                                        );
                                        let l569 = *base.add(56).cast::<*mut u8>();
                                        let l570 = *base.add(60).cast::<usize>();
                                        let base577 = l569;
                                        let len577 = l570;
                                        let mut result577 = _rt::Vec::with_capacity(len577);
                                        for i in 0..len577 {
                                            let base = base577.add(i * 16);
                                            let e577 = {
                                                let l571 = *base.add(0).cast::<*mut u8>();
                                                let l572 = *base.add(4).cast::<usize>();
                                                let len573 = l572;
                                                let bytes573 = _rt::Vec::from_raw_parts(
                                                    l571.cast(),
                                                    len573,
                                                    len573,
                                                );
                                                let l574 = *base.add(8).cast::<*mut u8>();
                                                let l575 = *base.add(12).cast::<usize>();
                                                let len576 = l575;
                                                let bytes576 = _rt::Vec::from_raw_parts(
                                                    l574.cast(),
                                                    len576,
                                                    len576,
                                                );
                                                (_rt::string_lift(bytes573), _rt::string_lift(bytes576))
                                            };
                                            result577.push(e577);
                                        }
                                        _rt::cabi_dealloc(base577, len577 * 16, 4);
                                        super::super::super::super::golem::api::oplog::ActivatePluginParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l559 as u64,
                                                nanoseconds: l560 as u32,
                                            },
                                            plugin: super::super::super::super::golem::api::oplog::PluginInstallationDescription {
                                                installation_id: super::super::super::super::golem::api::host::Uuid {
                                                    high_bits: l561 as u64,
                                                    low_bits: l562 as u64,
                                                },
                                                name: _rt::string_lift(bytes565),
                                                version: _rt::string_lift(bytes568),
                                                parameters: result577,
                                            },
                                        }
                                    };
                                    V648::ActivatePlugin(e648)
                                }
                                26 => {
                                    let e648 = {
                                        let l578 = *base.add(8).cast::<i64>();
                                        let l579 = *base.add(16).cast::<i32>();
                                        let l580 = *base.add(24).cast::<i64>();
                                        let l581 = *base.add(32).cast::<i64>();
                                        let l582 = *base.add(40).cast::<*mut u8>();
                                        let l583 = *base.add(44).cast::<usize>();
                                        let len584 = l583;
                                        let bytes584 = _rt::Vec::from_raw_parts(
                                            l582.cast(),
                                            len584,
                                            len584,
                                        );
                                        let l585 = *base.add(48).cast::<*mut u8>();
                                        let l586 = *base.add(52).cast::<usize>();
                                        let len587 = l586;
                                        let bytes587 = _rt::Vec::from_raw_parts(
                                            l585.cast(),
                                            len587,
                                            len587,
                                        );
                                        let l588 = *base.add(56).cast::<*mut u8>();
                                        let l589 = *base.add(60).cast::<usize>();
                                        let base596 = l588;
                                        let len596 = l589;
                                        let mut result596 = _rt::Vec::with_capacity(len596);
                                        for i in 0..len596 {
                                            let base = base596.add(i * 16);
                                            let e596 = {
                                                let l590 = *base.add(0).cast::<*mut u8>();
                                                let l591 = *base.add(4).cast::<usize>();
                                                let len592 = l591;
                                                let bytes592 = _rt::Vec::from_raw_parts(
                                                    l590.cast(),
                                                    len592,
                                                    len592,
                                                );
                                                let l593 = *base.add(8).cast::<*mut u8>();
                                                let l594 = *base.add(12).cast::<usize>();
                                                let len595 = l594;
                                                let bytes595 = _rt::Vec::from_raw_parts(
                                                    l593.cast(),
                                                    len595,
                                                    len595,
                                                );
                                                (_rt::string_lift(bytes592), _rt::string_lift(bytes595))
                                            };
                                            result596.push(e596);
                                        }
                                        _rt::cabi_dealloc(base596, len596 * 16, 4);
                                        super::super::super::super::golem::api::oplog::DeactivatePluginParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l578 as u64,
                                                nanoseconds: l579 as u32,
                                            },
                                            plugin: super::super::super::super::golem::api::oplog::PluginInstallationDescription {
                                                installation_id: super::super::super::super::golem::api::host::Uuid {
                                                    high_bits: l580 as u64,
                                                    low_bits: l581 as u64,
                                                },
                                                name: _rt::string_lift(bytes584),
                                                version: _rt::string_lift(bytes587),
                                                parameters: result596,
                                            },
                                        }
                                    };
                                    V648::DeactivatePlugin(e648)
                                }
                                27 => {
                                    let e648 = {
                                        let l597 = *base.add(8).cast::<i64>();
                                        let l598 = *base.add(16).cast::<i32>();
                                        let l599 = *base.add(24).cast::<i64>();
                                        let l600 = *base.add(32).cast::<i64>();
                                        super::super::super::super::golem::api::oplog::RevertParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l597 as u64,
                                                nanoseconds: l598 as u32,
                                            },
                                            start: l599 as u64,
                                            end: l600 as u64,
                                        }
                                    };
                                    V648::Revert(e648)
                                }
                                28 => {
                                    let e648 = {
                                        let l601 = *base.add(8).cast::<i64>();
                                        let l602 = *base.add(16).cast::<i32>();
                                        let l603 = *base.add(24).cast::<*mut u8>();
                                        let l604 = *base.add(28).cast::<usize>();
                                        let len605 = l604;
                                        let bytes605 = _rt::Vec::from_raw_parts(
                                            l603.cast(),
                                            len605,
                                            len605,
                                        );
                                        super::super::super::super::golem::api::oplog::CancelInvocationParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l601 as u64,
                                                nanoseconds: l602 as u32,
                                            },
                                            idempotency_key: _rt::string_lift(bytes605),
                                        }
                                    };
                                    V648::CancelInvocation(e648)
                                }
                                29 => {
                                    let e648 = {
                                        let l606 = *base.add(8).cast::<i64>();
                                        let l607 = *base.add(16).cast::<i32>();
                                        let l608 = *base.add(24).cast::<*mut u8>();
                                        let l609 = *base.add(28).cast::<usize>();
                                        let len610 = l609;
                                        let bytes610 = _rt::Vec::from_raw_parts(
                                            l608.cast(),
                                            len610,
                                            len610,
                                        );
                                        let l611 = i32::from(*base.add(32).cast::<u8>());
                                        let l615 = i32::from(*base.add(44).cast::<u8>());
                                        let l619 = *base.add(56).cast::<*mut u8>();
                                        let l620 = *base.add(60).cast::<usize>();
                                        let base629 = l619;
                                        let len629 = l620;
                                        let mut result629 = _rt::Vec::with_capacity(len629);
                                        for i in 0..len629 {
                                            let base = base629.add(i * 20);
                                            let e629 = {
                                                let l621 = *base.add(0).cast::<*mut u8>();
                                                let l622 = *base.add(4).cast::<usize>();
                                                let len623 = l622;
                                                let bytes623 = _rt::Vec::from_raw_parts(
                                                    l621.cast(),
                                                    len623,
                                                    len623,
                                                );
                                                let l624 = i32::from(*base.add(8).cast::<u8>());
                                                use super::super::super::super::golem::api::context::AttributeValue as V628;
                                                let v628 = match l624 {
                                                    n => {
                                                        debug_assert_eq!(n, 0, "invalid enum discriminant");
                                                        let e628 = {
                                                            let l625 = *base.add(12).cast::<*mut u8>();
                                                            let l626 = *base.add(16).cast::<usize>();
                                                            let len627 = l626;
                                                            let bytes627 = _rt::Vec::from_raw_parts(
                                                                l625.cast(),
                                                                len627,
                                                                len627,
                                                            );
                                                            _rt::string_lift(bytes627)
                                                        };
                                                        V628::String(e628)
                                                    }
                                                };
                                                super::super::super::super::golem::api::context::Attribute {
                                                    key: _rt::string_lift(bytes623),
                                                    value: v628,
                                                }
                                            };
                                            result629.push(e629);
                                        }
                                        _rt::cabi_dealloc(base629, len629 * 20, 4);
                                        super::super::super::super::golem::api::oplog::StartSpanParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l606 as u64,
                                                nanoseconds: l607 as u32,
                                            },
                                            span_id: _rt::string_lift(bytes610),
                                            parent: match l611 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l612 = *base.add(36).cast::<*mut u8>();
                                                        let l613 = *base.add(40).cast::<usize>();
                                                        let len614 = l613;
                                                        let bytes614 = _rt::Vec::from_raw_parts(
                                                            l612.cast(),
                                                            len614,
                                                            len614,
                                                        );
                                                        _rt::string_lift(bytes614)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            linked_context: match l615 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l616 = *base.add(48).cast::<*mut u8>();
                                                        let l617 = *base.add(52).cast::<usize>();
                                                        let len618 = l617;
                                                        let bytes618 = _rt::Vec::from_raw_parts(
                                                            l616.cast(),
                                                            len618,
                                                            len618,
                                                        );
                                                        _rt::string_lift(bytes618)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            attributes: result629,
                                        }
                                    };
                                    V648::StartSpan(e648)
                                }
                                30 => {
                                    let e648 = {
                                        let l630 = *base.add(8).cast::<i64>();
                                        let l631 = *base.add(16).cast::<i32>();
                                        let l632 = *base.add(24).cast::<*mut u8>();
                                        let l633 = *base.add(28).cast::<usize>();
                                        let len634 = l633;
                                        let bytes634 = _rt::Vec::from_raw_parts(
                                            l632.cast(),
                                            len634,
                                            len634,
                                        );
                                        super::super::super::super::golem::api::oplog::FinishSpanParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l630 as u64,
                                                nanoseconds: l631 as u32,
                                            },
                                            span_id: _rt::string_lift(bytes634),
                                        }
                                    };
                                    V648::FinishSpan(e648)
                                }
                                n => {
                                    debug_assert_eq!(n, 31, "invalid enum discriminant");
                                    let e648 = {
                                        let l635 = *base.add(8).cast::<i64>();
                                        let l636 = *base.add(16).cast::<i32>();
                                        let l637 = *base.add(24).cast::<*mut u8>();
                                        let l638 = *base.add(28).cast::<usize>();
                                        let len639 = l638;
                                        let bytes639 = _rt::Vec::from_raw_parts(
                                            l637.cast(),
                                            len639,
                                            len639,
                                        );
                                        let l640 = *base.add(32).cast::<*mut u8>();
                                        let l641 = *base.add(36).cast::<usize>();
                                        let len642 = l641;
                                        let bytes642 = _rt::Vec::from_raw_parts(
                                            l640.cast(),
                                            len642,
                                            len642,
                                        );
                                        let l643 = i32::from(*base.add(40).cast::<u8>());
                                        use super::super::super::super::golem::api::context::AttributeValue as V647;
                                        let v647 = match l643 {
                                            n => {
                                                debug_assert_eq!(n, 0, "invalid enum discriminant");
                                                let e647 = {
                                                    let l644 = *base.add(44).cast::<*mut u8>();
                                                    let l645 = *base.add(48).cast::<usize>();
                                                    let len646 = l645;
                                                    let bytes646 = _rt::Vec::from_raw_parts(
                                                        l644.cast(),
                                                        len646,
                                                        len646,
                                                    );
                                                    _rt::string_lift(bytes646)
                                                };
                                                V647::String(e647)
                                            }
                                        };
                                        super::super::super::super::golem::api::oplog::SetSpanAttributeParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l635 as u64,
                                                nanoseconds: l636 as u32,
                                            },
                                            span_id: _rt::string_lift(bytes639),
                                            key: _rt::string_lift(bytes642),
                                            value: v647,
                                        }
                                    };
                                    V648::SetSpanAttribute(e648)
                                }
                            };
                            v648
                        };
                        result649.push(e649);
                    }
                    _rt::cabi_dealloc(base649, len649 * 136, 8);
                    let result650 = T::process(
                        ProcessorBorrow::lift(l0 as u32 as usize).get(),
                        super::super::super::super::golem::api::host::WorkerId {
                            component_id: super::super::super::super::golem::api::host::ComponentId {
                                uuid: super::super::super::super::golem::api::host::Uuid {
                                    high_bits: l1 as u64,
                                    low_bits: l2 as u64,
                                },
                            },
                            worker_name: _rt::string_lift(bytes5),
                        },
                        super::super::super::super::golem::api::host::WorkerMetadata {
                            worker_id: super::super::super::super::golem::api::host::WorkerId {
                                component_id: super::super::super::super::golem::api::host::ComponentId {
                                    uuid: super::super::super::super::golem::api::host::Uuid {
                                        high_bits: l6 as u64,
                                        low_bits: l7 as u64,
                                    },
                                },
                                worker_name: _rt::string_lift(bytes10),
                            },
                            args: result16,
                            env: result25,
                            status: super::super::super::super::golem::api::host::WorkerStatus::_lift(
                                l26 as u8,
                            ),
                            component_version: l27 as u64,
                            retry_count: l28 as u64,
                        },
                        l29 as u64,
                        result649,
                    );
                    _rt::cabi_dealloc(arg0, 112, 8);
                    let ptr651 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result650 {
                        Ok(_) => {
                            *ptr651.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr651.add(0).cast::<u8>() = (1i32) as u8;
                            let vec652 = (e.into_bytes()).into_boxed_slice();
                            let ptr652 = vec652.as_ptr().cast::<u8>();
                            let len652 = vec652.len();
                            ::core::mem::forget(vec652);
                            *ptr651.add(8).cast::<usize>() = len652;
                            *ptr651.add(4).cast::<*mut u8>() = ptr652.cast_mut();
                        }
                    };
                    ptr651
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_processor_process<T: GuestProcessor>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                    }
                }
                pub trait Guest {
                    type Processor: GuestProcessor;
                }
                pub trait GuestProcessor: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]golem:api/oplog-processor@1.1.5"
                            )]
                            extern "C" {
                                #[link_name = "[resource-new]processor"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }
                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]golem:api/oplog-processor@1.1.5"
                            )]
                            extern "C" {
                                #[link_name = "[resource-rep]processor"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }
                    /// Initializes an oplog processor for a given component where the plugin was installed to.
                    /// The `account-info` parameters contains details of the account the installation belongs to.
                    /// The `component-id` parameter contains the identifier of the component the plugin was installed to.
                    /// The `config` parameter contains the configuration parameters for the plugin, as specified in the plugin installation
                    /// for the component.
                    fn new(
                        account_info: AccountInfo,
                        component_id: ComponentId,
                        config: _rt::Vec<(_rt::String, _rt::String)>,
                    ) -> Self;
                    /// Called when one of the workers the plugin is activated on has written new entries to its oplog.
                    /// The `worker-id` parameter identifies the worker.
                    /// The `metadata` parameter contains the latest metadata of the worker.
                    /// The `first-entry-index` parameter contains the index of the first entry in the list of `entries`.
                    /// The `entries` parameteter always contains at least one element.
                    fn process(
                        &self,
                        worker_id: WorkerId,
                        metadata: WorkerMetadata,
                        first_entry_index: OplogIndex,
                        entries: _rt::Vec<OplogEntry>,
                    ) -> Result<(), _rt::String>;
                }
                #[doc(hidden)]
                macro_rules! __export_golem_api_oplog_processor_1_1_5_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[export_name =
                        "golem:api/oplog-processor@1.1.5#[constructor]processor"] unsafe
                        extern "C" fn export_constructor_processor(arg0 : * mut u8, arg1
                        : usize, arg2 : i64, arg3 : i64, arg4 : * mut u8, arg5 : usize,)
                        -> i32 { $($path_to_types)*::
                        _export_constructor_processor_cabi::<<$ty as $($path_to_types)*::
                        Guest >::Processor > (arg0, arg1, arg2, arg3, arg4, arg5) }
                        #[export_name =
                        "golem:api/oplog-processor@1.1.5#[method]processor.process"]
                        unsafe extern "C" fn export_method_processor_process(arg0 : * mut
                        u8,) -> * mut u8 { $($path_to_types)*::
                        _export_method_processor_process_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::Processor > (arg0) } #[export_name
                        =
                        "cabi_post_golem:api/oplog-processor@1.1.5#[method]processor.process"]
                        unsafe extern "C" fn _post_return_method_processor_process(arg0 :
                        * mut u8,) { $($path_to_types)*::
                        __post_return_method_processor_process::<<$ty as
                        $($path_to_types)*:: Guest >::Processor > (arg0) } const _ : () =
                        { #[doc(hidden)] #[export_name =
                        "golem:api/oplog-processor@1.1.5#[dtor]processor"]
                        #[allow(non_snake_case)] unsafe extern "C" fn dtor(rep : * mut
                        u8) { $($path_to_types)*:: Processor::dtor::< <$ty as
                        $($path_to_types)*:: Guest >::Processor > (rep) } }; };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_golem_api_oplog_processor_1_1_5_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 12]);
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 12],
                );
            }
        }
        pub mod component {
            #[allow(dead_code, clippy::all)]
            pub mod api {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_get_invoked_functions_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::get_invoked_functions();
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let vec3 = result0;
                    let len3 = vec3.len();
                    let layout3 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec3.len() * 8,
                        4,
                    );
                    let result3 = if layout3.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout3).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout3);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec3.into_iter().enumerate() {
                        let base = result3.add(i * 8);
                        {
                            let vec2 = (e.into_bytes()).into_boxed_slice();
                            let ptr2 = vec2.as_ptr().cast::<u8>();
                            let len2 = vec2.len();
                            ::core::mem::forget(vec2);
                            *base.add(4).cast::<usize>() = len2;
                            *base.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                        }
                    }
                    *ptr1.add(4).cast::<usize>() = len3;
                    *ptr1.add(0).cast::<*mut u8>() = result3;
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_get_invoked_functions<T: Guest>(
                    arg0: *mut u8,
                ) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0.add(4).cast::<usize>();
                    let base4 = l0;
                    let len4 = l1;
                    for i in 0..len4 {
                        let base = base4.add(i * 8);
                        {
                            let l2 = *base.add(0).cast::<*mut u8>();
                            let l3 = *base.add(4).cast::<usize>();
                            _rt::cabi_dealloc(l2, l3, 1);
                        }
                    }
                    _rt::cabi_dealloc(base4, len4 * 8, 4);
                }
                pub trait Guest {
                    fn get_invoked_functions() -> _rt::Vec<_rt::String>;
                }
                #[doc(hidden)]
                macro_rules! __export_golem_component_api_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[export_name =
                        "golem:component/api#get-invoked-functions"] unsafe extern "C" fn
                        export_get_invoked_functions() -> * mut u8 { $($path_to_types)*::
                        _export_get_invoked_functions_cabi::<$ty > () } #[export_name =
                        "cabi_post_golem:component/api#get-invoked-functions"] unsafe
                        extern "C" fn _post_return_get_invoked_functions(arg0 : * mut
                        u8,) { $($path_to_types)*::
                        __post_return_get_invoked_functions::<$ty > (arg0) } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_golem_component_api_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 8]);
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 8],
                );
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};
    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }
    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }
    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }
        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }
        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }
    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource").field("handle", &self.handle).finish()
        }
    }
    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    u32::MAX => {}
                    other => T::drop(other),
                }
            }
        }
    }
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }
    pub use alloc_crate::vec::Vec;
    pub use alloc_crate::alloc;
    pub use alloc_crate::string::String;
    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }
    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }
    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }
    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }
    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }
    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }
    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    pub fn as_f32<T: AsF32>(t: T) -> f32 {
        t.as_f32()
    }
    pub trait AsF32 {
        fn as_f32(self) -> f32;
    }
    impl<'a, T: Copy + AsF32> AsF32 for &'a T {
        fn as_f32(self) -> f32 {
            (*self).as_f32()
        }
    }
    impl AsF32 for f32 {
        #[inline]
        fn as_f32(self) -> f32 {
            self as f32
        }
    }
    pub fn as_f64<T: AsF64>(t: T) -> f64 {
        t.as_f64()
    }
    pub trait AsF64 {
        fn as_f64(self) -> f64;
    }
    impl<'a, T: Copy + AsF64> AsF64 for &'a T {
        fn as_f64(self) -> f64 {
            (*self).as_f64()
        }
    }
    impl AsF64 for f64 {
        #[inline]
        fn as_f64(self) -> f64 {
            self as f64
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            core::hint::unreachable_unchecked()
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    pub unsafe fn char_lift(val: u32) -> char {
        if cfg!(debug_assertions) {
            core::char::from_u32(val).unwrap()
        } else {
            core::char::from_u32_unchecked(val)
        }
    }
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub use alloc_crate::boxed::Box;
    extern crate alloc as alloc_crate;
}
/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_oplog_processor_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::golem::component::api::__export_golem_component_api_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::golem::component::api);
        $($path_to_types_root)*::
        exports::golem::api::oplog_processor::__export_golem_api_oplog_processor_1_1_5_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::golem::api::oplog_processor);
    };
}
#[doc(inline)]
pub(crate) use __export_oplog_processor_impl as export;
#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.36.0:golem:component:oplog-processor:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 10496] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xfaP\x01A\x02\x01A$\x01\
B\x05\x01r\x02\x07secondsw\x0bnanosecondsy\x04\0\x08datetime\x03\0\0\x01@\0\0\x01\
\x04\0\x03now\x01\x02\x04\0\x0aresolution\x01\x02\x03\0\x1cwasi:clocks/wall-cloc\
k@0.2.0\x05\0\x01B\x0a\x04\0\x08pollable\x03\x01\x01h\0\x01@\x01\x04self\x01\0\x7f\
\x04\0\x16[method]pollable.ready\x01\x02\x01@\x01\x04self\x01\x01\0\x04\0\x16[me\
thod]pollable.block\x01\x03\x01p\x01\x01py\x01@\x01\x02in\x04\0\x05\x04\0\x04pol\
l\x01\x06\x03\0\x12wasi:io/poll@0.2.0\x05\x01\x02\x03\0\0\x08datetime\x02\x03\0\x01\
\x08pollable\x01BK\x02\x03\x02\x01\x02\x04\0\x08datetime\x03\0\0\x02\x03\x02\x01\
\x03\x04\0\x08pollable\x03\0\x02\x01z\x04\0\x0anode-index\x03\0\x04\x01w\x04\0\x0b\
resource-id\x03\0\x06\x01m\x02\x05owned\x08borrowed\x04\0\x0dresource-mode\x03\0\
\x08\x01o\x02s\x05\x01p\x0a\x01k\x05\x01o\x02s\x0c\x01p\x0d\x01ps\x01p\x05\x01o\x02\
\x0c\x0c\x01o\x02\x07\x09\x01q\x16\x0brecord-type\x01\x0b\0\x0cvariant-type\x01\x0e\
\0\x09enum-type\x01\x0f\0\x0aflags-type\x01\x0f\0\x0atuple-type\x01\x10\0\x09lis\
t-type\x01\x05\0\x0boption-type\x01\x05\0\x0bresult-type\x01\x11\0\x0cprim-u8-ty\
pe\0\0\x0dprim-u16-type\0\0\x0dprim-u32-type\0\0\x0dprim-u64-type\0\0\x0cprim-s8\
-type\0\0\x0dprim-s16-type\0\0\x0dprim-s32-type\0\0\x0dprim-s64-type\0\0\x0dprim\
-f32-type\0\0\x0dprim-f64-type\0\0\x0eprim-char-type\0\0\x0eprim-bool-type\0\0\x10\
prim-string-type\0\0\x0bhandle-type\x01\x12\0\x04\0\x0dwit-type-node\x03\0\x13\x01\
p\x14\x01r\x01\x05nodes\x15\x04\0\x08wit-type\x03\0\x16\x01r\x01\x05values\x04\0\
\x03uri\x03\0\x18\x01o\x02y\x0c\x01p\x7f\x01j\x01\x0c\x01\x0c\x01o\x02\x19w\x01q\
\x16\x0crecord-value\x01\x10\0\x0dvariant-value\x01\x1a\0\x0aenum-value\x01y\0\x0b\
flags-value\x01\x1b\0\x0btuple-value\x01\x10\0\x0alist-value\x01\x10\0\x0coption\
-value\x01\x0c\0\x0cresult-value\x01\x1c\0\x07prim-u8\x01}\0\x08prim-u16\x01{\0\x08\
prim-u32\x01y\0\x08prim-u64\x01w\0\x07prim-s8\x01~\0\x08prim-s16\x01|\0\x08prim-\
s32\x01z\0\x08prim-s64\x01x\0\x0cprim-float32\x01v\0\x0cprim-float64\x01u\0\x09p\
rim-char\x01t\0\x09prim-bool\x01\x7f\0\x0bprim-string\x01s\0\x06handle\x01\x1d\0\
\x04\0\x08wit-node\x03\0\x1e\x01p\x1f\x01r\x01\x05nodes\x20\x04\0\x09wit-value\x03\
\0!\x01r\x02\x05value\"\x03typ\x17\x04\0\x0evalue-and-type\x03\0#\x01q\x04\x0epr\
otocol-error\x01s\0\x06denied\x01s\0\x09not-found\x01s\0\x15remote-internal-erro\
r\x01s\0\x04\0\x09rpc-error\x03\0%\x04\0\x08wasm-rpc\x03\x01\x04\0\x14future-inv\
oke-result\x03\x01\x04\0\x12cancellation-token\x03\x01\x01i'\x01@\x01\x08locatio\
n\x19\0*\x04\0\x15[constructor]wasm-rpc\x01+\x01h'\x01p\"\x01j\x01\"\x01&\x01@\x03\
\x04self,\x0dfunction-names\x0ffunction-params-\0.\x04\0![method]wasm-rpc.invoke\
-and-await\x01/\x01j\0\x01&\x01@\x03\x04self,\x0dfunction-names\x0ffunction-para\
ms-\00\x04\0\x17[method]wasm-rpc.invoke\x011\x01i(\x01@\x03\x04self,\x0dfunction\
-names\x0ffunction-params-\02\x04\0'[method]wasm-rpc.async-invoke-and-await\x013\
\x01@\x04\x04self,\x0escheduled-time\x01\x0dfunction-names\x0ffunction-params-\x01\
\0\x04\0$[method]wasm-rpc.schedule-invocation\x014\x01i)\x01@\x04\x04self,\x0esc\
heduled-time\x01\x0dfunction-names\x0ffunction-params-\05\x04\0/[method]wasm-rpc\
.schedule-cancelable-invocation\x016\x01h(\x01i\x03\x01@\x01\x04self7\08\x04\0&[\
method]future-invoke-result.subscribe\x019\x01k.\x01@\x01\x04self7\0:\x04\0\x20[\
method]future-invoke-result.get\x01;\x01h)\x01@\x01\x04self<\x01\0\x04\0![method\
]cancellation-token.cancel\x01=\x01@\x01\x03vnt$\0\"\x04\0\x0dextract-value\x01>\
\x01@\x01\x03vnt$\0\x17\x04\0\x0cextract-type\x01?\x03\0\x15golem:rpc/types@0.1.\
3\x05\x04\x01B\x0f\x02\x03\x02\x01\x03\x04\0\x08pollable\x03\0\0\x01w\x04\0\x07i\
nstant\x03\0\x02\x01w\x04\0\x08duration\x03\0\x04\x01@\0\0\x03\x04\0\x03now\x01\x06\
\x01@\0\0\x05\x04\0\x0aresolution\x01\x07\x01i\x01\x01@\x01\x04when\x03\0\x08\x04\
\0\x11subscribe-instant\x01\x09\x01@\x01\x04when\x05\0\x08\x04\0\x12subscribe-du\
ration\x01\x0a\x03\0!wasi:clocks/monotonic-clock@0.2.0\x05\x05\x02\x03\0\x02\x03\
uri\x02\x03\0\x02\x09wit-value\x02\x03\0\x03\x08duration\x01B{\x02\x03\x02\x01\x06\
\x04\0\x03uri\x03\0\0\x02\x03\x02\x01\x07\x04\0\x09wit-value\x03\0\x02\x02\x03\x02\
\x01\x08\x04\0\x08duration\x03\0\x04\x01w\x04\0\x0boplog-index\x03\0\x06\x01w\x04\
\0\x11component-version\x03\0\x08\x01r\x02\x09high-bitsw\x08low-bitsw\x04\0\x04u\
uid\x03\0\x0a\x01r\x01\x04uuid\x0b\x04\0\x0ccomponent-id\x03\0\x0c\x01r\x02\x0cc\
omponent-id\x0d\x0bworker-names\x04\0\x09worker-id\x03\0\x0e\x01r\x02\x09worker-\
id\x0f\x09oplog-idx\x07\x04\0\x0apromise-id\x03\0\x10\x01r\x01\x05values\x04\0\x0a\
account-id\x03\0\x12\x01ku\x01r\x05\x0cmax-attemptsy\x09min-delay\x05\x09max-del\
ay\x05\x0amultiplieru\x11max-jitter-factor\x14\x04\0\x0cretry-policy\x03\0\x15\x01\
q\x03\x0fpersist-nothing\0\0\x1bpersist-remote-side-effects\0\0\x05smart\0\0\x04\
\0\x11persistence-level\x03\0\x17\x01m\x02\x09automatic\x0esnapshot-based\x04\0\x0b\
update-mode\x03\0\x19\x01m\x06\x05equal\x09not-equal\x0dgreater-equal\x07greater\
\x0aless-equal\x04less\x04\0\x11filter-comparator\x03\0\x1b\x01m\x04\x05equal\x09\
not-equal\x04like\x08not-like\x04\0\x18string-filter-comparator\x03\0\x1d\x01m\x07\
\x07running\x04idle\x09suspended\x0binterrupted\x08retrying\x06failed\x06exited\x04\
\0\x0dworker-status\x03\0\x1f\x01r\x02\x0acomparator\x1e\x05values\x04\0\x12work\
er-name-filter\x03\0!\x01r\x02\x0acomparator\x1c\x05value\x20\x04\0\x14worker-st\
atus-filter\x03\0#\x01r\x02\x0acomparator\x1c\x05valuew\x04\0\x15worker-version-\
filter\x03\0%\x01r\x02\x0acomparator\x1c\x05valuew\x04\0\x18worker-created-at-fi\
lter\x03\0'\x01r\x03\x04names\x0acomparator\x1e\x05values\x04\0\x11worker-env-fi\
lter\x03\0)\x01q\x05\x04name\x01\"\0\x06status\x01$\0\x07version\x01&\0\x0acreat\
ed-at\x01(\0\x03env\x01*\0\x04\0\x16worker-property-filter\x03\0+\x01p,\x01r\x01\
\x07filters-\x04\0\x11worker-all-filter\x03\0.\x01p/\x01r\x01\x07filters0\x04\0\x11\
worker-any-filter\x03\01\x01ps\x01o\x02ss\x01p4\x01r\x06\x09worker-id\x0f\x04arg\
s3\x03env5\x06status\x20\x11component-versionw\x0bretry-countw\x04\0\x0fworker-m\
etadata\x03\06\x04\0\x0bget-workers\x03\x01\x01q\x02\x15revert-to-oplog-index\x01\
\x07\0\x17revert-last-invocations\x01w\0\x04\0\x14revert-worker-target\x03\09\x01\
k2\x01i8\x01@\x03\x0ccomponent-id\x0d\x06filter;\x07precise\x7f\0<\x04\0\x18[con\
structor]get-workers\x01=\x01h8\x01p7\x01k?\x01@\x01\x04self>\0\xc0\0\x04\0\x1c[\
method]get-workers.get-next\x01A\x01@\0\0\x11\x04\0\x0ecreate-promise\x01B\x01p}\
\x01@\x01\x0apromise-id\x11\0\xc3\0\x04\0\x0dawait-promise\x01D\x01k\xc3\0\x01@\x01\
\x0apromise-id\x11\0\xc5\0\x04\0\x0cpoll-promise\x01F\x01@\x02\x0apromise-id\x11\
\x04data\xc3\0\0\x7f\x04\0\x10complete-promise\x01G\x01@\x01\x0apromise-id\x11\x01\
\0\x04\0\x0edelete-promise\x01H\x01@\0\0\x07\x04\0\x0fget-oplog-index\x01I\x01@\x01\
\x09oplog-idx\x07\x01\0\x04\0\x0fset-oplog-index\x01J\x01@\x01\x08replicas}\x01\0\
\x04\0\x0coplog-commit\x01K\x04\0\x14mark-begin-operation\x01I\x01@\x01\x05begin\
\x07\x01\0\x04\0\x12mark-end-operation\x01L\x01@\0\0\x16\x04\0\x10get-retry-poli\
cy\x01M\x01@\x01\x10new-retry-policy\x16\x01\0\x04\0\x10set-retry-policy\x01N\x01\
@\0\0\x18\x04\0\x1bget-oplog-persistence-level\x01O\x01@\x01\x15new-persistence-\
level\x18\x01\0\x04\0\x1bset-oplog-persistence-level\x01P\x01@\0\0\x7f\x04\0\x14\
get-idempotence-mode\x01Q\x01@\x01\x0aidempotent\x7f\x01\0\x04\0\x14set-idempote\
nce-mode\x01R\x01@\0\0\x0b\x04\0\x18generate-idempotency-key\x01S\x01@\x03\x09wo\
rker-id\x0f\x0etarget-version\x09\x04mode\x1a\x01\0\x04\0\x0dupdate-worker\x01T\x01\
@\0\07\x04\0\x11get-self-metadata\x01U\x01k7\x01@\x01\x09worker-id\x0f\0\xd6\0\x04\
\0\x13get-worker-metadata\x01W\x01@\x03\x10source-worker-id\x0f\x10target-worker\
-id\x0f\x11oplog-idx-cut-off\x07\x01\0\x04\0\x0bfork-worker\x01X\x01@\x02\x09wor\
ker-id\x0f\x0drevert-target:\x01\0\x04\0\x0drevert-worker\x01Y\x01k\x0d\x01@\x01\
\x13component-references\0\xda\0\x04\0\x14resolve-component-id\x01[\x01k\x0f\x01\
@\x02\x13component-references\x0bworker-names\0\xdc\0\x04\0\x11resolve-worker-id\
\x01]\x04\0\x18resolve-worker-id-strict\x01]\x01@\x01\x09worker-id\x0f\0\x01\x04\
\0\x0aworker-uri\x01^\x03\0\x14golem:api/host@1.1.5\x05\x09\x01B7\x02\x03\x02\x01\
\x02\x04\0\x08datetime\x03\0\0\x04\0\x04span\x03\x01\x04\0\x12invocation-context\
\x03\x01\x01q\x01\x06string\x01s\0\x04\0\x0fattribute-value\x03\0\x04\x01r\x02\x03\
keys\x05value\x05\x04\0\x09attribute\x03\0\x06\x01p\x05\x01r\x02\x03keys\x06valu\
es\x08\x04\0\x0fattribute-chain\x03\0\x09\x01s\x04\0\x08trace-id\x03\0\x0b\x01s\x04\
\0\x07span-id\x03\0\x0d\x01h\x02\x01@\x01\x04self\x0f\0\x01\x04\0\x17[method]spa\
n.started-at\x01\x10\x01@\x03\x04self\x0f\x04names\x05value\x05\x01\0\x04\0\x1a[\
method]span.set-attribute\x01\x11\x01p\x07\x01@\x02\x04self\x0f\x0aattributes\x12\
\x01\0\x04\0\x1b[method]span.set-attributes\x01\x13\x01@\x01\x04self\x0f\x01\0\x04\
\0\x13[method]span.finish\x01\x14\x01h\x03\x01@\x01\x04self\x15\0\x0c\x04\0#[met\
hod]invocation-context.trace-id\x01\x16\x01@\x01\x04self\x15\0\x0e\x04\0\"[metho\
d]invocation-context.span-id\x01\x17\x01i\x03\x01k\x18\x01@\x01\x04self\x15\0\x19\
\x04\0![method]invocation-context.parent\x01\x1a\x01k\x05\x01@\x03\x04self\x15\x03\
keys\x09inherited\x7f\0\x1b\x04\0([method]invocation-context.get-attribute\x01\x1c\
\x01@\x02\x04self\x15\x09inherited\x7f\0\x12\x04\0)[method]invocation-context.ge\
t-attributes\x01\x1d\x01@\x02\x04self\x15\x03keys\0\x08\x04\0.[method]invocation\
-context.get-attribute-chain\x01\x1e\x01p\x0a\x01@\x01\x04self\x15\0\x1f\x04\0/[\
method]invocation-context.get-attribute-chains\x01\x20\x01o\x02ss\x01p!\x01@\x01\
\x04self\x15\0\"\x04\00[method]invocation-context.trace-context-headers\x01#\x01\
i\x02\x01@\x01\x04names\0$\x04\0\x0astart-span\x01%\x01@\0\0\x18\x04\0\x0fcurren\
t-context\x01&\x01@\x01\x05allow\x7f\0\x7f\x04\0&allow-forwarding-trace-context-\
headers\x01'\x03\0\x17golem:api/context@1.1.5\x05\x0a\x02\x03\0\x04\x0aaccount-i\
d\x02\x03\0\x04\x11component-version\x02\x03\0\x04\x0boplog-index\x02\x03\0\x04\x0c\
retry-policy\x02\x03\0\x04\x04uuid\x02\x03\0\x04\x09worker-id\x02\x03\0\x05\x09a\
ttribute\x02\x03\0\x05\x0fattribute-value\x02\x03\0\x05\x07span-id\x02\x03\0\x05\
\x08trace-id\x01B\x82\x01\x02\x03\x02\x01\x02\x04\0\x08datetime\x03\0\0\x02\x03\x02\
\x01\x07\x04\0\x09wit-value\x03\0\x02\x02\x03\x02\x01\x0b\x04\0\x0aaccount-id\x03\
\0\x04\x02\x03\x02\x01\x0c\x04\0\x11component-version\x03\0\x06\x02\x03\x02\x01\x0d\
\x04\0\x0boplog-index\x03\0\x08\x02\x03\x02\x01\x0e\x04\0\x0cretry-policy\x03\0\x0a\
\x02\x03\x02\x01\x0f\x04\0\x04uuid\x03\0\x0c\x02\x03\x02\x01\x10\x04\0\x09worker\
-id\x03\0\x0e\x02\x03\x02\x01\x11\x04\0\x09attribute\x03\0\x10\x02\x03\x02\x01\x12\
\x04\0\x0fattribute-value\x03\0\x12\x02\x03\x02\x01\x13\x04\0\x07span-id\x03\0\x14\
\x02\x03\x02\x01\x14\x04\0\x08trace-id\x03\0\x16\x01k\x09\x01q\x05\x0aread-local\
\0\0\x0bwrite-local\0\0\x0bread-remote\0\0\x0cwrite-remote\0\0\x14write-remote-b\
atched\x01\x18\0\x04\0\x15wrapped-function-type\x03\0\x19\x01o\x02ss\x01p\x1b\x01\
r\x04\x0finstallation-id\x0d\x04names\x07versions\x0aparameters\x1c\x04\0\x1fplu\
gin-installation-description\x03\0\x1d\x01ps\x01k\x0f\x01p\x1e\x01r\x0a\x09times\
tamp\x01\x09worker-id\x0f\x11component-version\x07\x04args\x1f\x03env\x1c\x0aacc\
ount-id\x05\x06parent\x20\x0ecomponent-sizew\x20initial-total-linear-memory-size\
w\x16initial-active-plugins!\x04\0\x11create-parameters\x03\0\"\x01r\x05\x09time\
stamp\x01\x0dfunction-names\x07request\x03\x08response\x03\x15wrapped-function-t\
ype\x1a\x04\0$imported-function-invoked-parameters\x03\0$\x01k\x15\x01kw\x01p\x11\
\x01r\x06\x07span-id\x15\x05start\x01\x06parent&\x0elinked-context'\x0aattribute\
s(\x09inherited\x7f\x04\0\x0flocal-span-data\x03\0)\x01r\x01\x07span-id\x15\x04\0\
\x12external-span-data\x03\0+\x01q\x02\x0alocal-span\x01*\0\x0dexternal-span\x01\
,\0\x04\0\x09span-data\x03\0-\x01p\x03\x01p.\x01p0\x01r\x07\x09timestamp\x01\x0d\
function-names\x07request/\x0fidempotency-keys\x08trace-id\x17\x0ctrace-states\x1f\
\x12invocation-context1\x04\0$exported-function-invoked-parameters\x03\02\x01r\x03\
\x09timestamp\x01\x08response\x03\x0dconsumed-fuelx\x04\0&exported-function-comp\
leted-parameters\x03\04\x01r\x02\x09timestamp\x01\x05errors\x04\0\x10error-param\
eters\x03\06\x01r\x03\x09timestamp\x01\x05start\x09\x03end\x09\x04\0\x0fjump-par\
ameters\x03\08\x01r\x02\x09timestamp\x01\x0cretry-policy\x0b\x04\0\x1echange-ret\
ry-policy-parameters\x03\0:\x01r\x02\x09timestamp\x01\x0bbegin-index\x09\x04\0\x1c\
end-atomic-region-parameters\x03\0<\x01r\x02\x09timestamp\x01\x0bbegin-index\x09\
\x04\0\x1bend-remote-write-parameters\x03\0>\x01k/\x01r\x03\x0fidempotency-keys\x0d\
function-names\x05input\xc0\0\x04\0'exported-function-invocation-parameters\x03\0\
A\x01q\x02\x11exported-function\x01\xc2\0\0\x0dmanual-update\x01\x07\0\x04\0\x11\
worker-invocation\x03\0C\x01r\x02\x09timestamp\x01\x0ainvocation\xc4\0\x04\0$pen\
ding-worker-invocation-parameters\x03\0E\x01p}\x01q\x02\x0bauto-update\0\0\x0esn\
apshot-based\x01\xc7\0\0\x04\0\x12update-description\x03\0H\x01r\x03\x09timestam\
p\x01\x0etarget-version\x07\x12update-description\xc9\0\x04\0\x19pending-update-\
parameters\x03\0J\x01r\x04\x09timestamp\x01\x0etarget-version\x07\x12new-compone\
nt-sizew\x12new-active-plugins!\x04\0\x1csuccessful-update-parameters\x03\0L\x01\
ks\x01r\x03\x09timestamp\x01\x0etarget-version\x07\x07details\xce\0\x04\0\x18fai\
led-update-parameters\x03\0O\x01r\x02\x09timestamp\x01\x05deltaw\x04\0\x16grow-m\
emory-parameters\x03\0Q\x01w\x04\0\x12worker-resource-id\x03\0S\x01r\x02\x09time\
stamp\x01\x0bresource-id\xd4\0\x04\0\x1acreate-resource-parameters\x03\0U\x01r\x02\
\x09timestamp\x01\x0bresource-id\xd4\0\x04\0\x18drop-resource-parameters\x03\0W\x01\
r\x04\x09timestamp\x01\x0bresource-id\xd4\0\x0dresource-names\x0fresource-params\
/\x04\0\x1cdescribe-resource-parameters\x03\0Y\x01m\x08\x06stdout\x06stderr\x05t\
race\x05debug\x04info\x04warn\x05error\x08critical\x04\0\x09log-level\x03\0[\x01\
r\x04\x09timestamp\x01\x05level\xdc\0\x07contexts\x07messages\x04\0\x0elog-param\
eters\x03\0]\x01r\x02\x09timestamp\x01\x06plugin\x1e\x04\0\x1aactivate-plugin-pa\
rameters\x03\0_\x01r\x02\x09timestamp\x01\x06plugin\x1e\x04\0\x1cdeactivate-plug\
in-parameters\x03\0a\x01r\x03\x09timestamp\x01\x05start\x09\x03end\x09\x04\0\x11\
revert-parameters\x03\0c\x01r\x02\x09timestamp\x01\x0fidempotency-keys\x04\0\x1c\
cancel-invocation-parameters\x03\0e\x01r\x05\x09timestamp\x01\x07span-id\x15\x06\
parent&\x0elinked-context&\x0aattributes(\x04\0\x15start-span-parameters\x03\0g\x01\
r\x02\x09timestamp\x01\x07span-id\x15\x04\0\x16finish-span-parameters\x03\0i\x01\
r\x04\x09timestamp\x01\x07span-id\x15\x03keys\x05value\x13\x04\0\x1dset-span-att\
ribute-parameters\x03\0k\x01q\x20\x06create\x01#\0\x19imported-function-invoked\x01\
%\0\x19exported-function-invoked\x013\0\x1bexported-function-completed\x015\0\x07\
suspend\x01\x01\0\x05error\x017\0\x05no-op\x01\x01\0\x04jump\x019\0\x0binterrupt\
ed\x01\x01\0\x06exited\x01\x01\0\x13change-retry-policy\x01;\0\x13begin-atomic-r\
egion\x01\x01\0\x11end-atomic-region\x01=\0\x12begin-remote-write\x01\x01\0\x10e\
nd-remote-write\x01?\0\x19pending-worker-invocation\x01\xc6\0\0\x0epending-updat\
e\x01\xcb\0\0\x11successful-update\x01\xcd\0\0\x0dfailed-update\x01\xd0\0\0\x0bg\
row-memory\x01\xd2\0\0\x0fcreate-resource\x01\xd6\0\0\x0ddrop-resource\x01\xd8\0\
\0\x11describe-resource\x01\xda\0\0\x03log\x01\xde\0\0\x07restart\x01\x01\0\x0fa\
ctivate-plugin\x01\xe0\0\0\x11deactivate-plugin\x01\xe2\0\0\x06revert\x01\xe4\0\0\
\x11cancel-invocation\x01\xe6\0\0\x0astart-span\x01\xe8\0\0\x0bfinish-span\x01\xea\
\0\0\x12set-span-attribute\x01\xec\0\0\x04\0\x0boplog-entry\x03\0m\x04\0\x09get-\
oplog\x03\x01\x04\0\x0csearch-oplog\x03\x01\x01io\x01@\x02\x09worker-id\x0f\x05s\
tart\x09\0\xf1\0\x04\0\x16[constructor]get-oplog\x01r\x01ho\x01p\xee\0\x01k\xf4\0\
\x01@\x01\x04self\xf3\0\0\xf5\0\x04\0\x1a[method]get-oplog.get-next\x01v\x01ip\x01\
@\x02\x09worker-id\x0f\x04texts\0\xf7\0\x04\0\x19[constructor]search-oplog\x01x\x01\
hp\x01o\x02\x09\xee\0\x01p\xfa\0\x01k\xfb\0\x01@\x01\x04self\xf9\0\0\xfc\0\x04\0\
\x1d[method]search-oplog.get-next\x01}\x03\0\x15golem:api/oplog@1.1.5\x05\x15\x01\
B\x03\x01ps\x01@\0\0\0\x04\0\x15get-invoked-functions\x01\x01\x04\0\x13golem:com\
ponent/api\x05\x16\x02\x03\0\x04\x0ccomponent-id\x02\x03\0\x04\x0fworker-metadat\
a\x02\x03\0\x06\x0boplog-entry\x01B\x1d\x02\x03\x02\x01\x02\x04\0\x08datetime\x03\
\0\0\x02\x03\x02\x01\x07\x04\0\x09wit-value\x03\0\x02\x02\x03\x02\x01\x0b\x04\0\x0a\
account-id\x03\0\x04\x02\x03\x02\x01\x17\x04\0\x0ccomponent-id\x03\0\x06\x02\x03\
\x02\x01\x0d\x04\0\x0boplog-index\x03\0\x08\x02\x03\x02\x01\x10\x04\0\x09worker-\
id\x03\0\x0a\x02\x03\x02\x01\x18\x04\0\x0fworker-metadata\x03\0\x0c\x02\x03\x02\x01\
\x19\x04\0\x0boplog-entry\x03\0\x0e\x01r\x01\x0aaccount-id\x05\x04\0\x0caccount-\
info\x03\0\x10\x04\0\x09processor\x03\x01\x01o\x02ss\x01p\x13\x01i\x12\x01@\x03\x0c\
account-info\x11\x0ccomponent-id\x07\x06config\x14\0\x15\x04\0\x16[constructor]p\
rocessor\x01\x16\x01h\x12\x01p\x0f\x01j\0\x01s\x01@\x05\x04self\x17\x09worker-id\
\x0b\x08metadata\x0d\x11first-entry-index\x09\x07entries\x18\0\x19\x04\0\x19[met\
hod]processor.process\x01\x1a\x04\0\x1fgolem:api/oplog-processor@1.1.5\x05\x1a\x04\
\0\x1fgolem:component/oplog-processor\x04\0\x0b\x15\x01\0\x0foplog-processor\x03\
\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.220.0\x10wit-\
bindgen-rust\x060.36.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
