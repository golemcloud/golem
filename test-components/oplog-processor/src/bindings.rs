// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod golem {
    pub mod api {
        /// The Golem host API provides low level access to Golem specific features such as promises and control over
        /// the durability and transactional guarantees the executor provides.
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod host {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Duration = super::super::super::wasi::clocks::monotonic_clock::Duration;
            pub type ComponentId = super::super::super::golem::rpc::types::ComponentId;
            pub type Uuid = super::super::super::golem::rpc::types::Uuid;
            pub type AgentId = super::super::super::golem::rpc::types::AgentId;
            pub type Pollable = super::super::super::wasi::io::poll::Pollable;
            /// An index into the persistent log storing all performed operations of an agent
            pub type OplogIndex = u64;
            /// A promise ID is a value that can be passed to an external Golem API to complete that promise
            /// from an arbitrary external source, while Golem agents can await for this completion.
            #[derive(Clone)]
            pub struct PromiseId {
                pub agent_id: AgentId,
                pub oplog_idx: OplogIndex,
            }
            impl ::core::fmt::Debug for PromiseId {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("PromiseId")
                        .field("agent-id", &self.agent_id)
                        .field("oplog-idx", &self.oplog_idx)
                        .finish()
                }
            }
            /// Represents a Golem component's version
            pub type ComponentVersion = u64;
            /// Represents a Golem Cloud account
            #[derive(Clone)]
            pub struct AccountId {
                pub value: _rt::String,
            }
            impl ::core::fmt::Debug for AccountId {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AccountId").field("value", &self.value).finish()
                }
            }
            /// Represents a Golem project
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct ProjectId {
                pub uuid: Uuid,
            }
            impl ::core::fmt::Debug for ProjectId {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ProjectId").field("uuid", &self.uuid).finish()
                }
            }
            /// Configures how the executor retries failures
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct RetryPolicy {
                /// The maximum number of retries before the agent becomes permanently failed
                pub max_attempts: u32,
                /// The minimum delay between retries (applied to the first retry)
                pub min_delay: Duration,
                /// The maximum delay between retries
                pub max_delay: Duration,
                /// Multiplier applied to the delay on each retry to implement exponential backoff
                pub multiplier: f64,
                /// The maximum amount of jitter to add to the delay
                pub max_jitter_factor: Option<f64>,
            }
            impl ::core::fmt::Debug for RetryPolicy {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("RetryPolicy")
                        .field("max-attempts", &self.max_attempts)
                        .field("min-delay", &self.min_delay)
                        .field("max-delay", &self.max_delay)
                        .field("multiplier", &self.multiplier)
                        .field("max-jitter-factor", &self.max_jitter_factor)
                        .finish()
                }
            }
            /// Configurable persistence level for agents
            #[derive(Clone, Copy)]
            pub enum PersistenceLevel {
                PersistNothing,
                PersistRemoteSideEffects,
                Smart,
            }
            impl ::core::fmt::Debug for PersistenceLevel {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        PersistenceLevel::PersistNothing => {
                            f.debug_tuple("PersistenceLevel::PersistNothing").finish()
                        }
                        PersistenceLevel::PersistRemoteSideEffects => {
                            f.debug_tuple("PersistenceLevel::PersistRemoteSideEffects")
                                .finish()
                        }
                        PersistenceLevel::Smart => {
                            f.debug_tuple("PersistenceLevel::Smart").finish()
                        }
                    }
                }
            }
            /// Describes how to update an agent to a different component version
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum UpdateMode {
                /// Automatic update tries to recover the agent using the new component version
                /// and may fail if there is a divergence.
                Automatic,
                /// Manual, snapshot-based update uses a user-defined implementation of the `save-snapshot` interface
                /// to store the agent's state, and a user-defined implementation of the `load-snapshot` interface to
                /// load it into the new version.
                SnapshotBased,
            }
            impl ::core::fmt::Debug for UpdateMode {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        UpdateMode::Automatic => {
                            f.debug_tuple("UpdateMode::Automatic").finish()
                        }
                        UpdateMode::SnapshotBased => {
                            f.debug_tuple("UpdateMode::SnapshotBased").finish()
                        }
                    }
                }
            }
            impl UpdateMode {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> UpdateMode {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => UpdateMode::Automatic,
                        1 => UpdateMode::SnapshotBased,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            /// Operators used in filtering enumerated agents
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum FilterComparator {
                Equal,
                NotEqual,
                GreaterEqual,
                Greater,
                LessEqual,
                Less,
            }
            impl ::core::fmt::Debug for FilterComparator {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        FilterComparator::Equal => {
                            f.debug_tuple("FilterComparator::Equal").finish()
                        }
                        FilterComparator::NotEqual => {
                            f.debug_tuple("FilterComparator::NotEqual").finish()
                        }
                        FilterComparator::GreaterEqual => {
                            f.debug_tuple("FilterComparator::GreaterEqual").finish()
                        }
                        FilterComparator::Greater => {
                            f.debug_tuple("FilterComparator::Greater").finish()
                        }
                        FilterComparator::LessEqual => {
                            f.debug_tuple("FilterComparator::LessEqual").finish()
                        }
                        FilterComparator::Less => {
                            f.debug_tuple("FilterComparator::Less").finish()
                        }
                    }
                }
            }
            impl FilterComparator {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> FilterComparator {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => FilterComparator::Equal,
                        1 => FilterComparator::NotEqual,
                        2 => FilterComparator::GreaterEqual,
                        3 => FilterComparator::Greater,
                        4 => FilterComparator::LessEqual,
                        5 => FilterComparator::Less,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            /// Operators used on strings in filtering enumerated agents
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum StringFilterComparator {
                Equal,
                NotEqual,
                Like,
                NotLike,
                StartsWith,
            }
            impl ::core::fmt::Debug for StringFilterComparator {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        StringFilterComparator::Equal => {
                            f.debug_tuple("StringFilterComparator::Equal").finish()
                        }
                        StringFilterComparator::NotEqual => {
                            f.debug_tuple("StringFilterComparator::NotEqual").finish()
                        }
                        StringFilterComparator::Like => {
                            f.debug_tuple("StringFilterComparator::Like").finish()
                        }
                        StringFilterComparator::NotLike => {
                            f.debug_tuple("StringFilterComparator::NotLike").finish()
                        }
                        StringFilterComparator::StartsWith => {
                            f.debug_tuple("StringFilterComparator::StartsWith").finish()
                        }
                    }
                }
            }
            impl StringFilterComparator {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> StringFilterComparator {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => StringFilterComparator::Equal,
                        1 => StringFilterComparator::NotEqual,
                        2 => StringFilterComparator::Like,
                        3 => StringFilterComparator::NotLike,
                        4 => StringFilterComparator::StartsWith,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            /// The current status of an agent
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum AgentStatus {
                /// The agent is running an invoked function
                Running,
                /// The agent is ready to run an invoked function
                Idle,
                /// An invocation is active but waiting for something (sleeping, waiting for a promise)
                Suspended,
                /// The last invocation was interrupted but will be resumed
                Interrupted,
                /// The last invocation failed and a retry was scheduled
                Retrying,
                /// The last invocation failed and the agent can no longer be used
                Failed,
                /// The agent exited after a successful invocation and can no longer be invoked
                Exited,
            }
            impl ::core::fmt::Debug for AgentStatus {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        AgentStatus::Running => {
                            f.debug_tuple("AgentStatus::Running").finish()
                        }
                        AgentStatus::Idle => f.debug_tuple("AgentStatus::Idle").finish(),
                        AgentStatus::Suspended => {
                            f.debug_tuple("AgentStatus::Suspended").finish()
                        }
                        AgentStatus::Interrupted => {
                            f.debug_tuple("AgentStatus::Interrupted").finish()
                        }
                        AgentStatus::Retrying => {
                            f.debug_tuple("AgentStatus::Retrying").finish()
                        }
                        AgentStatus::Failed => {
                            f.debug_tuple("AgentStatus::Failed").finish()
                        }
                        AgentStatus::Exited => {
                            f.debug_tuple("AgentStatus::Exited").finish()
                        }
                    }
                }
            }
            impl AgentStatus {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> AgentStatus {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => AgentStatus::Running,
                        1 => AgentStatus::Idle,
                        2 => AgentStatus::Suspended,
                        3 => AgentStatus::Interrupted,
                        4 => AgentStatus::Retrying,
                        5 => AgentStatus::Failed,
                        6 => AgentStatus::Exited,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            /// Describes a filter condition on agent IDs when enumerating agents
            #[derive(Clone)]
            pub struct AgentNameFilter {
                pub comparator: StringFilterComparator,
                pub value: _rt::String,
            }
            impl ::core::fmt::Debug for AgentNameFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AgentNameFilter")
                        .field("comparator", &self.comparator)
                        .field("value", &self.value)
                        .finish()
                }
            }
            /// Describes a filter condition on the agent status when enumerating agents
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct AgentStatusFilter {
                pub comparator: FilterComparator,
                pub value: AgentStatus,
            }
            impl ::core::fmt::Debug for AgentStatusFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AgentStatusFilter")
                        .field("comparator", &self.comparator)
                        .field("value", &self.value)
                        .finish()
                }
            }
            /// Describes a filter condition on the component version when enumerating agents
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct AgentVersionFilter {
                pub comparator: FilterComparator,
                pub value: u64,
            }
            impl ::core::fmt::Debug for AgentVersionFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AgentVersionFilter")
                        .field("comparator", &self.comparator)
                        .field("value", &self.value)
                        .finish()
                }
            }
            /// Describes a filter condition on the agent's creation time when enumerating agents
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct AgentCreatedAtFilter {
                pub comparator: FilterComparator,
                pub value: u64,
            }
            impl ::core::fmt::Debug for AgentCreatedAtFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AgentCreatedAtFilter")
                        .field("comparator", &self.comparator)
                        .field("value", &self.value)
                        .finish()
                }
            }
            /// Describes a filter condition on the agent's environment variables when enumerating agents
            #[derive(Clone)]
            pub struct AgentEnvFilter {
                pub name: _rt::String,
                pub comparator: StringFilterComparator,
                pub value: _rt::String,
            }
            impl ::core::fmt::Debug for AgentEnvFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AgentEnvFilter")
                        .field("name", &self.name)
                        .field("comparator", &self.comparator)
                        .field("value", &self.value)
                        .finish()
                }
            }
            /// Describes a filter condition on the agent's configuration variables when enumerating agents
            #[derive(Clone)]
            pub struct AgentConfigVarsFilter {
                pub name: _rt::String,
                pub comparator: StringFilterComparator,
                pub value: _rt::String,
            }
            impl ::core::fmt::Debug for AgentConfigVarsFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AgentConfigVarsFilter")
                        .field("name", &self.name)
                        .field("comparator", &self.comparator)
                        .field("value", &self.value)
                        .finish()
                }
            }
            /// Describes one filter condition for enumerating agents
            #[derive(Clone)]
            pub enum AgentPropertyFilter {
                Name(AgentNameFilter),
                Status(AgentStatusFilter),
                Version(AgentVersionFilter),
                CreatedAt(AgentCreatedAtFilter),
                Env(AgentEnvFilter),
                WasiConfigVars(AgentConfigVarsFilter),
            }
            impl ::core::fmt::Debug for AgentPropertyFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        AgentPropertyFilter::Name(e) => {
                            f.debug_tuple("AgentPropertyFilter::Name").field(e).finish()
                        }
                        AgentPropertyFilter::Status(e) => {
                            f.debug_tuple("AgentPropertyFilter::Status")
                                .field(e)
                                .finish()
                        }
                        AgentPropertyFilter::Version(e) => {
                            f.debug_tuple("AgentPropertyFilter::Version")
                                .field(e)
                                .finish()
                        }
                        AgentPropertyFilter::CreatedAt(e) => {
                            f.debug_tuple("AgentPropertyFilter::CreatedAt")
                                .field(e)
                                .finish()
                        }
                        AgentPropertyFilter::Env(e) => {
                            f.debug_tuple("AgentPropertyFilter::Env").field(e).finish()
                        }
                        AgentPropertyFilter::WasiConfigVars(e) => {
                            f.debug_tuple("AgentPropertyFilter::WasiConfigVars")
                                .field(e)
                                .finish()
                        }
                    }
                }
            }
            /// Combines multiple filter conditions with an `AND` relationship for enumerating agents
            #[derive(Clone)]
            pub struct AgentAllFilter {
                pub filters: _rt::Vec<AgentPropertyFilter>,
            }
            impl ::core::fmt::Debug for AgentAllFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AgentAllFilter")
                        .field("filters", &self.filters)
                        .finish()
                }
            }
            /// Combines multiple groups of filter conditions with an `OR` relationship for enumerating agents
            #[derive(Clone)]
            pub struct AgentAnyFilter {
                pub filters: _rt::Vec<AgentAllFilter>,
            }
            impl ::core::fmt::Debug for AgentAnyFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AgentAnyFilter")
                        .field("filters", &self.filters)
                        .finish()
                }
            }
            /// Metadata about an agent
            #[derive(Clone)]
            pub struct AgentMetadata {
                /// The agent ID, consists of the component ID, agent type and agent parameters
                pub agent_id: AgentId,
                /// Command line arguments seen by the agent
                pub args: _rt::Vec<_rt::String>,
                /// Environment variables seen by the agent
                pub env: _rt::Vec<(_rt::String, _rt::String)>,
                /// Configuration variables seen by the agent
                pub config_vars: _rt::Vec<(_rt::String, _rt::String)>,
                /// The current agent status
                pub status: AgentStatus,
                /// The component version the agent is running with
                pub component_version: u64,
                /// The agent's current retry count
                pub retry_count: u64,
            }
            impl ::core::fmt::Debug for AgentMetadata {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AgentMetadata")
                        .field("agent-id", &self.agent_id)
                        .field("args", &self.args)
                        .field("env", &self.env)
                        .field("config-vars", &self.config_vars)
                        .field("status", &self.status)
                        .field("component-version", &self.component_version)
                        .field("retry-count", &self.retry_count)
                        .finish()
                }
            }
            /// Creates an agent enumeration
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct GetAgents {
                handle: _rt::Resource<GetAgents>,
            }
            impl GetAgents {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for GetAgents {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:api/host@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]get-agents"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            /// Target parameter for the `revert-agent` operation
            #[derive(Clone, Copy)]
            pub enum RevertAgentTarget {
                /// Revert to a specific oplog index. The given index will be the last one to be kept.
                RevertToOplogIndex(OplogIndex),
                /// Revert the last N invocations.
                RevertLastInvocations(u64),
            }
            impl ::core::fmt::Debug for RevertAgentTarget {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        RevertAgentTarget::RevertToOplogIndex(e) => {
                            f.debug_tuple("RevertAgentTarget::RevertToOplogIndex")
                                .field(e)
                                .finish()
                        }
                        RevertAgentTarget::RevertLastInvocations(e) => {
                            f.debug_tuple("RevertAgentTarget::RevertLastInvocations")
                                .field(e)
                                .finish()
                        }
                    }
                }
            }
            /// Indicates which agent the code is running on after `fork`
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum ForkResult {
                /// The original agent that called `fork`
                Original,
                /// The new agent
                Forked,
            }
            impl ::core::fmt::Debug for ForkResult {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ForkResult::Original => {
                            f.debug_tuple("ForkResult::Original").finish()
                        }
                        ForkResult::Forked => {
                            f.debug_tuple("ForkResult::Forked").finish()
                        }
                    }
                }
            }
            impl ForkResult {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> ForkResult {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => ForkResult::Original,
                        1 => ForkResult::Forked,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct GetPromiseResult {
                handle: _rt::Resource<GetPromiseResult>,
            }
            impl GetPromiseResult {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for GetPromiseResult {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:api/host@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]get-promise-result"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            impl GetAgents {
                #[allow(unused_unsafe, clippy::all)]
                /// Creates an agent enumeration request. It is going to enumerate all agents of all the agent types
                /// defined in `component-id`, filtered by the conditions given by `filter`. If `precise` is true,
                /// the server will calculate the most recent state of all the returned agents, otherwise the returned
                /// metadata will be not guaranteed to be up-to-date.
                pub fn new(
                    component_id: ComponentId,
                    filter: Option<&AgentAnyFilter>,
                    precise: bool,
                ) -> Self {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        let super::super::super::golem::rpc::types::ComponentId {
                            uuid: uuid0,
                        } = component_id;
                        let super::super::super::golem::rpc::types::Uuid {
                            high_bits: high_bits1,
                            low_bits: low_bits1,
                        } = uuid0;
                        let (result17_0, result17_1, result17_2) = match filter {
                            Some(e) => {
                                let AgentAnyFilter { filters: filters2 } = e;
                                let vec16 = filters2;
                                let len16 = vec16.len();
                                let layout16 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec16.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                let result16 = if layout16.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout16).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout16);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec16.into_iter().enumerate() {
                                    let base = result16
                                        .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                    {
                                        let AgentAllFilter { filters: filters3 } = e;
                                        let vec15 = filters3;
                                        let len15 = vec15.len();
                                        let layout15 = _rt::alloc::Layout::from_size_align_unchecked(
                                            vec15.len()
                                                * (16 + 4 * ::core::mem::size_of::<*const u8>()),
                                            8,
                                        );
                                        let result15 = if layout15.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout15).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout15);
                                            }
                                            ptr
                                        } else {
                                            ::core::ptr::null_mut()
                                        };
                                        for (i, e) in vec15.into_iter().enumerate() {
                                            let base = result15
                                                .add(i * (16 + 4 * ::core::mem::size_of::<*const u8>()));
                                            {
                                                match e {
                                                    AgentPropertyFilter::Name(e) => {
                                                        *base.add(0).cast::<u8>() = (0i32) as u8;
                                                        let AgentNameFilter {
                                                            comparator: comparator4,
                                                            value: value4,
                                                        } = e;
                                                        *base.add(8).cast::<u8>() = (comparator4.clone() as i32)
                                                            as u8;
                                                        let vec5 = value4;
                                                        let ptr5 = vec5.as_ptr().cast::<u8>();
                                                        let len5 = vec5.len();
                                                        *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>() = len5;
                                                        *base
                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>() = ptr5.cast_mut();
                                                    }
                                                    AgentPropertyFilter::Status(e) => {
                                                        *base.add(0).cast::<u8>() = (1i32) as u8;
                                                        let AgentStatusFilter {
                                                            comparator: comparator6,
                                                            value: value6,
                                                        } = e;
                                                        *base.add(8).cast::<u8>() = (comparator6.clone() as i32)
                                                            as u8;
                                                        *base.add(9).cast::<u8>() = (value6.clone() as i32) as u8;
                                                    }
                                                    AgentPropertyFilter::Version(e) => {
                                                        *base.add(0).cast::<u8>() = (2i32) as u8;
                                                        let AgentVersionFilter {
                                                            comparator: comparator7,
                                                            value: value7,
                                                        } = e;
                                                        *base.add(8).cast::<u8>() = (comparator7.clone() as i32)
                                                            as u8;
                                                        *base.add(16).cast::<i64>() = _rt::as_i64(value7);
                                                    }
                                                    AgentPropertyFilter::CreatedAt(e) => {
                                                        *base.add(0).cast::<u8>() = (3i32) as u8;
                                                        let AgentCreatedAtFilter {
                                                            comparator: comparator8,
                                                            value: value8,
                                                        } = e;
                                                        *base.add(8).cast::<u8>() = (comparator8.clone() as i32)
                                                            as u8;
                                                        *base.add(16).cast::<i64>() = _rt::as_i64(value8);
                                                    }
                                                    AgentPropertyFilter::Env(e) => {
                                                        *base.add(0).cast::<u8>() = (4i32) as u8;
                                                        let AgentEnvFilter {
                                                            name: name9,
                                                            comparator: comparator9,
                                                            value: value9,
                                                        } = e;
                                                        let vec10 = name9;
                                                        let ptr10 = vec10.as_ptr().cast::<u8>();
                                                        let len10 = vec10.len();
                                                        *base
                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>() = len10;
                                                        *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                                        *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>() = (comparator9.clone() as i32) as u8;
                                                        let vec11 = value9;
                                                        let ptr11 = vec11.as_ptr().cast::<u8>();
                                                        let len11 = vec11.len();
                                                        *base
                                                            .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>() = len11;
                                                        *base
                                                            .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>() = ptr11.cast_mut();
                                                    }
                                                    AgentPropertyFilter::WasiConfigVars(e) => {
                                                        *base.add(0).cast::<u8>() = (5i32) as u8;
                                                        let AgentConfigVarsFilter {
                                                            name: name12,
                                                            comparator: comparator12,
                                                            value: value12,
                                                        } = e;
                                                        let vec13 = name12;
                                                        let ptr13 = vec13.as_ptr().cast::<u8>();
                                                        let len13 = vec13.len();
                                                        *base
                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>() = len13;
                                                        *base.add(8).cast::<*mut u8>() = ptr13.cast_mut();
                                                        *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>() = (comparator12.clone() as i32) as u8;
                                                        let vec14 = value12;
                                                        let ptr14 = vec14.as_ptr().cast::<u8>();
                                                        let len14 = vec14.len();
                                                        *base
                                                            .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>() = len14;
                                                        *base
                                                            .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>() = ptr14.cast_mut();
                                                    }
                                                }
                                            }
                                        }
                                        *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>() = len15;
                                        *base.add(0).cast::<*mut u8>() = result15;
                                        cleanup_list.extend_from_slice(&[(result15, layout15)]);
                                    }
                                }
                                cleanup_list.extend_from_slice(&[(result16, layout16)]);
                                (1i32, result16, len16)
                            }
                            None => (0i32, ::core::ptr::null_mut(), 0usize),
                        };
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/host@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[constructor]get-agents"]
                            fn wit_import18(
                                _: i64,
                                _: i64,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                            ) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import18(
                            _: i64,
                            _: i64,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe {
                            wit_import18(
                                _rt::as_i64(high_bits1),
                                _rt::as_i64(low_bits1),
                                result17_0,
                                result17_1,
                                result17_2,
                                match &precise {
                                    true => 1,
                                    false => 0,
                                },
                            )
                        };
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        unsafe { GetAgents::from_handle(ret as u32) }
                    }
                }
            }
            impl GetAgents {
                #[allow(unused_unsafe, clippy::all)]
                /// Retrieves the next batch of agent metadata.
                pub fn get_next(&self) -> Option<_rt::Vec<AgentMetadata>> {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 3 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 3
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/host@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[method]get-agents.get-next"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result38 = match l2 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l3 = *ptr0
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l4 = *ptr0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base37 = l3;
                                    let len37 = l4;
                                    let mut result37 = _rt::Vec::with_capacity(len37);
                                    for i in 0..len37 {
                                        let base = base37
                                            .add(i * (40 + 8 * ::core::mem::size_of::<*const u8>()));
                                        let e37 = {
                                            let l5 = *base.add(0).cast::<i64>();
                                            let l6 = *base.add(8).cast::<i64>();
                                            let l7 = *base.add(16).cast::<*mut u8>();
                                            let l8 = *base
                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len9 = l8;
                                            let bytes9 = _rt::Vec::from_raw_parts(
                                                l7.cast(),
                                                len9,
                                                len9,
                                            );
                                            let l10 = *base
                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l11 = *base
                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base15 = l10;
                                            let len15 = l11;
                                            let mut result15 = _rt::Vec::with_capacity(len15);
                                            for i in 0..len15 {
                                                let base = base15
                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                let e15 = {
                                                    let l12 = *base.add(0).cast::<*mut u8>();
                                                    let l13 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len14 = l13;
                                                    let bytes14 = _rt::Vec::from_raw_parts(
                                                        l12.cast(),
                                                        len14,
                                                        len14,
                                                    );
                                                    _rt::string_lift(bytes14)
                                                };
                                                result15.push(e15);
                                            }
                                            _rt::cabi_dealloc(
                                                base15,
                                                len15 * (2 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let l16 = *base
                                                .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l17 = *base
                                                .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base24 = l16;
                                            let len24 = l17;
                                            let mut result24 = _rt::Vec::with_capacity(len24);
                                            for i in 0..len24 {
                                                let base = base24
                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                let e24 = {
                                                    let l18 = *base.add(0).cast::<*mut u8>();
                                                    let l19 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len20 = l19;
                                                    let bytes20 = _rt::Vec::from_raw_parts(
                                                        l18.cast(),
                                                        len20,
                                                        len20,
                                                    );
                                                    let l21 = *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l22 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len23 = l22;
                                                    let bytes23 = _rt::Vec::from_raw_parts(
                                                        l21.cast(),
                                                        len23,
                                                        len23,
                                                    );
                                                    (_rt::string_lift(bytes20), _rt::string_lift(bytes23))
                                                };
                                                result24.push(e24);
                                            }
                                            _rt::cabi_dealloc(
                                                base24,
                                                len24 * (4 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let l25 = *base
                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l26 = *base
                                                .add(16 + 7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base33 = l25;
                                            let len33 = l26;
                                            let mut result33 = _rt::Vec::with_capacity(len33);
                                            for i in 0..len33 {
                                                let base = base33
                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                let e33 = {
                                                    let l27 = *base.add(0).cast::<*mut u8>();
                                                    let l28 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len29 = l28;
                                                    let bytes29 = _rt::Vec::from_raw_parts(
                                                        l27.cast(),
                                                        len29,
                                                        len29,
                                                    );
                                                    let l30 = *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l31 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len32 = l31;
                                                    let bytes32 = _rt::Vec::from_raw_parts(
                                                        l30.cast(),
                                                        len32,
                                                        len32,
                                                    );
                                                    (_rt::string_lift(bytes29), _rt::string_lift(bytes32))
                                                };
                                                result33.push(e33);
                                            }
                                            _rt::cabi_dealloc(
                                                base33,
                                                len33 * (4 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let l34 = i32::from(
                                                *base
                                                    .add(16 + 8 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            let l35 = *base
                                                .add(24 + 8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i64>();
                                            let l36 = *base
                                                .add(32 + 8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i64>();
                                            AgentMetadata {
                                                agent_id: super::super::super::golem::rpc::types::AgentId {
                                                    component_id: super::super::super::golem::rpc::types::ComponentId {
                                                        uuid: super::super::super::golem::rpc::types::Uuid {
                                                            high_bits: l5 as u64,
                                                            low_bits: l6 as u64,
                                                        },
                                                    },
                                                    agent_id: _rt::string_lift(bytes9),
                                                },
                                                args: result15,
                                                env: result24,
                                                config_vars: result33,
                                                status: AgentStatus::_lift(l34 as u8),
                                                component_version: l35 as u64,
                                                retry_count: l36 as u64,
                                            }
                                        };
                                        result37.push(e37);
                                    }
                                    _rt::cabi_dealloc(
                                        base37,
                                        len37 * (40 + 8 * ::core::mem::size_of::<*const u8>()),
                                        8,
                                    );
                                    result37
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result38
                    }
                }
            }
            impl GetPromiseResult {
                #[allow(unused_unsafe, clippy::all)]
                /// Returns a pollable that can be used to wait for the promise to become ready.j
                pub fn subscribe(&self) -> Pollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/host@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[method]get-promise-result.subscribe"]
                            fn wit_import0(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe { wit_import0((self).handle() as i32) };
                        unsafe {
                            super::super::super::wasi::io::poll::Pollable::from_handle(
                                ret as u32,
                            )
                        }
                    }
                }
            }
            impl GetPromiseResult {
                #[allow(unused_unsafe, clippy::all)]
                /// Poll the result of the promise, returning none if it is not yet ready.
                pub fn get(&self) -> Option<_rt::Vec<u8>> {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 3 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 3
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/host@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[method]get-promise-result.get"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result6 = match l2 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l3 = *ptr0
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l4 = *ptr0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let len5 = l4;
                                    _rt::Vec::from_raw_parts(l3.cast(), len5, len5)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result6
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Create a new promise
            pub fn create_promise() -> PromiseId {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 24 + 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 24
                            + 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "create-promise"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = *ptr0.add(0).cast::<i64>();
                    let l3 = *ptr0.add(8).cast::<i64>();
                    let l4 = *ptr0.add(16).cast::<*mut u8>();
                    let l5 = *ptr0
                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len6 = l5;
                    let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);
                    let l7 = *ptr0
                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                        .cast::<i64>();
                    let result8 = PromiseId {
                        agent_id: super::super::super::golem::rpc::types::AgentId {
                            component_id: super::super::super::golem::rpc::types::ComponentId {
                                uuid: super::super::super::golem::rpc::types::Uuid {
                                    high_bits: l2 as u64,
                                    low_bits: l3 as u64,
                                },
                            },
                            agent_id: _rt::string_lift(bytes6),
                        },
                        oplog_idx: l7 as u64,
                    };
                    result8
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Gets a handle to the result of the promise. Can only be called in the same agent that orignally created the promise.
            pub fn get_promise(promise_id: &PromiseId) -> GetPromiseResult {
                unsafe {
                    let PromiseId { agent_id: agent_id0, oplog_idx: oplog_idx0 } = promise_id;
                    let super::super::super::golem::rpc::types::AgentId {
                        component_id: component_id1,
                        agent_id: agent_id1,
                    } = agent_id0;
                    let super::super::super::golem::rpc::types::ComponentId {
                        uuid: uuid2,
                    } = component_id1;
                    let super::super::super::golem::rpc::types::Uuid {
                        high_bits: high_bits3,
                        low_bits: low_bits3,
                    } = uuid2;
                    let vec4 = agent_id1;
                    let ptr4 = vec4.as_ptr().cast::<u8>();
                    let len4 = vec4.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "get-promise"]
                        fn wit_import5(
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                            _: i64,
                        ) -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import5(
                        _: i64,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                        _: i64,
                    ) -> i32 {
                        unreachable!()
                    }
                    let ret = unsafe {
                        wit_import5(
                            _rt::as_i64(high_bits3),
                            _rt::as_i64(low_bits3),
                            ptr4.cast_mut(),
                            len4,
                            _rt::as_i64(oplog_idx0),
                        )
                    };
                    unsafe { GetPromiseResult::from_handle(ret as u32) }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Completes the given promise with the given payload. Returns true if the promise was completed, false
            /// if the promise was already completed. The payload is passed to the agent that is awaiting the promise.
            pub fn complete_promise(promise_id: &PromiseId, data: &[u8]) -> bool {
                unsafe {
                    let PromiseId { agent_id: agent_id0, oplog_idx: oplog_idx0 } = promise_id;
                    let super::super::super::golem::rpc::types::AgentId {
                        component_id: component_id1,
                        agent_id: agent_id1,
                    } = agent_id0;
                    let super::super::super::golem::rpc::types::ComponentId {
                        uuid: uuid2,
                    } = component_id1;
                    let super::super::super::golem::rpc::types::Uuid {
                        high_bits: high_bits3,
                        low_bits: low_bits3,
                    } = uuid2;
                    let vec4 = agent_id1;
                    let ptr4 = vec4.as_ptr().cast::<u8>();
                    let len4 = vec4.len();
                    let vec5 = data;
                    let ptr5 = vec5.as_ptr().cast::<u8>();
                    let len5 = vec5.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "complete-promise"]
                        fn wit_import6(
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                        ) -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import6(
                        _: i64,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                    ) -> i32 {
                        unreachable!()
                    }
                    let ret = unsafe {
                        wit_import6(
                            _rt::as_i64(high_bits3),
                            _rt::as_i64(low_bits3),
                            ptr4.cast_mut(),
                            len4,
                            _rt::as_i64(oplog_idx0),
                            ptr5.cast_mut(),
                            len5,
                        )
                    };
                    _rt::bool_lift(ret as u8)
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Returns the current position in the persistent op log
            pub fn get_oplog_index() -> OplogIndex {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "get-oplog-index"]
                        fn wit_import0() -> i64;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0() -> i64 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0() };
                    ret as u64
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Makes the current agent travel back in time and continue execution from the given position in the persistent
            /// op log.
            pub fn set_oplog_index(oplog_idx: OplogIndex) -> () {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "set-oplog-index"]
                        fn wit_import0(_: i64);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: i64) {
                        unreachable!()
                    }
                    unsafe { wit_import0(_rt::as_i64(oplog_idx)) };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Blocks the execution until the oplog has been written to at least the specified number of replicas,
            /// or the maximum number of replicas if the requested number is higher.
            pub fn oplog_commit(replicas: u8) -> () {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "oplog-commit"]
                        fn wit_import0(_: i32);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: i32) {
                        unreachable!()
                    }
                    unsafe { wit_import0(_rt::as_i32(&replicas)) };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Marks the beginning of an atomic operation.
            /// In case of a failure within the region selected by `mark-begin-operation` and `mark-end-operation`
            /// the whole region will be reexecuted on retry.
            /// The end of the region is when `mark-end-operation` is called with the returned oplog-index.
            pub fn mark_begin_operation() -> OplogIndex {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "mark-begin-operation"]
                        fn wit_import0() -> i64;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0() -> i64 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0() };
                    ret as u64
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Commits this atomic operation. After `mark-end-operation` is called for a given index, further calls
            /// with the same parameter will do nothing.
            pub fn mark_end_operation(begin: OplogIndex) -> () {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "mark-end-operation"]
                        fn wit_import0(_: i64);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: i64) {
                        unreachable!()
                    }
                    unsafe { wit_import0(_rt::as_i64(begin)) };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Gets the current retry policy associated with the agent
            pub fn get_retry_policy() -> RetryPolicy {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 48]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 48]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "get-retry-policy"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = *ptr0.add(0).cast::<i32>();
                    let l3 = *ptr0.add(8).cast::<i64>();
                    let l4 = *ptr0.add(16).cast::<i64>();
                    let l5 = *ptr0.add(24).cast::<f64>();
                    let l6 = i32::from(*ptr0.add(32).cast::<u8>());
                    let result8 = RetryPolicy {
                        max_attempts: l2 as u32,
                        min_delay: l3 as u64,
                        max_delay: l4 as u64,
                        multiplier: l5,
                        max_jitter_factor: match l6 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l7 = *ptr0.add(40).cast::<f64>();
                                    l7
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    };
                    result8
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Overrides the current retry policy associated with the agent. Following this call, `get-retry-policy` will return the
            /// new retry policy.
            pub fn set_retry_policy(new_retry_policy: RetryPolicy) -> () {
                unsafe {
                    let RetryPolicy {
                        max_attempts: max_attempts0,
                        min_delay: min_delay0,
                        max_delay: max_delay0,
                        multiplier: multiplier0,
                        max_jitter_factor: max_jitter_factor0,
                    } = new_retry_policy;
                    let (result1_0, result1_1) = match max_jitter_factor0 {
                        Some(e) => (1i32, _rt::as_f64(e)),
                        None => (0i32, 0.0f64),
                    };
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "set-retry-policy"]
                        fn wit_import2(_: i32, _: i64, _: i64, _: f64, _: i32, _: f64);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(
                        _: i32,
                        _: i64,
                        _: i64,
                        _: f64,
                        _: i32,
                        _: f64,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import2(
                            _rt::as_i32(max_attempts0),
                            _rt::as_i64(min_delay0),
                            _rt::as_i64(max_delay0),
                            _rt::as_f64(multiplier0),
                            result1_0,
                            result1_1,
                        )
                    };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Gets the agent's current persistence level.
            pub fn get_oplog_persistence_level() -> PersistenceLevel {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "get-oplog-persistence-level"]
                        fn wit_import0() -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0() -> i32 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0() };
                    let v1 = match ret {
                        0 => PersistenceLevel::PersistNothing,
                        1 => PersistenceLevel::PersistRemoteSideEffects,
                        n => {
                            debug_assert_eq!(n, 2, "invalid enum discriminant");
                            PersistenceLevel::Smart
                        }
                    };
                    v1
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Sets the agent's current persistence level. This can increase the performance of execution in cases where durable
            /// execution is not required.
            pub fn set_oplog_persistence_level(
                new_persistence_level: PersistenceLevel,
            ) -> () {
                unsafe {
                    let result0 = match new_persistence_level {
                        PersistenceLevel::PersistNothing => 0i32,
                        PersistenceLevel::PersistRemoteSideEffects => 1i32,
                        PersistenceLevel::Smart => 2i32,
                    };
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "set-oplog-persistence-level"]
                        fn wit_import1(_: i32);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: i32) {
                        unreachable!()
                    }
                    unsafe { wit_import1(result0) };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Gets the current idempotence mode. See `set-idempotence-mode` for details.
            pub fn get_idempotence_mode() -> bool {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "get-idempotence-mode"]
                        fn wit_import0() -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0() -> i32 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0() };
                    _rt::bool_lift(ret as u8)
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Sets the current idempotence mode. The default is true.
            /// True means side-effects are treated idempotent and Golem guarantees at-least-once semantics.
            /// In case of false the executor provides at-most-once semantics, failing the agent in case it is
            /// not known if the side effect was already executed.
            pub fn set_idempotence_mode(idempotent: bool) -> () {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "set-idempotence-mode"]
                        fn wit_import0(_: i32);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: i32) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import0(
                            match &idempotent {
                                true => 1,
                                false => 0,
                            },
                        )
                    };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Generates an idempotency key. This operation will never be replayed —
            /// i.e. not only is this key generated, but it is persisted and committed, such that the key can be used in third-party systems (e.g. payment processing)
            /// to introduce idempotence.
            pub fn generate_idempotency_key() -> Uuid {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "generate-idempotency-key"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = *ptr0.add(0).cast::<i64>();
                    let l3 = *ptr0.add(8).cast::<i64>();
                    let result4 = super::super::super::golem::rpc::types::Uuid {
                        high_bits: l2 as u64,
                        low_bits: l3 as u64,
                    };
                    result4
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Initiates an update attempt for the given agent. The function returns immediately once the request has been processed,
            /// not waiting for the agent to get updated.
            pub fn update_agent(
                agent_id: &AgentId,
                target_version: ComponentVersion,
                mode: UpdateMode,
            ) -> () {
                unsafe {
                    let super::super::super::golem::rpc::types::AgentId {
                        component_id: component_id0,
                        agent_id: agent_id0,
                    } = agent_id;
                    let super::super::super::golem::rpc::types::ComponentId {
                        uuid: uuid1,
                    } = component_id0;
                    let super::super::super::golem::rpc::types::Uuid {
                        high_bits: high_bits2,
                        low_bits: low_bits2,
                    } = uuid1;
                    let vec3 = agent_id0;
                    let ptr3 = vec3.as_ptr().cast::<u8>();
                    let len3 = vec3.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "update-agent"]
                        fn wit_import4(
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                            _: i64,
                            _: i32,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import4(
                        _: i64,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                        _: i64,
                        _: i32,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import4(
                            _rt::as_i64(high_bits2),
                            _rt::as_i64(low_bits2),
                            ptr3.cast_mut(),
                            len3,
                            _rt::as_i64(target_version),
                            mode.clone() as i32,
                        )
                    };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Get the current agent's metadata
            pub fn get_self_metadata() -> AgentMetadata {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 40 + 8 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 40
                            + 8 * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "get-self-metadata"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = *ptr0.add(0).cast::<i64>();
                    let l3 = *ptr0.add(8).cast::<i64>();
                    let l4 = *ptr0.add(16).cast::<*mut u8>();
                    let l5 = *ptr0
                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len6 = l5;
                    let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);
                    let l7 = *ptr0
                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l8 = *ptr0
                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base12 = l7;
                    let len12 = l8;
                    let mut result12 = _rt::Vec::with_capacity(len12);
                    for i in 0..len12 {
                        let base = base12
                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                        let e12 = {
                            let l9 = *base.add(0).cast::<*mut u8>();
                            let l10 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len11 = l10;
                            let bytes11 = _rt::Vec::from_raw_parts(
                                l9.cast(),
                                len11,
                                len11,
                            );
                            _rt::string_lift(bytes11)
                        };
                        result12.push(e12);
                    }
                    _rt::cabi_dealloc(
                        base12,
                        len12 * (2 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let l13 = *ptr0
                        .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l14 = *ptr0
                        .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base21 = l13;
                    let len21 = l14;
                    let mut result21 = _rt::Vec::with_capacity(len21);
                    for i in 0..len21 {
                        let base = base21
                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                        let e21 = {
                            let l15 = *base.add(0).cast::<*mut u8>();
                            let l16 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len17 = l16;
                            let bytes17 = _rt::Vec::from_raw_parts(
                                l15.cast(),
                                len17,
                                len17,
                            );
                            let l18 = *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l19 = *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len20 = l19;
                            let bytes20 = _rt::Vec::from_raw_parts(
                                l18.cast(),
                                len20,
                                len20,
                            );
                            (_rt::string_lift(bytes17), _rt::string_lift(bytes20))
                        };
                        result21.push(e21);
                    }
                    _rt::cabi_dealloc(
                        base21,
                        len21 * (4 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let l22 = *ptr0
                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l23 = *ptr0
                        .add(16 + 7 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base30 = l22;
                    let len30 = l23;
                    let mut result30 = _rt::Vec::with_capacity(len30);
                    for i in 0..len30 {
                        let base = base30
                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                        let e30 = {
                            let l24 = *base.add(0).cast::<*mut u8>();
                            let l25 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len26 = l25;
                            let bytes26 = _rt::Vec::from_raw_parts(
                                l24.cast(),
                                len26,
                                len26,
                            );
                            let l27 = *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l28 = *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len29 = l28;
                            let bytes29 = _rt::Vec::from_raw_parts(
                                l27.cast(),
                                len29,
                                len29,
                            );
                            (_rt::string_lift(bytes26), _rt::string_lift(bytes29))
                        };
                        result30.push(e30);
                    }
                    _rt::cabi_dealloc(
                        base30,
                        len30 * (4 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let l31 = i32::from(
                        *ptr0
                            .add(16 + 8 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let l32 = *ptr0
                        .add(24 + 8 * ::core::mem::size_of::<*const u8>())
                        .cast::<i64>();
                    let l33 = *ptr0
                        .add(32 + 8 * ::core::mem::size_of::<*const u8>())
                        .cast::<i64>();
                    let result34 = AgentMetadata {
                        agent_id: super::super::super::golem::rpc::types::AgentId {
                            component_id: super::super::super::golem::rpc::types::ComponentId {
                                uuid: super::super::super::golem::rpc::types::Uuid {
                                    high_bits: l2 as u64,
                                    low_bits: l3 as u64,
                                },
                            },
                            agent_id: _rt::string_lift(bytes6),
                        },
                        args: result12,
                        env: result21,
                        config_vars: result30,
                        status: AgentStatus::_lift(l31 as u8),
                        component_version: l32 as u64,
                        retry_count: l33 as u64,
                    };
                    result34
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Get agent metadata
            pub fn get_agent_metadata(agent_id: &AgentId) -> Option<AgentMetadata> {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 48 + 8 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 48
                            + 8 * ::core::mem::size_of::<*const u8>()],
                    );
                    let super::super::super::golem::rpc::types::AgentId {
                        component_id: component_id0,
                        agent_id: agent_id0,
                    } = agent_id;
                    let super::super::super::golem::rpc::types::ComponentId {
                        uuid: uuid1,
                    } = component_id0;
                    let super::super::super::golem::rpc::types::Uuid {
                        high_bits: high_bits2,
                        low_bits: low_bits2,
                    } = uuid1;
                    let vec3 = agent_id0;
                    let ptr3 = vec3.as_ptr().cast::<u8>();
                    let len3 = vec3.len();
                    let ptr4 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "get-agent-metadata"]
                        fn wit_import5(_: i64, _: i64, _: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import5(
                        _: i64,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import5(
                            _rt::as_i64(high_bits2),
                            _rt::as_i64(low_bits2),
                            ptr3.cast_mut(),
                            len3,
                            ptr4,
                        )
                    };
                    let l6 = i32::from(*ptr4.add(0).cast::<u8>());
                    let result39 = match l6 {
                        0 => None,
                        1 => {
                            let e = {
                                let l7 = *ptr4.add(8).cast::<i64>();
                                let l8 = *ptr4.add(16).cast::<i64>();
                                let l9 = *ptr4.add(24).cast::<*mut u8>();
                                let l10 = *ptr4
                                    .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len11 = l10;
                                let bytes11 = _rt::Vec::from_raw_parts(
                                    l9.cast(),
                                    len11,
                                    len11,
                                );
                                let l12 = *ptr4
                                    .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l13 = *ptr4
                                    .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let base17 = l12;
                                let len17 = l13;
                                let mut result17 = _rt::Vec::with_capacity(len17);
                                for i in 0..len17 {
                                    let base = base17
                                        .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                    let e17 = {
                                        let l14 = *base.add(0).cast::<*mut u8>();
                                        let l15 = *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len16 = l15;
                                        let bytes16 = _rt::Vec::from_raw_parts(
                                            l14.cast(),
                                            len16,
                                            len16,
                                        );
                                        _rt::string_lift(bytes16)
                                    };
                                    result17.push(e17);
                                }
                                _rt::cabi_dealloc(
                                    base17,
                                    len17 * (2 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                let l18 = *ptr4
                                    .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l19 = *ptr4
                                    .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let base26 = l18;
                                let len26 = l19;
                                let mut result26 = _rt::Vec::with_capacity(len26);
                                for i in 0..len26 {
                                    let base = base26
                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                    let e26 = {
                                        let l20 = *base.add(0).cast::<*mut u8>();
                                        let l21 = *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len22 = l21;
                                        let bytes22 = _rt::Vec::from_raw_parts(
                                            l20.cast(),
                                            len22,
                                            len22,
                                        );
                                        let l23 = *base
                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l24 = *base
                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len25 = l24;
                                        let bytes25 = _rt::Vec::from_raw_parts(
                                            l23.cast(),
                                            len25,
                                            len25,
                                        );
                                        (_rt::string_lift(bytes22), _rt::string_lift(bytes25))
                                    };
                                    result26.push(e26);
                                }
                                _rt::cabi_dealloc(
                                    base26,
                                    len26 * (4 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                let l27 = *ptr4
                                    .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l28 = *ptr4
                                    .add(24 + 7 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let base35 = l27;
                                let len35 = l28;
                                let mut result35 = _rt::Vec::with_capacity(len35);
                                for i in 0..len35 {
                                    let base = base35
                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                    let e35 = {
                                        let l29 = *base.add(0).cast::<*mut u8>();
                                        let l30 = *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len31 = l30;
                                        let bytes31 = _rt::Vec::from_raw_parts(
                                            l29.cast(),
                                            len31,
                                            len31,
                                        );
                                        let l32 = *base
                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l33 = *base
                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len34 = l33;
                                        let bytes34 = _rt::Vec::from_raw_parts(
                                            l32.cast(),
                                            len34,
                                            len34,
                                        );
                                        (_rt::string_lift(bytes31), _rt::string_lift(bytes34))
                                    };
                                    result35.push(e35);
                                }
                                _rt::cabi_dealloc(
                                    base35,
                                    len35 * (4 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                let l36 = i32::from(
                                    *ptr4
                                        .add(24 + 8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l37 = *ptr4
                                    .add(32 + 8 * ::core::mem::size_of::<*const u8>())
                                    .cast::<i64>();
                                let l38 = *ptr4
                                    .add(40 + 8 * ::core::mem::size_of::<*const u8>())
                                    .cast::<i64>();
                                AgentMetadata {
                                    agent_id: super::super::super::golem::rpc::types::AgentId {
                                        component_id: super::super::super::golem::rpc::types::ComponentId {
                                            uuid: super::super::super::golem::rpc::types::Uuid {
                                                high_bits: l7 as u64,
                                                low_bits: l8 as u64,
                                            },
                                        },
                                        agent_id: _rt::string_lift(bytes11),
                                    },
                                    args: result17,
                                    env: result26,
                                    config_vars: result35,
                                    status: AgentStatus::_lift(l36 as u8),
                                    component_version: l37 as u64,
                                    retry_count: l38 as u64,
                                }
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result39
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Fork an agent to another agent at a given oplog index
            pub fn fork_agent(
                source_agent_id: &AgentId,
                target_agent_id: &AgentId,
                oplog_idx_cut_off: OplogIndex,
            ) -> () {
                unsafe {
                    let super::super::super::golem::rpc::types::AgentId {
                        component_id: component_id0,
                        agent_id: agent_id0,
                    } = source_agent_id;
                    let super::super::super::golem::rpc::types::ComponentId {
                        uuid: uuid1,
                    } = component_id0;
                    let super::super::super::golem::rpc::types::Uuid {
                        high_bits: high_bits2,
                        low_bits: low_bits2,
                    } = uuid1;
                    let vec3 = agent_id0;
                    let ptr3 = vec3.as_ptr().cast::<u8>();
                    let len3 = vec3.len();
                    let super::super::super::golem::rpc::types::AgentId {
                        component_id: component_id4,
                        agent_id: agent_id4,
                    } = target_agent_id;
                    let super::super::super::golem::rpc::types::ComponentId {
                        uuid: uuid5,
                    } = component_id4;
                    let super::super::super::golem::rpc::types::Uuid {
                        high_bits: high_bits6,
                        low_bits: low_bits6,
                    } = uuid5;
                    let vec7 = agent_id4;
                    let ptr7 = vec7.as_ptr().cast::<u8>();
                    let len7 = vec7.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "fork-agent"]
                        fn wit_import8(
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                            _: i64,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import8(
                        _: i64,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                        _: i64,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                        _: i64,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import8(
                            _rt::as_i64(high_bits2),
                            _rt::as_i64(low_bits2),
                            ptr3.cast_mut(),
                            len3,
                            _rt::as_i64(high_bits6),
                            _rt::as_i64(low_bits6),
                            ptr7.cast_mut(),
                            len7,
                            _rt::as_i64(oplog_idx_cut_off),
                        )
                    };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Revert an agent to a previous state
            pub fn revert_agent(
                agent_id: &AgentId,
                revert_target: RevertAgentTarget,
            ) -> () {
                unsafe {
                    let super::super::super::golem::rpc::types::AgentId {
                        component_id: component_id0,
                        agent_id: agent_id0,
                    } = agent_id;
                    let super::super::super::golem::rpc::types::ComponentId {
                        uuid: uuid1,
                    } = component_id0;
                    let super::super::super::golem::rpc::types::Uuid {
                        high_bits: high_bits2,
                        low_bits: low_bits2,
                    } = uuid1;
                    let vec3 = agent_id0;
                    let ptr3 = vec3.as_ptr().cast::<u8>();
                    let len3 = vec3.len();
                    let (result4_0, result4_1) = match revert_target {
                        RevertAgentTarget::RevertToOplogIndex(e) => {
                            (0i32, _rt::as_i64(e))
                        }
                        RevertAgentTarget::RevertLastInvocations(e) => {
                            (1i32, _rt::as_i64(e))
                        }
                    };
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "revert-agent"]
                        fn wit_import5(
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: i64,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import5(
                        _: i64,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: i64,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import5(
                            _rt::as_i64(high_bits2),
                            _rt::as_i64(low_bits2),
                            ptr3.cast_mut(),
                            len3,
                            result4_0,
                            result4_1,
                        )
                    };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Get the component-id for a given component reference.
            /// Returns none when no component with the specified reference exists.
            /// The syntax of the component reference is implementation dependent.
            ///
            /// Golem OSS: "{component_name}"
            /// Golem Cloud:
            ///     1: "{component_name}" -> will resolve in current account and project
            ///     2: "{project_name}/{component_name}" -> will resolve in current account
            ///     3: "{account_id}/{project_name}/{component_name}"
            pub fn resolve_component_id(
                component_reference: &str,
            ) -> Option<ComponentId> {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 24]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 24]);
                    let vec0 = component_reference;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "resolve-component-id"]
                        fn wit_import2(_: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import2(ptr0.cast_mut(), len0, ptr1) };
                    let l3 = i32::from(*ptr1.add(0).cast::<u8>());
                    let result6 = match l3 {
                        0 => None,
                        1 => {
                            let e = {
                                let l4 = *ptr1.add(8).cast::<i64>();
                                let l5 = *ptr1.add(16).cast::<i64>();
                                super::super::super::golem::rpc::types::ComponentId {
                                    uuid: super::super::super::golem::rpc::types::Uuid {
                                        high_bits: l4 as u64,
                                        low_bits: l5 as u64,
                                    },
                                }
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result6
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Get the agent-id for a given component and agent name.
            /// Returns none when no component for the specified reference exists.
            pub fn resolve_agent_id(
                component_reference: &str,
                agent_name: &str,
            ) -> Option<AgentId> {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 24 + 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 24
                            + 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let vec0 = component_reference;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let vec1 = agent_name;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let ptr2 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "resolve-agent-id"]
                        fn wit_import3(
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import3(
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import3(ptr0.cast_mut(), len0, ptr1.cast_mut(), len1, ptr2)
                    };
                    let l4 = i32::from(*ptr2.add(0).cast::<u8>());
                    let result10 = match l4 {
                        0 => None,
                        1 => {
                            let e = {
                                let l5 = *ptr2.add(8).cast::<i64>();
                                let l6 = *ptr2.add(16).cast::<i64>();
                                let l7 = *ptr2.add(24).cast::<*mut u8>();
                                let l8 = *ptr2
                                    .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len9 = l8;
                                let bytes9 = _rt::Vec::from_raw_parts(
                                    l7.cast(),
                                    len9,
                                    len9,
                                );
                                super::super::super::golem::rpc::types::AgentId {
                                    component_id: super::super::super::golem::rpc::types::ComponentId {
                                        uuid: super::super::super::golem::rpc::types::Uuid {
                                            high_bits: l5 as u64,
                                            low_bits: l6 as u64,
                                        },
                                    },
                                    agent_id: _rt::string_lift(bytes9),
                                }
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result10
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Get the agent-id for a given component and agent-name.
            /// Returns none when no component for the specified component-reference or no agent with the specified agent-name exists.
            pub fn resolve_agent_id_strict(
                component_reference: &str,
                agent_name: &str,
            ) -> Option<AgentId> {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 24 + 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 24
                            + 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let vec0 = component_reference;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let vec1 = agent_name;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let ptr2 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "resolve-agent-id-strict"]
                        fn wit_import3(
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import3(
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import3(ptr0.cast_mut(), len0, ptr1.cast_mut(), len1, ptr2)
                    };
                    let l4 = i32::from(*ptr2.add(0).cast::<u8>());
                    let result10 = match l4 {
                        0 => None,
                        1 => {
                            let e = {
                                let l5 = *ptr2.add(8).cast::<i64>();
                                let l6 = *ptr2.add(16).cast::<i64>();
                                let l7 = *ptr2.add(24).cast::<*mut u8>();
                                let l8 = *ptr2
                                    .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len9 = l8;
                                let bytes9 = _rt::Vec::from_raw_parts(
                                    l7.cast(),
                                    len9,
                                    len9,
                                );
                                super::super::super::golem::rpc::types::AgentId {
                                    component_id: super::super::super::golem::rpc::types::ComponentId {
                                        uuid: super::super::super::golem::rpc::types::Uuid {
                                            high_bits: l5 as u64,
                                            low_bits: l6 as u64,
                                        },
                                    },
                                    agent_id: _rt::string_lift(bytes9),
                                }
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result10
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Forks the current agent at the current execution point. The new agent gets the `new-name` agent ID,
            /// and this agent continues running as well. The return value is going to be different in this agent and
            /// the forked agent.
            pub fn fork(new_name: &str) -> ForkResult {
                unsafe {
                    let vec0 = new_name;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "fork"]
                        fn wit_import1(_: *mut u8, _: usize) -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8, _: usize) -> i32 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import1(ptr0.cast_mut(), len0) };
                    ForkResult::_lift(ret as u8)
                }
            }
        }
        /// Invocation context support
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod context {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Datetime = super::super::super::wasi::clocks::wall_clock::Datetime;
            /// Represents a unit of work or operation
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Span {
                handle: _rt::Resource<Span>,
            }
            impl Span {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for Span {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:api/context@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]span"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            /// Represents an invocation context wich allows querying the stack of attributes
            /// created by automatic and user-defined spans.
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct InvocationContext {
                handle: _rt::Resource<InvocationContext>,
            }
            impl InvocationContext {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for InvocationContext {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:api/context@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]invocation-context"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            /// Possible span attribute value types
            #[derive(Clone)]
            pub enum AttributeValue {
                /// A string value
                String(_rt::String),
            }
            impl ::core::fmt::Debug for AttributeValue {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        AttributeValue::String(e) => {
                            f.debug_tuple("AttributeValue::String").field(e).finish()
                        }
                    }
                }
            }
            /// An attribute of a span
            #[derive(Clone)]
            pub struct Attribute {
                pub key: _rt::String,
                pub value: AttributeValue,
            }
            impl ::core::fmt::Debug for Attribute {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Attribute")
                        .field("key", &self.key)
                        .field("value", &self.value)
                        .finish()
                }
            }
            /// A chain of attribute values, the first element representing the most recent value
            #[derive(Clone)]
            pub struct AttributeChain {
                pub key: _rt::String,
                pub values: _rt::Vec<AttributeValue>,
            }
            impl ::core::fmt::Debug for AttributeChain {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AttributeChain")
                        .field("key", &self.key)
                        .field("values", &self.values)
                        .finish()
                }
            }
            /// The trace represented by a 16 bytes hexadecimal string
            pub type TraceId = _rt::String;
            /// The span represented by a 8 bytes hexadecimal string
            pub type SpanId = _rt::String;
            #[allow(unused_unsafe, clippy::all)]
            /// Starts a new `span` with the given name, as a child of the current invocation context
            pub fn start_span(name: &str) -> Span {
                unsafe {
                    let vec0 = name;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/context@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "start-span"]
                        fn wit_import1(_: *mut u8, _: usize) -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8, _: usize) -> i32 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import1(ptr0.cast_mut(), len0) };
                    unsafe { Span::from_handle(ret as u32) }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Gets the current invocation context
            ///
            /// The function call captures the current context; if new spans are started, the returned `invocation-context` instance will not
            /// reflect that.
            pub fn current_context() -> InvocationContext {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/context@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "current-context"]
                        fn wit_import0() -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0() -> i32 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0() };
                    unsafe { InvocationContext::from_handle(ret as u32) }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Allows or disallows forwarding of trace context headers in outgoing HTTP requests
            ///
            /// Returns the previous value of the setting
            pub fn allow_forwarding_trace_context_headers(allow: bool) -> bool {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/context@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "allow-forwarding-trace-context-headers"]
                        fn wit_import0(_: i32) -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: i32) -> i32 {
                        unreachable!()
                    }
                    let ret = unsafe {
                        wit_import0(
                            match &allow {
                                true => 1,
                                false => 0,
                            },
                        )
                    };
                    _rt::bool_lift(ret as u8)
                }
            }
            impl Span {
                #[allow(unused_unsafe, clippy::all)]
                /// Gets the starting time of the span
                pub fn started_at(&self) -> Datetime {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 16],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/context@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[method]span.started-at"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = *ptr0.add(0).cast::<i64>();
                        let l3 = *ptr0.add(8).cast::<i32>();
                        let result4 = super::super::super::wasi::clocks::wall_clock::Datetime {
                            seconds: l2 as u64,
                            nanoseconds: l3 as u32,
                        };
                        result4
                    }
                }
            }
            impl Span {
                #[allow(unused_unsafe, clippy::all)]
                /// Set an attribute on the span
                pub fn set_attribute(&self, name: &str, value: &AttributeValue) -> () {
                    unsafe {
                        let vec0 = name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let (result2_0, result2_1, result2_2) = match value {
                            AttributeValue::String(e) => {
                                let vec1 = e;
                                let ptr1 = vec1.as_ptr().cast::<u8>();
                                let len1 = vec1.len();
                                (0i32, ptr1.cast_mut(), len1)
                            }
                        };
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/context@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[method]span.set-attribute"]
                            fn wit_import3(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import3(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                        ) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import3(
                                (self).handle() as i32,
                                ptr0.cast_mut(),
                                len0,
                                result2_0,
                                result2_1,
                                result2_2,
                            )
                        };
                    }
                }
            }
            impl Span {
                #[allow(unused_unsafe, clippy::all)]
                /// Set multiple attributes on the span
                pub fn set_attributes(&self, attributes: &[Attribute]) -> () {
                    unsafe {
                        let vec3 = attributes;
                        let len3 = vec3.len();
                        let layout3 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec3.len() * (5 * ::core::mem::size_of::<*const u8>()),
                            ::core::mem::size_of::<*const u8>(),
                        );
                        let result3 = if layout3.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout3).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout3);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec3.into_iter().enumerate() {
                            let base = result3
                                .add(i * (5 * ::core::mem::size_of::<*const u8>()));
                            {
                                let Attribute { key: key0, value: value0 } = e;
                                let vec1 = key0;
                                let ptr1 = vec1.as_ptr().cast::<u8>();
                                let len1 = vec1.len();
                                *base
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<usize>() = len1;
                                *base.add(0).cast::<*mut u8>() = ptr1.cast_mut();
                                match value0 {
                                    AttributeValue::String(e) => {
                                        *base
                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>() = (0i32) as u8;
                                        let vec2 = e;
                                        let ptr2 = vec2.as_ptr().cast::<u8>();
                                        let len2 = vec2.len();
                                        *base
                                            .add(4 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>() = len2;
                                        *base
                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>() = ptr2.cast_mut();
                                    }
                                }
                            }
                        }
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/context@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[method]span.set-attributes"]
                            fn wit_import4(_: i32, _: *mut u8, _: usize);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import4(_: i32, _: *mut u8, _: usize) {
                            unreachable!()
                        }
                        unsafe { wit_import4((self).handle() as i32, result3, len3) };
                        if layout3.size() != 0 {
                            _rt::alloc::dealloc(result3.cast(), layout3);
                        }
                    }
                }
            }
            impl Span {
                #[allow(unused_unsafe, clippy::all)]
                /// Early finishes the span; otherwise it will be finished when the resource is dropped
                pub fn finish(&self) -> () {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/context@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[method]span.finish"]
                            fn wit_import0(_: i32);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) {
                            unreachable!()
                        }
                        unsafe { wit_import0((self).handle() as i32) };
                    }
                }
            }
            impl InvocationContext {
                #[allow(unused_unsafe, clippy::all)]
                /// Gets the current trace id
                pub fn trace_id(&self) -> TraceId {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 2 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 2
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/context@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[method]invocation-context.trace-id"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = *ptr0.add(0).cast::<*mut u8>();
                        let l3 = *ptr0
                            .add(::core::mem::size_of::<*const u8>())
                            .cast::<usize>();
                        let len4 = l3;
                        let bytes4 = _rt::Vec::from_raw_parts(l2.cast(), len4, len4);
                        let result5 = _rt::string_lift(bytes4);
                        result5
                    }
                }
            }
            impl InvocationContext {
                #[allow(unused_unsafe, clippy::all)]
                /// Gets the current span id
                pub fn span_id(&self) -> SpanId {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 2 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 2
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/context@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[method]invocation-context.span-id"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = *ptr0.add(0).cast::<*mut u8>();
                        let l3 = *ptr0
                            .add(::core::mem::size_of::<*const u8>())
                            .cast::<usize>();
                        let len4 = l3;
                        let bytes4 = _rt::Vec::from_raw_parts(l2.cast(), len4, len4);
                        let result5 = _rt::string_lift(bytes4);
                        result5
                    }
                }
            }
            impl InvocationContext {
                #[allow(unused_unsafe, clippy::all)]
                /// Gets the parent context, if any; allows recursive processing of the invocation context.
                ///
                /// Alternatively, the attribute query methods can return inherited values without having to
                /// traverse the stack manually.
                pub fn parent(&self) -> Option<InvocationContext> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 8],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/context@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[method]invocation-context.parent"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result4 = match l2 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l3 = *ptr0.add(4).cast::<i32>();
                                    unsafe { InvocationContext::from_handle(l3 as u32) }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result4
                    }
                }
            }
            impl InvocationContext {
                #[allow(unused_unsafe, clippy::all)]
                /// Gets the value of an attribute `key`. If `inherited` is true, the value is searched in the stack of spans,
                /// otherwise only in the current span.
                pub fn get_attribute(
                    &self,
                    key: &str,
                    inherited: bool,
                ) -> Option<AttributeValue> {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 4 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 4
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let vec0 = key;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/context@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[method]invocation-context.get-attribute"]
                            fn wit_import2(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import2(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import2(
                                (self).handle() as i32,
                                ptr0.cast_mut(),
                                len0,
                                match &inherited {
                                    true => 1,
                                    false => 0,
                                },
                                ptr1,
                            )
                        };
                        let l3 = i32::from(*ptr1.add(0).cast::<u8>());
                        let result9 = match l3 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l4 = i32::from(
                                        *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                    );
                                    let v8 = match l4 {
                                        n => {
                                            debug_assert_eq!(n, 0, "invalid enum discriminant");
                                            let e8 = {
                                                let l5 = *ptr1
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l6 = *ptr1
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len7 = l6;
                                                let bytes7 = _rt::Vec::from_raw_parts(
                                                    l5.cast(),
                                                    len7,
                                                    len7,
                                                );
                                                _rt::string_lift(bytes7)
                                            };
                                            AttributeValue::String(e8)
                                        }
                                    };
                                    v8
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result9
                    }
                }
            }
            impl InvocationContext {
                #[allow(unused_unsafe, clippy::all)]
                /// Gets all attributes of the current invocation context. If `inherited` is true, it returns the merged set of attributes, each
                /// key associated with the latest value found in the stack of spans.
                pub fn get_attributes(&self, inherited: bool) -> _rt::Vec<Attribute> {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 2 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 2
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/context@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[method]invocation-context.get-attributes"]
                            fn wit_import1(_: i32, _: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import1(
                                (self).handle() as i32,
                                match &inherited {
                                    true => 1,
                                    false => 0,
                                },
                                ptr0,
                            )
                        };
                        let l2 = *ptr0.add(0).cast::<*mut u8>();
                        let l3 = *ptr0
                            .add(::core::mem::size_of::<*const u8>())
                            .cast::<usize>();
                        let base12 = l2;
                        let len12 = l3;
                        let mut result12 = _rt::Vec::with_capacity(len12);
                        for i in 0..len12 {
                            let base = base12
                                .add(i * (5 * ::core::mem::size_of::<*const u8>()));
                            let e12 = {
                                let l4 = *base.add(0).cast::<*mut u8>();
                                let l5 = *base
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len6 = l5;
                                let bytes6 = _rt::Vec::from_raw_parts(
                                    l4.cast(),
                                    len6,
                                    len6,
                                );
                                let l7 = i32::from(
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let v11 = match l7 {
                                    n => {
                                        debug_assert_eq!(n, 0, "invalid enum discriminant");
                                        let e11 = {
                                            let l8 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l9 = *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len10 = l9;
                                            let bytes10 = _rt::Vec::from_raw_parts(
                                                l8.cast(),
                                                len10,
                                                len10,
                                            );
                                            _rt::string_lift(bytes10)
                                        };
                                        AttributeValue::String(e11)
                                    }
                                };
                                Attribute {
                                    key: _rt::string_lift(bytes6),
                                    value: v11,
                                }
                            };
                            result12.push(e12);
                        }
                        _rt::cabi_dealloc(
                            base12,
                            len12 * (5 * ::core::mem::size_of::<*const u8>()),
                            ::core::mem::size_of::<*const u8>(),
                        );
                        let result13 = result12;
                        result13
                    }
                }
            }
            impl InvocationContext {
                #[allow(unused_unsafe, clippy::all)]
                /// Gets the chain of attribute values associated with the given `key`. If the key does not exist in any of the
                /// spans in the invocation context, the list is empty. The chain's first element contains the most recent (innermost) value.
                pub fn get_attribute_chain(
                    &self,
                    key: &str,
                ) -> _rt::Vec<AttributeValue> {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 2 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 2
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let vec0 = key;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/context@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[method]invocation-context.get-attribute-chain"]
                            fn wit_import2(_: i32, _: *mut u8, _: usize, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import2(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import2(
                                (self).handle() as i32,
                                ptr0.cast_mut(),
                                len0,
                                ptr1,
                            )
                        };
                        let l3 = *ptr1.add(0).cast::<*mut u8>();
                        let l4 = *ptr1
                            .add(::core::mem::size_of::<*const u8>())
                            .cast::<usize>();
                        let base10 = l3;
                        let len10 = l4;
                        let mut result10 = _rt::Vec::with_capacity(len10);
                        for i in 0..len10 {
                            let base = base10
                                .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                            let e10 = {
                                let l5 = i32::from(*base.add(0).cast::<u8>());
                                let v9 = match l5 {
                                    n => {
                                        debug_assert_eq!(n, 0, "invalid enum discriminant");
                                        let e9 = {
                                            let l6 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l7 = *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len8 = l7;
                                            let bytes8 = _rt::Vec::from_raw_parts(
                                                l6.cast(),
                                                len8,
                                                len8,
                                            );
                                            _rt::string_lift(bytes8)
                                        };
                                        AttributeValue::String(e9)
                                    }
                                };
                                v9
                            };
                            result10.push(e10);
                        }
                        _rt::cabi_dealloc(
                            base10,
                            len10 * (3 * ::core::mem::size_of::<*const u8>()),
                            ::core::mem::size_of::<*const u8>(),
                        );
                        let result11 = result10;
                        result11
                    }
                }
            }
            impl InvocationContext {
                #[allow(unused_unsafe, clippy::all)]
                /// Gets all values of all attributes of the current invocation context.
                pub fn get_attribute_chains(&self) -> _rt::Vec<AttributeChain> {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 2 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 2
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/context@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[method]invocation-context.get-attribute-chains"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = *ptr0.add(0).cast::<*mut u8>();
                        let l3 = *ptr0
                            .add(::core::mem::size_of::<*const u8>())
                            .cast::<usize>();
                        let base15 = l2;
                        let len15 = l3;
                        let mut result15 = _rt::Vec::with_capacity(len15);
                        for i in 0..len15 {
                            let base = base15
                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                            let e15 = {
                                let l4 = *base.add(0).cast::<*mut u8>();
                                let l5 = *base
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len6 = l5;
                                let bytes6 = _rt::Vec::from_raw_parts(
                                    l4.cast(),
                                    len6,
                                    len6,
                                );
                                let l7 = *base
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l8 = *base
                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let base14 = l7;
                                let len14 = l8;
                                let mut result14 = _rt::Vec::with_capacity(len14);
                                for i in 0..len14 {
                                    let base = base14
                                        .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                    let e14 = {
                                        let l9 = i32::from(*base.add(0).cast::<u8>());
                                        let v13 = match l9 {
                                            n => {
                                                debug_assert_eq!(n, 0, "invalid enum discriminant");
                                                let e13 = {
                                                    let l10 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l11 = *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len12 = l11;
                                                    let bytes12 = _rt::Vec::from_raw_parts(
                                                        l10.cast(),
                                                        len12,
                                                        len12,
                                                    );
                                                    _rt::string_lift(bytes12)
                                                };
                                                AttributeValue::String(e13)
                                            }
                                        };
                                        v13
                                    };
                                    result14.push(e14);
                                }
                                _rt::cabi_dealloc(
                                    base14,
                                    len14 * (3 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                AttributeChain {
                                    key: _rt::string_lift(bytes6),
                                    values: result14,
                                }
                            };
                            result15.push(e15);
                        }
                        _rt::cabi_dealloc(
                            base15,
                            len15 * (4 * ::core::mem::size_of::<*const u8>()),
                            ::core::mem::size_of::<*const u8>(),
                        );
                        let result16 = result15;
                        result16
                    }
                }
            }
            impl InvocationContext {
                #[allow(unused_unsafe, clippy::all)]
                /// Gets the W3C Trace Context headers associated with the current invocation context
                pub fn trace_context_headers(
                    &self,
                ) -> _rt::Vec<(_rt::String, _rt::String)> {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 2 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 2
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/context@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[method]invocation-context.trace-context-headers"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = *ptr0.add(0).cast::<*mut u8>();
                        let l3 = *ptr0
                            .add(::core::mem::size_of::<*const u8>())
                            .cast::<usize>();
                        let base10 = l2;
                        let len10 = l3;
                        let mut result10 = _rt::Vec::with_capacity(len10);
                        for i in 0..len10 {
                            let base = base10
                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                            let e10 = {
                                let l4 = *base.add(0).cast::<*mut u8>();
                                let l5 = *base
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len6 = l5;
                                let bytes6 = _rt::Vec::from_raw_parts(
                                    l4.cast(),
                                    len6,
                                    len6,
                                );
                                let l7 = *base
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l8 = *base
                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len9 = l8;
                                let bytes9 = _rt::Vec::from_raw_parts(
                                    l7.cast(),
                                    len9,
                                    len9,
                                );
                                (_rt::string_lift(bytes6), _rt::string_lift(bytes9))
                            };
                            result10.push(e10);
                        }
                        _rt::cabi_dealloc(
                            base10,
                            len10 * (4 * ::core::mem::size_of::<*const u8>()),
                            ::core::mem::size_of::<*const u8>(),
                        );
                        let result11 = result10;
                        result11
                    }
                }
            }
        }
        /// Host interface for enumerating and searching for agent oplogs
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod oplog {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Datetime = super::super::super::wasi::clocks::wall_clock::Datetime;
            pub type WitValue = super::super::super::golem::rpc::types::WitValue;
            pub type AccountId = super::super::super::golem::api::host::AccountId;
            pub type ComponentVersion = super::super::super::golem::api::host::ComponentVersion;
            pub type OplogIndex = super::super::super::golem::api::host::OplogIndex;
            pub type PersistenceLevel = super::super::super::golem::api::host::PersistenceLevel;
            pub type ProjectId = super::super::super::golem::api::host::ProjectId;
            pub type RetryPolicy = super::super::super::golem::api::host::RetryPolicy;
            pub type Uuid = super::super::super::golem::api::host::Uuid;
            pub type AgentId = super::super::super::golem::api::host::AgentId;
            pub type Attribute = super::super::super::golem::api::context::Attribute;
            pub type AttributeValue = super::super::super::golem::api::context::AttributeValue;
            pub type SpanId = super::super::super::golem::api::context::SpanId;
            pub type TraceId = super::super::super::golem::api::context::TraceId;
            #[derive(Clone, Copy)]
            pub enum WrappedFunctionType {
                /// The side-effect reads from the agent's local state (for example local file system,
                /// random generator, etc.)
                ReadLocal,
                /// The side-effect writes to the agent's local state (for example local file system)
                WriteLocal,
                /// The side-effect reads from external state (for example a key-value store)
                ReadRemote,
                /// The side-effect manipulates external state (for example an RPC call)
                WriteRemote,
                /// The side-effect manipulates external state through multiple invoked functions (for example
                /// a HTTP request where reading the response involves multiple host function calls)
                ///
                /// On the first invocation of the batch, the parameter should be `None` - this triggers
                /// writing a `BeginRemoteWrite` entry in the oplog. Followup invocations should contain
                /// this entry's index as the parameter. In batched remote writes it is the caller's responsibility
                /// to manually write an `EndRemoteWrite` entry (using `end_function`) when the operation is completed.
                WriteRemoteBatched(Option<OplogIndex>),
                WriteRemoteTransaction(Option<OplogIndex>),
            }
            impl ::core::fmt::Debug for WrappedFunctionType {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        WrappedFunctionType::ReadLocal => {
                            f.debug_tuple("WrappedFunctionType::ReadLocal").finish()
                        }
                        WrappedFunctionType::WriteLocal => {
                            f.debug_tuple("WrappedFunctionType::WriteLocal").finish()
                        }
                        WrappedFunctionType::ReadRemote => {
                            f.debug_tuple("WrappedFunctionType::ReadRemote").finish()
                        }
                        WrappedFunctionType::WriteRemote => {
                            f.debug_tuple("WrappedFunctionType::WriteRemote").finish()
                        }
                        WrappedFunctionType::WriteRemoteBatched(e) => {
                            f.debug_tuple("WrappedFunctionType::WriteRemoteBatched")
                                .field(e)
                                .finish()
                        }
                        WrappedFunctionType::WriteRemoteTransaction(e) => {
                            f.debug_tuple("WrappedFunctionType::WriteRemoteTransaction")
                                .field(e)
                                .finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub struct PluginInstallationDescription {
                pub installation_id: Uuid,
                pub name: _rt::String,
                pub version: _rt::String,
                pub parameters: _rt::Vec<(_rt::String, _rt::String)>,
            }
            impl ::core::fmt::Debug for PluginInstallationDescription {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("PluginInstallationDescription")
                        .field("installation-id", &self.installation_id)
                        .field("name", &self.name)
                        .field("version", &self.version)
                        .field("parameters", &self.parameters)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct CreateParameters {
                pub timestamp: Datetime,
                pub agent_id: AgentId,
                pub component_version: ComponentVersion,
                pub args: _rt::Vec<_rt::String>,
                pub env: _rt::Vec<(_rt::String, _rt::String)>,
                pub created_by: AccountId,
                pub project_id: ProjectId,
                pub parent: Option<AgentId>,
                pub component_size: u64,
                pub initial_total_linear_memory_size: u64,
                pub initial_active_plugins: _rt::Vec<PluginInstallationDescription>,
            }
            impl ::core::fmt::Debug for CreateParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("CreateParameters")
                        .field("timestamp", &self.timestamp)
                        .field("agent-id", &self.agent_id)
                        .field("component-version", &self.component_version)
                        .field("args", &self.args)
                        .field("env", &self.env)
                        .field("created-by", &self.created_by)
                        .field("project-id", &self.project_id)
                        .field("parent", &self.parent)
                        .field("component-size", &self.component_size)
                        .field(
                            "initial-total-linear-memory-size",
                            &self.initial_total_linear_memory_size,
                        )
                        .field("initial-active-plugins", &self.initial_active_plugins)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct ImportedFunctionInvokedParameters {
                pub timestamp: Datetime,
                pub function_name: _rt::String,
                pub request: WitValue,
                pub response: WitValue,
                pub wrapped_function_type: WrappedFunctionType,
            }
            impl ::core::fmt::Debug for ImportedFunctionInvokedParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ImportedFunctionInvokedParameters")
                        .field("timestamp", &self.timestamp)
                        .field("function-name", &self.function_name)
                        .field("request", &self.request)
                        .field("response", &self.response)
                        .field("wrapped-function-type", &self.wrapped_function_type)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct LocalSpanData {
                pub span_id: SpanId,
                pub start: Datetime,
                pub parent: Option<SpanId>,
                /// Optionally an index of the exported-function-invoked-parameters's invocation-context field
                pub linked_context: Option<u64>,
                pub attributes: _rt::Vec<Attribute>,
                pub inherited: bool,
            }
            impl ::core::fmt::Debug for LocalSpanData {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("LocalSpanData")
                        .field("span-id", &self.span_id)
                        .field("start", &self.start)
                        .field("parent", &self.parent)
                        .field("linked-context", &self.linked_context)
                        .field("attributes", &self.attributes)
                        .field("inherited", &self.inherited)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct ExternalSpanData {
                pub span_id: SpanId,
            }
            impl ::core::fmt::Debug for ExternalSpanData {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ExternalSpanData")
                        .field("span-id", &self.span_id)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub enum SpanData {
                LocalSpan(LocalSpanData),
                ExternalSpan(ExternalSpanData),
            }
            impl ::core::fmt::Debug for SpanData {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        SpanData::LocalSpan(e) => {
                            f.debug_tuple("SpanData::LocalSpan").field(e).finish()
                        }
                        SpanData::ExternalSpan(e) => {
                            f.debug_tuple("SpanData::ExternalSpan").field(e).finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub struct ExportedFunctionInvokedParameters {
                pub timestamp: Datetime,
                pub function_name: _rt::String,
                pub request: _rt::Vec<WitValue>,
                pub idempotency_key: _rt::String,
                pub trace_id: TraceId,
                pub trace_states: _rt::Vec<_rt::String>,
                /// The first one is the invocation context stack associated with the exported function invocation,
                /// and further stacks can be added that are referenced by the `linked-context` field of `local-span-data`
                pub invocation_context: _rt::Vec<_rt::Vec<SpanData>>,
            }
            impl ::core::fmt::Debug for ExportedFunctionInvokedParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ExportedFunctionInvokedParameters")
                        .field("timestamp", &self.timestamp)
                        .field("function-name", &self.function_name)
                        .field("request", &self.request)
                        .field("idempotency-key", &self.idempotency_key)
                        .field("trace-id", &self.trace_id)
                        .field("trace-states", &self.trace_states)
                        .field("invocation-context", &self.invocation_context)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct ExportedFunctionCompletedParameters {
                pub timestamp: Datetime,
                pub response: Option<WitValue>,
                pub consumed_fuel: i64,
            }
            impl ::core::fmt::Debug for ExportedFunctionCompletedParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ExportedFunctionCompletedParameters")
                        .field("timestamp", &self.timestamp)
                        .field("response", &self.response)
                        .field("consumed-fuel", &self.consumed_fuel)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct ErrorParameters {
                pub timestamp: Datetime,
                pub error: _rt::String,
            }
            impl ::core::fmt::Debug for ErrorParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ErrorParameters")
                        .field("timestamp", &self.timestamp)
                        .field("error", &self.error)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct JumpParameters {
                pub timestamp: Datetime,
                pub start: OplogIndex,
                pub end: OplogIndex,
            }
            impl ::core::fmt::Debug for JumpParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("JumpParameters")
                        .field("timestamp", &self.timestamp)
                        .field("start", &self.start)
                        .field("end", &self.end)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct ChangeRetryPolicyParameters {
                pub timestamp: Datetime,
                pub retry_policy: RetryPolicy,
            }
            impl ::core::fmt::Debug for ChangeRetryPolicyParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ChangeRetryPolicyParameters")
                        .field("timestamp", &self.timestamp)
                        .field("retry-policy", &self.retry_policy)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct EndAtomicRegionParameters {
                pub timestamp: Datetime,
                pub begin_index: OplogIndex,
            }
            impl ::core::fmt::Debug for EndAtomicRegionParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("EndAtomicRegionParameters")
                        .field("timestamp", &self.timestamp)
                        .field("begin-index", &self.begin_index)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct EndRemoteWriteParameters {
                pub timestamp: Datetime,
                pub begin_index: OplogIndex,
            }
            impl ::core::fmt::Debug for EndRemoteWriteParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("EndRemoteWriteParameters")
                        .field("timestamp", &self.timestamp)
                        .field("begin-index", &self.begin_index)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct ExportedFunctionInvocationParameters {
                pub idempotency_key: _rt::String,
                pub function_name: _rt::String,
                pub input: Option<_rt::Vec<WitValue>>,
            }
            impl ::core::fmt::Debug for ExportedFunctionInvocationParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ExportedFunctionInvocationParameters")
                        .field("idempotency-key", &self.idempotency_key)
                        .field("function-name", &self.function_name)
                        .field("input", &self.input)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub enum AgentInvocation {
                ExportedFunction(ExportedFunctionInvocationParameters),
                ManualUpdate(ComponentVersion),
            }
            impl ::core::fmt::Debug for AgentInvocation {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        AgentInvocation::ExportedFunction(e) => {
                            f.debug_tuple("AgentInvocation::ExportedFunction")
                                .field(e)
                                .finish()
                        }
                        AgentInvocation::ManualUpdate(e) => {
                            f.debug_tuple("AgentInvocation::ManualUpdate")
                                .field(e)
                                .finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub struct PendingAgentInvocationParameters {
                pub timestamp: Datetime,
                pub invocation: AgentInvocation,
            }
            impl ::core::fmt::Debug for PendingAgentInvocationParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("PendingAgentInvocationParameters")
                        .field("timestamp", &self.timestamp)
                        .field("invocation", &self.invocation)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub enum UpdateDescription {
                /// Automatic update by replaying the oplog on the new version
                AutoUpdate,
                /// Custom update by loading a given snapshot on the new version
                SnapshotBased(_rt::Vec<u8>),
            }
            impl ::core::fmt::Debug for UpdateDescription {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        UpdateDescription::AutoUpdate => {
                            f.debug_tuple("UpdateDescription::AutoUpdate").finish()
                        }
                        UpdateDescription::SnapshotBased(e) => {
                            f.debug_tuple("UpdateDescription::SnapshotBased")
                                .field(e)
                                .finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub struct PendingUpdateParameters {
                pub timestamp: Datetime,
                pub target_version: ComponentVersion,
                pub update_description: UpdateDescription,
            }
            impl ::core::fmt::Debug for PendingUpdateParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("PendingUpdateParameters")
                        .field("timestamp", &self.timestamp)
                        .field("target-version", &self.target_version)
                        .field("update-description", &self.update_description)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct SuccessfulUpdateParameters {
                pub timestamp: Datetime,
                pub target_version: ComponentVersion,
                pub new_component_size: u64,
                pub new_active_plugins: _rt::Vec<PluginInstallationDescription>,
            }
            impl ::core::fmt::Debug for SuccessfulUpdateParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("SuccessfulUpdateParameters")
                        .field("timestamp", &self.timestamp)
                        .field("target-version", &self.target_version)
                        .field("new-component-size", &self.new_component_size)
                        .field("new-active-plugins", &self.new_active_plugins)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct FailedUpdateParameters {
                pub timestamp: Datetime,
                pub target_version: ComponentVersion,
                pub details: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for FailedUpdateParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("FailedUpdateParameters")
                        .field("timestamp", &self.timestamp)
                        .field("target-version", &self.target_version)
                        .field("details", &self.details)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct GrowMemoryParameters {
                pub timestamp: Datetime,
                pub delta: u64,
            }
            impl ::core::fmt::Debug for GrowMemoryParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("GrowMemoryParameters")
                        .field("timestamp", &self.timestamp)
                        .field("delta", &self.delta)
                        .finish()
                }
            }
            pub type AgentResourceId = u64;
            #[derive(Clone)]
            pub struct CreateResourceParameters {
                pub timestamp: Datetime,
                pub resource_id: AgentResourceId,
                pub name: _rt::String,
                pub owner: _rt::String,
            }
            impl ::core::fmt::Debug for CreateResourceParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("CreateResourceParameters")
                        .field("timestamp", &self.timestamp)
                        .field("resource-id", &self.resource_id)
                        .field("name", &self.name)
                        .field("owner", &self.owner)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct DropResourceParameters {
                pub timestamp: Datetime,
                pub resource_id: AgentResourceId,
                pub name: _rt::String,
                pub owner: _rt::String,
            }
            impl ::core::fmt::Debug for DropResourceParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("DropResourceParameters")
                        .field("timestamp", &self.timestamp)
                        .field("resource-id", &self.resource_id)
                        .field("name", &self.name)
                        .field("owner", &self.owner)
                        .finish()
                }
            }
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum LogLevel {
                Stdout,
                Stderr,
                Trace,
                Debug,
                Info,
                Warn,
                Error,
                Critical,
            }
            impl ::core::fmt::Debug for LogLevel {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        LogLevel::Stdout => f.debug_tuple("LogLevel::Stdout").finish(),
                        LogLevel::Stderr => f.debug_tuple("LogLevel::Stderr").finish(),
                        LogLevel::Trace => f.debug_tuple("LogLevel::Trace").finish(),
                        LogLevel::Debug => f.debug_tuple("LogLevel::Debug").finish(),
                        LogLevel::Info => f.debug_tuple("LogLevel::Info").finish(),
                        LogLevel::Warn => f.debug_tuple("LogLevel::Warn").finish(),
                        LogLevel::Error => f.debug_tuple("LogLevel::Error").finish(),
                        LogLevel::Critical => {
                            f.debug_tuple("LogLevel::Critical").finish()
                        }
                    }
                }
            }
            impl LogLevel {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> LogLevel {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => LogLevel::Stdout,
                        1 => LogLevel::Stderr,
                        2 => LogLevel::Trace,
                        3 => LogLevel::Debug,
                        4 => LogLevel::Info,
                        5 => LogLevel::Warn,
                        6 => LogLevel::Error,
                        7 => LogLevel::Critical,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            #[derive(Clone)]
            pub struct LogParameters {
                pub timestamp: Datetime,
                pub level: LogLevel,
                pub context: _rt::String,
                pub message: _rt::String,
            }
            impl ::core::fmt::Debug for LogParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("LogParameters")
                        .field("timestamp", &self.timestamp)
                        .field("level", &self.level)
                        .field("context", &self.context)
                        .field("message", &self.message)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct ActivatePluginParameters {
                pub timestamp: Datetime,
                pub plugin: PluginInstallationDescription,
            }
            impl ::core::fmt::Debug for ActivatePluginParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ActivatePluginParameters")
                        .field("timestamp", &self.timestamp)
                        .field("plugin", &self.plugin)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct DeactivatePluginParameters {
                pub timestamp: Datetime,
                pub plugin: PluginInstallationDescription,
            }
            impl ::core::fmt::Debug for DeactivatePluginParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("DeactivatePluginParameters")
                        .field("timestamp", &self.timestamp)
                        .field("plugin", &self.plugin)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct RevertParameters {
                pub timestamp: Datetime,
                pub start: OplogIndex,
                pub end: OplogIndex,
            }
            impl ::core::fmt::Debug for RevertParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("RevertParameters")
                        .field("timestamp", &self.timestamp)
                        .field("start", &self.start)
                        .field("end", &self.end)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct CancelInvocationParameters {
                pub timestamp: Datetime,
                pub idempotency_key: _rt::String,
            }
            impl ::core::fmt::Debug for CancelInvocationParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("CancelInvocationParameters")
                        .field("timestamp", &self.timestamp)
                        .field("idempotency-key", &self.idempotency_key)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct StartSpanParameters {
                pub timestamp: Datetime,
                pub span_id: SpanId,
                pub parent: Option<SpanId>,
                pub linked_context: Option<SpanId>,
                pub attributes: _rt::Vec<Attribute>,
            }
            impl ::core::fmt::Debug for StartSpanParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("StartSpanParameters")
                        .field("timestamp", &self.timestamp)
                        .field("span-id", &self.span_id)
                        .field("parent", &self.parent)
                        .field("linked-context", &self.linked_context)
                        .field("attributes", &self.attributes)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct FinishSpanParameters {
                pub timestamp: Datetime,
                pub span_id: SpanId,
            }
            impl ::core::fmt::Debug for FinishSpanParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("FinishSpanParameters")
                        .field("timestamp", &self.timestamp)
                        .field("span-id", &self.span_id)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct SetSpanAttributeParameters {
                pub timestamp: Datetime,
                pub span_id: SpanId,
                pub key: _rt::String,
                pub value: AttributeValue,
            }
            impl ::core::fmt::Debug for SetSpanAttributeParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("SetSpanAttributeParameters")
                        .field("timestamp", &self.timestamp)
                        .field("span-id", &self.span_id)
                        .field("key", &self.key)
                        .field("value", &self.value)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct ChangePersistenceLevelParameters {
                pub timestamp: Datetime,
                pub persistence_level: PersistenceLevel,
            }
            impl ::core::fmt::Debug for ChangePersistenceLevelParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ChangePersistenceLevelParameters")
                        .field("timestamp", &self.timestamp)
                        .field("persistence-level", &self.persistence_level)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct BeginRemoteTransactionParameters {
                pub timestamp: Datetime,
                pub transaction_id: _rt::String,
            }
            impl ::core::fmt::Debug for BeginRemoteTransactionParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("BeginRemoteTransactionParameters")
                        .field("timestamp", &self.timestamp)
                        .field("transaction-id", &self.transaction_id)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct RemoteTransactionParameters {
                pub timestamp: Datetime,
                pub begin_index: OplogIndex,
            }
            impl ::core::fmt::Debug for RemoteTransactionParameters {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("RemoteTransactionParameters")
                        .field("timestamp", &self.timestamp)
                        .field("begin-index", &self.begin_index)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub enum OplogEntry {
                /// The initial agent oplog entry
                Create(CreateParameters),
                /// The agent invoked a host function
                ImportedFunctionInvoked(ImportedFunctionInvokedParameters),
                /// The agent has been invoked
                ExportedFunctionInvoked(ExportedFunctionInvokedParameters),
                /// The agent has completed an invocation
                ExportedFunctionCompleted(ExportedFunctionCompletedParameters),
                /// Agent suspended
                Suspend(Datetime),
                /// Agent failed
                Error(ErrorParameters),
                /// Marker entry added when get-oplog-index is called from the agent, to make the jumping behavior
                /// more predictable.
                NoOp(Datetime),
                /// The agent needs to recover up to the given target oplog index and continue running from
                /// the source oplog index from there
                /// `jump` is an oplog region representing that from the end of that region we want to go back to the start and
                /// ignore all recorded operations in between.
                Jump(JumpParameters),
                /// Indicates that the agent has been interrupted at this point.
                /// Only used to recompute the agent's (cached) status, has no effect on execution.
                Interrupted(Datetime),
                /// Indicates that the agent has been exited using WASI's exit function.
                Exited(Datetime),
                /// Overrides the agent's retry policy
                ChangeRetryPolicy(ChangeRetryPolicyParameters),
                /// Begins an atomic region. All oplog entries after `BeginAtomicRegion` are to be ignored during
                /// recovery except if there is a corresponding `EndAtomicRegion` entry.
                BeginAtomicRegion(Datetime),
                /// Ends an atomic region. All oplog entries between the corresponding `BeginAtomicRegion` and this
                /// entry are to be considered during recovery, and the begin/end markers can be removed during oplog
                /// compaction.
                EndAtomicRegion(EndAtomicRegionParameters),
                /// Begins a remote write operation. Only used when idempotence mode is off. In this case each
                /// remote write must be surrounded by a `BeginRemoteWrite` and `EndRemoteWrite` log pair and
                /// unfinished remote writes cannot be recovered.
                BeginRemoteWrite(Datetime),
                /// Marks the end of a remote write operation. Only used when idempotence mode is off.
                EndRemoteWrite(EndRemoteWriteParameters),
                /// An invocation request arrived while the agent was busy
                PendingAgentInvocation(PendingAgentInvocationParameters),
                /// An update request arrived and will be applied as soon the agent restarts
                PendingUpdate(PendingUpdateParameters),
                /// An update was successfully applied
                SuccessfulUpdate(SuccessfulUpdateParameters),
                /// An update failed to be applied
                FailedUpdate(FailedUpdateParameters),
                /// Increased total linear memory size
                GrowMemory(GrowMemoryParameters),
                /// Created a resource instance
                CreateResource(CreateResourceParameters),
                /// Dropped a resource instance
                DropResource(DropResourceParameters),
                /// The agent emitted a log message
                Log(LogParameters),
                /// The agent's has been restarted, forgetting all its history
                Restart(Datetime),
                /// Activates a plugin
                ActivatePlugin(ActivatePluginParameters),
                /// Deactivates a plugin
                DeactivatePlugin(DeactivatePluginParameters),
                /// Revert an agent to a previous state
                Revert(RevertParameters),
                /// Cancel a pending invocation
                CancelInvocation(CancelInvocationParameters),
                /// Start a new span in the invocation context
                StartSpan(StartSpanParameters),
                /// Finish an open span in the invocation context
                FinishSpan(FinishSpanParameters),
                /// Set an attribute on an open span in the invocation context
                SetSpanAttribute(SetSpanAttributeParameters),
                /// Change the current persistence level
                ChangePersistenceLevel(ChangePersistenceLevelParameters),
                /// Begins a transaction operation
                BeginRemoteTransaction(BeginRemoteTransactionParameters),
                /// Pre-Commit of the transaction, indicating that the transaction will be committed
                PreCommitRemoteTransaction(RemoteTransactionParameters),
                /// Pre-Rollback of the transaction, indicating that the transaction will be rolled back
                PreRollbackRemoteTransaction(RemoteTransactionParameters),
                /// Committed transaction operation, indicating that the transaction was committed
                CommittedRemoteTransaction(RemoteTransactionParameters),
                /// Rolled back transaction operation, indicating that the transaction was rolled back
                RolledBackRemoteTransaction(RemoteTransactionParameters),
            }
            impl ::core::fmt::Debug for OplogEntry {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        OplogEntry::Create(e) => {
                            f.debug_tuple("OplogEntry::Create").field(e).finish()
                        }
                        OplogEntry::ImportedFunctionInvoked(e) => {
                            f.debug_tuple("OplogEntry::ImportedFunctionInvoked")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::ExportedFunctionInvoked(e) => {
                            f.debug_tuple("OplogEntry::ExportedFunctionInvoked")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::ExportedFunctionCompleted(e) => {
                            f.debug_tuple("OplogEntry::ExportedFunctionCompleted")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::Suspend(e) => {
                            f.debug_tuple("OplogEntry::Suspend").field(e).finish()
                        }
                        OplogEntry::Error(e) => {
                            f.debug_tuple("OplogEntry::Error").field(e).finish()
                        }
                        OplogEntry::NoOp(e) => {
                            f.debug_tuple("OplogEntry::NoOp").field(e).finish()
                        }
                        OplogEntry::Jump(e) => {
                            f.debug_tuple("OplogEntry::Jump").field(e).finish()
                        }
                        OplogEntry::Interrupted(e) => {
                            f.debug_tuple("OplogEntry::Interrupted").field(e).finish()
                        }
                        OplogEntry::Exited(e) => {
                            f.debug_tuple("OplogEntry::Exited").field(e).finish()
                        }
                        OplogEntry::ChangeRetryPolicy(e) => {
                            f.debug_tuple("OplogEntry::ChangeRetryPolicy")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::BeginAtomicRegion(e) => {
                            f.debug_tuple("OplogEntry::BeginAtomicRegion")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::EndAtomicRegion(e) => {
                            f.debug_tuple("OplogEntry::EndAtomicRegion")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::BeginRemoteWrite(e) => {
                            f.debug_tuple("OplogEntry::BeginRemoteWrite")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::EndRemoteWrite(e) => {
                            f.debug_tuple("OplogEntry::EndRemoteWrite").field(e).finish()
                        }
                        OplogEntry::PendingAgentInvocation(e) => {
                            f.debug_tuple("OplogEntry::PendingAgentInvocation")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::PendingUpdate(e) => {
                            f.debug_tuple("OplogEntry::PendingUpdate").field(e).finish()
                        }
                        OplogEntry::SuccessfulUpdate(e) => {
                            f.debug_tuple("OplogEntry::SuccessfulUpdate")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::FailedUpdate(e) => {
                            f.debug_tuple("OplogEntry::FailedUpdate").field(e).finish()
                        }
                        OplogEntry::GrowMemory(e) => {
                            f.debug_tuple("OplogEntry::GrowMemory").field(e).finish()
                        }
                        OplogEntry::CreateResource(e) => {
                            f.debug_tuple("OplogEntry::CreateResource").field(e).finish()
                        }
                        OplogEntry::DropResource(e) => {
                            f.debug_tuple("OplogEntry::DropResource").field(e).finish()
                        }
                        OplogEntry::Log(e) => {
                            f.debug_tuple("OplogEntry::Log").field(e).finish()
                        }
                        OplogEntry::Restart(e) => {
                            f.debug_tuple("OplogEntry::Restart").field(e).finish()
                        }
                        OplogEntry::ActivatePlugin(e) => {
                            f.debug_tuple("OplogEntry::ActivatePlugin").field(e).finish()
                        }
                        OplogEntry::DeactivatePlugin(e) => {
                            f.debug_tuple("OplogEntry::DeactivatePlugin")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::Revert(e) => {
                            f.debug_tuple("OplogEntry::Revert").field(e).finish()
                        }
                        OplogEntry::CancelInvocation(e) => {
                            f.debug_tuple("OplogEntry::CancelInvocation")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::StartSpan(e) => {
                            f.debug_tuple("OplogEntry::StartSpan").field(e).finish()
                        }
                        OplogEntry::FinishSpan(e) => {
                            f.debug_tuple("OplogEntry::FinishSpan").field(e).finish()
                        }
                        OplogEntry::SetSpanAttribute(e) => {
                            f.debug_tuple("OplogEntry::SetSpanAttribute")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::ChangePersistenceLevel(e) => {
                            f.debug_tuple("OplogEntry::ChangePersistenceLevel")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::BeginRemoteTransaction(e) => {
                            f.debug_tuple("OplogEntry::BeginRemoteTransaction")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::PreCommitRemoteTransaction(e) => {
                            f.debug_tuple("OplogEntry::PreCommitRemoteTransaction")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::PreRollbackRemoteTransaction(e) => {
                            f.debug_tuple("OplogEntry::PreRollbackRemoteTransaction")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::CommittedRemoteTransaction(e) => {
                            f.debug_tuple("OplogEntry::CommittedRemoteTransaction")
                                .field(e)
                                .finish()
                        }
                        OplogEntry::RolledBackRemoteTransaction(e) => {
                            f.debug_tuple("OplogEntry::RolledBackRemoteTransaction")
                                .field(e)
                                .finish()
                        }
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct GetOplog {
                handle: _rt::Resource<GetOplog>,
            }
            impl GetOplog {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for GetOplog {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:api/oplog@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]get-oplog"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct SearchOplog {
                handle: _rt::Resource<SearchOplog>,
            }
            impl SearchOplog {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for SearchOplog {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:api/oplog@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]search-oplog"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            impl GetOplog {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(agent_id: &AgentId, start: OplogIndex) -> Self {
                    unsafe {
                        let super::super::super::golem::rpc::types::AgentId {
                            component_id: component_id0,
                            agent_id: agent_id0,
                        } = agent_id;
                        let super::super::super::golem::rpc::types::ComponentId {
                            uuid: uuid1,
                        } = component_id0;
                        let super::super::super::golem::rpc::types::Uuid {
                            high_bits: high_bits2,
                            low_bits: low_bits2,
                        } = uuid1;
                        let vec3 = agent_id0;
                        let ptr3 = vec3.as_ptr().cast::<u8>();
                        let len3 = vec3.len();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/oplog@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[constructor]get-oplog"]
                            fn wit_import4(
                                _: i64,
                                _: i64,
                                _: *mut u8,
                                _: usize,
                                _: i64,
                            ) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import4(
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                            _: i64,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe {
                            wit_import4(
                                _rt::as_i64(high_bits2),
                                _rt::as_i64(low_bits2),
                                ptr3.cast_mut(),
                                len3,
                                _rt::as_i64(start),
                            )
                        };
                        unsafe { GetOplog::from_handle(ret as u32) }
                    }
                }
            }
            impl GetOplog {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_next(&self) -> Option<_rt::Vec<OplogEntry>> {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 3 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 3
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/oplog@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[method]get-oplog.get-next"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result604 = match l2 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l3 = *ptr0
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l4 = *ptr0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base603 = l3;
                                    let len603 = l4;
                                    let mut result603 = _rt::Vec::with_capacity(len603);
                                    for i in 0..len603 {
                                        let base = base603
                                            .add(i * (104 + 12 * ::core::mem::size_of::<*const u8>()));
                                        let e603 = {
                                            let l5 = i32::from(*base.add(0).cast::<u8>());
                                            let v602 = match l5 {
                                                0 => {
                                                    let e602 = {
                                                        let l6 = *base.add(8).cast::<i64>();
                                                        let l7 = *base.add(16).cast::<i32>();
                                                        let l8 = *base.add(24).cast::<i64>();
                                                        let l9 = *base.add(32).cast::<i64>();
                                                        let l10 = *base.add(40).cast::<*mut u8>();
                                                        let l11 = *base
                                                            .add(40 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len12 = l11;
                                                        let bytes12 = _rt::Vec::from_raw_parts(
                                                            l10.cast(),
                                                            len12,
                                                            len12,
                                                        );
                                                        let l13 = *base
                                                            .add(40 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i64>();
                                                        let l14 = *base
                                                            .add(48 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l15 = *base
                                                            .add(48 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base19 = l14;
                                                        let len19 = l15;
                                                        let mut result19 = _rt::Vec::with_capacity(len19);
                                                        for i in 0..len19 {
                                                            let base = base19
                                                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                            let e19 = {
                                                                let l16 = *base.add(0).cast::<*mut u8>();
                                                                let l17 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len18 = l17;
                                                                let bytes18 = _rt::Vec::from_raw_parts(
                                                                    l16.cast(),
                                                                    len18,
                                                                    len18,
                                                                );
                                                                _rt::string_lift(bytes18)
                                                            };
                                                            result19.push(e19);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base19,
                                                            len19 * (2 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        let l20 = *base
                                                            .add(48 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l21 = *base
                                                            .add(48 + 5 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base28 = l20;
                                                        let len28 = l21;
                                                        let mut result28 = _rt::Vec::with_capacity(len28);
                                                        for i in 0..len28 {
                                                            let base = base28
                                                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                            let e28 = {
                                                                let l22 = *base.add(0).cast::<*mut u8>();
                                                                let l23 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len24 = l23;
                                                                let bytes24 = _rt::Vec::from_raw_parts(
                                                                    l22.cast(),
                                                                    len24,
                                                                    len24,
                                                                );
                                                                let l25 = *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l26 = *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len27 = l26;
                                                                let bytes27 = _rt::Vec::from_raw_parts(
                                                                    l25.cast(),
                                                                    len27,
                                                                    len27,
                                                                );
                                                                (_rt::string_lift(bytes24), _rt::string_lift(bytes27))
                                                            };
                                                            result28.push(e28);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base28,
                                                            len28 * (4 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        let l29 = *base
                                                            .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l30 = *base
                                                            .add(48 + 7 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len31 = l30;
                                                        let bytes31 = _rt::Vec::from_raw_parts(
                                                            l29.cast(),
                                                            len31,
                                                            len31,
                                                        );
                                                        let l32 = *base
                                                            .add(48 + 8 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i64>();
                                                        let l33 = *base
                                                            .add(56 + 8 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i64>();
                                                        let l34 = i32::from(
                                                            *base
                                                                .add(64 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l40 = *base
                                                            .add(88 + 10 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i64>();
                                                        let l41 = *base
                                                            .add(96 + 10 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i64>();
                                                        let l42 = *base
                                                            .add(104 + 10 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l43 = *base
                                                            .add(104 + 11 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base61 = l42;
                                                        let len61 = l43;
                                                        let mut result61 = _rt::Vec::with_capacity(len61);
                                                        for i in 0..len61 {
                                                            let base = base61
                                                                .add(i * (16 + 6 * ::core::mem::size_of::<*const u8>()));
                                                            let e61 = {
                                                                let l44 = *base.add(0).cast::<i64>();
                                                                let l45 = *base.add(8).cast::<i64>();
                                                                let l46 = *base.add(16).cast::<*mut u8>();
                                                                let l47 = *base
                                                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len48 = l47;
                                                                let bytes48 = _rt::Vec::from_raw_parts(
                                                                    l46.cast(),
                                                                    len48,
                                                                    len48,
                                                                );
                                                                let l49 = *base
                                                                    .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l50 = *base
                                                                    .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len51 = l50;
                                                                let bytes51 = _rt::Vec::from_raw_parts(
                                                                    l49.cast(),
                                                                    len51,
                                                                    len51,
                                                                );
                                                                let l52 = *base
                                                                    .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l53 = *base
                                                                    .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let base60 = l52;
                                                                let len60 = l53;
                                                                let mut result60 = _rt::Vec::with_capacity(len60);
                                                                for i in 0..len60 {
                                                                    let base = base60
                                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                    let e60 = {
                                                                        let l54 = *base.add(0).cast::<*mut u8>();
                                                                        let l55 = *base
                                                                            .add(::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len56 = l55;
                                                                        let bytes56 = _rt::Vec::from_raw_parts(
                                                                            l54.cast(),
                                                                            len56,
                                                                            len56,
                                                                        );
                                                                        let l57 = *base
                                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l58 = *base
                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len59 = l58;
                                                                        let bytes59 = _rt::Vec::from_raw_parts(
                                                                            l57.cast(),
                                                                            len59,
                                                                            len59,
                                                                        );
                                                                        (_rt::string_lift(bytes56), _rt::string_lift(bytes59))
                                                                    };
                                                                    result60.push(e60);
                                                                }
                                                                _rt::cabi_dealloc(
                                                                    base60,
                                                                    len60 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                    ::core::mem::size_of::<*const u8>(),
                                                                );
                                                                PluginInstallationDescription {
                                                                    installation_id: super::super::super::golem::rpc::types::Uuid {
                                                                        high_bits: l44 as u64,
                                                                        low_bits: l45 as u64,
                                                                    },
                                                                    name: _rt::string_lift(bytes48),
                                                                    version: _rt::string_lift(bytes51),
                                                                    parameters: result60,
                                                                }
                                                            };
                                                            result61.push(e61);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base61,
                                                            len61 * (16 + 6 * ::core::mem::size_of::<*const u8>()),
                                                            8,
                                                        );
                                                        CreateParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l6 as u64,
                                                                nanoseconds: l7 as u32,
                                                            },
                                                            agent_id: super::super::super::golem::rpc::types::AgentId {
                                                                component_id: super::super::super::golem::rpc::types::ComponentId {
                                                                    uuid: super::super::super::golem::rpc::types::Uuid {
                                                                        high_bits: l8 as u64,
                                                                        low_bits: l9 as u64,
                                                                    },
                                                                },
                                                                agent_id: _rt::string_lift(bytes12),
                                                            },
                                                            component_version: l13 as u64,
                                                            args: result19,
                                                            env: result28,
                                                            created_by: super::super::super::golem::api::host::AccountId {
                                                                value: _rt::string_lift(bytes31),
                                                            },
                                                            project_id: super::super::super::golem::api::host::ProjectId {
                                                                uuid: super::super::super::golem::rpc::types::Uuid {
                                                                    high_bits: l32 as u64,
                                                                    low_bits: l33 as u64,
                                                                },
                                                            },
                                                            parent: match l34 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l35 = *base
                                                                            .add(72 + 8 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<i64>();
                                                                        let l36 = *base
                                                                            .add(80 + 8 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<i64>();
                                                                        let l37 = *base
                                                                            .add(88 + 8 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l38 = *base
                                                                            .add(88 + 9 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len39 = l38;
                                                                        let bytes39 = _rt::Vec::from_raw_parts(
                                                                            l37.cast(),
                                                                            len39,
                                                                            len39,
                                                                        );
                                                                        super::super::super::golem::rpc::types::AgentId {
                                                                            component_id: super::super::super::golem::rpc::types::ComponentId {
                                                                                uuid: super::super::super::golem::rpc::types::Uuid {
                                                                                    high_bits: l35 as u64,
                                                                                    low_bits: l36 as u64,
                                                                                },
                                                                            },
                                                                            agent_id: _rt::string_lift(bytes39),
                                                                        }
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            component_size: l40 as u64,
                                                            initial_total_linear_memory_size: l41 as u64,
                                                            initial_active_plugins: result61,
                                                        }
                                                    };
                                                    OplogEntry::Create(e602)
                                                }
                                                1 => {
                                                    let e602 = {
                                                        let l62 = *base.add(8).cast::<i64>();
                                                        let l63 = *base.add(16).cast::<i32>();
                                                        let l64 = *base.add(24).cast::<*mut u8>();
                                                        let l65 = *base
                                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len66 = l65;
                                                        let bytes66 = _rt::Vec::from_raw_parts(
                                                            l64.cast(),
                                                            len66,
                                                            len66,
                                                        );
                                                        let l67 = *base
                                                            .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l68 = *base
                                                            .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base114 = l67;
                                                        let len114 = l68;
                                                        let mut result114 = _rt::Vec::with_capacity(len114);
                                                        for i in 0..len114 {
                                                            let base = base114
                                                                .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                            let e114 = {
                                                                let l69 = i32::from(*base.add(0).cast::<u8>());
                                                                use super::super::super::golem::rpc::types::WitNode as V113;
                                                                let v113 = match l69 {
                                                                    0 => {
                                                                        let e113 = {
                                                                            let l70 = *base.add(8).cast::<*mut u8>();
                                                                            let l71 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len72 = l71;
                                                                            _rt::Vec::from_raw_parts(l70.cast(), len72, len72)
                                                                        };
                                                                        V113::RecordValue(e113)
                                                                    }
                                                                    1 => {
                                                                        let e113 = {
                                                                            let l73 = *base.add(8).cast::<i32>();
                                                                            let l74 = i32::from(*base.add(12).cast::<u8>());
                                                                            (
                                                                                l73 as u32,
                                                                                match l74 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l75 = *base.add(16).cast::<i32>();
                                                                                            l75
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                },
                                                                            )
                                                                        };
                                                                        V113::VariantValue(e113)
                                                                    }
                                                                    2 => {
                                                                        let e113 = {
                                                                            let l76 = *base.add(8).cast::<i32>();
                                                                            l76 as u32
                                                                        };
                                                                        V113::EnumValue(e113)
                                                                    }
                                                                    3 => {
                                                                        let e113 = {
                                                                            let l77 = *base.add(8).cast::<*mut u8>();
                                                                            let l78 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base80 = l77;
                                                                            let len80 = l78;
                                                                            let mut result80 = _rt::Vec::with_capacity(len80);
                                                                            for i in 0..len80 {
                                                                                let base = base80.add(i * 1);
                                                                                let e80 = {
                                                                                    let l79 = i32::from(*base.add(0).cast::<u8>());
                                                                                    _rt::bool_lift(l79 as u8)
                                                                                };
                                                                                result80.push(e80);
                                                                            }
                                                                            _rt::cabi_dealloc(base80, len80 * 1, 1);
                                                                            result80
                                                                        };
                                                                        V113::FlagsValue(e113)
                                                                    }
                                                                    4 => {
                                                                        let e113 = {
                                                                            let l81 = *base.add(8).cast::<*mut u8>();
                                                                            let l82 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len83 = l82;
                                                                            _rt::Vec::from_raw_parts(l81.cast(), len83, len83)
                                                                        };
                                                                        V113::TupleValue(e113)
                                                                    }
                                                                    5 => {
                                                                        let e113 = {
                                                                            let l84 = *base.add(8).cast::<*mut u8>();
                                                                            let l85 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len86 = l85;
                                                                            _rt::Vec::from_raw_parts(l84.cast(), len86, len86)
                                                                        };
                                                                        V113::ListValue(e113)
                                                                    }
                                                                    6 => {
                                                                        let e113 = {
                                                                            let l87 = i32::from(*base.add(8).cast::<u8>());
                                                                            match l87 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l88 = *base.add(12).cast::<i32>();
                                                                                        l88
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            }
                                                                        };
                                                                        V113::OptionValue(e113)
                                                                    }
                                                                    7 => {
                                                                        let e113 = {
                                                                            let l89 = i32::from(*base.add(8).cast::<u8>());
                                                                            match l89 {
                                                                                0 => {
                                                                                    let e = {
                                                                                        let l90 = i32::from(*base.add(12).cast::<u8>());
                                                                                        match l90 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l91 = *base.add(16).cast::<i32>();
                                                                                                    l91
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        }
                                                                                    };
                                                                                    Ok(e)
                                                                                }
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l92 = i32::from(*base.add(12).cast::<u8>());
                                                                                        match l92 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l93 = *base.add(16).cast::<i32>();
                                                                                                    l93
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        }
                                                                                    };
                                                                                    Err(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            }
                                                                        };
                                                                        V113::ResultValue(e113)
                                                                    }
                                                                    8 => {
                                                                        let e113 = {
                                                                            let l94 = i32::from(*base.add(8).cast::<u8>());
                                                                            l94 as u8
                                                                        };
                                                                        V113::PrimU8(e113)
                                                                    }
                                                                    9 => {
                                                                        let e113 = {
                                                                            let l95 = i32::from(*base.add(8).cast::<u16>());
                                                                            l95 as u16
                                                                        };
                                                                        V113::PrimU16(e113)
                                                                    }
                                                                    10 => {
                                                                        let e113 = {
                                                                            let l96 = *base.add(8).cast::<i32>();
                                                                            l96 as u32
                                                                        };
                                                                        V113::PrimU32(e113)
                                                                    }
                                                                    11 => {
                                                                        let e113 = {
                                                                            let l97 = *base.add(8).cast::<i64>();
                                                                            l97 as u64
                                                                        };
                                                                        V113::PrimU64(e113)
                                                                    }
                                                                    12 => {
                                                                        let e113 = {
                                                                            let l98 = i32::from(*base.add(8).cast::<i8>());
                                                                            l98 as i8
                                                                        };
                                                                        V113::PrimS8(e113)
                                                                    }
                                                                    13 => {
                                                                        let e113 = {
                                                                            let l99 = i32::from(*base.add(8).cast::<i16>());
                                                                            l99 as i16
                                                                        };
                                                                        V113::PrimS16(e113)
                                                                    }
                                                                    14 => {
                                                                        let e113 = {
                                                                            let l100 = *base.add(8).cast::<i32>();
                                                                            l100
                                                                        };
                                                                        V113::PrimS32(e113)
                                                                    }
                                                                    15 => {
                                                                        let e113 = {
                                                                            let l101 = *base.add(8).cast::<i64>();
                                                                            l101
                                                                        };
                                                                        V113::PrimS64(e113)
                                                                    }
                                                                    16 => {
                                                                        let e113 = {
                                                                            let l102 = *base.add(8).cast::<f32>();
                                                                            l102
                                                                        };
                                                                        V113::PrimFloat32(e113)
                                                                    }
                                                                    17 => {
                                                                        let e113 = {
                                                                            let l103 = *base.add(8).cast::<f64>();
                                                                            l103
                                                                        };
                                                                        V113::PrimFloat64(e113)
                                                                    }
                                                                    18 => {
                                                                        let e113 = {
                                                                            let l104 = *base.add(8).cast::<i32>();
                                                                            _rt::char_lift(l104 as u32)
                                                                        };
                                                                        V113::PrimChar(e113)
                                                                    }
                                                                    19 => {
                                                                        let e113 = {
                                                                            let l105 = i32::from(*base.add(8).cast::<u8>());
                                                                            _rt::bool_lift(l105 as u8)
                                                                        };
                                                                        V113::PrimBool(e113)
                                                                    }
                                                                    20 => {
                                                                        let e113 = {
                                                                            let l106 = *base.add(8).cast::<*mut u8>();
                                                                            let l107 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len108 = l107;
                                                                            let bytes108 = _rt::Vec::from_raw_parts(
                                                                                l106.cast(),
                                                                                len108,
                                                                                len108,
                                                                            );
                                                                            _rt::string_lift(bytes108)
                                                                        };
                                                                        V113::PrimString(e113)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                        let e113 = {
                                                                            let l109 = *base.add(8).cast::<*mut u8>();
                                                                            let l110 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len111 = l110;
                                                                            let bytes111 = _rt::Vec::from_raw_parts(
                                                                                l109.cast(),
                                                                                len111,
                                                                                len111,
                                                                            );
                                                                            let l112 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i64>();
                                                                            (
                                                                                super::super::super::golem::rpc::types::Uri {
                                                                                    value: _rt::string_lift(bytes111),
                                                                                },
                                                                                l112 as u64,
                                                                            )
                                                                        };
                                                                        V113::Handle(e113)
                                                                    }
                                                                };
                                                                v113
                                                            };
                                                            result114.push(e114);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base114,
                                                            len114 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                            8,
                                                        );
                                                        let l115 = *base
                                                            .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l116 = *base
                                                            .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base162 = l115;
                                                        let len162 = l116;
                                                        let mut result162 = _rt::Vec::with_capacity(len162);
                                                        for i in 0..len162 {
                                                            let base = base162
                                                                .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                            let e162 = {
                                                                let l117 = i32::from(*base.add(0).cast::<u8>());
                                                                use super::super::super::golem::rpc::types::WitNode as V161;
                                                                let v161 = match l117 {
                                                                    0 => {
                                                                        let e161 = {
                                                                            let l118 = *base.add(8).cast::<*mut u8>();
                                                                            let l119 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len120 = l119;
                                                                            _rt::Vec::from_raw_parts(l118.cast(), len120, len120)
                                                                        };
                                                                        V161::RecordValue(e161)
                                                                    }
                                                                    1 => {
                                                                        let e161 = {
                                                                            let l121 = *base.add(8).cast::<i32>();
                                                                            let l122 = i32::from(*base.add(12).cast::<u8>());
                                                                            (
                                                                                l121 as u32,
                                                                                match l122 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l123 = *base.add(16).cast::<i32>();
                                                                                            l123
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                },
                                                                            )
                                                                        };
                                                                        V161::VariantValue(e161)
                                                                    }
                                                                    2 => {
                                                                        let e161 = {
                                                                            let l124 = *base.add(8).cast::<i32>();
                                                                            l124 as u32
                                                                        };
                                                                        V161::EnumValue(e161)
                                                                    }
                                                                    3 => {
                                                                        let e161 = {
                                                                            let l125 = *base.add(8).cast::<*mut u8>();
                                                                            let l126 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base128 = l125;
                                                                            let len128 = l126;
                                                                            let mut result128 = _rt::Vec::with_capacity(len128);
                                                                            for i in 0..len128 {
                                                                                let base = base128.add(i * 1);
                                                                                let e128 = {
                                                                                    let l127 = i32::from(*base.add(0).cast::<u8>());
                                                                                    _rt::bool_lift(l127 as u8)
                                                                                };
                                                                                result128.push(e128);
                                                                            }
                                                                            _rt::cabi_dealloc(base128, len128 * 1, 1);
                                                                            result128
                                                                        };
                                                                        V161::FlagsValue(e161)
                                                                    }
                                                                    4 => {
                                                                        let e161 = {
                                                                            let l129 = *base.add(8).cast::<*mut u8>();
                                                                            let l130 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len131 = l130;
                                                                            _rt::Vec::from_raw_parts(l129.cast(), len131, len131)
                                                                        };
                                                                        V161::TupleValue(e161)
                                                                    }
                                                                    5 => {
                                                                        let e161 = {
                                                                            let l132 = *base.add(8).cast::<*mut u8>();
                                                                            let l133 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len134 = l133;
                                                                            _rt::Vec::from_raw_parts(l132.cast(), len134, len134)
                                                                        };
                                                                        V161::ListValue(e161)
                                                                    }
                                                                    6 => {
                                                                        let e161 = {
                                                                            let l135 = i32::from(*base.add(8).cast::<u8>());
                                                                            match l135 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l136 = *base.add(12).cast::<i32>();
                                                                                        l136
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            }
                                                                        };
                                                                        V161::OptionValue(e161)
                                                                    }
                                                                    7 => {
                                                                        let e161 = {
                                                                            let l137 = i32::from(*base.add(8).cast::<u8>());
                                                                            match l137 {
                                                                                0 => {
                                                                                    let e = {
                                                                                        let l138 = i32::from(*base.add(12).cast::<u8>());
                                                                                        match l138 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l139 = *base.add(16).cast::<i32>();
                                                                                                    l139
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        }
                                                                                    };
                                                                                    Ok(e)
                                                                                }
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l140 = i32::from(*base.add(12).cast::<u8>());
                                                                                        match l140 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l141 = *base.add(16).cast::<i32>();
                                                                                                    l141
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        }
                                                                                    };
                                                                                    Err(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            }
                                                                        };
                                                                        V161::ResultValue(e161)
                                                                    }
                                                                    8 => {
                                                                        let e161 = {
                                                                            let l142 = i32::from(*base.add(8).cast::<u8>());
                                                                            l142 as u8
                                                                        };
                                                                        V161::PrimU8(e161)
                                                                    }
                                                                    9 => {
                                                                        let e161 = {
                                                                            let l143 = i32::from(*base.add(8).cast::<u16>());
                                                                            l143 as u16
                                                                        };
                                                                        V161::PrimU16(e161)
                                                                    }
                                                                    10 => {
                                                                        let e161 = {
                                                                            let l144 = *base.add(8).cast::<i32>();
                                                                            l144 as u32
                                                                        };
                                                                        V161::PrimU32(e161)
                                                                    }
                                                                    11 => {
                                                                        let e161 = {
                                                                            let l145 = *base.add(8).cast::<i64>();
                                                                            l145 as u64
                                                                        };
                                                                        V161::PrimU64(e161)
                                                                    }
                                                                    12 => {
                                                                        let e161 = {
                                                                            let l146 = i32::from(*base.add(8).cast::<i8>());
                                                                            l146 as i8
                                                                        };
                                                                        V161::PrimS8(e161)
                                                                    }
                                                                    13 => {
                                                                        let e161 = {
                                                                            let l147 = i32::from(*base.add(8).cast::<i16>());
                                                                            l147 as i16
                                                                        };
                                                                        V161::PrimS16(e161)
                                                                    }
                                                                    14 => {
                                                                        let e161 = {
                                                                            let l148 = *base.add(8).cast::<i32>();
                                                                            l148
                                                                        };
                                                                        V161::PrimS32(e161)
                                                                    }
                                                                    15 => {
                                                                        let e161 = {
                                                                            let l149 = *base.add(8).cast::<i64>();
                                                                            l149
                                                                        };
                                                                        V161::PrimS64(e161)
                                                                    }
                                                                    16 => {
                                                                        let e161 = {
                                                                            let l150 = *base.add(8).cast::<f32>();
                                                                            l150
                                                                        };
                                                                        V161::PrimFloat32(e161)
                                                                    }
                                                                    17 => {
                                                                        let e161 = {
                                                                            let l151 = *base.add(8).cast::<f64>();
                                                                            l151
                                                                        };
                                                                        V161::PrimFloat64(e161)
                                                                    }
                                                                    18 => {
                                                                        let e161 = {
                                                                            let l152 = *base.add(8).cast::<i32>();
                                                                            _rt::char_lift(l152 as u32)
                                                                        };
                                                                        V161::PrimChar(e161)
                                                                    }
                                                                    19 => {
                                                                        let e161 = {
                                                                            let l153 = i32::from(*base.add(8).cast::<u8>());
                                                                            _rt::bool_lift(l153 as u8)
                                                                        };
                                                                        V161::PrimBool(e161)
                                                                    }
                                                                    20 => {
                                                                        let e161 = {
                                                                            let l154 = *base.add(8).cast::<*mut u8>();
                                                                            let l155 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len156 = l155;
                                                                            let bytes156 = _rt::Vec::from_raw_parts(
                                                                                l154.cast(),
                                                                                len156,
                                                                                len156,
                                                                            );
                                                                            _rt::string_lift(bytes156)
                                                                        };
                                                                        V161::PrimString(e161)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                        let e161 = {
                                                                            let l157 = *base.add(8).cast::<*mut u8>();
                                                                            let l158 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len159 = l158;
                                                                            let bytes159 = _rt::Vec::from_raw_parts(
                                                                                l157.cast(),
                                                                                len159,
                                                                                len159,
                                                                            );
                                                                            let l160 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i64>();
                                                                            (
                                                                                super::super::super::golem::rpc::types::Uri {
                                                                                    value: _rt::string_lift(bytes159),
                                                                                },
                                                                                l160 as u64,
                                                                            )
                                                                        };
                                                                        V161::Handle(e161)
                                                                    }
                                                                };
                                                                v161
                                                            };
                                                            result162.push(e162);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base162,
                                                            len162 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                            8,
                                                        );
                                                        let l163 = i32::from(
                                                            *base
                                                                .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let v168 = match l163 {
                                                            0 => WrappedFunctionType::ReadLocal,
                                                            1 => WrappedFunctionType::WriteLocal,
                                                            2 => WrappedFunctionType::ReadRemote,
                                                            3 => WrappedFunctionType::WriteRemote,
                                                            4 => {
                                                                let e168 = {
                                                                    let l164 = i32::from(
                                                                        *base
                                                                            .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l164 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l165 = *base
                                                                                    .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<i64>();
                                                                                l165 as u64
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                WrappedFunctionType::WriteRemoteBatched(e168)
                                                            }
                                                            n => {
                                                                debug_assert_eq!(n, 5, "invalid enum discriminant");
                                                                let e168 = {
                                                                    let l166 = i32::from(
                                                                        *base
                                                                            .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l166 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l167 = *base
                                                                                    .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<i64>();
                                                                                l167 as u64
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                WrappedFunctionType::WriteRemoteTransaction(e168)
                                                            }
                                                        };
                                                        ImportedFunctionInvokedParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l62 as u64,
                                                                nanoseconds: l63 as u32,
                                                            },
                                                            function_name: _rt::string_lift(bytes66),
                                                            request: super::super::super::golem::rpc::types::WitValue {
                                                                nodes: result114,
                                                            },
                                                            response: super::super::super::golem::rpc::types::WitValue {
                                                                nodes: result162,
                                                            },
                                                            wrapped_function_type: v168,
                                                        }
                                                    };
                                                    OplogEntry::ImportedFunctionInvoked(e602)
                                                }
                                                2 => {
                                                    let e602 = {
                                                        let l169 = *base.add(8).cast::<i64>();
                                                        let l170 = *base.add(16).cast::<i32>();
                                                        let l171 = *base.add(24).cast::<*mut u8>();
                                                        let l172 = *base
                                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len173 = l172;
                                                        let bytes173 = _rt::Vec::from_raw_parts(
                                                            l171.cast(),
                                                            len173,
                                                            len173,
                                                        );
                                                        let l174 = *base
                                                            .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l175 = *base
                                                            .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base224 = l174;
                                                        let len224 = l175;
                                                        let mut result224 = _rt::Vec::with_capacity(len224);
                                                        for i in 0..len224 {
                                                            let base = base224
                                                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                            let e224 = {
                                                                let l176 = *base.add(0).cast::<*mut u8>();
                                                                let l177 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let base223 = l176;
                                                                let len223 = l177;
                                                                let mut result223 = _rt::Vec::with_capacity(len223);
                                                                for i in 0..len223 {
                                                                    let base = base223
                                                                        .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                    let e223 = {
                                                                        let l178 = i32::from(*base.add(0).cast::<u8>());
                                                                        use super::super::super::golem::rpc::types::WitNode as V222;
                                                                        let v222 = match l178 {
                                                                            0 => {
                                                                                let e222 = {
                                                                                    let l179 = *base.add(8).cast::<*mut u8>();
                                                                                    let l180 = *base
                                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len181 = l180;
                                                                                    _rt::Vec::from_raw_parts(l179.cast(), len181, len181)
                                                                                };
                                                                                V222::RecordValue(e222)
                                                                            }
                                                                            1 => {
                                                                                let e222 = {
                                                                                    let l182 = *base.add(8).cast::<i32>();
                                                                                    let l183 = i32::from(*base.add(12).cast::<u8>());
                                                                                    (
                                                                                        l182 as u32,
                                                                                        match l183 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l184 = *base.add(16).cast::<i32>();
                                                                                                    l184
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        },
                                                                                    )
                                                                                };
                                                                                V222::VariantValue(e222)
                                                                            }
                                                                            2 => {
                                                                                let e222 = {
                                                                                    let l185 = *base.add(8).cast::<i32>();
                                                                                    l185 as u32
                                                                                };
                                                                                V222::EnumValue(e222)
                                                                            }
                                                                            3 => {
                                                                                let e222 = {
                                                                                    let l186 = *base.add(8).cast::<*mut u8>();
                                                                                    let l187 = *base
                                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base189 = l186;
                                                                                    let len189 = l187;
                                                                                    let mut result189 = _rt::Vec::with_capacity(len189);
                                                                                    for i in 0..len189 {
                                                                                        let base = base189.add(i * 1);
                                                                                        let e189 = {
                                                                                            let l188 = i32::from(*base.add(0).cast::<u8>());
                                                                                            _rt::bool_lift(l188 as u8)
                                                                                        };
                                                                                        result189.push(e189);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base189, len189 * 1, 1);
                                                                                    result189
                                                                                };
                                                                                V222::FlagsValue(e222)
                                                                            }
                                                                            4 => {
                                                                                let e222 = {
                                                                                    let l190 = *base.add(8).cast::<*mut u8>();
                                                                                    let l191 = *base
                                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len192 = l191;
                                                                                    _rt::Vec::from_raw_parts(l190.cast(), len192, len192)
                                                                                };
                                                                                V222::TupleValue(e222)
                                                                            }
                                                                            5 => {
                                                                                let e222 = {
                                                                                    let l193 = *base.add(8).cast::<*mut u8>();
                                                                                    let l194 = *base
                                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len195 = l194;
                                                                                    _rt::Vec::from_raw_parts(l193.cast(), len195, len195)
                                                                                };
                                                                                V222::ListValue(e222)
                                                                            }
                                                                            6 => {
                                                                                let e222 = {
                                                                                    let l196 = i32::from(*base.add(8).cast::<u8>());
                                                                                    match l196 {
                                                                                        0 => None,
                                                                                        1 => {
                                                                                            let e = {
                                                                                                let l197 = *base.add(12).cast::<i32>();
                                                                                                l197
                                                                                            };
                                                                                            Some(e)
                                                                                        }
                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                    }
                                                                                };
                                                                                V222::OptionValue(e222)
                                                                            }
                                                                            7 => {
                                                                                let e222 = {
                                                                                    let l198 = i32::from(*base.add(8).cast::<u8>());
                                                                                    match l198 {
                                                                                        0 => {
                                                                                            let e = {
                                                                                                let l199 = i32::from(*base.add(12).cast::<u8>());
                                                                                                match l199 {
                                                                                                    0 => None,
                                                                                                    1 => {
                                                                                                        let e = {
                                                                                                            let l200 = *base.add(16).cast::<i32>();
                                                                                                            l200
                                                                                                        };
                                                                                                        Some(e)
                                                                                                    }
                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                }
                                                                                            };
                                                                                            Ok(e)
                                                                                        }
                                                                                        1 => {
                                                                                            let e = {
                                                                                                let l201 = i32::from(*base.add(12).cast::<u8>());
                                                                                                match l201 {
                                                                                                    0 => None,
                                                                                                    1 => {
                                                                                                        let e = {
                                                                                                            let l202 = *base.add(16).cast::<i32>();
                                                                                                            l202
                                                                                                        };
                                                                                                        Some(e)
                                                                                                    }
                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                }
                                                                                            };
                                                                                            Err(e)
                                                                                        }
                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                    }
                                                                                };
                                                                                V222::ResultValue(e222)
                                                                            }
                                                                            8 => {
                                                                                let e222 = {
                                                                                    let l203 = i32::from(*base.add(8).cast::<u8>());
                                                                                    l203 as u8
                                                                                };
                                                                                V222::PrimU8(e222)
                                                                            }
                                                                            9 => {
                                                                                let e222 = {
                                                                                    let l204 = i32::from(*base.add(8).cast::<u16>());
                                                                                    l204 as u16
                                                                                };
                                                                                V222::PrimU16(e222)
                                                                            }
                                                                            10 => {
                                                                                let e222 = {
                                                                                    let l205 = *base.add(8).cast::<i32>();
                                                                                    l205 as u32
                                                                                };
                                                                                V222::PrimU32(e222)
                                                                            }
                                                                            11 => {
                                                                                let e222 = {
                                                                                    let l206 = *base.add(8).cast::<i64>();
                                                                                    l206 as u64
                                                                                };
                                                                                V222::PrimU64(e222)
                                                                            }
                                                                            12 => {
                                                                                let e222 = {
                                                                                    let l207 = i32::from(*base.add(8).cast::<i8>());
                                                                                    l207 as i8
                                                                                };
                                                                                V222::PrimS8(e222)
                                                                            }
                                                                            13 => {
                                                                                let e222 = {
                                                                                    let l208 = i32::from(*base.add(8).cast::<i16>());
                                                                                    l208 as i16
                                                                                };
                                                                                V222::PrimS16(e222)
                                                                            }
                                                                            14 => {
                                                                                let e222 = {
                                                                                    let l209 = *base.add(8).cast::<i32>();
                                                                                    l209
                                                                                };
                                                                                V222::PrimS32(e222)
                                                                            }
                                                                            15 => {
                                                                                let e222 = {
                                                                                    let l210 = *base.add(8).cast::<i64>();
                                                                                    l210
                                                                                };
                                                                                V222::PrimS64(e222)
                                                                            }
                                                                            16 => {
                                                                                let e222 = {
                                                                                    let l211 = *base.add(8).cast::<f32>();
                                                                                    l211
                                                                                };
                                                                                V222::PrimFloat32(e222)
                                                                            }
                                                                            17 => {
                                                                                let e222 = {
                                                                                    let l212 = *base.add(8).cast::<f64>();
                                                                                    l212
                                                                                };
                                                                                V222::PrimFloat64(e222)
                                                                            }
                                                                            18 => {
                                                                                let e222 = {
                                                                                    let l213 = *base.add(8).cast::<i32>();
                                                                                    _rt::char_lift(l213 as u32)
                                                                                };
                                                                                V222::PrimChar(e222)
                                                                            }
                                                                            19 => {
                                                                                let e222 = {
                                                                                    let l214 = i32::from(*base.add(8).cast::<u8>());
                                                                                    _rt::bool_lift(l214 as u8)
                                                                                };
                                                                                V222::PrimBool(e222)
                                                                            }
                                                                            20 => {
                                                                                let e222 = {
                                                                                    let l215 = *base.add(8).cast::<*mut u8>();
                                                                                    let l216 = *base
                                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len217 = l216;
                                                                                    let bytes217 = _rt::Vec::from_raw_parts(
                                                                                        l215.cast(),
                                                                                        len217,
                                                                                        len217,
                                                                                    );
                                                                                    _rt::string_lift(bytes217)
                                                                                };
                                                                                V222::PrimString(e222)
                                                                            }
                                                                            n => {
                                                                                debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                                let e222 = {
                                                                                    let l218 = *base.add(8).cast::<*mut u8>();
                                                                                    let l219 = *base
                                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len220 = l219;
                                                                                    let bytes220 = _rt::Vec::from_raw_parts(
                                                                                        l218.cast(),
                                                                                        len220,
                                                                                        len220,
                                                                                    );
                                                                                    let l221 = *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i64>();
                                                                                    (
                                                                                        super::super::super::golem::rpc::types::Uri {
                                                                                            value: _rt::string_lift(bytes220),
                                                                                        },
                                                                                        l221 as u64,
                                                                                    )
                                                                                };
                                                                                V222::Handle(e222)
                                                                            }
                                                                        };
                                                                        v222
                                                                    };
                                                                    result223.push(e223);
                                                                }
                                                                _rt::cabi_dealloc(
                                                                    base223,
                                                                    len223 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                    8,
                                                                );
                                                                super::super::super::golem::rpc::types::WitValue {
                                                                    nodes: result223,
                                                                }
                                                            };
                                                            result224.push(e224);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base224,
                                                            len224 * (2 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        let l225 = *base
                                                            .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l226 = *base
                                                            .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len227 = l226;
                                                        let bytes227 = _rt::Vec::from_raw_parts(
                                                            l225.cast(),
                                                            len227,
                                                            len227,
                                                        );
                                                        let l228 = *base
                                                            .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l229 = *base
                                                            .add(24 + 7 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len230 = l229;
                                                        let bytes230 = _rt::Vec::from_raw_parts(
                                                            l228.cast(),
                                                            len230,
                                                            len230,
                                                        );
                                                        let l231 = *base
                                                            .add(24 + 8 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l232 = *base
                                                            .add(24 + 9 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base236 = l231;
                                                        let len236 = l232;
                                                        let mut result236 = _rt::Vec::with_capacity(len236);
                                                        for i in 0..len236 {
                                                            let base = base236
                                                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                            let e236 = {
                                                                let l233 = *base.add(0).cast::<*mut u8>();
                                                                let l234 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len235 = l234;
                                                                let bytes235 = _rt::Vec::from_raw_parts(
                                                                    l233.cast(),
                                                                    len235,
                                                                    len235,
                                                                );
                                                                _rt::string_lift(bytes235)
                                                            };
                                                            result236.push(e236);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base236,
                                                            len236 * (2 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        let l237 = *base
                                                            .add(24 + 10 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l238 = *base
                                                            .add(24 + 11 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base270 = l237;
                                                        let len270 = l238;
                                                        let mut result270 = _rt::Vec::with_capacity(len270);
                                                        for i in 0..len270 {
                                                            let base = base270
                                                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                            let e270 = {
                                                                let l239 = *base.add(0).cast::<*mut u8>();
                                                                let l240 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let base269 = l239;
                                                                let len269 = l240;
                                                                let mut result269 = _rt::Vec::with_capacity(len269);
                                                                for i in 0..len269 {
                                                                    let base = base269
                                                                        .add(i * (56 + 6 * ::core::mem::size_of::<*const u8>()));
                                                                    let e269 = {
                                                                        let l241 = i32::from(*base.add(0).cast::<u8>());
                                                                        let v268 = match l241 {
                                                                            0 => {
                                                                                let e268 = {
                                                                                    let l242 = *base.add(8).cast::<*mut u8>();
                                                                                    let l243 = *base
                                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len244 = l243;
                                                                                    let bytes244 = _rt::Vec::from_raw_parts(
                                                                                        l242.cast(),
                                                                                        len244,
                                                                                        len244,
                                                                                    );
                                                                                    let l245 = *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i64>();
                                                                                    let l246 = *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>();
                                                                                    let l247 = i32::from(
                                                                                        *base
                                                                                            .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<u8>(),
                                                                                    );
                                                                                    let l251 = i32::from(
                                                                                        *base
                                                                                            .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<u8>(),
                                                                                    );
                                                                                    let l253 = *base
                                                                                        .add(48 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l254 = *base
                                                                                        .add(48 + 5 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base263 = l253;
                                                                                    let len263 = l254;
                                                                                    let mut result263 = _rt::Vec::with_capacity(len263);
                                                                                    for i in 0..len263 {
                                                                                        let base = base263
                                                                                            .add(i * (5 * ::core::mem::size_of::<*const u8>()));
                                                                                        let e263 = {
                                                                                            let l255 = *base.add(0).cast::<*mut u8>();
                                                                                            let l256 = *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len257 = l256;
                                                                                            let bytes257 = _rt::Vec::from_raw_parts(
                                                                                                l255.cast(),
                                                                                                len257,
                                                                                                len257,
                                                                                            );
                                                                                            let l258 = i32::from(
                                                                                                *base
                                                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                    .cast::<u8>(),
                                                                                            );
                                                                                            use super::super::super::golem::api::context::AttributeValue as V262;
                                                                                            let v262 = match l258 {
                                                                                                n => {
                                                                                                    debug_assert_eq!(n, 0, "invalid enum discriminant");
                                                                                                    let e262 = {
                                                                                                        let l259 = *base
                                                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                                            .cast::<*mut u8>();
                                                                                                        let l260 = *base
                                                                                                            .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                                            .cast::<usize>();
                                                                                                        let len261 = l260;
                                                                                                        let bytes261 = _rt::Vec::from_raw_parts(
                                                                                                            l259.cast(),
                                                                                                            len261,
                                                                                                            len261,
                                                                                                        );
                                                                                                        _rt::string_lift(bytes261)
                                                                                                    };
                                                                                                    V262::String(e262)
                                                                                                }
                                                                                            };
                                                                                            super::super::super::golem::api::context::Attribute {
                                                                                                key: _rt::string_lift(bytes257),
                                                                                                value: v262,
                                                                                            }
                                                                                        };
                                                                                        result263.push(e263);
                                                                                    }
                                                                                    _rt::cabi_dealloc(
                                                                                        base263,
                                                                                        len263 * (5 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                    let l264 = i32::from(
                                                                                        *base
                                                                                            .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<u8>(),
                                                                                    );
                                                                                    LocalSpanData {
                                                                                        span_id: _rt::string_lift(bytes244),
                                                                                        start: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                                            seconds: l245 as u64,
                                                                                            nanoseconds: l246 as u32,
                                                                                        },
                                                                                        parent: match l247 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l248 = *base
                                                                                                        .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                                        .cast::<*mut u8>();
                                                                                                    let l249 = *base
                                                                                                        .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                                        .cast::<usize>();
                                                                                                    let len250 = l249;
                                                                                                    let bytes250 = _rt::Vec::from_raw_parts(
                                                                                                        l248.cast(),
                                                                                                        len250,
                                                                                                        len250,
                                                                                                    );
                                                                                                    _rt::string_lift(bytes250)
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        },
                                                                                        linked_context: match l251 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l252 = *base
                                                                                                        .add(40 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                                        .cast::<i64>();
                                                                                                    l252 as u64
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        },
                                                                                        attributes: result263,
                                                                                        inherited: _rt::bool_lift(l264 as u8),
                                                                                    }
                                                                                };
                                                                                SpanData::LocalSpan(e268)
                                                                            }
                                                                            n => {
                                                                                debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                                                let e268 = {
                                                                                    let l265 = *base.add(8).cast::<*mut u8>();
                                                                                    let l266 = *base
                                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len267 = l266;
                                                                                    let bytes267 = _rt::Vec::from_raw_parts(
                                                                                        l265.cast(),
                                                                                        len267,
                                                                                        len267,
                                                                                    );
                                                                                    ExternalSpanData {
                                                                                        span_id: _rt::string_lift(bytes267),
                                                                                    }
                                                                                };
                                                                                SpanData::ExternalSpan(e268)
                                                                            }
                                                                        };
                                                                        v268
                                                                    };
                                                                    result269.push(e269);
                                                                }
                                                                _rt::cabi_dealloc(
                                                                    base269,
                                                                    len269 * (56 + 6 * ::core::mem::size_of::<*const u8>()),
                                                                    8,
                                                                );
                                                                result269
                                                            };
                                                            result270.push(e270);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base270,
                                                            len270 * (2 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        ExportedFunctionInvokedParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l169 as u64,
                                                                nanoseconds: l170 as u32,
                                                            },
                                                            function_name: _rt::string_lift(bytes173),
                                                            request: result224,
                                                            idempotency_key: _rt::string_lift(bytes227),
                                                            trace_id: _rt::string_lift(bytes230),
                                                            trace_states: result236,
                                                            invocation_context: result270,
                                                        }
                                                    };
                                                    OplogEntry::ExportedFunctionInvoked(e602)
                                                }
                                                3 => {
                                                    let e602 = {
                                                        let l271 = *base.add(8).cast::<i64>();
                                                        let l272 = *base.add(16).cast::<i32>();
                                                        let l273 = i32::from(*base.add(24).cast::<u8>());
                                                        let l322 = *base
                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i64>();
                                                        ExportedFunctionCompletedParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l271 as u64,
                                                                nanoseconds: l272 as u32,
                                                            },
                                                            response: match l273 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l274 = *base
                                                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l275 = *base
                                                                            .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let base321 = l274;
                                                                        let len321 = l275;
                                                                        let mut result321 = _rt::Vec::with_capacity(len321);
                                                                        for i in 0..len321 {
                                                                            let base = base321
                                                                                .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                            let e321 = {
                                                                                let l276 = i32::from(*base.add(0).cast::<u8>());
                                                                                use super::super::super::golem::rpc::types::WitNode as V320;
                                                                                let v320 = match l276 {
                                                                                    0 => {
                                                                                        let e320 = {
                                                                                            let l277 = *base.add(8).cast::<*mut u8>();
                                                                                            let l278 = *base
                                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len279 = l278;
                                                                                            _rt::Vec::from_raw_parts(l277.cast(), len279, len279)
                                                                                        };
                                                                                        V320::RecordValue(e320)
                                                                                    }
                                                                                    1 => {
                                                                                        let e320 = {
                                                                                            let l280 = *base.add(8).cast::<i32>();
                                                                                            let l281 = i32::from(*base.add(12).cast::<u8>());
                                                                                            (
                                                                                                l280 as u32,
                                                                                                match l281 {
                                                                                                    0 => None,
                                                                                                    1 => {
                                                                                                        let e = {
                                                                                                            let l282 = *base.add(16).cast::<i32>();
                                                                                                            l282
                                                                                                        };
                                                                                                        Some(e)
                                                                                                    }
                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                },
                                                                                            )
                                                                                        };
                                                                                        V320::VariantValue(e320)
                                                                                    }
                                                                                    2 => {
                                                                                        let e320 = {
                                                                                            let l283 = *base.add(8).cast::<i32>();
                                                                                            l283 as u32
                                                                                        };
                                                                                        V320::EnumValue(e320)
                                                                                    }
                                                                                    3 => {
                                                                                        let e320 = {
                                                                                            let l284 = *base.add(8).cast::<*mut u8>();
                                                                                            let l285 = *base
                                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let base287 = l284;
                                                                                            let len287 = l285;
                                                                                            let mut result287 = _rt::Vec::with_capacity(len287);
                                                                                            for i in 0..len287 {
                                                                                                let base = base287.add(i * 1);
                                                                                                let e287 = {
                                                                                                    let l286 = i32::from(*base.add(0).cast::<u8>());
                                                                                                    _rt::bool_lift(l286 as u8)
                                                                                                };
                                                                                                result287.push(e287);
                                                                                            }
                                                                                            _rt::cabi_dealloc(base287, len287 * 1, 1);
                                                                                            result287
                                                                                        };
                                                                                        V320::FlagsValue(e320)
                                                                                    }
                                                                                    4 => {
                                                                                        let e320 = {
                                                                                            let l288 = *base.add(8).cast::<*mut u8>();
                                                                                            let l289 = *base
                                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len290 = l289;
                                                                                            _rt::Vec::from_raw_parts(l288.cast(), len290, len290)
                                                                                        };
                                                                                        V320::TupleValue(e320)
                                                                                    }
                                                                                    5 => {
                                                                                        let e320 = {
                                                                                            let l291 = *base.add(8).cast::<*mut u8>();
                                                                                            let l292 = *base
                                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len293 = l292;
                                                                                            _rt::Vec::from_raw_parts(l291.cast(), len293, len293)
                                                                                        };
                                                                                        V320::ListValue(e320)
                                                                                    }
                                                                                    6 => {
                                                                                        let e320 = {
                                                                                            let l294 = i32::from(*base.add(8).cast::<u8>());
                                                                                            match l294 {
                                                                                                0 => None,
                                                                                                1 => {
                                                                                                    let e = {
                                                                                                        let l295 = *base.add(12).cast::<i32>();
                                                                                                        l295
                                                                                                    };
                                                                                                    Some(e)
                                                                                                }
                                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                                            }
                                                                                        };
                                                                                        V320::OptionValue(e320)
                                                                                    }
                                                                                    7 => {
                                                                                        let e320 = {
                                                                                            let l296 = i32::from(*base.add(8).cast::<u8>());
                                                                                            match l296 {
                                                                                                0 => {
                                                                                                    let e = {
                                                                                                        let l297 = i32::from(*base.add(12).cast::<u8>());
                                                                                                        match l297 {
                                                                                                            0 => None,
                                                                                                            1 => {
                                                                                                                let e = {
                                                                                                                    let l298 = *base.add(16).cast::<i32>();
                                                                                                                    l298
                                                                                                                };
                                                                                                                Some(e)
                                                                                                            }
                                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                                        }
                                                                                                    };
                                                                                                    Ok(e)
                                                                                                }
                                                                                                1 => {
                                                                                                    let e = {
                                                                                                        let l299 = i32::from(*base.add(12).cast::<u8>());
                                                                                                        match l299 {
                                                                                                            0 => None,
                                                                                                            1 => {
                                                                                                                let e = {
                                                                                                                    let l300 = *base.add(16).cast::<i32>();
                                                                                                                    l300
                                                                                                                };
                                                                                                                Some(e)
                                                                                                            }
                                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                                        }
                                                                                                    };
                                                                                                    Err(e)
                                                                                                }
                                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                                            }
                                                                                        };
                                                                                        V320::ResultValue(e320)
                                                                                    }
                                                                                    8 => {
                                                                                        let e320 = {
                                                                                            let l301 = i32::from(*base.add(8).cast::<u8>());
                                                                                            l301 as u8
                                                                                        };
                                                                                        V320::PrimU8(e320)
                                                                                    }
                                                                                    9 => {
                                                                                        let e320 = {
                                                                                            let l302 = i32::from(*base.add(8).cast::<u16>());
                                                                                            l302 as u16
                                                                                        };
                                                                                        V320::PrimU16(e320)
                                                                                    }
                                                                                    10 => {
                                                                                        let e320 = {
                                                                                            let l303 = *base.add(8).cast::<i32>();
                                                                                            l303 as u32
                                                                                        };
                                                                                        V320::PrimU32(e320)
                                                                                    }
                                                                                    11 => {
                                                                                        let e320 = {
                                                                                            let l304 = *base.add(8).cast::<i64>();
                                                                                            l304 as u64
                                                                                        };
                                                                                        V320::PrimU64(e320)
                                                                                    }
                                                                                    12 => {
                                                                                        let e320 = {
                                                                                            let l305 = i32::from(*base.add(8).cast::<i8>());
                                                                                            l305 as i8
                                                                                        };
                                                                                        V320::PrimS8(e320)
                                                                                    }
                                                                                    13 => {
                                                                                        let e320 = {
                                                                                            let l306 = i32::from(*base.add(8).cast::<i16>());
                                                                                            l306 as i16
                                                                                        };
                                                                                        V320::PrimS16(e320)
                                                                                    }
                                                                                    14 => {
                                                                                        let e320 = {
                                                                                            let l307 = *base.add(8).cast::<i32>();
                                                                                            l307
                                                                                        };
                                                                                        V320::PrimS32(e320)
                                                                                    }
                                                                                    15 => {
                                                                                        let e320 = {
                                                                                            let l308 = *base.add(8).cast::<i64>();
                                                                                            l308
                                                                                        };
                                                                                        V320::PrimS64(e320)
                                                                                    }
                                                                                    16 => {
                                                                                        let e320 = {
                                                                                            let l309 = *base.add(8).cast::<f32>();
                                                                                            l309
                                                                                        };
                                                                                        V320::PrimFloat32(e320)
                                                                                    }
                                                                                    17 => {
                                                                                        let e320 = {
                                                                                            let l310 = *base.add(8).cast::<f64>();
                                                                                            l310
                                                                                        };
                                                                                        V320::PrimFloat64(e320)
                                                                                    }
                                                                                    18 => {
                                                                                        let e320 = {
                                                                                            let l311 = *base.add(8).cast::<i32>();
                                                                                            _rt::char_lift(l311 as u32)
                                                                                        };
                                                                                        V320::PrimChar(e320)
                                                                                    }
                                                                                    19 => {
                                                                                        let e320 = {
                                                                                            let l312 = i32::from(*base.add(8).cast::<u8>());
                                                                                            _rt::bool_lift(l312 as u8)
                                                                                        };
                                                                                        V320::PrimBool(e320)
                                                                                    }
                                                                                    20 => {
                                                                                        let e320 = {
                                                                                            let l313 = *base.add(8).cast::<*mut u8>();
                                                                                            let l314 = *base
                                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len315 = l314;
                                                                                            let bytes315 = _rt::Vec::from_raw_parts(
                                                                                                l313.cast(),
                                                                                                len315,
                                                                                                len315,
                                                                                            );
                                                                                            _rt::string_lift(bytes315)
                                                                                        };
                                                                                        V320::PrimString(e320)
                                                                                    }
                                                                                    n => {
                                                                                        debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                                        let e320 = {
                                                                                            let l316 = *base.add(8).cast::<*mut u8>();
                                                                                            let l317 = *base
                                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len318 = l317;
                                                                                            let bytes318 = _rt::Vec::from_raw_parts(
                                                                                                l316.cast(),
                                                                                                len318,
                                                                                                len318,
                                                                                            );
                                                                                            let l319 = *base
                                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<i64>();
                                                                                            (
                                                                                                super::super::super::golem::rpc::types::Uri {
                                                                                                    value: _rt::string_lift(bytes318),
                                                                                                },
                                                                                                l319 as u64,
                                                                                            )
                                                                                        };
                                                                                        V320::Handle(e320)
                                                                                    }
                                                                                };
                                                                                v320
                                                                            };
                                                                            result321.push(e321);
                                                                        }
                                                                        _rt::cabi_dealloc(
                                                                            base321,
                                                                            len321 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                            8,
                                                                        );
                                                                        super::super::super::golem::rpc::types::WitValue {
                                                                            nodes: result321,
                                                                        }
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            consumed_fuel: l322,
                                                        }
                                                    };
                                                    OplogEntry::ExportedFunctionCompleted(e602)
                                                }
                                                4 => {
                                                    let e602 = {
                                                        let l323 = *base.add(8).cast::<i64>();
                                                        let l324 = *base.add(16).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l323 as u64,
                                                            nanoseconds: l324 as u32,
                                                        }
                                                    };
                                                    OplogEntry::Suspend(e602)
                                                }
                                                5 => {
                                                    let e602 = {
                                                        let l325 = *base.add(8).cast::<i64>();
                                                        let l326 = *base.add(16).cast::<i32>();
                                                        let l327 = *base.add(24).cast::<*mut u8>();
                                                        let l328 = *base
                                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len329 = l328;
                                                        let bytes329 = _rt::Vec::from_raw_parts(
                                                            l327.cast(),
                                                            len329,
                                                            len329,
                                                        );
                                                        ErrorParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l325 as u64,
                                                                nanoseconds: l326 as u32,
                                                            },
                                                            error: _rt::string_lift(bytes329),
                                                        }
                                                    };
                                                    OplogEntry::Error(e602)
                                                }
                                                6 => {
                                                    let e602 = {
                                                        let l330 = *base.add(8).cast::<i64>();
                                                        let l331 = *base.add(16).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l330 as u64,
                                                            nanoseconds: l331 as u32,
                                                        }
                                                    };
                                                    OplogEntry::NoOp(e602)
                                                }
                                                7 => {
                                                    let e602 = {
                                                        let l332 = *base.add(8).cast::<i64>();
                                                        let l333 = *base.add(16).cast::<i32>();
                                                        let l334 = *base.add(24).cast::<i64>();
                                                        let l335 = *base.add(32).cast::<i64>();
                                                        JumpParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l332 as u64,
                                                                nanoseconds: l333 as u32,
                                                            },
                                                            start: l334 as u64,
                                                            end: l335 as u64,
                                                        }
                                                    };
                                                    OplogEntry::Jump(e602)
                                                }
                                                8 => {
                                                    let e602 = {
                                                        let l336 = *base.add(8).cast::<i64>();
                                                        let l337 = *base.add(16).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l336 as u64,
                                                            nanoseconds: l337 as u32,
                                                        }
                                                    };
                                                    OplogEntry::Interrupted(e602)
                                                }
                                                9 => {
                                                    let e602 = {
                                                        let l338 = *base.add(8).cast::<i64>();
                                                        let l339 = *base.add(16).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l338 as u64,
                                                            nanoseconds: l339 as u32,
                                                        }
                                                    };
                                                    OplogEntry::Exited(e602)
                                                }
                                                10 => {
                                                    let e602 = {
                                                        let l340 = *base.add(8).cast::<i64>();
                                                        let l341 = *base.add(16).cast::<i32>();
                                                        let l342 = *base.add(24).cast::<i32>();
                                                        let l343 = *base.add(32).cast::<i64>();
                                                        let l344 = *base.add(40).cast::<i64>();
                                                        let l345 = *base.add(48).cast::<f64>();
                                                        let l346 = i32::from(*base.add(56).cast::<u8>());
                                                        ChangeRetryPolicyParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l340 as u64,
                                                                nanoseconds: l341 as u32,
                                                            },
                                                            retry_policy: super::super::super::golem::api::host::RetryPolicy {
                                                                max_attempts: l342 as u32,
                                                                min_delay: l343 as u64,
                                                                max_delay: l344 as u64,
                                                                multiplier: l345,
                                                                max_jitter_factor: match l346 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l347 = *base.add(64).cast::<f64>();
                                                                            l347
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                            },
                                                        }
                                                    };
                                                    OplogEntry::ChangeRetryPolicy(e602)
                                                }
                                                11 => {
                                                    let e602 = {
                                                        let l348 = *base.add(8).cast::<i64>();
                                                        let l349 = *base.add(16).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l348 as u64,
                                                            nanoseconds: l349 as u32,
                                                        }
                                                    };
                                                    OplogEntry::BeginAtomicRegion(e602)
                                                }
                                                12 => {
                                                    let e602 = {
                                                        let l350 = *base.add(8).cast::<i64>();
                                                        let l351 = *base.add(16).cast::<i32>();
                                                        let l352 = *base.add(24).cast::<i64>();
                                                        EndAtomicRegionParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l350 as u64,
                                                                nanoseconds: l351 as u32,
                                                            },
                                                            begin_index: l352 as u64,
                                                        }
                                                    };
                                                    OplogEntry::EndAtomicRegion(e602)
                                                }
                                                13 => {
                                                    let e602 = {
                                                        let l353 = *base.add(8).cast::<i64>();
                                                        let l354 = *base.add(16).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l353 as u64,
                                                            nanoseconds: l354 as u32,
                                                        }
                                                    };
                                                    OplogEntry::BeginRemoteWrite(e602)
                                                }
                                                14 => {
                                                    let e602 = {
                                                        let l355 = *base.add(8).cast::<i64>();
                                                        let l356 = *base.add(16).cast::<i32>();
                                                        let l357 = *base.add(24).cast::<i64>();
                                                        EndRemoteWriteParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l355 as u64,
                                                                nanoseconds: l356 as u32,
                                                            },
                                                            begin_index: l357 as u64,
                                                        }
                                                    };
                                                    OplogEntry::EndRemoteWrite(e602)
                                                }
                                                15 => {
                                                    let e602 = {
                                                        let l358 = *base.add(8).cast::<i64>();
                                                        let l359 = *base.add(16).cast::<i32>();
                                                        let l360 = i32::from(*base.add(24).cast::<u8>());
                                                        let v420 = match l360 {
                                                            0 => {
                                                                let e420 = {
                                                                    let l361 = *base.add(32).cast::<*mut u8>();
                                                                    let l362 = *base
                                                                        .add(32 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len363 = l362;
                                                                    let bytes363 = _rt::Vec::from_raw_parts(
                                                                        l361.cast(),
                                                                        len363,
                                                                        len363,
                                                                    );
                                                                    let l364 = *base
                                                                        .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l365 = *base
                                                                        .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len366 = l365;
                                                                    let bytes366 = _rt::Vec::from_raw_parts(
                                                                        l364.cast(),
                                                                        len366,
                                                                        len366,
                                                                    );
                                                                    let l367 = i32::from(
                                                                        *base
                                                                            .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    ExportedFunctionInvocationParameters {
                                                                        idempotency_key: _rt::string_lift(bytes363),
                                                                        function_name: _rt::string_lift(bytes366),
                                                                        input: match l367 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l368 = *base
                                                                                        .add(32 + 5 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l369 = *base
                                                                                        .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base418 = l368;
                                                                                    let len418 = l369;
                                                                                    let mut result418 = _rt::Vec::with_capacity(len418);
                                                                                    for i in 0..len418 {
                                                                                        let base = base418
                                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                        let e418 = {
                                                                                            let l370 = *base.add(0).cast::<*mut u8>();
                                                                                            let l371 = *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let base417 = l370;
                                                                                            let len417 = l371;
                                                                                            let mut result417 = _rt::Vec::with_capacity(len417);
                                                                                            for i in 0..len417 {
                                                                                                let base = base417
                                                                                                    .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                                                let e417 = {
                                                                                                    let l372 = i32::from(*base.add(0).cast::<u8>());
                                                                                                    use super::super::super::golem::rpc::types::WitNode as V416;
                                                                                                    let v416 = match l372 {
                                                                                                        0 => {
                                                                                                            let e416 = {
                                                                                                                let l373 = *base.add(8).cast::<*mut u8>();
                                                                                                                let l374 = *base
                                                                                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                                    .cast::<usize>();
                                                                                                                let len375 = l374;
                                                                                                                _rt::Vec::from_raw_parts(l373.cast(), len375, len375)
                                                                                                            };
                                                                                                            V416::RecordValue(e416)
                                                                                                        }
                                                                                                        1 => {
                                                                                                            let e416 = {
                                                                                                                let l376 = *base.add(8).cast::<i32>();
                                                                                                                let l377 = i32::from(*base.add(12).cast::<u8>());
                                                                                                                (
                                                                                                                    l376 as u32,
                                                                                                                    match l377 {
                                                                                                                        0 => None,
                                                                                                                        1 => {
                                                                                                                            let e = {
                                                                                                                                let l378 = *base.add(16).cast::<i32>();
                                                                                                                                l378
                                                                                                                            };
                                                                                                                            Some(e)
                                                                                                                        }
                                                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                                                    },
                                                                                                                )
                                                                                                            };
                                                                                                            V416::VariantValue(e416)
                                                                                                        }
                                                                                                        2 => {
                                                                                                            let e416 = {
                                                                                                                let l379 = *base.add(8).cast::<i32>();
                                                                                                                l379 as u32
                                                                                                            };
                                                                                                            V416::EnumValue(e416)
                                                                                                        }
                                                                                                        3 => {
                                                                                                            let e416 = {
                                                                                                                let l380 = *base.add(8).cast::<*mut u8>();
                                                                                                                let l381 = *base
                                                                                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                                    .cast::<usize>();
                                                                                                                let base383 = l380;
                                                                                                                let len383 = l381;
                                                                                                                let mut result383 = _rt::Vec::with_capacity(len383);
                                                                                                                for i in 0..len383 {
                                                                                                                    let base = base383.add(i * 1);
                                                                                                                    let e383 = {
                                                                                                                        let l382 = i32::from(*base.add(0).cast::<u8>());
                                                                                                                        _rt::bool_lift(l382 as u8)
                                                                                                                    };
                                                                                                                    result383.push(e383);
                                                                                                                }
                                                                                                                _rt::cabi_dealloc(base383, len383 * 1, 1);
                                                                                                                result383
                                                                                                            };
                                                                                                            V416::FlagsValue(e416)
                                                                                                        }
                                                                                                        4 => {
                                                                                                            let e416 = {
                                                                                                                let l384 = *base.add(8).cast::<*mut u8>();
                                                                                                                let l385 = *base
                                                                                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                                    .cast::<usize>();
                                                                                                                let len386 = l385;
                                                                                                                _rt::Vec::from_raw_parts(l384.cast(), len386, len386)
                                                                                                            };
                                                                                                            V416::TupleValue(e416)
                                                                                                        }
                                                                                                        5 => {
                                                                                                            let e416 = {
                                                                                                                let l387 = *base.add(8).cast::<*mut u8>();
                                                                                                                let l388 = *base
                                                                                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                                    .cast::<usize>();
                                                                                                                let len389 = l388;
                                                                                                                _rt::Vec::from_raw_parts(l387.cast(), len389, len389)
                                                                                                            };
                                                                                                            V416::ListValue(e416)
                                                                                                        }
                                                                                                        6 => {
                                                                                                            let e416 = {
                                                                                                                let l390 = i32::from(*base.add(8).cast::<u8>());
                                                                                                                match l390 {
                                                                                                                    0 => None,
                                                                                                                    1 => {
                                                                                                                        let e = {
                                                                                                                            let l391 = *base.add(12).cast::<i32>();
                                                                                                                            l391
                                                                                                                        };
                                                                                                                        Some(e)
                                                                                                                    }
                                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                                }
                                                                                                            };
                                                                                                            V416::OptionValue(e416)
                                                                                                        }
                                                                                                        7 => {
                                                                                                            let e416 = {
                                                                                                                let l392 = i32::from(*base.add(8).cast::<u8>());
                                                                                                                match l392 {
                                                                                                                    0 => {
                                                                                                                        let e = {
                                                                                                                            let l393 = i32::from(*base.add(12).cast::<u8>());
                                                                                                                            match l393 {
                                                                                                                                0 => None,
                                                                                                                                1 => {
                                                                                                                                    let e = {
                                                                                                                                        let l394 = *base.add(16).cast::<i32>();
                                                                                                                                        l394
                                                                                                                                    };
                                                                                                                                    Some(e)
                                                                                                                                }
                                                                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                                                                            }
                                                                                                                        };
                                                                                                                        Ok(e)
                                                                                                                    }
                                                                                                                    1 => {
                                                                                                                        let e = {
                                                                                                                            let l395 = i32::from(*base.add(12).cast::<u8>());
                                                                                                                            match l395 {
                                                                                                                                0 => None,
                                                                                                                                1 => {
                                                                                                                                    let e = {
                                                                                                                                        let l396 = *base.add(16).cast::<i32>();
                                                                                                                                        l396
                                                                                                                                    };
                                                                                                                                    Some(e)
                                                                                                                                }
                                                                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                                                                            }
                                                                                                                        };
                                                                                                                        Err(e)
                                                                                                                    }
                                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                                }
                                                                                                            };
                                                                                                            V416::ResultValue(e416)
                                                                                                        }
                                                                                                        8 => {
                                                                                                            let e416 = {
                                                                                                                let l397 = i32::from(*base.add(8).cast::<u8>());
                                                                                                                l397 as u8
                                                                                                            };
                                                                                                            V416::PrimU8(e416)
                                                                                                        }
                                                                                                        9 => {
                                                                                                            let e416 = {
                                                                                                                let l398 = i32::from(*base.add(8).cast::<u16>());
                                                                                                                l398 as u16
                                                                                                            };
                                                                                                            V416::PrimU16(e416)
                                                                                                        }
                                                                                                        10 => {
                                                                                                            let e416 = {
                                                                                                                let l399 = *base.add(8).cast::<i32>();
                                                                                                                l399 as u32
                                                                                                            };
                                                                                                            V416::PrimU32(e416)
                                                                                                        }
                                                                                                        11 => {
                                                                                                            let e416 = {
                                                                                                                let l400 = *base.add(8).cast::<i64>();
                                                                                                                l400 as u64
                                                                                                            };
                                                                                                            V416::PrimU64(e416)
                                                                                                        }
                                                                                                        12 => {
                                                                                                            let e416 = {
                                                                                                                let l401 = i32::from(*base.add(8).cast::<i8>());
                                                                                                                l401 as i8
                                                                                                            };
                                                                                                            V416::PrimS8(e416)
                                                                                                        }
                                                                                                        13 => {
                                                                                                            let e416 = {
                                                                                                                let l402 = i32::from(*base.add(8).cast::<i16>());
                                                                                                                l402 as i16
                                                                                                            };
                                                                                                            V416::PrimS16(e416)
                                                                                                        }
                                                                                                        14 => {
                                                                                                            let e416 = {
                                                                                                                let l403 = *base.add(8).cast::<i32>();
                                                                                                                l403
                                                                                                            };
                                                                                                            V416::PrimS32(e416)
                                                                                                        }
                                                                                                        15 => {
                                                                                                            let e416 = {
                                                                                                                let l404 = *base.add(8).cast::<i64>();
                                                                                                                l404
                                                                                                            };
                                                                                                            V416::PrimS64(e416)
                                                                                                        }
                                                                                                        16 => {
                                                                                                            let e416 = {
                                                                                                                let l405 = *base.add(8).cast::<f32>();
                                                                                                                l405
                                                                                                            };
                                                                                                            V416::PrimFloat32(e416)
                                                                                                        }
                                                                                                        17 => {
                                                                                                            let e416 = {
                                                                                                                let l406 = *base.add(8).cast::<f64>();
                                                                                                                l406
                                                                                                            };
                                                                                                            V416::PrimFloat64(e416)
                                                                                                        }
                                                                                                        18 => {
                                                                                                            let e416 = {
                                                                                                                let l407 = *base.add(8).cast::<i32>();
                                                                                                                _rt::char_lift(l407 as u32)
                                                                                                            };
                                                                                                            V416::PrimChar(e416)
                                                                                                        }
                                                                                                        19 => {
                                                                                                            let e416 = {
                                                                                                                let l408 = i32::from(*base.add(8).cast::<u8>());
                                                                                                                _rt::bool_lift(l408 as u8)
                                                                                                            };
                                                                                                            V416::PrimBool(e416)
                                                                                                        }
                                                                                                        20 => {
                                                                                                            let e416 = {
                                                                                                                let l409 = *base.add(8).cast::<*mut u8>();
                                                                                                                let l410 = *base
                                                                                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                                    .cast::<usize>();
                                                                                                                let len411 = l410;
                                                                                                                let bytes411 = _rt::Vec::from_raw_parts(
                                                                                                                    l409.cast(),
                                                                                                                    len411,
                                                                                                                    len411,
                                                                                                                );
                                                                                                                _rt::string_lift(bytes411)
                                                                                                            };
                                                                                                            V416::PrimString(e416)
                                                                                                        }
                                                                                                        n => {
                                                                                                            debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                                                            let e416 = {
                                                                                                                let l412 = *base.add(8).cast::<*mut u8>();
                                                                                                                let l413 = *base
                                                                                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                                    .cast::<usize>();
                                                                                                                let len414 = l413;
                                                                                                                let bytes414 = _rt::Vec::from_raw_parts(
                                                                                                                    l412.cast(),
                                                                                                                    len414,
                                                                                                                    len414,
                                                                                                                );
                                                                                                                let l415 = *base
                                                                                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                                    .cast::<i64>();
                                                                                                                (
                                                                                                                    super::super::super::golem::rpc::types::Uri {
                                                                                                                        value: _rt::string_lift(bytes414),
                                                                                                                    },
                                                                                                                    l415 as u64,
                                                                                                                )
                                                                                                            };
                                                                                                            V416::Handle(e416)
                                                                                                        }
                                                                                                    };
                                                                                                    v416
                                                                                                };
                                                                                                result417.push(e417);
                                                                                            }
                                                                                            _rt::cabi_dealloc(
                                                                                                base417,
                                                                                                len417 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                                                8,
                                                                                            );
                                                                                            super::super::super::golem::rpc::types::WitValue {
                                                                                                nodes: result417,
                                                                                            }
                                                                                        };
                                                                                        result418.push(e418);
                                                                                    }
                                                                                    _rt::cabi_dealloc(
                                                                                        base418,
                                                                                        len418 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                    result418
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                AgentInvocation::ExportedFunction(e420)
                                                            }
                                                            n => {
                                                                debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                                let e420 = {
                                                                    let l419 = *base.add(32).cast::<i64>();
                                                                    l419 as u64
                                                                };
                                                                AgentInvocation::ManualUpdate(e420)
                                                            }
                                                        };
                                                        PendingAgentInvocationParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l358 as u64,
                                                                nanoseconds: l359 as u32,
                                                            },
                                                            invocation: v420,
                                                        }
                                                    };
                                                    OplogEntry::PendingAgentInvocation(e602)
                                                }
                                                16 => {
                                                    let e602 = {
                                                        let l421 = *base.add(8).cast::<i64>();
                                                        let l422 = *base.add(16).cast::<i32>();
                                                        let l423 = *base.add(24).cast::<i64>();
                                                        let l424 = i32::from(*base.add(32).cast::<u8>());
                                                        let v428 = match l424 {
                                                            0 => UpdateDescription::AutoUpdate,
                                                            n => {
                                                                debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                                let e428 = {
                                                                    let l425 = *base
                                                                        .add(32 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l426 = *base
                                                                        .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len427 = l426;
                                                                    _rt::Vec::from_raw_parts(l425.cast(), len427, len427)
                                                                };
                                                                UpdateDescription::SnapshotBased(e428)
                                                            }
                                                        };
                                                        PendingUpdateParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l421 as u64,
                                                                nanoseconds: l422 as u32,
                                                            },
                                                            target_version: l423 as u64,
                                                            update_description: v428,
                                                        }
                                                    };
                                                    OplogEntry::PendingUpdate(e602)
                                                }
                                                17 => {
                                                    let e602 = {
                                                        let l429 = *base.add(8).cast::<i64>();
                                                        let l430 = *base.add(16).cast::<i32>();
                                                        let l431 = *base.add(24).cast::<i64>();
                                                        let l432 = *base.add(32).cast::<i64>();
                                                        let l433 = *base.add(40).cast::<*mut u8>();
                                                        let l434 = *base
                                                            .add(40 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base452 = l433;
                                                        let len452 = l434;
                                                        let mut result452 = _rt::Vec::with_capacity(len452);
                                                        for i in 0..len452 {
                                                            let base = base452
                                                                .add(i * (16 + 6 * ::core::mem::size_of::<*const u8>()));
                                                            let e452 = {
                                                                let l435 = *base.add(0).cast::<i64>();
                                                                let l436 = *base.add(8).cast::<i64>();
                                                                let l437 = *base.add(16).cast::<*mut u8>();
                                                                let l438 = *base
                                                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len439 = l438;
                                                                let bytes439 = _rt::Vec::from_raw_parts(
                                                                    l437.cast(),
                                                                    len439,
                                                                    len439,
                                                                );
                                                                let l440 = *base
                                                                    .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l441 = *base
                                                                    .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len442 = l441;
                                                                let bytes442 = _rt::Vec::from_raw_parts(
                                                                    l440.cast(),
                                                                    len442,
                                                                    len442,
                                                                );
                                                                let l443 = *base
                                                                    .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l444 = *base
                                                                    .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let base451 = l443;
                                                                let len451 = l444;
                                                                let mut result451 = _rt::Vec::with_capacity(len451);
                                                                for i in 0..len451 {
                                                                    let base = base451
                                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                    let e451 = {
                                                                        let l445 = *base.add(0).cast::<*mut u8>();
                                                                        let l446 = *base
                                                                            .add(::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len447 = l446;
                                                                        let bytes447 = _rt::Vec::from_raw_parts(
                                                                            l445.cast(),
                                                                            len447,
                                                                            len447,
                                                                        );
                                                                        let l448 = *base
                                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l449 = *base
                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len450 = l449;
                                                                        let bytes450 = _rt::Vec::from_raw_parts(
                                                                            l448.cast(),
                                                                            len450,
                                                                            len450,
                                                                        );
                                                                        (_rt::string_lift(bytes447), _rt::string_lift(bytes450))
                                                                    };
                                                                    result451.push(e451);
                                                                }
                                                                _rt::cabi_dealloc(
                                                                    base451,
                                                                    len451 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                    ::core::mem::size_of::<*const u8>(),
                                                                );
                                                                PluginInstallationDescription {
                                                                    installation_id: super::super::super::golem::rpc::types::Uuid {
                                                                        high_bits: l435 as u64,
                                                                        low_bits: l436 as u64,
                                                                    },
                                                                    name: _rt::string_lift(bytes439),
                                                                    version: _rt::string_lift(bytes442),
                                                                    parameters: result451,
                                                                }
                                                            };
                                                            result452.push(e452);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base452,
                                                            len452 * (16 + 6 * ::core::mem::size_of::<*const u8>()),
                                                            8,
                                                        );
                                                        SuccessfulUpdateParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l429 as u64,
                                                                nanoseconds: l430 as u32,
                                                            },
                                                            target_version: l431 as u64,
                                                            new_component_size: l432 as u64,
                                                            new_active_plugins: result452,
                                                        }
                                                    };
                                                    OplogEntry::SuccessfulUpdate(e602)
                                                }
                                                18 => {
                                                    let e602 = {
                                                        let l453 = *base.add(8).cast::<i64>();
                                                        let l454 = *base.add(16).cast::<i32>();
                                                        let l455 = *base.add(24).cast::<i64>();
                                                        let l456 = i32::from(*base.add(32).cast::<u8>());
                                                        FailedUpdateParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l453 as u64,
                                                                nanoseconds: l454 as u32,
                                                            },
                                                            target_version: l455 as u64,
                                                            details: match l456 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l457 = *base
                                                                            .add(32 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l458 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len459 = l458;
                                                                        let bytes459 = _rt::Vec::from_raw_parts(
                                                                            l457.cast(),
                                                                            len459,
                                                                            len459,
                                                                        );
                                                                        _rt::string_lift(bytes459)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        }
                                                    };
                                                    OplogEntry::FailedUpdate(e602)
                                                }
                                                19 => {
                                                    let e602 = {
                                                        let l460 = *base.add(8).cast::<i64>();
                                                        let l461 = *base.add(16).cast::<i32>();
                                                        let l462 = *base.add(24).cast::<i64>();
                                                        GrowMemoryParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l460 as u64,
                                                                nanoseconds: l461 as u32,
                                                            },
                                                            delta: l462 as u64,
                                                        }
                                                    };
                                                    OplogEntry::GrowMemory(e602)
                                                }
                                                20 => {
                                                    let e602 = {
                                                        let l463 = *base.add(8).cast::<i64>();
                                                        let l464 = *base.add(16).cast::<i32>();
                                                        let l465 = *base.add(24).cast::<i64>();
                                                        let l466 = *base.add(32).cast::<*mut u8>();
                                                        let l467 = *base
                                                            .add(32 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len468 = l467;
                                                        let bytes468 = _rt::Vec::from_raw_parts(
                                                            l466.cast(),
                                                            len468,
                                                            len468,
                                                        );
                                                        let l469 = *base
                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l470 = *base
                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len471 = l470;
                                                        let bytes471 = _rt::Vec::from_raw_parts(
                                                            l469.cast(),
                                                            len471,
                                                            len471,
                                                        );
                                                        CreateResourceParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l463 as u64,
                                                                nanoseconds: l464 as u32,
                                                            },
                                                            resource_id: l465 as u64,
                                                            name: _rt::string_lift(bytes468),
                                                            owner: _rt::string_lift(bytes471),
                                                        }
                                                    };
                                                    OplogEntry::CreateResource(e602)
                                                }
                                                21 => {
                                                    let e602 = {
                                                        let l472 = *base.add(8).cast::<i64>();
                                                        let l473 = *base.add(16).cast::<i32>();
                                                        let l474 = *base.add(24).cast::<i64>();
                                                        let l475 = *base.add(32).cast::<*mut u8>();
                                                        let l476 = *base
                                                            .add(32 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len477 = l476;
                                                        let bytes477 = _rt::Vec::from_raw_parts(
                                                            l475.cast(),
                                                            len477,
                                                            len477,
                                                        );
                                                        let l478 = *base
                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l479 = *base
                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len480 = l479;
                                                        let bytes480 = _rt::Vec::from_raw_parts(
                                                            l478.cast(),
                                                            len480,
                                                            len480,
                                                        );
                                                        DropResourceParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l472 as u64,
                                                                nanoseconds: l473 as u32,
                                                            },
                                                            resource_id: l474 as u64,
                                                            name: _rt::string_lift(bytes477),
                                                            owner: _rt::string_lift(bytes480),
                                                        }
                                                    };
                                                    OplogEntry::DropResource(e602)
                                                }
                                                22 => {
                                                    let e602 = {
                                                        let l481 = *base.add(8).cast::<i64>();
                                                        let l482 = *base.add(16).cast::<i32>();
                                                        let l483 = i32::from(*base.add(24).cast::<u8>());
                                                        let l484 = *base
                                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l485 = *base
                                                            .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len486 = l485;
                                                        let bytes486 = _rt::Vec::from_raw_parts(
                                                            l484.cast(),
                                                            len486,
                                                            len486,
                                                        );
                                                        let l487 = *base
                                                            .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l488 = *base
                                                            .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len489 = l488;
                                                        let bytes489 = _rt::Vec::from_raw_parts(
                                                            l487.cast(),
                                                            len489,
                                                            len489,
                                                        );
                                                        LogParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l481 as u64,
                                                                nanoseconds: l482 as u32,
                                                            },
                                                            level: LogLevel::_lift(l483 as u8),
                                                            context: _rt::string_lift(bytes486),
                                                            message: _rt::string_lift(bytes489),
                                                        }
                                                    };
                                                    OplogEntry::Log(e602)
                                                }
                                                23 => {
                                                    let e602 = {
                                                        let l490 = *base.add(8).cast::<i64>();
                                                        let l491 = *base.add(16).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l490 as u64,
                                                            nanoseconds: l491 as u32,
                                                        }
                                                    };
                                                    OplogEntry::Restart(e602)
                                                }
                                                24 => {
                                                    let e602 = {
                                                        let l492 = *base.add(8).cast::<i64>();
                                                        let l493 = *base.add(16).cast::<i32>();
                                                        let l494 = *base.add(24).cast::<i64>();
                                                        let l495 = *base.add(32).cast::<i64>();
                                                        let l496 = *base.add(40).cast::<*mut u8>();
                                                        let l497 = *base
                                                            .add(40 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len498 = l497;
                                                        let bytes498 = _rt::Vec::from_raw_parts(
                                                            l496.cast(),
                                                            len498,
                                                            len498,
                                                        );
                                                        let l499 = *base
                                                            .add(40 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l500 = *base
                                                            .add(40 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len501 = l500;
                                                        let bytes501 = _rt::Vec::from_raw_parts(
                                                            l499.cast(),
                                                            len501,
                                                            len501,
                                                        );
                                                        let l502 = *base
                                                            .add(40 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l503 = *base
                                                            .add(40 + 5 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base510 = l502;
                                                        let len510 = l503;
                                                        let mut result510 = _rt::Vec::with_capacity(len510);
                                                        for i in 0..len510 {
                                                            let base = base510
                                                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                            let e510 = {
                                                                let l504 = *base.add(0).cast::<*mut u8>();
                                                                let l505 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len506 = l505;
                                                                let bytes506 = _rt::Vec::from_raw_parts(
                                                                    l504.cast(),
                                                                    len506,
                                                                    len506,
                                                                );
                                                                let l507 = *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l508 = *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len509 = l508;
                                                                let bytes509 = _rt::Vec::from_raw_parts(
                                                                    l507.cast(),
                                                                    len509,
                                                                    len509,
                                                                );
                                                                (_rt::string_lift(bytes506), _rt::string_lift(bytes509))
                                                            };
                                                            result510.push(e510);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base510,
                                                            len510 * (4 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        ActivatePluginParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l492 as u64,
                                                                nanoseconds: l493 as u32,
                                                            },
                                                            plugin: PluginInstallationDescription {
                                                                installation_id: super::super::super::golem::rpc::types::Uuid {
                                                                    high_bits: l494 as u64,
                                                                    low_bits: l495 as u64,
                                                                },
                                                                name: _rt::string_lift(bytes498),
                                                                version: _rt::string_lift(bytes501),
                                                                parameters: result510,
                                                            },
                                                        }
                                                    };
                                                    OplogEntry::ActivatePlugin(e602)
                                                }
                                                25 => {
                                                    let e602 = {
                                                        let l511 = *base.add(8).cast::<i64>();
                                                        let l512 = *base.add(16).cast::<i32>();
                                                        let l513 = *base.add(24).cast::<i64>();
                                                        let l514 = *base.add(32).cast::<i64>();
                                                        let l515 = *base.add(40).cast::<*mut u8>();
                                                        let l516 = *base
                                                            .add(40 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len517 = l516;
                                                        let bytes517 = _rt::Vec::from_raw_parts(
                                                            l515.cast(),
                                                            len517,
                                                            len517,
                                                        );
                                                        let l518 = *base
                                                            .add(40 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l519 = *base
                                                            .add(40 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len520 = l519;
                                                        let bytes520 = _rt::Vec::from_raw_parts(
                                                            l518.cast(),
                                                            len520,
                                                            len520,
                                                        );
                                                        let l521 = *base
                                                            .add(40 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l522 = *base
                                                            .add(40 + 5 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base529 = l521;
                                                        let len529 = l522;
                                                        let mut result529 = _rt::Vec::with_capacity(len529);
                                                        for i in 0..len529 {
                                                            let base = base529
                                                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                            let e529 = {
                                                                let l523 = *base.add(0).cast::<*mut u8>();
                                                                let l524 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len525 = l524;
                                                                let bytes525 = _rt::Vec::from_raw_parts(
                                                                    l523.cast(),
                                                                    len525,
                                                                    len525,
                                                                );
                                                                let l526 = *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l527 = *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len528 = l527;
                                                                let bytes528 = _rt::Vec::from_raw_parts(
                                                                    l526.cast(),
                                                                    len528,
                                                                    len528,
                                                                );
                                                                (_rt::string_lift(bytes525), _rt::string_lift(bytes528))
                                                            };
                                                            result529.push(e529);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base529,
                                                            len529 * (4 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        DeactivatePluginParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l511 as u64,
                                                                nanoseconds: l512 as u32,
                                                            },
                                                            plugin: PluginInstallationDescription {
                                                                installation_id: super::super::super::golem::rpc::types::Uuid {
                                                                    high_bits: l513 as u64,
                                                                    low_bits: l514 as u64,
                                                                },
                                                                name: _rt::string_lift(bytes517),
                                                                version: _rt::string_lift(bytes520),
                                                                parameters: result529,
                                                            },
                                                        }
                                                    };
                                                    OplogEntry::DeactivatePlugin(e602)
                                                }
                                                26 => {
                                                    let e602 = {
                                                        let l530 = *base.add(8).cast::<i64>();
                                                        let l531 = *base.add(16).cast::<i32>();
                                                        let l532 = *base.add(24).cast::<i64>();
                                                        let l533 = *base.add(32).cast::<i64>();
                                                        RevertParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l530 as u64,
                                                                nanoseconds: l531 as u32,
                                                            },
                                                            start: l532 as u64,
                                                            end: l533 as u64,
                                                        }
                                                    };
                                                    OplogEntry::Revert(e602)
                                                }
                                                27 => {
                                                    let e602 = {
                                                        let l534 = *base.add(8).cast::<i64>();
                                                        let l535 = *base.add(16).cast::<i32>();
                                                        let l536 = *base.add(24).cast::<*mut u8>();
                                                        let l537 = *base
                                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len538 = l537;
                                                        let bytes538 = _rt::Vec::from_raw_parts(
                                                            l536.cast(),
                                                            len538,
                                                            len538,
                                                        );
                                                        CancelInvocationParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l534 as u64,
                                                                nanoseconds: l535 as u32,
                                                            },
                                                            idempotency_key: _rt::string_lift(bytes538),
                                                        }
                                                    };
                                                    OplogEntry::CancelInvocation(e602)
                                                }
                                                28 => {
                                                    let e602 = {
                                                        let l539 = *base.add(8).cast::<i64>();
                                                        let l540 = *base.add(16).cast::<i32>();
                                                        let l541 = *base.add(24).cast::<*mut u8>();
                                                        let l542 = *base
                                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len543 = l542;
                                                        let bytes543 = _rt::Vec::from_raw_parts(
                                                            l541.cast(),
                                                            len543,
                                                            len543,
                                                        );
                                                        let l544 = i32::from(
                                                            *base
                                                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l548 = i32::from(
                                                            *base
                                                                .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l552 = *base
                                                            .add(24 + 8 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l553 = *base
                                                            .add(24 + 9 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base562 = l552;
                                                        let len562 = l553;
                                                        let mut result562 = _rt::Vec::with_capacity(len562);
                                                        for i in 0..len562 {
                                                            let base = base562
                                                                .add(i * (5 * ::core::mem::size_of::<*const u8>()));
                                                            let e562 = {
                                                                let l554 = *base.add(0).cast::<*mut u8>();
                                                                let l555 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len556 = l555;
                                                                let bytes556 = _rt::Vec::from_raw_parts(
                                                                    l554.cast(),
                                                                    len556,
                                                                    len556,
                                                                );
                                                                let l557 = i32::from(
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                use super::super::super::golem::api::context::AttributeValue as V561;
                                                                let v561 = match l557 {
                                                                    n => {
                                                                        debug_assert_eq!(n, 0, "invalid enum discriminant");
                                                                        let e561 = {
                                                                            let l558 = *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l559 = *base
                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len560 = l559;
                                                                            let bytes560 = _rt::Vec::from_raw_parts(
                                                                                l558.cast(),
                                                                                len560,
                                                                                len560,
                                                                            );
                                                                            _rt::string_lift(bytes560)
                                                                        };
                                                                        V561::String(e561)
                                                                    }
                                                                };
                                                                super::super::super::golem::api::context::Attribute {
                                                                    key: _rt::string_lift(bytes556),
                                                                    value: v561,
                                                                }
                                                            };
                                                            result562.push(e562);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base562,
                                                            len562 * (5 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        StartSpanParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l539 as u64,
                                                                nanoseconds: l540 as u32,
                                                            },
                                                            span_id: _rt::string_lift(bytes543),
                                                            parent: match l544 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l545 = *base
                                                                            .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l546 = *base
                                                                            .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len547 = l546;
                                                                        let bytes547 = _rt::Vec::from_raw_parts(
                                                                            l545.cast(),
                                                                            len547,
                                                                            len547,
                                                                        );
                                                                        _rt::string_lift(bytes547)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            linked_context: match l548 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l549 = *base
                                                                            .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l550 = *base
                                                                            .add(24 + 7 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len551 = l550;
                                                                        let bytes551 = _rt::Vec::from_raw_parts(
                                                                            l549.cast(),
                                                                            len551,
                                                                            len551,
                                                                        );
                                                                        _rt::string_lift(bytes551)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            attributes: result562,
                                                        }
                                                    };
                                                    OplogEntry::StartSpan(e602)
                                                }
                                                29 => {
                                                    let e602 = {
                                                        let l563 = *base.add(8).cast::<i64>();
                                                        let l564 = *base.add(16).cast::<i32>();
                                                        let l565 = *base.add(24).cast::<*mut u8>();
                                                        let l566 = *base
                                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len567 = l566;
                                                        let bytes567 = _rt::Vec::from_raw_parts(
                                                            l565.cast(),
                                                            len567,
                                                            len567,
                                                        );
                                                        FinishSpanParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l563 as u64,
                                                                nanoseconds: l564 as u32,
                                                            },
                                                            span_id: _rt::string_lift(bytes567),
                                                        }
                                                    };
                                                    OplogEntry::FinishSpan(e602)
                                                }
                                                30 => {
                                                    let e602 = {
                                                        let l568 = *base.add(8).cast::<i64>();
                                                        let l569 = *base.add(16).cast::<i32>();
                                                        let l570 = *base.add(24).cast::<*mut u8>();
                                                        let l571 = *base
                                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len572 = l571;
                                                        let bytes572 = _rt::Vec::from_raw_parts(
                                                            l570.cast(),
                                                            len572,
                                                            len572,
                                                        );
                                                        let l573 = *base
                                                            .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l574 = *base
                                                            .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len575 = l574;
                                                        let bytes575 = _rt::Vec::from_raw_parts(
                                                            l573.cast(),
                                                            len575,
                                                            len575,
                                                        );
                                                        let l576 = i32::from(
                                                            *base
                                                                .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        use super::super::super::golem::api::context::AttributeValue as V580;
                                                        let v580 = match l576 {
                                                            n => {
                                                                debug_assert_eq!(n, 0, "invalid enum discriminant");
                                                                let e580 = {
                                                                    let l577 = *base
                                                                        .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l578 = *base
                                                                        .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len579 = l578;
                                                                    let bytes579 = _rt::Vec::from_raw_parts(
                                                                        l577.cast(),
                                                                        len579,
                                                                        len579,
                                                                    );
                                                                    _rt::string_lift(bytes579)
                                                                };
                                                                V580::String(e580)
                                                            }
                                                        };
                                                        SetSpanAttributeParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l568 as u64,
                                                                nanoseconds: l569 as u32,
                                                            },
                                                            span_id: _rt::string_lift(bytes572),
                                                            key: _rt::string_lift(bytes575),
                                                            value: v580,
                                                        }
                                                    };
                                                    OplogEntry::SetSpanAttribute(e602)
                                                }
                                                31 => {
                                                    let e602 = {
                                                        let l581 = *base.add(8).cast::<i64>();
                                                        let l582 = *base.add(16).cast::<i32>();
                                                        let l583 = i32::from(*base.add(24).cast::<u8>());
                                                        use super::super::super::golem::api::host::PersistenceLevel as V584;
                                                        let v584 = match l583 {
                                                            0 => V584::PersistNothing,
                                                            1 => V584::PersistRemoteSideEffects,
                                                            n => {
                                                                debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                V584::Smart
                                                            }
                                                        };
                                                        ChangePersistenceLevelParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l581 as u64,
                                                                nanoseconds: l582 as u32,
                                                            },
                                                            persistence_level: v584,
                                                        }
                                                    };
                                                    OplogEntry::ChangePersistenceLevel(e602)
                                                }
                                                32 => {
                                                    let e602 = {
                                                        let l585 = *base.add(8).cast::<i64>();
                                                        let l586 = *base.add(16).cast::<i32>();
                                                        let l587 = *base.add(24).cast::<*mut u8>();
                                                        let l588 = *base
                                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len589 = l588;
                                                        let bytes589 = _rt::Vec::from_raw_parts(
                                                            l587.cast(),
                                                            len589,
                                                            len589,
                                                        );
                                                        BeginRemoteTransactionParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l585 as u64,
                                                                nanoseconds: l586 as u32,
                                                            },
                                                            transaction_id: _rt::string_lift(bytes589),
                                                        }
                                                    };
                                                    OplogEntry::BeginRemoteTransaction(e602)
                                                }
                                                33 => {
                                                    let e602 = {
                                                        let l590 = *base.add(8).cast::<i64>();
                                                        let l591 = *base.add(16).cast::<i32>();
                                                        let l592 = *base.add(24).cast::<i64>();
                                                        RemoteTransactionParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l590 as u64,
                                                                nanoseconds: l591 as u32,
                                                            },
                                                            begin_index: l592 as u64,
                                                        }
                                                    };
                                                    OplogEntry::PreCommitRemoteTransaction(e602)
                                                }
                                                34 => {
                                                    let e602 = {
                                                        let l593 = *base.add(8).cast::<i64>();
                                                        let l594 = *base.add(16).cast::<i32>();
                                                        let l595 = *base.add(24).cast::<i64>();
                                                        RemoteTransactionParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l593 as u64,
                                                                nanoseconds: l594 as u32,
                                                            },
                                                            begin_index: l595 as u64,
                                                        }
                                                    };
                                                    OplogEntry::PreRollbackRemoteTransaction(e602)
                                                }
                                                35 => {
                                                    let e602 = {
                                                        let l596 = *base.add(8).cast::<i64>();
                                                        let l597 = *base.add(16).cast::<i32>();
                                                        let l598 = *base.add(24).cast::<i64>();
                                                        RemoteTransactionParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l596 as u64,
                                                                nanoseconds: l597 as u32,
                                                            },
                                                            begin_index: l598 as u64,
                                                        }
                                                    };
                                                    OplogEntry::CommittedRemoteTransaction(e602)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 36, "invalid enum discriminant");
                                                    let e602 = {
                                                        let l599 = *base.add(8).cast::<i64>();
                                                        let l600 = *base.add(16).cast::<i32>();
                                                        let l601 = *base.add(24).cast::<i64>();
                                                        RemoteTransactionParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l599 as u64,
                                                                nanoseconds: l600 as u32,
                                                            },
                                                            begin_index: l601 as u64,
                                                        }
                                                    };
                                                    OplogEntry::RolledBackRemoteTransaction(e602)
                                                }
                                            };
                                            v602
                                        };
                                        result603.push(e603);
                                    }
                                    _rt::cabi_dealloc(
                                        base603,
                                        len603 * (104 + 12 * ::core::mem::size_of::<*const u8>()),
                                        8,
                                    );
                                    result603
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result604
                    }
                }
            }
            impl SearchOplog {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(agent_id: &AgentId, text: &str) -> Self {
                    unsafe {
                        let super::super::super::golem::rpc::types::AgentId {
                            component_id: component_id0,
                            agent_id: agent_id0,
                        } = agent_id;
                        let super::super::super::golem::rpc::types::ComponentId {
                            uuid: uuid1,
                        } = component_id0;
                        let super::super::super::golem::rpc::types::Uuid {
                            high_bits: high_bits2,
                            low_bits: low_bits2,
                        } = uuid1;
                        let vec3 = agent_id0;
                        let ptr3 = vec3.as_ptr().cast::<u8>();
                        let len3 = vec3.len();
                        let vec4 = text;
                        let ptr4 = vec4.as_ptr().cast::<u8>();
                        let len4 = vec4.len();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/oplog@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[constructor]search-oplog"]
                            fn wit_import5(
                                _: i64,
                                _: i64,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                            ) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import5(
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe {
                            wit_import5(
                                _rt::as_i64(high_bits2),
                                _rt::as_i64(low_bits2),
                                ptr3.cast_mut(),
                                len3,
                                ptr4.cast_mut(),
                                len4,
                            )
                        };
                        unsafe { SearchOplog::from_handle(ret as u32) }
                    }
                }
            }
            impl SearchOplog {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_next(&self) -> Option<_rt::Vec<(OplogIndex, OplogEntry)>> {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 3 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 3
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/oplog@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[method]search-oplog.get-next"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result605 = match l2 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l3 = *ptr0
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l4 = *ptr0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base604 = l3;
                                    let len604 = l4;
                                    let mut result604 = _rt::Vec::with_capacity(len604);
                                    for i in 0..len604 {
                                        let base = base604
                                            .add(i * (112 + 12 * ::core::mem::size_of::<*const u8>()));
                                        let e604 = {
                                            let l5 = *base.add(0).cast::<i64>();
                                            let l6 = i32::from(*base.add(8).cast::<u8>());
                                            let v603 = match l6 {
                                                0 => {
                                                    let e603 = {
                                                        let l7 = *base.add(16).cast::<i64>();
                                                        let l8 = *base.add(24).cast::<i32>();
                                                        let l9 = *base.add(32).cast::<i64>();
                                                        let l10 = *base.add(40).cast::<i64>();
                                                        let l11 = *base.add(48).cast::<*mut u8>();
                                                        let l12 = *base
                                                            .add(48 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len13 = l12;
                                                        let bytes13 = _rt::Vec::from_raw_parts(
                                                            l11.cast(),
                                                            len13,
                                                            len13,
                                                        );
                                                        let l14 = *base
                                                            .add(48 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i64>();
                                                        let l15 = *base
                                                            .add(56 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l16 = *base
                                                            .add(56 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base20 = l15;
                                                        let len20 = l16;
                                                        let mut result20 = _rt::Vec::with_capacity(len20);
                                                        for i in 0..len20 {
                                                            let base = base20
                                                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                            let e20 = {
                                                                let l17 = *base.add(0).cast::<*mut u8>();
                                                                let l18 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len19 = l18;
                                                                let bytes19 = _rt::Vec::from_raw_parts(
                                                                    l17.cast(),
                                                                    len19,
                                                                    len19,
                                                                );
                                                                _rt::string_lift(bytes19)
                                                            };
                                                            result20.push(e20);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base20,
                                                            len20 * (2 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        let l21 = *base
                                                            .add(56 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l22 = *base
                                                            .add(56 + 5 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base29 = l21;
                                                        let len29 = l22;
                                                        let mut result29 = _rt::Vec::with_capacity(len29);
                                                        for i in 0..len29 {
                                                            let base = base29
                                                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                            let e29 = {
                                                                let l23 = *base.add(0).cast::<*mut u8>();
                                                                let l24 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len25 = l24;
                                                                let bytes25 = _rt::Vec::from_raw_parts(
                                                                    l23.cast(),
                                                                    len25,
                                                                    len25,
                                                                );
                                                                let l26 = *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l27 = *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len28 = l27;
                                                                let bytes28 = _rt::Vec::from_raw_parts(
                                                                    l26.cast(),
                                                                    len28,
                                                                    len28,
                                                                );
                                                                (_rt::string_lift(bytes25), _rt::string_lift(bytes28))
                                                            };
                                                            result29.push(e29);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base29,
                                                            len29 * (4 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        let l30 = *base
                                                            .add(56 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l31 = *base
                                                            .add(56 + 7 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len32 = l31;
                                                        let bytes32 = _rt::Vec::from_raw_parts(
                                                            l30.cast(),
                                                            len32,
                                                            len32,
                                                        );
                                                        let l33 = *base
                                                            .add(56 + 8 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i64>();
                                                        let l34 = *base
                                                            .add(64 + 8 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i64>();
                                                        let l35 = i32::from(
                                                            *base
                                                                .add(72 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l41 = *base
                                                            .add(96 + 10 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i64>();
                                                        let l42 = *base
                                                            .add(104 + 10 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i64>();
                                                        let l43 = *base
                                                            .add(112 + 10 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l44 = *base
                                                            .add(112 + 11 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base62 = l43;
                                                        let len62 = l44;
                                                        let mut result62 = _rt::Vec::with_capacity(len62);
                                                        for i in 0..len62 {
                                                            let base = base62
                                                                .add(i * (16 + 6 * ::core::mem::size_of::<*const u8>()));
                                                            let e62 = {
                                                                let l45 = *base.add(0).cast::<i64>();
                                                                let l46 = *base.add(8).cast::<i64>();
                                                                let l47 = *base.add(16).cast::<*mut u8>();
                                                                let l48 = *base
                                                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len49 = l48;
                                                                let bytes49 = _rt::Vec::from_raw_parts(
                                                                    l47.cast(),
                                                                    len49,
                                                                    len49,
                                                                );
                                                                let l50 = *base
                                                                    .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l51 = *base
                                                                    .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len52 = l51;
                                                                let bytes52 = _rt::Vec::from_raw_parts(
                                                                    l50.cast(),
                                                                    len52,
                                                                    len52,
                                                                );
                                                                let l53 = *base
                                                                    .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l54 = *base
                                                                    .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let base61 = l53;
                                                                let len61 = l54;
                                                                let mut result61 = _rt::Vec::with_capacity(len61);
                                                                for i in 0..len61 {
                                                                    let base = base61
                                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                    let e61 = {
                                                                        let l55 = *base.add(0).cast::<*mut u8>();
                                                                        let l56 = *base
                                                                            .add(::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len57 = l56;
                                                                        let bytes57 = _rt::Vec::from_raw_parts(
                                                                            l55.cast(),
                                                                            len57,
                                                                            len57,
                                                                        );
                                                                        let l58 = *base
                                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l59 = *base
                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len60 = l59;
                                                                        let bytes60 = _rt::Vec::from_raw_parts(
                                                                            l58.cast(),
                                                                            len60,
                                                                            len60,
                                                                        );
                                                                        (_rt::string_lift(bytes57), _rt::string_lift(bytes60))
                                                                    };
                                                                    result61.push(e61);
                                                                }
                                                                _rt::cabi_dealloc(
                                                                    base61,
                                                                    len61 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                    ::core::mem::size_of::<*const u8>(),
                                                                );
                                                                PluginInstallationDescription {
                                                                    installation_id: super::super::super::golem::rpc::types::Uuid {
                                                                        high_bits: l45 as u64,
                                                                        low_bits: l46 as u64,
                                                                    },
                                                                    name: _rt::string_lift(bytes49),
                                                                    version: _rt::string_lift(bytes52),
                                                                    parameters: result61,
                                                                }
                                                            };
                                                            result62.push(e62);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base62,
                                                            len62 * (16 + 6 * ::core::mem::size_of::<*const u8>()),
                                                            8,
                                                        );
                                                        CreateParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l7 as u64,
                                                                nanoseconds: l8 as u32,
                                                            },
                                                            agent_id: super::super::super::golem::rpc::types::AgentId {
                                                                component_id: super::super::super::golem::rpc::types::ComponentId {
                                                                    uuid: super::super::super::golem::rpc::types::Uuid {
                                                                        high_bits: l9 as u64,
                                                                        low_bits: l10 as u64,
                                                                    },
                                                                },
                                                                agent_id: _rt::string_lift(bytes13),
                                                            },
                                                            component_version: l14 as u64,
                                                            args: result20,
                                                            env: result29,
                                                            created_by: super::super::super::golem::api::host::AccountId {
                                                                value: _rt::string_lift(bytes32),
                                                            },
                                                            project_id: super::super::super::golem::api::host::ProjectId {
                                                                uuid: super::super::super::golem::rpc::types::Uuid {
                                                                    high_bits: l33 as u64,
                                                                    low_bits: l34 as u64,
                                                                },
                                                            },
                                                            parent: match l35 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l36 = *base
                                                                            .add(80 + 8 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<i64>();
                                                                        let l37 = *base
                                                                            .add(88 + 8 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<i64>();
                                                                        let l38 = *base
                                                                            .add(96 + 8 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l39 = *base
                                                                            .add(96 + 9 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len40 = l39;
                                                                        let bytes40 = _rt::Vec::from_raw_parts(
                                                                            l38.cast(),
                                                                            len40,
                                                                            len40,
                                                                        );
                                                                        super::super::super::golem::rpc::types::AgentId {
                                                                            component_id: super::super::super::golem::rpc::types::ComponentId {
                                                                                uuid: super::super::super::golem::rpc::types::Uuid {
                                                                                    high_bits: l36 as u64,
                                                                                    low_bits: l37 as u64,
                                                                                },
                                                                            },
                                                                            agent_id: _rt::string_lift(bytes40),
                                                                        }
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            component_size: l41 as u64,
                                                            initial_total_linear_memory_size: l42 as u64,
                                                            initial_active_plugins: result62,
                                                        }
                                                    };
                                                    OplogEntry::Create(e603)
                                                }
                                                1 => {
                                                    let e603 = {
                                                        let l63 = *base.add(16).cast::<i64>();
                                                        let l64 = *base.add(24).cast::<i32>();
                                                        let l65 = *base.add(32).cast::<*mut u8>();
                                                        let l66 = *base
                                                            .add(32 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len67 = l66;
                                                        let bytes67 = _rt::Vec::from_raw_parts(
                                                            l65.cast(),
                                                            len67,
                                                            len67,
                                                        );
                                                        let l68 = *base
                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l69 = *base
                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base115 = l68;
                                                        let len115 = l69;
                                                        let mut result115 = _rt::Vec::with_capacity(len115);
                                                        for i in 0..len115 {
                                                            let base = base115
                                                                .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                            let e115 = {
                                                                let l70 = i32::from(*base.add(0).cast::<u8>());
                                                                use super::super::super::golem::rpc::types::WitNode as V114;
                                                                let v114 = match l70 {
                                                                    0 => {
                                                                        let e114 = {
                                                                            let l71 = *base.add(8).cast::<*mut u8>();
                                                                            let l72 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len73 = l72;
                                                                            _rt::Vec::from_raw_parts(l71.cast(), len73, len73)
                                                                        };
                                                                        V114::RecordValue(e114)
                                                                    }
                                                                    1 => {
                                                                        let e114 = {
                                                                            let l74 = *base.add(8).cast::<i32>();
                                                                            let l75 = i32::from(*base.add(12).cast::<u8>());
                                                                            (
                                                                                l74 as u32,
                                                                                match l75 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l76 = *base.add(16).cast::<i32>();
                                                                                            l76
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                },
                                                                            )
                                                                        };
                                                                        V114::VariantValue(e114)
                                                                    }
                                                                    2 => {
                                                                        let e114 = {
                                                                            let l77 = *base.add(8).cast::<i32>();
                                                                            l77 as u32
                                                                        };
                                                                        V114::EnumValue(e114)
                                                                    }
                                                                    3 => {
                                                                        let e114 = {
                                                                            let l78 = *base.add(8).cast::<*mut u8>();
                                                                            let l79 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base81 = l78;
                                                                            let len81 = l79;
                                                                            let mut result81 = _rt::Vec::with_capacity(len81);
                                                                            for i in 0..len81 {
                                                                                let base = base81.add(i * 1);
                                                                                let e81 = {
                                                                                    let l80 = i32::from(*base.add(0).cast::<u8>());
                                                                                    _rt::bool_lift(l80 as u8)
                                                                                };
                                                                                result81.push(e81);
                                                                            }
                                                                            _rt::cabi_dealloc(base81, len81 * 1, 1);
                                                                            result81
                                                                        };
                                                                        V114::FlagsValue(e114)
                                                                    }
                                                                    4 => {
                                                                        let e114 = {
                                                                            let l82 = *base.add(8).cast::<*mut u8>();
                                                                            let l83 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len84 = l83;
                                                                            _rt::Vec::from_raw_parts(l82.cast(), len84, len84)
                                                                        };
                                                                        V114::TupleValue(e114)
                                                                    }
                                                                    5 => {
                                                                        let e114 = {
                                                                            let l85 = *base.add(8).cast::<*mut u8>();
                                                                            let l86 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len87 = l86;
                                                                            _rt::Vec::from_raw_parts(l85.cast(), len87, len87)
                                                                        };
                                                                        V114::ListValue(e114)
                                                                    }
                                                                    6 => {
                                                                        let e114 = {
                                                                            let l88 = i32::from(*base.add(8).cast::<u8>());
                                                                            match l88 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l89 = *base.add(12).cast::<i32>();
                                                                                        l89
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            }
                                                                        };
                                                                        V114::OptionValue(e114)
                                                                    }
                                                                    7 => {
                                                                        let e114 = {
                                                                            let l90 = i32::from(*base.add(8).cast::<u8>());
                                                                            match l90 {
                                                                                0 => {
                                                                                    let e = {
                                                                                        let l91 = i32::from(*base.add(12).cast::<u8>());
                                                                                        match l91 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l92 = *base.add(16).cast::<i32>();
                                                                                                    l92
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        }
                                                                                    };
                                                                                    Ok(e)
                                                                                }
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l93 = i32::from(*base.add(12).cast::<u8>());
                                                                                        match l93 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l94 = *base.add(16).cast::<i32>();
                                                                                                    l94
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        }
                                                                                    };
                                                                                    Err(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            }
                                                                        };
                                                                        V114::ResultValue(e114)
                                                                    }
                                                                    8 => {
                                                                        let e114 = {
                                                                            let l95 = i32::from(*base.add(8).cast::<u8>());
                                                                            l95 as u8
                                                                        };
                                                                        V114::PrimU8(e114)
                                                                    }
                                                                    9 => {
                                                                        let e114 = {
                                                                            let l96 = i32::from(*base.add(8).cast::<u16>());
                                                                            l96 as u16
                                                                        };
                                                                        V114::PrimU16(e114)
                                                                    }
                                                                    10 => {
                                                                        let e114 = {
                                                                            let l97 = *base.add(8).cast::<i32>();
                                                                            l97 as u32
                                                                        };
                                                                        V114::PrimU32(e114)
                                                                    }
                                                                    11 => {
                                                                        let e114 = {
                                                                            let l98 = *base.add(8).cast::<i64>();
                                                                            l98 as u64
                                                                        };
                                                                        V114::PrimU64(e114)
                                                                    }
                                                                    12 => {
                                                                        let e114 = {
                                                                            let l99 = i32::from(*base.add(8).cast::<i8>());
                                                                            l99 as i8
                                                                        };
                                                                        V114::PrimS8(e114)
                                                                    }
                                                                    13 => {
                                                                        let e114 = {
                                                                            let l100 = i32::from(*base.add(8).cast::<i16>());
                                                                            l100 as i16
                                                                        };
                                                                        V114::PrimS16(e114)
                                                                    }
                                                                    14 => {
                                                                        let e114 = {
                                                                            let l101 = *base.add(8).cast::<i32>();
                                                                            l101
                                                                        };
                                                                        V114::PrimS32(e114)
                                                                    }
                                                                    15 => {
                                                                        let e114 = {
                                                                            let l102 = *base.add(8).cast::<i64>();
                                                                            l102
                                                                        };
                                                                        V114::PrimS64(e114)
                                                                    }
                                                                    16 => {
                                                                        let e114 = {
                                                                            let l103 = *base.add(8).cast::<f32>();
                                                                            l103
                                                                        };
                                                                        V114::PrimFloat32(e114)
                                                                    }
                                                                    17 => {
                                                                        let e114 = {
                                                                            let l104 = *base.add(8).cast::<f64>();
                                                                            l104
                                                                        };
                                                                        V114::PrimFloat64(e114)
                                                                    }
                                                                    18 => {
                                                                        let e114 = {
                                                                            let l105 = *base.add(8).cast::<i32>();
                                                                            _rt::char_lift(l105 as u32)
                                                                        };
                                                                        V114::PrimChar(e114)
                                                                    }
                                                                    19 => {
                                                                        let e114 = {
                                                                            let l106 = i32::from(*base.add(8).cast::<u8>());
                                                                            _rt::bool_lift(l106 as u8)
                                                                        };
                                                                        V114::PrimBool(e114)
                                                                    }
                                                                    20 => {
                                                                        let e114 = {
                                                                            let l107 = *base.add(8).cast::<*mut u8>();
                                                                            let l108 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len109 = l108;
                                                                            let bytes109 = _rt::Vec::from_raw_parts(
                                                                                l107.cast(),
                                                                                len109,
                                                                                len109,
                                                                            );
                                                                            _rt::string_lift(bytes109)
                                                                        };
                                                                        V114::PrimString(e114)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                        let e114 = {
                                                                            let l110 = *base.add(8).cast::<*mut u8>();
                                                                            let l111 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len112 = l111;
                                                                            let bytes112 = _rt::Vec::from_raw_parts(
                                                                                l110.cast(),
                                                                                len112,
                                                                                len112,
                                                                            );
                                                                            let l113 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i64>();
                                                                            (
                                                                                super::super::super::golem::rpc::types::Uri {
                                                                                    value: _rt::string_lift(bytes112),
                                                                                },
                                                                                l113 as u64,
                                                                            )
                                                                        };
                                                                        V114::Handle(e114)
                                                                    }
                                                                };
                                                                v114
                                                            };
                                                            result115.push(e115);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base115,
                                                            len115 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                            8,
                                                        );
                                                        let l116 = *base
                                                            .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l117 = *base
                                                            .add(32 + 5 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base163 = l116;
                                                        let len163 = l117;
                                                        let mut result163 = _rt::Vec::with_capacity(len163);
                                                        for i in 0..len163 {
                                                            let base = base163
                                                                .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                            let e163 = {
                                                                let l118 = i32::from(*base.add(0).cast::<u8>());
                                                                use super::super::super::golem::rpc::types::WitNode as V162;
                                                                let v162 = match l118 {
                                                                    0 => {
                                                                        let e162 = {
                                                                            let l119 = *base.add(8).cast::<*mut u8>();
                                                                            let l120 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len121 = l120;
                                                                            _rt::Vec::from_raw_parts(l119.cast(), len121, len121)
                                                                        };
                                                                        V162::RecordValue(e162)
                                                                    }
                                                                    1 => {
                                                                        let e162 = {
                                                                            let l122 = *base.add(8).cast::<i32>();
                                                                            let l123 = i32::from(*base.add(12).cast::<u8>());
                                                                            (
                                                                                l122 as u32,
                                                                                match l123 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l124 = *base.add(16).cast::<i32>();
                                                                                            l124
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                },
                                                                            )
                                                                        };
                                                                        V162::VariantValue(e162)
                                                                    }
                                                                    2 => {
                                                                        let e162 = {
                                                                            let l125 = *base.add(8).cast::<i32>();
                                                                            l125 as u32
                                                                        };
                                                                        V162::EnumValue(e162)
                                                                    }
                                                                    3 => {
                                                                        let e162 = {
                                                                            let l126 = *base.add(8).cast::<*mut u8>();
                                                                            let l127 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base129 = l126;
                                                                            let len129 = l127;
                                                                            let mut result129 = _rt::Vec::with_capacity(len129);
                                                                            for i in 0..len129 {
                                                                                let base = base129.add(i * 1);
                                                                                let e129 = {
                                                                                    let l128 = i32::from(*base.add(0).cast::<u8>());
                                                                                    _rt::bool_lift(l128 as u8)
                                                                                };
                                                                                result129.push(e129);
                                                                            }
                                                                            _rt::cabi_dealloc(base129, len129 * 1, 1);
                                                                            result129
                                                                        };
                                                                        V162::FlagsValue(e162)
                                                                    }
                                                                    4 => {
                                                                        let e162 = {
                                                                            let l130 = *base.add(8).cast::<*mut u8>();
                                                                            let l131 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len132 = l131;
                                                                            _rt::Vec::from_raw_parts(l130.cast(), len132, len132)
                                                                        };
                                                                        V162::TupleValue(e162)
                                                                    }
                                                                    5 => {
                                                                        let e162 = {
                                                                            let l133 = *base.add(8).cast::<*mut u8>();
                                                                            let l134 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len135 = l134;
                                                                            _rt::Vec::from_raw_parts(l133.cast(), len135, len135)
                                                                        };
                                                                        V162::ListValue(e162)
                                                                    }
                                                                    6 => {
                                                                        let e162 = {
                                                                            let l136 = i32::from(*base.add(8).cast::<u8>());
                                                                            match l136 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l137 = *base.add(12).cast::<i32>();
                                                                                        l137
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            }
                                                                        };
                                                                        V162::OptionValue(e162)
                                                                    }
                                                                    7 => {
                                                                        let e162 = {
                                                                            let l138 = i32::from(*base.add(8).cast::<u8>());
                                                                            match l138 {
                                                                                0 => {
                                                                                    let e = {
                                                                                        let l139 = i32::from(*base.add(12).cast::<u8>());
                                                                                        match l139 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l140 = *base.add(16).cast::<i32>();
                                                                                                    l140
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        }
                                                                                    };
                                                                                    Ok(e)
                                                                                }
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l141 = i32::from(*base.add(12).cast::<u8>());
                                                                                        match l141 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l142 = *base.add(16).cast::<i32>();
                                                                                                    l142
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        }
                                                                                    };
                                                                                    Err(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            }
                                                                        };
                                                                        V162::ResultValue(e162)
                                                                    }
                                                                    8 => {
                                                                        let e162 = {
                                                                            let l143 = i32::from(*base.add(8).cast::<u8>());
                                                                            l143 as u8
                                                                        };
                                                                        V162::PrimU8(e162)
                                                                    }
                                                                    9 => {
                                                                        let e162 = {
                                                                            let l144 = i32::from(*base.add(8).cast::<u16>());
                                                                            l144 as u16
                                                                        };
                                                                        V162::PrimU16(e162)
                                                                    }
                                                                    10 => {
                                                                        let e162 = {
                                                                            let l145 = *base.add(8).cast::<i32>();
                                                                            l145 as u32
                                                                        };
                                                                        V162::PrimU32(e162)
                                                                    }
                                                                    11 => {
                                                                        let e162 = {
                                                                            let l146 = *base.add(8).cast::<i64>();
                                                                            l146 as u64
                                                                        };
                                                                        V162::PrimU64(e162)
                                                                    }
                                                                    12 => {
                                                                        let e162 = {
                                                                            let l147 = i32::from(*base.add(8).cast::<i8>());
                                                                            l147 as i8
                                                                        };
                                                                        V162::PrimS8(e162)
                                                                    }
                                                                    13 => {
                                                                        let e162 = {
                                                                            let l148 = i32::from(*base.add(8).cast::<i16>());
                                                                            l148 as i16
                                                                        };
                                                                        V162::PrimS16(e162)
                                                                    }
                                                                    14 => {
                                                                        let e162 = {
                                                                            let l149 = *base.add(8).cast::<i32>();
                                                                            l149
                                                                        };
                                                                        V162::PrimS32(e162)
                                                                    }
                                                                    15 => {
                                                                        let e162 = {
                                                                            let l150 = *base.add(8).cast::<i64>();
                                                                            l150
                                                                        };
                                                                        V162::PrimS64(e162)
                                                                    }
                                                                    16 => {
                                                                        let e162 = {
                                                                            let l151 = *base.add(8).cast::<f32>();
                                                                            l151
                                                                        };
                                                                        V162::PrimFloat32(e162)
                                                                    }
                                                                    17 => {
                                                                        let e162 = {
                                                                            let l152 = *base.add(8).cast::<f64>();
                                                                            l152
                                                                        };
                                                                        V162::PrimFloat64(e162)
                                                                    }
                                                                    18 => {
                                                                        let e162 = {
                                                                            let l153 = *base.add(8).cast::<i32>();
                                                                            _rt::char_lift(l153 as u32)
                                                                        };
                                                                        V162::PrimChar(e162)
                                                                    }
                                                                    19 => {
                                                                        let e162 = {
                                                                            let l154 = i32::from(*base.add(8).cast::<u8>());
                                                                            _rt::bool_lift(l154 as u8)
                                                                        };
                                                                        V162::PrimBool(e162)
                                                                    }
                                                                    20 => {
                                                                        let e162 = {
                                                                            let l155 = *base.add(8).cast::<*mut u8>();
                                                                            let l156 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len157 = l156;
                                                                            let bytes157 = _rt::Vec::from_raw_parts(
                                                                                l155.cast(),
                                                                                len157,
                                                                                len157,
                                                                            );
                                                                            _rt::string_lift(bytes157)
                                                                        };
                                                                        V162::PrimString(e162)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                        let e162 = {
                                                                            let l158 = *base.add(8).cast::<*mut u8>();
                                                                            let l159 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len160 = l159;
                                                                            let bytes160 = _rt::Vec::from_raw_parts(
                                                                                l158.cast(),
                                                                                len160,
                                                                                len160,
                                                                            );
                                                                            let l161 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i64>();
                                                                            (
                                                                                super::super::super::golem::rpc::types::Uri {
                                                                                    value: _rt::string_lift(bytes160),
                                                                                },
                                                                                l161 as u64,
                                                                            )
                                                                        };
                                                                        V162::Handle(e162)
                                                                    }
                                                                };
                                                                v162
                                                            };
                                                            result163.push(e163);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base163,
                                                            len163 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                            8,
                                                        );
                                                        let l164 = i32::from(
                                                            *base
                                                                .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let v169 = match l164 {
                                                            0 => WrappedFunctionType::ReadLocal,
                                                            1 => WrappedFunctionType::WriteLocal,
                                                            2 => WrappedFunctionType::ReadRemote,
                                                            3 => WrappedFunctionType::WriteRemote,
                                                            4 => {
                                                                let e169 = {
                                                                    let l165 = i32::from(
                                                                        *base
                                                                            .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l165 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l166 = *base
                                                                                    .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<i64>();
                                                                                l166 as u64
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                WrappedFunctionType::WriteRemoteBatched(e169)
                                                            }
                                                            n => {
                                                                debug_assert_eq!(n, 5, "invalid enum discriminant");
                                                                let e169 = {
                                                                    let l167 = i32::from(
                                                                        *base
                                                                            .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l167 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l168 = *base
                                                                                    .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<i64>();
                                                                                l168 as u64
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                WrappedFunctionType::WriteRemoteTransaction(e169)
                                                            }
                                                        };
                                                        ImportedFunctionInvokedParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l63 as u64,
                                                                nanoseconds: l64 as u32,
                                                            },
                                                            function_name: _rt::string_lift(bytes67),
                                                            request: super::super::super::golem::rpc::types::WitValue {
                                                                nodes: result115,
                                                            },
                                                            response: super::super::super::golem::rpc::types::WitValue {
                                                                nodes: result163,
                                                            },
                                                            wrapped_function_type: v169,
                                                        }
                                                    };
                                                    OplogEntry::ImportedFunctionInvoked(e603)
                                                }
                                                2 => {
                                                    let e603 = {
                                                        let l170 = *base.add(16).cast::<i64>();
                                                        let l171 = *base.add(24).cast::<i32>();
                                                        let l172 = *base.add(32).cast::<*mut u8>();
                                                        let l173 = *base
                                                            .add(32 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len174 = l173;
                                                        let bytes174 = _rt::Vec::from_raw_parts(
                                                            l172.cast(),
                                                            len174,
                                                            len174,
                                                        );
                                                        let l175 = *base
                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l176 = *base
                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base225 = l175;
                                                        let len225 = l176;
                                                        let mut result225 = _rt::Vec::with_capacity(len225);
                                                        for i in 0..len225 {
                                                            let base = base225
                                                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                            let e225 = {
                                                                let l177 = *base.add(0).cast::<*mut u8>();
                                                                let l178 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let base224 = l177;
                                                                let len224 = l178;
                                                                let mut result224 = _rt::Vec::with_capacity(len224);
                                                                for i in 0..len224 {
                                                                    let base = base224
                                                                        .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                    let e224 = {
                                                                        let l179 = i32::from(*base.add(0).cast::<u8>());
                                                                        use super::super::super::golem::rpc::types::WitNode as V223;
                                                                        let v223 = match l179 {
                                                                            0 => {
                                                                                let e223 = {
                                                                                    let l180 = *base.add(8).cast::<*mut u8>();
                                                                                    let l181 = *base
                                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len182 = l181;
                                                                                    _rt::Vec::from_raw_parts(l180.cast(), len182, len182)
                                                                                };
                                                                                V223::RecordValue(e223)
                                                                            }
                                                                            1 => {
                                                                                let e223 = {
                                                                                    let l183 = *base.add(8).cast::<i32>();
                                                                                    let l184 = i32::from(*base.add(12).cast::<u8>());
                                                                                    (
                                                                                        l183 as u32,
                                                                                        match l184 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l185 = *base.add(16).cast::<i32>();
                                                                                                    l185
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        },
                                                                                    )
                                                                                };
                                                                                V223::VariantValue(e223)
                                                                            }
                                                                            2 => {
                                                                                let e223 = {
                                                                                    let l186 = *base.add(8).cast::<i32>();
                                                                                    l186 as u32
                                                                                };
                                                                                V223::EnumValue(e223)
                                                                            }
                                                                            3 => {
                                                                                let e223 = {
                                                                                    let l187 = *base.add(8).cast::<*mut u8>();
                                                                                    let l188 = *base
                                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base190 = l187;
                                                                                    let len190 = l188;
                                                                                    let mut result190 = _rt::Vec::with_capacity(len190);
                                                                                    for i in 0..len190 {
                                                                                        let base = base190.add(i * 1);
                                                                                        let e190 = {
                                                                                            let l189 = i32::from(*base.add(0).cast::<u8>());
                                                                                            _rt::bool_lift(l189 as u8)
                                                                                        };
                                                                                        result190.push(e190);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base190, len190 * 1, 1);
                                                                                    result190
                                                                                };
                                                                                V223::FlagsValue(e223)
                                                                            }
                                                                            4 => {
                                                                                let e223 = {
                                                                                    let l191 = *base.add(8).cast::<*mut u8>();
                                                                                    let l192 = *base
                                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len193 = l192;
                                                                                    _rt::Vec::from_raw_parts(l191.cast(), len193, len193)
                                                                                };
                                                                                V223::TupleValue(e223)
                                                                            }
                                                                            5 => {
                                                                                let e223 = {
                                                                                    let l194 = *base.add(8).cast::<*mut u8>();
                                                                                    let l195 = *base
                                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len196 = l195;
                                                                                    _rt::Vec::from_raw_parts(l194.cast(), len196, len196)
                                                                                };
                                                                                V223::ListValue(e223)
                                                                            }
                                                                            6 => {
                                                                                let e223 = {
                                                                                    let l197 = i32::from(*base.add(8).cast::<u8>());
                                                                                    match l197 {
                                                                                        0 => None,
                                                                                        1 => {
                                                                                            let e = {
                                                                                                let l198 = *base.add(12).cast::<i32>();
                                                                                                l198
                                                                                            };
                                                                                            Some(e)
                                                                                        }
                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                    }
                                                                                };
                                                                                V223::OptionValue(e223)
                                                                            }
                                                                            7 => {
                                                                                let e223 = {
                                                                                    let l199 = i32::from(*base.add(8).cast::<u8>());
                                                                                    match l199 {
                                                                                        0 => {
                                                                                            let e = {
                                                                                                let l200 = i32::from(*base.add(12).cast::<u8>());
                                                                                                match l200 {
                                                                                                    0 => None,
                                                                                                    1 => {
                                                                                                        let e = {
                                                                                                            let l201 = *base.add(16).cast::<i32>();
                                                                                                            l201
                                                                                                        };
                                                                                                        Some(e)
                                                                                                    }
                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                }
                                                                                            };
                                                                                            Ok(e)
                                                                                        }
                                                                                        1 => {
                                                                                            let e = {
                                                                                                let l202 = i32::from(*base.add(12).cast::<u8>());
                                                                                                match l202 {
                                                                                                    0 => None,
                                                                                                    1 => {
                                                                                                        let e = {
                                                                                                            let l203 = *base.add(16).cast::<i32>();
                                                                                                            l203
                                                                                                        };
                                                                                                        Some(e)
                                                                                                    }
                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                }
                                                                                            };
                                                                                            Err(e)
                                                                                        }
                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                    }
                                                                                };
                                                                                V223::ResultValue(e223)
                                                                            }
                                                                            8 => {
                                                                                let e223 = {
                                                                                    let l204 = i32::from(*base.add(8).cast::<u8>());
                                                                                    l204 as u8
                                                                                };
                                                                                V223::PrimU8(e223)
                                                                            }
                                                                            9 => {
                                                                                let e223 = {
                                                                                    let l205 = i32::from(*base.add(8).cast::<u16>());
                                                                                    l205 as u16
                                                                                };
                                                                                V223::PrimU16(e223)
                                                                            }
                                                                            10 => {
                                                                                let e223 = {
                                                                                    let l206 = *base.add(8).cast::<i32>();
                                                                                    l206 as u32
                                                                                };
                                                                                V223::PrimU32(e223)
                                                                            }
                                                                            11 => {
                                                                                let e223 = {
                                                                                    let l207 = *base.add(8).cast::<i64>();
                                                                                    l207 as u64
                                                                                };
                                                                                V223::PrimU64(e223)
                                                                            }
                                                                            12 => {
                                                                                let e223 = {
                                                                                    let l208 = i32::from(*base.add(8).cast::<i8>());
                                                                                    l208 as i8
                                                                                };
                                                                                V223::PrimS8(e223)
                                                                            }
                                                                            13 => {
                                                                                let e223 = {
                                                                                    let l209 = i32::from(*base.add(8).cast::<i16>());
                                                                                    l209 as i16
                                                                                };
                                                                                V223::PrimS16(e223)
                                                                            }
                                                                            14 => {
                                                                                let e223 = {
                                                                                    let l210 = *base.add(8).cast::<i32>();
                                                                                    l210
                                                                                };
                                                                                V223::PrimS32(e223)
                                                                            }
                                                                            15 => {
                                                                                let e223 = {
                                                                                    let l211 = *base.add(8).cast::<i64>();
                                                                                    l211
                                                                                };
                                                                                V223::PrimS64(e223)
                                                                            }
                                                                            16 => {
                                                                                let e223 = {
                                                                                    let l212 = *base.add(8).cast::<f32>();
                                                                                    l212
                                                                                };
                                                                                V223::PrimFloat32(e223)
                                                                            }
                                                                            17 => {
                                                                                let e223 = {
                                                                                    let l213 = *base.add(8).cast::<f64>();
                                                                                    l213
                                                                                };
                                                                                V223::PrimFloat64(e223)
                                                                            }
                                                                            18 => {
                                                                                let e223 = {
                                                                                    let l214 = *base.add(8).cast::<i32>();
                                                                                    _rt::char_lift(l214 as u32)
                                                                                };
                                                                                V223::PrimChar(e223)
                                                                            }
                                                                            19 => {
                                                                                let e223 = {
                                                                                    let l215 = i32::from(*base.add(8).cast::<u8>());
                                                                                    _rt::bool_lift(l215 as u8)
                                                                                };
                                                                                V223::PrimBool(e223)
                                                                            }
                                                                            20 => {
                                                                                let e223 = {
                                                                                    let l216 = *base.add(8).cast::<*mut u8>();
                                                                                    let l217 = *base
                                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len218 = l217;
                                                                                    let bytes218 = _rt::Vec::from_raw_parts(
                                                                                        l216.cast(),
                                                                                        len218,
                                                                                        len218,
                                                                                    );
                                                                                    _rt::string_lift(bytes218)
                                                                                };
                                                                                V223::PrimString(e223)
                                                                            }
                                                                            n => {
                                                                                debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                                let e223 = {
                                                                                    let l219 = *base.add(8).cast::<*mut u8>();
                                                                                    let l220 = *base
                                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len221 = l220;
                                                                                    let bytes221 = _rt::Vec::from_raw_parts(
                                                                                        l219.cast(),
                                                                                        len221,
                                                                                        len221,
                                                                                    );
                                                                                    let l222 = *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i64>();
                                                                                    (
                                                                                        super::super::super::golem::rpc::types::Uri {
                                                                                            value: _rt::string_lift(bytes221),
                                                                                        },
                                                                                        l222 as u64,
                                                                                    )
                                                                                };
                                                                                V223::Handle(e223)
                                                                            }
                                                                        };
                                                                        v223
                                                                    };
                                                                    result224.push(e224);
                                                                }
                                                                _rt::cabi_dealloc(
                                                                    base224,
                                                                    len224 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                    8,
                                                                );
                                                                super::super::super::golem::rpc::types::WitValue {
                                                                    nodes: result224,
                                                                }
                                                            };
                                                            result225.push(e225);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base225,
                                                            len225 * (2 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        let l226 = *base
                                                            .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l227 = *base
                                                            .add(32 + 5 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len228 = l227;
                                                        let bytes228 = _rt::Vec::from_raw_parts(
                                                            l226.cast(),
                                                            len228,
                                                            len228,
                                                        );
                                                        let l229 = *base
                                                            .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l230 = *base
                                                            .add(32 + 7 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len231 = l230;
                                                        let bytes231 = _rt::Vec::from_raw_parts(
                                                            l229.cast(),
                                                            len231,
                                                            len231,
                                                        );
                                                        let l232 = *base
                                                            .add(32 + 8 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l233 = *base
                                                            .add(32 + 9 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base237 = l232;
                                                        let len237 = l233;
                                                        let mut result237 = _rt::Vec::with_capacity(len237);
                                                        for i in 0..len237 {
                                                            let base = base237
                                                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                            let e237 = {
                                                                let l234 = *base.add(0).cast::<*mut u8>();
                                                                let l235 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len236 = l235;
                                                                let bytes236 = _rt::Vec::from_raw_parts(
                                                                    l234.cast(),
                                                                    len236,
                                                                    len236,
                                                                );
                                                                _rt::string_lift(bytes236)
                                                            };
                                                            result237.push(e237);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base237,
                                                            len237 * (2 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        let l238 = *base
                                                            .add(32 + 10 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l239 = *base
                                                            .add(32 + 11 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base271 = l238;
                                                        let len271 = l239;
                                                        let mut result271 = _rt::Vec::with_capacity(len271);
                                                        for i in 0..len271 {
                                                            let base = base271
                                                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                            let e271 = {
                                                                let l240 = *base.add(0).cast::<*mut u8>();
                                                                let l241 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let base270 = l240;
                                                                let len270 = l241;
                                                                let mut result270 = _rt::Vec::with_capacity(len270);
                                                                for i in 0..len270 {
                                                                    let base = base270
                                                                        .add(i * (56 + 6 * ::core::mem::size_of::<*const u8>()));
                                                                    let e270 = {
                                                                        let l242 = i32::from(*base.add(0).cast::<u8>());
                                                                        let v269 = match l242 {
                                                                            0 => {
                                                                                let e269 = {
                                                                                    let l243 = *base.add(8).cast::<*mut u8>();
                                                                                    let l244 = *base
                                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len245 = l244;
                                                                                    let bytes245 = _rt::Vec::from_raw_parts(
                                                                                        l243.cast(),
                                                                                        len245,
                                                                                        len245,
                                                                                    );
                                                                                    let l246 = *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i64>();
                                                                                    let l247 = *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>();
                                                                                    let l248 = i32::from(
                                                                                        *base
                                                                                            .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<u8>(),
                                                                                    );
                                                                                    let l252 = i32::from(
                                                                                        *base
                                                                                            .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<u8>(),
                                                                                    );
                                                                                    let l254 = *base
                                                                                        .add(48 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l255 = *base
                                                                                        .add(48 + 5 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base264 = l254;
                                                                                    let len264 = l255;
                                                                                    let mut result264 = _rt::Vec::with_capacity(len264);
                                                                                    for i in 0..len264 {
                                                                                        let base = base264
                                                                                            .add(i * (5 * ::core::mem::size_of::<*const u8>()));
                                                                                        let e264 = {
                                                                                            let l256 = *base.add(0).cast::<*mut u8>();
                                                                                            let l257 = *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len258 = l257;
                                                                                            let bytes258 = _rt::Vec::from_raw_parts(
                                                                                                l256.cast(),
                                                                                                len258,
                                                                                                len258,
                                                                                            );
                                                                                            let l259 = i32::from(
                                                                                                *base
                                                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                    .cast::<u8>(),
                                                                                            );
                                                                                            use super::super::super::golem::api::context::AttributeValue as V263;
                                                                                            let v263 = match l259 {
                                                                                                n => {
                                                                                                    debug_assert_eq!(n, 0, "invalid enum discriminant");
                                                                                                    let e263 = {
                                                                                                        let l260 = *base
                                                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                                            .cast::<*mut u8>();
                                                                                                        let l261 = *base
                                                                                                            .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                                            .cast::<usize>();
                                                                                                        let len262 = l261;
                                                                                                        let bytes262 = _rt::Vec::from_raw_parts(
                                                                                                            l260.cast(),
                                                                                                            len262,
                                                                                                            len262,
                                                                                                        );
                                                                                                        _rt::string_lift(bytes262)
                                                                                                    };
                                                                                                    V263::String(e263)
                                                                                                }
                                                                                            };
                                                                                            super::super::super::golem::api::context::Attribute {
                                                                                                key: _rt::string_lift(bytes258),
                                                                                                value: v263,
                                                                                            }
                                                                                        };
                                                                                        result264.push(e264);
                                                                                    }
                                                                                    _rt::cabi_dealloc(
                                                                                        base264,
                                                                                        len264 * (5 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                    let l265 = i32::from(
                                                                                        *base
                                                                                            .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<u8>(),
                                                                                    );
                                                                                    LocalSpanData {
                                                                                        span_id: _rt::string_lift(bytes245),
                                                                                        start: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                                            seconds: l246 as u64,
                                                                                            nanoseconds: l247 as u32,
                                                                                        },
                                                                                        parent: match l248 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l249 = *base
                                                                                                        .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                                        .cast::<*mut u8>();
                                                                                                    let l250 = *base
                                                                                                        .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                                        .cast::<usize>();
                                                                                                    let len251 = l250;
                                                                                                    let bytes251 = _rt::Vec::from_raw_parts(
                                                                                                        l249.cast(),
                                                                                                        len251,
                                                                                                        len251,
                                                                                                    );
                                                                                                    _rt::string_lift(bytes251)
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        },
                                                                                        linked_context: match l252 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l253 = *base
                                                                                                        .add(40 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                                        .cast::<i64>();
                                                                                                    l253 as u64
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        },
                                                                                        attributes: result264,
                                                                                        inherited: _rt::bool_lift(l265 as u8),
                                                                                    }
                                                                                };
                                                                                SpanData::LocalSpan(e269)
                                                                            }
                                                                            n => {
                                                                                debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                                                let e269 = {
                                                                                    let l266 = *base.add(8).cast::<*mut u8>();
                                                                                    let l267 = *base
                                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len268 = l267;
                                                                                    let bytes268 = _rt::Vec::from_raw_parts(
                                                                                        l266.cast(),
                                                                                        len268,
                                                                                        len268,
                                                                                    );
                                                                                    ExternalSpanData {
                                                                                        span_id: _rt::string_lift(bytes268),
                                                                                    }
                                                                                };
                                                                                SpanData::ExternalSpan(e269)
                                                                            }
                                                                        };
                                                                        v269
                                                                    };
                                                                    result270.push(e270);
                                                                }
                                                                _rt::cabi_dealloc(
                                                                    base270,
                                                                    len270 * (56 + 6 * ::core::mem::size_of::<*const u8>()),
                                                                    8,
                                                                );
                                                                result270
                                                            };
                                                            result271.push(e271);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base271,
                                                            len271 * (2 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        ExportedFunctionInvokedParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l170 as u64,
                                                                nanoseconds: l171 as u32,
                                                            },
                                                            function_name: _rt::string_lift(bytes174),
                                                            request: result225,
                                                            idempotency_key: _rt::string_lift(bytes228),
                                                            trace_id: _rt::string_lift(bytes231),
                                                            trace_states: result237,
                                                            invocation_context: result271,
                                                        }
                                                    };
                                                    OplogEntry::ExportedFunctionInvoked(e603)
                                                }
                                                3 => {
                                                    let e603 = {
                                                        let l272 = *base.add(16).cast::<i64>();
                                                        let l273 = *base.add(24).cast::<i32>();
                                                        let l274 = i32::from(*base.add(32).cast::<u8>());
                                                        let l323 = *base
                                                            .add(40 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i64>();
                                                        ExportedFunctionCompletedParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l272 as u64,
                                                                nanoseconds: l273 as u32,
                                                            },
                                                            response: match l274 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l275 = *base
                                                                            .add(32 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l276 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let base322 = l275;
                                                                        let len322 = l276;
                                                                        let mut result322 = _rt::Vec::with_capacity(len322);
                                                                        for i in 0..len322 {
                                                                            let base = base322
                                                                                .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                            let e322 = {
                                                                                let l277 = i32::from(*base.add(0).cast::<u8>());
                                                                                use super::super::super::golem::rpc::types::WitNode as V321;
                                                                                let v321 = match l277 {
                                                                                    0 => {
                                                                                        let e321 = {
                                                                                            let l278 = *base.add(8).cast::<*mut u8>();
                                                                                            let l279 = *base
                                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len280 = l279;
                                                                                            _rt::Vec::from_raw_parts(l278.cast(), len280, len280)
                                                                                        };
                                                                                        V321::RecordValue(e321)
                                                                                    }
                                                                                    1 => {
                                                                                        let e321 = {
                                                                                            let l281 = *base.add(8).cast::<i32>();
                                                                                            let l282 = i32::from(*base.add(12).cast::<u8>());
                                                                                            (
                                                                                                l281 as u32,
                                                                                                match l282 {
                                                                                                    0 => None,
                                                                                                    1 => {
                                                                                                        let e = {
                                                                                                            let l283 = *base.add(16).cast::<i32>();
                                                                                                            l283
                                                                                                        };
                                                                                                        Some(e)
                                                                                                    }
                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                },
                                                                                            )
                                                                                        };
                                                                                        V321::VariantValue(e321)
                                                                                    }
                                                                                    2 => {
                                                                                        let e321 = {
                                                                                            let l284 = *base.add(8).cast::<i32>();
                                                                                            l284 as u32
                                                                                        };
                                                                                        V321::EnumValue(e321)
                                                                                    }
                                                                                    3 => {
                                                                                        let e321 = {
                                                                                            let l285 = *base.add(8).cast::<*mut u8>();
                                                                                            let l286 = *base
                                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let base288 = l285;
                                                                                            let len288 = l286;
                                                                                            let mut result288 = _rt::Vec::with_capacity(len288);
                                                                                            for i in 0..len288 {
                                                                                                let base = base288.add(i * 1);
                                                                                                let e288 = {
                                                                                                    let l287 = i32::from(*base.add(0).cast::<u8>());
                                                                                                    _rt::bool_lift(l287 as u8)
                                                                                                };
                                                                                                result288.push(e288);
                                                                                            }
                                                                                            _rt::cabi_dealloc(base288, len288 * 1, 1);
                                                                                            result288
                                                                                        };
                                                                                        V321::FlagsValue(e321)
                                                                                    }
                                                                                    4 => {
                                                                                        let e321 = {
                                                                                            let l289 = *base.add(8).cast::<*mut u8>();
                                                                                            let l290 = *base
                                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len291 = l290;
                                                                                            _rt::Vec::from_raw_parts(l289.cast(), len291, len291)
                                                                                        };
                                                                                        V321::TupleValue(e321)
                                                                                    }
                                                                                    5 => {
                                                                                        let e321 = {
                                                                                            let l292 = *base.add(8).cast::<*mut u8>();
                                                                                            let l293 = *base
                                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len294 = l293;
                                                                                            _rt::Vec::from_raw_parts(l292.cast(), len294, len294)
                                                                                        };
                                                                                        V321::ListValue(e321)
                                                                                    }
                                                                                    6 => {
                                                                                        let e321 = {
                                                                                            let l295 = i32::from(*base.add(8).cast::<u8>());
                                                                                            match l295 {
                                                                                                0 => None,
                                                                                                1 => {
                                                                                                    let e = {
                                                                                                        let l296 = *base.add(12).cast::<i32>();
                                                                                                        l296
                                                                                                    };
                                                                                                    Some(e)
                                                                                                }
                                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                                            }
                                                                                        };
                                                                                        V321::OptionValue(e321)
                                                                                    }
                                                                                    7 => {
                                                                                        let e321 = {
                                                                                            let l297 = i32::from(*base.add(8).cast::<u8>());
                                                                                            match l297 {
                                                                                                0 => {
                                                                                                    let e = {
                                                                                                        let l298 = i32::from(*base.add(12).cast::<u8>());
                                                                                                        match l298 {
                                                                                                            0 => None,
                                                                                                            1 => {
                                                                                                                let e = {
                                                                                                                    let l299 = *base.add(16).cast::<i32>();
                                                                                                                    l299
                                                                                                                };
                                                                                                                Some(e)
                                                                                                            }
                                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                                        }
                                                                                                    };
                                                                                                    Ok(e)
                                                                                                }
                                                                                                1 => {
                                                                                                    let e = {
                                                                                                        let l300 = i32::from(*base.add(12).cast::<u8>());
                                                                                                        match l300 {
                                                                                                            0 => None,
                                                                                                            1 => {
                                                                                                                let e = {
                                                                                                                    let l301 = *base.add(16).cast::<i32>();
                                                                                                                    l301
                                                                                                                };
                                                                                                                Some(e)
                                                                                                            }
                                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                                        }
                                                                                                    };
                                                                                                    Err(e)
                                                                                                }
                                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                                            }
                                                                                        };
                                                                                        V321::ResultValue(e321)
                                                                                    }
                                                                                    8 => {
                                                                                        let e321 = {
                                                                                            let l302 = i32::from(*base.add(8).cast::<u8>());
                                                                                            l302 as u8
                                                                                        };
                                                                                        V321::PrimU8(e321)
                                                                                    }
                                                                                    9 => {
                                                                                        let e321 = {
                                                                                            let l303 = i32::from(*base.add(8).cast::<u16>());
                                                                                            l303 as u16
                                                                                        };
                                                                                        V321::PrimU16(e321)
                                                                                    }
                                                                                    10 => {
                                                                                        let e321 = {
                                                                                            let l304 = *base.add(8).cast::<i32>();
                                                                                            l304 as u32
                                                                                        };
                                                                                        V321::PrimU32(e321)
                                                                                    }
                                                                                    11 => {
                                                                                        let e321 = {
                                                                                            let l305 = *base.add(8).cast::<i64>();
                                                                                            l305 as u64
                                                                                        };
                                                                                        V321::PrimU64(e321)
                                                                                    }
                                                                                    12 => {
                                                                                        let e321 = {
                                                                                            let l306 = i32::from(*base.add(8).cast::<i8>());
                                                                                            l306 as i8
                                                                                        };
                                                                                        V321::PrimS8(e321)
                                                                                    }
                                                                                    13 => {
                                                                                        let e321 = {
                                                                                            let l307 = i32::from(*base.add(8).cast::<i16>());
                                                                                            l307 as i16
                                                                                        };
                                                                                        V321::PrimS16(e321)
                                                                                    }
                                                                                    14 => {
                                                                                        let e321 = {
                                                                                            let l308 = *base.add(8).cast::<i32>();
                                                                                            l308
                                                                                        };
                                                                                        V321::PrimS32(e321)
                                                                                    }
                                                                                    15 => {
                                                                                        let e321 = {
                                                                                            let l309 = *base.add(8).cast::<i64>();
                                                                                            l309
                                                                                        };
                                                                                        V321::PrimS64(e321)
                                                                                    }
                                                                                    16 => {
                                                                                        let e321 = {
                                                                                            let l310 = *base.add(8).cast::<f32>();
                                                                                            l310
                                                                                        };
                                                                                        V321::PrimFloat32(e321)
                                                                                    }
                                                                                    17 => {
                                                                                        let e321 = {
                                                                                            let l311 = *base.add(8).cast::<f64>();
                                                                                            l311
                                                                                        };
                                                                                        V321::PrimFloat64(e321)
                                                                                    }
                                                                                    18 => {
                                                                                        let e321 = {
                                                                                            let l312 = *base.add(8).cast::<i32>();
                                                                                            _rt::char_lift(l312 as u32)
                                                                                        };
                                                                                        V321::PrimChar(e321)
                                                                                    }
                                                                                    19 => {
                                                                                        let e321 = {
                                                                                            let l313 = i32::from(*base.add(8).cast::<u8>());
                                                                                            _rt::bool_lift(l313 as u8)
                                                                                        };
                                                                                        V321::PrimBool(e321)
                                                                                    }
                                                                                    20 => {
                                                                                        let e321 = {
                                                                                            let l314 = *base.add(8).cast::<*mut u8>();
                                                                                            let l315 = *base
                                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len316 = l315;
                                                                                            let bytes316 = _rt::Vec::from_raw_parts(
                                                                                                l314.cast(),
                                                                                                len316,
                                                                                                len316,
                                                                                            );
                                                                                            _rt::string_lift(bytes316)
                                                                                        };
                                                                                        V321::PrimString(e321)
                                                                                    }
                                                                                    n => {
                                                                                        debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                                        let e321 = {
                                                                                            let l317 = *base.add(8).cast::<*mut u8>();
                                                                                            let l318 = *base
                                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len319 = l318;
                                                                                            let bytes319 = _rt::Vec::from_raw_parts(
                                                                                                l317.cast(),
                                                                                                len319,
                                                                                                len319,
                                                                                            );
                                                                                            let l320 = *base
                                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<i64>();
                                                                                            (
                                                                                                super::super::super::golem::rpc::types::Uri {
                                                                                                    value: _rt::string_lift(bytes319),
                                                                                                },
                                                                                                l320 as u64,
                                                                                            )
                                                                                        };
                                                                                        V321::Handle(e321)
                                                                                    }
                                                                                };
                                                                                v321
                                                                            };
                                                                            result322.push(e322);
                                                                        }
                                                                        _rt::cabi_dealloc(
                                                                            base322,
                                                                            len322 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                            8,
                                                                        );
                                                                        super::super::super::golem::rpc::types::WitValue {
                                                                            nodes: result322,
                                                                        }
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            consumed_fuel: l323,
                                                        }
                                                    };
                                                    OplogEntry::ExportedFunctionCompleted(e603)
                                                }
                                                4 => {
                                                    let e603 = {
                                                        let l324 = *base.add(16).cast::<i64>();
                                                        let l325 = *base.add(24).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l324 as u64,
                                                            nanoseconds: l325 as u32,
                                                        }
                                                    };
                                                    OplogEntry::Suspend(e603)
                                                }
                                                5 => {
                                                    let e603 = {
                                                        let l326 = *base.add(16).cast::<i64>();
                                                        let l327 = *base.add(24).cast::<i32>();
                                                        let l328 = *base.add(32).cast::<*mut u8>();
                                                        let l329 = *base
                                                            .add(32 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len330 = l329;
                                                        let bytes330 = _rt::Vec::from_raw_parts(
                                                            l328.cast(),
                                                            len330,
                                                            len330,
                                                        );
                                                        ErrorParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l326 as u64,
                                                                nanoseconds: l327 as u32,
                                                            },
                                                            error: _rt::string_lift(bytes330),
                                                        }
                                                    };
                                                    OplogEntry::Error(e603)
                                                }
                                                6 => {
                                                    let e603 = {
                                                        let l331 = *base.add(16).cast::<i64>();
                                                        let l332 = *base.add(24).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l331 as u64,
                                                            nanoseconds: l332 as u32,
                                                        }
                                                    };
                                                    OplogEntry::NoOp(e603)
                                                }
                                                7 => {
                                                    let e603 = {
                                                        let l333 = *base.add(16).cast::<i64>();
                                                        let l334 = *base.add(24).cast::<i32>();
                                                        let l335 = *base.add(32).cast::<i64>();
                                                        let l336 = *base.add(40).cast::<i64>();
                                                        JumpParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l333 as u64,
                                                                nanoseconds: l334 as u32,
                                                            },
                                                            start: l335 as u64,
                                                            end: l336 as u64,
                                                        }
                                                    };
                                                    OplogEntry::Jump(e603)
                                                }
                                                8 => {
                                                    let e603 = {
                                                        let l337 = *base.add(16).cast::<i64>();
                                                        let l338 = *base.add(24).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l337 as u64,
                                                            nanoseconds: l338 as u32,
                                                        }
                                                    };
                                                    OplogEntry::Interrupted(e603)
                                                }
                                                9 => {
                                                    let e603 = {
                                                        let l339 = *base.add(16).cast::<i64>();
                                                        let l340 = *base.add(24).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l339 as u64,
                                                            nanoseconds: l340 as u32,
                                                        }
                                                    };
                                                    OplogEntry::Exited(e603)
                                                }
                                                10 => {
                                                    let e603 = {
                                                        let l341 = *base.add(16).cast::<i64>();
                                                        let l342 = *base.add(24).cast::<i32>();
                                                        let l343 = *base.add(32).cast::<i32>();
                                                        let l344 = *base.add(40).cast::<i64>();
                                                        let l345 = *base.add(48).cast::<i64>();
                                                        let l346 = *base.add(56).cast::<f64>();
                                                        let l347 = i32::from(*base.add(64).cast::<u8>());
                                                        ChangeRetryPolicyParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l341 as u64,
                                                                nanoseconds: l342 as u32,
                                                            },
                                                            retry_policy: super::super::super::golem::api::host::RetryPolicy {
                                                                max_attempts: l343 as u32,
                                                                min_delay: l344 as u64,
                                                                max_delay: l345 as u64,
                                                                multiplier: l346,
                                                                max_jitter_factor: match l347 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l348 = *base.add(72).cast::<f64>();
                                                                            l348
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                            },
                                                        }
                                                    };
                                                    OplogEntry::ChangeRetryPolicy(e603)
                                                }
                                                11 => {
                                                    let e603 = {
                                                        let l349 = *base.add(16).cast::<i64>();
                                                        let l350 = *base.add(24).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l349 as u64,
                                                            nanoseconds: l350 as u32,
                                                        }
                                                    };
                                                    OplogEntry::BeginAtomicRegion(e603)
                                                }
                                                12 => {
                                                    let e603 = {
                                                        let l351 = *base.add(16).cast::<i64>();
                                                        let l352 = *base.add(24).cast::<i32>();
                                                        let l353 = *base.add(32).cast::<i64>();
                                                        EndAtomicRegionParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l351 as u64,
                                                                nanoseconds: l352 as u32,
                                                            },
                                                            begin_index: l353 as u64,
                                                        }
                                                    };
                                                    OplogEntry::EndAtomicRegion(e603)
                                                }
                                                13 => {
                                                    let e603 = {
                                                        let l354 = *base.add(16).cast::<i64>();
                                                        let l355 = *base.add(24).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l354 as u64,
                                                            nanoseconds: l355 as u32,
                                                        }
                                                    };
                                                    OplogEntry::BeginRemoteWrite(e603)
                                                }
                                                14 => {
                                                    let e603 = {
                                                        let l356 = *base.add(16).cast::<i64>();
                                                        let l357 = *base.add(24).cast::<i32>();
                                                        let l358 = *base.add(32).cast::<i64>();
                                                        EndRemoteWriteParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l356 as u64,
                                                                nanoseconds: l357 as u32,
                                                            },
                                                            begin_index: l358 as u64,
                                                        }
                                                    };
                                                    OplogEntry::EndRemoteWrite(e603)
                                                }
                                                15 => {
                                                    let e603 = {
                                                        let l359 = *base.add(16).cast::<i64>();
                                                        let l360 = *base.add(24).cast::<i32>();
                                                        let l361 = i32::from(*base.add(32).cast::<u8>());
                                                        let v421 = match l361 {
                                                            0 => {
                                                                let e421 = {
                                                                    let l362 = *base.add(40).cast::<*mut u8>();
                                                                    let l363 = *base
                                                                        .add(40 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len364 = l363;
                                                                    let bytes364 = _rt::Vec::from_raw_parts(
                                                                        l362.cast(),
                                                                        len364,
                                                                        len364,
                                                                    );
                                                                    let l365 = *base
                                                                        .add(40 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l366 = *base
                                                                        .add(40 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len367 = l366;
                                                                    let bytes367 = _rt::Vec::from_raw_parts(
                                                                        l365.cast(),
                                                                        len367,
                                                                        len367,
                                                                    );
                                                                    let l368 = i32::from(
                                                                        *base
                                                                            .add(40 + 4 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    ExportedFunctionInvocationParameters {
                                                                        idempotency_key: _rt::string_lift(bytes364),
                                                                        function_name: _rt::string_lift(bytes367),
                                                                        input: match l368 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l369 = *base
                                                                                        .add(40 + 5 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l370 = *base
                                                                                        .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base419 = l369;
                                                                                    let len419 = l370;
                                                                                    let mut result419 = _rt::Vec::with_capacity(len419);
                                                                                    for i in 0..len419 {
                                                                                        let base = base419
                                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                        let e419 = {
                                                                                            let l371 = *base.add(0).cast::<*mut u8>();
                                                                                            let l372 = *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let base418 = l371;
                                                                                            let len418 = l372;
                                                                                            let mut result418 = _rt::Vec::with_capacity(len418);
                                                                                            for i in 0..len418 {
                                                                                                let base = base418
                                                                                                    .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                                                let e418 = {
                                                                                                    let l373 = i32::from(*base.add(0).cast::<u8>());
                                                                                                    use super::super::super::golem::rpc::types::WitNode as V417;
                                                                                                    let v417 = match l373 {
                                                                                                        0 => {
                                                                                                            let e417 = {
                                                                                                                let l374 = *base.add(8).cast::<*mut u8>();
                                                                                                                let l375 = *base
                                                                                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                                    .cast::<usize>();
                                                                                                                let len376 = l375;
                                                                                                                _rt::Vec::from_raw_parts(l374.cast(), len376, len376)
                                                                                                            };
                                                                                                            V417::RecordValue(e417)
                                                                                                        }
                                                                                                        1 => {
                                                                                                            let e417 = {
                                                                                                                let l377 = *base.add(8).cast::<i32>();
                                                                                                                let l378 = i32::from(*base.add(12).cast::<u8>());
                                                                                                                (
                                                                                                                    l377 as u32,
                                                                                                                    match l378 {
                                                                                                                        0 => None,
                                                                                                                        1 => {
                                                                                                                            let e = {
                                                                                                                                let l379 = *base.add(16).cast::<i32>();
                                                                                                                                l379
                                                                                                                            };
                                                                                                                            Some(e)
                                                                                                                        }
                                                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                                                    },
                                                                                                                )
                                                                                                            };
                                                                                                            V417::VariantValue(e417)
                                                                                                        }
                                                                                                        2 => {
                                                                                                            let e417 = {
                                                                                                                let l380 = *base.add(8).cast::<i32>();
                                                                                                                l380 as u32
                                                                                                            };
                                                                                                            V417::EnumValue(e417)
                                                                                                        }
                                                                                                        3 => {
                                                                                                            let e417 = {
                                                                                                                let l381 = *base.add(8).cast::<*mut u8>();
                                                                                                                let l382 = *base
                                                                                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                                    .cast::<usize>();
                                                                                                                let base384 = l381;
                                                                                                                let len384 = l382;
                                                                                                                let mut result384 = _rt::Vec::with_capacity(len384);
                                                                                                                for i in 0..len384 {
                                                                                                                    let base = base384.add(i * 1);
                                                                                                                    let e384 = {
                                                                                                                        let l383 = i32::from(*base.add(0).cast::<u8>());
                                                                                                                        _rt::bool_lift(l383 as u8)
                                                                                                                    };
                                                                                                                    result384.push(e384);
                                                                                                                }
                                                                                                                _rt::cabi_dealloc(base384, len384 * 1, 1);
                                                                                                                result384
                                                                                                            };
                                                                                                            V417::FlagsValue(e417)
                                                                                                        }
                                                                                                        4 => {
                                                                                                            let e417 = {
                                                                                                                let l385 = *base.add(8).cast::<*mut u8>();
                                                                                                                let l386 = *base
                                                                                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                                    .cast::<usize>();
                                                                                                                let len387 = l386;
                                                                                                                _rt::Vec::from_raw_parts(l385.cast(), len387, len387)
                                                                                                            };
                                                                                                            V417::TupleValue(e417)
                                                                                                        }
                                                                                                        5 => {
                                                                                                            let e417 = {
                                                                                                                let l388 = *base.add(8).cast::<*mut u8>();
                                                                                                                let l389 = *base
                                                                                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                                    .cast::<usize>();
                                                                                                                let len390 = l389;
                                                                                                                _rt::Vec::from_raw_parts(l388.cast(), len390, len390)
                                                                                                            };
                                                                                                            V417::ListValue(e417)
                                                                                                        }
                                                                                                        6 => {
                                                                                                            let e417 = {
                                                                                                                let l391 = i32::from(*base.add(8).cast::<u8>());
                                                                                                                match l391 {
                                                                                                                    0 => None,
                                                                                                                    1 => {
                                                                                                                        let e = {
                                                                                                                            let l392 = *base.add(12).cast::<i32>();
                                                                                                                            l392
                                                                                                                        };
                                                                                                                        Some(e)
                                                                                                                    }
                                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                                }
                                                                                                            };
                                                                                                            V417::OptionValue(e417)
                                                                                                        }
                                                                                                        7 => {
                                                                                                            let e417 = {
                                                                                                                let l393 = i32::from(*base.add(8).cast::<u8>());
                                                                                                                match l393 {
                                                                                                                    0 => {
                                                                                                                        let e = {
                                                                                                                            let l394 = i32::from(*base.add(12).cast::<u8>());
                                                                                                                            match l394 {
                                                                                                                                0 => None,
                                                                                                                                1 => {
                                                                                                                                    let e = {
                                                                                                                                        let l395 = *base.add(16).cast::<i32>();
                                                                                                                                        l395
                                                                                                                                    };
                                                                                                                                    Some(e)
                                                                                                                                }
                                                                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                                                                            }
                                                                                                                        };
                                                                                                                        Ok(e)
                                                                                                                    }
                                                                                                                    1 => {
                                                                                                                        let e = {
                                                                                                                            let l396 = i32::from(*base.add(12).cast::<u8>());
                                                                                                                            match l396 {
                                                                                                                                0 => None,
                                                                                                                                1 => {
                                                                                                                                    let e = {
                                                                                                                                        let l397 = *base.add(16).cast::<i32>();
                                                                                                                                        l397
                                                                                                                                    };
                                                                                                                                    Some(e)
                                                                                                                                }
                                                                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                                                                            }
                                                                                                                        };
                                                                                                                        Err(e)
                                                                                                                    }
                                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                                }
                                                                                                            };
                                                                                                            V417::ResultValue(e417)
                                                                                                        }
                                                                                                        8 => {
                                                                                                            let e417 = {
                                                                                                                let l398 = i32::from(*base.add(8).cast::<u8>());
                                                                                                                l398 as u8
                                                                                                            };
                                                                                                            V417::PrimU8(e417)
                                                                                                        }
                                                                                                        9 => {
                                                                                                            let e417 = {
                                                                                                                let l399 = i32::from(*base.add(8).cast::<u16>());
                                                                                                                l399 as u16
                                                                                                            };
                                                                                                            V417::PrimU16(e417)
                                                                                                        }
                                                                                                        10 => {
                                                                                                            let e417 = {
                                                                                                                let l400 = *base.add(8).cast::<i32>();
                                                                                                                l400 as u32
                                                                                                            };
                                                                                                            V417::PrimU32(e417)
                                                                                                        }
                                                                                                        11 => {
                                                                                                            let e417 = {
                                                                                                                let l401 = *base.add(8).cast::<i64>();
                                                                                                                l401 as u64
                                                                                                            };
                                                                                                            V417::PrimU64(e417)
                                                                                                        }
                                                                                                        12 => {
                                                                                                            let e417 = {
                                                                                                                let l402 = i32::from(*base.add(8).cast::<i8>());
                                                                                                                l402 as i8
                                                                                                            };
                                                                                                            V417::PrimS8(e417)
                                                                                                        }
                                                                                                        13 => {
                                                                                                            let e417 = {
                                                                                                                let l403 = i32::from(*base.add(8).cast::<i16>());
                                                                                                                l403 as i16
                                                                                                            };
                                                                                                            V417::PrimS16(e417)
                                                                                                        }
                                                                                                        14 => {
                                                                                                            let e417 = {
                                                                                                                let l404 = *base.add(8).cast::<i32>();
                                                                                                                l404
                                                                                                            };
                                                                                                            V417::PrimS32(e417)
                                                                                                        }
                                                                                                        15 => {
                                                                                                            let e417 = {
                                                                                                                let l405 = *base.add(8).cast::<i64>();
                                                                                                                l405
                                                                                                            };
                                                                                                            V417::PrimS64(e417)
                                                                                                        }
                                                                                                        16 => {
                                                                                                            let e417 = {
                                                                                                                let l406 = *base.add(8).cast::<f32>();
                                                                                                                l406
                                                                                                            };
                                                                                                            V417::PrimFloat32(e417)
                                                                                                        }
                                                                                                        17 => {
                                                                                                            let e417 = {
                                                                                                                let l407 = *base.add(8).cast::<f64>();
                                                                                                                l407
                                                                                                            };
                                                                                                            V417::PrimFloat64(e417)
                                                                                                        }
                                                                                                        18 => {
                                                                                                            let e417 = {
                                                                                                                let l408 = *base.add(8).cast::<i32>();
                                                                                                                _rt::char_lift(l408 as u32)
                                                                                                            };
                                                                                                            V417::PrimChar(e417)
                                                                                                        }
                                                                                                        19 => {
                                                                                                            let e417 = {
                                                                                                                let l409 = i32::from(*base.add(8).cast::<u8>());
                                                                                                                _rt::bool_lift(l409 as u8)
                                                                                                            };
                                                                                                            V417::PrimBool(e417)
                                                                                                        }
                                                                                                        20 => {
                                                                                                            let e417 = {
                                                                                                                let l410 = *base.add(8).cast::<*mut u8>();
                                                                                                                let l411 = *base
                                                                                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                                    .cast::<usize>();
                                                                                                                let len412 = l411;
                                                                                                                let bytes412 = _rt::Vec::from_raw_parts(
                                                                                                                    l410.cast(),
                                                                                                                    len412,
                                                                                                                    len412,
                                                                                                                );
                                                                                                                _rt::string_lift(bytes412)
                                                                                                            };
                                                                                                            V417::PrimString(e417)
                                                                                                        }
                                                                                                        n => {
                                                                                                            debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                                                            let e417 = {
                                                                                                                let l413 = *base.add(8).cast::<*mut u8>();
                                                                                                                let l414 = *base
                                                                                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                                    .cast::<usize>();
                                                                                                                let len415 = l414;
                                                                                                                let bytes415 = _rt::Vec::from_raw_parts(
                                                                                                                    l413.cast(),
                                                                                                                    len415,
                                                                                                                    len415,
                                                                                                                );
                                                                                                                let l416 = *base
                                                                                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                                    .cast::<i64>();
                                                                                                                (
                                                                                                                    super::super::super::golem::rpc::types::Uri {
                                                                                                                        value: _rt::string_lift(bytes415),
                                                                                                                    },
                                                                                                                    l416 as u64,
                                                                                                                )
                                                                                                            };
                                                                                                            V417::Handle(e417)
                                                                                                        }
                                                                                                    };
                                                                                                    v417
                                                                                                };
                                                                                                result418.push(e418);
                                                                                            }
                                                                                            _rt::cabi_dealloc(
                                                                                                base418,
                                                                                                len418 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                                                8,
                                                                                            );
                                                                                            super::super::super::golem::rpc::types::WitValue {
                                                                                                nodes: result418,
                                                                                            }
                                                                                        };
                                                                                        result419.push(e419);
                                                                                    }
                                                                                    _rt::cabi_dealloc(
                                                                                        base419,
                                                                                        len419 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                    result419
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                AgentInvocation::ExportedFunction(e421)
                                                            }
                                                            n => {
                                                                debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                                let e421 = {
                                                                    let l420 = *base.add(40).cast::<i64>();
                                                                    l420 as u64
                                                                };
                                                                AgentInvocation::ManualUpdate(e421)
                                                            }
                                                        };
                                                        PendingAgentInvocationParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l359 as u64,
                                                                nanoseconds: l360 as u32,
                                                            },
                                                            invocation: v421,
                                                        }
                                                    };
                                                    OplogEntry::PendingAgentInvocation(e603)
                                                }
                                                16 => {
                                                    let e603 = {
                                                        let l422 = *base.add(16).cast::<i64>();
                                                        let l423 = *base.add(24).cast::<i32>();
                                                        let l424 = *base.add(32).cast::<i64>();
                                                        let l425 = i32::from(*base.add(40).cast::<u8>());
                                                        let v429 = match l425 {
                                                            0 => UpdateDescription::AutoUpdate,
                                                            n => {
                                                                debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                                let e429 = {
                                                                    let l426 = *base
                                                                        .add(40 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l427 = *base
                                                                        .add(40 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len428 = l427;
                                                                    _rt::Vec::from_raw_parts(l426.cast(), len428, len428)
                                                                };
                                                                UpdateDescription::SnapshotBased(e429)
                                                            }
                                                        };
                                                        PendingUpdateParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l422 as u64,
                                                                nanoseconds: l423 as u32,
                                                            },
                                                            target_version: l424 as u64,
                                                            update_description: v429,
                                                        }
                                                    };
                                                    OplogEntry::PendingUpdate(e603)
                                                }
                                                17 => {
                                                    let e603 = {
                                                        let l430 = *base.add(16).cast::<i64>();
                                                        let l431 = *base.add(24).cast::<i32>();
                                                        let l432 = *base.add(32).cast::<i64>();
                                                        let l433 = *base.add(40).cast::<i64>();
                                                        let l434 = *base.add(48).cast::<*mut u8>();
                                                        let l435 = *base
                                                            .add(48 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base453 = l434;
                                                        let len453 = l435;
                                                        let mut result453 = _rt::Vec::with_capacity(len453);
                                                        for i in 0..len453 {
                                                            let base = base453
                                                                .add(i * (16 + 6 * ::core::mem::size_of::<*const u8>()));
                                                            let e453 = {
                                                                let l436 = *base.add(0).cast::<i64>();
                                                                let l437 = *base.add(8).cast::<i64>();
                                                                let l438 = *base.add(16).cast::<*mut u8>();
                                                                let l439 = *base
                                                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len440 = l439;
                                                                let bytes440 = _rt::Vec::from_raw_parts(
                                                                    l438.cast(),
                                                                    len440,
                                                                    len440,
                                                                );
                                                                let l441 = *base
                                                                    .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l442 = *base
                                                                    .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len443 = l442;
                                                                let bytes443 = _rt::Vec::from_raw_parts(
                                                                    l441.cast(),
                                                                    len443,
                                                                    len443,
                                                                );
                                                                let l444 = *base
                                                                    .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l445 = *base
                                                                    .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let base452 = l444;
                                                                let len452 = l445;
                                                                let mut result452 = _rt::Vec::with_capacity(len452);
                                                                for i in 0..len452 {
                                                                    let base = base452
                                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                    let e452 = {
                                                                        let l446 = *base.add(0).cast::<*mut u8>();
                                                                        let l447 = *base
                                                                            .add(::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len448 = l447;
                                                                        let bytes448 = _rt::Vec::from_raw_parts(
                                                                            l446.cast(),
                                                                            len448,
                                                                            len448,
                                                                        );
                                                                        let l449 = *base
                                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l450 = *base
                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len451 = l450;
                                                                        let bytes451 = _rt::Vec::from_raw_parts(
                                                                            l449.cast(),
                                                                            len451,
                                                                            len451,
                                                                        );
                                                                        (_rt::string_lift(bytes448), _rt::string_lift(bytes451))
                                                                    };
                                                                    result452.push(e452);
                                                                }
                                                                _rt::cabi_dealloc(
                                                                    base452,
                                                                    len452 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                    ::core::mem::size_of::<*const u8>(),
                                                                );
                                                                PluginInstallationDescription {
                                                                    installation_id: super::super::super::golem::rpc::types::Uuid {
                                                                        high_bits: l436 as u64,
                                                                        low_bits: l437 as u64,
                                                                    },
                                                                    name: _rt::string_lift(bytes440),
                                                                    version: _rt::string_lift(bytes443),
                                                                    parameters: result452,
                                                                }
                                                            };
                                                            result453.push(e453);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base453,
                                                            len453 * (16 + 6 * ::core::mem::size_of::<*const u8>()),
                                                            8,
                                                        );
                                                        SuccessfulUpdateParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l430 as u64,
                                                                nanoseconds: l431 as u32,
                                                            },
                                                            target_version: l432 as u64,
                                                            new_component_size: l433 as u64,
                                                            new_active_plugins: result453,
                                                        }
                                                    };
                                                    OplogEntry::SuccessfulUpdate(e603)
                                                }
                                                18 => {
                                                    let e603 = {
                                                        let l454 = *base.add(16).cast::<i64>();
                                                        let l455 = *base.add(24).cast::<i32>();
                                                        let l456 = *base.add(32).cast::<i64>();
                                                        let l457 = i32::from(*base.add(40).cast::<u8>());
                                                        FailedUpdateParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l454 as u64,
                                                                nanoseconds: l455 as u32,
                                                            },
                                                            target_version: l456 as u64,
                                                            details: match l457 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l458 = *base
                                                                            .add(40 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l459 = *base
                                                                            .add(40 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len460 = l459;
                                                                        let bytes460 = _rt::Vec::from_raw_parts(
                                                                            l458.cast(),
                                                                            len460,
                                                                            len460,
                                                                        );
                                                                        _rt::string_lift(bytes460)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        }
                                                    };
                                                    OplogEntry::FailedUpdate(e603)
                                                }
                                                19 => {
                                                    let e603 = {
                                                        let l461 = *base.add(16).cast::<i64>();
                                                        let l462 = *base.add(24).cast::<i32>();
                                                        let l463 = *base.add(32).cast::<i64>();
                                                        GrowMemoryParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l461 as u64,
                                                                nanoseconds: l462 as u32,
                                                            },
                                                            delta: l463 as u64,
                                                        }
                                                    };
                                                    OplogEntry::GrowMemory(e603)
                                                }
                                                20 => {
                                                    let e603 = {
                                                        let l464 = *base.add(16).cast::<i64>();
                                                        let l465 = *base.add(24).cast::<i32>();
                                                        let l466 = *base.add(32).cast::<i64>();
                                                        let l467 = *base.add(40).cast::<*mut u8>();
                                                        let l468 = *base
                                                            .add(40 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len469 = l468;
                                                        let bytes469 = _rt::Vec::from_raw_parts(
                                                            l467.cast(),
                                                            len469,
                                                            len469,
                                                        );
                                                        let l470 = *base
                                                            .add(40 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l471 = *base
                                                            .add(40 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len472 = l471;
                                                        let bytes472 = _rt::Vec::from_raw_parts(
                                                            l470.cast(),
                                                            len472,
                                                            len472,
                                                        );
                                                        CreateResourceParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l464 as u64,
                                                                nanoseconds: l465 as u32,
                                                            },
                                                            resource_id: l466 as u64,
                                                            name: _rt::string_lift(bytes469),
                                                            owner: _rt::string_lift(bytes472),
                                                        }
                                                    };
                                                    OplogEntry::CreateResource(e603)
                                                }
                                                21 => {
                                                    let e603 = {
                                                        let l473 = *base.add(16).cast::<i64>();
                                                        let l474 = *base.add(24).cast::<i32>();
                                                        let l475 = *base.add(32).cast::<i64>();
                                                        let l476 = *base.add(40).cast::<*mut u8>();
                                                        let l477 = *base
                                                            .add(40 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len478 = l477;
                                                        let bytes478 = _rt::Vec::from_raw_parts(
                                                            l476.cast(),
                                                            len478,
                                                            len478,
                                                        );
                                                        let l479 = *base
                                                            .add(40 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l480 = *base
                                                            .add(40 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len481 = l480;
                                                        let bytes481 = _rt::Vec::from_raw_parts(
                                                            l479.cast(),
                                                            len481,
                                                            len481,
                                                        );
                                                        DropResourceParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l473 as u64,
                                                                nanoseconds: l474 as u32,
                                                            },
                                                            resource_id: l475 as u64,
                                                            name: _rt::string_lift(bytes478),
                                                            owner: _rt::string_lift(bytes481),
                                                        }
                                                    };
                                                    OplogEntry::DropResource(e603)
                                                }
                                                22 => {
                                                    let e603 = {
                                                        let l482 = *base.add(16).cast::<i64>();
                                                        let l483 = *base.add(24).cast::<i32>();
                                                        let l484 = i32::from(*base.add(32).cast::<u8>());
                                                        let l485 = *base
                                                            .add(32 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l486 = *base
                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len487 = l486;
                                                        let bytes487 = _rt::Vec::from_raw_parts(
                                                            l485.cast(),
                                                            len487,
                                                            len487,
                                                        );
                                                        let l488 = *base
                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l489 = *base
                                                            .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len490 = l489;
                                                        let bytes490 = _rt::Vec::from_raw_parts(
                                                            l488.cast(),
                                                            len490,
                                                            len490,
                                                        );
                                                        LogParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l482 as u64,
                                                                nanoseconds: l483 as u32,
                                                            },
                                                            level: LogLevel::_lift(l484 as u8),
                                                            context: _rt::string_lift(bytes487),
                                                            message: _rt::string_lift(bytes490),
                                                        }
                                                    };
                                                    OplogEntry::Log(e603)
                                                }
                                                23 => {
                                                    let e603 = {
                                                        let l491 = *base.add(16).cast::<i64>();
                                                        let l492 = *base.add(24).cast::<i32>();
                                                        super::super::super::wasi::clocks::wall_clock::Datetime {
                                                            seconds: l491 as u64,
                                                            nanoseconds: l492 as u32,
                                                        }
                                                    };
                                                    OplogEntry::Restart(e603)
                                                }
                                                24 => {
                                                    let e603 = {
                                                        let l493 = *base.add(16).cast::<i64>();
                                                        let l494 = *base.add(24).cast::<i32>();
                                                        let l495 = *base.add(32).cast::<i64>();
                                                        let l496 = *base.add(40).cast::<i64>();
                                                        let l497 = *base.add(48).cast::<*mut u8>();
                                                        let l498 = *base
                                                            .add(48 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len499 = l498;
                                                        let bytes499 = _rt::Vec::from_raw_parts(
                                                            l497.cast(),
                                                            len499,
                                                            len499,
                                                        );
                                                        let l500 = *base
                                                            .add(48 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l501 = *base
                                                            .add(48 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len502 = l501;
                                                        let bytes502 = _rt::Vec::from_raw_parts(
                                                            l500.cast(),
                                                            len502,
                                                            len502,
                                                        );
                                                        let l503 = *base
                                                            .add(48 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l504 = *base
                                                            .add(48 + 5 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base511 = l503;
                                                        let len511 = l504;
                                                        let mut result511 = _rt::Vec::with_capacity(len511);
                                                        for i in 0..len511 {
                                                            let base = base511
                                                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                            let e511 = {
                                                                let l505 = *base.add(0).cast::<*mut u8>();
                                                                let l506 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len507 = l506;
                                                                let bytes507 = _rt::Vec::from_raw_parts(
                                                                    l505.cast(),
                                                                    len507,
                                                                    len507,
                                                                );
                                                                let l508 = *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l509 = *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len510 = l509;
                                                                let bytes510 = _rt::Vec::from_raw_parts(
                                                                    l508.cast(),
                                                                    len510,
                                                                    len510,
                                                                );
                                                                (_rt::string_lift(bytes507), _rt::string_lift(bytes510))
                                                            };
                                                            result511.push(e511);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base511,
                                                            len511 * (4 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        ActivatePluginParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l493 as u64,
                                                                nanoseconds: l494 as u32,
                                                            },
                                                            plugin: PluginInstallationDescription {
                                                                installation_id: super::super::super::golem::rpc::types::Uuid {
                                                                    high_bits: l495 as u64,
                                                                    low_bits: l496 as u64,
                                                                },
                                                                name: _rt::string_lift(bytes499),
                                                                version: _rt::string_lift(bytes502),
                                                                parameters: result511,
                                                            },
                                                        }
                                                    };
                                                    OplogEntry::ActivatePlugin(e603)
                                                }
                                                25 => {
                                                    let e603 = {
                                                        let l512 = *base.add(16).cast::<i64>();
                                                        let l513 = *base.add(24).cast::<i32>();
                                                        let l514 = *base.add(32).cast::<i64>();
                                                        let l515 = *base.add(40).cast::<i64>();
                                                        let l516 = *base.add(48).cast::<*mut u8>();
                                                        let l517 = *base
                                                            .add(48 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len518 = l517;
                                                        let bytes518 = _rt::Vec::from_raw_parts(
                                                            l516.cast(),
                                                            len518,
                                                            len518,
                                                        );
                                                        let l519 = *base
                                                            .add(48 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l520 = *base
                                                            .add(48 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len521 = l520;
                                                        let bytes521 = _rt::Vec::from_raw_parts(
                                                            l519.cast(),
                                                            len521,
                                                            len521,
                                                        );
                                                        let l522 = *base
                                                            .add(48 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l523 = *base
                                                            .add(48 + 5 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base530 = l522;
                                                        let len530 = l523;
                                                        let mut result530 = _rt::Vec::with_capacity(len530);
                                                        for i in 0..len530 {
                                                            let base = base530
                                                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                            let e530 = {
                                                                let l524 = *base.add(0).cast::<*mut u8>();
                                                                let l525 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len526 = l525;
                                                                let bytes526 = _rt::Vec::from_raw_parts(
                                                                    l524.cast(),
                                                                    len526,
                                                                    len526,
                                                                );
                                                                let l527 = *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l528 = *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len529 = l528;
                                                                let bytes529 = _rt::Vec::from_raw_parts(
                                                                    l527.cast(),
                                                                    len529,
                                                                    len529,
                                                                );
                                                                (_rt::string_lift(bytes526), _rt::string_lift(bytes529))
                                                            };
                                                            result530.push(e530);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base530,
                                                            len530 * (4 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        DeactivatePluginParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l512 as u64,
                                                                nanoseconds: l513 as u32,
                                                            },
                                                            plugin: PluginInstallationDescription {
                                                                installation_id: super::super::super::golem::rpc::types::Uuid {
                                                                    high_bits: l514 as u64,
                                                                    low_bits: l515 as u64,
                                                                },
                                                                name: _rt::string_lift(bytes518),
                                                                version: _rt::string_lift(bytes521),
                                                                parameters: result530,
                                                            },
                                                        }
                                                    };
                                                    OplogEntry::DeactivatePlugin(e603)
                                                }
                                                26 => {
                                                    let e603 = {
                                                        let l531 = *base.add(16).cast::<i64>();
                                                        let l532 = *base.add(24).cast::<i32>();
                                                        let l533 = *base.add(32).cast::<i64>();
                                                        let l534 = *base.add(40).cast::<i64>();
                                                        RevertParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l531 as u64,
                                                                nanoseconds: l532 as u32,
                                                            },
                                                            start: l533 as u64,
                                                            end: l534 as u64,
                                                        }
                                                    };
                                                    OplogEntry::Revert(e603)
                                                }
                                                27 => {
                                                    let e603 = {
                                                        let l535 = *base.add(16).cast::<i64>();
                                                        let l536 = *base.add(24).cast::<i32>();
                                                        let l537 = *base.add(32).cast::<*mut u8>();
                                                        let l538 = *base
                                                            .add(32 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len539 = l538;
                                                        let bytes539 = _rt::Vec::from_raw_parts(
                                                            l537.cast(),
                                                            len539,
                                                            len539,
                                                        );
                                                        CancelInvocationParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l535 as u64,
                                                                nanoseconds: l536 as u32,
                                                            },
                                                            idempotency_key: _rt::string_lift(bytes539),
                                                        }
                                                    };
                                                    OplogEntry::CancelInvocation(e603)
                                                }
                                                28 => {
                                                    let e603 = {
                                                        let l540 = *base.add(16).cast::<i64>();
                                                        let l541 = *base.add(24).cast::<i32>();
                                                        let l542 = *base.add(32).cast::<*mut u8>();
                                                        let l543 = *base
                                                            .add(32 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len544 = l543;
                                                        let bytes544 = _rt::Vec::from_raw_parts(
                                                            l542.cast(),
                                                            len544,
                                                            len544,
                                                        );
                                                        let l545 = i32::from(
                                                            *base
                                                                .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l549 = i32::from(
                                                            *base
                                                                .add(32 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        let l553 = *base
                                                            .add(32 + 8 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l554 = *base
                                                            .add(32 + 9 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base563 = l553;
                                                        let len563 = l554;
                                                        let mut result563 = _rt::Vec::with_capacity(len563);
                                                        for i in 0..len563 {
                                                            let base = base563
                                                                .add(i * (5 * ::core::mem::size_of::<*const u8>()));
                                                            let e563 = {
                                                                let l555 = *base.add(0).cast::<*mut u8>();
                                                                let l556 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len557 = l556;
                                                                let bytes557 = _rt::Vec::from_raw_parts(
                                                                    l555.cast(),
                                                                    len557,
                                                                    len557,
                                                                );
                                                                let l558 = i32::from(
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                use super::super::super::golem::api::context::AttributeValue as V562;
                                                                let v562 = match l558 {
                                                                    n => {
                                                                        debug_assert_eq!(n, 0, "invalid enum discriminant");
                                                                        let e562 = {
                                                                            let l559 = *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l560 = *base
                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len561 = l560;
                                                                            let bytes561 = _rt::Vec::from_raw_parts(
                                                                                l559.cast(),
                                                                                len561,
                                                                                len561,
                                                                            );
                                                                            _rt::string_lift(bytes561)
                                                                        };
                                                                        V562::String(e562)
                                                                    }
                                                                };
                                                                super::super::super::golem::api::context::Attribute {
                                                                    key: _rt::string_lift(bytes557),
                                                                    value: v562,
                                                                }
                                                            };
                                                            result563.push(e563);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base563,
                                                            len563 * (5 * ::core::mem::size_of::<*const u8>()),
                                                            ::core::mem::size_of::<*const u8>(),
                                                        );
                                                        StartSpanParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l540 as u64,
                                                                nanoseconds: l541 as u32,
                                                            },
                                                            span_id: _rt::string_lift(bytes544),
                                                            parent: match l545 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l546 = *base
                                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l547 = *base
                                                                            .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len548 = l547;
                                                                        let bytes548 = _rt::Vec::from_raw_parts(
                                                                            l546.cast(),
                                                                            len548,
                                                                            len548,
                                                                        );
                                                                        _rt::string_lift(bytes548)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            linked_context: match l549 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l550 = *base
                                                                            .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l551 = *base
                                                                            .add(32 + 7 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len552 = l551;
                                                                        let bytes552 = _rt::Vec::from_raw_parts(
                                                                            l550.cast(),
                                                                            len552,
                                                                            len552,
                                                                        );
                                                                        _rt::string_lift(bytes552)
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                            attributes: result563,
                                                        }
                                                    };
                                                    OplogEntry::StartSpan(e603)
                                                }
                                                29 => {
                                                    let e603 = {
                                                        let l564 = *base.add(16).cast::<i64>();
                                                        let l565 = *base.add(24).cast::<i32>();
                                                        let l566 = *base.add(32).cast::<*mut u8>();
                                                        let l567 = *base
                                                            .add(32 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len568 = l567;
                                                        let bytes568 = _rt::Vec::from_raw_parts(
                                                            l566.cast(),
                                                            len568,
                                                            len568,
                                                        );
                                                        FinishSpanParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l564 as u64,
                                                                nanoseconds: l565 as u32,
                                                            },
                                                            span_id: _rt::string_lift(bytes568),
                                                        }
                                                    };
                                                    OplogEntry::FinishSpan(e603)
                                                }
                                                30 => {
                                                    let e603 = {
                                                        let l569 = *base.add(16).cast::<i64>();
                                                        let l570 = *base.add(24).cast::<i32>();
                                                        let l571 = *base.add(32).cast::<*mut u8>();
                                                        let l572 = *base
                                                            .add(32 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len573 = l572;
                                                        let bytes573 = _rt::Vec::from_raw_parts(
                                                            l571.cast(),
                                                            len573,
                                                            len573,
                                                        );
                                                        let l574 = *base
                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l575 = *base
                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len576 = l575;
                                                        let bytes576 = _rt::Vec::from_raw_parts(
                                                            l574.cast(),
                                                            len576,
                                                            len576,
                                                        );
                                                        let l577 = i32::from(
                                                            *base
                                                                .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        use super::super::super::golem::api::context::AttributeValue as V581;
                                                        let v581 = match l577 {
                                                            n => {
                                                                debug_assert_eq!(n, 0, "invalid enum discriminant");
                                                                let e581 = {
                                                                    let l578 = *base
                                                                        .add(32 + 5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l579 = *base
                                                                        .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len580 = l579;
                                                                    let bytes580 = _rt::Vec::from_raw_parts(
                                                                        l578.cast(),
                                                                        len580,
                                                                        len580,
                                                                    );
                                                                    _rt::string_lift(bytes580)
                                                                };
                                                                V581::String(e581)
                                                            }
                                                        };
                                                        SetSpanAttributeParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l569 as u64,
                                                                nanoseconds: l570 as u32,
                                                            },
                                                            span_id: _rt::string_lift(bytes573),
                                                            key: _rt::string_lift(bytes576),
                                                            value: v581,
                                                        }
                                                    };
                                                    OplogEntry::SetSpanAttribute(e603)
                                                }
                                                31 => {
                                                    let e603 = {
                                                        let l582 = *base.add(16).cast::<i64>();
                                                        let l583 = *base.add(24).cast::<i32>();
                                                        let l584 = i32::from(*base.add(32).cast::<u8>());
                                                        use super::super::super::golem::api::host::PersistenceLevel as V585;
                                                        let v585 = match l584 {
                                                            0 => V585::PersistNothing,
                                                            1 => V585::PersistRemoteSideEffects,
                                                            n => {
                                                                debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                V585::Smart
                                                            }
                                                        };
                                                        ChangePersistenceLevelParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l582 as u64,
                                                                nanoseconds: l583 as u32,
                                                            },
                                                            persistence_level: v585,
                                                        }
                                                    };
                                                    OplogEntry::ChangePersistenceLevel(e603)
                                                }
                                                32 => {
                                                    let e603 = {
                                                        let l586 = *base.add(16).cast::<i64>();
                                                        let l587 = *base.add(24).cast::<i32>();
                                                        let l588 = *base.add(32).cast::<*mut u8>();
                                                        let l589 = *base
                                                            .add(32 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len590 = l589;
                                                        let bytes590 = _rt::Vec::from_raw_parts(
                                                            l588.cast(),
                                                            len590,
                                                            len590,
                                                        );
                                                        BeginRemoteTransactionParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l586 as u64,
                                                                nanoseconds: l587 as u32,
                                                            },
                                                            transaction_id: _rt::string_lift(bytes590),
                                                        }
                                                    };
                                                    OplogEntry::BeginRemoteTransaction(e603)
                                                }
                                                33 => {
                                                    let e603 = {
                                                        let l591 = *base.add(16).cast::<i64>();
                                                        let l592 = *base.add(24).cast::<i32>();
                                                        let l593 = *base.add(32).cast::<i64>();
                                                        RemoteTransactionParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l591 as u64,
                                                                nanoseconds: l592 as u32,
                                                            },
                                                            begin_index: l593 as u64,
                                                        }
                                                    };
                                                    OplogEntry::PreCommitRemoteTransaction(e603)
                                                }
                                                34 => {
                                                    let e603 = {
                                                        let l594 = *base.add(16).cast::<i64>();
                                                        let l595 = *base.add(24).cast::<i32>();
                                                        let l596 = *base.add(32).cast::<i64>();
                                                        RemoteTransactionParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l594 as u64,
                                                                nanoseconds: l595 as u32,
                                                            },
                                                            begin_index: l596 as u64,
                                                        }
                                                    };
                                                    OplogEntry::PreRollbackRemoteTransaction(e603)
                                                }
                                                35 => {
                                                    let e603 = {
                                                        let l597 = *base.add(16).cast::<i64>();
                                                        let l598 = *base.add(24).cast::<i32>();
                                                        let l599 = *base.add(32).cast::<i64>();
                                                        RemoteTransactionParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l597 as u64,
                                                                nanoseconds: l598 as u32,
                                                            },
                                                            begin_index: l599 as u64,
                                                        }
                                                    };
                                                    OplogEntry::CommittedRemoteTransaction(e603)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 36, "invalid enum discriminant");
                                                    let e603 = {
                                                        let l600 = *base.add(16).cast::<i64>();
                                                        let l601 = *base.add(24).cast::<i32>();
                                                        let l602 = *base.add(32).cast::<i64>();
                                                        RemoteTransactionParameters {
                                                            timestamp: super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                seconds: l600 as u64,
                                                                nanoseconds: l601 as u32,
                                                            },
                                                            begin_index: l602 as u64,
                                                        }
                                                    };
                                                    OplogEntry::RolledBackRemoteTransaction(e603)
                                                }
                                            };
                                            (l5 as u64, v603)
                                        };
                                        result604.push(e604);
                                    }
                                    _rt::cabi_dealloc(
                                        base604,
                                        len604 * (112 + 12 * ::core::mem::size_of::<*const u8>()),
                                        8,
                                    );
                                    result604
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result605
                    }
                }
            }
        }
    }
    pub mod rpc {
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Datetime = super::super::super::wasi::clocks::wall_clock::Datetime;
            pub type Pollable = super::super::super::wasi::io::poll::Pollable;
            /// UUID
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Uuid {
                pub high_bits: u64,
                pub low_bits: u64,
            }
            impl ::core::fmt::Debug for Uuid {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Uuid")
                        .field("high-bits", &self.high_bits)
                        .field("low-bits", &self.low_bits)
                        .finish()
                }
            }
            /// Represents a Golem component
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct ComponentId {
                pub uuid: Uuid,
            }
            impl ::core::fmt::Debug for ComponentId {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ComponentId").field("uuid", &self.uuid).finish()
                }
            }
            /// Represents a Golem agent
            #[derive(Clone)]
            pub struct AgentId {
                /// Identifies the component the agent belongs to
                pub component_id: ComponentId,
                /// String representation of the agent ID (agent type and constructor parameters)
                pub agent_id: _rt::String,
            }
            impl ::core::fmt::Debug for AgentId {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AgentId")
                        .field("component-id", &self.component_id)
                        .field("agent-id", &self.agent_id)
                        .finish()
                }
            }
            /// The index type used in `wit-value` and `wit-type` to identify nodes
            pub type NodeIndex = i32;
            /// Resource handle modes
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum ResourceMode {
                /// The resource is owned by this handle
                Owned,
                /// The resource is owned by someone else, and this handle is just a borrow
                Borrowed,
            }
            impl ::core::fmt::Debug for ResourceMode {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ResourceMode::Owned => {
                            f.debug_tuple("ResourceMode::Owned").finish()
                        }
                        ResourceMode::Borrowed => {
                            f.debug_tuple("ResourceMode::Borrowed").finish()
                        }
                    }
                }
            }
            impl ResourceMode {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> ResourceMode {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => ResourceMode::Owned,
                        1 => ResourceMode::Borrowed,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            /// URI value
            #[derive(Clone)]
            pub struct Uri {
                pub value: _rt::String,
            }
            impl ::core::fmt::Debug for Uri {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Uri").field("value", &self.value).finish()
                }
            }
            /// One node of a `wit-value`
            #[derive(Clone)]
            pub enum WitNode {
                /// A record value defined by a list of its field values
                RecordValue(_rt::Vec<NodeIndex>),
                /// A variant value defined by a pair of the case index and its inner value
                VariantValue((u32, Option<NodeIndex>)),
                /// An enum value defined by a case index
                EnumValue(u32),
                /// A flags value defined by a list of its flag states
                FlagsValue(_rt::Vec<bool>),
                /// A tuple value defined by a list of its item values
                TupleValue(_rt::Vec<NodeIndex>),
                /// A list value defined by a list of its item values
                ListValue(_rt::Vec<NodeIndex>),
                /// An option value defined by an optional inner value
                OptionValue(Option<NodeIndex>),
                /// A result value defined by either an ok value or an error value. Both values are optional,
                /// where the `none` case represents the absence of a value.
                ResultValue(Result<Option<NodeIndex>, Option<NodeIndex>>),
                /// Primitive unsigned 8-bit integer
                PrimU8(u8),
                /// Primitive unsigned 16-bit integer
                PrimU16(u16),
                /// Primitive unsigned 32-bit integer
                PrimU32(u32),
                /// Primitive unsigned 64-bit integer
                PrimU64(u64),
                /// Primitive signed 8-bit integer
                PrimS8(i8),
                /// Primitive signed 16-bit integer
                PrimS16(i16),
                /// Primitive signed 32-bit integer
                PrimS32(i32),
                /// Primitive signed 64-bit integer
                PrimS64(i64),
                /// Primitive 32-bit floating point number
                PrimFloat32(f32),
                /// Primitive 64-bit floating point number
                PrimFloat64(f64),
                /// Primitive character
                PrimChar(char),
                /// Primitive boolean
                PrimBool(bool),
                /// Primitive string
                PrimString(_rt::String),
                /// Resource handle pointing to a URI and a resource ID
                Handle((Uri, u64)),
            }
            impl ::core::fmt::Debug for WitNode {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        WitNode::RecordValue(e) => {
                            f.debug_tuple("WitNode::RecordValue").field(e).finish()
                        }
                        WitNode::VariantValue(e) => {
                            f.debug_tuple("WitNode::VariantValue").field(e).finish()
                        }
                        WitNode::EnumValue(e) => {
                            f.debug_tuple("WitNode::EnumValue").field(e).finish()
                        }
                        WitNode::FlagsValue(e) => {
                            f.debug_tuple("WitNode::FlagsValue").field(e).finish()
                        }
                        WitNode::TupleValue(e) => {
                            f.debug_tuple("WitNode::TupleValue").field(e).finish()
                        }
                        WitNode::ListValue(e) => {
                            f.debug_tuple("WitNode::ListValue").field(e).finish()
                        }
                        WitNode::OptionValue(e) => {
                            f.debug_tuple("WitNode::OptionValue").field(e).finish()
                        }
                        WitNode::ResultValue(e) => {
                            f.debug_tuple("WitNode::ResultValue").field(e).finish()
                        }
                        WitNode::PrimU8(e) => {
                            f.debug_tuple("WitNode::PrimU8").field(e).finish()
                        }
                        WitNode::PrimU16(e) => {
                            f.debug_tuple("WitNode::PrimU16").field(e).finish()
                        }
                        WitNode::PrimU32(e) => {
                            f.debug_tuple("WitNode::PrimU32").field(e).finish()
                        }
                        WitNode::PrimU64(e) => {
                            f.debug_tuple("WitNode::PrimU64").field(e).finish()
                        }
                        WitNode::PrimS8(e) => {
                            f.debug_tuple("WitNode::PrimS8").field(e).finish()
                        }
                        WitNode::PrimS16(e) => {
                            f.debug_tuple("WitNode::PrimS16").field(e).finish()
                        }
                        WitNode::PrimS32(e) => {
                            f.debug_tuple("WitNode::PrimS32").field(e).finish()
                        }
                        WitNode::PrimS64(e) => {
                            f.debug_tuple("WitNode::PrimS64").field(e).finish()
                        }
                        WitNode::PrimFloat32(e) => {
                            f.debug_tuple("WitNode::PrimFloat32").field(e).finish()
                        }
                        WitNode::PrimFloat64(e) => {
                            f.debug_tuple("WitNode::PrimFloat64").field(e).finish()
                        }
                        WitNode::PrimChar(e) => {
                            f.debug_tuple("WitNode::PrimChar").field(e).finish()
                        }
                        WitNode::PrimBool(e) => {
                            f.debug_tuple("WitNode::PrimBool").field(e).finish()
                        }
                        WitNode::PrimString(e) => {
                            f.debug_tuple("WitNode::PrimString").field(e).finish()
                        }
                        WitNode::Handle(e) => {
                            f.debug_tuple("WitNode::Handle").field(e).finish()
                        }
                    }
                }
            }
            /// Describes an arbitrary value
            #[derive(Clone)]
            pub struct WitValue {
                /// The list of `wit-node` values that make up the value. The list is always non-empty,
                /// and the first element is the root node describing the value. Because WIT does not support
                /// recursive types, further nodes are pushed into this list, and referenced by index from their parent node.
                pub nodes: _rt::Vec<WitNode>,
            }
            impl ::core::fmt::Debug for WitValue {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WitValue").field("nodes", &self.nodes).finish()
                }
            }
            /// Possible failures of an RPC call
            #[derive(Clone)]
            pub enum RpcError {
                /// Protocol level error
                ProtocolError(_rt::String),
                /// Access denied
                Denied(_rt::String),
                /// Target agent or function not found
                NotFound(_rt::String),
                /// Internal error on the remote side
                RemoteInternalError(_rt::String),
            }
            impl ::core::fmt::Debug for RpcError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        RpcError::ProtocolError(e) => {
                            f.debug_tuple("RpcError::ProtocolError").field(e).finish()
                        }
                        RpcError::Denied(e) => {
                            f.debug_tuple("RpcError::Denied").field(e).finish()
                        }
                        RpcError::NotFound(e) => {
                            f.debug_tuple("RpcError::NotFound").field(e).finish()
                        }
                        RpcError::RemoteInternalError(e) => {
                            f.debug_tuple("RpcError::RemoteInternalError")
                                .field(e)
                                .finish()
                        }
                    }
                }
            }
            impl ::core::fmt::Display for RpcError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }
            impl std::error::Error for RpcError {}
            /// An RPC client
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct WasmRpc {
                handle: _rt::Resource<WasmRpc>,
            }
            impl WasmRpc {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for WasmRpc {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]wasm-rpc"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            /// Represents a pollable invocation result
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct FutureInvokeResult {
                handle: _rt::Resource<FutureInvokeResult>,
            }
            impl FutureInvokeResult {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for FutureInvokeResult {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]future-invoke-result"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            /// Cancellation token for scheduled invocations
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct CancellationToken {
                handle: _rt::Resource<CancellationToken>,
            }
            impl CancellationToken {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for CancellationToken {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]cancellation-token"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Parses a UUID from a string
            pub fn parse_uuid(uuid: &str) -> Result<Uuid, _rt::String> {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 24]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 24]);
                    let vec0 = uuid;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                    unsafe extern "C" {
                        #[link_name = "parse-uuid"]
                        fn wit_import2(_: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import2(ptr0.cast_mut(), len0, ptr1) };
                    let l3 = i32::from(*ptr1.add(0).cast::<u8>());
                    let result9 = match l3 {
                        0 => {
                            let e = {
                                let l4 = *ptr1.add(8).cast::<i64>();
                                let l5 = *ptr1.add(16).cast::<i64>();
                                Uuid {
                                    high_bits: l4 as u64,
                                    low_bits: l5 as u64,
                                }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l6 = *ptr1.add(8).cast::<*mut u8>();
                                let l7 = *ptr1
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len8 = l7;
                                let bytes8 = _rt::Vec::from_raw_parts(
                                    l6.cast(),
                                    len8,
                                    len8,
                                );
                                _rt::string_lift(bytes8)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result9
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Converts a UUID to a string
            pub fn uuid_to_string(uuid: Uuid) -> _rt::String {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 2
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let Uuid { high_bits: high_bits0, low_bits: low_bits0 } = uuid;
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                    unsafe extern "C" {
                        #[link_name = "uuid-to-string"]
                        fn wit_import2(_: i64, _: i64, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(_: i64, _: i64, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import2(
                            _rt::as_i64(high_bits0),
                            _rt::as_i64(low_bits0),
                            ptr1,
                        )
                    };
                    let l3 = *ptr1.add(0).cast::<*mut u8>();
                    let l4 = *ptr1
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len5 = l4;
                    let bytes5 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);
                    let result6 = _rt::string_lift(bytes5);
                    result6
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                /// Constructs the RPC client connecting to the given target agent
                pub fn new(agent_id: &AgentId) -> Self {
                    unsafe {
                        let AgentId {
                            component_id: component_id0,
                            agent_id: agent_id0,
                        } = agent_id;
                        let ComponentId { uuid: uuid1 } = component_id0;
                        let Uuid { high_bits: high_bits2, low_bits: low_bits2 } = uuid1;
                        let vec3 = agent_id0;
                        let ptr3 = vec3.as_ptr().cast::<u8>();
                        let len3 = vec3.len();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[constructor]wasm-rpc"]
                            fn wit_import4(_: i64, _: i64, _: *mut u8, _: usize) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import4(
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe {
                            wit_import4(
                                _rt::as_i64(high_bits2),
                                _rt::as_i64(low_bits2),
                                ptr3.cast_mut(),
                                len3,
                            )
                        };
                        unsafe { WasmRpc::from_handle(ret as u32) }
                    }
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                /// Invokes a remote function with the given parameters, and awaits the result
                pub fn invoke_and_await(
                    &self,
                    function_name: &str,
                    function_params: &[WitValue],
                ) -> Result<WitValue, RpcError> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 4 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 4
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let vec0 = function_name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec12 = function_params;
                        let len12 = vec12.len();
                        let layout12 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec12.len() * (2 * ::core::mem::size_of::<*const u8>()),
                            ::core::mem::size_of::<*const u8>(),
                        );
                        let result12 = if layout12.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout12);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec12.into_iter().enumerate() {
                            let base = result12
                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                            {
                                let WitValue { nodes: nodes1 } = e;
                                let vec11 = nodes1;
                                let len11 = vec11.len();
                                let layout11 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec11.len()
                                        * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                    8,
                                );
                                let result11 = if layout11.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout11);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec11.into_iter().enumerate() {
                                    let base = result11
                                        .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                    {
                                        match e {
                                            WitNode::RecordValue(e) => {
                                                *base.add(0).cast::<u8>() = (0i32) as u8;
                                                let vec2 = e;
                                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                                let len2 = vec2.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len2;
                                                *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                            }
                                            WitNode::VariantValue(e) => {
                                                *base.add(0).cast::<u8>() = (1i32) as u8;
                                                let (t3_0, t3_1) = e;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(t3_0);
                                                match t3_1 {
                                                    Some(e) => {
                                                        *base.add(12).cast::<u8>() = (1i32) as u8;
                                                        *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(12).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::EnumValue(e) => {
                                                *base.add(0).cast::<u8>() = (2i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::FlagsValue(e) => {
                                                *base.add(0).cast::<u8>() = (3i32) as u8;
                                                let vec4 = e;
                                                let len4 = vec4.len();
                                                let layout4 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec4.len() * 1,
                                                    1,
                                                );
                                                let result4 = if layout4.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout4).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout4);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec4.into_iter().enumerate() {
                                                    let base = result4.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        }) as u8;
                                                    }
                                                }
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len4;
                                                *base.add(8).cast::<*mut u8>() = result4;
                                                cleanup_list.extend_from_slice(&[(result4, layout4)]);
                                            }
                                            WitNode::TupleValue(e) => {
                                                *base.add(0).cast::<u8>() = (4i32) as u8;
                                                let vec5 = e;
                                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                                let len5 = vec5.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len5;
                                                *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                            }
                                            WitNode::ListValue(e) => {
                                                *base.add(0).cast::<u8>() = (5i32) as u8;
                                                let vec6 = e;
                                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                                let len6 = vec6.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len6;
                                                *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                            }
                                            WitNode::OptionValue(e) => {
                                                *base.add(0).cast::<u8>() = (6i32) as u8;
                                                match e {
                                                    Some(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::ResultValue(e) => {
                                                *base.add(0).cast::<u8>() = (7i32) as u8;
                                                match e {
                                                    Ok(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    Err(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                };
                                            }
                                            WitNode::PrimU8(e) => {
                                                *base.add(0).cast::<u8>() = (8i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimU16(e) => {
                                                *base.add(0).cast::<u8>() = (9i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimU32(e) => {
                                                *base.add(0).cast::<u8>() = (10i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimU64(e) => {
                                                *base.add(0).cast::<u8>() = (11i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimS8(e) => {
                                                *base.add(0).cast::<u8>() = (12i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimS16(e) => {
                                                *base.add(0).cast::<u8>() = (13i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimS32(e) => {
                                                *base.add(0).cast::<u8>() = (14i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimS64(e) => {
                                                *base.add(0).cast::<u8>() = (15i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimFloat32(e) => {
                                                *base.add(0).cast::<u8>() = (16i32) as u8;
                                                *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            WitNode::PrimFloat64(e) => {
                                                *base.add(0).cast::<u8>() = (17i32) as u8;
                                                *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            WitNode::PrimChar(e) => {
                                                *base.add(0).cast::<u8>() = (18i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimBool(e) => {
                                                *base.add(0).cast::<u8>() = (19i32) as u8;
                                                *base.add(8).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                            WitNode::PrimString(e) => {
                                                *base.add(0).cast::<u8>() = (20i32) as u8;
                                                let vec7 = e;
                                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                                let len7 = vec7.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len7;
                                                *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                            }
                                            WitNode::Handle(e) => {
                                                *base.add(0).cast::<u8>() = (21i32) as u8;
                                                let (t8_0, t8_1) = e;
                                                let Uri { value: value9 } = t8_0;
                                                let vec10 = value9;
                                                let ptr10 = vec10.as_ptr().cast::<u8>();
                                                let len10 = vec10.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len10;
                                                *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                                *base
                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<i64>() = _rt::as_i64(t8_1);
                                            }
                                        }
                                    }
                                }
                                *base
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<usize>() = len11;
                                *base.add(0).cast::<*mut u8>() = result11;
                                cleanup_list.extend_from_slice(&[(result11, layout11)]);
                            }
                        }
                        let ptr13 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[method]wasm-rpc.invoke-and-await"]
                            fn wit_import14(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import14(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import14(
                                (self).handle() as i32,
                                ptr0.cast_mut(),
                                len0,
                                result12,
                                len12,
                                ptr13,
                            )
                        };
                        let l15 = i32::from(*ptr13.add(0).cast::<u8>());
                        let result78 = match l15 {
                            0 => {
                                let e = {
                                    let l16 = *ptr13
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l17 = *ptr13
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base63 = l16;
                                    let len63 = l17;
                                    let mut result63 = _rt::Vec::with_capacity(len63);
                                    for i in 0..len63 {
                                        let base = base63
                                            .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                        let e63 = {
                                            let l18 = i32::from(*base.add(0).cast::<u8>());
                                            let v62 = match l18 {
                                                0 => {
                                                    let e62 = {
                                                        let l19 = *base.add(8).cast::<*mut u8>();
                                                        let l20 = *base
                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len21 = l20;
                                                        _rt::Vec::from_raw_parts(l19.cast(), len21, len21)
                                                    };
                                                    WitNode::RecordValue(e62)
                                                }
                                                1 => {
                                                    let e62 = {
                                                        let l22 = *base.add(8).cast::<i32>();
                                                        let l23 = i32::from(*base.add(12).cast::<u8>());
                                                        (
                                                            l22 as u32,
                                                            match l23 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l24 = *base.add(16).cast::<i32>();
                                                                        l24
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        )
                                                    };
                                                    WitNode::VariantValue(e62)
                                                }
                                                2 => {
                                                    let e62 = {
                                                        let l25 = *base.add(8).cast::<i32>();
                                                        l25 as u32
                                                    };
                                                    WitNode::EnumValue(e62)
                                                }
                                                3 => {
                                                    let e62 = {
                                                        let l26 = *base.add(8).cast::<*mut u8>();
                                                        let l27 = *base
                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base29 = l26;
                                                        let len29 = l27;
                                                        let mut result29 = _rt::Vec::with_capacity(len29);
                                                        for i in 0..len29 {
                                                            let base = base29.add(i * 1);
                                                            let e29 = {
                                                                let l28 = i32::from(*base.add(0).cast::<u8>());
                                                                _rt::bool_lift(l28 as u8)
                                                            };
                                                            result29.push(e29);
                                                        }
                                                        _rt::cabi_dealloc(base29, len29 * 1, 1);
                                                        result29
                                                    };
                                                    WitNode::FlagsValue(e62)
                                                }
                                                4 => {
                                                    let e62 = {
                                                        let l30 = *base.add(8).cast::<*mut u8>();
                                                        let l31 = *base
                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len32 = l31;
                                                        _rt::Vec::from_raw_parts(l30.cast(), len32, len32)
                                                    };
                                                    WitNode::TupleValue(e62)
                                                }
                                                5 => {
                                                    let e62 = {
                                                        let l33 = *base.add(8).cast::<*mut u8>();
                                                        let l34 = *base
                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len35 = l34;
                                                        _rt::Vec::from_raw_parts(l33.cast(), len35, len35)
                                                    };
                                                    WitNode::ListValue(e62)
                                                }
                                                6 => {
                                                    let e62 = {
                                                        let l36 = i32::from(*base.add(8).cast::<u8>());
                                                        match l36 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l37 = *base.add(12).cast::<i32>();
                                                                    l37
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        }
                                                    };
                                                    WitNode::OptionValue(e62)
                                                }
                                                7 => {
                                                    let e62 = {
                                                        let l38 = i32::from(*base.add(8).cast::<u8>());
                                                        match l38 {
                                                            0 => {
                                                                let e = {
                                                                    let l39 = i32::from(*base.add(12).cast::<u8>());
                                                                    match l39 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l40 = *base.add(16).cast::<i32>();
                                                                                l40
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                Ok(e)
                                                            }
                                                            1 => {
                                                                let e = {
                                                                    let l41 = i32::from(*base.add(12).cast::<u8>());
                                                                    match l41 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l42 = *base.add(16).cast::<i32>();
                                                                                l42
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                Err(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        }
                                                    };
                                                    WitNode::ResultValue(e62)
                                                }
                                                8 => {
                                                    let e62 = {
                                                        let l43 = i32::from(*base.add(8).cast::<u8>());
                                                        l43 as u8
                                                    };
                                                    WitNode::PrimU8(e62)
                                                }
                                                9 => {
                                                    let e62 = {
                                                        let l44 = i32::from(*base.add(8).cast::<u16>());
                                                        l44 as u16
                                                    };
                                                    WitNode::PrimU16(e62)
                                                }
                                                10 => {
                                                    let e62 = {
                                                        let l45 = *base.add(8).cast::<i32>();
                                                        l45 as u32
                                                    };
                                                    WitNode::PrimU32(e62)
                                                }
                                                11 => {
                                                    let e62 = {
                                                        let l46 = *base.add(8).cast::<i64>();
                                                        l46 as u64
                                                    };
                                                    WitNode::PrimU64(e62)
                                                }
                                                12 => {
                                                    let e62 = {
                                                        let l47 = i32::from(*base.add(8).cast::<i8>());
                                                        l47 as i8
                                                    };
                                                    WitNode::PrimS8(e62)
                                                }
                                                13 => {
                                                    let e62 = {
                                                        let l48 = i32::from(*base.add(8).cast::<i16>());
                                                        l48 as i16
                                                    };
                                                    WitNode::PrimS16(e62)
                                                }
                                                14 => {
                                                    let e62 = {
                                                        let l49 = *base.add(8).cast::<i32>();
                                                        l49
                                                    };
                                                    WitNode::PrimS32(e62)
                                                }
                                                15 => {
                                                    let e62 = {
                                                        let l50 = *base.add(8).cast::<i64>();
                                                        l50
                                                    };
                                                    WitNode::PrimS64(e62)
                                                }
                                                16 => {
                                                    let e62 = {
                                                        let l51 = *base.add(8).cast::<f32>();
                                                        l51
                                                    };
                                                    WitNode::PrimFloat32(e62)
                                                }
                                                17 => {
                                                    let e62 = {
                                                        let l52 = *base.add(8).cast::<f64>();
                                                        l52
                                                    };
                                                    WitNode::PrimFloat64(e62)
                                                }
                                                18 => {
                                                    let e62 = {
                                                        let l53 = *base.add(8).cast::<i32>();
                                                        _rt::char_lift(l53 as u32)
                                                    };
                                                    WitNode::PrimChar(e62)
                                                }
                                                19 => {
                                                    let e62 = {
                                                        let l54 = i32::from(*base.add(8).cast::<u8>());
                                                        _rt::bool_lift(l54 as u8)
                                                    };
                                                    WitNode::PrimBool(e62)
                                                }
                                                20 => {
                                                    let e62 = {
                                                        let l55 = *base.add(8).cast::<*mut u8>();
                                                        let l56 = *base
                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len57 = l56;
                                                        let bytes57 = _rt::Vec::from_raw_parts(
                                                            l55.cast(),
                                                            len57,
                                                            len57,
                                                        );
                                                        _rt::string_lift(bytes57)
                                                    };
                                                    WitNode::PrimString(e62)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                    let e62 = {
                                                        let l58 = *base.add(8).cast::<*mut u8>();
                                                        let l59 = *base
                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len60 = l59;
                                                        let bytes60 = _rt::Vec::from_raw_parts(
                                                            l58.cast(),
                                                            len60,
                                                            len60,
                                                        );
                                                        let l61 = *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i64>();
                                                        (
                                                            Uri {
                                                                value: _rt::string_lift(bytes60),
                                                            },
                                                            l61 as u64,
                                                        )
                                                    };
                                                    WitNode::Handle(e62)
                                                }
                                            };
                                            v62
                                        };
                                        result63.push(e63);
                                    }
                                    _rt::cabi_dealloc(
                                        base63,
                                        len63 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                        8,
                                    );
                                    WitValue { nodes: result63 }
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l64 = i32::from(
                                        *ptr13.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                    );
                                    let v77 = match l64 {
                                        0 => {
                                            let e77 = {
                                                let l65 = *ptr13
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l66 = *ptr13
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len67 = l66;
                                                let bytes67 = _rt::Vec::from_raw_parts(
                                                    l65.cast(),
                                                    len67,
                                                    len67,
                                                );
                                                _rt::string_lift(bytes67)
                                            };
                                            RpcError::ProtocolError(e77)
                                        }
                                        1 => {
                                            let e77 = {
                                                let l68 = *ptr13
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l69 = *ptr13
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len70 = l69;
                                                let bytes70 = _rt::Vec::from_raw_parts(
                                                    l68.cast(),
                                                    len70,
                                                    len70,
                                                );
                                                _rt::string_lift(bytes70)
                                            };
                                            RpcError::Denied(e77)
                                        }
                                        2 => {
                                            let e77 = {
                                                let l71 = *ptr13
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l72 = *ptr13
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len73 = l72;
                                                let bytes73 = _rt::Vec::from_raw_parts(
                                                    l71.cast(),
                                                    len73,
                                                    len73,
                                                );
                                                _rt::string_lift(bytes73)
                                            };
                                            RpcError::NotFound(e77)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 3, "invalid enum discriminant");
                                            let e77 = {
                                                let l74 = *ptr13
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l75 = *ptr13
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len76 = l75;
                                                let bytes76 = _rt::Vec::from_raw_parts(
                                                    l74.cast(),
                                                    len76,
                                                    len76,
                                                );
                                                _rt::string_lift(bytes76)
                                            };
                                            RpcError::RemoteInternalError(e77)
                                        }
                                    };
                                    v77
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        if layout12.size() != 0 {
                            _rt::alloc::dealloc(result12.cast(), layout12);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        result78
                    }
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                /// Triggers the invocation of a remote function with the given parameters, and returns immediately.
                pub fn invoke(
                    &self,
                    function_name: &str,
                    function_params: &[WitValue],
                ) -> Result<(), RpcError> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 4 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 4
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let vec0 = function_name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec12 = function_params;
                        let len12 = vec12.len();
                        let layout12 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec12.len() * (2 * ::core::mem::size_of::<*const u8>()),
                            ::core::mem::size_of::<*const u8>(),
                        );
                        let result12 = if layout12.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout12);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec12.into_iter().enumerate() {
                            let base = result12
                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                            {
                                let WitValue { nodes: nodes1 } = e;
                                let vec11 = nodes1;
                                let len11 = vec11.len();
                                let layout11 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec11.len()
                                        * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                    8,
                                );
                                let result11 = if layout11.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout11);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec11.into_iter().enumerate() {
                                    let base = result11
                                        .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                    {
                                        match e {
                                            WitNode::RecordValue(e) => {
                                                *base.add(0).cast::<u8>() = (0i32) as u8;
                                                let vec2 = e;
                                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                                let len2 = vec2.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len2;
                                                *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                            }
                                            WitNode::VariantValue(e) => {
                                                *base.add(0).cast::<u8>() = (1i32) as u8;
                                                let (t3_0, t3_1) = e;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(t3_0);
                                                match t3_1 {
                                                    Some(e) => {
                                                        *base.add(12).cast::<u8>() = (1i32) as u8;
                                                        *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(12).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::EnumValue(e) => {
                                                *base.add(0).cast::<u8>() = (2i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::FlagsValue(e) => {
                                                *base.add(0).cast::<u8>() = (3i32) as u8;
                                                let vec4 = e;
                                                let len4 = vec4.len();
                                                let layout4 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec4.len() * 1,
                                                    1,
                                                );
                                                let result4 = if layout4.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout4).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout4);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec4.into_iter().enumerate() {
                                                    let base = result4.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        }) as u8;
                                                    }
                                                }
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len4;
                                                *base.add(8).cast::<*mut u8>() = result4;
                                                cleanup_list.extend_from_slice(&[(result4, layout4)]);
                                            }
                                            WitNode::TupleValue(e) => {
                                                *base.add(0).cast::<u8>() = (4i32) as u8;
                                                let vec5 = e;
                                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                                let len5 = vec5.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len5;
                                                *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                            }
                                            WitNode::ListValue(e) => {
                                                *base.add(0).cast::<u8>() = (5i32) as u8;
                                                let vec6 = e;
                                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                                let len6 = vec6.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len6;
                                                *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                            }
                                            WitNode::OptionValue(e) => {
                                                *base.add(0).cast::<u8>() = (6i32) as u8;
                                                match e {
                                                    Some(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::ResultValue(e) => {
                                                *base.add(0).cast::<u8>() = (7i32) as u8;
                                                match e {
                                                    Ok(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    Err(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                };
                                            }
                                            WitNode::PrimU8(e) => {
                                                *base.add(0).cast::<u8>() = (8i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimU16(e) => {
                                                *base.add(0).cast::<u8>() = (9i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimU32(e) => {
                                                *base.add(0).cast::<u8>() = (10i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimU64(e) => {
                                                *base.add(0).cast::<u8>() = (11i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimS8(e) => {
                                                *base.add(0).cast::<u8>() = (12i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimS16(e) => {
                                                *base.add(0).cast::<u8>() = (13i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimS32(e) => {
                                                *base.add(0).cast::<u8>() = (14i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimS64(e) => {
                                                *base.add(0).cast::<u8>() = (15i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimFloat32(e) => {
                                                *base.add(0).cast::<u8>() = (16i32) as u8;
                                                *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            WitNode::PrimFloat64(e) => {
                                                *base.add(0).cast::<u8>() = (17i32) as u8;
                                                *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            WitNode::PrimChar(e) => {
                                                *base.add(0).cast::<u8>() = (18i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimBool(e) => {
                                                *base.add(0).cast::<u8>() = (19i32) as u8;
                                                *base.add(8).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                            WitNode::PrimString(e) => {
                                                *base.add(0).cast::<u8>() = (20i32) as u8;
                                                let vec7 = e;
                                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                                let len7 = vec7.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len7;
                                                *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                            }
                                            WitNode::Handle(e) => {
                                                *base.add(0).cast::<u8>() = (21i32) as u8;
                                                let (t8_0, t8_1) = e;
                                                let Uri { value: value9 } = t8_0;
                                                let vec10 = value9;
                                                let ptr10 = vec10.as_ptr().cast::<u8>();
                                                let len10 = vec10.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len10;
                                                *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                                *base
                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<i64>() = _rt::as_i64(t8_1);
                                            }
                                        }
                                    }
                                }
                                *base
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<usize>() = len11;
                                *base.add(0).cast::<*mut u8>() = result11;
                                cleanup_list.extend_from_slice(&[(result11, layout11)]);
                            }
                        }
                        let ptr13 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[method]wasm-rpc.invoke"]
                            fn wit_import14(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import14(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import14(
                                (self).handle() as i32,
                                ptr0.cast_mut(),
                                len0,
                                result12,
                                len12,
                                ptr13,
                            )
                        };
                        let l15 = i32::from(*ptr13.add(0).cast::<u8>());
                        let result30 = match l15 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l16 = i32::from(
                                        *ptr13.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                    );
                                    let v29 = match l16 {
                                        0 => {
                                            let e29 = {
                                                let l17 = *ptr13
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l18 = *ptr13
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len19 = l18;
                                                let bytes19 = _rt::Vec::from_raw_parts(
                                                    l17.cast(),
                                                    len19,
                                                    len19,
                                                );
                                                _rt::string_lift(bytes19)
                                            };
                                            RpcError::ProtocolError(e29)
                                        }
                                        1 => {
                                            let e29 = {
                                                let l20 = *ptr13
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l21 = *ptr13
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len22 = l21;
                                                let bytes22 = _rt::Vec::from_raw_parts(
                                                    l20.cast(),
                                                    len22,
                                                    len22,
                                                );
                                                _rt::string_lift(bytes22)
                                            };
                                            RpcError::Denied(e29)
                                        }
                                        2 => {
                                            let e29 = {
                                                let l23 = *ptr13
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l24 = *ptr13
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len25 = l24;
                                                let bytes25 = _rt::Vec::from_raw_parts(
                                                    l23.cast(),
                                                    len25,
                                                    len25,
                                                );
                                                _rt::string_lift(bytes25)
                                            };
                                            RpcError::NotFound(e29)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 3, "invalid enum discriminant");
                                            let e29 = {
                                                let l26 = *ptr13
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l27 = *ptr13
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len28 = l27;
                                                let bytes28 = _rt::Vec::from_raw_parts(
                                                    l26.cast(),
                                                    len28,
                                                    len28,
                                                );
                                                _rt::string_lift(bytes28)
                                            };
                                            RpcError::RemoteInternalError(e29)
                                        }
                                    };
                                    v29
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        if layout12.size() != 0 {
                            _rt::alloc::dealloc(result12.cast(), layout12);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        result30
                    }
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                /// Invokes a remote function with the given parameters, and returns a `future-invoke-result` value which can
                /// be polled for the result.
                ///
                /// With this function it is possible to call multiple (different) agents simultaneously.
                pub fn async_invoke_and_await(
                    &self,
                    function_name: &str,
                    function_params: &[WitValue],
                ) -> FutureInvokeResult {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        let vec0 = function_name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec12 = function_params;
                        let len12 = vec12.len();
                        let layout12 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec12.len() * (2 * ::core::mem::size_of::<*const u8>()),
                            ::core::mem::size_of::<*const u8>(),
                        );
                        let result12 = if layout12.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout12);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec12.into_iter().enumerate() {
                            let base = result12
                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                            {
                                let WitValue { nodes: nodes1 } = e;
                                let vec11 = nodes1;
                                let len11 = vec11.len();
                                let layout11 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec11.len()
                                        * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                    8,
                                );
                                let result11 = if layout11.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout11);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec11.into_iter().enumerate() {
                                    let base = result11
                                        .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                    {
                                        match e {
                                            WitNode::RecordValue(e) => {
                                                *base.add(0).cast::<u8>() = (0i32) as u8;
                                                let vec2 = e;
                                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                                let len2 = vec2.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len2;
                                                *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                            }
                                            WitNode::VariantValue(e) => {
                                                *base.add(0).cast::<u8>() = (1i32) as u8;
                                                let (t3_0, t3_1) = e;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(t3_0);
                                                match t3_1 {
                                                    Some(e) => {
                                                        *base.add(12).cast::<u8>() = (1i32) as u8;
                                                        *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(12).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::EnumValue(e) => {
                                                *base.add(0).cast::<u8>() = (2i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::FlagsValue(e) => {
                                                *base.add(0).cast::<u8>() = (3i32) as u8;
                                                let vec4 = e;
                                                let len4 = vec4.len();
                                                let layout4 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec4.len() * 1,
                                                    1,
                                                );
                                                let result4 = if layout4.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout4).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout4);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec4.into_iter().enumerate() {
                                                    let base = result4.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        }) as u8;
                                                    }
                                                }
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len4;
                                                *base.add(8).cast::<*mut u8>() = result4;
                                                cleanup_list.extend_from_slice(&[(result4, layout4)]);
                                            }
                                            WitNode::TupleValue(e) => {
                                                *base.add(0).cast::<u8>() = (4i32) as u8;
                                                let vec5 = e;
                                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                                let len5 = vec5.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len5;
                                                *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                            }
                                            WitNode::ListValue(e) => {
                                                *base.add(0).cast::<u8>() = (5i32) as u8;
                                                let vec6 = e;
                                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                                let len6 = vec6.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len6;
                                                *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                            }
                                            WitNode::OptionValue(e) => {
                                                *base.add(0).cast::<u8>() = (6i32) as u8;
                                                match e {
                                                    Some(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::ResultValue(e) => {
                                                *base.add(0).cast::<u8>() = (7i32) as u8;
                                                match e {
                                                    Ok(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    Err(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                };
                                            }
                                            WitNode::PrimU8(e) => {
                                                *base.add(0).cast::<u8>() = (8i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimU16(e) => {
                                                *base.add(0).cast::<u8>() = (9i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimU32(e) => {
                                                *base.add(0).cast::<u8>() = (10i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimU64(e) => {
                                                *base.add(0).cast::<u8>() = (11i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimS8(e) => {
                                                *base.add(0).cast::<u8>() = (12i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimS16(e) => {
                                                *base.add(0).cast::<u8>() = (13i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimS32(e) => {
                                                *base.add(0).cast::<u8>() = (14i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimS64(e) => {
                                                *base.add(0).cast::<u8>() = (15i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimFloat32(e) => {
                                                *base.add(0).cast::<u8>() = (16i32) as u8;
                                                *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            WitNode::PrimFloat64(e) => {
                                                *base.add(0).cast::<u8>() = (17i32) as u8;
                                                *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            WitNode::PrimChar(e) => {
                                                *base.add(0).cast::<u8>() = (18i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimBool(e) => {
                                                *base.add(0).cast::<u8>() = (19i32) as u8;
                                                *base.add(8).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                            WitNode::PrimString(e) => {
                                                *base.add(0).cast::<u8>() = (20i32) as u8;
                                                let vec7 = e;
                                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                                let len7 = vec7.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len7;
                                                *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                            }
                                            WitNode::Handle(e) => {
                                                *base.add(0).cast::<u8>() = (21i32) as u8;
                                                let (t8_0, t8_1) = e;
                                                let Uri { value: value9 } = t8_0;
                                                let vec10 = value9;
                                                let ptr10 = vec10.as_ptr().cast::<u8>();
                                                let len10 = vec10.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len10;
                                                *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                                *base
                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<i64>() = _rt::as_i64(t8_1);
                                            }
                                        }
                                    }
                                }
                                *base
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<usize>() = len11;
                                *base.add(0).cast::<*mut u8>() = result11;
                                cleanup_list.extend_from_slice(&[(result11, layout11)]);
                            }
                        }
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[method]wasm-rpc.async-invoke-and-await"]
                            fn wit_import13(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                            ) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import13(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe {
                            wit_import13(
                                (self).handle() as i32,
                                ptr0.cast_mut(),
                                len0,
                                result12,
                                len12,
                            )
                        };
                        if layout12.size() != 0 {
                            _rt::alloc::dealloc(result12.cast(), layout12);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        unsafe { FutureInvokeResult::from_handle(ret as u32) }
                    }
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                /// Schedule invocation for later
                pub fn schedule_invocation(
                    &self,
                    scheduled_time: Datetime,
                    function_name: &str,
                    function_params: &[WitValue],
                ) -> () {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        let super::super::super::wasi::clocks::wall_clock::Datetime {
                            seconds: seconds0,
                            nanoseconds: nanoseconds0,
                        } = scheduled_time;
                        let vec1 = function_name;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        let vec13 = function_params;
                        let len13 = vec13.len();
                        let layout13 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec13.len() * (2 * ::core::mem::size_of::<*const u8>()),
                            ::core::mem::size_of::<*const u8>(),
                        );
                        let result13 = if layout13.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout13).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout13);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec13.into_iter().enumerate() {
                            let base = result13
                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                            {
                                let WitValue { nodes: nodes2 } = e;
                                let vec12 = nodes2;
                                let len12 = vec12.len();
                                let layout12 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec12.len()
                                        * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                    8,
                                );
                                let result12 = if layout12.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout12);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec12.into_iter().enumerate() {
                                    let base = result12
                                        .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                    {
                                        match e {
                                            WitNode::RecordValue(e) => {
                                                *base.add(0).cast::<u8>() = (0i32) as u8;
                                                let vec3 = e;
                                                let ptr3 = vec3.as_ptr().cast::<u8>();
                                                let len3 = vec3.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len3;
                                                *base.add(8).cast::<*mut u8>() = ptr3.cast_mut();
                                            }
                                            WitNode::VariantValue(e) => {
                                                *base.add(0).cast::<u8>() = (1i32) as u8;
                                                let (t4_0, t4_1) = e;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(t4_0);
                                                match t4_1 {
                                                    Some(e) => {
                                                        *base.add(12).cast::<u8>() = (1i32) as u8;
                                                        *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(12).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::EnumValue(e) => {
                                                *base.add(0).cast::<u8>() = (2i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::FlagsValue(e) => {
                                                *base.add(0).cast::<u8>() = (3i32) as u8;
                                                let vec5 = e;
                                                let len5 = vec5.len();
                                                let layout5 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec5.len() * 1,
                                                    1,
                                                );
                                                let result5 = if layout5.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout5).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout5);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec5.into_iter().enumerate() {
                                                    let base = result5.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        }) as u8;
                                                    }
                                                }
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len5;
                                                *base.add(8).cast::<*mut u8>() = result5;
                                                cleanup_list.extend_from_slice(&[(result5, layout5)]);
                                            }
                                            WitNode::TupleValue(e) => {
                                                *base.add(0).cast::<u8>() = (4i32) as u8;
                                                let vec6 = e;
                                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                                let len6 = vec6.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len6;
                                                *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                            }
                                            WitNode::ListValue(e) => {
                                                *base.add(0).cast::<u8>() = (5i32) as u8;
                                                let vec7 = e;
                                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                                let len7 = vec7.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len7;
                                                *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                            }
                                            WitNode::OptionValue(e) => {
                                                *base.add(0).cast::<u8>() = (6i32) as u8;
                                                match e {
                                                    Some(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::ResultValue(e) => {
                                                *base.add(0).cast::<u8>() = (7i32) as u8;
                                                match e {
                                                    Ok(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    Err(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                };
                                            }
                                            WitNode::PrimU8(e) => {
                                                *base.add(0).cast::<u8>() = (8i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimU16(e) => {
                                                *base.add(0).cast::<u8>() = (9i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimU32(e) => {
                                                *base.add(0).cast::<u8>() = (10i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimU64(e) => {
                                                *base.add(0).cast::<u8>() = (11i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimS8(e) => {
                                                *base.add(0).cast::<u8>() = (12i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimS16(e) => {
                                                *base.add(0).cast::<u8>() = (13i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimS32(e) => {
                                                *base.add(0).cast::<u8>() = (14i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimS64(e) => {
                                                *base.add(0).cast::<u8>() = (15i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimFloat32(e) => {
                                                *base.add(0).cast::<u8>() = (16i32) as u8;
                                                *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            WitNode::PrimFloat64(e) => {
                                                *base.add(0).cast::<u8>() = (17i32) as u8;
                                                *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            WitNode::PrimChar(e) => {
                                                *base.add(0).cast::<u8>() = (18i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimBool(e) => {
                                                *base.add(0).cast::<u8>() = (19i32) as u8;
                                                *base.add(8).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                            WitNode::PrimString(e) => {
                                                *base.add(0).cast::<u8>() = (20i32) as u8;
                                                let vec8 = e;
                                                let ptr8 = vec8.as_ptr().cast::<u8>();
                                                let len8 = vec8.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len8;
                                                *base.add(8).cast::<*mut u8>() = ptr8.cast_mut();
                                            }
                                            WitNode::Handle(e) => {
                                                *base.add(0).cast::<u8>() = (21i32) as u8;
                                                let (t9_0, t9_1) = e;
                                                let Uri { value: value10 } = t9_0;
                                                let vec11 = value10;
                                                let ptr11 = vec11.as_ptr().cast::<u8>();
                                                let len11 = vec11.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len11;
                                                *base.add(8).cast::<*mut u8>() = ptr11.cast_mut();
                                                *base
                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<i64>() = _rt::as_i64(t9_1);
                                            }
                                        }
                                    }
                                }
                                *base
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<usize>() = len12;
                                *base.add(0).cast::<*mut u8>() = result12;
                                cleanup_list.extend_from_slice(&[(result12, layout12)]);
                            }
                        }
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[method]wasm-rpc.schedule-invocation"]
                            fn wit_import14(
                                _: i32,
                                _: i64,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import14(
                            _: i32,
                            _: i64,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                        ) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import14(
                                (self).handle() as i32,
                                _rt::as_i64(seconds0),
                                _rt::as_i32(nanoseconds0),
                                ptr1.cast_mut(),
                                len1,
                                result13,
                                len13,
                            )
                        };
                        if layout13.size() != 0 {
                            _rt::alloc::dealloc(result13.cast(), layout13);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                    }
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                /// Schedule invocation for later. Call cancel on the returned resource to cancel the invocation before the scheduled time.
                pub fn schedule_cancelable_invocation(
                    &self,
                    scheduled_time: Datetime,
                    function_name: &str,
                    function_params: &[WitValue],
                ) -> CancellationToken {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        let super::super::super::wasi::clocks::wall_clock::Datetime {
                            seconds: seconds0,
                            nanoseconds: nanoseconds0,
                        } = scheduled_time;
                        let vec1 = function_name;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        let vec13 = function_params;
                        let len13 = vec13.len();
                        let layout13 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec13.len() * (2 * ::core::mem::size_of::<*const u8>()),
                            ::core::mem::size_of::<*const u8>(),
                        );
                        let result13 = if layout13.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout13).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout13);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec13.into_iter().enumerate() {
                            let base = result13
                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                            {
                                let WitValue { nodes: nodes2 } = e;
                                let vec12 = nodes2;
                                let len12 = vec12.len();
                                let layout12 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec12.len()
                                        * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                    8,
                                );
                                let result12 = if layout12.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout12);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec12.into_iter().enumerate() {
                                    let base = result12
                                        .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                    {
                                        match e {
                                            WitNode::RecordValue(e) => {
                                                *base.add(0).cast::<u8>() = (0i32) as u8;
                                                let vec3 = e;
                                                let ptr3 = vec3.as_ptr().cast::<u8>();
                                                let len3 = vec3.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len3;
                                                *base.add(8).cast::<*mut u8>() = ptr3.cast_mut();
                                            }
                                            WitNode::VariantValue(e) => {
                                                *base.add(0).cast::<u8>() = (1i32) as u8;
                                                let (t4_0, t4_1) = e;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(t4_0);
                                                match t4_1 {
                                                    Some(e) => {
                                                        *base.add(12).cast::<u8>() = (1i32) as u8;
                                                        *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(12).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::EnumValue(e) => {
                                                *base.add(0).cast::<u8>() = (2i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::FlagsValue(e) => {
                                                *base.add(0).cast::<u8>() = (3i32) as u8;
                                                let vec5 = e;
                                                let len5 = vec5.len();
                                                let layout5 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec5.len() * 1,
                                                    1,
                                                );
                                                let result5 = if layout5.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout5).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout5);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec5.into_iter().enumerate() {
                                                    let base = result5.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        }) as u8;
                                                    }
                                                }
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len5;
                                                *base.add(8).cast::<*mut u8>() = result5;
                                                cleanup_list.extend_from_slice(&[(result5, layout5)]);
                                            }
                                            WitNode::TupleValue(e) => {
                                                *base.add(0).cast::<u8>() = (4i32) as u8;
                                                let vec6 = e;
                                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                                let len6 = vec6.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len6;
                                                *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                            }
                                            WitNode::ListValue(e) => {
                                                *base.add(0).cast::<u8>() = (5i32) as u8;
                                                let vec7 = e;
                                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                                let len7 = vec7.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len7;
                                                *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                            }
                                            WitNode::OptionValue(e) => {
                                                *base.add(0).cast::<u8>() = (6i32) as u8;
                                                match e {
                                                    Some(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::ResultValue(e) => {
                                                *base.add(0).cast::<u8>() = (7i32) as u8;
                                                match e {
                                                    Ok(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    Err(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                };
                                            }
                                            WitNode::PrimU8(e) => {
                                                *base.add(0).cast::<u8>() = (8i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimU16(e) => {
                                                *base.add(0).cast::<u8>() = (9i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimU32(e) => {
                                                *base.add(0).cast::<u8>() = (10i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimU64(e) => {
                                                *base.add(0).cast::<u8>() = (11i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimS8(e) => {
                                                *base.add(0).cast::<u8>() = (12i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimS16(e) => {
                                                *base.add(0).cast::<u8>() = (13i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimS32(e) => {
                                                *base.add(0).cast::<u8>() = (14i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimS64(e) => {
                                                *base.add(0).cast::<u8>() = (15i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimFloat32(e) => {
                                                *base.add(0).cast::<u8>() = (16i32) as u8;
                                                *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            WitNode::PrimFloat64(e) => {
                                                *base.add(0).cast::<u8>() = (17i32) as u8;
                                                *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            WitNode::PrimChar(e) => {
                                                *base.add(0).cast::<u8>() = (18i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimBool(e) => {
                                                *base.add(0).cast::<u8>() = (19i32) as u8;
                                                *base.add(8).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                            WitNode::PrimString(e) => {
                                                *base.add(0).cast::<u8>() = (20i32) as u8;
                                                let vec8 = e;
                                                let ptr8 = vec8.as_ptr().cast::<u8>();
                                                let len8 = vec8.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len8;
                                                *base.add(8).cast::<*mut u8>() = ptr8.cast_mut();
                                            }
                                            WitNode::Handle(e) => {
                                                *base.add(0).cast::<u8>() = (21i32) as u8;
                                                let (t9_0, t9_1) = e;
                                                let Uri { value: value10 } = t9_0;
                                                let vec11 = value10;
                                                let ptr11 = vec11.as_ptr().cast::<u8>();
                                                let len11 = vec11.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len11;
                                                *base.add(8).cast::<*mut u8>() = ptr11.cast_mut();
                                                *base
                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<i64>() = _rt::as_i64(t9_1);
                                            }
                                        }
                                    }
                                }
                                *base
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<usize>() = len12;
                                *base.add(0).cast::<*mut u8>() = result12;
                                cleanup_list.extend_from_slice(&[(result12, layout12)]);
                            }
                        }
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[method]wasm-rpc.schedule-cancelable-invocation"]
                            fn wit_import14(
                                _: i32,
                                _: i64,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                            ) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import14(
                            _: i32,
                            _: i64,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe {
                            wit_import14(
                                (self).handle() as i32,
                                _rt::as_i64(seconds0),
                                _rt::as_i32(nanoseconds0),
                                ptr1.cast_mut(),
                                len1,
                                result13,
                                len13,
                            )
                        };
                        if layout13.size() != 0 {
                            _rt::alloc::dealloc(result13.cast(), layout13);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        unsafe { CancellationToken::from_handle(ret as u32) }
                    }
                }
            }
            impl FutureInvokeResult {
                #[allow(unused_unsafe, clippy::all)]
                /// Subscribes to the result of the invocation
                pub fn subscribe(&self) -> Pollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[method]future-invoke-result.subscribe"]
                            fn wit_import0(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe { wit_import0((self).handle() as i32) };
                        unsafe {
                            super::super::super::wasi::io::poll::Pollable::from_handle(
                                ret as u32,
                            )
                        }
                    }
                }
            }
            impl FutureInvokeResult {
                #[allow(unused_unsafe, clippy::all)]
                /// Poll for the invocation. If the invocation has not completed yet, returns `none`.
                pub fn get(&self) -> Option<Result<WitValue, RpcError>> {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 5 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 5
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[method]future-invoke-result.get"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result66 = match l2 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l3 = i32::from(
                                        *ptr0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                    );
                                    match l3 {
                                        0 => {
                                            let e = {
                                                let l4 = *ptr0
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l5 = *ptr0
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let base51 = l4;
                                                let len51 = l5;
                                                let mut result51 = _rt::Vec::with_capacity(len51);
                                                for i in 0..len51 {
                                                    let base = base51
                                                        .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                    let e51 = {
                                                        let l6 = i32::from(*base.add(0).cast::<u8>());
                                                        let v50 = match l6 {
                                                            0 => {
                                                                let e50 = {
                                                                    let l7 = *base.add(8).cast::<*mut u8>();
                                                                    let l8 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len9 = l8;
                                                                    _rt::Vec::from_raw_parts(l7.cast(), len9, len9)
                                                                };
                                                                WitNode::RecordValue(e50)
                                                            }
                                                            1 => {
                                                                let e50 = {
                                                                    let l10 = *base.add(8).cast::<i32>();
                                                                    let l11 = i32::from(*base.add(12).cast::<u8>());
                                                                    (
                                                                        l10 as u32,
                                                                        match l11 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l12 = *base.add(16).cast::<i32>();
                                                                                    l12
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    )
                                                                };
                                                                WitNode::VariantValue(e50)
                                                            }
                                                            2 => {
                                                                let e50 = {
                                                                    let l13 = *base.add(8).cast::<i32>();
                                                                    l13 as u32
                                                                };
                                                                WitNode::EnumValue(e50)
                                                            }
                                                            3 => {
                                                                let e50 = {
                                                                    let l14 = *base.add(8).cast::<*mut u8>();
                                                                    let l15 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base17 = l14;
                                                                    let len17 = l15;
                                                                    let mut result17 = _rt::Vec::with_capacity(len17);
                                                                    for i in 0..len17 {
                                                                        let base = base17.add(i * 1);
                                                                        let e17 = {
                                                                            let l16 = i32::from(*base.add(0).cast::<u8>());
                                                                            _rt::bool_lift(l16 as u8)
                                                                        };
                                                                        result17.push(e17);
                                                                    }
                                                                    _rt::cabi_dealloc(base17, len17 * 1, 1);
                                                                    result17
                                                                };
                                                                WitNode::FlagsValue(e50)
                                                            }
                                                            4 => {
                                                                let e50 = {
                                                                    let l18 = *base.add(8).cast::<*mut u8>();
                                                                    let l19 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len20 = l19;
                                                                    _rt::Vec::from_raw_parts(l18.cast(), len20, len20)
                                                                };
                                                                WitNode::TupleValue(e50)
                                                            }
                                                            5 => {
                                                                let e50 = {
                                                                    let l21 = *base.add(8).cast::<*mut u8>();
                                                                    let l22 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len23 = l22;
                                                                    _rt::Vec::from_raw_parts(l21.cast(), len23, len23)
                                                                };
                                                                WitNode::ListValue(e50)
                                                            }
                                                            6 => {
                                                                let e50 = {
                                                                    let l24 = i32::from(*base.add(8).cast::<u8>());
                                                                    match l24 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l25 = *base.add(12).cast::<i32>();
                                                                                l25
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                WitNode::OptionValue(e50)
                                                            }
                                                            7 => {
                                                                let e50 = {
                                                                    let l26 = i32::from(*base.add(8).cast::<u8>());
                                                                    match l26 {
                                                                        0 => {
                                                                            let e = {
                                                                                let l27 = i32::from(*base.add(12).cast::<u8>());
                                                                                match l27 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l28 = *base.add(16).cast::<i32>();
                                                                                            l28
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                }
                                                                            };
                                                                            Ok(e)
                                                                        }
                                                                        1 => {
                                                                            let e = {
                                                                                let l29 = i32::from(*base.add(12).cast::<u8>());
                                                                                match l29 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l30 = *base.add(16).cast::<i32>();
                                                                                            l30
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                }
                                                                            };
                                                                            Err(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                WitNode::ResultValue(e50)
                                                            }
                                                            8 => {
                                                                let e50 = {
                                                                    let l31 = i32::from(*base.add(8).cast::<u8>());
                                                                    l31 as u8
                                                                };
                                                                WitNode::PrimU8(e50)
                                                            }
                                                            9 => {
                                                                let e50 = {
                                                                    let l32 = i32::from(*base.add(8).cast::<u16>());
                                                                    l32 as u16
                                                                };
                                                                WitNode::PrimU16(e50)
                                                            }
                                                            10 => {
                                                                let e50 = {
                                                                    let l33 = *base.add(8).cast::<i32>();
                                                                    l33 as u32
                                                                };
                                                                WitNode::PrimU32(e50)
                                                            }
                                                            11 => {
                                                                let e50 = {
                                                                    let l34 = *base.add(8).cast::<i64>();
                                                                    l34 as u64
                                                                };
                                                                WitNode::PrimU64(e50)
                                                            }
                                                            12 => {
                                                                let e50 = {
                                                                    let l35 = i32::from(*base.add(8).cast::<i8>());
                                                                    l35 as i8
                                                                };
                                                                WitNode::PrimS8(e50)
                                                            }
                                                            13 => {
                                                                let e50 = {
                                                                    let l36 = i32::from(*base.add(8).cast::<i16>());
                                                                    l36 as i16
                                                                };
                                                                WitNode::PrimS16(e50)
                                                            }
                                                            14 => {
                                                                let e50 = {
                                                                    let l37 = *base.add(8).cast::<i32>();
                                                                    l37
                                                                };
                                                                WitNode::PrimS32(e50)
                                                            }
                                                            15 => {
                                                                let e50 = {
                                                                    let l38 = *base.add(8).cast::<i64>();
                                                                    l38
                                                                };
                                                                WitNode::PrimS64(e50)
                                                            }
                                                            16 => {
                                                                let e50 = {
                                                                    let l39 = *base.add(8).cast::<f32>();
                                                                    l39
                                                                };
                                                                WitNode::PrimFloat32(e50)
                                                            }
                                                            17 => {
                                                                let e50 = {
                                                                    let l40 = *base.add(8).cast::<f64>();
                                                                    l40
                                                                };
                                                                WitNode::PrimFloat64(e50)
                                                            }
                                                            18 => {
                                                                let e50 = {
                                                                    let l41 = *base.add(8).cast::<i32>();
                                                                    _rt::char_lift(l41 as u32)
                                                                };
                                                                WitNode::PrimChar(e50)
                                                            }
                                                            19 => {
                                                                let e50 = {
                                                                    let l42 = i32::from(*base.add(8).cast::<u8>());
                                                                    _rt::bool_lift(l42 as u8)
                                                                };
                                                                WitNode::PrimBool(e50)
                                                            }
                                                            20 => {
                                                                let e50 = {
                                                                    let l43 = *base.add(8).cast::<*mut u8>();
                                                                    let l44 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len45 = l44;
                                                                    let bytes45 = _rt::Vec::from_raw_parts(
                                                                        l43.cast(),
                                                                        len45,
                                                                        len45,
                                                                    );
                                                                    _rt::string_lift(bytes45)
                                                                };
                                                                WitNode::PrimString(e50)
                                                            }
                                                            n => {
                                                                debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                let e50 = {
                                                                    let l46 = *base.add(8).cast::<*mut u8>();
                                                                    let l47 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len48 = l47;
                                                                    let bytes48 = _rt::Vec::from_raw_parts(
                                                                        l46.cast(),
                                                                        len48,
                                                                        len48,
                                                                    );
                                                                    let l49 = *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i64>();
                                                                    (
                                                                        Uri {
                                                                            value: _rt::string_lift(bytes48),
                                                                        },
                                                                        l49 as u64,
                                                                    )
                                                                };
                                                                WitNode::Handle(e50)
                                                            }
                                                        };
                                                        v50
                                                    };
                                                    result51.push(e51);
                                                }
                                                _rt::cabi_dealloc(
                                                    base51,
                                                    len51 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                    8,
                                                );
                                                WitValue { nodes: result51 }
                                            };
                                            Ok(e)
                                        }
                                        1 => {
                                            let e = {
                                                let l52 = i32::from(
                                                    *ptr0
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                let v65 = match l52 {
                                                    0 => {
                                                        let e65 = {
                                                            let l53 = *ptr0
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l54 = *ptr0
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len55 = l54;
                                                            let bytes55 = _rt::Vec::from_raw_parts(
                                                                l53.cast(),
                                                                len55,
                                                                len55,
                                                            );
                                                            _rt::string_lift(bytes55)
                                                        };
                                                        RpcError::ProtocolError(e65)
                                                    }
                                                    1 => {
                                                        let e65 = {
                                                            let l56 = *ptr0
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l57 = *ptr0
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len58 = l57;
                                                            let bytes58 = _rt::Vec::from_raw_parts(
                                                                l56.cast(),
                                                                len58,
                                                                len58,
                                                            );
                                                            _rt::string_lift(bytes58)
                                                        };
                                                        RpcError::Denied(e65)
                                                    }
                                                    2 => {
                                                        let e65 = {
                                                            let l59 = *ptr0
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l60 = *ptr0
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len61 = l60;
                                                            let bytes61 = _rt::Vec::from_raw_parts(
                                                                l59.cast(),
                                                                len61,
                                                                len61,
                                                            );
                                                            _rt::string_lift(bytes61)
                                                        };
                                                        RpcError::NotFound(e65)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 3, "invalid enum discriminant");
                                                        let e65 = {
                                                            let l62 = *ptr0
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l63 = *ptr0
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len64 = l63;
                                                            let bytes64 = _rt::Vec::from_raw_parts(
                                                                l62.cast(),
                                                                len64,
                                                                len64,
                                                            );
                                                            _rt::string_lift(bytes64)
                                                        };
                                                        RpcError::RemoteInternalError(e65)
                                                    }
                                                };
                                                v65
                                            };
                                            Err(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result66
                    }
                }
            }
            impl CancellationToken {
                #[allow(unused_unsafe, clippy::all)]
                /// Cancel the scheduled invocation
                pub fn cancel(&self) -> () {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[method]cancellation-token.cancel"]
                            fn wit_import0(_: i32);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) {
                            unreachable!()
                        }
                        unsafe { wit_import0((self).handle() as i32) };
                    }
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod wasi {
    pub mod clocks {
        /// WASI Wall Clock is a clock API intended to let users query the current
        /// time. The name "wall" makes an analogy to a "clock on the wall", which
        /// is not necessarily monotonic as it may be reset.
        ///
        /// It is intended to be portable at least between Unix-family platforms and
        /// Windows.
        ///
        /// A wall clock is a clock which measures the date and time according to
        /// some external reference.
        ///
        /// External references may be reset, so this clock is not necessarily
        /// monotonic, making it unsuitable for measuring elapsed time.
        ///
        /// It is intended for reporting the current date and time for humans.
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod wall_clock {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            /// A time and date in seconds plus nanoseconds.
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Datetime {
                pub seconds: u64,
                pub nanoseconds: u32,
            }
            impl ::core::fmt::Debug for Datetime {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Datetime")
                        .field("seconds", &self.seconds)
                        .field("nanoseconds", &self.nanoseconds)
                        .finish()
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Read the current value of the clock.
            ///
            /// This clock is not monotonic, therefore calling this function repeatedly
            /// will not necessarily produce a sequence of non-decreasing values.
            ///
            /// The returned timestamps represent the number of seconds since
            /// 1970-01-01T00:00:00Z, also known as [POSIX's Seconds Since the Epoch],
            /// also known as [Unix Time].
            ///
            /// The nanoseconds field of the output is always less than 1000000000.
            ///
            /// [POSIX's Seconds Since the Epoch]: https://pubs.opengroup.org/onlinepubs/9699919799/xrat/V4_xbd_chap04.html#tag_21_04_16
            /// [Unix Time]: https://en.wikipedia.org/wiki/Unix_time
            pub fn now() -> Datetime {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/wall-clock@0.2.3")]
                    unsafe extern "C" {
                        #[link_name = "now"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = *ptr0.add(0).cast::<i64>();
                    let l3 = *ptr0.add(8).cast::<i32>();
                    let result4 = Datetime {
                        seconds: l2 as u64,
                        nanoseconds: l3 as u32,
                    };
                    result4
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Query the resolution of the clock.
            ///
            /// The nanoseconds field of the output is always less than 1000000000.
            pub fn resolution() -> Datetime {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/wall-clock@0.2.3")]
                    unsafe extern "C" {
                        #[link_name = "resolution"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = *ptr0.add(0).cast::<i64>();
                    let l3 = *ptr0.add(8).cast::<i32>();
                    let result4 = Datetime {
                        seconds: l2 as u64,
                        nanoseconds: l3 as u32,
                    };
                    result4
                }
            }
        }
        /// WASI Monotonic Clock is a clock API intended to let users measure elapsed
        /// time.
        ///
        /// It is intended to be portable at least between Unix-family platforms and
        /// Windows.
        ///
        /// A monotonic clock is a clock which has an unspecified initial value, and
        /// successive reads of the clock will produce non-decreasing values.
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod monotonic_clock {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Pollable = super::super::super::wasi::io::poll::Pollable;
            /// An instant in time, in nanoseconds. An instant is relative to an
            /// unspecified initial value, and can only be compared to instances from
            /// the same monotonic-clock.
            pub type Instant = u64;
            /// A duration of time, in nanoseconds.
            pub type Duration = u64;
            #[allow(unused_unsafe, clippy::all)]
            /// Read the current value of the clock.
            ///
            /// The clock is monotonic, therefore calling this function repeatedly will
            /// produce a sequence of non-decreasing values.
            pub fn now() -> Instant {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/monotonic-clock@0.2.3")]
                    unsafe extern "C" {
                        #[link_name = "now"]
                        fn wit_import0() -> i64;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0() -> i64 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0() };
                    ret as u64
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Query the resolution of the clock. Returns the duration of time
            /// corresponding to a clock tick.
            pub fn resolution() -> Duration {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/monotonic-clock@0.2.3")]
                    unsafe extern "C" {
                        #[link_name = "resolution"]
                        fn wit_import0() -> i64;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0() -> i64 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0() };
                    ret as u64
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Create a `pollable` which will resolve once the specified instant
            /// has occurred.
            pub fn subscribe_instant(when: Instant) -> Pollable {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/monotonic-clock@0.2.3")]
                    unsafe extern "C" {
                        #[link_name = "subscribe-instant"]
                        fn wit_import0(_: i64) -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: i64) -> i32 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0(_rt::as_i64(when)) };
                    unsafe {
                        super::super::super::wasi::io::poll::Pollable::from_handle(
                            ret as u32,
                        )
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Create a `pollable` that will resolve after the specified duration has
            /// elapsed from the time this function is invoked.
            pub fn subscribe_duration(when: Duration) -> Pollable {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/monotonic-clock@0.2.3")]
                    unsafe extern "C" {
                        #[link_name = "subscribe-duration"]
                        fn wit_import0(_: i64) -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: i64) -> i32 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0(_rt::as_i64(when)) };
                    unsafe {
                        super::super::super::wasi::io::poll::Pollable::from_handle(
                            ret as u32,
                        )
                    }
                }
            }
        }
    }
    pub mod io {
        /// A poll API intended to let users wait for I/O events on multiple handles
        /// at once.
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod poll {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// `pollable` represents a single I/O event which may be ready, or not.
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Pollable {
                handle: _rt::Resource<Pollable>,
            }
            impl Pollable {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for Pollable {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:io/poll@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]pollable"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            impl Pollable {
                #[allow(unused_unsafe, clippy::all)]
                /// Return the readiness of a pollable. This function never blocks.
                ///
                /// Returns `true` when the pollable is ready, and `false` otherwise.
                pub fn ready(&self) -> bool {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/poll@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]pollable.ready"]
                            fn wit_import0(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe { wit_import0((self).handle() as i32) };
                        _rt::bool_lift(ret as u8)
                    }
                }
            }
            impl Pollable {
                #[allow(unused_unsafe, clippy::all)]
                /// `block` returns immediately if the pollable is ready, and otherwise
                /// blocks until ready.
                ///
                /// This function is equivalent to calling `poll.poll` on a list
                /// containing only this pollable.
                pub fn block(&self) -> () {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/poll@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]pollable.block"]
                            fn wit_import0(_: i32);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) {
                            unreachable!()
                        }
                        unsafe { wit_import0((self).handle() as i32) };
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Poll for completion on a set of pollables.
            ///
            /// This function takes a list of pollables, which identify I/O sources of
            /// interest, and waits until one or more of the events is ready for I/O.
            ///
            /// The result `list<u32>` contains one or more indices of handles in the
            /// argument list that is ready for I/O.
            ///
            /// This function traps if either:
            /// - the list is empty, or:
            /// - the list contains more elements than can be indexed with a `u32` value.
            ///
            /// A timeout can be implemented by adding a pollable from the
            /// wasi-clocks API to the list.
            ///
            /// This function does not return a `result`; polling in itself does not
            /// do any I/O so it doesn't fail. If any of the I/O sources identified by
            /// the pollables has an error, it is indicated by marking the source as
            /// being ready for I/O.
            pub fn poll(in_: &[&Pollable]) -> _rt::Vec<u32> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 2
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let vec0 = in_;
                    let len0 = vec0.len();
                    let layout0 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec0.len() * 4,
                        4,
                    );
                    let result0 = if layout0.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout0).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout0);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec0.into_iter().enumerate() {
                        let base = result0.add(i * 4);
                        {
                            *base.add(0).cast::<i32>() = (e).handle() as i32;
                        }
                    }
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:io/poll@0.2.3")]
                    unsafe extern "C" {
                        #[link_name = "poll"]
                        fn wit_import2(_: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import2(result0, len0, ptr1) };
                    let l3 = *ptr1.add(0).cast::<*mut u8>();
                    let l4 = *ptr1
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len5 = l4;
                    let result6 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);
                    if layout0.size() != 0 {
                        _rt::alloc::dealloc(result0.cast(), layout0);
                    }
                    result6
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod golem {
        pub mod api {
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod oplog_processor {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type AccountId = super::super::super::super::golem::api::host::AccountId;
                pub type OplogIndex = super::super::super::super::golem::api::host::OplogIndex;
                pub type AgentMetadata = super::super::super::super::golem::api::host::AgentMetadata;
                pub type OplogEntry = super::super::super::super::golem::api::oplog::OplogEntry;
                pub type ComponentId = super::super::super::super::golem::rpc::types::ComponentId;
                pub type AgentId = super::super::super::super::golem::rpc::types::AgentId;
                #[derive(Clone)]
                pub struct AccountInfo {
                    pub account_id: AccountId,
                }
                impl ::core::fmt::Debug for AccountInfo {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("AccountInfo")
                            .field("account-id", &self.account_id)
                            .finish()
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_process_cabi<T: Guest>(arg0: *mut u8) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len2 = l1;
                    let bytes2 = _rt::Vec::from_raw_parts(l0.cast(), len2, len2);
                    let l3 = *arg0
                        .add(2 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l4 = *arg0
                        .add(3 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base11 = l3;
                    let len11 = l4;
                    let mut result11 = _rt::Vec::with_capacity(len11);
                    for i in 0..len11 {
                        let base = base11
                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                        let e11 = {
                            let l5 = *base.add(0).cast::<*mut u8>();
                            let l6 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len7 = l6;
                            let bytes7 = _rt::Vec::from_raw_parts(l5.cast(), len7, len7);
                            let l8 = *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l9 = *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len10 = l9;
                            let bytes10 = _rt::Vec::from_raw_parts(
                                l8.cast(),
                                len10,
                                len10,
                            );
                            (_rt::string_lift(bytes7), _rt::string_lift(bytes10))
                        };
                        result11.push(e11);
                    }
                    _rt::cabi_dealloc(
                        base11,
                        len11 * (4 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let l12 = *arg0
                        .add(4 * ::core::mem::size_of::<*const u8>())
                        .cast::<i64>();
                    let l13 = *arg0
                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                        .cast::<i64>();
                    let l14 = *arg0
                        .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                        .cast::<i64>();
                    let l15 = *arg0
                        .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                        .cast::<i64>();
                    let l16 = *arg0
                        .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l17 = *arg0
                        .add(32 + 5 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len18 = l17;
                    let bytes18 = _rt::Vec::from_raw_parts(l16.cast(), len18, len18);
                    let l19 = *arg0
                        .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                        .cast::<i64>();
                    let l20 = *arg0
                        .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                        .cast::<i64>();
                    let l21 = *arg0
                        .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l22 = *arg0
                        .add(48 + 7 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len23 = l22;
                    let bytes23 = _rt::Vec::from_raw_parts(l21.cast(), len23, len23);
                    let l24 = *arg0
                        .add(48 + 8 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l25 = *arg0
                        .add(48 + 9 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base29 = l24;
                    let len29 = l25;
                    let mut result29 = _rt::Vec::with_capacity(len29);
                    for i in 0..len29 {
                        let base = base29
                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                        let e29 = {
                            let l26 = *base.add(0).cast::<*mut u8>();
                            let l27 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len28 = l27;
                            let bytes28 = _rt::Vec::from_raw_parts(
                                l26.cast(),
                                len28,
                                len28,
                            );
                            _rt::string_lift(bytes28)
                        };
                        result29.push(e29);
                    }
                    _rt::cabi_dealloc(
                        base29,
                        len29 * (2 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let l30 = *arg0
                        .add(48 + 10 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l31 = *arg0
                        .add(48 + 11 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base38 = l30;
                    let len38 = l31;
                    let mut result38 = _rt::Vec::with_capacity(len38);
                    for i in 0..len38 {
                        let base = base38
                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                        let e38 = {
                            let l32 = *base.add(0).cast::<*mut u8>();
                            let l33 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len34 = l33;
                            let bytes34 = _rt::Vec::from_raw_parts(
                                l32.cast(),
                                len34,
                                len34,
                            );
                            let l35 = *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l36 = *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len37 = l36;
                            let bytes37 = _rt::Vec::from_raw_parts(
                                l35.cast(),
                                len37,
                                len37,
                            );
                            (_rt::string_lift(bytes34), _rt::string_lift(bytes37))
                        };
                        result38.push(e38);
                    }
                    _rt::cabi_dealloc(
                        base38,
                        len38 * (4 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let l39 = *arg0
                        .add(48 + 12 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l40 = *arg0
                        .add(48 + 13 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base47 = l39;
                    let len47 = l40;
                    let mut result47 = _rt::Vec::with_capacity(len47);
                    for i in 0..len47 {
                        let base = base47
                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                        let e47 = {
                            let l41 = *base.add(0).cast::<*mut u8>();
                            let l42 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len43 = l42;
                            let bytes43 = _rt::Vec::from_raw_parts(
                                l41.cast(),
                                len43,
                                len43,
                            );
                            let l44 = *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l45 = *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len46 = l45;
                            let bytes46 = _rt::Vec::from_raw_parts(
                                l44.cast(),
                                len46,
                                len46,
                            );
                            (_rt::string_lift(bytes43), _rt::string_lift(bytes46))
                        };
                        result47.push(e47);
                    }
                    _rt::cabi_dealloc(
                        base47,
                        len47 * (4 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let l48 = i32::from(
                        *arg0
                            .add(48 + 14 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let l49 = *arg0
                        .add(56 + 14 * ::core::mem::size_of::<*const u8>())
                        .cast::<i64>();
                    let l50 = *arg0
                        .add(64 + 14 * ::core::mem::size_of::<*const u8>())
                        .cast::<i64>();
                    let l51 = *arg0
                        .add(72 + 14 * ::core::mem::size_of::<*const u8>())
                        .cast::<i64>();
                    let l52 = *arg0
                        .add(80 + 14 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l53 = *arg0
                        .add(80 + 15 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base652 = l52;
                    let len652 = l53;
                    let mut result652 = _rt::Vec::with_capacity(len652);
                    for i in 0..len652 {
                        let base = base652
                            .add(i * (104 + 12 * ::core::mem::size_of::<*const u8>()));
                        let e652 = {
                            let l54 = i32::from(*base.add(0).cast::<u8>());
                            use super::super::super::super::golem::api::oplog::OplogEntry as V651;
                            let v651 = match l54 {
                                0 => {
                                    let e651 = {
                                        let l55 = *base.add(8).cast::<i64>();
                                        let l56 = *base.add(16).cast::<i32>();
                                        let l57 = *base.add(24).cast::<i64>();
                                        let l58 = *base.add(32).cast::<i64>();
                                        let l59 = *base.add(40).cast::<*mut u8>();
                                        let l60 = *base
                                            .add(40 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len61 = l60;
                                        let bytes61 = _rt::Vec::from_raw_parts(
                                            l59.cast(),
                                            len61,
                                            len61,
                                        );
                                        let l62 = *base
                                            .add(40 + 2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<i64>();
                                        let l63 = *base
                                            .add(48 + 2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l64 = *base
                                            .add(48 + 3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let base68 = l63;
                                        let len68 = l64;
                                        let mut result68 = _rt::Vec::with_capacity(len68);
                                        for i in 0..len68 {
                                            let base = base68
                                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                            let e68 = {
                                                let l65 = *base.add(0).cast::<*mut u8>();
                                                let l66 = *base
                                                    .add(::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len67 = l66;
                                                let bytes67 = _rt::Vec::from_raw_parts(
                                                    l65.cast(),
                                                    len67,
                                                    len67,
                                                );
                                                _rt::string_lift(bytes67)
                                            };
                                            result68.push(e68);
                                        }
                                        _rt::cabi_dealloc(
                                            base68,
                                            len68 * (2 * ::core::mem::size_of::<*const u8>()),
                                            ::core::mem::size_of::<*const u8>(),
                                        );
                                        let l69 = *base
                                            .add(48 + 4 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l70 = *base
                                            .add(48 + 5 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let base77 = l69;
                                        let len77 = l70;
                                        let mut result77 = _rt::Vec::with_capacity(len77);
                                        for i in 0..len77 {
                                            let base = base77
                                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                            let e77 = {
                                                let l71 = *base.add(0).cast::<*mut u8>();
                                                let l72 = *base
                                                    .add(::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len73 = l72;
                                                let bytes73 = _rt::Vec::from_raw_parts(
                                                    l71.cast(),
                                                    len73,
                                                    len73,
                                                );
                                                let l74 = *base
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l75 = *base
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len76 = l75;
                                                let bytes76 = _rt::Vec::from_raw_parts(
                                                    l74.cast(),
                                                    len76,
                                                    len76,
                                                );
                                                (_rt::string_lift(bytes73), _rt::string_lift(bytes76))
                                            };
                                            result77.push(e77);
                                        }
                                        _rt::cabi_dealloc(
                                            base77,
                                            len77 * (4 * ::core::mem::size_of::<*const u8>()),
                                            ::core::mem::size_of::<*const u8>(),
                                        );
                                        let l78 = *base
                                            .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l79 = *base
                                            .add(48 + 7 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len80 = l79;
                                        let bytes80 = _rt::Vec::from_raw_parts(
                                            l78.cast(),
                                            len80,
                                            len80,
                                        );
                                        let l81 = *base
                                            .add(48 + 8 * ::core::mem::size_of::<*const u8>())
                                            .cast::<i64>();
                                        let l82 = *base
                                            .add(56 + 8 * ::core::mem::size_of::<*const u8>())
                                            .cast::<i64>();
                                        let l83 = i32::from(
                                            *base
                                                .add(64 + 8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l89 = *base
                                            .add(88 + 10 * ::core::mem::size_of::<*const u8>())
                                            .cast::<i64>();
                                        let l90 = *base
                                            .add(96 + 10 * ::core::mem::size_of::<*const u8>())
                                            .cast::<i64>();
                                        let l91 = *base
                                            .add(104 + 10 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l92 = *base
                                            .add(104 + 11 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let base110 = l91;
                                        let len110 = l92;
                                        let mut result110 = _rt::Vec::with_capacity(len110);
                                        for i in 0..len110 {
                                            let base = base110
                                                .add(i * (16 + 6 * ::core::mem::size_of::<*const u8>()));
                                            let e110 = {
                                                let l93 = *base.add(0).cast::<i64>();
                                                let l94 = *base.add(8).cast::<i64>();
                                                let l95 = *base.add(16).cast::<*mut u8>();
                                                let l96 = *base
                                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len97 = l96;
                                                let bytes97 = _rt::Vec::from_raw_parts(
                                                    l95.cast(),
                                                    len97,
                                                    len97,
                                                );
                                                let l98 = *base
                                                    .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l99 = *base
                                                    .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len100 = l99;
                                                let bytes100 = _rt::Vec::from_raw_parts(
                                                    l98.cast(),
                                                    len100,
                                                    len100,
                                                );
                                                let l101 = *base
                                                    .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l102 = *base
                                                    .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let base109 = l101;
                                                let len109 = l102;
                                                let mut result109 = _rt::Vec::with_capacity(len109);
                                                for i in 0..len109 {
                                                    let base = base109
                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                    let e109 = {
                                                        let l103 = *base.add(0).cast::<*mut u8>();
                                                        let l104 = *base
                                                            .add(::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len105 = l104;
                                                        let bytes105 = _rt::Vec::from_raw_parts(
                                                            l103.cast(),
                                                            len105,
                                                            len105,
                                                        );
                                                        let l106 = *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l107 = *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len108 = l107;
                                                        let bytes108 = _rt::Vec::from_raw_parts(
                                                            l106.cast(),
                                                            len108,
                                                            len108,
                                                        );
                                                        (_rt::string_lift(bytes105), _rt::string_lift(bytes108))
                                                    };
                                                    result109.push(e109);
                                                }
                                                _rt::cabi_dealloc(
                                                    base109,
                                                    len109 * (4 * ::core::mem::size_of::<*const u8>()),
                                                    ::core::mem::size_of::<*const u8>(),
                                                );
                                                super::super::super::super::golem::api::oplog::PluginInstallationDescription {
                                                    installation_id: super::super::super::super::golem::rpc::types::Uuid {
                                                        high_bits: l93 as u64,
                                                        low_bits: l94 as u64,
                                                    },
                                                    name: _rt::string_lift(bytes97),
                                                    version: _rt::string_lift(bytes100),
                                                    parameters: result109,
                                                }
                                            };
                                            result110.push(e110);
                                        }
                                        _rt::cabi_dealloc(
                                            base110,
                                            len110 * (16 + 6 * ::core::mem::size_of::<*const u8>()),
                                            8,
                                        );
                                        super::super::super::super::golem::api::oplog::CreateParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l55 as u64,
                                                nanoseconds: l56 as u32,
                                            },
                                            agent_id: super::super::super::super::golem::rpc::types::AgentId {
                                                component_id: super::super::super::super::golem::rpc::types::ComponentId {
                                                    uuid: super::super::super::super::golem::rpc::types::Uuid {
                                                        high_bits: l57 as u64,
                                                        low_bits: l58 as u64,
                                                    },
                                                },
                                                agent_id: _rt::string_lift(bytes61),
                                            },
                                            component_version: l62 as u64,
                                            args: result68,
                                            env: result77,
                                            created_by: super::super::super::super::golem::api::host::AccountId {
                                                value: _rt::string_lift(bytes80),
                                            },
                                            project_id: super::super::super::super::golem::api::host::ProjectId {
                                                uuid: super::super::super::super::golem::rpc::types::Uuid {
                                                    high_bits: l81 as u64,
                                                    low_bits: l82 as u64,
                                                },
                                            },
                                            parent: match l83 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l84 = *base
                                                            .add(72 + 8 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i64>();
                                                        let l85 = *base
                                                            .add(80 + 8 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i64>();
                                                        let l86 = *base
                                                            .add(88 + 8 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l87 = *base
                                                            .add(88 + 9 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len88 = l87;
                                                        let bytes88 = _rt::Vec::from_raw_parts(
                                                            l86.cast(),
                                                            len88,
                                                            len88,
                                                        );
                                                        super::super::super::super::golem::rpc::types::AgentId {
                                                            component_id: super::super::super::super::golem::rpc::types::ComponentId {
                                                                uuid: super::super::super::super::golem::rpc::types::Uuid {
                                                                    high_bits: l84 as u64,
                                                                    low_bits: l85 as u64,
                                                                },
                                                            },
                                                            agent_id: _rt::string_lift(bytes88),
                                                        }
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            component_size: l89 as u64,
                                            initial_total_linear_memory_size: l90 as u64,
                                            initial_active_plugins: result110,
                                        }
                                    };
                                    V651::Create(e651)
                                }
                                1 => {
                                    let e651 = {
                                        let l111 = *base.add(8).cast::<i64>();
                                        let l112 = *base.add(16).cast::<i32>();
                                        let l113 = *base.add(24).cast::<*mut u8>();
                                        let l114 = *base
                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len115 = l114;
                                        let bytes115 = _rt::Vec::from_raw_parts(
                                            l113.cast(),
                                            len115,
                                            len115,
                                        );
                                        let l116 = *base
                                            .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l117 = *base
                                            .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let base163 = l116;
                                        let len163 = l117;
                                        let mut result163 = _rt::Vec::with_capacity(len163);
                                        for i in 0..len163 {
                                            let base = base163
                                                .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                            let e163 = {
                                                let l118 = i32::from(*base.add(0).cast::<u8>());
                                                use super::super::super::super::golem::rpc::types::WitNode as V162;
                                                let v162 = match l118 {
                                                    0 => {
                                                        let e162 = {
                                                            let l119 = *base.add(8).cast::<*mut u8>();
                                                            let l120 = *base
                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len121 = l120;
                                                            _rt::Vec::from_raw_parts(l119.cast(), len121, len121)
                                                        };
                                                        V162::RecordValue(e162)
                                                    }
                                                    1 => {
                                                        let e162 = {
                                                            let l122 = *base.add(8).cast::<i32>();
                                                            let l123 = i32::from(*base.add(12).cast::<u8>());
                                                            (
                                                                l122 as u32,
                                                                match l123 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l124 = *base.add(16).cast::<i32>();
                                                                            l124
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                            )
                                                        };
                                                        V162::VariantValue(e162)
                                                    }
                                                    2 => {
                                                        let e162 = {
                                                            let l125 = *base.add(8).cast::<i32>();
                                                            l125 as u32
                                                        };
                                                        V162::EnumValue(e162)
                                                    }
                                                    3 => {
                                                        let e162 = {
                                                            let l126 = *base.add(8).cast::<*mut u8>();
                                                            let l127 = *base
                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base129 = l126;
                                                            let len129 = l127;
                                                            let mut result129 = _rt::Vec::with_capacity(len129);
                                                            for i in 0..len129 {
                                                                let base = base129.add(i * 1);
                                                                let e129 = {
                                                                    let l128 = i32::from(*base.add(0).cast::<u8>());
                                                                    _rt::bool_lift(l128 as u8)
                                                                };
                                                                result129.push(e129);
                                                            }
                                                            _rt::cabi_dealloc(base129, len129 * 1, 1);
                                                            result129
                                                        };
                                                        V162::FlagsValue(e162)
                                                    }
                                                    4 => {
                                                        let e162 = {
                                                            let l130 = *base.add(8).cast::<*mut u8>();
                                                            let l131 = *base
                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len132 = l131;
                                                            _rt::Vec::from_raw_parts(l130.cast(), len132, len132)
                                                        };
                                                        V162::TupleValue(e162)
                                                    }
                                                    5 => {
                                                        let e162 = {
                                                            let l133 = *base.add(8).cast::<*mut u8>();
                                                            let l134 = *base
                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len135 = l134;
                                                            _rt::Vec::from_raw_parts(l133.cast(), len135, len135)
                                                        };
                                                        V162::ListValue(e162)
                                                    }
                                                    6 => {
                                                        let e162 = {
                                                            let l136 = i32::from(*base.add(8).cast::<u8>());
                                                            match l136 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l137 = *base.add(12).cast::<i32>();
                                                                        l137
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            }
                                                        };
                                                        V162::OptionValue(e162)
                                                    }
                                                    7 => {
                                                        let e162 = {
                                                            let l138 = i32::from(*base.add(8).cast::<u8>());
                                                            match l138 {
                                                                0 => {
                                                                    let e = {
                                                                        let l139 = i32::from(*base.add(12).cast::<u8>());
                                                                        match l139 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l140 = *base.add(16).cast::<i32>();
                                                                                    l140
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        }
                                                                    };
                                                                    Ok(e)
                                                                }
                                                                1 => {
                                                                    let e = {
                                                                        let l141 = i32::from(*base.add(12).cast::<u8>());
                                                                        match l141 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l142 = *base.add(16).cast::<i32>();
                                                                                    l142
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        }
                                                                    };
                                                                    Err(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            }
                                                        };
                                                        V162::ResultValue(e162)
                                                    }
                                                    8 => {
                                                        let e162 = {
                                                            let l143 = i32::from(*base.add(8).cast::<u8>());
                                                            l143 as u8
                                                        };
                                                        V162::PrimU8(e162)
                                                    }
                                                    9 => {
                                                        let e162 = {
                                                            let l144 = i32::from(*base.add(8).cast::<u16>());
                                                            l144 as u16
                                                        };
                                                        V162::PrimU16(e162)
                                                    }
                                                    10 => {
                                                        let e162 = {
                                                            let l145 = *base.add(8).cast::<i32>();
                                                            l145 as u32
                                                        };
                                                        V162::PrimU32(e162)
                                                    }
                                                    11 => {
                                                        let e162 = {
                                                            let l146 = *base.add(8).cast::<i64>();
                                                            l146 as u64
                                                        };
                                                        V162::PrimU64(e162)
                                                    }
                                                    12 => {
                                                        let e162 = {
                                                            let l147 = i32::from(*base.add(8).cast::<i8>());
                                                            l147 as i8
                                                        };
                                                        V162::PrimS8(e162)
                                                    }
                                                    13 => {
                                                        let e162 = {
                                                            let l148 = i32::from(*base.add(8).cast::<i16>());
                                                            l148 as i16
                                                        };
                                                        V162::PrimS16(e162)
                                                    }
                                                    14 => {
                                                        let e162 = {
                                                            let l149 = *base.add(8).cast::<i32>();
                                                            l149
                                                        };
                                                        V162::PrimS32(e162)
                                                    }
                                                    15 => {
                                                        let e162 = {
                                                            let l150 = *base.add(8).cast::<i64>();
                                                            l150
                                                        };
                                                        V162::PrimS64(e162)
                                                    }
                                                    16 => {
                                                        let e162 = {
                                                            let l151 = *base.add(8).cast::<f32>();
                                                            l151
                                                        };
                                                        V162::PrimFloat32(e162)
                                                    }
                                                    17 => {
                                                        let e162 = {
                                                            let l152 = *base.add(8).cast::<f64>();
                                                            l152
                                                        };
                                                        V162::PrimFloat64(e162)
                                                    }
                                                    18 => {
                                                        let e162 = {
                                                            let l153 = *base.add(8).cast::<i32>();
                                                            _rt::char_lift(l153 as u32)
                                                        };
                                                        V162::PrimChar(e162)
                                                    }
                                                    19 => {
                                                        let e162 = {
                                                            let l154 = i32::from(*base.add(8).cast::<u8>());
                                                            _rt::bool_lift(l154 as u8)
                                                        };
                                                        V162::PrimBool(e162)
                                                    }
                                                    20 => {
                                                        let e162 = {
                                                            let l155 = *base.add(8).cast::<*mut u8>();
                                                            let l156 = *base
                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len157 = l156;
                                                            let bytes157 = _rt::Vec::from_raw_parts(
                                                                l155.cast(),
                                                                len157,
                                                                len157,
                                                            );
                                                            _rt::string_lift(bytes157)
                                                        };
                                                        V162::PrimString(e162)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                        let e162 = {
                                                            let l158 = *base.add(8).cast::<*mut u8>();
                                                            let l159 = *base
                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len160 = l159;
                                                            let bytes160 = _rt::Vec::from_raw_parts(
                                                                l158.cast(),
                                                                len160,
                                                                len160,
                                                            );
                                                            let l161 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<i64>();
                                                            (
                                                                super::super::super::super::golem::rpc::types::Uri {
                                                                    value: _rt::string_lift(bytes160),
                                                                },
                                                                l161 as u64,
                                                            )
                                                        };
                                                        V162::Handle(e162)
                                                    }
                                                };
                                                v162
                                            };
                                            result163.push(e163);
                                        }
                                        _rt::cabi_dealloc(
                                            base163,
                                            len163 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                            8,
                                        );
                                        let l164 = *base
                                            .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l165 = *base
                                            .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let base211 = l164;
                                        let len211 = l165;
                                        let mut result211 = _rt::Vec::with_capacity(len211);
                                        for i in 0..len211 {
                                            let base = base211
                                                .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                            let e211 = {
                                                let l166 = i32::from(*base.add(0).cast::<u8>());
                                                use super::super::super::super::golem::rpc::types::WitNode as V210;
                                                let v210 = match l166 {
                                                    0 => {
                                                        let e210 = {
                                                            let l167 = *base.add(8).cast::<*mut u8>();
                                                            let l168 = *base
                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len169 = l168;
                                                            _rt::Vec::from_raw_parts(l167.cast(), len169, len169)
                                                        };
                                                        V210::RecordValue(e210)
                                                    }
                                                    1 => {
                                                        let e210 = {
                                                            let l170 = *base.add(8).cast::<i32>();
                                                            let l171 = i32::from(*base.add(12).cast::<u8>());
                                                            (
                                                                l170 as u32,
                                                                match l171 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l172 = *base.add(16).cast::<i32>();
                                                                            l172
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                            )
                                                        };
                                                        V210::VariantValue(e210)
                                                    }
                                                    2 => {
                                                        let e210 = {
                                                            let l173 = *base.add(8).cast::<i32>();
                                                            l173 as u32
                                                        };
                                                        V210::EnumValue(e210)
                                                    }
                                                    3 => {
                                                        let e210 = {
                                                            let l174 = *base.add(8).cast::<*mut u8>();
                                                            let l175 = *base
                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base177 = l174;
                                                            let len177 = l175;
                                                            let mut result177 = _rt::Vec::with_capacity(len177);
                                                            for i in 0..len177 {
                                                                let base = base177.add(i * 1);
                                                                let e177 = {
                                                                    let l176 = i32::from(*base.add(0).cast::<u8>());
                                                                    _rt::bool_lift(l176 as u8)
                                                                };
                                                                result177.push(e177);
                                                            }
                                                            _rt::cabi_dealloc(base177, len177 * 1, 1);
                                                            result177
                                                        };
                                                        V210::FlagsValue(e210)
                                                    }
                                                    4 => {
                                                        let e210 = {
                                                            let l178 = *base.add(8).cast::<*mut u8>();
                                                            let l179 = *base
                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len180 = l179;
                                                            _rt::Vec::from_raw_parts(l178.cast(), len180, len180)
                                                        };
                                                        V210::TupleValue(e210)
                                                    }
                                                    5 => {
                                                        let e210 = {
                                                            let l181 = *base.add(8).cast::<*mut u8>();
                                                            let l182 = *base
                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len183 = l182;
                                                            _rt::Vec::from_raw_parts(l181.cast(), len183, len183)
                                                        };
                                                        V210::ListValue(e210)
                                                    }
                                                    6 => {
                                                        let e210 = {
                                                            let l184 = i32::from(*base.add(8).cast::<u8>());
                                                            match l184 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l185 = *base.add(12).cast::<i32>();
                                                                        l185
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            }
                                                        };
                                                        V210::OptionValue(e210)
                                                    }
                                                    7 => {
                                                        let e210 = {
                                                            let l186 = i32::from(*base.add(8).cast::<u8>());
                                                            match l186 {
                                                                0 => {
                                                                    let e = {
                                                                        let l187 = i32::from(*base.add(12).cast::<u8>());
                                                                        match l187 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l188 = *base.add(16).cast::<i32>();
                                                                                    l188
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        }
                                                                    };
                                                                    Ok(e)
                                                                }
                                                                1 => {
                                                                    let e = {
                                                                        let l189 = i32::from(*base.add(12).cast::<u8>());
                                                                        match l189 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l190 = *base.add(16).cast::<i32>();
                                                                                    l190
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        }
                                                                    };
                                                                    Err(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            }
                                                        };
                                                        V210::ResultValue(e210)
                                                    }
                                                    8 => {
                                                        let e210 = {
                                                            let l191 = i32::from(*base.add(8).cast::<u8>());
                                                            l191 as u8
                                                        };
                                                        V210::PrimU8(e210)
                                                    }
                                                    9 => {
                                                        let e210 = {
                                                            let l192 = i32::from(*base.add(8).cast::<u16>());
                                                            l192 as u16
                                                        };
                                                        V210::PrimU16(e210)
                                                    }
                                                    10 => {
                                                        let e210 = {
                                                            let l193 = *base.add(8).cast::<i32>();
                                                            l193 as u32
                                                        };
                                                        V210::PrimU32(e210)
                                                    }
                                                    11 => {
                                                        let e210 = {
                                                            let l194 = *base.add(8).cast::<i64>();
                                                            l194 as u64
                                                        };
                                                        V210::PrimU64(e210)
                                                    }
                                                    12 => {
                                                        let e210 = {
                                                            let l195 = i32::from(*base.add(8).cast::<i8>());
                                                            l195 as i8
                                                        };
                                                        V210::PrimS8(e210)
                                                    }
                                                    13 => {
                                                        let e210 = {
                                                            let l196 = i32::from(*base.add(8).cast::<i16>());
                                                            l196 as i16
                                                        };
                                                        V210::PrimS16(e210)
                                                    }
                                                    14 => {
                                                        let e210 = {
                                                            let l197 = *base.add(8).cast::<i32>();
                                                            l197
                                                        };
                                                        V210::PrimS32(e210)
                                                    }
                                                    15 => {
                                                        let e210 = {
                                                            let l198 = *base.add(8).cast::<i64>();
                                                            l198
                                                        };
                                                        V210::PrimS64(e210)
                                                    }
                                                    16 => {
                                                        let e210 = {
                                                            let l199 = *base.add(8).cast::<f32>();
                                                            l199
                                                        };
                                                        V210::PrimFloat32(e210)
                                                    }
                                                    17 => {
                                                        let e210 = {
                                                            let l200 = *base.add(8).cast::<f64>();
                                                            l200
                                                        };
                                                        V210::PrimFloat64(e210)
                                                    }
                                                    18 => {
                                                        let e210 = {
                                                            let l201 = *base.add(8).cast::<i32>();
                                                            _rt::char_lift(l201 as u32)
                                                        };
                                                        V210::PrimChar(e210)
                                                    }
                                                    19 => {
                                                        let e210 = {
                                                            let l202 = i32::from(*base.add(8).cast::<u8>());
                                                            _rt::bool_lift(l202 as u8)
                                                        };
                                                        V210::PrimBool(e210)
                                                    }
                                                    20 => {
                                                        let e210 = {
                                                            let l203 = *base.add(8).cast::<*mut u8>();
                                                            let l204 = *base
                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len205 = l204;
                                                            let bytes205 = _rt::Vec::from_raw_parts(
                                                                l203.cast(),
                                                                len205,
                                                                len205,
                                                            );
                                                            _rt::string_lift(bytes205)
                                                        };
                                                        V210::PrimString(e210)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                        let e210 = {
                                                            let l206 = *base.add(8).cast::<*mut u8>();
                                                            let l207 = *base
                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len208 = l207;
                                                            let bytes208 = _rt::Vec::from_raw_parts(
                                                                l206.cast(),
                                                                len208,
                                                                len208,
                                                            );
                                                            let l209 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<i64>();
                                                            (
                                                                super::super::super::super::golem::rpc::types::Uri {
                                                                    value: _rt::string_lift(bytes208),
                                                                },
                                                                l209 as u64,
                                                            )
                                                        };
                                                        V210::Handle(e210)
                                                    }
                                                };
                                                v210
                                            };
                                            result211.push(e211);
                                        }
                                        _rt::cabi_dealloc(
                                            base211,
                                            len211 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                            8,
                                        );
                                        let l212 = i32::from(
                                            *base
                                                .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        use super::super::super::super::golem::api::oplog::WrappedFunctionType as V217;
                                        let v217 = match l212 {
                                            0 => V217::ReadLocal,
                                            1 => V217::WriteLocal,
                                            2 => V217::ReadRemote,
                                            3 => V217::WriteRemote,
                                            4 => {
                                                let e217 = {
                                                    let l213 = i32::from(
                                                        *base
                                                            .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l213 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l214 = *base
                                                                    .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<i64>();
                                                                l214 as u64
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    }
                                                };
                                                V217::WriteRemoteBatched(e217)
                                            }
                                            n => {
                                                debug_assert_eq!(n, 5, "invalid enum discriminant");
                                                let e217 = {
                                                    let l215 = i32::from(
                                                        *base
                                                            .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l215 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l216 = *base
                                                                    .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<i64>();
                                                                l216 as u64
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    }
                                                };
                                                V217::WriteRemoteTransaction(e217)
                                            }
                                        };
                                        super::super::super::super::golem::api::oplog::ImportedFunctionInvokedParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l111 as u64,
                                                nanoseconds: l112 as u32,
                                            },
                                            function_name: _rt::string_lift(bytes115),
                                            request: super::super::super::super::golem::rpc::types::WitValue {
                                                nodes: result163,
                                            },
                                            response: super::super::super::super::golem::rpc::types::WitValue {
                                                nodes: result211,
                                            },
                                            wrapped_function_type: v217,
                                        }
                                    };
                                    V651::ImportedFunctionInvoked(e651)
                                }
                                2 => {
                                    let e651 = {
                                        let l218 = *base.add(8).cast::<i64>();
                                        let l219 = *base.add(16).cast::<i32>();
                                        let l220 = *base.add(24).cast::<*mut u8>();
                                        let l221 = *base
                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len222 = l221;
                                        let bytes222 = _rt::Vec::from_raw_parts(
                                            l220.cast(),
                                            len222,
                                            len222,
                                        );
                                        let l223 = *base
                                            .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l224 = *base
                                            .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let base273 = l223;
                                        let len273 = l224;
                                        let mut result273 = _rt::Vec::with_capacity(len273);
                                        for i in 0..len273 {
                                            let base = base273
                                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                            let e273 = {
                                                let l225 = *base.add(0).cast::<*mut u8>();
                                                let l226 = *base
                                                    .add(::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let base272 = l225;
                                                let len272 = l226;
                                                let mut result272 = _rt::Vec::with_capacity(len272);
                                                for i in 0..len272 {
                                                    let base = base272
                                                        .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                    let e272 = {
                                                        let l227 = i32::from(*base.add(0).cast::<u8>());
                                                        use super::super::super::super::golem::rpc::types::WitNode as V271;
                                                        let v271 = match l227 {
                                                            0 => {
                                                                let e271 = {
                                                                    let l228 = *base.add(8).cast::<*mut u8>();
                                                                    let l229 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len230 = l229;
                                                                    _rt::Vec::from_raw_parts(l228.cast(), len230, len230)
                                                                };
                                                                V271::RecordValue(e271)
                                                            }
                                                            1 => {
                                                                let e271 = {
                                                                    let l231 = *base.add(8).cast::<i32>();
                                                                    let l232 = i32::from(*base.add(12).cast::<u8>());
                                                                    (
                                                                        l231 as u32,
                                                                        match l232 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l233 = *base.add(16).cast::<i32>();
                                                                                    l233
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    )
                                                                };
                                                                V271::VariantValue(e271)
                                                            }
                                                            2 => {
                                                                let e271 = {
                                                                    let l234 = *base.add(8).cast::<i32>();
                                                                    l234 as u32
                                                                };
                                                                V271::EnumValue(e271)
                                                            }
                                                            3 => {
                                                                let e271 = {
                                                                    let l235 = *base.add(8).cast::<*mut u8>();
                                                                    let l236 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base238 = l235;
                                                                    let len238 = l236;
                                                                    let mut result238 = _rt::Vec::with_capacity(len238);
                                                                    for i in 0..len238 {
                                                                        let base = base238.add(i * 1);
                                                                        let e238 = {
                                                                            let l237 = i32::from(*base.add(0).cast::<u8>());
                                                                            _rt::bool_lift(l237 as u8)
                                                                        };
                                                                        result238.push(e238);
                                                                    }
                                                                    _rt::cabi_dealloc(base238, len238 * 1, 1);
                                                                    result238
                                                                };
                                                                V271::FlagsValue(e271)
                                                            }
                                                            4 => {
                                                                let e271 = {
                                                                    let l239 = *base.add(8).cast::<*mut u8>();
                                                                    let l240 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len241 = l240;
                                                                    _rt::Vec::from_raw_parts(l239.cast(), len241, len241)
                                                                };
                                                                V271::TupleValue(e271)
                                                            }
                                                            5 => {
                                                                let e271 = {
                                                                    let l242 = *base.add(8).cast::<*mut u8>();
                                                                    let l243 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len244 = l243;
                                                                    _rt::Vec::from_raw_parts(l242.cast(), len244, len244)
                                                                };
                                                                V271::ListValue(e271)
                                                            }
                                                            6 => {
                                                                let e271 = {
                                                                    let l245 = i32::from(*base.add(8).cast::<u8>());
                                                                    match l245 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l246 = *base.add(12).cast::<i32>();
                                                                                l246
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                V271::OptionValue(e271)
                                                            }
                                                            7 => {
                                                                let e271 = {
                                                                    let l247 = i32::from(*base.add(8).cast::<u8>());
                                                                    match l247 {
                                                                        0 => {
                                                                            let e = {
                                                                                let l248 = i32::from(*base.add(12).cast::<u8>());
                                                                                match l248 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l249 = *base.add(16).cast::<i32>();
                                                                                            l249
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                }
                                                                            };
                                                                            Ok(e)
                                                                        }
                                                                        1 => {
                                                                            let e = {
                                                                                let l250 = i32::from(*base.add(12).cast::<u8>());
                                                                                match l250 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l251 = *base.add(16).cast::<i32>();
                                                                                            l251
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                }
                                                                            };
                                                                            Err(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                V271::ResultValue(e271)
                                                            }
                                                            8 => {
                                                                let e271 = {
                                                                    let l252 = i32::from(*base.add(8).cast::<u8>());
                                                                    l252 as u8
                                                                };
                                                                V271::PrimU8(e271)
                                                            }
                                                            9 => {
                                                                let e271 = {
                                                                    let l253 = i32::from(*base.add(8).cast::<u16>());
                                                                    l253 as u16
                                                                };
                                                                V271::PrimU16(e271)
                                                            }
                                                            10 => {
                                                                let e271 = {
                                                                    let l254 = *base.add(8).cast::<i32>();
                                                                    l254 as u32
                                                                };
                                                                V271::PrimU32(e271)
                                                            }
                                                            11 => {
                                                                let e271 = {
                                                                    let l255 = *base.add(8).cast::<i64>();
                                                                    l255 as u64
                                                                };
                                                                V271::PrimU64(e271)
                                                            }
                                                            12 => {
                                                                let e271 = {
                                                                    let l256 = i32::from(*base.add(8).cast::<i8>());
                                                                    l256 as i8
                                                                };
                                                                V271::PrimS8(e271)
                                                            }
                                                            13 => {
                                                                let e271 = {
                                                                    let l257 = i32::from(*base.add(8).cast::<i16>());
                                                                    l257 as i16
                                                                };
                                                                V271::PrimS16(e271)
                                                            }
                                                            14 => {
                                                                let e271 = {
                                                                    let l258 = *base.add(8).cast::<i32>();
                                                                    l258
                                                                };
                                                                V271::PrimS32(e271)
                                                            }
                                                            15 => {
                                                                let e271 = {
                                                                    let l259 = *base.add(8).cast::<i64>();
                                                                    l259
                                                                };
                                                                V271::PrimS64(e271)
                                                            }
                                                            16 => {
                                                                let e271 = {
                                                                    let l260 = *base.add(8).cast::<f32>();
                                                                    l260
                                                                };
                                                                V271::PrimFloat32(e271)
                                                            }
                                                            17 => {
                                                                let e271 = {
                                                                    let l261 = *base.add(8).cast::<f64>();
                                                                    l261
                                                                };
                                                                V271::PrimFloat64(e271)
                                                            }
                                                            18 => {
                                                                let e271 = {
                                                                    let l262 = *base.add(8).cast::<i32>();
                                                                    _rt::char_lift(l262 as u32)
                                                                };
                                                                V271::PrimChar(e271)
                                                            }
                                                            19 => {
                                                                let e271 = {
                                                                    let l263 = i32::from(*base.add(8).cast::<u8>());
                                                                    _rt::bool_lift(l263 as u8)
                                                                };
                                                                V271::PrimBool(e271)
                                                            }
                                                            20 => {
                                                                let e271 = {
                                                                    let l264 = *base.add(8).cast::<*mut u8>();
                                                                    let l265 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len266 = l265;
                                                                    let bytes266 = _rt::Vec::from_raw_parts(
                                                                        l264.cast(),
                                                                        len266,
                                                                        len266,
                                                                    );
                                                                    _rt::string_lift(bytes266)
                                                                };
                                                                V271::PrimString(e271)
                                                            }
                                                            n => {
                                                                debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                let e271 = {
                                                                    let l267 = *base.add(8).cast::<*mut u8>();
                                                                    let l268 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len269 = l268;
                                                                    let bytes269 = _rt::Vec::from_raw_parts(
                                                                        l267.cast(),
                                                                        len269,
                                                                        len269,
                                                                    );
                                                                    let l270 = *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i64>();
                                                                    (
                                                                        super::super::super::super::golem::rpc::types::Uri {
                                                                            value: _rt::string_lift(bytes269),
                                                                        },
                                                                        l270 as u64,
                                                                    )
                                                                };
                                                                V271::Handle(e271)
                                                            }
                                                        };
                                                        v271
                                                    };
                                                    result272.push(e272);
                                                }
                                                _rt::cabi_dealloc(
                                                    base272,
                                                    len272 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                    8,
                                                );
                                                super::super::super::super::golem::rpc::types::WitValue {
                                                    nodes: result272,
                                                }
                                            };
                                            result273.push(e273);
                                        }
                                        _rt::cabi_dealloc(
                                            base273,
                                            len273 * (2 * ::core::mem::size_of::<*const u8>()),
                                            ::core::mem::size_of::<*const u8>(),
                                        );
                                        let l274 = *base
                                            .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l275 = *base
                                            .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len276 = l275;
                                        let bytes276 = _rt::Vec::from_raw_parts(
                                            l274.cast(),
                                            len276,
                                            len276,
                                        );
                                        let l277 = *base
                                            .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l278 = *base
                                            .add(24 + 7 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len279 = l278;
                                        let bytes279 = _rt::Vec::from_raw_parts(
                                            l277.cast(),
                                            len279,
                                            len279,
                                        );
                                        let l280 = *base
                                            .add(24 + 8 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l281 = *base
                                            .add(24 + 9 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let base285 = l280;
                                        let len285 = l281;
                                        let mut result285 = _rt::Vec::with_capacity(len285);
                                        for i in 0..len285 {
                                            let base = base285
                                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                            let e285 = {
                                                let l282 = *base.add(0).cast::<*mut u8>();
                                                let l283 = *base
                                                    .add(::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len284 = l283;
                                                let bytes284 = _rt::Vec::from_raw_parts(
                                                    l282.cast(),
                                                    len284,
                                                    len284,
                                                );
                                                _rt::string_lift(bytes284)
                                            };
                                            result285.push(e285);
                                        }
                                        _rt::cabi_dealloc(
                                            base285,
                                            len285 * (2 * ::core::mem::size_of::<*const u8>()),
                                            ::core::mem::size_of::<*const u8>(),
                                        );
                                        let l286 = *base
                                            .add(24 + 10 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l287 = *base
                                            .add(24 + 11 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let base319 = l286;
                                        let len319 = l287;
                                        let mut result319 = _rt::Vec::with_capacity(len319);
                                        for i in 0..len319 {
                                            let base = base319
                                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                            let e319 = {
                                                let l288 = *base.add(0).cast::<*mut u8>();
                                                let l289 = *base
                                                    .add(::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let base318 = l288;
                                                let len318 = l289;
                                                let mut result318 = _rt::Vec::with_capacity(len318);
                                                for i in 0..len318 {
                                                    let base = base318
                                                        .add(i * (56 + 6 * ::core::mem::size_of::<*const u8>()));
                                                    let e318 = {
                                                        let l290 = i32::from(*base.add(0).cast::<u8>());
                                                        use super::super::super::super::golem::api::oplog::SpanData as V317;
                                                        let v317 = match l290 {
                                                            0 => {
                                                                let e317 = {
                                                                    let l291 = *base.add(8).cast::<*mut u8>();
                                                                    let l292 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len293 = l292;
                                                                    let bytes293 = _rt::Vec::from_raw_parts(
                                                                        l291.cast(),
                                                                        len293,
                                                                        len293,
                                                                    );
                                                                    let l294 = *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i64>();
                                                                    let l295 = *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i32>();
                                                                    let l296 = i32::from(
                                                                        *base
                                                                            .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l300 = i32::from(
                                                                        *base
                                                                            .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    let l302 = *base
                                                                        .add(48 + 4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l303 = *base
                                                                        .add(48 + 5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base312 = l302;
                                                                    let len312 = l303;
                                                                    let mut result312 = _rt::Vec::with_capacity(len312);
                                                                    for i in 0..len312 {
                                                                        let base = base312
                                                                            .add(i * (5 * ::core::mem::size_of::<*const u8>()));
                                                                        let e312 = {
                                                                            let l304 = *base.add(0).cast::<*mut u8>();
                                                                            let l305 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len306 = l305;
                                                                            let bytes306 = _rt::Vec::from_raw_parts(
                                                                                l304.cast(),
                                                                                len306,
                                                                                len306,
                                                                            );
                                                                            let l307 = i32::from(
                                                                                *base
                                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            use super::super::super::super::golem::api::context::AttributeValue as V311;
                                                                            let v311 = match l307 {
                                                                                n => {
                                                                                    debug_assert_eq!(n, 0, "invalid enum discriminant");
                                                                                    let e311 = {
                                                                                        let l308 = *base
                                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<*mut u8>();
                                                                                        let l309 = *base
                                                                                            .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<usize>();
                                                                                        let len310 = l309;
                                                                                        let bytes310 = _rt::Vec::from_raw_parts(
                                                                                            l308.cast(),
                                                                                            len310,
                                                                                            len310,
                                                                                        );
                                                                                        _rt::string_lift(bytes310)
                                                                                    };
                                                                                    V311::String(e311)
                                                                                }
                                                                            };
                                                                            super::super::super::super::golem::api::context::Attribute {
                                                                                key: _rt::string_lift(bytes306),
                                                                                value: v311,
                                                                            }
                                                                        };
                                                                        result312.push(e312);
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base312,
                                                                        len312 * (5 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let l313 = i32::from(
                                                                        *base
                                                                            .add(48 + 6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    super::super::super::super::golem::api::oplog::LocalSpanData {
                                                                        span_id: _rt::string_lift(bytes293),
                                                                        start: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                                            seconds: l294 as u64,
                                                                            nanoseconds: l295 as u32,
                                                                        },
                                                                        parent: match l296 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l297 = *base
                                                                                        .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l298 = *base
                                                                                        .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len299 = l298;
                                                                                    let bytes299 = _rt::Vec::from_raw_parts(
                                                                                        l297.cast(),
                                                                                        len299,
                                                                                        len299,
                                                                                    );
                                                                                    _rt::string_lift(bytes299)
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        linked_context: match l300 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l301 = *base
                                                                                        .add(40 + 4 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i64>();
                                                                                    l301 as u64
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                        attributes: result312,
                                                                        inherited: _rt::bool_lift(l313 as u8),
                                                                    }
                                                                };
                                                                V317::LocalSpan(e317)
                                                            }
                                                            n => {
                                                                debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                                let e317 = {
                                                                    let l314 = *base.add(8).cast::<*mut u8>();
                                                                    let l315 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len316 = l315;
                                                                    let bytes316 = _rt::Vec::from_raw_parts(
                                                                        l314.cast(),
                                                                        len316,
                                                                        len316,
                                                                    );
                                                                    super::super::super::super::golem::api::oplog::ExternalSpanData {
                                                                        span_id: _rt::string_lift(bytes316),
                                                                    }
                                                                };
                                                                V317::ExternalSpan(e317)
                                                            }
                                                        };
                                                        v317
                                                    };
                                                    result318.push(e318);
                                                }
                                                _rt::cabi_dealloc(
                                                    base318,
                                                    len318 * (56 + 6 * ::core::mem::size_of::<*const u8>()),
                                                    8,
                                                );
                                                result318
                                            };
                                            result319.push(e319);
                                        }
                                        _rt::cabi_dealloc(
                                            base319,
                                            len319 * (2 * ::core::mem::size_of::<*const u8>()),
                                            ::core::mem::size_of::<*const u8>(),
                                        );
                                        super::super::super::super::golem::api::oplog::ExportedFunctionInvokedParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l218 as u64,
                                                nanoseconds: l219 as u32,
                                            },
                                            function_name: _rt::string_lift(bytes222),
                                            request: result273,
                                            idempotency_key: _rt::string_lift(bytes276),
                                            trace_id: _rt::string_lift(bytes279),
                                            trace_states: result285,
                                            invocation_context: result319,
                                        }
                                    };
                                    V651::ExportedFunctionInvoked(e651)
                                }
                                3 => {
                                    let e651 = {
                                        let l320 = *base.add(8).cast::<i64>();
                                        let l321 = *base.add(16).cast::<i32>();
                                        let l322 = i32::from(*base.add(24).cast::<u8>());
                                        let l371 = *base
                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<i64>();
                                        super::super::super::super::golem::api::oplog::ExportedFunctionCompletedParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l320 as u64,
                                                nanoseconds: l321 as u32,
                                            },
                                            response: match l322 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l323 = *base
                                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l324 = *base
                                                            .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base370 = l323;
                                                        let len370 = l324;
                                                        let mut result370 = _rt::Vec::with_capacity(len370);
                                                        for i in 0..len370 {
                                                            let base = base370
                                                                .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                            let e370 = {
                                                                let l325 = i32::from(*base.add(0).cast::<u8>());
                                                                use super::super::super::super::golem::rpc::types::WitNode as V369;
                                                                let v369 = match l325 {
                                                                    0 => {
                                                                        let e369 = {
                                                                            let l326 = *base.add(8).cast::<*mut u8>();
                                                                            let l327 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len328 = l327;
                                                                            _rt::Vec::from_raw_parts(l326.cast(), len328, len328)
                                                                        };
                                                                        V369::RecordValue(e369)
                                                                    }
                                                                    1 => {
                                                                        let e369 = {
                                                                            let l329 = *base.add(8).cast::<i32>();
                                                                            let l330 = i32::from(*base.add(12).cast::<u8>());
                                                                            (
                                                                                l329 as u32,
                                                                                match l330 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l331 = *base.add(16).cast::<i32>();
                                                                                            l331
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                },
                                                                            )
                                                                        };
                                                                        V369::VariantValue(e369)
                                                                    }
                                                                    2 => {
                                                                        let e369 = {
                                                                            let l332 = *base.add(8).cast::<i32>();
                                                                            l332 as u32
                                                                        };
                                                                        V369::EnumValue(e369)
                                                                    }
                                                                    3 => {
                                                                        let e369 = {
                                                                            let l333 = *base.add(8).cast::<*mut u8>();
                                                                            let l334 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base336 = l333;
                                                                            let len336 = l334;
                                                                            let mut result336 = _rt::Vec::with_capacity(len336);
                                                                            for i in 0..len336 {
                                                                                let base = base336.add(i * 1);
                                                                                let e336 = {
                                                                                    let l335 = i32::from(*base.add(0).cast::<u8>());
                                                                                    _rt::bool_lift(l335 as u8)
                                                                                };
                                                                                result336.push(e336);
                                                                            }
                                                                            _rt::cabi_dealloc(base336, len336 * 1, 1);
                                                                            result336
                                                                        };
                                                                        V369::FlagsValue(e369)
                                                                    }
                                                                    4 => {
                                                                        let e369 = {
                                                                            let l337 = *base.add(8).cast::<*mut u8>();
                                                                            let l338 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len339 = l338;
                                                                            _rt::Vec::from_raw_parts(l337.cast(), len339, len339)
                                                                        };
                                                                        V369::TupleValue(e369)
                                                                    }
                                                                    5 => {
                                                                        let e369 = {
                                                                            let l340 = *base.add(8).cast::<*mut u8>();
                                                                            let l341 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len342 = l341;
                                                                            _rt::Vec::from_raw_parts(l340.cast(), len342, len342)
                                                                        };
                                                                        V369::ListValue(e369)
                                                                    }
                                                                    6 => {
                                                                        let e369 = {
                                                                            let l343 = i32::from(*base.add(8).cast::<u8>());
                                                                            match l343 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l344 = *base.add(12).cast::<i32>();
                                                                                        l344
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            }
                                                                        };
                                                                        V369::OptionValue(e369)
                                                                    }
                                                                    7 => {
                                                                        let e369 = {
                                                                            let l345 = i32::from(*base.add(8).cast::<u8>());
                                                                            match l345 {
                                                                                0 => {
                                                                                    let e = {
                                                                                        let l346 = i32::from(*base.add(12).cast::<u8>());
                                                                                        match l346 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l347 = *base.add(16).cast::<i32>();
                                                                                                    l347
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        }
                                                                                    };
                                                                                    Ok(e)
                                                                                }
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l348 = i32::from(*base.add(12).cast::<u8>());
                                                                                        match l348 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l349 = *base.add(16).cast::<i32>();
                                                                                                    l349
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        }
                                                                                    };
                                                                                    Err(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            }
                                                                        };
                                                                        V369::ResultValue(e369)
                                                                    }
                                                                    8 => {
                                                                        let e369 = {
                                                                            let l350 = i32::from(*base.add(8).cast::<u8>());
                                                                            l350 as u8
                                                                        };
                                                                        V369::PrimU8(e369)
                                                                    }
                                                                    9 => {
                                                                        let e369 = {
                                                                            let l351 = i32::from(*base.add(8).cast::<u16>());
                                                                            l351 as u16
                                                                        };
                                                                        V369::PrimU16(e369)
                                                                    }
                                                                    10 => {
                                                                        let e369 = {
                                                                            let l352 = *base.add(8).cast::<i32>();
                                                                            l352 as u32
                                                                        };
                                                                        V369::PrimU32(e369)
                                                                    }
                                                                    11 => {
                                                                        let e369 = {
                                                                            let l353 = *base.add(8).cast::<i64>();
                                                                            l353 as u64
                                                                        };
                                                                        V369::PrimU64(e369)
                                                                    }
                                                                    12 => {
                                                                        let e369 = {
                                                                            let l354 = i32::from(*base.add(8).cast::<i8>());
                                                                            l354 as i8
                                                                        };
                                                                        V369::PrimS8(e369)
                                                                    }
                                                                    13 => {
                                                                        let e369 = {
                                                                            let l355 = i32::from(*base.add(8).cast::<i16>());
                                                                            l355 as i16
                                                                        };
                                                                        V369::PrimS16(e369)
                                                                    }
                                                                    14 => {
                                                                        let e369 = {
                                                                            let l356 = *base.add(8).cast::<i32>();
                                                                            l356
                                                                        };
                                                                        V369::PrimS32(e369)
                                                                    }
                                                                    15 => {
                                                                        let e369 = {
                                                                            let l357 = *base.add(8).cast::<i64>();
                                                                            l357
                                                                        };
                                                                        V369::PrimS64(e369)
                                                                    }
                                                                    16 => {
                                                                        let e369 = {
                                                                            let l358 = *base.add(8).cast::<f32>();
                                                                            l358
                                                                        };
                                                                        V369::PrimFloat32(e369)
                                                                    }
                                                                    17 => {
                                                                        let e369 = {
                                                                            let l359 = *base.add(8).cast::<f64>();
                                                                            l359
                                                                        };
                                                                        V369::PrimFloat64(e369)
                                                                    }
                                                                    18 => {
                                                                        let e369 = {
                                                                            let l360 = *base.add(8).cast::<i32>();
                                                                            _rt::char_lift(l360 as u32)
                                                                        };
                                                                        V369::PrimChar(e369)
                                                                    }
                                                                    19 => {
                                                                        let e369 = {
                                                                            let l361 = i32::from(*base.add(8).cast::<u8>());
                                                                            _rt::bool_lift(l361 as u8)
                                                                        };
                                                                        V369::PrimBool(e369)
                                                                    }
                                                                    20 => {
                                                                        let e369 = {
                                                                            let l362 = *base.add(8).cast::<*mut u8>();
                                                                            let l363 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len364 = l363;
                                                                            let bytes364 = _rt::Vec::from_raw_parts(
                                                                                l362.cast(),
                                                                                len364,
                                                                                len364,
                                                                            );
                                                                            _rt::string_lift(bytes364)
                                                                        };
                                                                        V369::PrimString(e369)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                        let e369 = {
                                                                            let l365 = *base.add(8).cast::<*mut u8>();
                                                                            let l366 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len367 = l366;
                                                                            let bytes367 = _rt::Vec::from_raw_parts(
                                                                                l365.cast(),
                                                                                len367,
                                                                                len367,
                                                                            );
                                                                            let l368 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i64>();
                                                                            (
                                                                                super::super::super::super::golem::rpc::types::Uri {
                                                                                    value: _rt::string_lift(bytes367),
                                                                                },
                                                                                l368 as u64,
                                                                            )
                                                                        };
                                                                        V369::Handle(e369)
                                                                    }
                                                                };
                                                                v369
                                                            };
                                                            result370.push(e370);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base370,
                                                            len370 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                            8,
                                                        );
                                                        super::super::super::super::golem::rpc::types::WitValue {
                                                            nodes: result370,
                                                        }
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            consumed_fuel: l371,
                                        }
                                    };
                                    V651::ExportedFunctionCompleted(e651)
                                }
                                4 => {
                                    let e651 = {
                                        let l372 = *base.add(8).cast::<i64>();
                                        let l373 = *base.add(16).cast::<i32>();
                                        super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                            seconds: l372 as u64,
                                            nanoseconds: l373 as u32,
                                        }
                                    };
                                    V651::Suspend(e651)
                                }
                                5 => {
                                    let e651 = {
                                        let l374 = *base.add(8).cast::<i64>();
                                        let l375 = *base.add(16).cast::<i32>();
                                        let l376 = *base.add(24).cast::<*mut u8>();
                                        let l377 = *base
                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len378 = l377;
                                        let bytes378 = _rt::Vec::from_raw_parts(
                                            l376.cast(),
                                            len378,
                                            len378,
                                        );
                                        super::super::super::super::golem::api::oplog::ErrorParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l374 as u64,
                                                nanoseconds: l375 as u32,
                                            },
                                            error: _rt::string_lift(bytes378),
                                        }
                                    };
                                    V651::Error(e651)
                                }
                                6 => {
                                    let e651 = {
                                        let l379 = *base.add(8).cast::<i64>();
                                        let l380 = *base.add(16).cast::<i32>();
                                        super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                            seconds: l379 as u64,
                                            nanoseconds: l380 as u32,
                                        }
                                    };
                                    V651::NoOp(e651)
                                }
                                7 => {
                                    let e651 = {
                                        let l381 = *base.add(8).cast::<i64>();
                                        let l382 = *base.add(16).cast::<i32>();
                                        let l383 = *base.add(24).cast::<i64>();
                                        let l384 = *base.add(32).cast::<i64>();
                                        super::super::super::super::golem::api::oplog::JumpParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l381 as u64,
                                                nanoseconds: l382 as u32,
                                            },
                                            start: l383 as u64,
                                            end: l384 as u64,
                                        }
                                    };
                                    V651::Jump(e651)
                                }
                                8 => {
                                    let e651 = {
                                        let l385 = *base.add(8).cast::<i64>();
                                        let l386 = *base.add(16).cast::<i32>();
                                        super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                            seconds: l385 as u64,
                                            nanoseconds: l386 as u32,
                                        }
                                    };
                                    V651::Interrupted(e651)
                                }
                                9 => {
                                    let e651 = {
                                        let l387 = *base.add(8).cast::<i64>();
                                        let l388 = *base.add(16).cast::<i32>();
                                        super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                            seconds: l387 as u64,
                                            nanoseconds: l388 as u32,
                                        }
                                    };
                                    V651::Exited(e651)
                                }
                                10 => {
                                    let e651 = {
                                        let l389 = *base.add(8).cast::<i64>();
                                        let l390 = *base.add(16).cast::<i32>();
                                        let l391 = *base.add(24).cast::<i32>();
                                        let l392 = *base.add(32).cast::<i64>();
                                        let l393 = *base.add(40).cast::<i64>();
                                        let l394 = *base.add(48).cast::<f64>();
                                        let l395 = i32::from(*base.add(56).cast::<u8>());
                                        super::super::super::super::golem::api::oplog::ChangeRetryPolicyParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l389 as u64,
                                                nanoseconds: l390 as u32,
                                            },
                                            retry_policy: super::super::super::super::golem::api::host::RetryPolicy {
                                                max_attempts: l391 as u32,
                                                min_delay: l392 as u64,
                                                max_delay: l393 as u64,
                                                multiplier: l394,
                                                max_jitter_factor: match l395 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l396 = *base.add(64).cast::<f64>();
                                                            l396
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                            },
                                        }
                                    };
                                    V651::ChangeRetryPolicy(e651)
                                }
                                11 => {
                                    let e651 = {
                                        let l397 = *base.add(8).cast::<i64>();
                                        let l398 = *base.add(16).cast::<i32>();
                                        super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                            seconds: l397 as u64,
                                            nanoseconds: l398 as u32,
                                        }
                                    };
                                    V651::BeginAtomicRegion(e651)
                                }
                                12 => {
                                    let e651 = {
                                        let l399 = *base.add(8).cast::<i64>();
                                        let l400 = *base.add(16).cast::<i32>();
                                        let l401 = *base.add(24).cast::<i64>();
                                        super::super::super::super::golem::api::oplog::EndAtomicRegionParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l399 as u64,
                                                nanoseconds: l400 as u32,
                                            },
                                            begin_index: l401 as u64,
                                        }
                                    };
                                    V651::EndAtomicRegion(e651)
                                }
                                13 => {
                                    let e651 = {
                                        let l402 = *base.add(8).cast::<i64>();
                                        let l403 = *base.add(16).cast::<i32>();
                                        super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                            seconds: l402 as u64,
                                            nanoseconds: l403 as u32,
                                        }
                                    };
                                    V651::BeginRemoteWrite(e651)
                                }
                                14 => {
                                    let e651 = {
                                        let l404 = *base.add(8).cast::<i64>();
                                        let l405 = *base.add(16).cast::<i32>();
                                        let l406 = *base.add(24).cast::<i64>();
                                        super::super::super::super::golem::api::oplog::EndRemoteWriteParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l404 as u64,
                                                nanoseconds: l405 as u32,
                                            },
                                            begin_index: l406 as u64,
                                        }
                                    };
                                    V651::EndRemoteWrite(e651)
                                }
                                15 => {
                                    let e651 = {
                                        let l407 = *base.add(8).cast::<i64>();
                                        let l408 = *base.add(16).cast::<i32>();
                                        let l409 = i32::from(*base.add(24).cast::<u8>());
                                        use super::super::super::super::golem::api::oplog::AgentInvocation as V469;
                                        let v469 = match l409 {
                                            0 => {
                                                let e469 = {
                                                    let l410 = *base.add(32).cast::<*mut u8>();
                                                    let l411 = *base
                                                        .add(32 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len412 = l411;
                                                    let bytes412 = _rt::Vec::from_raw_parts(
                                                        l410.cast(),
                                                        len412,
                                                        len412,
                                                    );
                                                    let l413 = *base
                                                        .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l414 = *base
                                                        .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len415 = l414;
                                                    let bytes415 = _rt::Vec::from_raw_parts(
                                                        l413.cast(),
                                                        len415,
                                                        len415,
                                                    );
                                                    let l416 = i32::from(
                                                        *base
                                                            .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    super::super::super::super::golem::api::oplog::ExportedFunctionInvocationParameters {
                                                        idempotency_key: _rt::string_lift(bytes412),
                                                        function_name: _rt::string_lift(bytes415),
                                                        input: match l416 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l417 = *base
                                                                        .add(32 + 5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l418 = *base
                                                                        .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base467 = l417;
                                                                    let len467 = l418;
                                                                    let mut result467 = _rt::Vec::with_capacity(len467);
                                                                    for i in 0..len467 {
                                                                        let base = base467
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        let e467 = {
                                                                            let l419 = *base.add(0).cast::<*mut u8>();
                                                                            let l420 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base466 = l419;
                                                                            let len466 = l420;
                                                                            let mut result466 = _rt::Vec::with_capacity(len466);
                                                                            for i in 0..len466 {
                                                                                let base = base466
                                                                                    .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                                let e466 = {
                                                                                    let l421 = i32::from(*base.add(0).cast::<u8>());
                                                                                    use super::super::super::super::golem::rpc::types::WitNode as V465;
                                                                                    let v465 = match l421 {
                                                                                        0 => {
                                                                                            let e465 = {
                                                                                                let l422 = *base.add(8).cast::<*mut u8>();
                                                                                                let l423 = *base
                                                                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                    .cast::<usize>();
                                                                                                let len424 = l423;
                                                                                                _rt::Vec::from_raw_parts(l422.cast(), len424, len424)
                                                                                            };
                                                                                            V465::RecordValue(e465)
                                                                                        }
                                                                                        1 => {
                                                                                            let e465 = {
                                                                                                let l425 = *base.add(8).cast::<i32>();
                                                                                                let l426 = i32::from(*base.add(12).cast::<u8>());
                                                                                                (
                                                                                                    l425 as u32,
                                                                                                    match l426 {
                                                                                                        0 => None,
                                                                                                        1 => {
                                                                                                            let e = {
                                                                                                                let l427 = *base.add(16).cast::<i32>();
                                                                                                                l427
                                                                                                            };
                                                                                                            Some(e)
                                                                                                        }
                                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                                    },
                                                                                                )
                                                                                            };
                                                                                            V465::VariantValue(e465)
                                                                                        }
                                                                                        2 => {
                                                                                            let e465 = {
                                                                                                let l428 = *base.add(8).cast::<i32>();
                                                                                                l428 as u32
                                                                                            };
                                                                                            V465::EnumValue(e465)
                                                                                        }
                                                                                        3 => {
                                                                                            let e465 = {
                                                                                                let l429 = *base.add(8).cast::<*mut u8>();
                                                                                                let l430 = *base
                                                                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                    .cast::<usize>();
                                                                                                let base432 = l429;
                                                                                                let len432 = l430;
                                                                                                let mut result432 = _rt::Vec::with_capacity(len432);
                                                                                                for i in 0..len432 {
                                                                                                    let base = base432.add(i * 1);
                                                                                                    let e432 = {
                                                                                                        let l431 = i32::from(*base.add(0).cast::<u8>());
                                                                                                        _rt::bool_lift(l431 as u8)
                                                                                                    };
                                                                                                    result432.push(e432);
                                                                                                }
                                                                                                _rt::cabi_dealloc(base432, len432 * 1, 1);
                                                                                                result432
                                                                                            };
                                                                                            V465::FlagsValue(e465)
                                                                                        }
                                                                                        4 => {
                                                                                            let e465 = {
                                                                                                let l433 = *base.add(8).cast::<*mut u8>();
                                                                                                let l434 = *base
                                                                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                    .cast::<usize>();
                                                                                                let len435 = l434;
                                                                                                _rt::Vec::from_raw_parts(l433.cast(), len435, len435)
                                                                                            };
                                                                                            V465::TupleValue(e465)
                                                                                        }
                                                                                        5 => {
                                                                                            let e465 = {
                                                                                                let l436 = *base.add(8).cast::<*mut u8>();
                                                                                                let l437 = *base
                                                                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                    .cast::<usize>();
                                                                                                let len438 = l437;
                                                                                                _rt::Vec::from_raw_parts(l436.cast(), len438, len438)
                                                                                            };
                                                                                            V465::ListValue(e465)
                                                                                        }
                                                                                        6 => {
                                                                                            let e465 = {
                                                                                                let l439 = i32::from(*base.add(8).cast::<u8>());
                                                                                                match l439 {
                                                                                                    0 => None,
                                                                                                    1 => {
                                                                                                        let e = {
                                                                                                            let l440 = *base.add(12).cast::<i32>();
                                                                                                            l440
                                                                                                        };
                                                                                                        Some(e)
                                                                                                    }
                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                }
                                                                                            };
                                                                                            V465::OptionValue(e465)
                                                                                        }
                                                                                        7 => {
                                                                                            let e465 = {
                                                                                                let l441 = i32::from(*base.add(8).cast::<u8>());
                                                                                                match l441 {
                                                                                                    0 => {
                                                                                                        let e = {
                                                                                                            let l442 = i32::from(*base.add(12).cast::<u8>());
                                                                                                            match l442 {
                                                                                                                0 => None,
                                                                                                                1 => {
                                                                                                                    let e = {
                                                                                                                        let l443 = *base.add(16).cast::<i32>();
                                                                                                                        l443
                                                                                                                    };
                                                                                                                    Some(e)
                                                                                                                }
                                                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                                                            }
                                                                                                        };
                                                                                                        Ok(e)
                                                                                                    }
                                                                                                    1 => {
                                                                                                        let e = {
                                                                                                            let l444 = i32::from(*base.add(12).cast::<u8>());
                                                                                                            match l444 {
                                                                                                                0 => None,
                                                                                                                1 => {
                                                                                                                    let e = {
                                                                                                                        let l445 = *base.add(16).cast::<i32>();
                                                                                                                        l445
                                                                                                                    };
                                                                                                                    Some(e)
                                                                                                                }
                                                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                                                            }
                                                                                                        };
                                                                                                        Err(e)
                                                                                                    }
                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                }
                                                                                            };
                                                                                            V465::ResultValue(e465)
                                                                                        }
                                                                                        8 => {
                                                                                            let e465 = {
                                                                                                let l446 = i32::from(*base.add(8).cast::<u8>());
                                                                                                l446 as u8
                                                                                            };
                                                                                            V465::PrimU8(e465)
                                                                                        }
                                                                                        9 => {
                                                                                            let e465 = {
                                                                                                let l447 = i32::from(*base.add(8).cast::<u16>());
                                                                                                l447 as u16
                                                                                            };
                                                                                            V465::PrimU16(e465)
                                                                                        }
                                                                                        10 => {
                                                                                            let e465 = {
                                                                                                let l448 = *base.add(8).cast::<i32>();
                                                                                                l448 as u32
                                                                                            };
                                                                                            V465::PrimU32(e465)
                                                                                        }
                                                                                        11 => {
                                                                                            let e465 = {
                                                                                                let l449 = *base.add(8).cast::<i64>();
                                                                                                l449 as u64
                                                                                            };
                                                                                            V465::PrimU64(e465)
                                                                                        }
                                                                                        12 => {
                                                                                            let e465 = {
                                                                                                let l450 = i32::from(*base.add(8).cast::<i8>());
                                                                                                l450 as i8
                                                                                            };
                                                                                            V465::PrimS8(e465)
                                                                                        }
                                                                                        13 => {
                                                                                            let e465 = {
                                                                                                let l451 = i32::from(*base.add(8).cast::<i16>());
                                                                                                l451 as i16
                                                                                            };
                                                                                            V465::PrimS16(e465)
                                                                                        }
                                                                                        14 => {
                                                                                            let e465 = {
                                                                                                let l452 = *base.add(8).cast::<i32>();
                                                                                                l452
                                                                                            };
                                                                                            V465::PrimS32(e465)
                                                                                        }
                                                                                        15 => {
                                                                                            let e465 = {
                                                                                                let l453 = *base.add(8).cast::<i64>();
                                                                                                l453
                                                                                            };
                                                                                            V465::PrimS64(e465)
                                                                                        }
                                                                                        16 => {
                                                                                            let e465 = {
                                                                                                let l454 = *base.add(8).cast::<f32>();
                                                                                                l454
                                                                                            };
                                                                                            V465::PrimFloat32(e465)
                                                                                        }
                                                                                        17 => {
                                                                                            let e465 = {
                                                                                                let l455 = *base.add(8).cast::<f64>();
                                                                                                l455
                                                                                            };
                                                                                            V465::PrimFloat64(e465)
                                                                                        }
                                                                                        18 => {
                                                                                            let e465 = {
                                                                                                let l456 = *base.add(8).cast::<i32>();
                                                                                                _rt::char_lift(l456 as u32)
                                                                                            };
                                                                                            V465::PrimChar(e465)
                                                                                        }
                                                                                        19 => {
                                                                                            let e465 = {
                                                                                                let l457 = i32::from(*base.add(8).cast::<u8>());
                                                                                                _rt::bool_lift(l457 as u8)
                                                                                            };
                                                                                            V465::PrimBool(e465)
                                                                                        }
                                                                                        20 => {
                                                                                            let e465 = {
                                                                                                let l458 = *base.add(8).cast::<*mut u8>();
                                                                                                let l459 = *base
                                                                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                    .cast::<usize>();
                                                                                                let len460 = l459;
                                                                                                let bytes460 = _rt::Vec::from_raw_parts(
                                                                                                    l458.cast(),
                                                                                                    len460,
                                                                                                    len460,
                                                                                                );
                                                                                                _rt::string_lift(bytes460)
                                                                                            };
                                                                                            V465::PrimString(e465)
                                                                                        }
                                                                                        n => {
                                                                                            debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                                            let e465 = {
                                                                                                let l461 = *base.add(8).cast::<*mut u8>();
                                                                                                let l462 = *base
                                                                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                    .cast::<usize>();
                                                                                                let len463 = l462;
                                                                                                let bytes463 = _rt::Vec::from_raw_parts(
                                                                                                    l461.cast(),
                                                                                                    len463,
                                                                                                    len463,
                                                                                                );
                                                                                                let l464 = *base
                                                                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                    .cast::<i64>();
                                                                                                (
                                                                                                    super::super::super::super::golem::rpc::types::Uri {
                                                                                                        value: _rt::string_lift(bytes463),
                                                                                                    },
                                                                                                    l464 as u64,
                                                                                                )
                                                                                            };
                                                                                            V465::Handle(e465)
                                                                                        }
                                                                                    };
                                                                                    v465
                                                                                };
                                                                                result466.push(e466);
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base466,
                                                                                len466 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                                8,
                                                                            );
                                                                            super::super::super::super::golem::rpc::types::WitValue {
                                                                                nodes: result466,
                                                                            }
                                                                        };
                                                                        result467.push(e467);
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base467,
                                                                        len467 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    result467
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                V469::ExportedFunction(e469)
                                            }
                                            n => {
                                                debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                let e469 = {
                                                    let l468 = *base.add(32).cast::<i64>();
                                                    l468 as u64
                                                };
                                                V469::ManualUpdate(e469)
                                            }
                                        };
                                        super::super::super::super::golem::api::oplog::PendingAgentInvocationParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l407 as u64,
                                                nanoseconds: l408 as u32,
                                            },
                                            invocation: v469,
                                        }
                                    };
                                    V651::PendingAgentInvocation(e651)
                                }
                                16 => {
                                    let e651 = {
                                        let l470 = *base.add(8).cast::<i64>();
                                        let l471 = *base.add(16).cast::<i32>();
                                        let l472 = *base.add(24).cast::<i64>();
                                        let l473 = i32::from(*base.add(32).cast::<u8>());
                                        use super::super::super::super::golem::api::oplog::UpdateDescription as V477;
                                        let v477 = match l473 {
                                            0 => V477::AutoUpdate,
                                            n => {
                                                debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                let e477 = {
                                                    let l474 = *base
                                                        .add(32 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l475 = *base
                                                        .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len476 = l475;
                                                    _rt::Vec::from_raw_parts(l474.cast(), len476, len476)
                                                };
                                                V477::SnapshotBased(e477)
                                            }
                                        };
                                        super::super::super::super::golem::api::oplog::PendingUpdateParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l470 as u64,
                                                nanoseconds: l471 as u32,
                                            },
                                            target_version: l472 as u64,
                                            update_description: v477,
                                        }
                                    };
                                    V651::PendingUpdate(e651)
                                }
                                17 => {
                                    let e651 = {
                                        let l478 = *base.add(8).cast::<i64>();
                                        let l479 = *base.add(16).cast::<i32>();
                                        let l480 = *base.add(24).cast::<i64>();
                                        let l481 = *base.add(32).cast::<i64>();
                                        let l482 = *base.add(40).cast::<*mut u8>();
                                        let l483 = *base
                                            .add(40 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let base501 = l482;
                                        let len501 = l483;
                                        let mut result501 = _rt::Vec::with_capacity(len501);
                                        for i in 0..len501 {
                                            let base = base501
                                                .add(i * (16 + 6 * ::core::mem::size_of::<*const u8>()));
                                            let e501 = {
                                                let l484 = *base.add(0).cast::<i64>();
                                                let l485 = *base.add(8).cast::<i64>();
                                                let l486 = *base.add(16).cast::<*mut u8>();
                                                let l487 = *base
                                                    .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len488 = l487;
                                                let bytes488 = _rt::Vec::from_raw_parts(
                                                    l486.cast(),
                                                    len488,
                                                    len488,
                                                );
                                                let l489 = *base
                                                    .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l490 = *base
                                                    .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len491 = l490;
                                                let bytes491 = _rt::Vec::from_raw_parts(
                                                    l489.cast(),
                                                    len491,
                                                    len491,
                                                );
                                                let l492 = *base
                                                    .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l493 = *base
                                                    .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let base500 = l492;
                                                let len500 = l493;
                                                let mut result500 = _rt::Vec::with_capacity(len500);
                                                for i in 0..len500 {
                                                    let base = base500
                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                    let e500 = {
                                                        let l494 = *base.add(0).cast::<*mut u8>();
                                                        let l495 = *base
                                                            .add(::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len496 = l495;
                                                        let bytes496 = _rt::Vec::from_raw_parts(
                                                            l494.cast(),
                                                            len496,
                                                            len496,
                                                        );
                                                        let l497 = *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l498 = *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len499 = l498;
                                                        let bytes499 = _rt::Vec::from_raw_parts(
                                                            l497.cast(),
                                                            len499,
                                                            len499,
                                                        );
                                                        (_rt::string_lift(bytes496), _rt::string_lift(bytes499))
                                                    };
                                                    result500.push(e500);
                                                }
                                                _rt::cabi_dealloc(
                                                    base500,
                                                    len500 * (4 * ::core::mem::size_of::<*const u8>()),
                                                    ::core::mem::size_of::<*const u8>(),
                                                );
                                                super::super::super::super::golem::api::oplog::PluginInstallationDescription {
                                                    installation_id: super::super::super::super::golem::rpc::types::Uuid {
                                                        high_bits: l484 as u64,
                                                        low_bits: l485 as u64,
                                                    },
                                                    name: _rt::string_lift(bytes488),
                                                    version: _rt::string_lift(bytes491),
                                                    parameters: result500,
                                                }
                                            };
                                            result501.push(e501);
                                        }
                                        _rt::cabi_dealloc(
                                            base501,
                                            len501 * (16 + 6 * ::core::mem::size_of::<*const u8>()),
                                            8,
                                        );
                                        super::super::super::super::golem::api::oplog::SuccessfulUpdateParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l478 as u64,
                                                nanoseconds: l479 as u32,
                                            },
                                            target_version: l480 as u64,
                                            new_component_size: l481 as u64,
                                            new_active_plugins: result501,
                                        }
                                    };
                                    V651::SuccessfulUpdate(e651)
                                }
                                18 => {
                                    let e651 = {
                                        let l502 = *base.add(8).cast::<i64>();
                                        let l503 = *base.add(16).cast::<i32>();
                                        let l504 = *base.add(24).cast::<i64>();
                                        let l505 = i32::from(*base.add(32).cast::<u8>());
                                        super::super::super::super::golem::api::oplog::FailedUpdateParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l502 as u64,
                                                nanoseconds: l503 as u32,
                                            },
                                            target_version: l504 as u64,
                                            details: match l505 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l506 = *base
                                                            .add(32 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l507 = *base
                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len508 = l507;
                                                        let bytes508 = _rt::Vec::from_raw_parts(
                                                            l506.cast(),
                                                            len508,
                                                            len508,
                                                        );
                                                        _rt::string_lift(bytes508)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                        }
                                    };
                                    V651::FailedUpdate(e651)
                                }
                                19 => {
                                    let e651 = {
                                        let l509 = *base.add(8).cast::<i64>();
                                        let l510 = *base.add(16).cast::<i32>();
                                        let l511 = *base.add(24).cast::<i64>();
                                        super::super::super::super::golem::api::oplog::GrowMemoryParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l509 as u64,
                                                nanoseconds: l510 as u32,
                                            },
                                            delta: l511 as u64,
                                        }
                                    };
                                    V651::GrowMemory(e651)
                                }
                                20 => {
                                    let e651 = {
                                        let l512 = *base.add(8).cast::<i64>();
                                        let l513 = *base.add(16).cast::<i32>();
                                        let l514 = *base.add(24).cast::<i64>();
                                        let l515 = *base.add(32).cast::<*mut u8>();
                                        let l516 = *base
                                            .add(32 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len517 = l516;
                                        let bytes517 = _rt::Vec::from_raw_parts(
                                            l515.cast(),
                                            len517,
                                            len517,
                                        );
                                        let l518 = *base
                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l519 = *base
                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len520 = l519;
                                        let bytes520 = _rt::Vec::from_raw_parts(
                                            l518.cast(),
                                            len520,
                                            len520,
                                        );
                                        super::super::super::super::golem::api::oplog::CreateResourceParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l512 as u64,
                                                nanoseconds: l513 as u32,
                                            },
                                            resource_id: l514 as u64,
                                            name: _rt::string_lift(bytes517),
                                            owner: _rt::string_lift(bytes520),
                                        }
                                    };
                                    V651::CreateResource(e651)
                                }
                                21 => {
                                    let e651 = {
                                        let l521 = *base.add(8).cast::<i64>();
                                        let l522 = *base.add(16).cast::<i32>();
                                        let l523 = *base.add(24).cast::<i64>();
                                        let l524 = *base.add(32).cast::<*mut u8>();
                                        let l525 = *base
                                            .add(32 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len526 = l525;
                                        let bytes526 = _rt::Vec::from_raw_parts(
                                            l524.cast(),
                                            len526,
                                            len526,
                                        );
                                        let l527 = *base
                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l528 = *base
                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len529 = l528;
                                        let bytes529 = _rt::Vec::from_raw_parts(
                                            l527.cast(),
                                            len529,
                                            len529,
                                        );
                                        super::super::super::super::golem::api::oplog::DropResourceParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l521 as u64,
                                                nanoseconds: l522 as u32,
                                            },
                                            resource_id: l523 as u64,
                                            name: _rt::string_lift(bytes526),
                                            owner: _rt::string_lift(bytes529),
                                        }
                                    };
                                    V651::DropResource(e651)
                                }
                                22 => {
                                    let e651 = {
                                        let l530 = *base.add(8).cast::<i64>();
                                        let l531 = *base.add(16).cast::<i32>();
                                        let l532 = i32::from(*base.add(24).cast::<u8>());
                                        let l533 = *base
                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l534 = *base
                                            .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len535 = l534;
                                        let bytes535 = _rt::Vec::from_raw_parts(
                                            l533.cast(),
                                            len535,
                                            len535,
                                        );
                                        let l536 = *base
                                            .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l537 = *base
                                            .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len538 = l537;
                                        let bytes538 = _rt::Vec::from_raw_parts(
                                            l536.cast(),
                                            len538,
                                            len538,
                                        );
                                        super::super::super::super::golem::api::oplog::LogParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l530 as u64,
                                                nanoseconds: l531 as u32,
                                            },
                                            level: super::super::super::super::golem::api::oplog::LogLevel::_lift(
                                                l532 as u8,
                                            ),
                                            context: _rt::string_lift(bytes535),
                                            message: _rt::string_lift(bytes538),
                                        }
                                    };
                                    V651::Log(e651)
                                }
                                23 => {
                                    let e651 = {
                                        let l539 = *base.add(8).cast::<i64>();
                                        let l540 = *base.add(16).cast::<i32>();
                                        super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                            seconds: l539 as u64,
                                            nanoseconds: l540 as u32,
                                        }
                                    };
                                    V651::Restart(e651)
                                }
                                24 => {
                                    let e651 = {
                                        let l541 = *base.add(8).cast::<i64>();
                                        let l542 = *base.add(16).cast::<i32>();
                                        let l543 = *base.add(24).cast::<i64>();
                                        let l544 = *base.add(32).cast::<i64>();
                                        let l545 = *base.add(40).cast::<*mut u8>();
                                        let l546 = *base
                                            .add(40 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len547 = l546;
                                        let bytes547 = _rt::Vec::from_raw_parts(
                                            l545.cast(),
                                            len547,
                                            len547,
                                        );
                                        let l548 = *base
                                            .add(40 + 2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l549 = *base
                                            .add(40 + 3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len550 = l549;
                                        let bytes550 = _rt::Vec::from_raw_parts(
                                            l548.cast(),
                                            len550,
                                            len550,
                                        );
                                        let l551 = *base
                                            .add(40 + 4 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l552 = *base
                                            .add(40 + 5 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let base559 = l551;
                                        let len559 = l552;
                                        let mut result559 = _rt::Vec::with_capacity(len559);
                                        for i in 0..len559 {
                                            let base = base559
                                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                            let e559 = {
                                                let l553 = *base.add(0).cast::<*mut u8>();
                                                let l554 = *base
                                                    .add(::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len555 = l554;
                                                let bytes555 = _rt::Vec::from_raw_parts(
                                                    l553.cast(),
                                                    len555,
                                                    len555,
                                                );
                                                let l556 = *base
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l557 = *base
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len558 = l557;
                                                let bytes558 = _rt::Vec::from_raw_parts(
                                                    l556.cast(),
                                                    len558,
                                                    len558,
                                                );
                                                (_rt::string_lift(bytes555), _rt::string_lift(bytes558))
                                            };
                                            result559.push(e559);
                                        }
                                        _rt::cabi_dealloc(
                                            base559,
                                            len559 * (4 * ::core::mem::size_of::<*const u8>()),
                                            ::core::mem::size_of::<*const u8>(),
                                        );
                                        super::super::super::super::golem::api::oplog::ActivatePluginParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l541 as u64,
                                                nanoseconds: l542 as u32,
                                            },
                                            plugin: super::super::super::super::golem::api::oplog::PluginInstallationDescription {
                                                installation_id: super::super::super::super::golem::rpc::types::Uuid {
                                                    high_bits: l543 as u64,
                                                    low_bits: l544 as u64,
                                                },
                                                name: _rt::string_lift(bytes547),
                                                version: _rt::string_lift(bytes550),
                                                parameters: result559,
                                            },
                                        }
                                    };
                                    V651::ActivatePlugin(e651)
                                }
                                25 => {
                                    let e651 = {
                                        let l560 = *base.add(8).cast::<i64>();
                                        let l561 = *base.add(16).cast::<i32>();
                                        let l562 = *base.add(24).cast::<i64>();
                                        let l563 = *base.add(32).cast::<i64>();
                                        let l564 = *base.add(40).cast::<*mut u8>();
                                        let l565 = *base
                                            .add(40 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len566 = l565;
                                        let bytes566 = _rt::Vec::from_raw_parts(
                                            l564.cast(),
                                            len566,
                                            len566,
                                        );
                                        let l567 = *base
                                            .add(40 + 2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l568 = *base
                                            .add(40 + 3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len569 = l568;
                                        let bytes569 = _rt::Vec::from_raw_parts(
                                            l567.cast(),
                                            len569,
                                            len569,
                                        );
                                        let l570 = *base
                                            .add(40 + 4 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l571 = *base
                                            .add(40 + 5 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let base578 = l570;
                                        let len578 = l571;
                                        let mut result578 = _rt::Vec::with_capacity(len578);
                                        for i in 0..len578 {
                                            let base = base578
                                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                            let e578 = {
                                                let l572 = *base.add(0).cast::<*mut u8>();
                                                let l573 = *base
                                                    .add(::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len574 = l573;
                                                let bytes574 = _rt::Vec::from_raw_parts(
                                                    l572.cast(),
                                                    len574,
                                                    len574,
                                                );
                                                let l575 = *base
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l576 = *base
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len577 = l576;
                                                let bytes577 = _rt::Vec::from_raw_parts(
                                                    l575.cast(),
                                                    len577,
                                                    len577,
                                                );
                                                (_rt::string_lift(bytes574), _rt::string_lift(bytes577))
                                            };
                                            result578.push(e578);
                                        }
                                        _rt::cabi_dealloc(
                                            base578,
                                            len578 * (4 * ::core::mem::size_of::<*const u8>()),
                                            ::core::mem::size_of::<*const u8>(),
                                        );
                                        super::super::super::super::golem::api::oplog::DeactivatePluginParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l560 as u64,
                                                nanoseconds: l561 as u32,
                                            },
                                            plugin: super::super::super::super::golem::api::oplog::PluginInstallationDescription {
                                                installation_id: super::super::super::super::golem::rpc::types::Uuid {
                                                    high_bits: l562 as u64,
                                                    low_bits: l563 as u64,
                                                },
                                                name: _rt::string_lift(bytes566),
                                                version: _rt::string_lift(bytes569),
                                                parameters: result578,
                                            },
                                        }
                                    };
                                    V651::DeactivatePlugin(e651)
                                }
                                26 => {
                                    let e651 = {
                                        let l579 = *base.add(8).cast::<i64>();
                                        let l580 = *base.add(16).cast::<i32>();
                                        let l581 = *base.add(24).cast::<i64>();
                                        let l582 = *base.add(32).cast::<i64>();
                                        super::super::super::super::golem::api::oplog::RevertParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l579 as u64,
                                                nanoseconds: l580 as u32,
                                            },
                                            start: l581 as u64,
                                            end: l582 as u64,
                                        }
                                    };
                                    V651::Revert(e651)
                                }
                                27 => {
                                    let e651 = {
                                        let l583 = *base.add(8).cast::<i64>();
                                        let l584 = *base.add(16).cast::<i32>();
                                        let l585 = *base.add(24).cast::<*mut u8>();
                                        let l586 = *base
                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len587 = l586;
                                        let bytes587 = _rt::Vec::from_raw_parts(
                                            l585.cast(),
                                            len587,
                                            len587,
                                        );
                                        super::super::super::super::golem::api::oplog::CancelInvocationParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l583 as u64,
                                                nanoseconds: l584 as u32,
                                            },
                                            idempotency_key: _rt::string_lift(bytes587),
                                        }
                                    };
                                    V651::CancelInvocation(e651)
                                }
                                28 => {
                                    let e651 = {
                                        let l588 = *base.add(8).cast::<i64>();
                                        let l589 = *base.add(16).cast::<i32>();
                                        let l590 = *base.add(24).cast::<*mut u8>();
                                        let l591 = *base
                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len592 = l591;
                                        let bytes592 = _rt::Vec::from_raw_parts(
                                            l590.cast(),
                                            len592,
                                            len592,
                                        );
                                        let l593 = i32::from(
                                            *base
                                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l597 = i32::from(
                                            *base
                                                .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l601 = *base
                                            .add(24 + 8 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l602 = *base
                                            .add(24 + 9 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let base611 = l601;
                                        let len611 = l602;
                                        let mut result611 = _rt::Vec::with_capacity(len611);
                                        for i in 0..len611 {
                                            let base = base611
                                                .add(i * (5 * ::core::mem::size_of::<*const u8>()));
                                            let e611 = {
                                                let l603 = *base.add(0).cast::<*mut u8>();
                                                let l604 = *base
                                                    .add(::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len605 = l604;
                                                let bytes605 = _rt::Vec::from_raw_parts(
                                                    l603.cast(),
                                                    len605,
                                                    len605,
                                                );
                                                let l606 = i32::from(
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                use super::super::super::super::golem::api::context::AttributeValue as V610;
                                                let v610 = match l606 {
                                                    n => {
                                                        debug_assert_eq!(n, 0, "invalid enum discriminant");
                                                        let e610 = {
                                                            let l607 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l608 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len609 = l608;
                                                            let bytes609 = _rt::Vec::from_raw_parts(
                                                                l607.cast(),
                                                                len609,
                                                                len609,
                                                            );
                                                            _rt::string_lift(bytes609)
                                                        };
                                                        V610::String(e610)
                                                    }
                                                };
                                                super::super::super::super::golem::api::context::Attribute {
                                                    key: _rt::string_lift(bytes605),
                                                    value: v610,
                                                }
                                            };
                                            result611.push(e611);
                                        }
                                        _rt::cabi_dealloc(
                                            base611,
                                            len611 * (5 * ::core::mem::size_of::<*const u8>()),
                                            ::core::mem::size_of::<*const u8>(),
                                        );
                                        super::super::super::super::golem::api::oplog::StartSpanParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l588 as u64,
                                                nanoseconds: l589 as u32,
                                            },
                                            span_id: _rt::string_lift(bytes592),
                                            parent: match l593 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l594 = *base
                                                            .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l595 = *base
                                                            .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len596 = l595;
                                                        let bytes596 = _rt::Vec::from_raw_parts(
                                                            l594.cast(),
                                                            len596,
                                                            len596,
                                                        );
                                                        _rt::string_lift(bytes596)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            linked_context: match l597 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l598 = *base
                                                            .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l599 = *base
                                                            .add(24 + 7 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len600 = l599;
                                                        let bytes600 = _rt::Vec::from_raw_parts(
                                                            l598.cast(),
                                                            len600,
                                                            len600,
                                                        );
                                                        _rt::string_lift(bytes600)
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            attributes: result611,
                                        }
                                    };
                                    V651::StartSpan(e651)
                                }
                                29 => {
                                    let e651 = {
                                        let l612 = *base.add(8).cast::<i64>();
                                        let l613 = *base.add(16).cast::<i32>();
                                        let l614 = *base.add(24).cast::<*mut u8>();
                                        let l615 = *base
                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len616 = l615;
                                        let bytes616 = _rt::Vec::from_raw_parts(
                                            l614.cast(),
                                            len616,
                                            len616,
                                        );
                                        super::super::super::super::golem::api::oplog::FinishSpanParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l612 as u64,
                                                nanoseconds: l613 as u32,
                                            },
                                            span_id: _rt::string_lift(bytes616),
                                        }
                                    };
                                    V651::FinishSpan(e651)
                                }
                                30 => {
                                    let e651 = {
                                        let l617 = *base.add(8).cast::<i64>();
                                        let l618 = *base.add(16).cast::<i32>();
                                        let l619 = *base.add(24).cast::<*mut u8>();
                                        let l620 = *base
                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len621 = l620;
                                        let bytes621 = _rt::Vec::from_raw_parts(
                                            l619.cast(),
                                            len621,
                                            len621,
                                        );
                                        let l622 = *base
                                            .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l623 = *base
                                            .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len624 = l623;
                                        let bytes624 = _rt::Vec::from_raw_parts(
                                            l622.cast(),
                                            len624,
                                            len624,
                                        );
                                        let l625 = i32::from(
                                            *base
                                                .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        use super::super::super::super::golem::api::context::AttributeValue as V629;
                                        let v629 = match l625 {
                                            n => {
                                                debug_assert_eq!(n, 0, "invalid enum discriminant");
                                                let e629 = {
                                                    let l626 = *base
                                                        .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l627 = *base
                                                        .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len628 = l627;
                                                    let bytes628 = _rt::Vec::from_raw_parts(
                                                        l626.cast(),
                                                        len628,
                                                        len628,
                                                    );
                                                    _rt::string_lift(bytes628)
                                                };
                                                V629::String(e629)
                                            }
                                        };
                                        super::super::super::super::golem::api::oplog::SetSpanAttributeParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l617 as u64,
                                                nanoseconds: l618 as u32,
                                            },
                                            span_id: _rt::string_lift(bytes621),
                                            key: _rt::string_lift(bytes624),
                                            value: v629,
                                        }
                                    };
                                    V651::SetSpanAttribute(e651)
                                }
                                31 => {
                                    let e651 = {
                                        let l630 = *base.add(8).cast::<i64>();
                                        let l631 = *base.add(16).cast::<i32>();
                                        let l632 = i32::from(*base.add(24).cast::<u8>());
                                        use super::super::super::super::golem::api::host::PersistenceLevel as V633;
                                        let v633 = match l632 {
                                            0 => V633::PersistNothing,
                                            1 => V633::PersistRemoteSideEffects,
                                            n => {
                                                debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                V633::Smart
                                            }
                                        };
                                        super::super::super::super::golem::api::oplog::ChangePersistenceLevelParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l630 as u64,
                                                nanoseconds: l631 as u32,
                                            },
                                            persistence_level: v633,
                                        }
                                    };
                                    V651::ChangePersistenceLevel(e651)
                                }
                                32 => {
                                    let e651 = {
                                        let l634 = *base.add(8).cast::<i64>();
                                        let l635 = *base.add(16).cast::<i32>();
                                        let l636 = *base.add(24).cast::<*mut u8>();
                                        let l637 = *base
                                            .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len638 = l637;
                                        let bytes638 = _rt::Vec::from_raw_parts(
                                            l636.cast(),
                                            len638,
                                            len638,
                                        );
                                        super::super::super::super::golem::api::oplog::BeginRemoteTransactionParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l634 as u64,
                                                nanoseconds: l635 as u32,
                                            },
                                            transaction_id: _rt::string_lift(bytes638),
                                        }
                                    };
                                    V651::BeginRemoteTransaction(e651)
                                }
                                33 => {
                                    let e651 = {
                                        let l639 = *base.add(8).cast::<i64>();
                                        let l640 = *base.add(16).cast::<i32>();
                                        let l641 = *base.add(24).cast::<i64>();
                                        super::super::super::super::golem::api::oplog::RemoteTransactionParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l639 as u64,
                                                nanoseconds: l640 as u32,
                                            },
                                            begin_index: l641 as u64,
                                        }
                                    };
                                    V651::PreCommitRemoteTransaction(e651)
                                }
                                34 => {
                                    let e651 = {
                                        let l642 = *base.add(8).cast::<i64>();
                                        let l643 = *base.add(16).cast::<i32>();
                                        let l644 = *base.add(24).cast::<i64>();
                                        super::super::super::super::golem::api::oplog::RemoteTransactionParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l642 as u64,
                                                nanoseconds: l643 as u32,
                                            },
                                            begin_index: l644 as u64,
                                        }
                                    };
                                    V651::PreRollbackRemoteTransaction(e651)
                                }
                                35 => {
                                    let e651 = {
                                        let l645 = *base.add(8).cast::<i64>();
                                        let l646 = *base.add(16).cast::<i32>();
                                        let l647 = *base.add(24).cast::<i64>();
                                        super::super::super::super::golem::api::oplog::RemoteTransactionParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l645 as u64,
                                                nanoseconds: l646 as u32,
                                            },
                                            begin_index: l647 as u64,
                                        }
                                    };
                                    V651::CommittedRemoteTransaction(e651)
                                }
                                n => {
                                    debug_assert_eq!(n, 36, "invalid enum discriminant");
                                    let e651 = {
                                        let l648 = *base.add(8).cast::<i64>();
                                        let l649 = *base.add(16).cast::<i32>();
                                        let l650 = *base.add(24).cast::<i64>();
                                        super::super::super::super::golem::api::oplog::RemoteTransactionParameters {
                                            timestamp: super::super::super::super::wasi::clocks::wall_clock::Datetime {
                                                seconds: l648 as u64,
                                                nanoseconds: l649 as u32,
                                            },
                                            begin_index: l650 as u64,
                                        }
                                    };
                                    V651::RolledBackRemoteTransaction(e651)
                                }
                            };
                            v651
                        };
                        result652.push(e652);
                    }
                    _rt::cabi_dealloc(
                        base652,
                        len652 * (104 + 12 * ::core::mem::size_of::<*const u8>()),
                        8,
                    );
                    let result653 = T::process(
                        AccountInfo {
                            account_id: super::super::super::super::golem::api::host::AccountId {
                                value: _rt::string_lift(bytes2),
                            },
                        },
                        result11,
                        super::super::super::super::golem::rpc::types::ComponentId {
                            uuid: super::super::super::super::golem::rpc::types::Uuid {
                                high_bits: l12 as u64,
                                low_bits: l13 as u64,
                            },
                        },
                        super::super::super::super::golem::rpc::types::AgentId {
                            component_id: super::super::super::super::golem::rpc::types::ComponentId {
                                uuid: super::super::super::super::golem::rpc::types::Uuid {
                                    high_bits: l14 as u64,
                                    low_bits: l15 as u64,
                                },
                            },
                            agent_id: _rt::string_lift(bytes18),
                        },
                        super::super::super::super::golem::api::host::AgentMetadata {
                            agent_id: super::super::super::super::golem::rpc::types::AgentId {
                                component_id: super::super::super::super::golem::rpc::types::ComponentId {
                                    uuid: super::super::super::super::golem::rpc::types::Uuid {
                                        high_bits: l19 as u64,
                                        low_bits: l20 as u64,
                                    },
                                },
                                agent_id: _rt::string_lift(bytes23),
                            },
                            args: result29,
                            env: result38,
                            config_vars: result47,
                            status: super::super::super::super::golem::api::host::AgentStatus::_lift(
                                l48 as u8,
                            ),
                            component_version: l49 as u64,
                            retry_count: l50 as u64,
                        },
                        l51 as u64,
                        result652,
                    );
                    _rt::cabi_dealloc(
                        arg0,
                        80 + 16 * ::core::mem::size_of::<*const u8>(),
                        8,
                    );
                    let ptr654 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result653 {
                        Ok(_) => {
                            *ptr654.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr654.add(0).cast::<u8>() = (1i32) as u8;
                            let vec655 = (e.into_bytes()).into_boxed_slice();
                            let ptr655 = vec655.as_ptr().cast::<u8>();
                            let len655 = vec655.len();
                            ::core::mem::forget(vec655);
                            *ptr654
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len655;
                            *ptr654
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr655.cast_mut();
                        }
                    };
                    ptr654
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_process<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                    }
                }
                pub trait Guest {
                    /// Called when one of the agents the plugin is activated on has written new entries to its oplog.
                    ///
                    /// There are no guarantees for the number of processors running at the same time, and different entries from the same agent
                    /// may be sent to different processor instances.
                    ///
                    /// The `account-info` parameters contains details of the account the installation belongs to.
                    /// The `config` parameter contains the configuration parameters for the plugin, as specified in the plugin installation
                    /// The `component-id` parameter contains the identifier of the component the plugin was installed to.
                    /// The `agent-id` parameter identifies the agent.
                    /// The `metadata` parameter contains the latest metadata of the agent.
                    /// The `first-entry-index` parameter contains the index of the first entry in the list of `entries`.
                    /// The `entries` parameter always contains at least one element.
                    fn process(
                        account_info: AccountInfo,
                        config: _rt::Vec<(_rt::String, _rt::String)>,
                        component_id: ComponentId,
                        agent_id: AgentId,
                        metadata: AgentMetadata,
                        first_entry_index: OplogIndex,
                        entries: _rt::Vec<OplogEntry>,
                    ) -> Result<(), _rt::String>;
                }
                #[doc(hidden)]
                macro_rules! __export_golem_api_oplog_processor_1_1_7_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "golem:api/oplog-processor@1.1.7#process")] unsafe extern "C" fn
                        export_process(arg0 : * mut u8,) -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_process_cabi::<$ty > (arg0) } }
                        #[unsafe (export_name =
                        "cabi_post_golem:api/oplog-processor@1.1.7#process")] unsafe
                        extern "C" fn _post_return_process(arg0 : * mut u8,) { unsafe {
                        $($path_to_types)*:: __post_return_process::<$ty > (arg0) } } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_golem_api_oplog_processor_1_1_7_cabi;
                #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 3 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 3
                        * ::core::mem::size_of::<*const u8>()],
                );
            }
        }
        pub mod component {
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod api {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_get_invoked_functions_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::get_invoked_functions();
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    let vec3 = result0;
                    let len3 = vec3.len();
                    let layout3 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec3.len() * (2 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result3 = if layout3.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout3).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout3);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec3.into_iter().enumerate() {
                        let base = result3
                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                        {
                            let vec2 = (e.into_bytes()).into_boxed_slice();
                            let ptr2 = vec2.as_ptr().cast::<u8>();
                            let len2 = vec2.len();
                            ::core::mem::forget(vec2);
                            *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len2;
                            *base.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                        }
                    }
                    *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len3;
                    *ptr1.add(0).cast::<*mut u8>() = result3;
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_get_invoked_functions<T: Guest>(
                    arg0: *mut u8,
                ) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base4 = l0;
                    let len4 = l1;
                    for i in 0..len4 {
                        let base = base4
                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                        {
                            let l2 = *base.add(0).cast::<*mut u8>();
                            let l3 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l2, l3, 1);
                        }
                    }
                    _rt::cabi_dealloc(
                        base4,
                        len4 * (2 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                }
                pub trait Guest {
                    fn get_invoked_functions() -> _rt::Vec<_rt::String>;
                }
                #[doc(hidden)]
                macro_rules! __export_golem_component_api_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "golem:component/api#get-invoked-functions")] unsafe extern "C"
                        fn export_get_invoked_functions() -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_get_invoked_functions_cabi::<$ty >
                        () } } #[unsafe (export_name =
                        "cabi_post_golem:component/api#get-invoked-functions")] unsafe
                        extern "C" fn _post_return_get_invoked_functions(arg0 : * mut
                        u8,) { unsafe { $($path_to_types)*::
                        __post_return_get_invoked_functions::<$ty > (arg0) } } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_golem_component_api_cabi;
                #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 2 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 2
                        * ::core::mem::size_of::<*const u8>()],
                );
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};
    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }
    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }
    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }
        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }
        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }
    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource").field("handle", &self.handle).finish()
        }
    }
    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    u32::MAX => {}
                    other => T::drop(other),
                }
            }
        }
    }
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }
    pub use alloc_crate::vec::Vec;
    pub use alloc_crate::alloc;
    pub use alloc_crate::string::String;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            unsafe { core::hint::unreachable_unchecked() }
        }
    }
    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }
    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }
    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }
    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }
    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }
    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }
    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub fn as_f32<T: AsF32>(t: T) -> f32 {
        t.as_f32()
    }
    pub trait AsF32 {
        fn as_f32(self) -> f32;
    }
    impl<'a, T: Copy + AsF32> AsF32 for &'a T {
        fn as_f32(self) -> f32 {
            (*self).as_f32()
        }
    }
    impl AsF32 for f32 {
        #[inline]
        fn as_f32(self) -> f32 {
            self as f32
        }
    }
    pub fn as_f64<T: AsF64>(t: T) -> f64 {
        t.as_f64()
    }
    pub trait AsF64 {
        fn as_f64(self) -> f64;
    }
    impl<'a, T: Copy + AsF64> AsF64 for &'a T {
        fn as_f64(self) -> f64 {
            (*self).as_f64()
        }
    }
    impl AsF64 for f64 {
        #[inline]
        fn as_f64(self) -> f64 {
            self as f64
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    pub unsafe fn char_lift(val: u32) -> char {
        if cfg!(debug_assertions) {
            core::char::from_u32(val).unwrap()
        } else {
            core::char::from_u32_unchecked(val)
        }
    }
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    extern crate alloc as alloc_crate;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_oplog_processor_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::golem::component::api::__export_golem_component_api_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::golem::component::api);
        $($path_to_types_root)*::
        exports::golem::api::oplog_processor::__export_golem_api_oplog_processor_1_1_7_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::golem::api::oplog_processor);
    };
}
#[doc(inline)]
pub(crate) use __export_oplog_processor_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:golem:component:oplog-processor:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 11209] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xc3V\x01A\x02\x01A(\x01\
B\x05\x01r\x02\x07secondsw\x0bnanosecondsy\x04\0\x08datetime\x03\0\0\x01@\0\0\x01\
\x04\0\x03now\x01\x02\x04\0\x0aresolution\x01\x02\x03\0\x1cwasi:clocks/wall-cloc\
k@0.2.3\x05\0\x01B\x0a\x04\0\x08pollable\x03\x01\x01h\0\x01@\x01\x04self\x01\0\x7f\
\x04\0\x16[method]pollable.ready\x01\x02\x01@\x01\x04self\x01\x01\0\x04\0\x16[me\
thod]pollable.block\x01\x03\x01p\x01\x01py\x01@\x01\x02in\x04\0\x05\x04\0\x04pol\
l\x01\x06\x03\0\x12wasi:io/poll@0.2.3\x05\x01\x02\x03\0\0\x08datetime\x02\x03\0\x01\
\x08pollable\x01BU\x02\x03\x02\x01\x02\x04\0\x08datetime\x03\0\0\x02\x03\x02\x01\
\x03\x04\0\x08pollable\x03\0\x02\x01r\x02\x09high-bitsw\x08low-bitsw\x04\0\x04uu\
id\x03\0\x04\x01r\x01\x04uuid\x05\x04\0\x0ccomponent-id\x03\0\x06\x01r\x02\x0cco\
mponent-id\x07\x08agent-ids\x04\0\x08agent-id\x03\0\x08\x01z\x04\0\x0anode-index\
\x03\0\x0a\x01w\x04\0\x0bresource-id\x03\0\x0c\x01m\x02\x05owned\x08borrowed\x04\
\0\x0dresource-mode\x03\0\x0e\x01o\x02s\x0b\x01p\x10\x01k\x0b\x01o\x02s\x12\x01p\
\x13\x01ps\x01p\x0b\x01o\x02\x12\x12\x01o\x02\x0d\x0f\x01q\x16\x0brecord-type\x01\
\x11\0\x0cvariant-type\x01\x14\0\x09enum-type\x01\x15\0\x0aflags-type\x01\x15\0\x0a\
tuple-type\x01\x16\0\x09list-type\x01\x0b\0\x0boption-type\x01\x0b\0\x0bresult-t\
ype\x01\x17\0\x0cprim-u8-type\0\0\x0dprim-u16-type\0\0\x0dprim-u32-type\0\0\x0dp\
rim-u64-type\0\0\x0cprim-s8-type\0\0\x0dprim-s16-type\0\0\x0dprim-s32-type\0\0\x0d\
prim-s64-type\0\0\x0dprim-f32-type\0\0\x0dprim-f64-type\0\0\x0eprim-char-type\0\0\
\x0eprim-bool-type\0\0\x10prim-string-type\0\0\x0bhandle-type\x01\x18\0\x04\0\x0d\
wit-type-node\x03\0\x19\x01ks\x01r\x03\x04name\x1b\x05owner\x1b\x04type\x1a\x04\0\
\x13named-wit-type-node\x03\0\x1c\x01p\x1d\x01r\x01\x05nodes\x1e\x04\0\x08wit-ty\
pe\x03\0\x1f\x01r\x01\x05values\x04\0\x03uri\x03\0!\x01o\x02y\x12\x01p\x7f\x01j\x01\
\x12\x01\x12\x01o\x02\"w\x01q\x16\x0crecord-value\x01\x16\0\x0dvariant-value\x01\
#\0\x0aenum-value\x01y\0\x0bflags-value\x01$\0\x0btuple-value\x01\x16\0\x0alist-\
value\x01\x16\0\x0coption-value\x01\x12\0\x0cresult-value\x01%\0\x07prim-u8\x01}\
\0\x08prim-u16\x01{\0\x08prim-u32\x01y\0\x08prim-u64\x01w\0\x07prim-s8\x01~\0\x08\
prim-s16\x01|\0\x08prim-s32\x01z\0\x08prim-s64\x01x\0\x0cprim-float32\x01v\0\x0c\
prim-float64\x01u\0\x09prim-char\x01t\0\x09prim-bool\x01\x7f\0\x0bprim-string\x01\
s\0\x06handle\x01&\0\x04\0\x08wit-node\x03\0'\x01p(\x01r\x01\x05nodes)\x04\0\x09\
wit-value\x03\0*\x01r\x02\x05value+\x03typ\x20\x04\0\x0evalue-and-type\x03\0,\x01\
q\x04\x0eprotocol-error\x01s\0\x06denied\x01s\0\x09not-found\x01s\0\x15remote-in\
ternal-error\x01s\0\x04\0\x09rpc-error\x03\0.\x04\0\x08wasm-rpc\x03\x01\x04\0\x14\
future-invoke-result\x03\x01\x04\0\x12cancellation-token\x03\x01\x01i0\x01@\x01\x08\
agent-id\x09\03\x04\0\x15[constructor]wasm-rpc\x014\x01h0\x01p+\x01j\x01+\x01/\x01\
@\x03\x04self5\x0dfunction-names\x0ffunction-params6\07\x04\0![method]wasm-rpc.i\
nvoke-and-await\x018\x01j\0\x01/\x01@\x03\x04self5\x0dfunction-names\x0ffunction\
-params6\09\x04\0\x17[method]wasm-rpc.invoke\x01:\x01i1\x01@\x03\x04self5\x0dfun\
ction-names\x0ffunction-params6\0;\x04\0'[method]wasm-rpc.async-invoke-and-await\
\x01<\x01@\x04\x04self5\x0escheduled-time\x01\x0dfunction-names\x0ffunction-para\
ms6\x01\0\x04\0$[method]wasm-rpc.schedule-invocation\x01=\x01i2\x01@\x04\x04self\
5\x0escheduled-time\x01\x0dfunction-names\x0ffunction-params6\0>\x04\0/[method]w\
asm-rpc.schedule-cancelable-invocation\x01?\x01h1\x01i\x03\x01@\x01\x04self\xc0\0\
\0\xc1\0\x04\0&[method]future-invoke-result.subscribe\x01B\x01k7\x01@\x01\x04sel\
f\xc0\0\0\xc3\0\x04\0\x20[method]future-invoke-result.get\x01D\x01h2\x01@\x01\x04\
self\xc5\0\x01\0\x04\0![method]cancellation-token.cancel\x01F\x01j\x01\x05\x01s\x01\
@\x01\x04uuids\0\xc7\0\x04\0\x0aparse-uuid\x01H\x01@\x01\x04uuid\x05\0s\x04\0\x0e\
uuid-to-string\x01I\x03\0\x15golem:rpc/types@0.2.2\x05\x04\x01B\x0f\x02\x03\x02\x01\
\x03\x04\0\x08pollable\x03\0\0\x01w\x04\0\x07instant\x03\0\x02\x01w\x04\0\x08dur\
ation\x03\0\x04\x01@\0\0\x03\x04\0\x03now\x01\x06\x01@\0\0\x05\x04\0\x0aresoluti\
on\x01\x07\x01i\x01\x01@\x01\x04when\x03\0\x08\x04\0\x11subscribe-instant\x01\x09\
\x01@\x01\x04when\x05\0\x08\x04\0\x12subscribe-duration\x01\x0a\x03\0!wasi:clock\
s/monotonic-clock@0.2.3\x05\x05\x02\x03\0\x03\x08duration\x02\x03\0\x02\x0ccompo\
nent-id\x02\x03\0\x02\x04uuid\x02\x03\0\x02\x0evalue-and-type\x02\x03\0\x02\x08a\
gent-id\x01B\x85\x01\x02\x03\x02\x01\x06\x04\0\x08duration\x03\0\0\x02\x03\x02\x01\
\x07\x04\0\x0ccomponent-id\x03\0\x02\x02\x03\x02\x01\x08\x04\0\x04uuid\x03\0\x04\
\x02\x03\x02\x01\x09\x04\0\x0evalue-and-type\x03\0\x06\x02\x03\x02\x01\x0a\x04\0\
\x08agent-id\x03\0\x08\x02\x03\x02\x01\x03\x04\0\x08pollable\x03\0\x0a\x01w\x04\0\
\x0boplog-index\x03\0\x0c\x01r\x02\x08agent-id\x09\x09oplog-idx\x0d\x04\0\x0apro\
mise-id\x03\0\x0e\x01w\x04\0\x11component-version\x03\0\x10\x01r\x01\x05values\x04\
\0\x0aaccount-id\x03\0\x12\x01r\x01\x04uuid\x05\x04\0\x0aproject-id\x03\0\x14\x01\
ku\x01r\x05\x0cmax-attemptsy\x09min-delay\x01\x09max-delay\x01\x0amultiplieru\x11\
max-jitter-factor\x16\x04\0\x0cretry-policy\x03\0\x17\x01q\x03\x0fpersist-nothin\
g\0\0\x1bpersist-remote-side-effects\0\0\x05smart\0\0\x04\0\x11persistence-level\
\x03\0\x19\x01m\x02\x09automatic\x0esnapshot-based\x04\0\x0bupdate-mode\x03\0\x1b\
\x01m\x06\x05equal\x09not-equal\x0dgreater-equal\x07greater\x0aless-equal\x04les\
s\x04\0\x11filter-comparator\x03\0\x1d\x01m\x05\x05equal\x09not-equal\x04like\x08\
not-like\x0bstarts-with\x04\0\x18string-filter-comparator\x03\0\x1f\x01m\x07\x07\
running\x04idle\x09suspended\x0binterrupted\x08retrying\x06failed\x06exited\x04\0\
\x0cagent-status\x03\0!\x01r\x02\x0acomparator\x20\x05values\x04\0\x11agent-name\
-filter\x03\0#\x01r\x02\x0acomparator\x1e\x05value\"\x04\0\x13agent-status-filte\
r\x03\0%\x01r\x02\x0acomparator\x1e\x05valuew\x04\0\x14agent-version-filter\x03\0\
'\x01r\x02\x0acomparator\x1e\x05valuew\x04\0\x17agent-created-at-filter\x03\0)\x01\
r\x03\x04names\x0acomparator\x20\x05values\x04\0\x10agent-env-filter\x03\0+\x01r\
\x03\x04names\x0acomparator\x20\x05values\x04\0\x18agent-config-vars-filter\x03\0\
-\x01q\x06\x04name\x01$\0\x06status\x01&\0\x07version\x01(\0\x0acreated-at\x01*\0\
\x03env\x01,\0\x10wasi-config-vars\x01.\0\x04\0\x15agent-property-filter\x03\0/\x01\
p0\x01r\x01\x07filters1\x04\0\x10agent-all-filter\x03\02\x01p3\x01r\x01\x07filte\
rs4\x04\0\x10agent-any-filter\x03\05\x01ps\x01o\x02ss\x01p8\x01r\x07\x08agent-id\
\x09\x04args7\x03env9\x0bconfig-vars9\x06status\"\x11component-versionw\x0bretry\
-countw\x04\0\x0eagent-metadata\x03\0:\x04\0\x0aget-agents\x03\x01\x01q\x02\x15r\
evert-to-oplog-index\x01\x0d\0\x17revert-last-invocations\x01w\0\x04\0\x13revert\
-agent-target\x03\0=\x01m\x02\x08original\x06forked\x04\0\x0bfork-result\x03\0?\x04\
\0\x12get-promise-result\x03\x01\x01k6\x01i<\x01@\x03\x0ccomponent-id\x03\x06fil\
ter\xc2\0\x07precise\x7f\0\xc3\0\x04\0\x17[constructor]get-agents\x01D\x01h<\x01\
p;\x01k\xc6\0\x01@\x01\x04self\xc5\0\0\xc7\0\x04\0\x1b[method]get-agents.get-nex\
t\x01H\x01hA\x01i\x0b\x01@\x01\x04self\xc9\0\0\xca\0\x04\0$[method]get-promise-r\
esult.subscribe\x01K\x01p}\x01k\xcc\0\x01@\x01\x04self\xc9\0\0\xcd\0\x04\0\x1e[m\
ethod]get-promise-result.get\x01N\x01@\0\0\x0f\x04\0\x0ecreate-promise\x01O\x01i\
A\x01@\x01\x0apromise-id\x0f\0\xd0\0\x04\0\x0bget-promise\x01Q\x01@\x02\x0apromi\
se-id\x0f\x04data\xcc\0\0\x7f\x04\0\x10complete-promise\x01R\x01@\0\0\x0d\x04\0\x0f\
get-oplog-index\x01S\x01@\x01\x09oplog-idx\x0d\x01\0\x04\0\x0fset-oplog-index\x01\
T\x01@\x01\x08replicas}\x01\0\x04\0\x0coplog-commit\x01U\x04\0\x14mark-begin-ope\
ration\x01S\x01@\x01\x05begin\x0d\x01\0\x04\0\x12mark-end-operation\x01V\x01@\0\0\
\x18\x04\0\x10get-retry-policy\x01W\x01@\x01\x10new-retry-policy\x18\x01\0\x04\0\
\x10set-retry-policy\x01X\x01@\0\0\x1a\x04\0\x1bget-oplog-persistence-level\x01Y\
\x01@\x01\x15new-persistence-level\x1a\x01\0\x04\0\x1bset-oplog-persistence-leve\
l\x01Z\x01@\0\0\x7f\x04\0\x14get-idempotence-mode\x01[\x01@\x01\x0aidempotent\x7f\
\x01\0\x04\0\x14set-idempotence-mode\x01\\\x01@\0\0\x05\x04\0\x18generate-idempo\
tency-key\x01]\x01@\x03\x08agent-id\x09\x0etarget-version\x11\x04mode\x1c\x01\0\x04\
\0\x0cupdate-agent\x01^\x01@\0\0;\x04\0\x11get-self-metadata\x01_\x01k;\x01@\x01\
\x08agent-id\x09\0\xe0\0\x04\0\x12get-agent-metadata\x01a\x01@\x03\x0fsource-age\
nt-id\x09\x0ftarget-agent-id\x09\x11oplog-idx-cut-off\x0d\x01\0\x04\0\x0afork-ag\
ent\x01b\x01@\x02\x08agent-id\x09\x0drevert-target>\x01\0\x04\0\x0crevert-agent\x01\
c\x01k\x03\x01@\x01\x13component-references\0\xe4\0\x04\0\x14resolve-component-i\
d\x01e\x01k\x09\x01@\x02\x13component-references\x0aagent-names\0\xe6\0\x04\0\x10\
resolve-agent-id\x01g\x04\0\x17resolve-agent-id-strict\x01g\x01@\x01\x08new-name\
s\0\xc0\0\x04\0\x04fork\x01h\x03\0\x14golem:api/host@1.1.7\x05\x0b\x01B7\x02\x03\
\x02\x01\x02\x04\0\x08datetime\x03\0\0\x04\0\x04span\x03\x01\x04\0\x12invocation\
-context\x03\x01\x01q\x01\x06string\x01s\0\x04\0\x0fattribute-value\x03\0\x04\x01\
r\x02\x03keys\x05value\x05\x04\0\x09attribute\x03\0\x06\x01p\x05\x01r\x02\x03key\
s\x06values\x08\x04\0\x0fattribute-chain\x03\0\x09\x01s\x04\0\x08trace-id\x03\0\x0b\
\x01s\x04\0\x07span-id\x03\0\x0d\x01h\x02\x01@\x01\x04self\x0f\0\x01\x04\0\x17[m\
ethod]span.started-at\x01\x10\x01@\x03\x04self\x0f\x04names\x05value\x05\x01\0\x04\
\0\x1a[method]span.set-attribute\x01\x11\x01p\x07\x01@\x02\x04self\x0f\x0aattrib\
utes\x12\x01\0\x04\0\x1b[method]span.set-attributes\x01\x13\x01@\x01\x04self\x0f\
\x01\0\x04\0\x13[method]span.finish\x01\x14\x01h\x03\x01@\x01\x04self\x15\0\x0c\x04\
\0#[method]invocation-context.trace-id\x01\x16\x01@\x01\x04self\x15\0\x0e\x04\0\"\
[method]invocation-context.span-id\x01\x17\x01i\x03\x01k\x18\x01@\x01\x04self\x15\
\0\x19\x04\0![method]invocation-context.parent\x01\x1a\x01k\x05\x01@\x03\x04self\
\x15\x03keys\x09inherited\x7f\0\x1b\x04\0([method]invocation-context.get-attribu\
te\x01\x1c\x01@\x02\x04self\x15\x09inherited\x7f\0\x12\x04\0)[method]invocation-\
context.get-attributes\x01\x1d\x01@\x02\x04self\x15\x03keys\0\x08\x04\0.[method]\
invocation-context.get-attribute-chain\x01\x1e\x01p\x0a\x01@\x01\x04self\x15\0\x1f\
\x04\0/[method]invocation-context.get-attribute-chains\x01\x20\x01o\x02ss\x01p!\x01\
@\x01\x04self\x15\0\"\x04\00[method]invocation-context.trace-context-headers\x01\
#\x01i\x02\x01@\x01\x04names\0$\x04\0\x0astart-span\x01%\x01@\0\0\x18\x04\0\x0fc\
urrent-context\x01&\x01@\x01\x05allow\x7f\0\x7f\x04\0&allow-forwarding-trace-con\
text-headers\x01'\x03\0\x17golem:api/context@1.1.7\x05\x0c\x02\x03\0\x02\x09wit-\
value\x02\x03\0\x04\x0aaccount-id\x02\x03\0\x04\x11component-version\x02\x03\0\x04\
\x0boplog-index\x02\x03\0\x04\x11persistence-level\x02\x03\0\x04\x0aproject-id\x02\
\x03\0\x04\x0cretry-policy\x02\x03\0\x04\x04uuid\x02\x03\0\x04\x08agent-id\x02\x03\
\0\x05\x09attribute\x02\x03\0\x05\x0fattribute-value\x02\x03\0\x05\x07span-id\x02\
\x03\0\x05\x08trace-id\x01B\x8b\x01\x02\x03\x02\x01\x02\x04\0\x08datetime\x03\0\0\
\x02\x03\x02\x01\x0d\x04\0\x09wit-value\x03\0\x02\x02\x03\x02\x01\x0e\x04\0\x0aa\
ccount-id\x03\0\x04\x02\x03\x02\x01\x0f\x04\0\x11component-version\x03\0\x06\x02\
\x03\x02\x01\x10\x04\0\x0boplog-index\x03\0\x08\x02\x03\x02\x01\x11\x04\0\x11per\
sistence-level\x03\0\x0a\x02\x03\x02\x01\x12\x04\0\x0aproject-id\x03\0\x0c\x02\x03\
\x02\x01\x13\x04\0\x0cretry-policy\x03\0\x0e\x02\x03\x02\x01\x14\x04\0\x04uuid\x03\
\0\x10\x02\x03\x02\x01\x15\x04\0\x08agent-id\x03\0\x12\x02\x03\x02\x01\x16\x04\0\
\x09attribute\x03\0\x14\x02\x03\x02\x01\x17\x04\0\x0fattribute-value\x03\0\x16\x02\
\x03\x02\x01\x18\x04\0\x07span-id\x03\0\x18\x02\x03\x02\x01\x19\x04\0\x08trace-i\
d\x03\0\x1a\x01k\x09\x01q\x06\x0aread-local\0\0\x0bwrite-local\0\0\x0bread-remot\
e\0\0\x0cwrite-remote\0\0\x14write-remote-batched\x01\x1c\0\x18write-remote-tran\
saction\x01\x1c\0\x04\0\x15wrapped-function-type\x03\0\x1d\x01o\x02ss\x01p\x1f\x01\
r\x04\x0finstallation-id\x11\x04names\x07versions\x0aparameters\x20\x04\0\x1fplu\
gin-installation-description\x03\0!\x01ps\x01k\x13\x01p\"\x01r\x0b\x09timestamp\x01\
\x08agent-id\x13\x11component-version\x07\x04args#\x03env\x20\x0acreated-by\x05\x0a\
project-id\x0d\x06parent$\x0ecomponent-sizew\x20initial-total-linear-memory-size\
w\x16initial-active-plugins%\x04\0\x11create-parameters\x03\0&\x01r\x05\x09times\
tamp\x01\x0dfunction-names\x07request\x03\x08response\x03\x15wrapped-function-ty\
pe\x1e\x04\0$imported-function-invoked-parameters\x03\0(\x01k\x19\x01kw\x01p\x15\
\x01r\x06\x07span-id\x19\x05start\x01\x06parent*\x0elinked-context+\x0aattribute\
s,\x09inherited\x7f\x04\0\x0flocal-span-data\x03\0-\x01r\x01\x07span-id\x19\x04\0\
\x12external-span-data\x03\0/\x01q\x02\x0alocal-span\x01.\0\x0dexternal-span\x01\
0\0\x04\0\x09span-data\x03\01\x01p\x03\x01p2\x01p4\x01r\x07\x09timestamp\x01\x0d\
function-names\x07request3\x0fidempotency-keys\x08trace-id\x1b\x0ctrace-states#\x12\
invocation-context5\x04\0$exported-function-invoked-parameters\x03\06\x01k\x03\x01\
r\x03\x09timestamp\x01\x08response8\x0dconsumed-fuelx\x04\0&exported-function-co\
mpleted-parameters\x03\09\x01r\x02\x09timestamp\x01\x05errors\x04\0\x10error-par\
ameters\x03\0;\x01r\x03\x09timestamp\x01\x05start\x09\x03end\x09\x04\0\x0fjump-p\
arameters\x03\0=\x01r\x02\x09timestamp\x01\x0cretry-policy\x0f\x04\0\x1echange-r\
etry-policy-parameters\x03\0?\x01r\x02\x09timestamp\x01\x0bbegin-index\x09\x04\0\
\x1cend-atomic-region-parameters\x03\0A\x01r\x02\x09timestamp\x01\x0bbegin-index\
\x09\x04\0\x1bend-remote-write-parameters\x03\0C\x01k3\x01r\x03\x0fidempotency-k\
eys\x0dfunction-names\x05input\xc5\0\x04\0'exported-function-invocation-paramete\
rs\x03\0F\x01q\x02\x11exported-function\x01\xc7\0\0\x0dmanual-update\x01\x07\0\x04\
\0\x10agent-invocation\x03\0H\x01r\x02\x09timestamp\x01\x0ainvocation\xc9\0\x04\0\
#pending-agent-invocation-parameters\x03\0J\x01p}\x01q\x02\x0bauto-update\0\0\x0e\
snapshot-based\x01\xcc\0\0\x04\0\x12update-description\x03\0M\x01r\x03\x09timest\
amp\x01\x0etarget-version\x07\x12update-description\xce\0\x04\0\x19pending-updat\
e-parameters\x03\0O\x01r\x04\x09timestamp\x01\x0etarget-version\x07\x12new-compo\
nent-sizew\x12new-active-plugins%\x04\0\x1csuccessful-update-parameters\x03\0Q\x01\
ks\x01r\x03\x09timestamp\x01\x0etarget-version\x07\x07details\xd3\0\x04\0\x18fai\
led-update-parameters\x03\0T\x01r\x02\x09timestamp\x01\x05deltaw\x04\0\x16grow-m\
emory-parameters\x03\0V\x01w\x04\0\x11agent-resource-id\x03\0X\x01r\x04\x09times\
tamp\x01\x0bresource-id\xd9\0\x04names\x05owners\x04\0\x1acreate-resource-parame\
ters\x03\0Z\x01r\x04\x09timestamp\x01\x0bresource-id\xd9\0\x04names\x05owners\x04\
\0\x18drop-resource-parameters\x03\0\\\x01m\x08\x06stdout\x06stderr\x05trace\x05\
debug\x04info\x04warn\x05error\x08critical\x04\0\x09log-level\x03\0^\x01r\x04\x09\
timestamp\x01\x05level\xdf\0\x07contexts\x07messages\x04\0\x0elog-parameters\x03\
\0`\x01r\x02\x09timestamp\x01\x06plugin\"\x04\0\x1aactivate-plugin-parameters\x03\
\0b\x01r\x02\x09timestamp\x01\x06plugin\"\x04\0\x1cdeactivate-plugin-parameters\x03\
\0d\x01r\x03\x09timestamp\x01\x05start\x09\x03end\x09\x04\0\x11revert-parameters\
\x03\0f\x01r\x02\x09timestamp\x01\x0fidempotency-keys\x04\0\x1ccancel-invocation\
-parameters\x03\0h\x01r\x05\x09timestamp\x01\x07span-id\x19\x06parent*\x0elinked\
-context*\x0aattributes,\x04\0\x15start-span-parameters\x03\0j\x01r\x02\x09times\
tamp\x01\x07span-id\x19\x04\0\x16finish-span-parameters\x03\0l\x01r\x04\x09times\
tamp\x01\x07span-id\x19\x03keys\x05value\x17\x04\0\x1dset-span-attribute-paramet\
ers\x03\0n\x01r\x02\x09timestamp\x01\x11persistence-level\x0b\x04\0#change-persi\
stence-level-parameters\x03\0p\x01r\x02\x09timestamp\x01\x0etransaction-ids\x04\0\
#begin-remote-transaction-parameters\x03\0r\x01r\x02\x09timestamp\x01\x0bbegin-i\
ndex\x09\x04\0\x1dremote-transaction-parameters\x03\0t\x01q%\x06create\x01'\0\x19\
imported-function-invoked\x01)\0\x19exported-function-invoked\x017\0\x1bexported\
-function-completed\x01:\0\x07suspend\x01\x01\0\x05error\x01<\0\x05no-op\x01\x01\
\0\x04jump\x01>\0\x0binterrupted\x01\x01\0\x06exited\x01\x01\0\x13change-retry-p\
olicy\x01\xc0\0\0\x13begin-atomic-region\x01\x01\0\x11end-atomic-region\x01\xc2\0\
\0\x12begin-remote-write\x01\x01\0\x10end-remote-write\x01\xc4\0\0\x18pending-ag\
ent-invocation\x01\xcb\0\0\x0epending-update\x01\xd0\0\0\x11successful-update\x01\
\xd2\0\0\x0dfailed-update\x01\xd5\0\0\x0bgrow-memory\x01\xd7\0\0\x0fcreate-resou\
rce\x01\xdb\0\0\x0ddrop-resource\x01\xdd\0\0\x03log\x01\xe1\0\0\x07restart\x01\x01\
\0\x0factivate-plugin\x01\xe3\0\0\x11deactivate-plugin\x01\xe5\0\0\x06revert\x01\
\xe7\0\0\x11cancel-invocation\x01\xe9\0\0\x0astart-span\x01\xeb\0\0\x0bfinish-sp\
an\x01\xed\0\0\x12set-span-attribute\x01\xef\0\0\x18change-persistence-level\x01\
\xf1\0\0\x18begin-remote-transaction\x01\xf3\0\0\x1dpre-commit-remote-transactio\
n\x01\xf5\0\0\x1fpre-rollback-remote-transaction\x01\xf5\0\0\x1ccommitted-remote\
-transaction\x01\xf5\0\0\x1erolled-back-remote-transaction\x01\xf5\0\0\x04\0\x0b\
oplog-entry\x03\0v\x04\0\x09get-oplog\x03\x01\x04\0\x0csearch-oplog\x03\x01\x01i\
x\x01@\x02\x08agent-id\x13\x05start\x09\0\xfa\0\x04\0\x16[constructor]get-oplog\x01\
{\x01hx\x01p\xf7\0\x01k\xfd\0\x01@\x01\x04self\xfc\0\0\xfe\0\x04\0\x1a[method]ge\
t-oplog.get-next\x01\x7f\x01iy\x01@\x02\x08agent-id\x13\x04texts\0\x80\x01\x04\0\
\x19[constructor]search-oplog\x01\x81\x01\x01hy\x01o\x02\x09\xf7\0\x01p\x83\x01\x01\
k\x84\x01\x01@\x01\x04self\x82\x01\0\x85\x01\x04\0\x1d[method]search-oplog.get-n\
ext\x01\x86\x01\x03\0\x15golem:api/oplog@1.1.7\x05\x1a\x01B\x03\x01ps\x01@\0\0\0\
\x04\0\x15get-invoked-functions\x01\x01\x04\0\x13golem:component/api\x05\x1b\x02\
\x03\0\x04\x0eagent-metadata\x02\x03\0\x06\x0boplog-entry\x01B\x18\x02\x03\x02\x01\
\x02\x04\0\x08datetime\x03\0\0\x02\x03\x02\x01\x0d\x04\0\x09wit-value\x03\0\x02\x02\
\x03\x02\x01\x0e\x04\0\x0aaccount-id\x03\0\x04\x02\x03\x02\x01\x10\x04\0\x0boplo\
g-index\x03\0\x06\x02\x03\x02\x01\x1c\x04\0\x0eagent-metadata\x03\0\x08\x02\x03\x02\
\x01\x1d\x04\0\x0boplog-entry\x03\0\x0a\x02\x03\x02\x01\x07\x04\0\x0ccomponent-i\
d\x03\0\x0c\x02\x03\x02\x01\x0a\x04\0\x08agent-id\x03\0\x0e\x01r\x01\x0aaccount-\
id\x05\x04\0\x0caccount-info\x03\0\x10\x01o\x02ss\x01p\x12\x01p\x0b\x01j\0\x01s\x01\
@\x07\x0caccount-info\x11\x06config\x13\x0ccomponent-id\x0d\x08agent-id\x0f\x08m\
etadata\x09\x11first-entry-index\x07\x07entries\x14\0\x15\x04\0\x07process\x01\x16\
\x04\0\x1fgolem:api/oplog-processor@1.1.7\x05\x1e\x04\0\x1fgolem:component/oplog\
-processor\x04\0\x0b\x15\x01\0\x0foplog-processor\x03\0\0\0G\x09producers\x01\x0c\
processed-by\x02\x0dwit-component\x070.227.1\x10wit-bindgen-rust\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
